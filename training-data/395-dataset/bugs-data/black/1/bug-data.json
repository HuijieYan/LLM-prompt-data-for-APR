{
    "black:1": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/black_1/black.py": {
            "buggy_functions": [
                {
                    "function_name": "reformat_many",
                    "function_code": "def reformat_many(\n    sources: Set[Path], fast: bool, write_back: WriteBack, mode: Mode, report: \"Report\"\n) -> None:\n    \"\"\"Reformat multiple files using a ProcessPoolExecutor.\"\"\"\n    loop = asyncio.get_event_loop()\n    worker_count = os.cpu_count()\n    if sys.platform == \"win32\":\n        # Work around https://bugs.python.org/issue26903\n        worker_count = min(worker_count, 61)\n    executor = ProcessPoolExecutor(max_workers=worker_count)\n    try:\n        loop.run_until_complete(\n            schedule_formatting(\n                sources=sources,\n                fast=fast,\n                write_back=write_back,\n                mode=mode,\n                report=report,\n                loop=loop,\n                executor=executor,\n            )\n        )\n    finally:\n        shutdown(loop)\n        executor.shutdown()\n",
                    "decorators": [],
                    "docstring": "Reformat multiple files using a ProcessPoolExecutor.",
                    "start_line": 612,
                    "end_line": 636,
                    "variables": {
                        "Set": [
                            613
                        ],
                        "Path": [
                            613
                        ],
                        "bool": [
                            613
                        ],
                        "WriteBack": [
                            613
                        ],
                        "Mode": [
                            613
                        ],
                        "loop": [
                            616,
                            635,
                            630,
                            623
                        ],
                        "asyncio.get_event_loop": [
                            616
                        ],
                        "asyncio": [
                            616
                        ],
                        "worker_count": [
                            617,
                            620,
                            621
                        ],
                        "os.cpu_count": [
                            617
                        ],
                        "os": [
                            617
                        ],
                        "sys.platform": [
                            618
                        ],
                        "sys": [
                            618
                        ],
                        "min": [
                            620
                        ],
                        "executor": [
                            636,
                            621,
                            631
                        ],
                        "ProcessPoolExecutor": [
                            621
                        ],
                        "loop.run_until_complete": [
                            623
                        ],
                        "schedule_formatting": [
                            624
                        ],
                        "sources": [
                            625
                        ],
                        "fast": [
                            626
                        ],
                        "write_back": [
                            627
                        ],
                        "mode": [
                            628
                        ],
                        "report": [
                            629
                        ],
                        "shutdown": [
                            635
                        ],
                        "executor.shutdown": [
                            636
                        ]
                    },
                    "filtered_variables": {
                        "Set": [
                            613
                        ],
                        "Path": [
                            613
                        ],
                        "WriteBack": [
                            613
                        ],
                        "Mode": [
                            613
                        ],
                        "loop": [
                            616,
                            635,
                            630,
                            623
                        ],
                        "asyncio.get_event_loop": [
                            616
                        ],
                        "asyncio": [
                            616
                        ],
                        "worker_count": [
                            617,
                            620,
                            621
                        ],
                        "os.cpu_count": [
                            617
                        ],
                        "os": [
                            617
                        ],
                        "sys.platform": [
                            618
                        ],
                        "sys": [
                            618
                        ],
                        "executor": [
                            636,
                            621,
                            631
                        ],
                        "ProcessPoolExecutor": [
                            621
                        ],
                        "loop.run_until_complete": [
                            623
                        ],
                        "schedule_formatting": [
                            624
                        ],
                        "sources": [
                            625
                        ],
                        "fast": [
                            626
                        ],
                        "write_back": [
                            627
                        ],
                        "mode": [
                            628
                        ],
                        "report": [
                            629
                        ],
                        "shutdown": [
                            635
                        ],
                        "executor.shutdown": [
                            636
                        ]
                    },
                    "diff_line_number": 621,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.get_event_loop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.cpu_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.platform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "executor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ProcessPoolExecutor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loop.run_until_complete": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "schedule_formatting": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sources": {
                                    "variable_value": "{PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpisrhxus5/two.py'), PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpisrhxus5/one.py')}",
                                    "variable_type": "set",
                                    "variable_shape": "2"
                                },
                                "fast": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "Mode(target_versions=set(), line_length=88, string_normalization=True, is_pyi=False)",
                                    "variable_type": "Mode",
                                    "variable_shape": null
                                },
                                "report": {
                                    "variable_value": "Report(check=False, diff=False, quiet=False, verbose=False, change_count=0, same_count=0, failure_count=0)",
                                    "variable_type": "Report",
                                    "variable_shape": null
                                },
                                "shutdown": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "executor.shutdown": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.get_event_loop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "worker_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.cpu_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.platform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "executor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ProcessPoolExecutor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loop.run_until_complete": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "schedule_formatting": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sources": {
                                    "variable_value": "{PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpsh3xvdo3/one.py'), PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpsh3xvdo3/two.py')}",
                                    "variable_type": "set",
                                    "variable_shape": "2"
                                },
                                "fast": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "Mode(target_versions=set(), line_length=88, string_normalization=True, is_pyi=False)",
                                    "variable_type": "Mode",
                                    "variable_shape": null
                                },
                                "report": {
                                    "variable_value": "Report(check=False, diff=False, quiet=False, verbose=False, change_count=0, same_count=0, failure_count=0)",
                                    "variable_type": "Report",
                                    "variable_shape": null
                                },
                                "shutdown": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "executor.shutdown": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "schedule_formatting",
                    "function_code": "async def schedule_formatting(\n    sources: Set[Path],\n    fast: bool,\n    write_back: WriteBack,\n    mode: Mode,\n    report: \"Report\",\n    loop: asyncio.AbstractEventLoop,\n    executor: Executor,\n) -> None:\n    \"\"\"Run formatting of `sources` in parallel using the provided `executor`.\n\n    (Use ProcessPoolExecutors for actual parallelism.)\n\n    `write_back`, `fast`, and `mode` options are passed to\n    :func:`format_file_in_place`.\n    \"\"\"\n    cache: Cache = {}\n    if write_back != WriteBack.DIFF:\n        cache = read_cache(mode)\n        sources, cached = filter_cached(cache, sources)\n        for src in sorted(cached):\n            report.done(src, Changed.CACHED)\n    if not sources:\n        return\n\n    cancelled = []\n    sources_to_cache = []\n    lock = None\n    if write_back == WriteBack.DIFF:\n        # For diff output, we need locks to ensure we don't interleave output\n        # from different processes.\n        manager = Manager()\n        lock = manager.Lock()\n    tasks = {\n        asyncio.ensure_future(\n            loop.run_in_executor(\n                executor, format_file_in_place, src, fast, mode, write_back, lock\n            )\n        ): src\n        for src in sorted(sources)\n    }\n    pending: Iterable[\"asyncio.Future[bool]\"] = tasks.keys()\n    try:\n        loop.add_signal_handler(signal.SIGINT, cancel, pending)\n        loop.add_signal_handler(signal.SIGTERM, cancel, pending)\n    except NotImplementedError:\n        # There are no good alternatives for these on Windows.\n        pass\n    while pending:\n        done, _ = await asyncio.wait(pending, return_when=asyncio.FIRST_COMPLETED)\n        for task in done:\n            src = tasks.pop(task)\n            if task.cancelled():\n                cancelled.append(task)\n            elif task.exception():\n                report.failed(src, str(task.exception()))\n            else:\n                changed = Changed.YES if task.result() else Changed.NO\n                # If the file was written back or was successfully checked as\n                # well-formatted, store this information in the cache.\n                if write_back is WriteBack.YES or (\n                    write_back is WriteBack.CHECK and changed is Changed.NO\n                ):\n                    sources_to_cache.append(src)\n                report.done(src, changed)\n    if cancelled:\n        await asyncio.gather(*cancelled, loop=loop, return_exceptions=True)\n    if sources_to_cache:\n        write_cache(cache, sources_to_cache, mode)\n",
                    "decorators": [],
                    "docstring": "Run formatting of `sources` in parallel using the provided `executor`.\n\n(Use ProcessPoolExecutors for actual parallelism.)\n\n`write_back`, `fast`, and `mode` options are passed to\n:func:`format_file_in_place`.",
                    "start_line": 639,
                    "end_line": 707,
                    "variables": {
                        "Set": [
                            640
                        ],
                        "Path": [
                            640
                        ],
                        "bool": [
                            641
                        ],
                        "WriteBack": [
                            642,
                            656,
                            667,
                            700,
                            699
                        ],
                        "Mode": [
                            643
                        ],
                        "asyncio.AbstractEventLoop": [
                            645
                        ],
                        "asyncio": [
                            688,
                            673,
                            705,
                            645
                        ],
                        "Executor": [
                            646
                        ],
                        "cache": [
                            657,
                            658,
                            707,
                            655
                        ],
                        "Cache": [
                            655
                        ],
                        "write_back": [
                            700,
                            675,
                            656,
                            699,
                            667
                        ],
                        "WriteBack.DIFF": [
                            656,
                            667
                        ],
                        "read_cache": [
                            657
                        ],
                        "mode": [
                            657,
                            675,
                            707
                        ],
                        "sources": [
                            658,
                            661,
                            678
                        ],
                        "cached": [
                            658,
                            659
                        ],
                        "filter_cached": [
                            658
                        ],
                        "src": [
                            675,
                            677,
                            678,
                            690,
                            659,
                            660,
                            694,
                            702,
                            703
                        ],
                        "sorted": [
                            659,
                            678
                        ],
                        "report.done": [
                            660,
                            703
                        ],
                        "report": [
                            660,
                            694,
                            703
                        ],
                        "Changed.CACHED": [
                            660
                        ],
                        "Changed": [
                            696,
                            700,
                            660
                        ],
                        "cancelled": [
                            664,
                            705,
                            692,
                            704
                        ],
                        "sources_to_cache": [
                            665,
                            706,
                            707,
                            702
                        ],
                        "lock": [
                            666,
                            675,
                            671
                        ],
                        "manager": [
                            670,
                            671
                        ],
                        "Manager": [
                            670
                        ],
                        "manager.Lock": [
                            671
                        ],
                        "tasks": [
                            672,
                            690,
                            680
                        ],
                        "asyncio.ensure_future": [
                            673
                        ],
                        "loop.run_in_executor": [
                            674
                        ],
                        "loop": [
                            682,
                            705,
                            674,
                            683
                        ],
                        "executor": [
                            675
                        ],
                        "format_file_in_place": [
                            675
                        ],
                        "fast": [
                            675
                        ],
                        "pending": [
                            680,
                            682,
                            683,
                            687,
                            688
                        ],
                        "Iterable": [
                            680
                        ],
                        "tasks.keys": [
                            680
                        ],
                        "loop.add_signal_handler": [
                            682,
                            683
                        ],
                        "signal.SIGINT": [
                            682
                        ],
                        "signal": [
                            682,
                            683
                        ],
                        "cancel": [
                            682,
                            683
                        ],
                        "signal.SIGTERM": [
                            683
                        ],
                        "NotImplementedError": [
                            684
                        ],
                        "done": [
                            688,
                            689
                        ],
                        "_": [
                            688
                        ],
                        "asyncio.wait": [
                            688
                        ],
                        "asyncio.FIRST_COMPLETED": [
                            688
                        ],
                        "task": [
                            689,
                            690,
                            691,
                            692,
                            693,
                            694,
                            696
                        ],
                        "tasks.pop": [
                            690
                        ],
                        "task.cancelled": [
                            691
                        ],
                        "cancelled.append": [
                            692
                        ],
                        "task.exception": [
                            693,
                            694
                        ],
                        "report.failed": [
                            694
                        ],
                        "str": [
                            694
                        ],
                        "changed": [
                            696,
                            700,
                            703
                        ],
                        "task.result": [
                            696
                        ],
                        "Changed.YES": [
                            696
                        ],
                        "Changed.NO": [
                            696,
                            700
                        ],
                        "WriteBack.YES": [
                            699
                        ],
                        "WriteBack.CHECK": [
                            700
                        ],
                        "sources_to_cache.append": [
                            702
                        ],
                        "asyncio.gather": [
                            705
                        ],
                        "write_cache": [
                            707
                        ]
                    },
                    "filtered_variables": {
                        "Set": [
                            640
                        ],
                        "Path": [
                            640
                        ],
                        "WriteBack": [
                            642,
                            656,
                            667,
                            700,
                            699
                        ],
                        "Mode": [
                            643
                        ],
                        "asyncio.AbstractEventLoop": [
                            645
                        ],
                        "asyncio": [
                            688,
                            673,
                            705,
                            645
                        ],
                        "Executor": [
                            646
                        ],
                        "cache": [
                            657,
                            658,
                            707,
                            655
                        ],
                        "Cache": [
                            655
                        ],
                        "write_back": [
                            700,
                            675,
                            656,
                            699,
                            667
                        ],
                        "WriteBack.DIFF": [
                            656,
                            667
                        ],
                        "read_cache": [
                            657
                        ],
                        "mode": [
                            657,
                            675,
                            707
                        ],
                        "sources": [
                            658,
                            661,
                            678
                        ],
                        "cached": [
                            658,
                            659
                        ],
                        "filter_cached": [
                            658
                        ],
                        "src": [
                            675,
                            677,
                            678,
                            690,
                            659,
                            660,
                            694,
                            702,
                            703
                        ],
                        "report.done": [
                            660,
                            703
                        ],
                        "report": [
                            660,
                            694,
                            703
                        ],
                        "Changed.CACHED": [
                            660
                        ],
                        "Changed": [
                            696,
                            700,
                            660
                        ],
                        "cancelled": [
                            664,
                            705,
                            692,
                            704
                        ],
                        "sources_to_cache": [
                            665,
                            706,
                            707,
                            702
                        ],
                        "lock": [
                            666,
                            675,
                            671
                        ],
                        "manager": [
                            670,
                            671
                        ],
                        "Manager": [
                            670
                        ],
                        "manager.Lock": [
                            671
                        ],
                        "tasks": [
                            672,
                            690,
                            680
                        ],
                        "asyncio.ensure_future": [
                            673
                        ],
                        "loop.run_in_executor": [
                            674
                        ],
                        "loop": [
                            682,
                            705,
                            674,
                            683
                        ],
                        "executor": [
                            675
                        ],
                        "format_file_in_place": [
                            675
                        ],
                        "fast": [
                            675
                        ],
                        "pending": [
                            680,
                            682,
                            683,
                            687,
                            688
                        ],
                        "Iterable": [
                            680
                        ],
                        "tasks.keys": [
                            680
                        ],
                        "loop.add_signal_handler": [
                            682,
                            683
                        ],
                        "signal.SIGINT": [
                            682
                        ],
                        "signal": [
                            682,
                            683
                        ],
                        "cancel": [
                            682,
                            683
                        ],
                        "signal.SIGTERM": [
                            683
                        ],
                        "done": [
                            688,
                            689
                        ],
                        "_": [
                            688
                        ],
                        "asyncio.wait": [
                            688
                        ],
                        "asyncio.FIRST_COMPLETED": [
                            688
                        ],
                        "task": [
                            689,
                            690,
                            691,
                            692,
                            693,
                            694,
                            696
                        ],
                        "tasks.pop": [
                            690
                        ],
                        "task.cancelled": [
                            691
                        ],
                        "cancelled.append": [
                            692
                        ],
                        "task.exception": [
                            693,
                            694
                        ],
                        "report.failed": [
                            694
                        ],
                        "changed": [
                            696,
                            700,
                            703
                        ],
                        "task.result": [
                            696
                        ],
                        "Changed.YES": [
                            696
                        ],
                        "Changed.NO": [
                            696,
                            700
                        ],
                        "WriteBack.YES": [
                            699
                        ],
                        "WriteBack.CHECK": [
                            700
                        ],
                        "sources_to_cache.append": [
                            702
                        ],
                        "asyncio.gather": [
                            705
                        ],
                        "write_cache": [
                            707
                        ]
                    },
                    "diff_line_number": 646,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.AbstractEventLoop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Executor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_back": {
                                    "variable_value": "<WriteBack.YES: 1>",
                                    "variable_type": "WriteBack",
                                    "variable_shape": null
                                },
                                "WriteBack.DIFF": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "read_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": "Mode(target_versions=set(), line_length=88, string_normalization=True, is_pyi=False)",
                                    "variable_type": "Mode",
                                    "variable_shape": null
                                },
                                "sources": {
                                    "variable_value": "{PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp3ppogr3j/two.py'), PosixPath('/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp3ppogr3j/one.py')}",
                                    "variable_type": "set",
                                    "variable_shape": "2"
                                },
                                "cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filter_cached": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "report.done": {
                                    "variable_value": "<bound method Report.done of Report(check=False, diff=False, quiet=False, verbose=False, change_count=0, same_count=0, failure_count=0)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "report": {
                                    "variable_value": "Report(check=False, diff=False, quiet=False, verbose=False, change_count=0, same_count=0, failure_count=0)",
                                    "variable_type": "Report",
                                    "variable_shape": null
                                },
                                "Changed.CACHED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Changed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cancelled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sources_to_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "manager.Lock": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.ensure_future": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loop.run_in_executor": {
                                    "variable_value": "<bound method BaseEventLoop.run_in_executor of <_UnixSelectorEventLoop running=True closed=False debug=False>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "loop": {
                                    "variable_value": "<_UnixSelectorEventLoop running=True closed=False debug=False>",
                                    "variable_type": "_UnixSelectorEventLoop",
                                    "variable_shape": null
                                },
                                "executor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format_file_in_place": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fast": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "pending": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loop.add_signal_handler": {
                                    "variable_value": "<bound method _UnixSelectorEventLoop.add_signal_handler of <_UnixSelectorEventLoop running=True closed=False debug=False>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "signal.SIGINT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "signal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cancel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "signal.SIGTERM": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.wait": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.FIRST_COMPLETED": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tasks.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.cancelled": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cancelled.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.exception": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "report.failed": {
                                    "variable_value": "<bound method Report.failed of Report(check=False, diff=False, quiet=False, verbose=False, change_count=0, same_count=0, failure_count=0)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "changed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "task.result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Changed.YES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Changed.NO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.YES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "WriteBack.CHECK": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sources_to_cache.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "write_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def supports_feature(target_versions: Set[TargetVersion], feature: Feature) -> bool:\n    return all(feature in VERSION_TO_FEATURES[version] for version in target_versions)",
                "def find_pyproject_toml(path_search_start: str) -> Optional[str]:\n    \"\"\"Find the absolute filepath to a pyproject.toml if it exists\"\"\"\n    path_project_root = find_project_root(path_search_start)\n    path_pyproject_toml = path_project_root / \"pyproject.toml\"\n    return str(path_pyproject_toml) if path_pyproject_toml.is_file() else None",
                "def parse_pyproject_toml(path_config: str) -> Dict[str, Any]:\n    \"\"\"Parse a pyproject toml file, pulling out relevant parts for Black\n\n    If parsing fails, will raise a toml.TomlDecodeError\n    \"\"\"\n    pyproject_toml = toml.load(path_config)\n    config = pyproject_toml.get(\"tool\", {}).get(\"black\", {})\n    return {k.replace(\"--\", \"\").replace(\"-\", \"_\"): v for k, v in config.items()}",
                "def read_pyproject_toml(\n    ctx: click.Context, param: click.Parameter, value: Optional[str]\n) -> Optional[str]:\n    \"\"\"Inject Black configuration from \"pyproject.toml\" into defaults in `ctx`.\n\n    Returns the path to a successfully found and read configuration file, None\n    otherwise.\n    \"\"\"\n    if not value:\n        value = find_pyproject_toml(ctx.params.get(\"src\", ()))\n        if value is None:\n            return None\n\n    try:\n        config = parse_pyproject_toml(value)\n    except (toml.TomlDecodeError, OSError) as e:\n        raise click.FileError(\n            filename=value, hint=f\"Error reading configuration file: {e}\"\n        )\n\n    if not config:\n        return None\n\n    target_version = config.get(\"target_version\")\n    if target_version is not None and not isinstance(target_version, list):\n        raise click.BadOptionUsage(\n            \"target-version\", f\"Config key target-version must be a list\"\n        )\n\n    default_map: Dict[str, Any] = {}\n    if ctx.default_map:\n        default_map.update(ctx.default_map)\n    default_map.update(config)\n\n    ctx.default_map = default_map\n    return value",
                "def target_version_option_callback(\n    c: click.Context, p: Union[click.Option, click.Parameter], v: Tuple[str, ...]\n) -> List[TargetVersion]:\n    \"\"\"Compute the target versions from a --target-version flag.\n\n    This is its own function because mypy couldn't infer the type correctly\n    when it was a lambda, causing mypyc trouble.\n    \"\"\"\n    return [TargetVersion[val.upper()] for val in v]",
                "@click.command(context_settings=dict(help_option_names=[\"-h\", \"--help\"]))\n@click.option(\"-c\", \"--code\", type=str, help=\"Format the code passed in as a string.\")\n@click.option(\n    \"-l\",\n    \"--line-length\",\n    type=int,\n    default=DEFAULT_LINE_LENGTH,\n    help=\"How many characters per line to allow.\",\n    show_default=True,\n)\n@click.option(\n    \"-t\",\n    \"--target-version\",\n    type=click.Choice([v.name.lower() for v in TargetVersion]),\n    callback=target_version_option_callback,\n    multiple=True,\n    help=(\n        \"Python versions that should be supported by Black's output. [default: per-file\"\n        \" auto-detection]\"\n    ),\n)\n@click.option(\n    \"--py36\",\n    is_flag=True,\n    help=(\n        \"Allow using Python 3.6-only syntax on all input files.  This will put trailing\"\n        \" commas in function signatures and calls also after *args and **kwargs.\"\n        \" Deprecated; use --target-version instead. [default: per-file auto-detection]\"\n    ),\n)\n@click.option(\n    \"--pyi\",\n    is_flag=True,\n    help=(\n        \"Format all input files like typing stubs regardless of file extension (useful\"\n        \" when piping source on standard input).\"\n    ),\n)\n@click.option(\n    \"-S\",\n    \"--skip-string-normalization\",\n    is_flag=True,\n    help=\"Don't normalize string quotes or prefixes.\",\n)\n@click.option(\n    \"--check\",\n    is_flag=True,\n    help=(\n        \"Don't write the files back, just return the status.  Return code 0 means\"\n        \" nothing would change.  Return code 1 means some files would be reformatted.\"\n        \" Return code 123 means there was an internal error.\"\n    ),\n)\n@click.option(\n    \"--diff\",\n    is_flag=True,\n    help=\"Don't write the files back, just output a diff for each file on stdout.\",\n)\n@click.option(\n    \"--color/--no-color\",\n    is_flag=True,\n    help=\"Show colored diff. Only applies when `--diff` is given.\",\n)\n@click.option(\n    \"--fast/--safe\",\n    is_flag=True,\n    help=\"If --fast given, skip temporary sanity checks. [default: --safe]\",\n)\n@click.option(\n    \"--include\",\n    type=str,\n    default=DEFAULT_INCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be\"\n        \" included on recursive searches.  An empty value means all files are included\"\n        \" regardless of the name.  Use forward slashes for directories on all platforms\"\n        \" (Windows, too).  Exclusions are calculated first, inclusions later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"--exclude\",\n    type=str,\n    default=DEFAULT_EXCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be\"\n        \" excluded on recursive searches.  An empty value means no paths are excluded.\"\n        \" Use forward slashes for directories on all platforms (Windows, too). \"\n        \" Exclusions are calculated first, inclusions later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"-q\",\n    \"--quiet\",\n    is_flag=True,\n    help=(\n        \"Don't emit non-error messages to stderr. Errors are still emitted; silence\"\n        \" those with 2>/dev/null.\"\n    ),\n)\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    is_flag=True,\n    help=(\n        \"Also emit messages to stderr about files that were not changed or were ignored\"\n        \" due to --exclude=.\"\n    ),\n)\n@click.version_option(version=__version__)\n@click.argument(\n    \"src\",\n    nargs=-1,\n    type=click.Path(\n        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    is_eager=True,\n)\n@click.option(\n    \"--config\",\n    type=click.Path(\n        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        readable=True,\n        allow_dash=False,\n        path_type=str,\n    ),\n    is_eager=True,\n    callback=read_pyproject_toml,\n    help=\"Read configuration from PATH.\",\n)\n@click.pass_context\ndef main(\n    ctx: click.Context,\n    code: Optional[str],\n    line_length: int,\n    target_version: List[TargetVersion],\n    check: bool,\n    diff: bool,\n    color: bool,\n    fast: bool,\n    pyi: bool,\n    py36: bool,\n    skip_string_normalization: bool,\n    quiet: bool,\n    verbose: bool,\n    include: str,\n    exclude: str,\n    src: Tuple[str, ...],\n    config: Optional[str],\n) -> None:\n    \"\"\"The uncompromising code formatter.\"\"\"\n    write_back = WriteBack.from_configuration(check=check, diff=diff, color=color)\n    if target_version:\n        if py36:\n            err(\"Cannot use both --target-version and --py36\")\n            ctx.exit(2)\n        else:\n            versions = set(target_version)\n    elif py36:\n        err(\n            \"--py36 is deprecated and will be removed in a future version. Use\"\n            \" --target-version py36 instead.\"\n        )\n        versions = PY36_VERSIONS\n    else:\n        # We'll autodetect later.\n        versions = set()\n    mode = Mode(\n        target_versions=versions,\n        line_length=line_length,\n        is_pyi=pyi,\n        string_normalization=not skip_string_normalization,\n    )\n    if config and verbose:\n        out(f\"Using configuration from {config}.\", bold=False, fg=\"blue\")\n    if code is not None:\n        print(format_str(code, mode=mode))\n        ctx.exit(0)\n    try:\n        include_regex = re_compile_maybe_verbose(include)\n    except re.error:\n        err(f\"Invalid regular expression for include given: {include!r}\")\n        ctx.exit(2)\n    try:\n        exclude_regex = re_compile_maybe_verbose(exclude)\n    except re.error:\n        err(f\"Invalid regular expression for exclude given: {exclude!r}\")\n        ctx.exit(2)\n    report = Report(check=check, diff=diff, quiet=quiet, verbose=verbose)\n    root = find_project_root(src)\n    sources: Set[Path] = set()\n    path_empty(src, quiet, verbose, ctx)\n    for s in src:\n        p = Path(s)\n        if p.is_dir():\n            sources.update(\n                gen_python_files_in_dir(\n                    p, root, include_regex, exclude_regex, report, get_gitignore(root)\n                )\n            )\n        elif p.is_file() or s == \"-\":\n            # if a file was explicitly given, we don't care about its extension\n            sources.add(p)\n        else:\n            err(f\"invalid path: {s}\")\n    if len(sources) == 0:\n        if verbose or not quiet:\n            out(\"No Python files are present to be formatted. Nothing to do \ud83d\ude34\")\n        ctx.exit(0)\n\n    if len(sources) == 1:\n        reformat_one(\n            src=sources.pop(),\n            fast=fast,\n            write_back=write_back,\n            mode=mode,\n            report=report,\n        )\n    else:\n        reformat_many(\n            sources=sources, fast=fast, write_back=write_back, mode=mode, report=report\n        )\n\n    if verbose or not quiet:\n        out(\"Oh no! \ud83d\udca5 \ud83d\udc94 \ud83d\udca5\" if report.return_code else \"All done! \u2728 \ud83c\udf70 \u2728\")\n        click.secho(str(report), err=True)\n    ctx.exit(report.return_code)",
                "def path_empty(\n    src: Tuple[str, ...], quiet: bool, verbose: bool, ctx: click.Context\n) -> None:\n    \"\"\"\n    Exit if there is no `src` provided for formatting\n    \"\"\"\n    if not src:\n        if verbose or not quiet:\n            out(\"No Path provided. Nothing to do \ud83d\ude34\")\n            ctx.exit(0)",
                "def reformat_one(\n    src: Path, fast: bool, write_back: WriteBack, mode: Mode, report: \"Report\"\n) -> None:\n    \"\"\"Reformat a single file under `src` without spawning child processes.\n\n    `fast`, `write_back`, and `mode` options are passed to\n    :func:`format_file_in_place` or :func:`format_stdin_to_stdout`.\n    \"\"\"\n    try:\n        changed = Changed.NO\n        if not src.is_file() and str(src) == \"-\":\n            if format_stdin_to_stdout(fast=fast, write_back=write_back, mode=mode):\n                changed = Changed.YES\n        else:\n            cache: Cache = {}\n            if write_back != WriteBack.DIFF:\n                cache = read_cache(mode)\n                res_src = src.resolve()\n                if res_src in cache and cache[res_src] == get_cache_info(res_src):\n                    changed = Changed.CACHED\n            if changed is not Changed.CACHED and format_file_in_place(\n                src, fast=fast, write_back=write_back, mode=mode\n            ):\n                changed = Changed.YES\n            if (write_back is WriteBack.YES and changed is not Changed.CACHED) or (\n                write_back is WriteBack.CHECK and changed is Changed.NO\n            ):\n                write_cache(cache, [src], mode)\n        report.done(src, changed)\n    except Exception as exc:\n        report.failed(src, str(exc))",
                "def reformat_many(\n    sources: Set[Path], fast: bool, write_back: WriteBack, mode: Mode, report: \"Report\"\n) -> None:\n    \"\"\"Reformat multiple files using a ProcessPoolExecutor.\"\"\"\n    loop = asyncio.get_event_loop()\n    worker_count = os.cpu_count()\n    if sys.platform == \"win32\":\n        # Work around https://bugs.python.org/issue26903\n        worker_count = min(worker_count, 61)\n    executor = ProcessPoolExecutor(max_workers=worker_count)\n    try:\n        loop.run_until_complete(\n            schedule_formatting(\n                sources=sources,\n                fast=fast,\n                write_back=write_back,\n                mode=mode,\n                report=report,\n                loop=loop,\n                executor=executor,\n            )\n        )\n    finally:\n        shutdown(loop)\n        executor.shutdown()",
                "async def schedule_formatting(\n    sources: Set[Path],\n    fast: bool,\n    write_back: WriteBack,\n    mode: Mode,\n    report: \"Report\",\n    loop: asyncio.AbstractEventLoop,\n    executor: Executor,\n) -> None:\n    \"\"\"Run formatting of `sources` in parallel using the provided `executor`.\n\n    (Use ProcessPoolExecutors for actual parallelism.)\n\n    `write_back`, `fast`, and `mode` options are passed to\n    :func:`format_file_in_place`.\n    \"\"\"\n    cache: Cache = {}\n    if write_back != WriteBack.DIFF:\n        cache = read_cache(mode)\n        sources, cached = filter_cached(cache, sources)\n        for src in sorted(cached):\n            report.done(src, Changed.CACHED)\n    if not sources:\n        return\n\n    cancelled = []\n    sources_to_cache = []\n    lock = None\n    if write_back == WriteBack.DIFF:\n        # For diff output, we need locks to ensure we don't interleave output\n        # from different processes.\n        manager = Manager()\n        lock = manager.Lock()\n    tasks = {\n        asyncio.ensure_future(\n            loop.run_in_executor(\n                executor, format_file_in_place, src, fast, mode, write_back, lock\n            )\n        ): src\n        for src in sorted(sources)\n    }\n    pending: Iterable[\"asyncio.Future[bool]\"] = tasks.keys()\n    try:\n        loop.add_signal_handler(signal.SIGINT, cancel, pending)\n        loop.add_signal_handler(signal.SIGTERM, cancel, pending)\n    except NotImplementedError:\n        # There are no good alternatives for these on Windows.\n        pass\n    while pending:\n        done, _ = await asyncio.wait(pending, return_when=asyncio.FIRST_COMPLETED)\n        for task in done:\n            src = tasks.pop(task)\n            if task.cancelled():\n                cancelled.append(task)\n            elif task.exception():\n                report.failed(src, str(task.exception()))\n            else:\n                changed = Changed.YES if task.result() else Changed.NO\n                # If the file was written back or was successfully checked as\n                # well-formatted, store this information in the cache.\n                if write_back is WriteBack.YES or (\n                    write_back is WriteBack.CHECK and changed is Changed.NO\n                ):\n                    sources_to_cache.append(src)\n                report.done(src, changed)\n    if cancelled:\n        await asyncio.gather(*cancelled, loop=loop, return_exceptions=True)\n    if sources_to_cache:\n        write_cache(cache, sources_to_cache, mode)",
                "def format_file_in_place(\n    src: Path,\n    fast: bool,\n    mode: Mode,\n    write_back: WriteBack = WriteBack.NO,\n    lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy\n) -> bool:\n    \"\"\"Format file under `src` path. Return True if changed.\n\n    If `write_back` is DIFF, write a diff to stdout. If it is YES, write reformatted\n    code to the file.\n    `mode` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n    if src.suffix == \".pyi\":\n        mode = replace(mode, is_pyi=True)\n\n    then = datetime.utcfromtimestamp(src.stat().st_mtime)\n    with open(src, \"rb\") as buf:\n        src_contents, encoding, newline = decode_bytes(buf.read())\n    try:\n        dst_contents = format_file_contents(src_contents, fast=fast, mode=mode)\n    except NothingChanged:\n        return False\n\n    if write_back == WriteBack.YES:\n        with open(src, \"w\", encoding=encoding, newline=newline) as f:\n            f.write(dst_contents)\n    elif write_back in (WriteBack.DIFF, WriteBack.COLOR_DIFF):\n        now = datetime.utcnow()\n        src_name = f\"{src}\\t{then} +0000\"\n        dst_name = f\"{src}\\t{now} +0000\"\n        diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n\n        if write_back == write_back.COLOR_DIFF:\n            diff_contents = color_diff(diff_contents)\n\n        with lock or nullcontext():\n            f = io.TextIOWrapper(\n                sys.stdout.buffer,\n                encoding=encoding,\n                newline=newline,\n                write_through=True,\n            )\n            f = wrap_stream_for_windows(f)\n            f.write(diff_contents)\n            f.detach()\n\n    return True",
                "def color_diff(contents: str) -> str:\n    \"\"\"Inject the ANSI color codes to the diff.\"\"\"\n    lines = contents.split(\"\\n\")\n    for i, line in enumerate(lines):\n        if line.startswith(\"+++\") or line.startswith(\"---\"):\n            line = \"\\033[1;37m\" + line + \"\\033[0m\"  # bold white, reset\n        if line.startswith(\"@@\"):\n            line = \"\\033[36m\" + line + \"\\033[0m\"  # cyan, reset\n        if line.startswith(\"+\"):\n            line = \"\\033[32m\" + line + \"\\033[0m\"  # green, reset\n        elif line.startswith(\"-\"):\n            line = \"\\033[31m\" + line + \"\\033[0m\"  # red, reset\n        lines[i] = line\n    return \"\\n\".join(lines)",
                "def wrap_stream_for_windows(\n    f: io.TextIOWrapper,\n) -> Union[io.TextIOWrapper, \"colorama.AnsiToWin32.AnsiToWin32\"]:\n    \"\"\"\n    Wrap the stream in colorama's wrap_stream so colors are shown on Windows.\n\n    If `colorama` is not found, then no change is made. If `colorama` does\n    exist, then it handles the logic to determine whether or not to change\n    things.\n    \"\"\"\n    try:\n        from colorama import initialise\n\n        # We set `strip=False` so that we can don't have to modify\n        # test_express_diff_with_color.\n        f = initialise.wrap_stream(\n            f, convert=None, strip=False, autoreset=False, wrap=True\n        )\n\n        # wrap_stream returns a `colorama.AnsiToWin32.AnsiToWin32` object\n        # which does not have a `detach()` method. So we fake one.\n        f.detach = lambda *args, **kwargs: None  # type: ignore\n    except ImportError:\n        pass\n\n    return f",
                "def format_stdin_to_stdout(\n    fast: bool, *, write_back: WriteBack = WriteBack.NO, mode: Mode\n) -> bool:\n    \"\"\"Format file on stdin. Return True if changed.\n\n    If `write_back` is YES, write reformatted code back to stdout. If it is DIFF,\n    write a diff to stdout. The `mode` argument is passed to\n    :func:`format_file_contents`.\n    \"\"\"\n    then = datetime.utcnow()\n    src, encoding, newline = decode_bytes(sys.stdin.buffer.read())\n    dst = src\n    try:\n        dst = format_file_contents(src, fast=fast, mode=mode)\n        return True\n\n    except NothingChanged:\n        return False\n\n    finally:\n        f = io.TextIOWrapper(\n            sys.stdout.buffer, encoding=encoding, newline=newline, write_through=True\n        )\n        if write_back == WriteBack.YES:\n            f.write(dst)\n        elif write_back in (WriteBack.DIFF, WriteBack.COLOR_DIFF):\n            now = datetime.utcnow()\n            src_name = f\"STDIN\\t{then} +0000\"\n            dst_name = f\"STDOUT\\t{now} +0000\"\n            d = diff(src, dst, src_name, dst_name)\n            if write_back == WriteBack.COLOR_DIFF:\n                d = color_diff(d)\n                f = wrap_stream_for_windows(f)\n            f.write(d)\n        f.detach()",
                "def format_file_contents(src_contents: str, *, fast: bool, mode: Mode) -> FileContent:\n    \"\"\"Reformat contents a file and return new contents.\n\n    If `fast` is False, additionally confirm that the reformatted code is\n    valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.\n    `mode` is passed to :func:`format_str`.\n    \"\"\"\n    if src_contents.strip() == \"\":\n        raise NothingChanged\n\n    dst_contents = format_str(src_contents, mode=mode)\n    if src_contents == dst_contents:\n        raise NothingChanged\n\n    if not fast:\n        assert_equivalent(src_contents, dst_contents)\n        assert_stable(src_contents, dst_contents, mode=mode)\n    return dst_contents",
                "def format_str(src_contents: str, *, mode: Mode) -> FileContent:\n    \"\"\"Reformat a string and return new contents.\n\n    `mode` determines formatting options, such as how many characters per line are\n    allowed.  Example:\n\n    >>> import black\n    >>> print(black.format_str(\"def f(arg:str='')->None:...\", mode=Mode()))\n    def f(arg: str = \"\") -> None:\n        ...\n\n    A more complex example:\n    >>> print(\n    ...   black.format_str(\n    ...     \"def f(arg:str='')->None: hey\",\n    ...     mode=black.Mode(\n    ...       target_versions={black.TargetVersion.PY36},\n    ...       line_length=10,\n    ...       string_normalization=False,\n    ...       is_pyi=False,\n    ...     ),\n    ...   ),\n    ... )\n    def f(\n        arg: str = '',\n    ) -> None:\n        hey\n\n    \"\"\"\n    src_node = lib2to3_parse(src_contents.lstrip(), mode.target_versions)\n    dst_contents = []\n    future_imports = get_future_imports(src_node)\n    if mode.target_versions:\n        versions = mode.target_versions\n    else:\n        versions = detect_target_versions(src_node)\n    normalize_fmt_off(src_node)\n    lines = LineGenerator(\n        remove_u_prefix=\"unicode_literals\" in future_imports\n        or supports_feature(versions, Feature.UNICODE_LITERALS),\n        is_pyi=mode.is_pyi,\n        normalize_strings=mode.string_normalization,\n    )\n    elt = EmptyLineTracker(is_pyi=mode.is_pyi)\n    empty_line = Line()\n    after = 0\n    split_line_features = {\n        feature\n        for feature in {Feature.TRAILING_COMMA_IN_CALL, Feature.TRAILING_COMMA_IN_DEF}\n        if supports_feature(versions, feature)\n    }\n    for current_line in lines.visit(src_node):\n        dst_contents.append(str(empty_line) * after)\n        before, after = elt.maybe_empty_lines(current_line)\n        dst_contents.append(str(empty_line) * before)\n        for line in transform_line(\n            current_line,\n            line_length=mode.line_length,\n            normalize_strings=mode.string_normalization,\n            features=split_line_features,\n        ):\n            dst_contents.append(str(line))\n    return \"\".join(dst_contents)",
                "def decode_bytes(src: bytes) -> Tuple[FileContent, Encoding, NewLine]:\n    \"\"\"Return a tuple of (decoded_contents, encoding, newline).\n\n    `newline` is either CRLF or LF but `decoded_contents` is decoded with\n    universal newlines (i.e. only contains LF).\n    \"\"\"\n    srcbuf = io.BytesIO(src)\n    encoding, lines = tokenize.detect_encoding(srcbuf.readline)\n    if not lines:\n        return \"\", encoding, \"\\n\"\n\n    newline = \"\\r\\n\" if b\"\\r\\n\" == lines[0][-2:] else \"\\n\"\n    srcbuf.seek(0)\n    with io.TextIOWrapper(srcbuf, encoding) as tiow:\n        return tiow.read(), encoding, newline",
                "def get_grammars(target_versions: Set[TargetVersion]) -> List[Grammar]:\n    if not target_versions:\n        # No target_version specified, so try all grammars.\n        return [\n            # Python 3.7+\n            pygram.python_grammar_no_print_statement_no_exec_statement_async_keywords,\n            # Python 3.0-3.6\n            pygram.python_grammar_no_print_statement_no_exec_statement,\n            # Python 2.7 with future print_function import\n            pygram.python_grammar_no_print_statement,\n            # Python 2.7\n            pygram.python_grammar,\n        ]\n\n    if all(version.is_python2() for version in target_versions):\n        # Python 2-only code, so try Python 2 grammars.\n        return [\n            # Python 2.7 with future print_function import\n            pygram.python_grammar_no_print_statement,\n            # Python 2.7\n            pygram.python_grammar,\n        ]\n\n    # Python 3-compatible code, so only try Python 3 grammar.\n    grammars = []\n    # If we have to parse both, try to parse async as a keyword first\n    if not supports_feature(target_versions, Feature.ASYNC_IDENTIFIERS):\n        # Python 3.7+\n        grammars.append(\n            pygram.python_grammar_no_print_statement_no_exec_statement_async_keywords\n        )\n    if not supports_feature(target_versions, Feature.ASYNC_KEYWORDS):\n        # Python 3.0-3.6\n        grammars.append(pygram.python_grammar_no_print_statement_no_exec_statement)\n    # At least one of the above branches must have been taken, because every Python\n    # version has exactly one of the two 'ASYNC_*' flags\n    return grammars",
                "def lib2to3_parse(src_txt: str, target_versions: Iterable[TargetVersion] = ()) -> Node:\n    \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n    if src_txt[-1:] != \"\\n\":\n        src_txt += \"\\n\"\n\n    for grammar in get_grammars(set(target_versions)):\n        drv = driver.Driver(grammar, pytree.convert)\n        try:\n            result = drv.parse_string(src_txt, True)\n            break\n\n        except ParseError as pe:\n            lineno, column = pe.context[1]\n            lines = src_txt.splitlines()\n            try:\n                faulty_line = lines[lineno - 1]\n            except IndexError:\n                faulty_line = \"<line number missing in source>\"\n            exc = InvalidInput(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n    else:\n        raise exc from None\n\n    if isinstance(result, Leaf):\n        result = Node(syms.file_input, [result])\n    return result",
                "def lib2to3_unparse(node: Node) -> str:\n    \"\"\"Given a lib2to3 node, return its string representation.\"\"\"\n    code = str(node)\n    return code",
                "def whitespace(leaf: Leaf, *, complex_subscript: bool) -> str:  # noqa: C901\n    \"\"\"Return whitespace prefix if needed for the given `leaf`.\n\n    `complex_subscript` signals whether the given leaf is part of a subscription\n    which has non-trivial arguments, like arithmetic expressions or function calls.\n    \"\"\"\n    NO = \"\"\n    SPACE = \" \"\n    DOUBLESPACE = \"  \"\n    t = leaf.type\n    p = leaf.parent\n    v = leaf.value\n    if t in ALWAYS_NO_SPACE:\n        return NO\n\n    if t == token.COMMENT:\n        return DOUBLESPACE\n\n    assert p is not None, f\"INTERNAL ERROR: hand-made leaf without parent: {leaf!r}\"\n    if t == token.COLON and p.type not in {\n        syms.subscript,\n        syms.subscriptlist,\n        syms.sliceop,\n    }:\n        return NO\n\n    prev = leaf.prev_sibling\n    if not prev:\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type in OPENING_BRACKETS:\n            return NO\n\n        if t == token.COLON:\n            if prevp.type == token.COLON:\n                return NO\n\n            elif prevp.type != token.COMMA and not complex_subscript:\n                return NO\n\n            return SPACE\n\n        if prevp.type == token.EQUAL:\n            if prevp.parent:\n                if prevp.parent.type in {\n                    syms.arglist,\n                    syms.argument,\n                    syms.parameters,\n                    syms.varargslist,\n                }:\n                    return NO\n\n                elif prevp.parent.type == syms.typedargslist:\n                    # A bit hacky: if the equal sign has whitespace, it means we\n                    # previously found it's a typed argument.  So, we're using\n                    # that, too.\n                    return prevp.prefix\n\n        elif prevp.type in VARARGS_SPECIALS:\n            if is_vararg(prevp, within=VARARGS_PARENTS | UNPACKING_PARENTS):\n                return NO\n\n        elif prevp.type == token.COLON:\n            if prevp.parent and prevp.parent.type in {syms.subscript, syms.sliceop}:\n                return SPACE if complex_subscript else NO\n\n        elif (\n            prevp.parent\n            and prevp.parent.type == syms.factor\n            and prevp.type in MATH_OPERATORS\n        ):\n            return NO\n\n        elif (\n            prevp.type == token.RIGHTSHIFT\n            and prevp.parent\n            and prevp.parent.type == syms.shift_expr\n            and prevp.prev_sibling\n            and prevp.prev_sibling.type == token.NAME\n            and prevp.prev_sibling.value == \"print\"  # type: ignore\n        ):\n            # Python 2 print chevron\n            return NO\n\n    elif prev.type in OPENING_BRACKETS:\n        return NO\n\n    if p.type in {syms.parameters, syms.arglist}:\n        # untyped function signatures or calls\n        if not prev or prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.varargslist:\n        # lambdas\n        if prev and prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.typedargslist:\n        # typed function signatures\n        if not prev:\n            return NO\n\n        if t == token.EQUAL:\n            if prev.type != syms.tname:\n                return NO\n\n        elif prev.type == token.EQUAL:\n            # A bit hacky: if the equal sign has whitespace, it means we\n            # previously found it's a typed argument.  So, we're using that, too.\n            return prev.prefix\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.tname:\n        # type names\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type != token.COMMA:\n                return NO\n\n    elif p.type == syms.trailer:\n        # attributes and calls\n        if t == token.LPAR or t == token.RPAR:\n            return NO\n\n        if not prev:\n            if t == token.DOT:\n                prevp = preceding_leaf(p)\n                if not prevp or prevp.type != token.NUMBER:\n                    return NO\n\n            elif t == token.LSQB:\n                return NO\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.argument:\n        # single argument\n        if t == token.EQUAL:\n            return NO\n\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type == token.LPAR:\n                return NO\n\n        elif prev.type in {token.EQUAL} | VARARGS_SPECIALS:\n            return NO\n\n    elif p.type == syms.decorator:\n        # decorators\n        return NO\n\n    elif p.type == syms.dotted_name:\n        if prev:\n            return NO\n\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type == token.AT or prevp.type == token.DOT:\n            return NO\n\n    elif p.type == syms.classdef:\n        if t == token.LPAR:\n            return NO\n\n        if prev and prev.type == token.LPAR:\n            return NO\n\n    elif p.type in {syms.subscript, syms.sliceop}:\n        # indexing\n        if not prev:\n            assert p.parent is not None, \"subscripts are always parented\"\n            if p.parent.type == syms.subscriptlist:\n                return SPACE\n\n            return NO\n\n        elif not complex_subscript:\n            return NO\n\n    elif p.type == syms.atom:\n        if prev and t == token.DOT:\n            # dots, but not the first one.\n            return NO\n\n    elif p.type == syms.dictsetmaker:\n        # dict unpacking\n        if prev and prev.type == token.DOUBLESTAR:\n            return NO\n\n    elif p.type in {syms.factor, syms.star_expr}:\n        # unary ops\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type in OPENING_BRACKETS:\n                return NO\n\n            prevp_parent = prevp.parent\n            assert prevp_parent is not None\n            if prevp.type == token.COLON and prevp_parent.type in {\n                syms.subscript,\n                syms.sliceop,\n            }:\n                return NO\n\n            elif prevp.type == token.EQUAL and prevp_parent.type == syms.argument:\n                return NO\n\n        elif t in {token.NAME, token.NUMBER, token.STRING}:\n            return NO\n\n    elif p.type == syms.import_from:\n        if t == token.DOT:\n            if prev and prev.type == token.DOT:\n                return NO\n\n        elif t == token.NAME:\n            if v == \"import\":\n                return SPACE\n\n            if prev and prev.type == token.DOT:\n                return NO\n\n    elif p.type == syms.sliceop:\n        return NO\n\n    return SPACE",
                "def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:\n    \"\"\"Return the first leaf that precedes `node`, if any.\"\"\"\n    while node:\n        res = node.prev_sibling\n        if res:\n            if isinstance(res, Leaf):\n                return res\n\n            try:\n                return list(res.leaves())[-1]\n\n            except IndexError:\n                return None\n\n        node = node.parent\n    return None",
                "def prev_siblings_are(node: Optional[LN], tokens: List[Optional[NodeType]]) -> bool:\n    \"\"\"Return if the `node` and its previous siblings match types against the provided\n    list of tokens; the provided `node`has its type matched against the last element in\n    the list.  `None` can be used as the first element to declare that the start of the\n    list is anchored at the start of its parent's children.\"\"\"\n    if not tokens:\n        return True\n    if tokens[-1] is None:\n        return node is None\n    if not node:\n        return False\n    if node.type != tokens[-1]:\n        return False\n    return prev_siblings_are(node.prev_sibling, tokens[:-1])",
                "def child_towards(ancestor: Node, descendant: LN) -> Optional[LN]:\n    \"\"\"Return the child of `ancestor` that contains `descendant`.\"\"\"\n    node: Optional[LN] = descendant\n    while node and node.parent != ancestor:\n        node = node.parent\n    return node",
                "def container_of(leaf: Leaf) -> LN:\n    \"\"\"Return `leaf` or one of its ancestors that is the topmost container of it.\n\n    By \"container\" we mean a node where `leaf` is the very first child.\n    \"\"\"\n    same_prefix = leaf.prefix\n    container: LN = leaf\n    while container:\n        parent = container.parent\n        if parent is None:\n            break\n\n        if parent.children[0].prefix != same_prefix:\n            break\n\n        if parent.type == syms.file_input:\n            break\n\n        if parent.prev_sibling is not None and parent.prev_sibling.type in BRACKETS:\n            break\n\n        container = parent\n    return container",
                "def is_split_after_delimiter(leaf: Leaf, previous: Optional[Leaf] = None) -> Priority:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line break after it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break after themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if leaf.type == token.COMMA:\n        return COMMA_PRIORITY\n\n    return 0",
                "def is_split_before_delimiter(leaf: Leaf, previous: Optional[Leaf] = None) -> Priority:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line break before it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break before themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if is_vararg(leaf, within=VARARGS_PARENTS | UNPACKING_PARENTS):\n        # * and ** might also be MATH_OPERATORS but in this case they are not.\n        # Don't treat them as a delimiter.\n        return 0\n\n    if (\n        leaf.type == token.DOT\n        and leaf.parent\n        and leaf.parent.type not in {syms.import_from, syms.dotted_name}\n        and (previous is None or previous.type in CLOSING_BRACKETS)\n    ):\n        return DOT_PRIORITY\n\n    if (\n        leaf.type in MATH_OPERATORS\n        and leaf.parent\n        and leaf.parent.type not in {syms.factor, syms.star_expr}\n    ):\n        return MATH_PRIORITIES[leaf.type]\n\n    if leaf.type in COMPARATORS:\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.type == token.STRING\n        and previous is not None\n        and previous.type == token.STRING\n    ):\n        return STRING_PRIORITY\n\n    if leaf.type not in {token.NAME, token.ASYNC}:\n        return 0\n\n    if (\n        leaf.value == \"for\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_for, syms.old_comp_for}\n        or leaf.type == token.ASYNC\n    ):\n        if (\n            not isinstance(leaf.prev_sibling, Leaf)\n            or leaf.prev_sibling.value != \"async\"\n        ):\n            return COMPREHENSION_PRIORITY\n\n    if (\n        leaf.value == \"if\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_if, syms.old_comp_if}\n    ):\n        return COMPREHENSION_PRIORITY\n\n    if leaf.value in {\"if\", \"else\"} and leaf.parent and leaf.parent.type == syms.test:\n        return TERNARY_PRIORITY\n\n    if leaf.value == \"is\":\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.value == \"in\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_op, syms.comparison}\n        and not (\n            previous is not None\n            and previous.type == token.NAME\n            and previous.value == \"not\"\n        )\n    ):\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.value == \"not\"\n        and leaf.parent\n        and leaf.parent.type == syms.comp_op\n        and not (\n            previous is not None\n            and previous.type == token.NAME\n            and previous.value == \"is\"\n        )\n    ):\n        return COMPARATOR_PRIORITY\n\n    if leaf.value in LOGIC_OPERATORS and leaf.parent:\n        return LOGIC_PRIORITY\n\n    return 0",
                "def generate_comments(leaf: LN) -> Iterator[Leaf]:\n    \"\"\"Clean the prefix of the `leaf` and generate comments from it, if any.\n\n    Comments in lib2to3 are shoved into the whitespace prefix.  This happens\n    in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation\n    move because it does away with modifying the grammar to include all the\n    possible places in which comments can be placed.\n\n    The sad consequence for us though is that comments don't \"belong\" anywhere.\n    This is why this function generates simple parentless Leaf objects for\n    comments.  We simply don't know what the correct parent should be.\n\n    No matter though, we can live without this.  We really only need to\n    differentiate between inline and standalone comments.  The latter don't\n    share the line with any code.\n\n    Inline comments are emitted as regular token.COMMENT leaves.  Standalone\n    are emitted with a fake STANDALONE_COMMENT token identifier.\n    \"\"\"\n    for pc in list_comments(leaf.prefix, is_endmarker=leaf.type == token.ENDMARKER):\n        yield Leaf(pc.type, pc.value, prefix=\"\\n\" * pc.newlines)",
                "@lru_cache(maxsize=4096)\ndef list_comments(prefix: str, *, is_endmarker: bool) -> List[ProtoComment]:\n    \"\"\"Return a list of :class:`ProtoComment` objects parsed from the given `prefix`.\"\"\"\n    result: List[ProtoComment] = []\n    if not prefix or \"#\" not in prefix:\n        return result\n\n    consumed = 0\n    nlines = 0\n    ignored_lines = 0\n    for index, line in enumerate(prefix.split(\"\\n\")):\n        consumed += len(line) + 1  # adding the length of the split '\\n'\n        line = line.lstrip()\n        if not line:\n            nlines += 1\n        if not line.startswith(\"#\"):\n            # Escaped newlines outside of a comment are not really newlines at\n            # all. We treat a single-line comment following an escaped newline\n            # as a simple trailing comment.\n            if line.endswith(\"\\\\\"):\n                ignored_lines += 1\n            continue\n\n        if index == ignored_lines and not is_endmarker:\n            comment_type = token.COMMENT  # simple trailing comment\n        else:\n            comment_type = STANDALONE_COMMENT\n        comment = make_comment(line)\n        result.append(\n            ProtoComment(\n                type=comment_type, value=comment, newlines=nlines, consumed=consumed\n            )\n        )\n        nlines = 0\n    return result",
                "def make_comment(content: str) -> str:\n    \"\"\"Return a consistently formatted comment from the given `content` string.\n\n    All comments (except for \"##\", \"#!\", \"#:\", '#'\", \"#%%\") should have a single\n    space between the hash sign and the content.\n\n    If `content` didn't start with a hash sign, one is provided.\n    \"\"\"\n    content = content.rstrip()\n    if not content:\n        return \"#\"\n\n    if content[0] == \"#\":\n        content = content[1:]\n    if content and content[0] not in \" !:#'%\":\n        content = \" \" + content\n    return \"#\" + content",
                "def transform_line(\n    line: Line,\n    line_length: int,\n    normalize_strings: bool,\n    features: Collection[Feature] = (),\n) -> Iterator[Line]:\n    \"\"\"Transform a `line`, potentially splitting it into many lines.\n\n    They should fit in the allotted `line_length` but might not be able to.\n\n    `features` are syntactical features that may be used in the output.\n    \"\"\"\n    if line.is_comment:\n        yield line\n        return\n\n    line_str = line_to_string(line)\n\n    def init_st(ST: Type[StringTransformer]) -> StringTransformer:\n        \"\"\"Initialize StringTransformer\"\"\"\n        return ST(line_length, normalize_strings)\n\n    string_merge = init_st(StringMerger)\n    string_paren_strip = init_st(StringParenStripper)\n    string_split = init_st(StringSplitter)\n    string_paren_wrap = init_st(StringParenWrapper)\n\n    transformers: List[Transformer]\n    if (\n        not line.contains_uncollapsable_type_comments()\n        and not line.should_explode\n        and not line.is_collection_with_optional_trailing_comma\n        and (\n            is_line_short_enough(line, line_length=line_length, line_str=line_str)\n            or line.contains_unsplittable_type_ignore()\n        )\n        and not (line.contains_standalone_comments() and line.inside_brackets)\n    ):\n        # Only apply basic string preprocessing, since lines shouldn't be split here.\n        transformers = [string_merge, string_paren_strip]\n    elif line.is_def:\n        transformers = [left_hand_split]\n    else:\n\n        def rhs(line: Line, features: Collection[Feature]) -> Iterator[Line]:\n            for omit in generate_trailers_to_omit(line, line_length):\n                lines = list(right_hand_split(line, line_length, features, omit=omit))\n                if is_line_short_enough(lines[0], line_length=line_length):\n                    yield from lines\n                    return\n\n            # All splits failed, best effort split with no omits.\n            # This mostly happens to multiline strings that are by definition\n            # reported as not fitting a single line.\n            # line_length=1 here was historically a bug that somehow became a feature.\n            # See #762 and #781 for the full story.\n            yield from right_hand_split(line, line_length=1, features=features)\n\n        if line.inside_brackets:\n            transformers = [\n                string_merge,\n                string_paren_strip,\n                delimiter_split,\n                standalone_comment_split,\n                string_split,\n                string_paren_wrap,\n                rhs,\n            ]\n        else:\n            transformers = [\n                string_merge,\n                string_paren_strip,\n                string_split,\n                string_paren_wrap,\n                rhs,\n            ]\n\n    for transform in transformers:\n        # We are accumulating lines in `result` because we might want to abort\n        # mission and return the original line in the end, or attempt a different\n        # split altogether.\n        result: List[Line] = []\n        try:\n            for l in transform(line, features):\n                if str(l).strip(\"\\n\") == line_str:\n                    raise CannotTransform(\n                        \"Line transformer returned an unchanged result\"\n                    )\n\n                result.extend(\n                    transform_line(\n                        l,\n                        line_length=line_length,\n                        normalize_strings=normalize_strings,\n                        features=features,\n                    )\n                )\n        except CannotTransform:\n            continue\n        else:\n            yield from result\n            break\n\n    else:\n        yield line",
                "def TErr(err_msg: str) -> Err[CannotTransform]:\n    \"\"\"(T)ransform Err\n\n    Convenience function used when working with the TResult type.\n    \"\"\"\n    cant_transform = CannotTransform(err_msg)\n    return Err(cant_transform)",
                "def contains_pragma_comment(comment_list: List[Leaf]) -> bool:\n    \"\"\"\n    Returns:\n        True iff one of the comments in @comment_list is a pragma used by one\n        of the more common static analysis tools for python (e.g. mypy, flake8,\n        pylint).\n    \"\"\"\n    for comment in comment_list:\n        if comment.value.startswith((\"# type:\", \"# noqa\", \"# pylint:\")):\n            return True\n\n    return False",
                "def insert_str_child_factory(string_leaf: Leaf) -> Callable[[LN], None]:\n    \"\"\"\n    Factory for a convenience function that is used to orphan @string_leaf\n    and then insert multiple new leaves into the same part of the node\n    structure that @string_leaf had originally occupied.\n\n    Examples:\n        Let `string_leaf = Leaf(token.STRING, '\"foo\"')` and `N =\n        string_leaf.parent`. Assume the node `N` has the following\n        original structure:\n\n        Node(\n            expr_stmt, [\n                Leaf(NAME, 'x'),\n                Leaf(EQUAL, '='),\n                Leaf(STRING, '\"foo\"'),\n            ]\n        )\n\n        We then run the code snippet shown below.\n        ```\n        insert_str_child = insert_str_child_factory(string_leaf)\n\n        lpar = Leaf(token.LPAR, '(')\n        insert_str_child(lpar)\n\n        bar = Leaf(token.STRING, '\"bar\"')\n        insert_str_child(bar)\n\n        rpar = Leaf(token.RPAR, ')')\n        insert_str_child(rpar)\n        ```\n\n        After which point, it follows that `string_leaf.parent is None` and\n        the node `N` now has the following structure:\n\n        Node(\n            expr_stmt, [\n                Leaf(NAME, 'x'),\n                Leaf(EQUAL, '='),\n                Leaf(LPAR, '('),\n                Leaf(STRING, '\"bar\"'),\n                Leaf(RPAR, ')'),\n            ]\n        )\n    \"\"\"\n    string_parent = string_leaf.parent\n    string_child_idx = string_leaf.remove()\n\n    def insert_str_child(child: LN) -> None:\n        nonlocal string_child_idx\n\n        assert string_parent is not None\n        assert string_child_idx is not None\n\n        string_parent.insert_child(string_child_idx, child)\n        string_child_idx += 1\n\n    return insert_str_child",
                "def has_triple_quotes(string: str) -> bool:\n    \"\"\"\n    Returns:\n        True iff @string starts with three quotation characters.\n    \"\"\"\n    raw_string = string.lstrip(STRING_PREFIX_CHARS)\n    return raw_string[:3] in {'\"\"\"', \"'''\"}",
                "def parent_type(node: Optional[LN]) -> Optional[NodeType]:\n    \"\"\"\n    Returns:\n        @node.parent.type, if @node is not None and has a parent.\n            OR\n        None, otherwise.\n    \"\"\"\n    if node is None or node.parent is None:\n        return None\n\n    return node.parent.type",
                "def is_empty_par(leaf: Leaf) -> bool:\n    return is_empty_lpar(leaf) or is_empty_rpar(leaf)",
                "def is_empty_lpar(leaf: Leaf) -> bool:\n    return leaf.type == token.LPAR and leaf.value == \"\"",
                "def is_empty_rpar(leaf: Leaf) -> bool:\n    return leaf.type == token.RPAR and leaf.value == \"\"",
                "def is_valid_index_factory(seq: Sequence[Any]) -> Callable[[int], bool]:\n    \"\"\"\n    Examples:\n        ```\n        my_list = [1, 2, 3]\n\n        is_valid_index = is_valid_index_factory(my_list)\n\n        assert is_valid_index(0)\n        assert is_valid_index(2)\n\n        assert not is_valid_index(3)\n        assert not is_valid_index(-1)\n        ```\n    \"\"\"\n\n    def is_valid_index(idx: int) -> bool:\n        \"\"\"\n        Returns:\n            True iff @idx is positive AND seq[@idx] does NOT raise an\n            IndexError.\n        \"\"\"\n        return 0 <= idx < len(seq)\n\n    return is_valid_index",
                "def line_to_string(line: Line) -> str:\n    \"\"\"Returns the string representation of @line.\n\n    WARNING: This is known to be computationally expensive.\n    \"\"\"\n    return str(line).strip(\"\\n\")",
                "def append_leaves(new_line: Line, old_line: Line, leaves: List[Leaf]) -> None:\n    \"\"\"\n    Append leaves (taken from @old_line) to @new_line, making sure to fix the\n    underlying Node structure where appropriate.\n\n    All of the leaves in @leaves are duplicated. The duplicates are then\n    appended to @new_line and used to replace their originals in the underlying\n    Node structure. Any comments attatched to the old leaves are reattached to\n    the new leaves.\n\n    Pre-conditions:\n        set(@leaves) is a subset of set(@old_line.leaves).\n    \"\"\"\n    for old_leaf in leaves:\n        assert old_leaf in old_line.leaves\n\n        new_leaf = Leaf(old_leaf.type, old_leaf.value)\n        replace_child(old_leaf, new_leaf)\n        new_line.append(new_leaf)\n\n        for comment_leaf in old_line.comments_after(old_leaf):\n            new_line.append(comment_leaf, preformatted=True)",
                "def replace_child(old_child: LN, new_child: LN) -> None:\n    \"\"\"\n    Side Effects:\n        * If @old_child.parent is set, replace @old_child with @new_child in\n        @old_child's underlying Node structure.\n            OR\n        * Otherwise, this function does nothing.\n    \"\"\"\n    parent = old_child.parent\n    if not parent:\n        return\n\n    child_idx = old_child.remove()\n    if child_idx is not None:\n        parent.insert_child(child_idx, new_child)",
                "def get_string_prefix(string: str) -> str:\n    \"\"\"\n    Pre-conditions:\n        * assert_is_leaf_string(@string)\n\n    Returns:\n        @string's prefix (e.g. '', 'r', 'f', or 'rf').\n    \"\"\"\n    assert_is_leaf_string(string)\n\n    prefix = \"\"\n    prefix_idx = 0\n    while string[prefix_idx] in STRING_PREFIX_CHARS:\n        prefix += string[prefix_idx].lower()\n        prefix_idx += 1\n\n    return prefix",
                "def assert_is_leaf_string(string: str) -> None:\n    \"\"\"\n    Checks the pre-condition that @string has the format that you would expect\n    of `leaf.value` where `leaf` is some Leaf such that `leaf.type ==\n    token.STRING`. A more precise description of the pre-conditions that are\n    checked are listed below.\n\n    Pre-conditions:\n        * @string starts with either ', \", <prefix>', or <prefix>\" where\n        `set(<prefix>)` is some subset of `set(STRING_PREFIX_CHARS)`.\n        * @string ends with a quote character (' or \").\n\n    Raises:\n        AssertionError(...) if the pre-conditions listed above are not\n        satisfied.\n    \"\"\"\n    dquote_idx = string.find('\"')\n    squote_idx = string.find(\"'\")\n    if -1 in [dquote_idx, squote_idx]:\n        quote_idx = max(dquote_idx, squote_idx)\n    else:\n        quote_idx = min(squote_idx, dquote_idx)\n\n    assert (\n        0 <= quote_idx < len(string) - 1\n    ), f\"{string!r} is missing a starting quote character (' or \\\").\"\n    assert string[-1] in (\n        \"'\",\n        '\"',\n    ), f\"{string!r} is missing an ending quote character (' or \\\").\"\n    assert set(string[:quote_idx]).issubset(\n        set(STRING_PREFIX_CHARS)\n    ), f\"{set(string[:quote_idx])} is NOT a subset of {set(STRING_PREFIX_CHARS)}.\"",
                "def left_hand_split(line: Line, _features: Collection[Feature] = ()) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the first matching bracket pair.\n\n    Note: this usually looks weird, only use this for function definitions.\n    Prefer RHS otherwise.  This is why this function is not symmetrical with\n    :func:`right_hand_split` which also handles optional parentheses.\n    \"\"\"\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = head_leaves\n    matching_bracket: Optional[Leaf] = None\n    for leaf in line.leaves:\n        if (\n            current_leaves is body_leaves\n            and leaf.type in CLOSING_BRACKETS\n            and leaf.opening_bracket is matching_bracket\n        ):\n            current_leaves = tail_leaves if body_leaves else head_leaves\n        current_leaves.append(leaf)\n        if current_leaves is head_leaves:\n            if leaf.type in OPENING_BRACKETS:\n                matching_bracket = leaf\n                current_leaves = body_leaves\n    if not matching_bracket:\n        raise CannotSplit(\"No brackets found\")\n\n    head = bracket_split_build_line(head_leaves, line, matching_bracket)\n    body = bracket_split_build_line(body_leaves, line, matching_bracket, is_body=True)\n    tail = bracket_split_build_line(tail_leaves, line, matching_bracket)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def right_hand_split(\n    line: Line,\n    line_length: int,\n    features: Collection[Feature] = (),\n    omit: Collection[LeafID] = (),\n) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the last matching bracket pair.\n\n    If the split was by optional parentheses, attempt splitting without them, too.\n    `omit` is a collection of closing bracket IDs that shouldn't be considered for\n    this split.\n\n    Note: running this function modifies `bracket_depth` on the leaves of `line`.\n    \"\"\"\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = tail_leaves\n    opening_bracket: Optional[Leaf] = None\n    closing_bracket: Optional[Leaf] = None\n    for leaf in reversed(line.leaves):\n        if current_leaves is body_leaves:\n            if leaf is opening_bracket:\n                current_leaves = head_leaves if body_leaves else tail_leaves\n        current_leaves.append(leaf)\n        if current_leaves is tail_leaves:\n            if leaf.type in CLOSING_BRACKETS and id(leaf) not in omit:\n                opening_bracket = leaf.opening_bracket\n                closing_bracket = leaf\n                current_leaves = body_leaves\n    if not (opening_bracket and closing_bracket and head_leaves):\n        # If there is no opening or closing_bracket that means the split failed and\n        # all content is in the tail.  Otherwise, if `head_leaves` are empty, it means\n        # the matching `opening_bracket` wasn't available on `line` anymore.\n        raise CannotSplit(\"No brackets found\")\n\n    tail_leaves.reverse()\n    body_leaves.reverse()\n    head_leaves.reverse()\n    head = bracket_split_build_line(head_leaves, line, opening_bracket)\n    body = bracket_split_build_line(body_leaves, line, opening_bracket, is_body=True)\n    tail = bracket_split_build_line(tail_leaves, line, opening_bracket)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    if (\n        # the body shouldn't be exploded\n        not body.should_explode\n        # the opening bracket is an optional paren\n        and opening_bracket.type == token.LPAR\n        and not opening_bracket.value\n        # the closing bracket is an optional paren\n        and closing_bracket.type == token.RPAR\n        and not closing_bracket.value\n        # it's not an import (optional parens are the only thing we can split on\n        # in this case; attempting a split without them is a waste of time)\n        and not line.is_import\n        # there are no standalone comments in the body\n        and not body.contains_standalone_comments(0)\n        # and we can actually remove the parens\n        and can_omit_invisible_parens(body, line_length)\n    ):\n        omit = {id(closing_bracket), *omit}\n        try:\n            yield from right_hand_split(line, line_length, features=features, omit=omit)\n            return\n\n        except CannotSplit:\n            if not (\n                can_be_split(body)\n                or is_line_short_enough(body, line_length=line_length)\n            ):\n                raise CannotSplit(\n                    \"Splitting failed, body is still too long and can't be split.\"\n                )\n\n            elif head.contains_multiline_strings() or tail.contains_multiline_strings():\n                raise CannotSplit(\n                    \"The current optional pair of parentheses is bound to fail to\"\n                    \" satisfy the splitting algorithm because the head or the tail\"\n                    \" contains multiline strings which by definition never fit one\"\n                    \" line.\"\n                )\n\n    ensure_visible(opening_bracket)\n    ensure_visible(closing_bracket)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:\n    \"\"\"Raise :exc:`CannotSplit` if the last left- or right-hand split failed.\n\n    Do nothing otherwise.\n\n    A left- or right-hand split is based on a pair of brackets. Content before\n    (and including) the opening bracket is left on one line, content inside the\n    brackets is put on a separate line, and finally content starting with and\n    following the closing bracket is put on a separate line.\n\n    Those are called `head`, `body`, and `tail`, respectively. If the split\n    produced the same line (all content in `head`) or ended up with an empty `body`\n    and the `tail` is just the closing bracket, then it's considered failed.\n    \"\"\"\n    tail_len = len(str(tail).strip())\n    if not body:\n        if tail_len == 0:\n            raise CannotSplit(\"Splitting brackets produced the same line\")\n\n        elif tail_len < 3:\n            raise CannotSplit(\n                f\"Splitting brackets on an empty body to save {tail_len} characters is\"\n                \" not worth it\"\n            )",
                "def bracket_split_build_line(\n    leaves: List[Leaf], original: Line, opening_bracket: Leaf, *, is_body: bool = False\n) -> Line:\n    \"\"\"Return a new line with given `leaves` and respective comments from `original`.\n\n    If `is_body` is True, the result line is one-indented inside brackets and as such\n    has its first leaf's prefix normalized and a trailing comma added when expected.\n    \"\"\"\n    result = Line(depth=original.depth)\n    if is_body:\n        result.inside_brackets = True\n        result.depth += 1\n        if leaves:\n            # Since body is a new indent level, remove spurious leading whitespace.\n            normalize_prefix(leaves[0], inside_brackets=True)\n            # Ensure a trailing comma for imports and standalone function arguments, but\n            # be careful not to add one after any comments or within type annotations.\n            no_commas = (\n                original.is_def\n                and opening_bracket.value == \"(\"\n                and not any(l.type == token.COMMA for l in leaves)\n            )\n\n            if original.is_import or no_commas:\n                for i in range(len(leaves) - 1, -1, -1):\n                    if leaves[i].type == STANDALONE_COMMENT:\n                        continue\n\n                    if leaves[i].type != token.COMMA:\n                        leaves.insert(i + 1, Leaf(token.COMMA, \",\"))\n                    break\n\n    # Populate the line\n    for leaf in leaves:\n        result.append(leaf, preformatted=True)\n        for comment_after in original.comments_after(leaf):\n            result.append(comment_after, preformatted=True)\n    if is_body:\n        result.should_explode = should_explode(result, opening_bracket)\n    return result",
                "def dont_increase_indentation(split_func: Transformer) -> Transformer:\n    \"\"\"Normalize prefix of the first leaf in every line returned by `split_func`.\n\n    This is a decorator over relevant split functions.\n    \"\"\"\n\n    @wraps(split_func)\n    def split_wrapper(line: Line, features: Collection[Feature] = ()) -> Iterator[Line]:\n        for l in split_func(line, features):\n            normalize_prefix(l.leaves[0], inside_brackets=True)\n            yield l\n\n    return split_wrapper",
                "@dont_increase_indentation\ndef delimiter_split(line: Line, features: Collection[Feature] = ()) -> Iterator[Line]:\n    \"\"\"Split according to delimiters of the highest priority.\n\n    If the appropriate Features are given, the split will add trailing commas\n    also in function signatures and calls that contain `*` and `**`.\n    \"\"\"\n    try:\n        last_leaf = line.leaves[-1]\n    except IndexError:\n        raise CannotSplit(\"Line empty\")\n\n    bt = line.bracket_tracker\n    try:\n        delimiter_priority = bt.max_delimiter_priority(exclude={id(last_leaf)})\n    except ValueError:\n        raise CannotSplit(\"No delimiters found\")\n\n    if delimiter_priority == DOT_PRIORITY:\n        if bt.delimiter_count_with_priority(delimiter_priority) == 1:\n            raise CannotSplit(\"Splitting a single attribute from its owner looks wrong\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    lowest_depth = sys.maxsize\n    trailing_comma_safe = True\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for leaf in line.leaves:\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf):\n            yield from append_to_line(comment_after)\n\n        lowest_depth = min(lowest_depth, leaf.bracket_depth)\n        if leaf.bracket_depth == lowest_depth:\n            if is_vararg(leaf, within={syms.typedargslist}):\n                trailing_comma_safe = (\n                    trailing_comma_safe and Feature.TRAILING_COMMA_IN_DEF in features\n                )\n            elif is_vararg(leaf, within={syms.arglist, syms.argument}):\n                trailing_comma_safe = (\n                    trailing_comma_safe and Feature.TRAILING_COMMA_IN_CALL in features\n                )\n\n        leaf_priority = bt.delimiters.get(id(leaf))\n        if leaf_priority == delimiter_priority:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    if current_line:\n        if (\n            trailing_comma_safe\n            and delimiter_priority == COMMA_PRIORITY\n            and current_line.leaves[-1].type != token.COMMA\n            and current_line.leaves[-1].type != STANDALONE_COMMENT\n        ):\n            current_line.append(Leaf(token.COMMA, \",\"))\n        yield current_line",
                "@dont_increase_indentation\ndef standalone_comment_split(\n    line: Line, features: Collection[Feature] = ()\n) -> Iterator[Line]:\n    \"\"\"Split standalone comments from the rest of the line.\"\"\"\n    if not line.contains_standalone_comments(0):\n        raise CannotSplit(\"Line does not have any standalone comments\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for leaf in line.leaves:\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf):\n            yield from append_to_line(comment_after)\n\n    if current_line:\n        yield current_line",
                "def is_import(leaf: Leaf) -> bool:\n    \"\"\"Return True if the given leaf starts an import statement.\"\"\"\n    p = leaf.parent\n    t = leaf.type\n    v = leaf.value\n    return bool(\n        t == token.NAME\n        and (\n            (v == \"import\" and p and p.type == syms.import_name)\n            or (v == \"from\" and p and p.type == syms.import_from)\n        )\n    )",
                "def is_type_comment(leaf: Leaf, suffix: str = \"\") -> bool:\n    \"\"\"Return True if the given leaf is a special comment.\n    Only returns true for type comments for now.\"\"\"\n    t = leaf.type\n    v = leaf.value\n    return t in {token.COMMENT, STANDALONE_COMMENT} and v.startswith(\"# type:\" + suffix)",
                "def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:\n    \"\"\"Leave existing extra newlines if not `inside_brackets`. Remove everything\n    else.\n\n    Note: don't use backslashes for formatting or you'll lose your voting rights.\n    \"\"\"\n    if not inside_brackets:\n        spl = leaf.prefix.split(\"#\")\n        if \"\\\\\" not in spl[0]:\n            nl_count = spl[-1].count(\"\\n\")\n            if len(spl) > 1:\n                nl_count -= 1\n            leaf.prefix = \"\\n\" * nl_count\n            return\n\n    leaf.prefix = \"\"",
                "def normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool = False) -> None:\n    \"\"\"Make all string prefixes lowercase.\n\n    If remove_u_prefix is given, also removes any u prefix from the string.\n\n    Note: Mutates its argument.\n    \"\"\"\n    match = re.match(r\"^([\" + STRING_PREFIX_CHARS + r\"]*)(.*)$\", leaf.value, re.DOTALL)\n    assert match is not None, f\"failed to match string {leaf.value!r}\"\n    orig_prefix = match.group(1)\n    new_prefix = orig_prefix.replace(\"F\", \"f\").replace(\"B\", \"b\").replace(\"U\", \"u\")\n    if remove_u_prefix:\n        new_prefix = new_prefix.replace(\"u\", \"\")\n    leaf.value = f\"{new_prefix}{match.group(2)}\"",
                "def normalize_string_quotes(leaf: Leaf) -> None:\n    \"\"\"Prefer double quotes but only if it doesn't cause more escaping.\n\n    Adds or removes backslashes as appropriate. Doesn't parse and fix\n    strings nested in f-strings (yet).\n\n    Note: Mutates its argument.\n    \"\"\"\n    value = leaf.value.lstrip(STRING_PREFIX_CHARS)\n    if value[:3] == '\"\"\"':\n        return\n\n    elif value[:3] == \"'''\":\n        orig_quote = \"'''\"\n        new_quote = '\"\"\"'\n    elif value[0] == '\"':\n        orig_quote = '\"'\n        new_quote = \"'\"\n    else:\n        orig_quote = \"'\"\n        new_quote = '\"'\n    first_quote_pos = leaf.value.find(orig_quote)\n    if first_quote_pos == -1:\n        return  # There's an internal error\n\n    prefix = leaf.value[:first_quote_pos]\n    unescaped_new_quote = re.compile(rf\"(([^\\\\]|^)(\\\\\\\\)*){new_quote}\")\n    escaped_new_quote = re.compile(rf\"([^\\\\]|^)\\\\((?:\\\\\\\\)*){new_quote}\")\n    escaped_orig_quote = re.compile(rf\"([^\\\\]|^)\\\\((?:\\\\\\\\)*){orig_quote}\")\n    body = leaf.value[first_quote_pos + len(orig_quote) : -len(orig_quote)]\n    if \"r\" in prefix.casefold():\n        if unescaped_new_quote.search(body):\n            # There's at least one unescaped new_quote in this raw string\n            # so converting is impossible\n            return\n\n        # Do not introduce or remove backslashes in raw strings\n        new_body = body\n    else:\n        # remove unnecessary escapes\n        new_body = sub_twice(escaped_new_quote, rf\"\\1\\2{new_quote}\", body)\n        if body != new_body:\n            # Consider the string without unnecessary escapes as the original\n            body = new_body\n            leaf.value = f\"{prefix}{orig_quote}{body}{orig_quote}\"\n        new_body = sub_twice(escaped_orig_quote, rf\"\\1\\2{orig_quote}\", new_body)\n        new_body = sub_twice(unescaped_new_quote, rf\"\\1\\\\{new_quote}\", new_body)\n    if \"f\" in prefix.casefold():\n        matches = re.findall(\n            r\"\"\"\n            (?:[^{]|^)\\{  # start of the string or a non-{ followed by a single {\n                ([^{].*?)  # contents of the brackets except if begins with {{\n            \\}(?:[^}]|$)  # A } followed by end of the string or a non-}\n            \"\"\",\n            new_body,\n            re.VERBOSE,\n        )\n        for m in matches:\n            if \"\\\\\" in str(m):\n                # Do not introduce backslashes in interpolated expressions\n                return\n\n    if new_quote == '\"\"\"' and new_body[-1:] == '\"':\n        # edge case:\n        new_body = new_body[:-1] + '\\\\\"'\n    orig_escape_count = body.count(\"\\\\\")\n    new_escape_count = new_body.count(\"\\\\\")\n    if new_escape_count > orig_escape_count:\n        return  # Do not introduce more escaping\n\n    if new_escape_count == orig_escape_count and orig_quote == '\"':\n        return  # Prefer double quotes\n\n    leaf.value = f\"{prefix}{new_quote}{new_body}{new_quote}\"",
                "def normalize_numeric_literal(leaf: Leaf) -> None:\n    \"\"\"Normalizes numeric (float, int, and complex) literals.\n\n    All letters used in the representation are normalized to lowercase (except\n    in Python 2 long literals).\n    \"\"\"\n    text = leaf.value.lower()\n    if text.startswith((\"0o\", \"0b\")):\n        # Leave octal and binary literals alone.\n        pass\n    elif text.startswith(\"0x\"):\n        # Change hex literals to upper case.\n        before, after = text[:2], text[2:]\n        text = f\"{before}{after.upper()}\"\n    elif \"e\" in text:\n        before, after = text.split(\"e\")\n        sign = \"\"\n        if after.startswith(\"-\"):\n            after = after[1:]\n            sign = \"-\"\n        elif after.startswith(\"+\"):\n            after = after[1:]\n        before = format_float_or_int_string(before)\n        text = f\"{before}e{sign}{after}\"\n    elif text.endswith((\"j\", \"l\")):\n        number = text[:-1]\n        suffix = text[-1]\n        # Capitalize in \"2L\" because \"l\" looks too similar to \"1\".\n        if suffix == \"l\":\n            suffix = \"L\"\n        text = f\"{format_float_or_int_string(number)}{suffix}\"\n    else:\n        text = format_float_or_int_string(text)\n    leaf.value = text",
                "def format_float_or_int_string(text: str) -> str:\n    \"\"\"Formats a float string like \"1.0\".\"\"\"\n    if \".\" not in text:\n        return text\n\n    before, after = text.split(\".\")\n    return f\"{before or 0}.{after or 0}\"",
                "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n\n    `parens_after` is a set of string leaf values immediately after which parens\n    should be put.\n\n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    for pc in list_comments(node.prefix, is_endmarker=False):\n        if pc.value in FMT_OFF:\n            # This `node` has a prefix with `# fmt: off`, don't mess with parens.\n            return\n    check_lpar = False\n    for index, child in enumerate(list(node.children)):\n        # Fixes a bug where invisible parens are not properly stripped from\n        # assignment statements that contain type annotations.\n        if isinstance(child, Node) and child.type == syms.annassign:\n            normalize_invisible_parens(child, parens_after=parens_after)\n\n        # Add parentheses around long tuple unpacking in assignments.\n        if (\n            index == 0\n            and isinstance(child, Node)\n            and child.type == syms.testlist_star_expr\n        ):\n            check_lpar = True\n\n        if check_lpar:\n            if is_walrus_assignment(child):\n                continue\n\n            if child.type == syms.atom:\n                if maybe_make_parens_invisible_in_atom(child, parent=node):\n                    wrap_in_parentheses(node, child, visible=False)\n            elif is_one_tuple(child):\n                wrap_in_parentheses(node, child, visible=True)\n            elif node.type == syms.import_from:\n                # \"import from\" nodes store parentheses directly as part of\n                # the statement\n                if child.type == token.LPAR:\n                    # make parentheses invisible\n                    child.value = \"\"  # type: ignore\n                    node.children[-1].value = \"\"  # type: ignore\n                elif child.type != token.STAR:\n                    # insert invisible parentheses\n                    node.insert_child(index, Leaf(token.LPAR, \"\"))\n                    node.append_child(Leaf(token.RPAR, \"\"))\n                break\n\n            elif not (isinstance(child, Leaf) and is_multiline_string(child)):\n                wrap_in_parentheses(node, child, visible=False)\n\n        check_lpar = isinstance(child, Leaf) and child.value in parens_after",
                "def normalize_fmt_off(node: Node) -> None:\n    \"\"\"Convert content between `# fmt: off`/`# fmt: on` into standalone comments.\"\"\"\n    try_again = True\n    while try_again:\n        try_again = convert_one_fmt_off_pair(node)",
                "def convert_one_fmt_off_pair(node: Node) -> bool:\n    \"\"\"Convert content of a single `# fmt: off`/`# fmt: on` into a standalone comment.\n\n    Returns True if a pair was converted.\n    \"\"\"\n    for leaf in node.leaves():\n        previous_consumed = 0\n        for comment in list_comments(leaf.prefix, is_endmarker=False):\n            if comment.value in FMT_OFF:\n                # We only want standalone comments. If there's no previous leaf or\n                # the previous leaf is indentation, it's a standalone comment in\n                # disguise.\n                if comment.type != STANDALONE_COMMENT:\n                    prev = preceding_leaf(leaf)\n                    if prev and prev.type not in WHITESPACE:\n                        continue\n\n                ignored_nodes = list(generate_ignored_nodes(leaf))\n                if not ignored_nodes:\n                    continue\n\n                first = ignored_nodes[0]  # Can be a container node with the `leaf`.\n                parent = first.parent\n                prefix = first.prefix\n                first.prefix = prefix[comment.consumed :]\n                hidden_value = (\n                    comment.value + \"\\n\" + \"\".join(str(n) for n in ignored_nodes)\n                )\n                if hidden_value.endswith(\"\\n\"):\n                    # That happens when one of the `ignored_nodes` ended with a NEWLINE\n                    # leaf (possibly followed by a DEDENT).\n                    hidden_value = hidden_value[:-1]\n                first_idx: Optional[int] = None\n                for ignored in ignored_nodes:\n                    index = ignored.remove()\n                    if first_idx is None:\n                        first_idx = index\n                assert parent is not None, \"INTERNAL ERROR: fmt: on/off handling (1)\"\n                assert first_idx is not None, \"INTERNAL ERROR: fmt: on/off handling (2)\"\n                parent.insert_child(\n                    first_idx,\n                    Leaf(\n                        STANDALONE_COMMENT,\n                        hidden_value,\n                        prefix=prefix[:previous_consumed] + \"\\n\" * comment.newlines,\n                    ),\n                )\n                return True\n\n            previous_consumed = comment.consumed\n\n    return False",
                "def generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]:\n    \"\"\"Starting from the container of `leaf`, generate all leaves until `# fmt: on`.\n\n    Stops at the end of the block.\n    \"\"\"\n    container: Optional[LN] = container_of(leaf)\n    while container is not None and container.type != token.ENDMARKER:\n        if fmt_on(container):\n            return\n\n        # fix for fmt: on in children\n        if contains_fmt_on_at_column(container, leaf.column):\n            for child in container.children:\n                if contains_fmt_on_at_column(child, leaf.column):\n                    return\n                yield child\n        else:\n            yield container\n            container = container.next_sibling",
                "def fmt_on(container: LN) -> bool:\n    is_fmt_on = False\n    for comment in list_comments(container.prefix, is_endmarker=False):\n        if comment.value in FMT_ON:\n            is_fmt_on = True\n        elif comment.value in FMT_OFF:\n            is_fmt_on = False\n    return is_fmt_on",
                "def contains_fmt_on_at_column(container: LN, column: int) -> bool:\n    for child in container.children:\n        if (\n            isinstance(child, Node)\n            and first_leaf_column(child) == column\n            or isinstance(child, Leaf)\n            and child.column == column\n        ):\n            if fmt_on(child):\n                return True\n\n    return False",
                "def first_leaf_column(node: Node) -> Optional[int]:\n    for child in node.children:\n        if isinstance(child, Leaf):\n            return child.column\n    return None",
                "def maybe_make_parens_invisible_in_atom(node: LN, parent: LN) -> bool:\n    \"\"\"If it's safe, make the parens in the atom `node` invisible, recursively.\n    Additionally, remove repeated, adjacent invisible parens from the atom `node`\n    as they are redundant.\n\n    Returns whether the node should itself be wrapped in invisible parentheses.\n\n    \"\"\"\n    if (\n        node.type != syms.atom\n        or is_empty_tuple(node)\n        or is_one_tuple(node)\n        or (is_yield(node) and parent.type != syms.expr_stmt)\n        or max_delimiter_priority_in_atom(node) >= COMMA_PRIORITY\n    ):\n        return False\n\n    first = node.children[0]\n    last = node.children[-1]\n    if first.type == token.LPAR and last.type == token.RPAR:\n        middle = node.children[1]\n        # make parentheses invisible\n        first.value = \"\"  # type: ignore\n        last.value = \"\"  # type: ignore\n        maybe_make_parens_invisible_in_atom(middle, parent=parent)\n\n        if is_atom_with_invisible_parens(middle):\n            # Strip the invisible parens from `middle` by replacing\n            # it with the child in-between the invisible parens\n            middle.replace(middle.children[1])\n\n        return False\n\n    return True",
                "def is_atom_with_invisible_parens(node: LN) -> bool:\n    \"\"\"Given a `LN`, determines whether it's an atom `node` with invisible\n    parens. Useful in dedupe-ing and normalizing parens.\n    \"\"\"\n    if isinstance(node, Leaf) or node.type != syms.atom:\n        return False\n\n    first, last = node.children[0], node.children[-1]\n    return (\n        isinstance(first, Leaf)\n        and first.type == token.LPAR\n        and first.value == \"\"\n        and isinstance(last, Leaf)\n        and last.type == token.RPAR\n        and last.value == \"\"\n    )",
                "def is_empty_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds an empty tuple.\"\"\"\n    return (\n        node.type == syms.atom\n        and len(node.children) == 2\n        and node.children[0].type == token.LPAR\n        and node.children[1].type == token.RPAR\n    )",
                "def unwrap_singleton_parenthesis(node: LN) -> Optional[LN]:\n    \"\"\"Returns `wrapped` if `node` is of the shape ( wrapped ).\n\n    Parenthesis can be optional. Returns None otherwise\"\"\"\n    if len(node.children) != 3:\n        return None\n\n    lpar, wrapped, rpar = node.children\n    if not (lpar.type == token.LPAR and rpar.type == token.RPAR):\n        return None\n\n    return wrapped",
                "def wrap_in_parentheses(parent: Node, child: LN, *, visible: bool = True) -> None:\n    \"\"\"Wrap `child` in parentheses.\n\n    This replaces `child` with an atom holding the parentheses and the old\n    child.  That requires moving the prefix.\n\n    If `visible` is False, the leaves will be valueless (and thus invisible).\n    \"\"\"\n    lpar = Leaf(token.LPAR, \"(\" if visible else \"\")\n    rpar = Leaf(token.RPAR, \")\" if visible else \"\")\n    prefix = child.prefix\n    child.prefix = \"\"\n    index = child.remove() or 0\n    new_child = Node(syms.atom, [lpar, child, rpar])\n    new_child.prefix = prefix\n    parent.insert_child(index, new_child)",
                "def is_one_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds a tuple with one element, with or without parens.\"\"\"\n    if node.type == syms.atom:\n        gexp = unwrap_singleton_parenthesis(node)\n        if gexp is None or gexp.type != syms.testlist_gexp:\n            return False\n\n        return len(gexp.children) == 2 and gexp.children[1].type == token.COMMA\n\n    return (\n        node.type in IMPLICIT_TUPLE\n        and len(node.children) == 2\n        and node.children[1].type == token.COMMA\n    )",
                "def is_walrus_assignment(node: LN) -> bool:\n    \"\"\"Return True iff `node` is of the shape ( test := test )\"\"\"\n    inner = unwrap_singleton_parenthesis(node)\n    return inner is not None and inner.type == syms.namedexpr_test",
                "def is_yield(node: LN) -> bool:\n    \"\"\"Return True if `node` holds a `yield` or `yield from` expression.\"\"\"\n    if node.type == syms.yield_expr:\n        return True\n\n    if node.type == token.NAME and node.value == \"yield\":  # type: ignore\n        return True\n\n    if node.type != syms.atom:\n        return False\n\n    if len(node.children) != 3:\n        return False\n\n    lpar, expr, rpar = node.children\n    if lpar.type == token.LPAR and rpar.type == token.RPAR:\n        return is_yield(expr)\n\n    return False",
                "def is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool:\n    \"\"\"Return True if `leaf` is a star or double star in a vararg or kwarg.\n\n    If `within` includes VARARGS_PARENTS, this applies to function signatures.\n    If `within` includes UNPACKING_PARENTS, it applies to right hand-side\n    extended iterable unpacking (PEP 3132) and additional unpacking\n    generalizations (PEP 448).\n    \"\"\"\n    if leaf.type not in VARARGS_SPECIALS or not leaf.parent:\n        return False\n\n    p = leaf.parent\n    if p.type == syms.star_expr:\n        # Star expressions are also used as assignment targets in extended\n        # iterable unpacking (PEP 3132).  See what its parent is instead.\n        if not p.parent:\n            return False\n\n        p = p.parent\n\n    return p.type in within",
                "def is_multiline_string(leaf: Leaf) -> bool:\n    \"\"\"Return True if `leaf` is a multiline string that actually spans many lines.\"\"\"\n    return has_triple_quotes(leaf.value) and \"\\n\" in leaf.value",
                "def is_stub_suite(node: Node) -> bool:\n    \"\"\"Return True if `node` is a suite with a stub body.\"\"\"\n    if (\n        len(node.children) != 4\n        or node.children[0].type != token.NEWLINE\n        or node.children[1].type != token.INDENT\n        or node.children[3].type != token.DEDENT\n    ):\n        return False\n\n    return is_stub_body(node.children[2])",
                "def is_stub_body(node: LN) -> bool:\n    \"\"\"Return True if `node` is a simple statement containing an ellipsis.\"\"\"\n    if not isinstance(node, Node) or node.type != syms.simple_stmt:\n        return False\n\n    if len(node.children) != 2:\n        return False\n\n    child = node.children[0]\n    return (\n        child.type == syms.atom\n        and len(child.children) == 3\n        and all(leaf == Leaf(token.DOT, \".\") for leaf in child.children)\n    )",
                "def max_delimiter_priority_in_atom(node: LN) -> Priority:\n    \"\"\"Return maximum delimiter priority inside `node`.\n\n    This is specific to atoms with contents contained in a pair of parentheses.\n    If `node` isn't an atom or there are no enclosing parentheses, returns 0.\n    \"\"\"\n    if node.type != syms.atom:\n        return 0\n\n    first = node.children[0]\n    last = node.children[-1]\n    if not (first.type == token.LPAR and last.type == token.RPAR):\n        return 0\n\n    bt = BracketTracker()\n    for c in node.children[1:-1]:\n        if isinstance(c, Leaf):\n            bt.mark(c)\n        else:\n            for leaf in c.leaves():\n                bt.mark(leaf)\n    try:\n        return bt.max_delimiter_priority()\n\n    except ValueError:\n        return 0",
                "def ensure_visible(leaf: Leaf) -> None:\n    \"\"\"Make sure parentheses are visible.\n\n    They could be invisible as part of some statements (see\n    :func:`normalize_invisible_parens` and :func:`visit_import_from`).\n    \"\"\"\n    if leaf.type == token.LPAR:\n        leaf.value = \"(\"\n    elif leaf.type == token.RPAR:\n        leaf.value = \")\"",
                "def should_explode(line: Line, opening_bracket: Leaf) -> bool:\n    \"\"\"Should `line` immediately be split with `delimiter_split()` after RHS?\"\"\"\n\n    if not (\n        opening_bracket.parent\n        and opening_bracket.parent.type in {syms.atom, syms.import_from}\n        and opening_bracket.value in \"[{(\"\n    ):\n        return False\n\n    try:\n        last_leaf = line.leaves[-1]\n        exclude = {id(last_leaf)} if last_leaf.type == token.COMMA else set()\n        max_priority = line.bracket_tracker.max_delimiter_priority(exclude=exclude)\n    except (IndexError, ValueError):\n        return False\n\n    return max_priority == COMMA_PRIORITY",
                "def get_features_used(node: Node) -> Set[Feature]:\n    \"\"\"Return a set of (relatively) new Python features used in this file.\n\n    Currently looking for:\n    - f-strings;\n    - underscores in numeric literals;\n    - trailing commas after * or ** in function signatures and calls;\n    - positional only arguments in function signatures and lambdas;\n    \"\"\"\n    features: Set[Feature] = set()\n    for n in node.pre_order():\n        if n.type == token.STRING:\n            value_head = n.value[:2]  # type: ignore\n            if value_head in {'f\"', 'F\"', \"f'\", \"F'\", \"rf\", \"fr\", \"RF\", \"FR\"}:\n                features.add(Feature.F_STRINGS)\n\n        elif n.type == token.NUMBER:\n            if \"_\" in n.value:  # type: ignore\n                features.add(Feature.NUMERIC_UNDERSCORES)\n\n        elif n.type == token.SLASH:\n            if n.parent and n.parent.type in {syms.typedargslist, syms.arglist}:\n                features.add(Feature.POS_ONLY_ARGUMENTS)\n\n        elif n.type == token.COLONEQUAL:\n            features.add(Feature.ASSIGNMENT_EXPRESSIONS)\n\n        elif (\n            n.type in {syms.typedargslist, syms.arglist}\n            and n.children\n            and n.children[-1].type == token.COMMA\n        ):\n            if n.type == syms.typedargslist:\n                feature = Feature.TRAILING_COMMA_IN_DEF\n            else:\n                feature = Feature.TRAILING_COMMA_IN_CALL\n\n            for ch in n.children:\n                if ch.type in STARS:\n                    features.add(feature)\n\n                if ch.type == syms.argument:\n                    for argch in ch.children:\n                        if argch.type in STARS:\n                            features.add(feature)\n\n    return features",
                "def detect_target_versions(node: Node) -> Set[TargetVersion]:\n    \"\"\"Detect the version to target based on the nodes used.\"\"\"\n    features = get_features_used(node)\n    return {\n        version for version in TargetVersion if features <= VERSION_TO_FEATURES[version]\n    }",
                "def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]:\n    \"\"\"Generate sets of closing bracket IDs that should be omitted in a RHS.\n\n    Brackets can be omitted if the entire trailer up to and including\n    a preceding closing bracket fits in one line.\n\n    Yielded sets are cumulative (contain results of previous yields, too).  First\n    set is empty.\n    \"\"\"\n\n    omit: Set[LeafID] = set()\n    yield omit\n\n    length = 4 * line.depth\n    opening_bracket: Optional[Leaf] = None\n    closing_bracket: Optional[Leaf] = None\n    inner_brackets: Set[LeafID] = set()\n    for index, leaf, leaf_length in enumerate_with_length(line, reversed=True):\n        length += leaf_length\n        if length > line_length:\n            break\n\n        has_inline_comment = leaf_length > len(leaf.value) + len(leaf.prefix)\n        if leaf.type == STANDALONE_COMMENT or has_inline_comment:\n            break\n\n        if opening_bracket:\n            if leaf is opening_bracket:\n                opening_bracket = None\n            elif leaf.type in CLOSING_BRACKETS:\n                inner_brackets.add(id(leaf))\n        elif leaf.type in CLOSING_BRACKETS:\n            if index > 0 and line.leaves[index - 1].type in OPENING_BRACKETS:\n                # Empty brackets would fail a split so treat them as \"inner\"\n                # brackets (e.g. only add them to the `omit` set if another\n                # pair of brackets was good enough.\n                inner_brackets.add(id(leaf))\n                continue\n\n            if closing_bracket:\n                omit.add(id(closing_bracket))\n                omit.update(inner_brackets)\n                inner_brackets.clear()\n                yield omit\n\n            if leaf.value:\n                opening_bracket = leaf.opening_bracket\n                closing_bracket = leaf",
                "def get_future_imports(node: Node) -> Set[str]:\n    \"\"\"Return a set of __future__ imports in the file.\"\"\"\n    imports: Set[str] = set()\n\n    def get_imports_from_children(children: List[LN]) -> Generator[str, None, None]:\n        for child in children:\n            if isinstance(child, Leaf):\n                if child.type == token.NAME:\n                    yield child.value\n\n            elif child.type == syms.import_as_name:\n                orig_name = child.children[0]\n                assert isinstance(orig_name, Leaf), \"Invalid syntax parsing imports\"\n                assert orig_name.type == token.NAME, \"Invalid syntax parsing imports\"\n                yield orig_name.value\n\n            elif child.type == syms.import_as_names:\n                yield from get_imports_from_children(child.children)\n\n            else:\n                raise AssertionError(\"Invalid syntax parsing imports\")\n\n    for child in node.children:\n        if child.type != syms.simple_stmt:\n            break\n\n        first_child = child.children[0]\n        if isinstance(first_child, Leaf):\n            # Continue looking if we see a docstring; otherwise stop.\n            if (\n                len(child.children) == 2\n                and first_child.type == token.STRING\n                and child.children[1].type == token.NEWLINE\n            ):\n                continue\n\n            break\n\n        elif first_child.type == syms.import_from:\n            module_name = first_child.children[1]\n            if not isinstance(module_name, Leaf) or module_name.value != \"__future__\":\n                break\n\n            imports |= set(get_imports_from_children(first_child.children[3:]))\n        else:\n            break\n\n    return imports",
                "@lru_cache()\ndef get_gitignore(root: Path) -> PathSpec:\n    \"\"\" Return a PathSpec matching gitignore content if present.\"\"\"\n    gitignore = root / \".gitignore\"\n    lines: List[str] = []\n    if gitignore.is_file():\n        with gitignore.open() as gf:\n            lines = gf.readlines()\n    return PathSpec.from_lines(\"gitwildmatch\", lines)",
                "def gen_python_files_in_dir(\n    path: Path,\n    root: Path,\n    include: Pattern[str],\n    exclude: Pattern[str],\n    report: \"Report\",\n    gitignore: PathSpec,\n) -> Iterator[Path]:\n    \"\"\"Generate all files under `path` whose paths are not excluded by the\n    `exclude` regex, but are included by the `include` regex.\n\n    Symbolic links pointing outside of the `root` directory are ignored.\n\n    `report` is where output about exclusions goes.\n    \"\"\"\n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    for child in path.iterdir():\n        # First ignore files matching .gitignore\n        if gitignore.match_file(child.as_posix()):\n            report.path_ignored(child, \"matches the .gitignore file content\")\n            continue\n\n        # Then ignore with `exclude` option.\n        try:\n            normalized_path = \"/\" + child.resolve().relative_to(root).as_posix()\n        except OSError as e:\n            report.path_ignored(child, f\"cannot be read because {e}\")\n            continue\n\n        except ValueError:\n            if child.is_symlink():\n                report.path_ignored(\n                    child, f\"is a symbolic link that points outside {root}\"\n                )\n                continue\n\n            raise\n\n        if child.is_dir():\n            normalized_path += \"/\"\n\n        exclude_match = exclude.search(normalized_path)\n        if exclude_match and exclude_match.group(0):\n            report.path_ignored(child, \"matches the --exclude regular expression\")\n            continue\n\n        if child.is_dir():\n            yield from gen_python_files_in_dir(\n                child, root, include, exclude, report, gitignore\n            )\n\n        elif child.is_file():\n            include_match = include.search(normalized_path)\n            if include_match:\n                yield child",
                "@lru_cache()\ndef find_project_root(srcs: Iterable[str]) -> Path:\n    \"\"\"Return a directory containing .git, .hg, or pyproject.toml.\n\n    That directory can be one of the directories passed in `srcs` or their\n    common parent.\n\n    If no directory in the tree contains a marker that would specify it's the\n    project root, the root of the file system is returned.\n    \"\"\"\n    if not srcs:\n        return Path(\"/\").resolve()\n\n    common_base = min(Path(src).resolve() for src in srcs)\n    if common_base.is_dir():\n        # Append a fake file so `parents` below returns `common_base_dir`, too.\n        common_base /= \"fake-file\"\n    for directory in common_base.parents:\n        if (directory / \".git\").exists():\n            return directory\n\n        if (directory / \".hg\").is_dir():\n            return directory\n\n        if (directory / \"pyproject.toml\").is_file():\n            return directory\n\n    return directory",
                "def parse_ast(src: str) -> Union[ast.AST, ast3.AST, ast27.AST]:\n    filename = \"<unknown>\"\n    if sys.version_info >= (3, 8):\n        # TODO: support Python 4+ ;)\n        for minor_version in range(sys.version_info[1], 4, -1):\n            try:\n                return ast.parse(src, filename, feature_version=(3, minor_version))\n            except SyntaxError:\n                continue\n    else:\n        for feature_version in (7, 6):\n            try:\n                return ast3.parse(src, filename, feature_version=feature_version)\n            except SyntaxError:\n                continue\n\n    return ast27.parse(src)",
                "def _fixup_ast_constants(\n    node: Union[ast.AST, ast3.AST, ast27.AST]\n) -> Union[ast.AST, ast3.AST, ast27.AST]:\n    \"\"\"Map ast nodes deprecated in 3.8 to Constant.\"\"\"\n    if isinstance(node, (ast.Str, ast3.Str, ast27.Str, ast.Bytes, ast3.Bytes)):\n        return ast.Constant(value=node.s)\n\n    if isinstance(node, (ast.Num, ast3.Num, ast27.Num)):\n        return ast.Constant(value=node.n)\n\n    if isinstance(node, (ast.NameConstant, ast3.NameConstant)):\n        return ast.Constant(value=node.value)\n\n    return node",
                "def _stringify_ast(\n    node: Union[ast.AST, ast3.AST, ast27.AST], depth: int = 0\n) -> Iterator[str]:\n    \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n\n    node = _fixup_ast_constants(node)\n\n    yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n    for field in sorted(node._fields):  # noqa: F402\n        # TypeIgnore has only one field 'lineno' which breaks this comparison\n        type_ignore_classes = (ast3.TypeIgnore, ast27.TypeIgnore)\n        if sys.version_info >= (3, 8):\n            type_ignore_classes += (ast.TypeIgnore,)\n        if isinstance(node, type_ignore_classes):\n            break\n\n        try:\n            value = getattr(node, field)\n        except AttributeError:\n            continue\n\n        yield f\"{'  ' * (depth+1)}{field}=\"\n\n        if isinstance(value, list):\n            for item in value:\n                # Ignore nested tuples within del statements, because we may insert\n                # parentheses and they change the AST.\n                if (\n                    field == \"targets\"\n                    and isinstance(node, (ast.Delete, ast3.Delete, ast27.Delete))\n                    and isinstance(item, (ast.Tuple, ast3.Tuple, ast27.Tuple))\n                ):\n                    for item in item.elts:\n                        yield from _stringify_ast(item, depth + 2)\n\n                elif isinstance(item, (ast.AST, ast3.AST, ast27.AST)):\n                    yield from _stringify_ast(item, depth + 2)\n\n        elif isinstance(value, (ast.AST, ast3.AST, ast27.AST)):\n            yield from _stringify_ast(value, depth + 2)\n\n        else:\n            # Constant strings may be indented across newlines, if they are\n            # docstrings; fold spaces after newlines when comparing\n            if (\n                isinstance(node, ast.Constant)\n                and field == \"value\"\n                and isinstance(value, str)\n            ):\n                normalized = re.sub(r\"\\n[ \\t]+\", \"\\n \", value)\n            else:\n                normalized = value\n            yield f\"{'  ' * (depth+2)}{normalized!r},  # {value.__class__.__name__}\"\n\n    yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"",
                "def assert_equivalent(src: str, dst: str) -> None:\n    \"\"\"Raise AssertionError if `src` and `dst` aren't equivalent.\"\"\"\n    try:\n        src_ast = parse_ast(src)\n    except Exception as exc:\n        raise AssertionError(\n            \"cannot use --safe with this file; failed to parse source file.  AST\"\n            f\" error message: {exc}\"\n        )\n\n    try:\n        dst_ast = parse_ast(dst)\n    except Exception as exc:\n        log = dump_to_file(\"\".join(traceback.format_tb(exc.__traceback__)), dst)\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced invalid code: {exc}. Please report a bug\"\n            \" on https://github.com/psf/black/issues.  This invalid output might be\"\n            f\" helpful: {log}\"\n        ) from None\n\n    src_ast_str = \"\\n\".join(_stringify_ast(src_ast))\n    dst_ast_str = \"\\n\".join(_stringify_ast(dst_ast))\n    if src_ast_str != dst_ast_str:\n        log = dump_to_file(diff(src_ast_str, dst_ast_str, \"src\", \"dst\"))\n        raise AssertionError(\n            \"INTERNAL ERROR: Black produced code that is not equivalent to the\"\n            \" source.  Please report a bug on https://github.com/psf/black/issues. \"\n            f\" This diff might be helpful: {log}\"\n        ) from None",
                "def assert_stable(src: str, dst: str, mode: Mode) -> None:\n    \"\"\"Raise AssertionError if `dst` reformats differently the second time.\"\"\"\n    newdst = format_str(dst, mode=mode)\n    if dst != newdst:\n        log = dump_to_file(\n            diff(src, dst, \"source\", \"first pass\"),\n            diff(dst, newdst, \"first pass\", \"second pass\"),\n        )\n        raise AssertionError(\n            \"INTERNAL ERROR: Black produced different code on the second pass of the\"\n            \" formatter.  Please report a bug on https://github.com/psf/black/issues.\"\n            f\"  This diff might be helpful: {log}\"\n        ) from None",
                "@mypyc_attr(patchable=True)\ndef dump_to_file(*output: str) -> str:\n    \"\"\"Dump `output` to a temporary file. Return path to the file.\"\"\"\n    with tempfile.NamedTemporaryFile(\n        mode=\"w\", prefix=\"blk_\", suffix=\".log\", delete=False, encoding=\"utf8\"\n    ) as f:\n        for lines in output:\n            f.write(lines)\n            if lines and lines[-1] != \"\\n\":\n                f.write(\"\\n\")\n    return f.name",
                "@contextmanager\ndef nullcontext() -> Iterator[None]:\n    \"\"\"Return an empty context manager.\n\n    To be used like `nullcontext` in Python 3.7.\n    \"\"\"\n    yield",
                "def diff(a: str, b: str, a_name: str, b_name: str) -> str:\n    \"\"\"Return a unified diff string between strings `a` and `b`.\"\"\"\n    import difflib\n\n    a_lines = [line + \"\\n\" for line in a.splitlines()]\n    b_lines = [line + \"\\n\" for line in b.splitlines()]\n    return \"\".join(\n        difflib.unified_diff(a_lines, b_lines, fromfile=a_name, tofile=b_name, n=5)\n    )",
                "def cancel(tasks: Iterable[\"asyncio.Task[Any]\"]) -> None:\n    \"\"\"asyncio signal handler that cancels all `tasks` and reports to stderr.\"\"\"\n    err(\"Aborted!\")\n    for task in tasks:\n        task.cancel()",
                "def shutdown(loop: asyncio.AbstractEventLoop) -> None:\n    \"\"\"Cancel all pending tasks on `loop`, wait for them, and close the loop.\"\"\"\n    try:\n        if sys.version_info[:2] >= (3, 7):\n            all_tasks = asyncio.all_tasks\n        else:\n            all_tasks = asyncio.Task.all_tasks\n        # This part is borrowed from asyncio/runners.py in Python 3.7b2.\n        to_cancel = [task for task in all_tasks(loop) if not task.done()]\n        if not to_cancel:\n            return\n\n        for task in to_cancel:\n            task.cancel()\n        loop.run_until_complete(\n            asyncio.gather(*to_cancel, loop=loop, return_exceptions=True)\n        )\n    finally:\n        # `concurrent.futures.Future` objects cannot be cancelled once they\n        # are already running. There might be some when the `shutdown()` happened.\n        # Silence their logger's spew about the event loop being closed.\n        cf_logger = logging.getLogger(\"concurrent.futures\")\n        cf_logger.setLevel(logging.CRITICAL)\n        loop.close()",
                "def sub_twice(regex: Pattern[str], replacement: str, original: str) -> str:\n    \"\"\"Replace `regex` with `replacement` twice on `original`.\n\n    This is used by string normalization to perform replaces on\n    overlapping matches.\n    \"\"\"\n    return regex.sub(replacement, regex.sub(replacement, original))",
                "def re_compile_maybe_verbose(regex: str) -> Pattern[str]:\n    \"\"\"Compile a regular expression string in `regex`.\n\n    If it contains newlines, use verbose mode.\n    \"\"\"\n    if \"\\n\" in regex:\n        regex = \"(?x)\" + regex\n    compiled: Pattern[str] = re.compile(regex)\n    return compiled",
                "def enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]:\n    \"\"\"Like `reversed(enumerate(sequence))` if that were possible.\"\"\"\n    index = len(sequence) - 1\n    for element in reversed(sequence):\n        yield (index, element)\n        index -= 1",
                "def enumerate_with_length(\n    line: Line, reversed: bool = False\n) -> Iterator[Tuple[Index, Leaf, int]]:\n    \"\"\"Return an enumeration of leaves with their length.\n\n    Stops prematurely on multiline strings and standalone comments.\n    \"\"\"\n    op = cast(\n        Callable[[Sequence[Leaf]], Iterator[Tuple[Index, Leaf]]],\n        enumerate_reversed if reversed else enumerate,\n    )\n    for index, leaf in op(line.leaves):\n        length = len(leaf.prefix) + len(leaf.value)\n        if \"\\n\" in leaf.value:\n            return  # Multiline strings, we can't continue.\n\n        for comment in line.comments_after(leaf):\n            length += len(comment.value)\n\n        yield index, leaf, length",
                "def is_line_short_enough(line: Line, *, line_length: int, line_str: str = \"\") -> bool:\n    \"\"\"Return True if `line` is no longer than `line_length`.\n\n    Uses the provided `line_str` rendering, if any, otherwise computes a new one.\n    \"\"\"\n    if not line_str:\n        line_str = line_to_string(line)\n    return (\n        len(line_str) <= line_length\n        and \"\\n\" not in line_str  # multiline strings\n        and not line.contains_standalone_comments()\n    )",
                "def can_be_split(line: Line) -> bool:\n    \"\"\"Return False if the line cannot be split *for sure*.\n\n    This is not an exhaustive search but a cheap heuristic that we can use to\n    avoid some unfortunate formattings (mostly around wrapping unsplittable code\n    in unnecessary parentheses).\n    \"\"\"\n    leaves = line.leaves\n    if len(leaves) < 2:\n        return False\n\n    if leaves[0].type == token.STRING and leaves[1].type == token.DOT:\n        call_count = 0\n        dot_count = 0\n        next = leaves[-1]\n        for leaf in leaves[-2::-1]:\n            if leaf.type in OPENING_BRACKETS:\n                if next.type not in CLOSING_BRACKETS:\n                    return False\n\n                call_count += 1\n            elif leaf.type == token.DOT:\n                dot_count += 1\n            elif leaf.type == token.NAME:\n                if not (next.type == token.DOT or next.type in OPENING_BRACKETS):\n                    return False\n\n            elif leaf.type not in CLOSING_BRACKETS:\n                return False\n\n            if dot_count > 1 and call_count > 1:\n                return False\n\n    return True",
                "def can_omit_invisible_parens(line: Line, line_length: int) -> bool:\n    \"\"\"Does `line` have a shape safe to reformat without optional parens around it?\n\n    Returns True for only a subset of potentially nice looking formattings but\n    the point is to not return false positives that end up producing lines that\n    are too long.\n    \"\"\"\n    bt = line.bracket_tracker\n    if not bt.delimiters:\n        # Without delimiters the optional parentheses are useless.\n        return True\n\n    max_priority = bt.max_delimiter_priority()\n    if bt.delimiter_count_with_priority(max_priority) > 1:\n        # With more than one delimiter of a kind the optional parentheses read better.\n        return False\n\n    if max_priority == DOT_PRIORITY:\n        # A single stranded method call doesn't require optional parentheses.\n        return True\n\n    assert len(line.leaves) >= 2, \"Stranded delimiter\"\n\n    first = line.leaves[0]\n    second = line.leaves[1]\n    penultimate = line.leaves[-2]\n    last = line.leaves[-1]\n\n    # With a single delimiter, omit if the expression starts or ends with\n    # a bracket.\n    if first.type in OPENING_BRACKETS and second.type not in CLOSING_BRACKETS:\n        remainder = False\n        length = 4 * line.depth\n        for _index, leaf, leaf_length in enumerate_with_length(line):\n            if leaf.type in CLOSING_BRACKETS and leaf.opening_bracket is first:\n                remainder = True\n            if remainder:\n                length += leaf_length\n                if length > line_length:\n                    break\n\n                if leaf.type in OPENING_BRACKETS:\n                    # There are brackets we can further split on.\n                    remainder = False\n\n        else:\n            # checked the entire string and line length wasn't exceeded\n            if len(line.leaves) == _index + 1:\n                return True\n\n        # Note: we are not returning False here because a line might have *both*\n        # a leading opening bracket and a trailing closing bracket.  If the\n        # opening bracket doesn't match our rule, maybe the closing will.\n\n    if (\n        last.type == token.RPAR\n        or last.type == token.RBRACE\n        or (\n            # don't use indexing for omitting optional parentheses;\n            # it looks weird\n            last.type == token.RSQB\n            and last.parent\n            and last.parent.type != syms.trailer\n        )\n    ):\n        if penultimate.type in OPENING_BRACKETS:\n            # Empty brackets don't help.\n            return False\n\n        if is_multiline_string(first):\n            # Additional wrapping of a multiline string in this situation is\n            # unnecessary.\n            return True\n\n        length = 4 * line.depth\n        seen_other_brackets = False\n        for _index, leaf, leaf_length in enumerate_with_length(line):\n            length += leaf_length\n            if leaf is last.opening_bracket:\n                if seen_other_brackets or length <= line_length:\n                    return True\n\n            elif leaf.type in OPENING_BRACKETS:\n                # There are brackets we can further split on.\n                seen_other_brackets = True\n\n    return False",
                "def get_cache_file(mode: Mode) -> Path:\n    return CACHE_DIR / f\"cache.{mode.get_cache_key()}.pickle\"",
                "def read_cache(mode: Mode) -> Cache:\n    \"\"\"Read the cache if it exists and is well formed.\n\n    If it is not well formed, the call to write_cache later should resolve the issue.\n    \"\"\"\n    cache_file = get_cache_file(mode)\n    if not cache_file.exists():\n        return {}\n\n    with cache_file.open(\"rb\") as fobj:\n        try:\n            cache: Cache = pickle.load(fobj)\n        except (pickle.UnpicklingError, ValueError):\n            return {}\n\n    return cache",
                "def get_cache_info(path: Path) -> CacheInfo:\n    \"\"\"Return the information used to check if a file is already formatted or not.\"\"\"\n    stat = path.stat()\n    return stat.st_mtime, stat.st_size",
                "def filter_cached(cache: Cache, sources: Iterable[Path]) -> Tuple[Set[Path], Set[Path]]:\n    \"\"\"Split an iterable of paths in `sources` into two sets.\n\n    The first contains paths of files that modified on disk or are not in the\n    cache. The other contains paths to non-modified files.\n    \"\"\"\n    todo, done = set(), set()\n    for src in sources:\n        src = src.resolve()\n        if cache.get(src) != get_cache_info(src):\n            todo.add(src)\n        else:\n            done.add(src)\n    return todo, done",
                "def write_cache(cache: Cache, sources: Iterable[Path], mode: Mode) -> None:\n    \"\"\"Update the cache file.\"\"\"\n    cache_file = get_cache_file(mode)\n    try:\n        CACHE_DIR.mkdir(parents=True, exist_ok=True)\n        new_cache = {**cache, **{src.resolve(): get_cache_info(src) for src in sources}}\n        with tempfile.NamedTemporaryFile(dir=str(cache_file.parent), delete=False) as f:\n            pickle.dump(new_cache, f, protocol=4)\n        os.replace(f.name, cache_file)\n    except OSError:\n        pass",
                "def patch_click() -> None:\n    \"\"\"Make Click not crash.\n\n    On certain misconfigured environments, Python 3 selects the ASCII encoding as the\n    default which restricts paths that it can access during the lifetime of the\n    application.  Click refuses to work in this scenario by raising a RuntimeError.\n\n    In case of Black the likelihood that non-ASCII characters are going to be used in\n    file paths is minimal since it's Python source code.  Moreover, this crash was\n    spurious on Python 3.7 thanks to PEP 538 and PEP 540.\n    \"\"\"\n    try:\n        from click import core\n        from click import _unicodefun  # type: ignore\n    except ModuleNotFoundError:\n        return\n\n    for module in (core, _unicodefun):\n        if hasattr(module, \"_verify_python3_env\"):\n            module._verify_python3_env = lambda: None",
                "def patched_main() -> None:\n    freeze_support()\n    patch_click()\n    main()",
                "def fix_docstring(docstring: str, prefix: str) -> str:\n    # https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation\n    if not docstring:\n        return \"\"\n    # Convert tabs to spaces (following the normal Python rules)\n    # and split into a list of lines:\n    lines = docstring.expandtabs().splitlines()\n    # Determine minimum indentation (first line doesn't count):\n    indent = sys.maxsize\n    for line in lines[1:]:\n        stripped = line.lstrip()\n        if stripped:\n            indent = min(indent, len(line) - len(stripped))\n    # Remove indentation (first line is special):\n    trimmed = [lines[0].strip()]\n    if indent < sys.maxsize:\n        last_line_idx = len(lines) - 2\n        for i, line in enumerate(lines[1:]):\n            stripped_line = line[indent:].rstrip()\n            if stripped_line or i == last_line_idx:\n                trimmed.append(prefix + stripped_line)\n            else:\n                trimmed.append(\"\")\n    # Return a single string:\n    return \"\\n\".join(trimmed)",
                "def __init__(self, value: T) -> None:\n    self._value = value",
                "def ok(self) -> T:\n    return self._value",
                "def __init__(self, e: E) -> None:\n    self._e = e",
                "def err(self) -> E:\n    return self._e",
                "@classmethod\ndef from_configuration(\n    cls, *, check: bool, diff: bool, color: bool = False\n) -> \"WriteBack\":\n    if check and not diff:\n        return cls.CHECK\n\n    if diff and color:\n        return cls.COLOR_DIFF\n\n    return cls.DIFF if diff else cls.YES",
                "def is_python2(self) -> bool:\n    return self is TargetVersion.PY27",
                "def get_cache_key(self) -> str:\n    if self.target_versions:\n        version_str = \",\".join(\n            str(version.value)\n            for version in sorted(self.target_versions, key=lambda v: v.value)\n        )\n    else:\n        version_str = \"-\"\n    parts = [\n        version_str,\n        str(self.line_length),\n        str(int(self.string_normalization)),\n        str(int(self.is_pyi)),\n    ]\n    return \".\".join(parts)",
                "def visit(self, node: LN) -> Iterator[T]:\n    \"\"\"Main method to visit `node` and its children.\n\n    It tries to find a `visit_*()` method for the given `node.type`, like\n    `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.\n    If no dedicated `visit_*()` method is found, chooses `visit_default()`\n    instead.\n\n    Then yields objects of type `T` from the selected visitor.\n    \"\"\"\n    if node.type < 256:\n        name = token.tok_name[node.type]\n    else:\n        name = str(type_repr(node.type))\n    # We explicitly branch on whether a visitor exists (instead of\n    # using self.visit_default as the default arg to getattr) in order\n    # to save needing to create a bound method object and so mypyc can\n    # generate a native call to visit_default.\n    visitf = getattr(self, f\"visit_{name}\", None)\n    if visitf:\n        yield from visitf(node)\n    else:\n        yield from self.visit_default(node)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Node):\n        for child in node.children:\n            yield from self.visit(child)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    indent = \" \" * (2 * self.tree_depth)\n    if isinstance(node, Node):\n        _type = type_repr(node.type)\n        out(f\"{indent}{_type}\", fg=\"yellow\")\n        self.tree_depth += 1\n        for child in node.children:\n            yield from self.visit(child)\n\n        self.tree_depth -= 1\n        out(f\"{indent}/{_type}\", fg=\"yellow\", bold=False)\n    else:\n        _type = token.tok_name.get(node.type, str(node.type))\n        out(f\"{indent}{_type}\", fg=\"blue\", nl=False)\n        if node.prefix:\n            # We don't have to handle prefixes for `Node` objects since\n            # that delegates to the first child anyway.\n            out(f\" {node.prefix!r}\", fg=\"green\", bold=False, nl=False)\n        out(f\" {node.value!r}\", fg=\"blue\", bold=False)",
                "@classmethod\ndef show(cls, code: Union[str, Leaf, Node]) -> None:\n    \"\"\"Pretty-print the lib2to3 AST of a given string of `code`.\n\n    Convenience method for debugging.\n    \"\"\"\n    v: DebugVisitor[None] = DebugVisitor()\n    if isinstance(code, str):\n        code = lib2to3_parse(code)\n    list(v.visit(code))",
                "def mark(self, leaf: Leaf) -> None:\n    \"\"\"Mark `leaf` with bracket-related metadata. Keep track of delimiters.\n\n    All leaves receive an int `bracket_depth` field that stores how deep\n    within brackets a given leaf is. 0 means there are no enclosing brackets\n    that started on this line.\n\n    If a leaf is itself a closing bracket, it receives an `opening_bracket`\n    field that it forms a pair with. This is a one-directional link to\n    avoid reference cycles.\n\n    If a leaf is a delimiter (a token on which Black can split the line if\n    needed) and it's on depth 0, its `id()` is stored in the tracker's\n    `delimiters` field.\n    \"\"\"\n    if leaf.type == token.COMMENT:\n        return\n\n    self.maybe_decrement_after_for_loop_variable(leaf)\n    self.maybe_decrement_after_lambda_arguments(leaf)\n    if leaf.type in CLOSING_BRACKETS:\n        self.depth -= 1\n        opening_bracket = self.bracket_match.pop((self.depth, leaf.type))\n        leaf.opening_bracket = opening_bracket\n    leaf.bracket_depth = self.depth\n    if self.depth == 0:\n        delim = is_split_before_delimiter(leaf, self.previous)\n        if delim and self.previous is not None:\n            self.delimiters[id(self.previous)] = delim\n        else:\n            delim = is_split_after_delimiter(leaf, self.previous)\n            if delim:\n                self.delimiters[id(leaf)] = delim\n    if leaf.type in OPENING_BRACKETS:\n        self.bracket_match[self.depth, BRACKET[leaf.type]] = leaf\n        self.depth += 1\n    self.previous = leaf\n    self.maybe_increment_lambda_arguments(leaf)\n    self.maybe_increment_for_loop_variable(leaf)",
                "def any_open_brackets(self) -> bool:\n    \"\"\"Return True if there is an yet unmatched open bracket on the line.\"\"\"\n    return bool(self.bracket_match)",
                "def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> Priority:\n    \"\"\"Return the highest priority of a delimiter found on the line.\n\n    Values are consistent with what `is_split_*_delimiter()` return.\n    Raises ValueError on no delimiters.\n    \"\"\"\n    return max(v for k, v in self.delimiters.items() if k not in exclude)",
                "def delimiter_count_with_priority(self, priority: Priority = 0) -> int:\n    \"\"\"Return the number of delimiters with the given `priority`.\n\n    If no `priority` is passed, defaults to max priority on the line.\n    \"\"\"\n    if not self.delimiters:\n        return 0\n\n    priority = priority or self.max_delimiter_priority()\n    return sum(1 for p in self.delimiters.values() if p == priority)",
                "def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"In a for loop, or comprehension, the variables are often unpacks.\n\n    To avoid splitting on the comma in this situation, increase the depth of\n    tokens between `for` and `in`.\n    \"\"\"\n    if leaf.type == token.NAME and leaf.value == \"for\":\n        self.depth += 1\n        self._for_loop_depths.append(self.depth)\n        return True\n\n    return False",
                "def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"See `maybe_increment_for_loop_variable` above for explanation.\"\"\"\n    if (\n        self._for_loop_depths\n        and self._for_loop_depths[-1] == self.depth\n        and leaf.type == token.NAME\n        and leaf.value == \"in\"\n    ):\n        self.depth -= 1\n        self._for_loop_depths.pop()\n        return True\n\n    return False",
                "def maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool:\n    \"\"\"In a lambda expression, there might be more than one argument.\n\n    To avoid splitting on the comma in this situation, increase the depth of\n    tokens between `lambda` and `:`.\n    \"\"\"\n    if leaf.type == token.NAME and leaf.value == \"lambda\":\n        self.depth += 1\n        self._lambda_argument_depths.append(self.depth)\n        return True\n\n    return False",
                "def maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool:\n    \"\"\"See `maybe_increment_lambda_arguments` above for explanation.\"\"\"\n    if (\n        self._lambda_argument_depths\n        and self._lambda_argument_depths[-1] == self.depth\n        and leaf.type == token.COLON\n    ):\n        self.depth -= 1\n        self._lambda_argument_depths.pop()\n        return True\n\n    return False",
                "def get_open_lsqb(self) -> Optional[Leaf]:\n    \"\"\"Return the most recent opening square bracket (if any).\"\"\"\n    return self.bracket_match.get((self.depth - 1, token.RSQB))",
                "def append(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Add a new `leaf` to the end of the line.\n\n    Unless `preformatted` is True, the `leaf` will receive a new consistent\n    whitespace prefix and metadata applied by :class:`BracketTracker`.\n    Trailing commas are maybe removed, unpacked for loop variables are\n    demoted from being delimiters.\n\n    Inline comments are put aside.\n    \"\"\"\n    has_value = leaf.type in BRACKETS or bool(leaf.value.strip())\n    if not has_value:\n        return\n\n    if token.COLON == leaf.type and self.is_class_paren_empty:\n        del self.leaves[-2:]\n    if self.leaves and not preformatted:\n        # Note: at this point leaf.prefix should be empty except for\n        # imports, for which we only preserve newlines.\n        leaf.prefix += whitespace(\n            leaf, complex_subscript=self.is_complex_subscript(leaf)\n        )\n    if self.inside_brackets or not preformatted:\n        self.bracket_tracker.mark(leaf)\n        self.maybe_remove_trailing_comma(leaf)\n    if not self.append_comment(leaf):\n        self.leaves.append(leaf)",
                "def append_safe(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Like :func:`append()` but disallow invalid standalone comment structure.\n\n    Raises ValueError when any `leaf` is appended after a standalone comment\n    or when a standalone comment is not the first leaf on the line.\n    \"\"\"\n    if self.bracket_tracker.depth == 0:\n        if self.is_comment:\n            raise ValueError(\"cannot append to standalone comments\")\n\n        if self.leaves and leaf.type == STANDALONE_COMMENT:\n            raise ValueError(\n                \"cannot append standalone comments to a populated line\"\n            )\n\n    self.append(leaf, preformatted=preformatted)",
                "@property\ndef is_comment(self) -> bool:\n    \"\"\"Is this line a standalone comment?\"\"\"\n    return len(self.leaves) == 1 and self.leaves[0].type == STANDALONE_COMMENT",
                "@property\ndef is_decorator(self) -> bool:\n    \"\"\"Is this line a decorator?\"\"\"\n    return bool(self) and self.leaves[0].type == token.AT",
                "@property\ndef is_import(self) -> bool:\n    \"\"\"Is this an import line?\"\"\"\n    return bool(self) and is_import(self.leaves[0])",
                "@property\ndef is_class(self) -> bool:\n    \"\"\"Is this line a class definition?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.NAME\n        and self.leaves[0].value == \"class\"\n    )",
                "@property\ndef is_stub_class(self) -> bool:\n    \"\"\"Is this line a class definition with a body consisting only of \"...\"?\"\"\"\n    return self.is_class and self.leaves[-3:] == [\n        Leaf(token.DOT, \".\") for _ in range(3)\n    ]",
                "@property\ndef is_collection_with_optional_trailing_comma(self) -> bool:\n    \"\"\"Is this line a collection literal with a trailing comma that's optional?\n\n    Note that the trailing comma in a 1-tuple is not optional.\n    \"\"\"\n    if not self.leaves or len(self.leaves) < 4:\n        return False\n\n    # Look for and address a trailing colon.\n    if self.leaves[-1].type == token.COLON:\n        closer = self.leaves[-2]\n        close_index = -2\n    else:\n        closer = self.leaves[-1]\n        close_index = -1\n    if closer.type not in CLOSING_BRACKETS or self.inside_brackets:\n        return False\n\n    if closer.type == token.RPAR:\n        # Tuples require an extra check, because if there's only\n        # one element in the tuple removing the comma unmakes the\n        # tuple.\n        #\n        # We also check for parens before looking for the trailing\n        # comma because in some cases (eg assigning a dict\n        # literal) the literal gets wrapped in temporary parens\n        # during parsing. This case is covered by the\n        # collections.py test data.\n        opener = closer.opening_bracket\n        for _open_index, leaf in enumerate(self.leaves):\n            if leaf is opener:\n                break\n\n        else:\n            # Couldn't find the matching opening paren, play it safe.\n            return False\n\n        commas = 0\n        comma_depth = self.leaves[close_index - 1].bracket_depth\n        for leaf in self.leaves[_open_index + 1 : close_index]:\n            if leaf.bracket_depth == comma_depth and leaf.type == token.COMMA:\n                commas += 1\n        if commas > 1:\n            # We haven't looked yet for the trailing comma because\n            # we might also have caught noop parens.\n            return self.leaves[close_index - 1].type == token.COMMA\n\n        elif commas == 1:\n            return False  # it's either a one-tuple or didn't have a trailing comma\n\n        if self.leaves[close_index - 1].type in CLOSING_BRACKETS:\n            close_index -= 1\n            closer = self.leaves[close_index]\n            if closer.type == token.RPAR:\n                # TODO: this is a gut feeling. Will we ever see this?\n                return False\n\n    if self.leaves[close_index - 1].type != token.COMMA:\n        return False\n\n    return True",
                "@property\ndef is_def(self) -> bool:\n    \"\"\"Is this a function definition? (Also returns True for async defs.)\"\"\"\n    try:\n        first_leaf = self.leaves[0]\n    except IndexError:\n        return False\n\n    try:\n        second_leaf: Optional[Leaf] = self.leaves[1]\n    except IndexError:\n        second_leaf = None\n    return (first_leaf.type == token.NAME and first_leaf.value == \"def\") or (\n        first_leaf.type == token.ASYNC\n        and second_leaf is not None\n        and second_leaf.type == token.NAME\n        and second_leaf.value == \"def\"\n    )",
                "@property\ndef is_class_paren_empty(self) -> bool:\n    \"\"\"Is this a class with no base classes but using parentheses?\n\n    Those are unnecessary and should be removed.\n    \"\"\"\n    return (\n        bool(self)\n        and len(self.leaves) == 4\n        and self.is_class\n        and self.leaves[2].type == token.LPAR\n        and self.leaves[2].value == \"(\"\n        and self.leaves[3].type == token.RPAR\n        and self.leaves[3].value == \")\"\n    )",
                "@property\ndef is_triple_quoted_string(self) -> bool:\n    \"\"\"Is the line a triple quoted string?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.STRING\n        and self.leaves[0].value.startswith(('\"\"\"', \"'''\"))\n    )",
                "def contains_standalone_comments(self, depth_limit: int = sys.maxsize) -> bool:\n    \"\"\"If so, needs to be split before emitting.\"\"\"\n    for leaf in self.leaves:\n        if leaf.type == STANDALONE_COMMENT and leaf.bracket_depth <= depth_limit:\n            return True\n\n    return False",
                "def contains_uncollapsable_type_comments(self) -> bool:\n    ignored_ids = set()\n    try:\n        last_leaf = self.leaves[-1]\n        ignored_ids.add(id(last_leaf))\n        if last_leaf.type == token.COMMA or (\n            last_leaf.type == token.RPAR and not last_leaf.value\n        ):\n            # When trailing commas or optional parens are inserted by Black for\n            # consistency, comments after the previous last element are not moved\n            # (they don't have to, rendering will still be correct).  So we ignore\n            # trailing commas and invisible.\n            last_leaf = self.leaves[-2]\n            ignored_ids.add(id(last_leaf))\n    except IndexError:\n        return False\n\n    # A type comment is uncollapsable if it is attached to a leaf\n    # that isn't at the end of the line (since that could cause it\n    # to get associated to a different argument) or if there are\n    # comments before it (since that could cause it to get hidden\n    # behind a comment.\n    comment_seen = False\n    for leaf_id, comments in self.comments.items():\n        for comment in comments:\n            if is_type_comment(comment):\n                if comment_seen or (\n                    not is_type_comment(comment, \" ignore\")\n                    and leaf_id not in ignored_ids\n                ):\n                    return True\n\n            comment_seen = True\n\n    return False",
                "def contains_unsplittable_type_ignore(self) -> bool:\n    if not self.leaves:\n        return False\n\n    # If a 'type: ignore' is attached to the end of a line, we\n    # can't split the line, because we can't know which of the\n    # subexpressions the ignore was meant to apply to.\n    #\n    # We only want this to apply to actual physical lines from the\n    # original source, though: we don't want the presence of a\n    # 'type: ignore' at the end of a multiline expression to\n    # justify pushing it all onto one line. Thus we\n    # (unfortunately) need to check the actual source lines and\n    # only report an unsplittable 'type: ignore' if this line was\n    # one line in the original code.\n\n    # Grab the first and last line numbers, skipping generated leaves\n    first_line = next((l.lineno for l in self.leaves if l.lineno != 0), 0)\n    last_line = next((l.lineno for l in reversed(self.leaves) if l.lineno != 0), 0)\n\n    if first_line == last_line:\n        # We look at the last two leaves since a comma or an\n        # invisible paren could have been added at the end of the\n        # line.\n        for node in self.leaves[-2:]:\n            for comment in self.comments.get(id(node), []):\n                if is_type_comment(comment, \" ignore\"):\n                    return True\n\n    return False",
                "def contains_multiline_strings(self) -> bool:\n    return any(is_multiline_string(leaf) for leaf in self.leaves)",
                "def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:\n    \"\"\"Remove trailing comma if there is one and it's safe.\"\"\"\n    if not (self.leaves and self.leaves[-1].type == token.COMMA):\n        return False\n\n    # We remove trailing commas only in the case of importing a\n    # single name from a module.\n    if not (\n        self.leaves\n        and self.is_import\n        and len(self.leaves) > 4\n        and self.leaves[-1].type == token.COMMA\n        and closing.type in CLOSING_BRACKETS\n        and self.leaves[-4].type == token.NAME\n        and (\n            # regular `from foo import bar,`\n            self.leaves[-4].value == \"import\"\n            # `from foo import (bar as baz,)\n            or (\n                len(self.leaves) > 6\n                and self.leaves[-6].value == \"import\"\n                and self.leaves[-3].value == \"as\"\n            )\n            # `from foo import bar as baz,`\n            or (\n                len(self.leaves) > 5\n                and self.leaves[-5].value == \"import\"\n                and self.leaves[-3].value == \"as\"\n            )\n        )\n        and closing.type == token.RPAR\n    ):\n        return False\n\n    self.remove_trailing_comma()\n    return True",
                "def append_comment(self, comment: Leaf) -> bool:\n    \"\"\"Add an inline or standalone comment to the line.\"\"\"\n    if (\n        comment.type == STANDALONE_COMMENT\n        and self.bracket_tracker.any_open_brackets()\n    ):\n        comment.prefix = \"\"\n        return False\n\n    if comment.type != token.COMMENT:\n        return False\n\n    if not self.leaves:\n        comment.type = STANDALONE_COMMENT\n        comment.prefix = \"\"\n        return False\n\n    last_leaf = self.leaves[-1]\n    if (\n        last_leaf.type == token.RPAR\n        and not last_leaf.value\n        and last_leaf.parent\n        and len(list(last_leaf.parent.leaves())) <= 3\n        and not is_type_comment(comment)\n    ):\n        # Comments on an optional parens wrapping a single leaf should belong to\n        # the wrapped node except if it's a type comment. Pinning the comment like\n        # this avoids unstable formatting caused by comment migration.\n        if len(self.leaves) < 2:\n            comment.type = STANDALONE_COMMENT\n            comment.prefix = \"\"\n            return False\n\n        last_leaf = self.leaves[-2]\n    self.comments.setdefault(id(last_leaf), []).append(comment)\n    return True",
                "def comments_after(self, leaf: Leaf) -> List[Leaf]:\n    \"\"\"Generate comments that should appear directly after `leaf`.\"\"\"\n    return self.comments.get(id(leaf), [])",
                "def remove_trailing_comma(self) -> None:\n    \"\"\"Remove the trailing comma and moves the comments attached to it.\"\"\"\n    trailing_comma = self.leaves.pop()\n    trailing_comma_comments = self.comments.pop(id(trailing_comma), [])\n    self.comments.setdefault(id(self.leaves[-1]), []).extend(\n        trailing_comma_comments\n    )",
                "def is_complex_subscript(self, leaf: Leaf) -> bool:\n    \"\"\"Return True iff `leaf` is part of a slice with non-trivial exprs.\"\"\"\n    open_lsqb = self.bracket_tracker.get_open_lsqb()\n    if open_lsqb is None:\n        return False\n\n    subscript_start = open_lsqb.next_sibling\n\n    if isinstance(subscript_start, Node):\n        if subscript_start.type == syms.listmaker:\n            return False\n\n        if subscript_start.type == syms.subscriptlist:\n            subscript_start = child_towards(subscript_start, leaf)\n    return subscript_start is not None and any(\n        n.type in TEST_DESCENDANTS for n in subscript_start.pre_order()\n    )",
                "def clone(self) -> \"Line\":\n    return Line(\n        depth=self.depth,\n        inside_brackets=self.inside_brackets,\n        should_explode=self.should_explode,\n    )",
                "def __str__(self) -> str:\n    \"\"\"Render the line.\"\"\"\n    if not self:\n        return \"\\n\"\n\n    indent = \"    \" * self.depth\n    leaves = iter(self.leaves)\n    first = next(leaves)\n    res = f\"{first.prefix}{indent}{first.value}\"\n    for leaf in leaves:\n        res += str(leaf)\n    for comment in itertools.chain.from_iterable(self.comments.values()):\n        res += str(comment)\n\n    return res + \"\\n\"",
                "def __bool__(self) -> bool:\n    \"\"\"Return True if the line has leaves or comments.\"\"\"\n    return bool(self.leaves or self.comments)",
                "def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    \"\"\"Return the number of extra empty lines before and after the `current_line`.\n\n    This is for separating `def`, `async def` and `class` with extra empty\n    lines (two on module-level).\n    \"\"\"\n    before, after = self._maybe_empty_lines(current_line)\n    before = (\n        # Black should not insert empty lines at the beginning\n        # of the file\n        0\n        if self.previous_line is None\n        else before - self.previous_after\n    )\n    self.previous_after = after\n    self.previous_line = current_line\n    return before, after",
                "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 1 if self.is_pyi else 2\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    depth = current_line.depth\n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        if self.is_pyi:\n            before = 0 if depth else 1\n        else:\n            before = 1 if depth else 2\n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        return self._maybe_empty_lines_for_class_or_def(current_line, before)\n\n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and depth == self.previous_line.depth\n    ):\n        return (before or 1), 0\n\n    if (\n        self.previous_line\n        and self.previous_line.is_class\n        and current_line.is_triple_quoted_string\n    ):\n        return before, 1\n\n    return before, 0",
                "def _maybe_empty_lines_for_class_or_def(\n    self, current_line: Line, before: int\n) -> Tuple[int, int]:\n    if not current_line.is_decorator:\n        self.previous_defs.append(current_line.depth)\n    if self.previous_line is None:\n        # Don't insert empty lines before the first line in the file.\n        return 0, 0\n\n    if self.previous_line.is_decorator:\n        return 0, 0\n\n    if self.previous_line.depth < current_line.depth and (\n        self.previous_line.is_class or self.previous_line.is_def\n    ):\n        return 0, 0\n\n    if (\n        self.previous_line.is_comment\n        and self.previous_line.depth == current_line.depth\n        and before == 0\n    ):\n        return 0, 0\n\n    if self.is_pyi:\n        if self.previous_line.depth > current_line.depth:\n            newlines = 1\n        elif current_line.is_class or self.previous_line.is_class:\n            if current_line.is_stub_class and self.previous_line.is_stub_class:\n                # No blank line between classes with an empty body\n                newlines = 0\n            else:\n                newlines = 1\n        elif current_line.is_def and not self.previous_line.is_def:\n            # Blank line between a block of functions and a block of non-functions\n            newlines = 1\n        else:\n            newlines = 0\n    else:\n        newlines = 2\n    if current_line.depth and newlines:\n        newlines -= 1\n    return newlines, 0",
                "def line(self, indent: int = 0) -> Iterator[Line]:\n    \"\"\"Generate a line.\n\n    If the line is empty, only emit if it makes sense.\n    If the line is too long, split it first and then generate.\n\n    If any lines were generated, set up a new current_line.\n    \"\"\"\n    if not self.current_line:\n        self.current_line.depth += indent\n        return  # Line is empty, don't emit. Creating a new one unnecessary.\n\n    complete_line = self.current_line\n    self.current_line = Line(depth=complete_line.depth + indent)\n    yield complete_line",
                "def visit_default(self, node: LN) -> Iterator[Line]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Leaf):\n        any_open_brackets = self.current_line.bracket_tracker.any_open_brackets()\n        for comment in generate_comments(node):\n            if any_open_brackets:\n                # any comment within brackets is subject to splitting\n                self.current_line.append(comment)\n            elif comment.type == token.COMMENT:\n                # regular trailing comment\n                self.current_line.append(comment)\n                yield from self.line()\n\n            else:\n                # regular standalone comment\n                yield from self.line()\n\n                self.current_line.append(comment)\n                yield from self.line()\n\n        normalize_prefix(node, inside_brackets=any_open_brackets)\n        if self.normalize_strings and node.type == token.STRING:\n            normalize_string_prefix(node, remove_u_prefix=self.remove_u_prefix)\n            normalize_string_quotes(node)\n        if node.type == token.NUMBER:\n            normalize_numeric_literal(node)\n        if node.type not in WHITESPACE:\n            self.current_line.append(node)\n    yield from super().visit_default(node)",
                "def visit_INDENT(self, node: Leaf) -> Iterator[Line]:\n    \"\"\"Increase indentation level, maybe yield a line.\"\"\"\n    # In blib2to3 INDENT never holds comments.\n    yield from self.line(+1)\n    yield from self.visit_default(node)",
                "def visit_DEDENT(self, node: Leaf) -> Iterator[Line]:\n    \"\"\"Decrease indentation level, maybe yield a line.\"\"\"\n    # The current line might still wait for trailing comments.  At DEDENT time\n    # there won't be any (they would be prefixes on the preceding NEWLINE).\n    # Emit the line then.\n    yield from self.line()\n\n    # While DEDENT has no value, its prefix may contain standalone comments\n    # that belong to the current indentation level.  Get 'em.\n    yield from self.visit_default(node)\n\n    # Finally, emit the dedent.\n    yield from self.line(-1)",
                "def visit_stmt(\n    self, node: Node, keywords: Set[str], parens: Set[str]\n) -> Iterator[Line]:\n    \"\"\"Visit a statement.\n\n    This implementation is shared for `if`, `while`, `for`, `try`, `except`,\n    `def`, `with`, `class`, `assert` and assignments.\n\n    The relevant Python language `keywords` for a given statement will be\n    NAME leaves within it. This methods puts those on a separate line.\n\n    `parens` holds a set of string leaf values immediately after which\n    invisible parens should be put.\n    \"\"\"\n    normalize_invisible_parens(node, parens_after=parens)\n    for child in node.children:\n        if child.type == token.NAME and child.value in keywords:  # type: ignore\n            yield from self.line()\n\n        yield from self.visit(child)",
                "def visit_suite(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit a suite.\"\"\"\n    if self.is_pyi and is_stub_suite(node):\n        yield from self.visit(node.children[2])\n    else:\n        yield from self.visit_default(node)",
                "def visit_simple_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit a statement without nested statements.\"\"\"\n    is_suite_like = node.parent and node.parent.type in STATEMENT\n    if is_suite_like:\n        if self.is_pyi and is_stub_body(node):\n            yield from self.visit_default(node)\n        else:\n            yield from self.line(+1)\n            yield from self.visit_default(node)\n            yield from self.line(-1)\n\n    else:\n        if not self.is_pyi or not node.parent or not is_stub_suite(node.parent):\n            yield from self.line()\n        yield from self.visit_default(node)",
                "def visit_async_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit `async def`, `async for`, `async with`.\"\"\"\n    yield from self.line()\n\n    children = iter(node.children)\n    for child in children:\n        yield from self.visit(child)\n\n        if child.type == token.ASYNC:\n            break\n\n    internal_stmt = next(children)\n    for child in internal_stmt.children:\n        yield from self.visit(child)",
                "def visit_decorators(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit decorators.\"\"\"\n    for child in node.children:\n        yield from self.line()\n        yield from self.visit(child)",
                "def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Remove a semicolon and put the other statement on a separate line.\"\"\"\n    yield from self.line()",
                "def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"End of file. Process outstanding comments and end with a newline.\"\"\"\n    yield from self.visit_default(leaf)\n    yield from self.line()",
                "def visit_STANDALONE_COMMENT(self, leaf: Leaf) -> Iterator[Line]:\n    if not self.current_line.bracket_tracker.any_open_brackets():\n        yield from self.line()\n    yield from self.visit_default(leaf)",
                "def visit_factor(self, node: Node) -> Iterator[Line]:\n    \"\"\"Force parentheses between a unary op and a binary power:\n\n    -2 ** 8 -> -(2 ** 8)\n    \"\"\"\n    _operator, operand = node.children\n    if (\n        operand.type == syms.power\n        and len(operand.children) == 3\n        and operand.children[1].type == token.DOUBLESTAR\n    ):\n        lpar = Leaf(token.LPAR, \"(\")\n        rpar = Leaf(token.RPAR, \")\")\n        index = operand.remove() or 0\n        node.insert_child(index, Node(syms.atom, [lpar, operand, rpar]))\n    yield from self.visit_default(node)",
                "def visit_STRING(self, leaf: Leaf) -> Iterator[Line]:\n    # Check if it's a docstring\n    if prev_siblings_are(\n        leaf.parent, [None, token.NEWLINE, token.INDENT, syms.simple_stmt]\n    ) and is_multiline_string(leaf):\n        prefix = \"    \" * self.current_line.depth\n        docstring = fix_docstring(leaf.value[3:-3], prefix)\n        leaf.value = leaf.value[0:3] + docstring + leaf.value[-3:]\n        normalize_string_quotes(leaf)\n\n    yield from self.visit_default(leaf)",
                "def __post_init__(self) -> None:\n    \"\"\"You are in a twisty little maze of passages.\"\"\"\n    v = self.visit_stmt\n    \u00d8: Set[str] = set()\n    self.visit_assert_stmt = partial(v, keywords={\"assert\"}, parens={\"assert\", \",\"})\n    self.visit_if_stmt = partial(\n        v, keywords={\"if\", \"else\", \"elif\"}, parens={\"if\", \"elif\"}\n    )\n    self.visit_while_stmt = partial(v, keywords={\"while\", \"else\"}, parens={\"while\"})\n    self.visit_for_stmt = partial(v, keywords={\"for\", \"else\"}, parens={\"for\", \"in\"})\n    self.visit_try_stmt = partial(\n        v, keywords={\"try\", \"except\", \"else\", \"finally\"}, parens=\u00d8\n    )\n    self.visit_except_clause = partial(v, keywords={\"except\"}, parens=\u00d8)\n    self.visit_with_stmt = partial(v, keywords={\"with\"}, parens=\u00d8)\n    self.visit_funcdef = partial(v, keywords={\"def\"}, parens=\u00d8)\n    self.visit_classdef = partial(v, keywords={\"class\"}, parens=\u00d8)\n    self.visit_expr_stmt = partial(v, keywords=\u00d8, parens=ASSIGNMENTS)\n    self.visit_return_stmt = partial(v, keywords={\"return\"}, parens={\"return\"})\n    self.visit_import_from = partial(v, keywords=\u00d8, parens={\"import\"})\n    self.visit_del_stmt = partial(v, keywords=\u00d8, parens={\"del\"})\n    self.visit_async_funcdef = self.visit_async_stmt\n    self.visit_decorated = self.visit_decorators",
                "def init_st(ST: Type[StringTransformer]) -> StringTransformer:\n    \"\"\"Initialize StringTransformer\"\"\"\n    return ST(line_length, normalize_strings)",
                "@abstractmethod\ndef do_match(self, line: Line) -> TMatchResult:\n    \"\"\"\n    Returns:\n        * Ok(string_idx) such that `line.leaves[string_idx]` is our target\n        string, if a match was able to be made.\n            OR\n        * Err(CannotTransform), if a match was not able to be made.\n    \"\"\"",
                "@abstractmethod\ndef do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:\n    \"\"\"\n    Yields:\n        * Ok(new_line) where new_line is the new transformed line.\n            OR\n        * Err(CannotTransform) if the transformation failed for some reason. The\n        `do_match(...)` template method should usually be used to reject\n        the form of the given Line, but in some cases it is difficult to\n        know whether or not a Line meets the StringTransformer's\n        requirements until the transformation is already midway.\n\n    Side Effects:\n        This method should NOT mutate @line directly, but it MAY mutate the\n        Line's underlying Node structure. (WARNING: If the underlying Node\n        structure IS altered, then this method should NOT be allowed to\n        yield an CannotTransform after that point.)\n    \"\"\"",
                "def __call__(self, line: Line, _features: Collection[Feature]) -> Iterator[Line]:\n    \"\"\"\n    StringTransformer instances have a call signature that mirrors that of\n    the Transformer type.\n\n    Raises:\n        CannotTransform(...) if the concrete StringTransformer class is unable\n        to transform @line.\n    \"\"\"\n    # Optimization to avoid calling `self.do_match(...)` when the line does\n    # not contain any string.\n    if not any(leaf.type == token.STRING for leaf in line.leaves):\n        raise CannotTransform(\"There are no strings in this line.\")\n\n    match_result = self.do_match(line)\n\n    if isinstance(match_result, Err):\n        cant_transform = match_result.err()\n        raise CannotTransform(\n            f\"The string transformer {self.__class__.__name__} does not recognize\"\n            \" this line as one that it can transform.\"\n        ) from cant_transform\n\n    string_idx = match_result.ok()\n\n    for line_result in self.do_transform(line, string_idx):\n        if isinstance(line_result, Err):\n            cant_transform = line_result.err()\n            raise CannotTransform(\n                \"StringTransformer failed while attempting to transform string.\"\n            ) from cant_transform\n        line = line_result.ok()\n        yield line",
                "@staticmethod\ndef _get_key(string: str) -> \"CustomSplitMapMixin._Key\":\n    \"\"\"\n    Returns:\n        A unique identifier that is used internally to map @string to a\n        group of custom splits.\n    \"\"\"\n    return (id(string), string)",
                "def add_custom_splits(\n    self, string: str, custom_splits: Iterable[CustomSplit]\n) -> None:\n    \"\"\"Custom Split Map Setter Method\n\n    Side Effects:\n        Adds a mapping from @string to the custom splits @custom_splits.\n    \"\"\"\n    key = self._get_key(string)\n    self._CUSTOM_SPLIT_MAP[key] = tuple(custom_splits)",
                "def pop_custom_splits(self, string: str) -> List[CustomSplit]:\n    \"\"\"Custom Split Map Getter Method\n\n    Returns:\n        * A list of the custom splits that are mapped to @string, if any\n        exist.\n            OR\n        * [], otherwise.\n\n    Side Effects:\n        Deletes the mapping between @string and its associated custom\n        splits (which are returned to the caller).\n    \"\"\"\n    key = self._get_key(string)\n\n    custom_splits = self._CUSTOM_SPLIT_MAP[key]\n    del self._CUSTOM_SPLIT_MAP[key]\n\n    return list(custom_splits)",
                "def has_custom_splits(self, string: str) -> bool:\n    \"\"\"\n    Returns:\n        True iff @string is associated with a set of custom splits.\n    \"\"\"\n    key = self._get_key(string)\n    return key in self._CUSTOM_SPLIT_MAP",
                "def do_match(self, line: Line) -> TMatchResult:\n    LL = line.leaves\n\n    is_valid_index = is_valid_index_factory(LL)\n\n    for (i, leaf) in enumerate(LL):\n        if (\n            leaf.type == token.STRING\n            and is_valid_index(i + 1)\n            and LL[i + 1].type == token.STRING\n        ):\n            return Ok(i)\n\n        if leaf.type == token.STRING and \"\\\\\\n\" in leaf.value:\n            return Ok(i)\n\n    return TErr(\"This line has no strings that need merging.\")",
                "def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:\n    new_line = line\n    rblc_result = self.__remove_backslash_line_continuation_chars(\n        new_line, string_idx\n    )\n    if isinstance(rblc_result, Ok):\n        new_line = rblc_result.ok()\n\n    msg_result = self.__merge_string_group(new_line, string_idx)\n    if isinstance(msg_result, Ok):\n        new_line = msg_result.ok()\n\n    if isinstance(rblc_result, Err) and isinstance(msg_result, Err):\n        msg_cant_transform = msg_result.err()\n        rblc_cant_transform = rblc_result.err()\n        cant_transform = CannotTransform(\n            \"StringMerger failed to merge any strings in this line.\"\n        )\n\n        # Chain the errors together using `__cause__`.\n        msg_cant_transform.__cause__ = rblc_cant_transform\n        cant_transform.__cause__ = msg_cant_transform\n\n        yield Err(cant_transform)\n    else:\n        yield Ok(new_line)",
                "@staticmethod\ndef __remove_backslash_line_continuation_chars(\n    line: Line, string_idx: int\n) -> TResult[Line]:\n    \"\"\"\n    Merge strings that were split across multiple lines using\n    line-continuation backslashes.\n\n    Returns:\n        Ok(new_line), if @line contains backslash line-continuation\n        characters.\n            OR\n        Err(CannotTransform), otherwise.\n    \"\"\"\n    LL = line.leaves\n\n    string_leaf = LL[string_idx]\n    if not (\n        string_leaf.type == token.STRING\n        and \"\\\\\\n\" in string_leaf.value\n        and not has_triple_quotes(string_leaf.value)\n    ):\n        return TErr(\n            f\"String leaf {string_leaf} does not contain any backslash line\"\n            \" continuation characters.\"\n        )\n\n    new_line = line.clone()\n    new_line.comments = line.comments\n    append_leaves(new_line, line, LL)\n\n    new_string_leaf = new_line.leaves[string_idx]\n    new_string_leaf.value = new_string_leaf.value.replace(\"\\\\\\n\", \"\")\n\n    return Ok(new_line)",
                "def __merge_string_group(self, line: Line, string_idx: int) -> TResult[Line]:\n    \"\"\"\n    Merges string group (i.e. set of adjacent strings) where the first\n    string in the group is `line.leaves[string_idx]`.\n\n    Returns:\n        Ok(new_line), if ALL of the validation checks found in\n        __validate_msg(...) pass.\n            OR\n        Err(CannotTransform), otherwise.\n    \"\"\"\n    LL = line.leaves\n\n    is_valid_index = is_valid_index_factory(LL)\n\n    vresult = self.__validate_msg(line, string_idx)\n    if isinstance(vresult, Err):\n        return vresult\n\n    # If the string group is wrapped inside an Atom node, we must make sure\n    # to later replace that Atom with our new (merged) string leaf.\n    atom_node = LL[string_idx].parent\n\n    # We will place BREAK_MARK in between every two substrings that we\n    # merge. We will then later go through our final result and use the\n    # various instances of BREAK_MARK we find to add the right values to\n    # the custom split map.\n    BREAK_MARK = \"@@@@@ BLACK BREAKPOINT MARKER @@@@@\"\n\n    QUOTE = LL[string_idx].value[-1]\n\n    def make_naked(string: str, string_prefix: str) -> str:\n        \"\"\"Strip @string (i.e. make it a \"naked\" string)\n\n        Pre-conditions:\n            * assert_is_leaf_string(@string)\n\n        Returns:\n            A string that is identical to @string except that\n            @string_prefix has been stripped, the surrounding QUOTE\n            characters have been removed, and any remaining QUOTE\n            characters have been escaped.\n        \"\"\"\n        assert_is_leaf_string(string)\n\n        RE_EVEN_BACKSLASHES = r\"(?:(?<!\\\\)(?:\\\\\\\\)*)\"\n        naked_string = string[len(string_prefix) + 1 : -1]\n        naked_string = re.sub(\n            \"(\" + RE_EVEN_BACKSLASHES + \")\" + QUOTE, r\"\\1\\\\\" + QUOTE, naked_string\n        )\n        return naked_string\n\n    # Holds the CustomSplit objects that will later be added to the custom\n    # split map.\n    custom_splits = []\n\n    # Temporary storage for the 'has_prefix' part of the CustomSplit objects.\n    prefix_tracker = []\n\n    # Sets the 'prefix' variable. This is the prefix that the final merged\n    # string will have.\n    next_str_idx = string_idx\n    prefix = \"\"\n    while (\n        not prefix\n        and is_valid_index(next_str_idx)\n        and LL[next_str_idx].type == token.STRING\n    ):\n        prefix = get_string_prefix(LL[next_str_idx].value)\n        next_str_idx += 1\n\n    # The next loop merges the string group. The final string will be\n    # contained in 'S'.\n    #\n    # The following convenience variables are used:\n    #\n    #   S: string\n    #   NS: naked string\n    #   SS: next string\n    #   NSS: naked next string\n    S = \"\"\n    NS = \"\"\n    num_of_strings = 0\n    next_str_idx = string_idx\n    while is_valid_index(next_str_idx) and LL[next_str_idx].type == token.STRING:\n        num_of_strings += 1\n\n        SS = LL[next_str_idx].value\n        next_prefix = get_string_prefix(SS)\n\n        # If this is an f-string group but this substring is not prefixed\n        # with 'f'...\n        if \"f\" in prefix and \"f\" not in next_prefix:\n            # Then we must escape any braces contained in this substring.\n            SS = re.subf(r\"(\\{|\\})\", \"{1}{1}\", SS)\n\n        NSS = make_naked(SS, next_prefix)\n\n        has_prefix = bool(next_prefix)\n        prefix_tracker.append(has_prefix)\n\n        S = prefix + QUOTE + NS + NSS + BREAK_MARK + QUOTE\n        NS = make_naked(S, prefix)\n\n        next_str_idx += 1\n\n    S_leaf = Leaf(token.STRING, S)\n    if self.normalize_strings:\n        normalize_string_quotes(S_leaf)\n\n    # Fill the 'custom_splits' list with the appropriate CustomSplit objects.\n    temp_string = S_leaf.value[len(prefix) + 1 : -1]\n    for has_prefix in prefix_tracker:\n        mark_idx = temp_string.find(BREAK_MARK)\n        assert (\n            mark_idx >= 0\n        ), \"Logic error while filling the custom string breakpoint cache.\"\n\n        temp_string = temp_string[mark_idx + len(BREAK_MARK) :]\n        breakpoint_idx = mark_idx + (len(prefix) if has_prefix else 0) + 1\n        custom_splits.append(CustomSplit(has_prefix, breakpoint_idx))\n\n    string_leaf = Leaf(token.STRING, S_leaf.value.replace(BREAK_MARK, \"\"))\n\n    if atom_node is not None:\n        replace_child(atom_node, string_leaf)\n\n    # Build the final line ('new_line') that this method will later return.\n    new_line = line.clone()\n    for (i, leaf) in enumerate(LL):\n        if i == string_idx:\n            new_line.append(string_leaf)\n\n        if string_idx <= i < string_idx + num_of_strings:\n            for comment_leaf in line.comments_after(LL[i]):\n                new_line.append(comment_leaf, preformatted=True)\n            continue\n\n        append_leaves(new_line, line, [leaf])\n\n    self.add_custom_splits(string_leaf.value, custom_splits)\n    return Ok(new_line)",
                "@staticmethod\ndef __validate_msg(line: Line, string_idx: int) -> TResult[None]:\n    \"\"\"Validate (M)erge (S)tring (G)roup\n\n    Transform-time string validation logic for __merge_string_group(...).\n\n    Returns:\n        * Ok(None), if ALL validation checks (listed below) pass.\n            OR\n        * Err(CannotTransform), if any of the following are true:\n            - The target string is not in a string group (i.e. it has no\n              adjacent strings).\n            - The string group has more than one inline comment.\n            - The string group has an inline comment that appears to be a pragma.\n            - The set of all string prefixes in the string group is of\n              length greater than one and is not equal to {\"\", \"f\"}.\n            - The string group consists of raw strings.\n    \"\"\"\n    num_of_inline_string_comments = 0\n    set_of_prefixes = set()\n    num_of_strings = 0\n    for leaf in line.leaves[string_idx:]:\n        if leaf.type != token.STRING:\n            # If the string group is trailed by a comma, we count the\n            # comments trailing the comma to be one of the string group's\n            # comments.\n            if leaf.type == token.COMMA and id(leaf) in line.comments:\n                num_of_inline_string_comments += 1\n            break\n\n        if has_triple_quotes(leaf.value):\n            return TErr(\"StringMerger does NOT merge multiline strings.\")\n\n        num_of_strings += 1\n        prefix = get_string_prefix(leaf.value)\n        if \"r\" in prefix:\n            return TErr(\"StringMerger does NOT merge raw strings.\")\n\n        set_of_prefixes.add(prefix)\n\n        if id(leaf) in line.comments:\n            num_of_inline_string_comments += 1\n            if contains_pragma_comment(line.comments[id(leaf)]):\n                return TErr(\"Cannot merge strings which have pragma comments.\")\n\n    if num_of_strings < 2:\n        return TErr(\n            f\"Not enough strings to merge (num_of_strings={num_of_strings}).\"\n        )\n\n    if num_of_inline_string_comments > 1:\n        return TErr(\n            f\"Too many inline string comments ({num_of_inline_string_comments}).\"\n        )\n\n    if len(set_of_prefixes) > 1 and set_of_prefixes != {\"\", \"f\"}:\n        return TErr(f\"Too many different prefixes ({set_of_prefixes}).\")\n\n    return Ok(None)",
                "def do_match(self, line: Line) -> TMatchResult:\n    LL = line.leaves\n\n    is_valid_index = is_valid_index_factory(LL)\n\n    for (idx, leaf) in enumerate(LL):\n        # Should be a string...\n        if leaf.type != token.STRING:\n            continue\n\n        # Should be preceded by a non-empty LPAR...\n        if (\n            not is_valid_index(idx - 1)\n            or LL[idx - 1].type != token.LPAR\n            or is_empty_lpar(LL[idx - 1])\n        ):\n            continue\n\n        # That LPAR should NOT be preceded by a function name or a closing\n        # bracket (which could be a function which returns a function or a\n        # list/dictionary that contains a function)...\n        if is_valid_index(idx - 2) and (\n            LL[idx - 2].type == token.NAME or LL[idx - 2].type in CLOSING_BRACKETS\n        ):\n            continue\n\n        string_idx = idx\n\n        # Skip the string trailer, if one exists.\n        string_parser = StringParser()\n        next_idx = string_parser.parse(LL, string_idx)\n\n        # Should be followed by a non-empty RPAR...\n        if (\n            is_valid_index(next_idx)\n            and LL[next_idx].type == token.RPAR\n            and not is_empty_rpar(LL[next_idx])\n        ):\n            # That RPAR should NOT be followed by a '.' symbol.\n            if is_valid_index(next_idx + 1) and LL[next_idx + 1].type == token.DOT:\n                continue\n\n            return Ok(string_idx)\n\n    return TErr(\"This line has no strings wrapped in parens.\")",
                "def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:\n    LL = line.leaves\n\n    string_parser = StringParser()\n    rpar_idx = string_parser.parse(LL, string_idx)\n\n    for leaf in (LL[string_idx - 1], LL[rpar_idx]):\n        if line.comments_after(leaf):\n            yield TErr(\n                \"Will not strip parentheses which have comments attached to them.\"\n            )\n\n    new_line = line.clone()\n    new_line.comments = line.comments.copy()\n\n    append_leaves(new_line, line, LL[: string_idx - 1])\n\n    string_leaf = Leaf(token.STRING, LL[string_idx].value)\n    LL[string_idx - 1].remove()\n    replace_child(LL[string_idx], string_leaf)\n    new_line.append(string_leaf)\n\n    append_leaves(\n        new_line, line, LL[string_idx + 1 : rpar_idx] + LL[rpar_idx + 1 :],\n    )\n\n    LL[rpar_idx].remove()\n\n    yield Ok(new_line)",
                "@abstractmethod\ndef do_splitter_match(self, line: Line) -> TMatchResult:\n    \"\"\"\n    BaseStringSplitter asks its clients to override this method instead of\n    `StringTransformer.do_match(...)`.\n\n    Follows the same protocol as `StringTransformer.do_match(...)`.\n\n    Refer to `help(StringTransformer.do_match)` for more information.\n    \"\"\"",
                "def do_match(self, line: Line) -> TMatchResult:\n    match_result = self.do_splitter_match(line)\n    if isinstance(match_result, Err):\n        return match_result\n\n    string_idx = match_result.ok()\n    vresult = self.__validate(line, string_idx)\n    if isinstance(vresult, Err):\n        return vresult\n\n    return match_result",
                "def __validate(self, line: Line, string_idx: int) -> TResult[None]:\n    \"\"\"\n    Checks that @line meets all of the requirements listed in this classes'\n    docstring. Refer to `help(BaseStringSplitter)` for a detailed\n    description of those requirements.\n\n    Returns:\n        * Ok(None), if ALL of the requirements are met.\n            OR\n        * Err(CannotTransform), if ANY of the requirements are NOT met.\n    \"\"\"\n    LL = line.leaves\n\n    string_leaf = LL[string_idx]\n\n    max_string_length = self.__get_max_string_length(line, string_idx)\n    if len(string_leaf.value) <= max_string_length:\n        return TErr(\n            \"The string itself is not what is causing this line to be too long.\"\n        )\n\n    if not string_leaf.parent or [L.type for L in string_leaf.parent.children] == [\n        token.STRING,\n        token.NEWLINE,\n    ]:\n        return TErr(\n            f\"This string ({string_leaf.value}) appears to be pointless (i.e. has\"\n            \" no parent).\"\n        )\n\n    if id(line.leaves[string_idx]) in line.comments and contains_pragma_comment(\n        line.comments[id(line.leaves[string_idx])]\n    ):\n        return TErr(\n            \"Line appears to end with an inline pragma comment. Splitting the line\"\n            \" could modify the pragma's behavior.\"\n        )\n\n    if has_triple_quotes(string_leaf.value):\n        return TErr(\"We cannot split multiline strings.\")\n\n    return Ok(None)",
                "def __get_max_string_length(self, line: Line, string_idx: int) -> int:\n    \"\"\"\n    Calculates the max string length used when attempting to determine\n    whether or not the target string is responsible for causing the line to\n    go over the line length limit.\n\n    WARNING: This method is tightly coupled to both StringSplitter and\n    (especially) StringParenWrapper. There is probably a better way to\n    accomplish what is being done here.\n\n    Returns:\n        max_string_length: such that `line.leaves[string_idx].value >\n        max_string_length` implies that the target string IS responsible\n        for causing this line to exceed the line length limit.\n    \"\"\"\n    LL = line.leaves\n\n    is_valid_index = is_valid_index_factory(LL)\n\n    # We use the shorthand \"WMA4\" in comments to abbreviate \"We must\n    # account for\". When giving examples, we use STRING to mean some/any\n    # valid string.\n    #\n    # Finally, we use the following convenience variables:\n    #\n    #   P:  The leaf that is before the target string leaf.\n    #   N:  The leaf that is after the target string leaf.\n    #   NN: The leaf that is after N.\n\n    # WMA4 the whitespace at the beginning of the line.\n    offset = line.depth * 4\n\n    if is_valid_index(string_idx - 1):\n        p_idx = string_idx - 1\n        if (\n            LL[string_idx - 1].type == token.LPAR\n            and LL[string_idx - 1].value == \"\"\n            and string_idx >= 2\n        ):\n            # If the previous leaf is an empty LPAR placeholder, we should skip it.\n            p_idx -= 1\n\n        P = LL[p_idx]\n        if P.type == token.PLUS:\n            # WMA4 a space and a '+' character (e.g. `+ STRING`).\n            offset += 2\n\n        if P.type == token.COMMA:\n            # WMA4 a space, a comma, and a closing bracket [e.g. `), STRING`].\n            offset += 3\n\n        if P.type in [token.COLON, token.EQUAL, token.NAME]:\n            # This conditional branch is meant to handle dictionary keys,\n            # variable assignments, 'return STRING' statement lines, and\n            # 'else STRING' ternary expression lines.\n\n            # WMA4 a single space.\n            offset += 1\n\n            # WMA4 the lengths of any leaves that came before that space.\n            for leaf in LL[: p_idx + 1]:\n                offset += len(str(leaf))\n\n    if is_valid_index(string_idx + 1):\n        N = LL[string_idx + 1]\n        if N.type == token.RPAR and N.value == \"\" and len(LL) > string_idx + 2:\n            # If the next leaf is an empty RPAR placeholder, we should skip it.\n            N = LL[string_idx + 2]\n\n        if N.type == token.COMMA:\n            # WMA4 a single comma at the end of the string (e.g `STRING,`).\n            offset += 1\n\n        if is_valid_index(string_idx + 2):\n            NN = LL[string_idx + 2]\n\n            if N.type == token.DOT and NN.type == token.NAME:\n                # This conditional branch is meant to handle method calls invoked\n                # off of a string literal up to and including the LPAR character.\n\n                # WMA4 the '.' character.\n                offset += 1\n\n                if (\n                    is_valid_index(string_idx + 3)\n                    and LL[string_idx + 3].type == token.LPAR\n                ):\n                    # WMA4 the left parenthesis character.\n                    offset += 1\n\n                # WMA4 the length of the method's name.\n                offset += len(NN.value)\n\n    has_comments = False\n    for comment_leaf in line.comments_after(LL[string_idx]):\n        if not has_comments:\n            has_comments = True\n            # WMA4 two spaces before the '#' character.\n            offset += 2\n\n        # WMA4 the length of the inline comment.\n        offset += len(comment_leaf.value)\n\n    max_string_length = self.line_length - offset\n    return max_string_length",
                "def do_splitter_match(self, line: Line) -> TMatchResult:\n    LL = line.leaves\n\n    is_valid_index = is_valid_index_factory(LL)\n\n    idx = 0\n\n    # The first leaf MAY be a '+' symbol...\n    if is_valid_index(idx) and LL[idx].type == token.PLUS:\n        idx += 1\n\n    # The next/first leaf MAY be an empty LPAR...\n    if is_valid_index(idx) and is_empty_lpar(LL[idx]):\n        idx += 1\n\n    # The next/first leaf MUST be a string...\n    if not is_valid_index(idx) or LL[idx].type != token.STRING:\n        return TErr(\"Line does not start with a string.\")\n\n    string_idx = idx\n\n    # Skip the string trailer, if one exists.\n    string_parser = StringParser()\n    idx = string_parser.parse(LL, string_idx)\n\n    # That string MAY be followed by an empty RPAR...\n    if is_valid_index(idx) and is_empty_rpar(LL[idx]):\n        idx += 1\n\n    # That string / empty RPAR leaf MAY be followed by a comma...\n    if is_valid_index(idx) and LL[idx].type == token.COMMA:\n        idx += 1\n\n    # But no more leaves are allowed...\n    if is_valid_index(idx):\n        return TErr(\"This line does not end with a string.\")\n\n    return Ok(string_idx)",
                "def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:\n    LL = line.leaves\n\n    QUOTE = LL[string_idx].value[-1]\n\n    is_valid_index = is_valid_index_factory(LL)\n    insert_str_child = insert_str_child_factory(LL[string_idx])\n\n    prefix = get_string_prefix(LL[string_idx].value)\n\n    # We MAY choose to drop the 'f' prefix from substrings that don't\n    # contain any f-expressions, but ONLY if the original f-string\n    # containes at least one f-expression. Otherwise, we will alter the AST\n    # of the program.\n    drop_pointless_f_prefix = (\"f\" in prefix) and re.search(\n        self.RE_FEXPR, LL[string_idx].value, re.VERBOSE\n    )\n\n    first_string_line = True\n    starts_with_plus = LL[0].type == token.PLUS\n\n    def line_needs_plus() -> bool:\n        return first_string_line and starts_with_plus\n\n    def maybe_append_plus(new_line: Line) -> None:\n        \"\"\"\n        Side Effects:\n            If @line starts with a plus and this is the first line we are\n            constructing, this function appends a PLUS leaf to @new_line\n            and replaces the old PLUS leaf in the node structure. Otherwise\n            this function does nothing.\n        \"\"\"\n        if line_needs_plus():\n            plus_leaf = Leaf(token.PLUS, \"+\")\n            replace_child(LL[0], plus_leaf)\n            new_line.append(plus_leaf)\n\n    ends_with_comma = (\n        is_valid_index(string_idx + 1) and LL[string_idx + 1].type == token.COMMA\n    )\n\n    def max_last_string() -> int:\n        \"\"\"\n        Returns:\n            The max allowed length of the string value used for the last\n            line we will construct.\n        \"\"\"\n        result = self.line_length\n        result -= line.depth * 4\n        result -= 1 if ends_with_comma else 0\n        result -= 2 if line_needs_plus() else 0\n        return result\n\n    # --- Calculate Max Break Index (for string value)\n    # We start with the line length limit\n    max_break_idx = self.line_length\n    # The last index of a string of length N is N-1.\n    max_break_idx -= 1\n    # Leading whitespace is not present in the string value (e.g. Leaf.value).\n    max_break_idx -= line.depth * 4\n    if max_break_idx < 0:\n        yield TErr(\n            f\"Unable to split {LL[string_idx].value} at such high of a line depth:\"\n            f\" {line.depth}\"\n        )\n        return\n\n    # Check if StringMerger registered any custom splits.\n    custom_splits = self.pop_custom_splits(LL[string_idx].value)\n    # We use them ONLY if none of them would produce lines that exceed the\n    # line limit.\n    use_custom_breakpoints = bool(\n        custom_splits\n        and all(csplit.break_idx <= max_break_idx for csplit in custom_splits)\n    )\n\n    # Temporary storage for the remaining chunk of the string line that\n    # can't fit onto the line currently being constructed.\n    rest_value = LL[string_idx].value\n\n    def more_splits_should_be_made() -> bool:\n        \"\"\"\n        Returns:\n            True iff `rest_value` (the remaining string value from the last\n            split), should be split again.\n        \"\"\"\n        if use_custom_breakpoints:\n            return len(custom_splits) > 1\n        else:\n            return len(rest_value) > max_last_string()\n\n    string_line_results: List[Ok[Line]] = []\n    while more_splits_should_be_made():\n        if use_custom_breakpoints:\n            # Custom User Split (manual)\n            csplit = custom_splits.pop(0)\n            break_idx = csplit.break_idx\n        else:\n            # Algorithmic Split (automatic)\n            max_bidx = max_break_idx - 2 if line_needs_plus() else max_break_idx\n            maybe_break_idx = self.__get_break_idx(rest_value, max_bidx)\n            if maybe_break_idx is None:\n                # If we are unable to algorthmically determine a good split\n                # and this string has custom splits registered to it, we\n                # fall back to using them--which means we have to start\n                # over from the beginning.\n                if custom_splits:\n                    rest_value = LL[string_idx].value\n                    string_line_results = []\n                    first_string_line = True\n                    use_custom_breakpoints = True\n                    continue\n\n                # Otherwise, we stop splitting here.\n                break\n\n            break_idx = maybe_break_idx\n\n        # --- Construct `next_value`\n        next_value = rest_value[:break_idx] + QUOTE\n        if (\n            # Are we allowed to try to drop a pointless 'f' prefix?\n            drop_pointless_f_prefix\n            # If we are, will we be successful?\n            and next_value != self.__normalize_f_string(next_value, prefix)\n        ):\n            # If the current custom split did NOT originally use a prefix,\n            # then `csplit.break_idx` will be off by one after removing\n            # the 'f' prefix.\n            break_idx = (\n                break_idx + 1\n                if use_custom_breakpoints and not csplit.has_prefix\n                else break_idx\n            )\n            next_value = rest_value[:break_idx] + QUOTE\n            next_value = self.__normalize_f_string(next_value, prefix)\n\n        # --- Construct `next_leaf`\n        next_leaf = Leaf(token.STRING, next_value)\n        insert_str_child(next_leaf)\n        self.__maybe_normalize_string_quotes(next_leaf)\n\n        # --- Construct `next_line`\n        next_line = line.clone()\n        maybe_append_plus(next_line)\n        next_line.append(next_leaf)\n        string_line_results.append(Ok(next_line))\n\n        rest_value = prefix + QUOTE + rest_value[break_idx:]\n        first_string_line = False\n\n    yield from string_line_results\n\n    if drop_pointless_f_prefix:\n        rest_value = self.__normalize_f_string(rest_value, prefix)\n\n    rest_leaf = Leaf(token.STRING, rest_value)\n    insert_str_child(rest_leaf)\n\n    # NOTE: I could not find a test case that verifies that the following\n    # line is actually necessary, but it seems to be. Otherwise we risk\n    # not normalizing the last substring, right?\n    self.__maybe_normalize_string_quotes(rest_leaf)\n\n    last_line = line.clone()\n    maybe_append_plus(last_line)\n\n    # If there are any leaves to the right of the target string...\n    if is_valid_index(string_idx + 1):\n        # We use `temp_value` here to determine how long the last line\n        # would be if we were to append all the leaves to the right of the\n        # target string to the last string line.\n        temp_value = rest_value\n        for leaf in LL[string_idx + 1 :]:\n            temp_value += str(leaf)\n            if leaf.type == token.LPAR:\n                break\n\n        # Try to fit them all on the same line with the last substring...\n        if (\n            len(temp_value) <= max_last_string()\n            or LL[string_idx + 1].type == token.COMMA\n        ):\n            last_line.append(rest_leaf)\n            append_leaves(last_line, line, LL[string_idx + 1 :])\n            yield Ok(last_line)\n        # Otherwise, place the last substring on one line and everything\n        # else on a line below that...\n        else:\n            last_line.append(rest_leaf)\n            yield Ok(last_line)\n\n            non_string_line = line.clone()\n            append_leaves(non_string_line, line, LL[string_idx + 1 :])\n            yield Ok(non_string_line)\n    # Else the target string was the last leaf...\n    else:\n        last_line.append(rest_leaf)\n        last_line.comments = line.comments.copy()\n        yield Ok(last_line)",
                "def __get_break_idx(self, string: str, max_break_idx: int) -> Optional[int]:\n    \"\"\"\n    This method contains the algorithm that StringSplitter uses to\n    determine which character to split each string at.\n\n    Args:\n        @string: The substring that we are attempting to split.\n        @max_break_idx: The ideal break index. We will return this value if it\n        meets all the necessary conditions. In the likely event that it\n        doesn't we will try to find the closest index BELOW @max_break_idx\n        that does. If that fails, we will expand our search by also\n        considering all valid indices ABOVE @max_break_idx.\n\n    Pre-Conditions:\n        * assert_is_leaf_string(@string)\n        * 0 <= @max_break_idx < len(@string)\n\n    Returns:\n        break_idx, if an index is able to be found that meets all of the\n        conditions listed in the 'Transformations' section of this classes'\n        docstring.\n            OR\n        None, otherwise.\n    \"\"\"\n    is_valid_index = is_valid_index_factory(string)\n\n    assert is_valid_index(max_break_idx)\n    assert_is_leaf_string(string)\n\n    _fexpr_slices: Optional[List[Tuple[Index, Index]]] = None\n\n    def fexpr_slices() -> Iterator[Tuple[Index, Index]]:\n        \"\"\"\n        Yields:\n            All ranges of @string which, if @string were to be split there,\n            would result in the splitting of an f-expression (which is NOT\n            allowed).\n        \"\"\"\n        nonlocal _fexpr_slices\n\n        if _fexpr_slices is None:\n            _fexpr_slices = []\n            for match in re.finditer(self.RE_FEXPR, string, re.VERBOSE):\n                _fexpr_slices.append(match.span())\n\n        yield from _fexpr_slices\n\n    is_fstring = \"f\" in get_string_prefix(string)\n\n    def breaks_fstring_expression(i: Index) -> bool:\n        \"\"\"\n        Returns:\n            True iff returning @i would result in the splitting of an\n            f-expression (which is NOT allowed).\n        \"\"\"\n        if not is_fstring:\n            return False\n\n        for (start, end) in fexpr_slices():\n            if start <= i < end:\n                return True\n\n        return False\n\n    def passes_all_checks(i: Index) -> bool:\n        \"\"\"\n        Returns:\n            True iff ALL of the conditions listed in the 'Transformations'\n            section of this classes' docstring would be be met by returning @i.\n        \"\"\"\n        is_space = string[i] == \" \"\n        is_big_enough = (\n            len(string[i:]) >= self.MIN_SUBSTR_SIZE\n            and len(string[:i]) >= self.MIN_SUBSTR_SIZE\n        )\n        return is_space and is_big_enough and not breaks_fstring_expression(i)\n\n    # First, we check all indices BELOW @max_break_idx.\n    break_idx = max_break_idx\n    while is_valid_index(break_idx - 1) and not passes_all_checks(break_idx):\n        break_idx -= 1\n\n    if not passes_all_checks(break_idx):\n        # If that fails, we check all indices ABOVE @max_break_idx.\n        #\n        # If we are able to find a valid index here, the next line is going\n        # to be longer than the specified line length, but it's probably\n        # better than doing nothing at all.\n        break_idx = max_break_idx + 1\n        while is_valid_index(break_idx + 1) and not passes_all_checks(break_idx):\n            break_idx += 1\n\n        if not is_valid_index(break_idx) or not passes_all_checks(break_idx):\n            return None\n\n    return break_idx",
                "def __maybe_normalize_string_quotes(self, leaf: Leaf) -> None:\n    if self.normalize_strings:\n        normalize_string_quotes(leaf)",
                "def __normalize_f_string(self, string: str, prefix: str) -> str:\n    \"\"\"\n    Pre-Conditions:\n        * assert_is_leaf_string(@string)\n\n    Returns:\n        * If @string is an f-string that contains no f-expressions, we\n        return a string identical to @string except that the 'f' prefix\n        has been stripped and all double braces (i.e. '{{' or '}}') have\n        been normalized (i.e. turned into '{' or '}').\n            OR\n        * Otherwise, we return @string.\n    \"\"\"\n    assert_is_leaf_string(string)\n\n    if \"f\" in prefix and not re.search(self.RE_FEXPR, string, re.VERBOSE):\n        new_prefix = prefix.replace(\"f\", \"\")\n\n        temp = string[len(prefix) :]\n        temp = re.sub(r\"\\{\\{\", \"{\", temp)\n        temp = re.sub(r\"\\}\\}\", \"}\", temp)\n        new_string = temp\n\n        return f\"{new_prefix}{new_string}\"\n    else:\n        return string",
                "def do_splitter_match(self, line: Line) -> TMatchResult:\n    LL = line.leaves\n\n    string_idx = None\n    string_idx = string_idx or self._return_match(LL)\n    string_idx = string_idx or self._else_match(LL)\n    string_idx = string_idx or self._assert_match(LL)\n    string_idx = string_idx or self._assign_match(LL)\n    string_idx = string_idx or self._dict_match(LL)\n\n    if string_idx is not None:\n        string_value = line.leaves[string_idx].value\n        # If the string has no spaces...\n        if \" \" not in string_value:\n            # And will still violate the line length limit when split...\n            max_string_length = self.line_length - ((line.depth + 1) * 4)\n            if len(string_value) > max_string_length:\n                # And has no associated custom splits...\n                if not self.has_custom_splits(string_value):\n                    # Then we should NOT put this string on its own line.\n                    return TErr(\n                        \"We do not wrap long strings in parentheses when the\"\n                        \" resultant line would still be over the specified line\"\n                        \" length and can't be split further by StringSplitter.\"\n                    )\n        return Ok(string_idx)\n\n    return TErr(\"This line does not contain any non-atomic strings.\")",
                "@staticmethod\ndef _return_match(LL: List[Leaf]) -> Optional[int]:\n    \"\"\"\n    Returns:\n        string_idx such that @LL[string_idx] is equal to our target (i.e.\n        matched) string, if this line matches the return/yield statement\n        requirements listed in the 'Requirements' section of this classes'\n        docstring.\n            OR\n        None, otherwise.\n    \"\"\"\n    # If this line is apart of a return/yield statement and the first leaf\n    # contains either the \"return\" or \"yield\" keywords...\n    if parent_type(LL[0]) in [syms.return_stmt, syms.yield_expr] and LL[\n        0\n    ].value in [\"return\", \"yield\"]:\n        is_valid_index = is_valid_index_factory(LL)\n\n        idx = 2 if is_valid_index(1) and is_empty_par(LL[1]) else 1\n        # The next visible leaf MUST contain a string...\n        if is_valid_index(idx) and LL[idx].type == token.STRING:\n            return idx\n\n    return None",
                "@staticmethod\ndef _else_match(LL: List[Leaf]) -> Optional[int]:\n    \"\"\"\n    Returns:\n        string_idx such that @LL[string_idx] is equal to our target (i.e.\n        matched) string, if this line matches the ternary expression\n        requirements listed in the 'Requirements' section of this classes'\n        docstring.\n            OR\n        None, otherwise.\n    \"\"\"\n    # If this line is apart of a ternary expression and the first leaf\n    # contains the \"else\" keyword...\n    if (\n        parent_type(LL[0]) == syms.test\n        and LL[0].type == token.NAME\n        and LL[0].value == \"else\"\n    ):\n        is_valid_index = is_valid_index_factory(LL)\n\n        idx = 2 if is_valid_index(1) and is_empty_par(LL[1]) else 1\n        # The next visible leaf MUST contain a string...\n        if is_valid_index(idx) and LL[idx].type == token.STRING:\n            return idx\n\n    return None",
                "@staticmethod\ndef _assert_match(LL: List[Leaf]) -> Optional[int]:\n    \"\"\"\n    Returns:\n        string_idx such that @LL[string_idx] is equal to our target (i.e.\n        matched) string, if this line matches the assert statement\n        requirements listed in the 'Requirements' section of this classes'\n        docstring.\n            OR\n        None, otherwise.\n    \"\"\"\n    # If this line is apart of an assert statement and the first leaf\n    # contains the \"assert\" keyword...\n    if parent_type(LL[0]) == syms.assert_stmt and LL[0].value == \"assert\":\n        is_valid_index = is_valid_index_factory(LL)\n\n        for (i, leaf) in enumerate(LL):\n            # We MUST find a comma...\n            if leaf.type == token.COMMA:\n                idx = i + 2 if is_empty_par(LL[i + 1]) else i + 1\n\n                # That comma MUST be followed by a string...\n                if is_valid_index(idx) and LL[idx].type == token.STRING:\n                    string_idx = idx\n\n                    # Skip the string trailer, if one exists.\n                    string_parser = StringParser()\n                    idx = string_parser.parse(LL, string_idx)\n\n                    # But no more leaves are allowed...\n                    if not is_valid_index(idx):\n                        return string_idx\n\n    return None",
                "@staticmethod\ndef _assign_match(LL: List[Leaf]) -> Optional[int]:\n    \"\"\"\n    Returns:\n        string_idx such that @LL[string_idx] is equal to our target (i.e.\n        matched) string, if this line matches the assignment statement\n        requirements listed in the 'Requirements' section of this classes'\n        docstring.\n            OR\n        None, otherwise.\n    \"\"\"\n    # If this line is apart of an expression statement or is a function\n    # argument AND the first leaf contains a variable name...\n    if (\n        parent_type(LL[0]) in [syms.expr_stmt, syms.argument, syms.power]\n        and LL[0].type == token.NAME\n    ):\n        is_valid_index = is_valid_index_factory(LL)\n\n        for (i, leaf) in enumerate(LL):\n            # We MUST find either an '=' or '+=' symbol...\n            if leaf.type in [token.EQUAL, token.PLUSEQUAL]:\n                idx = i + 2 if is_empty_par(LL[i + 1]) else i + 1\n\n                # That symbol MUST be followed by a string...\n                if is_valid_index(idx) and LL[idx].type == token.STRING:\n                    string_idx = idx\n\n                    # Skip the string trailer, if one exists.\n                    string_parser = StringParser()\n                    idx = string_parser.parse(LL, string_idx)\n\n                    # The next leaf MAY be a comma iff this line is apart\n                    # of a function argument...\n                    if (\n                        parent_type(LL[0]) == syms.argument\n                        and is_valid_index(idx)\n                        and LL[idx].type == token.COMMA\n                    ):\n                        idx += 1\n\n                    # But no more leaves are allowed...\n                    if not is_valid_index(idx):\n                        return string_idx\n\n    return None",
                "@staticmethod\ndef _dict_match(LL: List[Leaf]) -> Optional[int]:\n    \"\"\"\n    Returns:\n        string_idx such that @LL[string_idx] is equal to our target (i.e.\n        matched) string, if this line matches the dictionary key assignment\n        statement requirements listed in the 'Requirements' section of this\n        classes' docstring.\n            OR\n        None, otherwise.\n    \"\"\"\n    # If this line is apart of a dictionary key assignment...\n    if syms.dictsetmaker in [parent_type(LL[0]), parent_type(LL[0].parent)]:\n        is_valid_index = is_valid_index_factory(LL)\n\n        for (i, leaf) in enumerate(LL):\n            # We MUST find a colon...\n            if leaf.type == token.COLON:\n                idx = i + 2 if is_empty_par(LL[i + 1]) else i + 1\n\n                # That colon MUST be followed by a string...\n                if is_valid_index(idx) and LL[idx].type == token.STRING:\n                    string_idx = idx\n\n                    # Skip the string trailer, if one exists.\n                    string_parser = StringParser()\n                    idx = string_parser.parse(LL, string_idx)\n\n                    # That string MAY be followed by a comma...\n                    if is_valid_index(idx) and LL[idx].type == token.COMMA:\n                        idx += 1\n\n                    # But no more leaves are allowed...\n                    if not is_valid_index(idx):\n                        return string_idx\n\n    return None",
                "def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:\n    LL = line.leaves\n\n    is_valid_index = is_valid_index_factory(LL)\n    insert_str_child = insert_str_child_factory(LL[string_idx])\n\n    comma_idx = len(LL) - 1\n    ends_with_comma = False\n    if LL[comma_idx].type == token.COMMA:\n        ends_with_comma = True\n\n    leaves_to_steal_comments_from = [LL[string_idx]]\n    if ends_with_comma:\n        leaves_to_steal_comments_from.append(LL[comma_idx])\n\n    # --- First Line\n    first_line = line.clone()\n    left_leaves = LL[:string_idx]\n\n    # We have to remember to account for (possibly invisible) LPAR and RPAR\n    # leaves that already wrapped the target string. If these leaves do\n    # exist, we will replace them with our own LPAR and RPAR leaves.\n    old_parens_exist = False\n    if left_leaves and left_leaves[-1].type == token.LPAR:\n        old_parens_exist = True\n        leaves_to_steal_comments_from.append(left_leaves[-1])\n        left_leaves.pop()\n\n    append_leaves(first_line, line, left_leaves)\n\n    lpar_leaf = Leaf(token.LPAR, \"(\")\n    if old_parens_exist:\n        replace_child(LL[string_idx - 1], lpar_leaf)\n    else:\n        insert_str_child(lpar_leaf)\n    first_line.append(lpar_leaf)\n\n    # We throw inline comments that were originally to the right of the\n    # target string to the top line. They will now be shown to the right of\n    # the LPAR.\n    for leaf in leaves_to_steal_comments_from:\n        for comment_leaf in line.comments_after(leaf):\n            first_line.append(comment_leaf, preformatted=True)\n\n    yield Ok(first_line)\n\n    # --- Middle (String) Line\n    # We only need to yield one (possibly too long) string line, since the\n    # `StringSplitter` will break it down further if necessary.\n    string_value = LL[string_idx].value\n    string_line = Line(\n        depth=line.depth + 1,\n        inside_brackets=True,\n        should_explode=line.should_explode,\n    )\n    string_leaf = Leaf(token.STRING, string_value)\n    insert_str_child(string_leaf)\n    string_line.append(string_leaf)\n\n    old_rpar_leaf = None\n    if is_valid_index(string_idx + 1):\n        right_leaves = LL[string_idx + 1 :]\n        if ends_with_comma:\n            right_leaves.pop()\n\n        if old_parens_exist:\n            assert (\n                right_leaves and right_leaves[-1].type == token.RPAR\n            ), \"Apparently, old parentheses do NOT exist?!\"\n            old_rpar_leaf = right_leaves.pop()\n\n        append_leaves(string_line, line, right_leaves)\n\n    yield Ok(string_line)\n\n    # --- Last Line\n    last_line = line.clone()\n    last_line.bracket_tracker = first_line.bracket_tracker\n\n    new_rpar_leaf = Leaf(token.RPAR, \")\")\n    if old_rpar_leaf is not None:\n        replace_child(old_rpar_leaf, new_rpar_leaf)\n    else:\n        insert_str_child(new_rpar_leaf)\n    last_line.append(new_rpar_leaf)\n\n    # If the target string ended with a comma, we place this comma to the\n    # right of the RPAR on the last line.\n    if ends_with_comma:\n        comma_leaf = Leaf(token.COMMA, \",\")\n        replace_child(LL[comma_idx], comma_leaf)\n        last_line.append(comma_leaf)\n\n    yield Ok(last_line)",
                "def __init__(self) -> None:\n    self._state = self.START\n    self._unmatched_lpars = 0",
                "def parse(self, leaves: List[Leaf], string_idx: int) -> int:\n    \"\"\"\n    Pre-conditions:\n        * @leaves[@string_idx].type == token.STRING\n\n    Returns:\n        The index directly after the last leaf which is apart of the string\n        trailer, if a \"trailer\" exists.\n            OR\n        @string_idx + 1, if no string \"trailer\" exists.\n    \"\"\"\n    assert leaves[string_idx].type == token.STRING\n\n    idx = string_idx + 1\n    while idx < len(leaves) and self._next_state(leaves[idx]):\n        idx += 1\n    return idx",
                "def _next_state(self, leaf: Leaf) -> bool:\n    \"\"\"\n    Pre-conditions:\n        * On the first call to this function, @leaf MUST be the leaf that\n        was directly after the string leaf in question (e.g. if our target\n        string is `line.leaves[i]` then the first call to this method must\n        be `line.leaves[i + 1]`).\n        * On the next call to this function, the leaf paramater passed in\n        MUST be the leaf directly following @leaf.\n\n    Returns:\n        True iff @leaf is apart of the string's trailer.\n    \"\"\"\n    # We ignore empty LPAR or RPAR leaves.\n    if is_empty_par(leaf):\n        return True\n\n    next_token = leaf.type\n    if next_token == token.LPAR:\n        self._unmatched_lpars += 1\n\n    current_state = self._state\n\n    # The LPAR parser state is a special case. We will return True until we\n    # find the matching RPAR token.\n    if current_state == self.LPAR:\n        if next_token == token.RPAR:\n            self._unmatched_lpars -= 1\n            if self._unmatched_lpars == 0:\n                self._state = self.RPAR\n    # Otherwise, we use a lookup table to determine the next state.\n    else:\n        # If the lookup table matches the current state to the next\n        # token, we use the lookup table.\n        if (current_state, next_token) in self._goto:\n            self._state = self._goto[current_state, next_token]\n        else:\n            # Otherwise, we check if a the current state was assigned a\n            # default.\n            if (current_state, self.DEFAULT_TOKEN) in self._goto:\n                self._state = self._goto[current_state, self.DEFAULT_TOKEN]\n            # If no default has been assigned, then this parser has a logic\n            # error.\n            else:\n                raise RuntimeError(f\"{self.__class__.__name__} LOGIC ERROR!\")\n\n        if self._state == self.DONE:\n            return False\n\n    return True",
                "def insert_str_child(child: LN) -> None:\n    nonlocal string_child_idx\n\n    assert string_parent is not None\n    assert string_child_idx is not None\n\n    string_parent.insert_child(string_child_idx, child)\n    string_child_idx += 1",
                "def is_valid_index(idx: int) -> bool:\n    \"\"\"\n    Returns:\n        True iff @idx is positive AND seq[@idx] does NOT raise an\n        IndexError.\n    \"\"\"\n    return 0 <= idx < len(seq)",
                "@wraps(split_func)\ndef split_wrapper(line: Line, features: Collection[Feature] = ()) -> Iterator[Line]:\n    for l in split_func(line, features):\n        normalize_prefix(l.leaves[0], inside_brackets=True)\n        yield l",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def get_imports_from_children(children: List[LN]) -> Generator[str, None, None]:\n    for child in children:\n        if isinstance(child, Leaf):\n            if child.type == token.NAME:\n                yield child.value\n\n        elif child.type == syms.import_as_name:\n            orig_name = child.children[0]\n            assert isinstance(orig_name, Leaf), \"Invalid syntax parsing imports\"\n            assert orig_name.type == token.NAME, \"Invalid syntax parsing imports\"\n            yield orig_name.value\n\n        elif child.type == syms.import_as_names:\n            yield from get_imports_from_children(child.children)\n\n        else:\n            raise AssertionError(\"Invalid syntax parsing imports\")",
                "def done(self, src: Path, changed: Changed) -> None:\n    \"\"\"Increment the counter for successful reformatting. Write out a message.\"\"\"\n    if changed is Changed.YES:\n        reformatted = \"would reformat\" if self.check or self.diff else \"reformatted\"\n        if self.verbose or not self.quiet:\n            out(f\"{reformatted} {src}\")\n        self.change_count += 1\n    else:\n        if self.verbose:\n            if changed is Changed.NO:\n                msg = f\"{src} already well formatted, good job.\"\n            else:\n                msg = f\"{src} wasn't modified on disk since last run.\"\n            out(msg, bold=False)\n        self.same_count += 1",
                "def failed(self, src: Path, message: str) -> None:\n    \"\"\"Increment the counter for failed reformatting. Write out a message.\"\"\"\n    err(f\"error: cannot format {src}: {message}\")\n    self.failure_count += 1",
                "def path_ignored(self, path: Path, message: str) -> None:\n    if self.verbose:\n        out(f\"{path} ignored: {message}\", bold=False)",
                "@property\ndef return_code(self) -> int:\n    \"\"\"Return the exit code that the app should use.\n\n    This considers the current state of changed files and failures:\n    - if there were any failures, return 123;\n    - if any files were changed and --check is being used, return 1;\n    - otherwise return 0.\n    \"\"\"\n    # According to http://tldp.org/LDP/abs/html/exitcodes.html starting with\n    # 126 we have special return codes reserved by the shell.\n    if self.failure_count:\n        return 123\n\n    elif self.change_count and self.check:\n        return 1\n\n    return 0",
                "def __str__(self) -> str:\n    \"\"\"Render a color report of the current state.\n\n    Use `click.unstyle` to remove colors.\n    \"\"\"\n    if self.check or self.diff:\n        reformatted = \"would be reformatted\"\n        unchanged = \"would be left unchanged\"\n        failed = \"would fail to reformat\"\n    else:\n        reformatted = \"reformatted\"\n        unchanged = \"left unchanged\"\n        failed = \"failed to reformat\"\n    report = []\n    if self.change_count:\n        s = \"s\" if self.change_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.change_count} file{s} {reformatted}\", bold=True)\n        )\n    if self.same_count:\n        s = \"s\" if self.same_count > 1 else \"\"\n        report.append(f\"{self.same_count} file{s} {unchanged}\")\n    if self.failure_count:\n        s = \"s\" if self.failure_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.failure_count} file{s} {failed}\", fg=\"red\")\n        )\n    return \", \".join(report) + \".\"",
                "def make_naked(string: str, string_prefix: str) -> str:\n    \"\"\"Strip @string (i.e. make it a \"naked\" string)\n\n    Pre-conditions:\n        * assert_is_leaf_string(@string)\n\n    Returns:\n        A string that is identical to @string except that\n        @string_prefix has been stripped, the surrounding QUOTE\n        characters have been removed, and any remaining QUOTE\n        characters have been escaped.\n    \"\"\"\n    assert_is_leaf_string(string)\n\n    RE_EVEN_BACKSLASHES = r\"(?:(?<!\\\\)(?:\\\\\\\\)*)\"\n    naked_string = string[len(string_prefix) + 1 : -1]\n    naked_string = re.sub(\n        \"(\" + RE_EVEN_BACKSLASHES + \")\" + QUOTE, r\"\\1\\\\\" + QUOTE, naked_string\n    )\n    return naked_string",
                "def line_needs_plus() -> bool:\n    return first_string_line and starts_with_plus",
                "def maybe_append_plus(new_line: Line) -> None:\n    \"\"\"\n    Side Effects:\n        If @line starts with a plus and this is the first line we are\n        constructing, this function appends a PLUS leaf to @new_line\n        and replaces the old PLUS leaf in the node structure. Otherwise\n        this function does nothing.\n    \"\"\"\n    if line_needs_plus():\n        plus_leaf = Leaf(token.PLUS, \"+\")\n        replace_child(LL[0], plus_leaf)\n        new_line.append(plus_leaf)",
                "def max_last_string() -> int:\n    \"\"\"\n    Returns:\n        The max allowed length of the string value used for the last\n        line we will construct.\n    \"\"\"\n    result = self.line_length\n    result -= line.depth * 4\n    result -= 1 if ends_with_comma else 0\n    result -= 2 if line_needs_plus() else 0\n    return result",
                "def more_splits_should_be_made() -> bool:\n    \"\"\"\n    Returns:\n        True iff `rest_value` (the remaining string value from the last\n        split), should be split again.\n    \"\"\"\n    if use_custom_breakpoints:\n        return len(custom_splits) > 1\n    else:\n        return len(rest_value) > max_last_string()",
                "def fexpr_slices() -> Iterator[Tuple[Index, Index]]:\n    \"\"\"\n    Yields:\n        All ranges of @string which, if @string were to be split there,\n        would result in the splitting of an f-expression (which is NOT\n        allowed).\n    \"\"\"\n    nonlocal _fexpr_slices\n\n    if _fexpr_slices is None:\n        _fexpr_slices = []\n        for match in re.finditer(self.RE_FEXPR, string, re.VERBOSE):\n            _fexpr_slices.append(match.span())\n\n    yield from _fexpr_slices",
                "def breaks_fstring_expression(i: Index) -> bool:\n    \"\"\"\n    Returns:\n        True iff returning @i would result in the splitting of an\n        f-expression (which is NOT allowed).\n    \"\"\"\n    if not is_fstring:\n        return False\n\n    for (start, end) in fexpr_slices():\n        if start <= i < end:\n            return True\n\n    return False",
                "def passes_all_checks(i: Index) -> bool:\n    \"\"\"\n    Returns:\n        True iff ALL of the conditions listed in the 'Transformations'\n        section of this classes' docstring would be be met by returning @i.\n    \"\"\"\n    is_space = string[i] == \" \"\n    is_big_enough = (\n        len(string[i:]) >= self.MIN_SUBSTR_SIZE\n        and len(string[:i]) >= self.MIN_SUBSTR_SIZE\n    )\n    return is_space and is_big_enough and not breaks_fstring_expression(i)",
                "def rhs(line: Line, features: Collection[Feature]) -> Iterator[Line]:\n    for omit in generate_trailers_to_omit(line, line_length):\n        lines = list(right_hand_split(line, line_length, features, omit=omit))\n        if is_line_short_enough(lines[0], line_length=line_length):\n            yield from lines\n            return\n\n    # All splits failed, best effort split with no omits.\n    # This mostly happens to multiline strings that are by definition\n    # reported as not fitting a single line.\n    # line_length=1 here was historically a bug that somehow became a feature.\n    # See #762 and #781 for the full story.\n    yield from right_hand_split(line, line_length=1, features=features)"
            ],
            "inscope_function_signatures": [
                "supports_feature(target_versions: Set[TargetVersion], feature: Feature) -> bool",
                "find_pyproject_toml(path_search_start: str) -> Optional[str]",
                "parse_pyproject_toml(path_config: str) -> Dict[str, Any]",
                "read_pyproject_toml(ctx: click.Context, param: click.Parameter, value: Optional[str]) -> Optional[str]",
                "target_version_option_callback(c: click.Context, p: Union[click.Option, click.Parameter], v: Tuple[str, ...]) -> List[TargetVersion]",
                "main(ctx: click.Context, code: Optional[str], line_length: int, target_version: List[TargetVersion], check: bool, diff: bool, color: bool, fast: bool, pyi: bool, py36: bool, skip_string_normalization: bool, quiet: bool, verbose: bool, include: str, exclude: str, src: Tuple[str, ...], config: Optional[str]) -> None",
                "path_empty(src: Tuple[str, ...], quiet: bool, verbose: bool, ctx: click.Context) -> None",
                "reformat_one(src: Path, fast: bool, write_back: WriteBack, mode: Mode, report: 'Report') -> None",
                "reformat_many(sources: Set[Path], fast: bool, write_back: WriteBack, mode: Mode, report: 'Report') -> None",
                "schedule_formatting(sources: Set[Path], fast: bool, write_back: WriteBack, mode: Mode, report: 'Report', loop: asyncio.AbstractEventLoop, executor: Executor) -> None",
                "format_file_in_place(src: Path, fast: bool, mode: Mode, write_back: WriteBack=WriteBack.NO, lock: Any=None) -> bool",
                "color_diff(contents: str) -> str",
                "wrap_stream_for_windows(f: io.TextIOWrapper) -> Union[io.TextIOWrapper, 'colorama.AnsiToWin32.AnsiToWin32']",
                "format_stdin_to_stdout(fast: bool) -> bool",
                "format_file_contents(src_contents: str) -> FileContent",
                "format_str(src_contents: str) -> FileContent",
                "decode_bytes(src: bytes) -> Tuple[FileContent, Encoding, NewLine]",
                "get_grammars(target_versions: Set[TargetVersion]) -> List[Grammar]",
                "lib2to3_parse(src_txt: str, target_versions: Iterable[TargetVersion]=()) -> Node",
                "lib2to3_unparse(node: Node) -> str",
                "whitespace(leaf: Leaf) -> str",
                "preceding_leaf(node: Optional[LN]) -> Optional[Leaf]",
                "prev_siblings_are(node: Optional[LN], tokens: List[Optional[NodeType]]) -> bool",
                "child_towards(ancestor: Node, descendant: LN) -> Optional[LN]",
                "container_of(leaf: Leaf) -> LN",
                "is_split_after_delimiter(leaf: Leaf, previous: Optional[Leaf]=None) -> Priority",
                "is_split_before_delimiter(leaf: Leaf, previous: Optional[Leaf]=None) -> Priority",
                "generate_comments(leaf: LN) -> Iterator[Leaf]",
                "list_comments(prefix: str) -> List[ProtoComment]",
                "make_comment(content: str) -> str",
                "transform_line(line: Line, line_length: int, normalize_strings: bool, features: Collection[Feature]=()) -> Iterator[Line]",
                "TErr(err_msg: str) -> Err[CannotTransform]",
                "contains_pragma_comment(comment_list: List[Leaf]) -> bool",
                "insert_str_child_factory(string_leaf: Leaf) -> Callable[[LN], None]",
                "has_triple_quotes(string: str) -> bool",
                "parent_type(node: Optional[LN]) -> Optional[NodeType]",
                "is_empty_par(leaf: Leaf) -> bool",
                "is_empty_lpar(leaf: Leaf) -> bool",
                "is_empty_rpar(leaf: Leaf) -> bool",
                "is_valid_index_factory(seq: Sequence[Any]) -> Callable[[int], bool]",
                "line_to_string(line: Line) -> str",
                "append_leaves(new_line: Line, old_line: Line, leaves: List[Leaf]) -> None",
                "replace_child(old_child: LN, new_child: LN) -> None",
                "get_string_prefix(string: str) -> str",
                "assert_is_leaf_string(string: str) -> None",
                "left_hand_split(line: Line, _features: Collection[Feature]=()) -> Iterator[Line]",
                "right_hand_split(line: Line, line_length: int, features: Collection[Feature]=(), omit: Collection[LeafID]=()) -> Iterator[Line]",
                "bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None",
                "bracket_split_build_line(leaves: List[Leaf], original: Line, opening_bracket: Leaf) -> Line",
                "dont_increase_indentation(split_func: Transformer) -> Transformer",
                "delimiter_split(line: Line, features: Collection[Feature]=()) -> Iterator[Line]",
                "standalone_comment_split(line: Line, features: Collection[Feature]=()) -> Iterator[Line]",
                "is_import(leaf: Leaf) -> bool",
                "is_type_comment(leaf: Leaf, suffix: str='') -> bool",
                "normalize_prefix(leaf: Leaf) -> None",
                "normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool=False) -> None",
                "normalize_string_quotes(leaf: Leaf) -> None",
                "normalize_numeric_literal(leaf: Leaf) -> None",
                "format_float_or_int_string(text: str) -> str",
                "normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None",
                "normalize_fmt_off(node: Node) -> None",
                "convert_one_fmt_off_pair(node: Node) -> bool",
                "generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]",
                "fmt_on(container: LN) -> bool",
                "contains_fmt_on_at_column(container: LN, column: int) -> bool",
                "first_leaf_column(node: Node) -> Optional[int]",
                "maybe_make_parens_invisible_in_atom(node: LN, parent: LN) -> bool",
                "is_atom_with_invisible_parens(node: LN) -> bool",
                "is_empty_tuple(node: LN) -> bool",
                "unwrap_singleton_parenthesis(node: LN) -> Optional[LN]",
                "wrap_in_parentheses(parent: Node, child: LN) -> None",
                "is_one_tuple(node: LN) -> bool",
                "is_walrus_assignment(node: LN) -> bool",
                "is_yield(node: LN) -> bool",
                "is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool",
                "is_multiline_string(leaf: Leaf) -> bool",
                "is_stub_suite(node: Node) -> bool",
                "is_stub_body(node: LN) -> bool",
                "max_delimiter_priority_in_atom(node: LN) -> Priority",
                "ensure_visible(leaf: Leaf) -> None",
                "should_explode(line: Line, opening_bracket: Leaf) -> bool",
                "get_features_used(node: Node) -> Set[Feature]",
                "detect_target_versions(node: Node) -> Set[TargetVersion]",
                "generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]",
                "get_future_imports(node: Node) -> Set[str]",
                "get_gitignore(root: Path) -> PathSpec",
                "gen_python_files_in_dir(path: Path, root: Path, include: Pattern[str], exclude: Pattern[str], report: 'Report', gitignore: PathSpec) -> Iterator[Path]",
                "find_project_root(srcs: Iterable[str]) -> Path",
                "parse_ast(src: str) -> Union[ast.AST, ast3.AST, ast27.AST]",
                "_fixup_ast_constants(node: Union[ast.AST, ast3.AST, ast27.AST]) -> Union[ast.AST, ast3.AST, ast27.AST]",
                "_stringify_ast(node: Union[ast.AST, ast3.AST, ast27.AST], depth: int=0) -> Iterator[str]",
                "assert_equivalent(src: str, dst: str) -> None",
                "assert_stable(src: str, dst: str, mode: Mode) -> None",
                "dump_to_file(*output: str) -> str",
                "nullcontext() -> Iterator[None]",
                "diff(a: str, b: str, a_name: str, b_name: str) -> str",
                "cancel(tasks: Iterable['asyncio.Task[Any]']) -> None",
                "shutdown(loop: asyncio.AbstractEventLoop) -> None",
                "sub_twice(regex: Pattern[str], replacement: str, original: str) -> str",
                "re_compile_maybe_verbose(regex: str) -> Pattern[str]",
                "enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]",
                "enumerate_with_length(line: Line, reversed: bool=False) -> Iterator[Tuple[Index, Leaf, int]]",
                "is_line_short_enough(line: Line) -> bool",
                "can_be_split(line: Line) -> bool",
                "can_omit_invisible_parens(line: Line, line_length: int) -> bool",
                "get_cache_file(mode: Mode) -> Path",
                "read_cache(mode: Mode) -> Cache",
                "get_cache_info(path: Path) -> CacheInfo",
                "filter_cached(cache: Cache, sources: Iterable[Path]) -> Tuple[Set[Path], Set[Path]]",
                "write_cache(cache: Cache, sources: Iterable[Path], mode: Mode) -> None",
                "patch_click() -> None",
                "patched_main() -> None",
                "fix_docstring(docstring: str, prefix: str) -> str",
                "__init__(self, value: T) -> None",
                "ok(self) -> T",
                "__init__(self, e: E) -> None",
                "err(self) -> E",
                "from_configuration(cls) -> 'WriteBack'",
                "is_python2(self) -> bool",
                "get_cache_key(self) -> str",
                "visit(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "show(cls, code: Union[str, Leaf, Node]) -> None",
                "mark(self, leaf: Leaf) -> None",
                "any_open_brackets(self) -> bool",
                "max_delimiter_priority(self, exclude: Iterable[LeafID]=()) -> Priority",
                "delimiter_count_with_priority(self, priority: Priority=0) -> int",
                "maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool",
                "maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool",
                "get_open_lsqb(self) -> Optional[Leaf]",
                "append(self, leaf: Leaf, preformatted: bool=False) -> None",
                "append_safe(self, leaf: Leaf, preformatted: bool=False) -> None",
                "is_comment(self) -> bool",
                "is_decorator(self) -> bool",
                "is_import(self) -> bool",
                "is_class(self) -> bool",
                "is_stub_class(self) -> bool",
                "is_collection_with_optional_trailing_comma(self) -> bool",
                "is_def(self) -> bool",
                "is_class_paren_empty(self) -> bool",
                "is_triple_quoted_string(self) -> bool",
                "contains_standalone_comments(self, depth_limit: int=sys.maxsize) -> bool",
                "contains_uncollapsable_type_comments(self) -> bool",
                "contains_unsplittable_type_ignore(self) -> bool",
                "contains_multiline_strings(self) -> bool",
                "maybe_remove_trailing_comma(self, closing: Leaf) -> bool",
                "append_comment(self, comment: Leaf) -> bool",
                "comments_after(self, leaf: Leaf) -> List[Leaf]",
                "remove_trailing_comma(self) -> None",
                "is_complex_subscript(self, leaf: Leaf) -> bool",
                "clone(self) -> 'Line'",
                "__str__(self) -> str",
                "__bool__(self) -> bool",
                "maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "_maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "_maybe_empty_lines_for_class_or_def(self, current_line: Line, before: int) -> Tuple[int, int]",
                "line(self, indent: int=0) -> Iterator[Line]",
                "visit_default(self, node: LN) -> Iterator[Line]",
                "visit_INDENT(self, node: Leaf) -> Iterator[Line]",
                "visit_DEDENT(self, node: Leaf) -> Iterator[Line]",
                "visit_stmt(self, node: Node, keywords: Set[str], parens: Set[str]) -> Iterator[Line]",
                "visit_suite(self, node: Node) -> Iterator[Line]",
                "visit_simple_stmt(self, node: Node) -> Iterator[Line]",
                "visit_async_stmt(self, node: Node) -> Iterator[Line]",
                "visit_decorators(self, node: Node) -> Iterator[Line]",
                "visit_SEMI(self, leaf: Leaf) -> Iterator[Line]",
                "visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]",
                "visit_STANDALONE_COMMENT(self, leaf: Leaf) -> Iterator[Line]",
                "visit_factor(self, node: Node) -> Iterator[Line]",
                "visit_STRING(self, leaf: Leaf) -> Iterator[Line]",
                "__post_init__(self) -> None",
                "init_st(ST: Type[StringTransformer]) -> StringTransformer",
                "do_match(self, line: Line) -> TMatchResult",
                "do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]",
                "__call__(self, line: Line, _features: Collection[Feature]) -> Iterator[Line]",
                "_get_key(string: str) -> 'CustomSplitMapMixin._Key'",
                "add_custom_splits(self, string: str, custom_splits: Iterable[CustomSplit]) -> None",
                "pop_custom_splits(self, string: str) -> List[CustomSplit]",
                "has_custom_splits(self, string: str) -> bool",
                "do_match(self, line: Line) -> TMatchResult",
                "do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]",
                "__remove_backslash_line_continuation_chars(line: Line, string_idx: int) -> TResult[Line]",
                "__merge_string_group(self, line: Line, string_idx: int) -> TResult[Line]",
                "__validate_msg(line: Line, string_idx: int) -> TResult[None]",
                "do_match(self, line: Line) -> TMatchResult",
                "do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]",
                "do_splitter_match(self, line: Line) -> TMatchResult",
                "do_match(self, line: Line) -> TMatchResult",
                "__validate(self, line: Line, string_idx: int) -> TResult[None]",
                "__get_max_string_length(self, line: Line, string_idx: int) -> int",
                "do_splitter_match(self, line: Line) -> TMatchResult",
                "do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]",
                "__get_break_idx(self, string: str, max_break_idx: int) -> Optional[int]",
                "__maybe_normalize_string_quotes(self, leaf: Leaf) -> None",
                "__normalize_f_string(self, string: str, prefix: str) -> str",
                "do_splitter_match(self, line: Line) -> TMatchResult",
                "_return_match(LL: List[Leaf]) -> Optional[int]",
                "_else_match(LL: List[Leaf]) -> Optional[int]",
                "_assert_match(LL: List[Leaf]) -> Optional[int]",
                "_assign_match(LL: List[Leaf]) -> Optional[int]",
                "_dict_match(LL: List[Leaf]) -> Optional[int]",
                "do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]",
                "__init__(self) -> None",
                "parse(self, leaves: List[Leaf], string_idx: int) -> int",
                "_next_state(self, leaf: Leaf) -> bool",
                "insert_str_child(child: LN) -> None",
                "is_valid_index(idx: int) -> bool",
                "split_wrapper(line: Line, features: Collection[Feature]=()) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "get_imports_from_children(children: List[LN]) -> Generator[str, None, None]",
                "done(self, src: Path, changed: Changed) -> None",
                "failed(self, src: Path, message: str) -> None",
                "path_ignored(self, path: Path, message: str) -> None",
                "return_code(self) -> int",
                "__str__(self) -> str",
                "make_naked(string: str, string_prefix: str) -> str",
                "line_needs_plus() -> bool",
                "maybe_append_plus(new_line: Line) -> None",
                "max_last_string() -> int",
                "more_splits_should_be_made() -> bool",
                "fexpr_slices() -> Iterator[Tuple[Index, Index]]",
                "breaks_fstring_expression(i: Index) -> bool",
                "passes_all_checks(i: Index) -> bool",
                "rhs(line: Line, features: Collection[Feature]) -> Iterator[Line]"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    63
                ],
                "DEFAULT_LINE_LENGTH": [
                    240,
                    66,
                    341
                ],
                "DEFAULT_EXCLUDES": [
                    418,
                    67
                ],
                "DEFAULT_INCLUDES": [
                    68,
                    406
                ],
                "CACHE_DIR": [
                    6264,
                    69,
                    94,
                    6311
                ],
                "Path": [
                    640,
                    5764,
                    5766,
                    6285,
                    528,
                    531,
                    6291,
                    5795,
                    6307,
                    5811,
                    5686,
                    5816,
                    5697,
                    5698,
                    580,
                    69,
                    711,
                    5703,
                    90,
                    613,
                    6263,
                    5754
                ],
                "user_cache_dir": [
                    69
                ],
                "__version__": [
                    69,
                    445
                ],
                "STRING_PREFIX_CHARS": [
                    4613,
                    4614,
                    71,
                    4458,
                    4973,
                    4990,
                    4575
                ],
                "Final": [
                    1156,
                    1172,
                    1173,
                    1174,
                    1175,
                    1176,
                    1177,
                    1178,
                    1194,
                    1085,
                    1086,
                    71,
                    1096,
                    1098,
                    1099,
                    1107,
                    1123,
                    1124,
                    1125,
                    1132,
                    1139
                ],
                "FileContent": [
                    841,
                    75,
                    861,
                    926
                ],
                "str": [
                    2560,
                    5635,
                    5637,
                    1031,
                    5639,
                    2071,
                    1065,
                    1074,
                    563,
                    568,
                    1080,
                    5689,
                    5699,
                    5700,
                    5192,
                    75,
                    76,
                    77,
                    589,
                    609,
                    2663,
                    5754,
                    3725,
                    4756,
                    3752,
                    6313,
                    1713,
                    5811,
                    694,
                    5816,
                    1723,
                    1725,
                    6348,
                    5839,
                    5869,
                    244,
                    247,
                    760,
                    2814,
                    254,
                    256,
                    255,
                    2818,
                    2827,
                    269,
                    3853,
                    273,
                    4369,
                    5906,
                    276,
                    2837,
                    287,
                    288,
                    2857,
                    315,
                    5952,
                    325,
                    841,
                    5962,
                    4940,
                    336,
                    3417,
                    861,
                    4453,
                    5993,
                    6009,
                    1931,
                    6030,
                    913,
                    915,
                    405,
                    922,
                    417,
                    4514,
                    4519,
                    5040,
                    3001,
                    6074,
                    6083,
                    6090,
                    462,
                    4563,
                    982,
                    471,
                    2518,
                    2524,
                    483,
                    484,
                    485,
                    486,
                    4582,
                    5094,
                    6124,
                    5103,
                    1009,
                    1011,
                    2041
                ],
                "Encoding": [
                    76,
                    926
                ],
                "NewLine": [
                    77,
                    926
                ],
                "Depth": [
                    1202,
                    78
                ],
                "int": [
                    256,
                    5251,
                    4487,
                    3592,
                    4047,
                    1807,
                    1808,
                    3985,
                    5265,
                    5905,
                    2581,
                    4503,
                    2714,
                    1051,
                    2970,
                    3356,
                    6174,
                    5791,
                    5792,
                    5793,
                    4131,
                    3237,
                    2728,
                    3752,
                    3114,
                    3960,
                    4012,
                    5198,
                    4655,
                    1201,
                    1205,
                    1206,
                    1333,
                    5821,
                    5585,
                    1864,
                    4299,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    340,
                    1746,
                    1747,
                    472,
                    88,
                    1749,
                    2517,
                    2519,
                    2520,
                    2907,
                    3551,
                    6104,
                    1767,
                    1260,
                    6124,
                    240,
                    3313,
                    1524,
                    2804,
                    2936,
                    4094,
                    255
                ],
                "NodeType": [
                    5411,
                    4462,
                    2319,
                    4270,
                    79,
                    1202
                ],
                "ParserState": [
                    80,
                    4270
                ],
                "LeafID": [
                    5601,
                    1252,
                    81,
                    4657,
                    1203,
                    5585,
                    1336,
                    5595
                ],
                "StringID": [
                    82,
                    2814
                ],
                "Priority": [
                    2368,
                    1252,
                    1260,
                    2382,
                    83,
                    1203,
                    5468
                ],
                "Index": [
                    3781,
                    3783,
                    3816,
                    139,
                    6094,
                    84,
                    6104,
                    3801,
                    6110
                ],
                "LN": [
                    5251,
                    5639,
                    5384,
                    5390,
                    2319,
                    1042,
                    5272,
                    1053,
                    2335,
                    2337,
                    2343,
                    4392,
                    2349,
                    2482,
                    5308,
                    4546,
                    5452,
                    5326,
                    85,
                    1880,
                    4441,
                    5336,
                    5468,
                    5220,
                    5350,
                    5225,
                    4462,
                    5368,
                    5241,
                    1018,
                    2301
                ],
                "Union": [
                    5889,
                    5890,
                    325,
                    137,
                    778,
                    5869,
                    5905,
                    1074,
                    85
                ],
                "Leaf": [
                    3584,
                    3076,
                    5641,
                    5647,
                    4624,
                    4625,
                    4626,
                    3092,
                    4628,
                    2071,
                    5149,
                    5150,
                    5662,
                    5153,
                    5156,
                    5675,
                    1074,
                    4667,
                    4668,
                    4669,
                    4671,
                    4672,
                    4161,
                    1602,
                    85,
                    5207,
                    4186,
                    5220,
                    1639,
                    3689,
                    4210,
                    3707,
                    4220,
                    5256,
                    1676,
                    5267,
                    1688,
                    4769,
                    1202,
                    1204,
                    3254,
                    1208,
                    4797,
                    5312,
                    5317,
                    5320,
                    4299,
                    4317,
                    5358,
                    5359,
                    4851,
                    1271,
                    2301,
                    2306,
                    1284,
                    3849,
                    1298,
                    4378,
                    4891,
                    1311,
                    5411,
                    2343,
                    4392,
                    4905,
                    1324,
                    1334,
                    1336,
                    5434,
                    1341,
                    4926,
                    2368,
                    4940,
                    2382,
                    4948,
                    5464,
                    1369,
                    1882,
                    4966,
                    5484,
                    1910,
                    4982,
                    3960,
                    5496,
                    4475,
                    1916,
                    2430,
                    4479,
                    4483,
                    5508,
                    1414,
                    3985,
                    4522,
                    4012,
                    2482,
                    4538,
                    5058,
                    2502,
                    1995,
                    1999,
                    4047,
                    1489,
                    2004,
                    6104,
                    6110,
                    5599,
                    5600,
                    2020,
                    2021,
                    2026,
                    1004,
                    4094
                ],
                "Node": [
                    5120,
                    5635,
                    5126,
                    5254,
                    1931,
                    5265,
                    1044,
                    5528,
                    2335,
                    1696,
                    1951,
                    1055,
                    1958,
                    5159,
                    5166,
                    1074,
                    1974,
                    5439,
                    1989,
                    5577,
                    5454,
                    85,
                    982,
                    2009,
                    5350,
                    2023,
                    1005,
                    5103,
                    1009,
                    5363
                ],
                "Transformer": [
                    2606,
                    4810,
                    86
                ],
                "Callable": [
                    4392,
                    6110,
                    86,
                    4487
                ],
                "Collection": [
                    4897,
                    4617,
                    4656,
                    4657,
                    4817,
                    86,
                    2583,
                    4826,
                    2746,
                    2623
                ],
                "Iterator": [
                    6022,
                    4617,
                    1932,
                    1042,
                    5906,
                    2584,
                    1053,
                    1951,
                    4898,
                    4131,
                    3237,
                    1958,
                    2728,
                    4905,
                    2482,
                    4658,
                    1974,
                    2746,
                    2623,
                    1989,
                    3783,
                    1864,
                    5703,
                    1995,
                    6094,
                    1999,
                    4817,
                    5585,
                    2004,
                    86,
                    1880,
                    2009,
                    4826,
                    2907,
                    6104,
                    6110,
                    3551,
                    5220,
                    2026,
                    4851,
                    1910,
                    1018,
                    1916
                ],
                "Timestamp": [
                    89,
                    87
                ],
                "float": [
                    87
                ],
                "FileSize": [
                    88,
                    89
                ],
                "CacheInfo": [
                    89,
                    90,
                    6285
                ],
                "Tuple": [
                    325,
                    485,
                    1767,
                    3781,
                    3783,
                    2814,
                    4270,
                    1808,
                    6094,
                    1202,
                    6291,
                    1749,
                    6110,
                    6104,
                    568,
                    89,
                    926,
                    2815
                ],
                "Cache": [
                    6307,
                    6278,
                    655,
                    593,
                    6291,
                    90,
                    6267
                ],
                "Dict": [
                    199,
                    4270,
                    1202,
                    1203,
                    276,
                    1336,
                    90,
                    315,
                    2815
                ],
                "out": [
                    512,
                    545,
                    1057,
                    1063,
                    5800,
                    1066,
                    1070,
                    1071,
                    5808,
                    562,
                    5818,
                    91,
                    575
                ],
                "partial": [
                    2048,
                    2051,
                    2052,
                    2053,
                    2054,
                    2043,
                    2055,
                    2056,
                    2057,
                    2058,
                    2042,
                    91,
                    92,
                    2046,
                    2047
                ],
                "click.secho": [
                    563,
                    91,
                    92
                ],
                "click": [
                    388,
                    393,
                    398,
                    403,
                    287,
                    415,
                    427,
                    302,
                    563,
                    436,
                    311,
                    568,
                    445,
                    446,
                    449,
                    325,
                    454,
                    456,
                    335,
                    336,
                    337,
                    468,
                    470,
                    345,
                    91,
                    348,
                    92,
                    5856,
                    356,
                    5864,
                    365,
                    373,
                    379
                ],
                "err": [
                    519,
                    524,
                    492,
                    497,
                    5813,
                    6043,
                    92,
                    542
                ],
                "pygram.initialize": [
                    94
                ],
                "pygram": [
                    961,
                    963,
                    972,
                    976,
                    948,
                    950,
                    952,
                    954,
                    94,
                    95
                ],
                "syms": [
                    5120,
                    5127,
                    4105,
                    5645,
                    2063,
                    5135,
                    5651,
                    5140,
                    5658,
                    5673,
                    2091,
                    2092,
                    2093,
                    1087,
                    1088,
                    1089,
                    1090,
                    1091,
                    1092,
                    1093,
                    1094,
                    2115,
                    2116,
                    2117,
                    2118,
                    2122,
                    2133,
                    2138,
                    6236,
                    95,
                    2146,
                    1126,
                    1127,
                    1128,
                    1129,
                    1130,
                    2157,
                    1133,
                    1134,
                    1135,
                    1136,
                    2162,
                    1137,
                    1140,
                    1141,
                    1142,
                    2167,
                    1143,
                    1144,
                    1145,
                    1146,
                    1147,
                    2173,
                    1148,
                    1149,
                    1152,
                    1153,
                    1154,
                    1150,
                    1151,
                    2184,
                    2191,
                    2208,
                    1697,
                    5281,
                    1700,
                    5284,
                    2221,
                    2225,
                    2233,
                    2240,
                    5312,
                    2244,
                    2252,
                    2257,
                    5329,
                    2262,
                    2272,
                    2273,
                    2277,
                    2283,
                    5363,
                    2295,
                    5370,
                    5372,
                    4870,
                    4874,
                    5387,
                    5392,
                    5398,
                    5423,
                    2358,
                    4934,
                    4935,
                    5454,
                    5462,
                    2398,
                    5474,
                    2406,
                    2426,
                    3972,
                    2438,
                    5513,
                    2442,
                    2451,
                    3998,
                    2463,
                    5549,
                    5556,
                    4024,
                    5560,
                    5569,
                    4060,
                    2016,
                    2023,
                    1005,
                    2029,
                    4081
                ],
                "pygram.python_symbols": [
                    95
                ],
                "UserWarning": [
                    98
                ],
                "Exception": [
                    608,
                    102,
                    5966,
                    115,
                    5974
                ],
                "CannotTransform": [
                    2758,
                    2664,
                    106,
                    138,
                    2764,
                    2922,
                    4369,
                    2676,
                    2774,
                    4374
                ],
                "ValueError": [
                    1377,
                    1380,
                    6279,
                    4840,
                    110,
                    4910,
                    5522,
                    5492,
                    4856,
                    5725
                ],
                "T": [
                    1018,
                    1050,
                    137,
                    138,
                    6094,
                    114,
                    1015,
                    1042,
                    118,
                    119,
                    122,
                    1053
                ],
                "TypeVar": [
                    114,
                    115
                ],
                "E": [
                    130,
                    137,
                    115,
                    126,
                    127
                ],
                "Generic": [
                    126,
                    118,
                    1015
                ],
                "self._value": [
                    120,
                    123
                ],
                "self": [
                    2048,
                    2051,
                    2052,
                    2053,
                    2054,
                    2055,
                    1544,
                    2056,
                    2057,
                    2058,
                    1036,
                    2059,
                    2060,
                    3598,
                    1040,
                    1555,
                    1046,
                    3606,
                    1054,
                    1569,
                    1058,
                    3619,
                    1060,
                    4345,
                    1062,
                    3110,
                    1585,
                    1586,
                    1592,
                    1593,
                    2047,
                    1600,
                    3651,
                    1604,
                    1610,
                    1611,
                    1612,
                    1613,
                    5844,
                    1615,
                    1618,
                    1621,
                    1622,
                    1623,
                    1627,
                    1628,
                    1629,
                    3675,
                    1636,
                    3686,
                    1643,
                    3691,
                    1651,
                    120,
                    1656,
                    3077,
                    123,
                    3705,
                    128,
                    3713,
                    131,
                    1667,
                    1672,
                    1673,
                    1678,
                    1682,
                    1683,
                    1684,
                    1690,
                    5798,
                    5799,
                    5801,
                    5834,
                    5803,
                    1708,
                    1709,
                    1710,
                    5809,
                    178,
                    1715,
                    1718,
                    1719,
                    5814,
                    5817,
                    1724,
                    1731,
                    5831,
                    2760,
                    4296,
                    1226,
                    1227,
                    4297,
                    1229,
                    1230,
                    2765,
                    1232,
                    1233,
                    1234,
                    1235,
                    1236,
                    2771,
                    1238,
                    3794,
                    1240,
                    4313,
                    1242,
                    1243,
                    1244,
                    1245,
                    1246,
                    1755,
                    1760,
                    1761,
                    1250,
                    1763,
                    1764,
                    5853,
                    3302,
                    5854,
                    5856,
                    3937,
                    1258,
                    1770,
                    3307,
                    5860,
                    5861,
                    5862,
                    3824,
                    1265,
                    3825,
                    4336,
                    1268,
                    245,
                    1269,
                    1780,
                    248,
                    1781,
                    1782,
                    1787,
                    4342,
                    4344,
                    1278,
                    1279,
                    256,
                    254,
                    255,
                    1790,
                    1791,
                    1793,
                    1798,
                    1287,
                    1288,
                    1799,
                    3850,
                    4356,
                    1292,
                    1293,
                    4357,
                    4361,
                    4363,
                    1810,
                    1811,
                    2834,
                    2835,
                    1815,
                    4346,
                    1305,
                    1306,
                    1818,
                    1819,
                    3868,
                    1824,
                    1825,
                    1314,
                    1315,
                    2850,
                    2852,
                    1318,
                    1319,
                    1830,
                    1831,
                    1833,
                    1834,
                    2853,
                    5859,
                    1326,
                    1839,
                    2862,
                    2863,
                    5864,
                    4338,
                    1355,
                    1356,
                    1357,
                    1872,
                    1361,
                    1873,
                    1363,
                    1364,
                    1365,
                    1366,
                    1367,
                    1876,
                    1877,
                    1883,
                    3936,
                    2909,
                    3934,
                    1375,
                    1376,
                    1887,
                    1890,
                    1379,
                    1891,
                    2915,
                    3935,
                    1895,
                    1384,
                    1897,
                    1898,
                    3328,
                    3938,
                    1389,
                    1901,
                    1902,
                    3945,
                    3948,
                    1394,
                    1907,
                    1399,
                    1913,
                    1914,
                    1405,
                    1406,
                    1407,
                    1921,
                    3459,
                    4351,
                    1413,
                    1925,
                    1928,
                    4352,
                    1423,
                    1427,
                    1428,
                    1431,
                    1433,
                    1947,
                    1949,
                    1953,
                    1954,
                    1956,
                    1447,
                    2985,
                    1962,
                    1963,
                    1965,
                    1966,
                    1967,
                    1456,
                    1457,
                    1970,
                    1971,
                    1972,
                    5858,
                    1463,
                    1976,
                    1468,
                    1980,
                    1470,
                    1475,
                    1987,
                    1992,
                    1993,
                    1484,
                    1997,
                    1489,
                    2001,
                    2002,
                    2005,
                    2006,
                    2007,
                    1506,
                    1507,
                    1508,
                    1509,
                    1510,
                    1511,
                    1512,
                    2024,
                    3566,
                    1519,
                    1520,
                    1521,
                    2031,
                    2036,
                    1526,
                    2040,
                    2042,
                    2043,
                    2046,
                    1535
                ],
                "value": [
                    4994,
                    3972,
                    4997,
                    4991,
                    5146,
                    3613,
                    4000,
                    5922,
                    3619,
                    294,
                    295,
                    296,
                    5928,
                    5929,
                    300,
                    3629,
                    303,
                    3254,
                    2999,
                    4024,
                    5943,
                    5944,
                    3392,
                    321,
                    5952,
                    5954,
                    5956,
                    5957,
                    3658,
                    1618,
                    4180,
                    1622,
                    1623,
                    2518,
                    1628,
                    1629,
                    3038,
                    3554,
                    3941,
                    1510,
                    3559,
                    1512,
                    3566,
                    1521,
                    3057,
                    120,
                    4990,
                    1407
                ],
                "self._e": [
                    128,
                    131
                ],
                "e": [
                    128,
                    5722,
                    303
                ],
                "Result": [
                    137,
                    138
                ],
                "Ok": [
                    4224,
                    137,
                    3736,
                    2968,
                    3354,
                    3741,
                    3233,
                    3745,
                    3750,
                    3111,
                    3642,
                    3265,
                    4175,
                    2900,
                    2903,
                    3549,
                    2912,
                    3171,
                    2916,
                    4204,
                    3697,
                    3955,
                    2932
                ],
                "Err": [
                    2919,
                    3303,
                    137,
                    2762,
                    2986,
                    3308,
                    4369,
                    2930,
                    2772,
                    4375
                ],
                "TResult": [
                    4131,
                    3237,
                    2728,
                    138,
                    139,
                    3114,
                    3313,
                    2937,
                    2970,
                    2907,
                    3551
                ],
                "TMatchResult": [
                    3301,
                    2889,
                    139,
                    3191,
                    3512,
                    3930,
                    3291,
                    2718
                ],
                "Enum": [
                    168,
                    162,
                    142,
                    184
                ],
                "NO": [
                    2182,
                    2189,
                    143,
                    2194,
                    2200,
                    2203,
                    2077,
                    2206,
                    163,
                    2084,
                    2211,
                    2216,
                    2219,
                    2095,
                    2223,
                    2227,
                    2101,
                    2231,
                    2105,
                    2235,
                    2108,
                    2238,
                    2247,
                    2120,
                    2250,
                    2255,
                    2130,
                    2260,
                    2134,
                    2267,
                    2141,
                    2275,
                    2278,
                    2152,
                    2281,
                    2155,
                    2286,
                    2160,
                    2165,
                    2293,
                    2296,
                    2170,
                    2174
                ],
                "YES": [
                    144,
                    165
                ],
                "DIFF": [
                    145
                ],
                "CHECK": [
                    146
                ],
                "COLOR_DIFF": [
                    147
                ],
                "bool": [
                    2582,
                    2071,
                    1532,
                    6174,
                    1568,
                    3622,
                    5166,
                    3631,
                    568,
                    1599,
                    1602,
                    580,
                    613,
                    1639,
                    5241,
                    641,
                    5251,
                    151,
                    1688,
                    5272,
                    2715,
                    5787,
                    5788,
                    5789,
                    5790,
                    4769,
                    177,
                    5308,
                    1729,
                    1731,
                    712,
                    716,
                    5326,
                    1744,
                    3801,
                    4317,
                    1248,
                    1250,
                    5350,
                    3816,
                    241,
                    242,
                    2803,
                    1271,
                    5368,
                    1284,
                    5384,
                    265,
                    5390,
                    2319,
                    1298,
                    4378,
                    1311,
                    5411,
                    805,
                    806,
                    2857,
                    1338,
                    1339,
                    5434,
                    1341,
                    4926,
                    5439,
                    1859,
                    1860,
                    4931,
                    1862,
                    1351,
                    841,
                    4940,
                    5452,
                    4948,
                    1369,
                    4453,
                    4966,
                    1387,
                    1392,
                    1394,
                    1397,
                    1399,
                    1402,
                    4475,
                    1405,
                    4479,
                    1411,
                    4483,
                    5508,
                    4487,
                    1418,
                    4503,
                    1481,
                    6103,
                    474,
                    475,
                    2524,
                    476,
                    477,
                    478,
                    479,
                    480,
                    481,
                    482,
                    1506,
                    1500,
                    1516,
                    6124,
                    1519,
                    1524,
                    3572,
                    6138,
                    3068
                ],
                "check": [
                    153,
                    5787,
                    489,
                    526
                ],
                "diff": [
                    833,
                    5788,
                    5985,
                    741,
                    489,
                    526,
                    5998,
                    5999,
                    153,
                    156,
                    159
                ],
                "cls.CHECK": [
                    154
                ],
                "cls": [
                    154,
                    157,
                    159
                ],
                "color": [
                    489,
                    156
                ],
                "cls.COLOR_DIFF": [
                    157
                ],
                "cls.DIFF": [
                    159
                ],
                "cls.YES": [
                    159
                ],
                "classmethod": [
                    1073,
                    149
                ],
                "CACHED": [
                    164
                ],
                "PY27": [
                    169
                ],
                "PY33": [
                    170
                ],
                "PY34": [
                    171
                ],
                "PY35": [
                    172
                ],
                "PY36": [
                    173
                ],
                "PY37": [
                    174
                ],
                "PY38": [
                    175
                ],
                "TargetVersion.PY27": [
                    200,
                    178
                ],
                "TargetVersion": [
                    265,
                    943,
                    178,
                    181,
                    326,
                    199,
                    200,
                    201,
                    202,
                    203,
                    332,
                    5581,
                    5577,
                    208,
                    982,
                    216,
                    473,
                    348,
                    224,
                    239
                ],
                "PY36_VERSIONS": [
                    501,
                    181
                ],
                "TargetVersion.PY36": [
                    208,
                    181
                ],
                "TargetVersion.PY37": [
                    216,
                    181
                ],
                "TargetVersion.PY38": [
                    224,
                    181
                ],
                "UNICODE_LITERALS": [
                    186
                ],
                "F_STRINGS": [
                    187
                ],
                "NUMERIC_UNDERSCORES": [
                    188
                ],
                "TRAILING_COMMA_IN_CALL": [
                    189
                ],
                "TRAILING_COMMA_IN_DEF": [
                    190
                ],
                "ASYNC_IDENTIFIERS": [
                    193
                ],
                "ASYNC_KEYWORDS": [
                    194
                ],
                "ASSIGNMENT_EXPRESSIONS": [
                    195
                ],
                "POS_ONLY_ARGUMENTS": [
                    196
                ],
                "VERSION_TO_FEATURES": [
                    266,
                    5581,
                    199
                ],
                "Set": [
                    640,
                    5635,
                    5637,
                    265,
                    1931,
                    528,
                    6291,
                    5528,
                    5537,
                    5411,
                    943,
                    199,
                    5577,
                    5585,
                    5595,
                    5601,
                    613,
                    239,
                    5103,
                    2041
                ],
                "Feature": [
                    900,
                    4872,
                    265,
                    4617,
                    4876,
                    909,
                    2583,
                    5528,
                    4897,
                    5537,
                    5542,
                    5546,
                    5550,
                    4656,
                    5553,
                    5561,
                    2746,
                    5563,
                    2623,
                    199,
                    200,
                    201,
                    202,
                    969,
                    204,
                    205,
                    206,
                    974,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    4817,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    4826,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232
                ],
                "TargetVersion.PY33": [
                    201
                ],
                "TargetVersion.PY34": [
                    202
                ],
                "TargetVersion.PY35": [
                    203
                ],
                "Feature.ASYNC_IDENTIFIERS": [
                    200,
                    201,
                    202,
                    969,
                    206,
                    214
                ],
                "Feature.UNICODE_LITERALS": [
                    225,
                    900,
                    201,
                    202,
                    204,
                    209,
                    217
                ],
                "Feature.TRAILING_COMMA_IN_CALL": [
                    228,
                    4876,
                    205,
                    909,
                    212,
                    5563,
                    220
                ],
                "Feature.F_STRINGS": [
                    218,
                    210,
                    226,
                    5542
                ],
                "Feature.NUMERIC_UNDERSCORES": [
                    5546,
                    211,
                    219,
                    227
                ],
                "Feature.TRAILING_COMMA_IN_DEF": [
                    229,
                    4872,
                    909,
                    213,
                    5561,
                    221
                ],
                "Feature.ASYNC_KEYWORDS": [
                    974,
                    222,
                    230
                ],
                "Feature.ASSIGNMENT_EXPRESSIONS": [
                    5553,
                    231
                ],
                "Feature.POS_ONLY_ARGUMENTS": [
                    232,
                    5550
                ],
                "target_versions": [
                    969,
                    266,
                    974,
                    239,
                    944,
                    987,
                    957
                ],
                "field": [
                    5922,
                    1861,
                    5926,
                    5933,
                    239,
                    1202,
                    1203,
                    1747,
                    1205,
                    1206,
                    1334,
                    1336,
                    1337,
                    5913,
                    5951
                ],
                "set": [
                    4612,
                    4613,
                    4614,
                    5637,
                    528,
                    2065,
                    2066,
                    5520,
                    6297,
                    5537,
                    5678,
                    3132,
                    5595,
                    987,
                    5601,
                    495,
                    239,
                    504,
                    2041,
                    1533
                ],
                "line_length": [
                    2624,
                    2625,
                    2626,
                    5604,
                    6212,
                    2599,
                    4711,
                    4715,
                    6253,
                    2671,
                    240,
                    4721,
                    2612,
                    6132,
                    2714,
                    507
                ],
                "string_normalization": [
                    241
                ],
                "is_pyi": [
                    1744,
                    242,
                    1859
                ],
                "self.target_versions": [
                    248,
                    245
                ],
                "version_str": [
                    251,
                    253,
                    246
                ],
                "join": [
                    258,
                    6372,
                    773,
                    5192,
                    5866,
                    6036,
                    246,
                    5975,
                    923,
                    5982,
                    5983
                ],
                "version.value": [
                    247
                ],
                "version": [
                    266,
                    5581,
                    247,
                    248,
                    957
                ],
                "sorted": [
                    248,
                    5913,
                    659,
                    678
                ],
                "v.value": [
                    248
                ],
                "v": [
                    2049,
                    2051,
                    2052,
                    2053,
                    2054,
                    2055,
                    2056,
                    2057,
                    2058,
                    283,
                    2082,
                    1079,
                    1082,
                    4930,
                    4934,
                    4935,
                    332,
                    4944,
                    4945,
                    348,
                    248,
                    1258,
                    2289,
                    2040,
                    2042,
                    2044,
                    2046,
                    2047
                ],
                "parts": [
                    258,
                    252
                ],
                "self.line_length": [
                    3459,
                    3945,
                    3598,
                    3606,
                    254
                ],
                "self.string_normalization": [
                    255
                ],
                "self.is_pyi": [
                    256,
                    1953,
                    1830,
                    1770,
                    1962,
                    1970,
                    1782
                ],
                "dataclass": [
                    1734,
                    2505,
                    237,
                    1197,
                    1329,
                    5783,
                    1049,
                    1851,
                    2781,
                    2686
                ],
                "FileMode": [
                    262
                ],
                "Mode": [
                    643,
                    580,
                    613,
                    262,
                    805,
                    6307,
                    713,
                    841,
                    5993,
                    6263,
                    505,
                    6267,
                    861
                ],
                "all": [
                    3624,
                    266,
                    5464,
                    957
                ],
                "feature": [
                    5572,
                    266,
                    908,
                    909,
                    910,
                    5561,
                    5563,
                    5567
                ],
                "path_project_root": [
                    272,
                    271
                ],
                "find_project_root": [
                    527,
                    271
                ],
                "path_search_start": [
                    271
                ],
                "path_pyproject_toml": [
                    272,
                    273
                ],
                "path_pyproject_toml.is_file": [
                    273
                ],
                "Optional": [
                    269,
                    2319,
                    3985,
                    5265,
                    4628,
                    2335,
                    288,
                    2337,
                    287,
                    3752,
                    1324,
                    4012,
                    1204,
                    4671,
                    2368,
                    4672,
                    3781,
                    2382,
                    4047,
                    5198,
                    1489,
                    1745,
                    471,
                    5336,
                    5599,
                    5600,
                    486,
                    5225,
                    4462,
                    3960,
                    2301,
                    4094
                ],
                "pyproject_toml": [
                    281,
                    282
                ],
                "toml.load": [
                    281
                ],
                "toml": [
                    281,
                    301
                ],
                "path_config": [
                    281
                ],
                "config": [
                    512,
                    300,
                    306,
                    309,
                    282,
                    283,
                    318,
                    511
                ],
                "get": [
                    282
                ],
                "pyproject_toml.get": [
                    282
                ],
                "replace": [
                    4976,
                    283,
                    724
                ],
                "k.replace": [
                    283
                ],
                "k": [
                    1258,
                    283
                ],
                "config.items": [
                    283
                ],
                "Any": [
                    315,
                    276,
                    715,
                    4487
                ],
                "click.Context": [
                    568,
                    325,
                    470,
                    287
                ],
                "click.Parameter": [
                    325,
                    287
                ],
                "find_pyproject_toml": [
                    295
                ],
                "ctx.params.get": [
                    295
                ],
                "ctx.params": [
                    295
                ],
                "ctx": [
                    320,
                    576,
                    546,
                    515,
                    295,
                    520,
                    493,
                    525,
                    529,
                    564,
                    316,
                    317
                ],
                "parse_pyproject_toml": [
                    300
                ],
                "toml.TomlDecodeError": [
                    301
                ],
                "OSError": [
                    5721,
                    6316,
                    301
                ],
                "click.FileError": [
                    302
                ],
                "target_version": [
                    490,
                    309,
                    310,
                    495
                ],
                "config.get": [
                    309
                ],
                "isinstance": [
                    5120,
                    2306,
                    5892,
                    5126,
                    5254,
                    5256,
                    5641,
                    5895,
                    5898,
                    5647,
                    5267,
                    1044,
                    5662,
                    1055,
                    1696,
                    5153,
                    5918,
                    5156,
                    5928,
                    2986,
                    5675,
                    5934,
                    5935,
                    5940,
                    310,
                    5943,
                    1080,
                    5950,
                    5312,
                    5952,
                    5317,
                    5320,
                    2762,
                    5454,
                    2772,
                    1882,
                    2912,
                    2916,
                    2919,
                    3303,
                    1004,
                    3308,
                    5484,
                    2430
                ],
                "list": [
                    2625,
                    2310,
                    2855,
                    5928,
                    5117,
                    1747,
                    1205,
                    1334,
                    1206,
                    310,
                    1082,
                    1661,
                    5183
                ],
                "click.BadOptionUsage": [
                    311
                ],
                "default_map": [
                    320,
                    315,
                    317,
                    318
                ],
                "ctx.default_map": [
                    320,
                    316,
                    317
                ],
                "default_map.update": [
                    317,
                    318
                ],
                "click.Option": [
                    325
                ],
                "val.upper": [
                    332
                ],
                "val": [
                    332
                ],
                "List": [
                    5639,
                    1676,
                    2319,
                    4624,
                    3985,
                    4625,
                    4626,
                    2837,
                    4378,
                    4769,
                    4522,
                    4012,
                    2606,
                    943,
                    1205,
                    1206,
                    1334,
                    1336,
                    5689,
                    3642,
                    4667,
                    4668,
                    4669,
                    3781,
                    326,
                    4299,
                    4047,
                    1747,
                    473,
                    2524,
                    2526,
                    2660,
                    3960,
                    4094
                ],
                "write_back": [
                    656,
                    667,
                    675,
                    552,
                    558,
                    827,
                    700,
                    829,
                    699,
                    834,
                    590,
                    594,
                    600,
                    603,
                    604,
                    734,
                    737,
                    743,
                    489,
                    627
                ],
                "WriteBack.from_configuration": [
                    489
                ],
                "WriteBack": [
                    737,
                    642,
                    700,
                    580,
                    613,
                    805,
                    827,
                    834,
                    489,
                    714,
                    829,
                    667,
                    656,
                    594,
                    603,
                    604,
                    699,
                    734
                ],
                "py36": [
                    496,
                    491
                ],
                "ctx.exit": [
                    576,
                    546,
                    515,
                    520,
                    525,
                    493,
                    564
                ],
                "versions": [
                    896,
                    900,
                    910,
                    495,
                    501,
                    504,
                    506,
                    894
                ],
                "mode": [
                    6272,
                    514,
                    901,
                    902,
                    904,
                    657,
                    918,
                    919,
                    675,
                    6309,
                    553,
                    558,
                    817,
                    707,
                    590,
                    595,
                    724,
                    851,
                    600,
                    857,
                    730,
                    606,
                    5995,
                    628,
                    6264,
                    505,
                    890,
                    893,
                    894
                ],
                "pyi": [
                    508
                ],
                "skip_string_normalization": [
                    509
                ],
                "verbose": [
                    544,
                    5790,
                    526,
                    529,
                    561,
                    574,
                    511
                ],
                "code": [
                    513,
                    514,
                    1011,
                    1012,
                    1080,
                    1081,
                    1082
                ],
                "print": [
                    514
                ],
                "format_str": [
                    514,
                    851,
                    5995
                ],
                "include_regex": [
                    517,
                    535
                ],
                "re_compile_maybe_verbose": [
                    522,
                    517
                ],
                "include": [
                    5744,
                    5748,
                    517,
                    519
                ],
                "re.error": [
                    523,
                    518
                ],
                "re": [
                    3872,
                    3873,
                    5954,
                    518,
                    5030,
                    3017,
                    6090,
                    523,
                    3565,
                    3566,
                    4973,
                    5008,
                    5009,
                    3794,
                    5010,
                    5037,
                    3064,
                    3868
                ],
                "exclude_regex": [
                    522,
                    535
                ],
                "exclude": [
                    5737,
                    522,
                    1258,
                    524,
                    5520,
                    5521,
                    5744
                ],
                "report": [
                    526,
                    660,
                    535,
                    554,
                    558,
                    562,
                    563,
                    564,
                    694,
                    703,
                    5715,
                    5722,
                    5852,
                    5727,
                    607,
                    609,
                    5855,
                    5860,
                    5863,
                    5866,
                    5739,
                    5744,
                    629
                ],
                "Report": [
                    526
                ],
                "quiet": [
                    544,
                    526,
                    529,
                    561,
                    5789,
                    574
                ],
                "root": [
                    5728,
                    5720,
                    5711,
                    527,
                    5744,
                    535,
                    5688
                ],
                "src": [
                    5766,
                    527,
                    529,
                    530,
                    659,
                    660,
                    6298,
                    6299,
                    6300,
                    6301,
                    6303,
                    675,
                    932,
                    677,
                    678,
                    5800,
                    6312,
                    5805,
                    814,
                    815,
                    5807,
                    817,
                    690,
                    5813,
                    694,
                    573,
                    702,
                    703,
                    833,
                    589,
                    5965,
                    723,
                    596,
                    726,
                    727,
                    600,
                    606,
                    607,
                    735,
                    609,
                    739,
                    740,
                    5998,
                    5875,
                    5881,
                    5885
                ],
                "sources": [
                    548,
                    550,
                    678,
                    6312,
                    558,
                    528,
                    625,
                    658,
                    533,
                    661,
                    6298,
                    540,
                    543
                ],
                "path_empty": [
                    529
                ],
                "s": [
                    5856,
                    5859,
                    5860,
                    5862,
                    542,
                    5864,
                    530,
                    531,
                    538,
                    5854
                ],
                "p": [
                    2184,
                    2187,
                    2191,
                    531,
                    532,
                    2198,
                    535,
                    538,
                    2295,
                    540,
                    2208,
                    2081,
                    2214,
                    2089,
                    2090,
                    2221,
                    5422,
                    5423,
                    2225,
                    5426,
                    2099,
                    2229,
                    5429,
                    5431,
                    2233,
                    2240,
                    4928,
                    2243,
                    2244,
                    4934,
                    4935,
                    2252,
                    2257,
                    2262,
                    2265,
                    2283,
                    2157,
                    2162,
                    1269,
                    2167
                ],
                "p.is_dir": [
                    532
                ],
                "sources.update": [
                    533
                ],
                "gen_python_files_in_dir": [
                    534,
                    5743
                ],
                "get_gitignore": [
                    535
                ],
                "p.is_file": [
                    538
                ],
                "sources.add": [
                    540
                ],
                "len": [
                    3329,
                    3457,
                    1667,
                    5379,
                    6146,
                    3081,
                    1423,
                    3088,
                    3089,
                    3731,
                    4756,
                    5011,
                    5401,
                    4509,
                    543,
                    3871,
                    5665,
                    548,
                    4137,
                    6195,
                    3638,
                    3640,
                    4792,
                    5442,
                    3016,
                    1612,
                    6221,
                    6096,
                    5457,
                    5330,
                    1621,
                    5463,
                    6360,
                    3417,
                    4313,
                    1627,
                    5340,
                    3421,
                    4958,
                    6364,
                    3168,
                    2017,
                    6114,
                    1507,
                    2534,
                    5607,
                    6119,
                    3946,
                    1389,
                    3824,
                    3825,
                    6132,
                    3447,
                    1661,
                    4606,
                    5375
                ],
                "reformat_one": [
                    549
                ],
                "sources.pop": [
                    550
                ],
                "fast": [
                    675,
                    551,
                    590,
                    558,
                    817,
                    626,
                    855,
                    600,
                    730
                ],
                "reformat_many": [
                    557
                ],
                "report.return_code": [
                    562,
                    564
                ],
                "click.command": [
                    335
                ],
                "dict": [
                    1336,
                    1202,
                    1203,
                    335
                ],
                "click.option": [
                    356,
                    388,
                    454,
                    393,
                    427,
                    365,
                    398,
                    336,
                    337,
                    403,
                    436,
                    373,
                    345,
                    379,
                    415
                ],
                "click.Choice": [
                    348
                ],
                "v.name.lower": [
                    348
                ],
                "v.name": [
                    348
                ],
                "target_version_option_callback": [
                    349
                ],
                "click.version_option": [
                    445
                ],
                "click.argument": [
                    446
                ],
                "click.Path": [
                    456,
                    449
                ],
                "read_pyproject_toml": [
                    465
                ],
                "click.pass_context": [
                    468
                ],
                "changed": [
                    700,
                    5797,
                    588,
                    5804,
                    591,
                    703,
                    598,
                    599,
                    696,
                    602,
                    603,
                    604,
                    607
                ],
                "Changed.NO": [
                    5804,
                    588,
                    696,
                    700,
                    604
                ],
                "Changed": [
                    700,
                    5795,
                    5797,
                    588,
                    5804,
                    591,
                    660,
                    598,
                    599,
                    696,
                    602,
                    603,
                    604
                ],
                "src.is_file": [
                    589
                ],
                "format_stdin_to_stdout": [
                    590
                ],
                "Changed.YES": [
                    696,
                    602,
                    5797,
                    591
                ],
                "cache": [
                    707,
                    6278,
                    6312,
                    6282,
                    655,
                    593,
                    657,
                    595,
                    658,
                    597,
                    6300,
                    606
                ],
                "WriteBack.DIFF": [
                    737,
                    656,
                    594,
                    667,
                    829
                ],
                "read_cache": [
                    657,
                    595
                ],
                "res_src": [
                    596,
                    597
                ],
                "src.resolve": [
                    6312,
                    6299,
                    596
                ],
                "get_cache_info": [
                    6312,
                    6300,
                    597
                ],
                "Changed.CACHED": [
                    603,
                    660,
                    598,
                    599
                ],
                "format_file_in_place": [
                    675,
                    599
                ],
                "WriteBack.YES": [
                    827,
                    603,
                    699,
                    734
                ],
                "WriteBack.CHECK": [
                    700,
                    604
                ],
                "write_cache": [
                    707,
                    606
                ],
                "report.done": [
                    703,
                    660,
                    607
                ],
                "report.failed": [
                    609,
                    694
                ],
                "exc": [
                    609,
                    1000,
                    1002,
                    5969,
                    5975,
                    5977
                ],
                "loop": [
                    705,
                    674,
                    616,
                    6056,
                    682,
                    683,
                    6062,
                    623,
                    6063,
                    630,
                    6071,
                    635
                ],
                "asyncio.get_event_loop": [
                    616
                ],
                "asyncio": [
                    6048,
                    673,
                    705,
                    6052,
                    645,
                    6054,
                    616,
                    6063,
                    688
                ],
                "worker_count": [
                    617,
                    620,
                    621
                ],
                "os.cpu_count": [
                    617
                ],
                "os": [
                    617,
                    6315
                ],
                "sys.platform": [
                    618
                ],
                "sys": [
                    6051,
                    618,
                    748,
                    814,
                    5871,
                    4848,
                    5873,
                    1524,
                    6356,
                    825,
                    6363,
                    5916
                ],
                "min": [
                    4868,
                    5766,
                    620,
                    1775,
                    6360,
                    4603
                ],
                "executor": [
                    675,
                    636,
                    621,
                    631
                ],
                "ProcessPoolExecutor": [
                    621
                ],
                "loop.run_until_complete": [
                    6062,
                    623
                ],
                "schedule_formatting": [
                    624
                ],
                "shutdown": [
                    635
                ],
                "executor.shutdown": [
                    636
                ],
                "asyncio.AbstractEventLoop": [
                    6048,
                    645
                ],
                "Executor": [
                    646
                ],
                "cached": [
                    658,
                    659
                ],
                "filter_cached": [
                    658
                ],
                "cancelled": [
                    664,
                    705,
                    692,
                    704
                ],
                "sources_to_cache": [
                    665,
                    706,
                    707,
                    702
                ],
                "lock": [
                    746,
                    666,
                    675,
                    671
                ],
                "manager": [
                    670,
                    671
                ],
                "Manager": [
                    670
                ],
                "manager.Lock": [
                    671
                ],
                "tasks": [
                    672,
                    690,
                    6044,
                    680
                ],
                "asyncio.ensure_future": [
                    673
                ],
                "loop.run_in_executor": [
                    674
                ],
                "pending": [
                    680,
                    682,
                    683,
                    687,
                    688
                ],
                "Iterable": [
                    6307,
                    1252,
                    680,
                    2827,
                    6291,
                    982,
                    6041,
                    5754
                ],
                "tasks.keys": [
                    680
                ],
                "loop.add_signal_handler": [
                    682,
                    683
                ],
                "signal.SIGINT": [
                    682
                ],
                "signal": [
                    682,
                    683
                ],
                "cancel": [
                    682,
                    683
                ],
                "signal.SIGTERM": [
                    683
                ],
                "NotImplementedError": [
                    684
                ],
                "done": [
                    6304,
                    688,
                    689,
                    6297,
                    6303
                ],
                "_": [
                    688,
                    1414
                ],
                "asyncio.wait": [
                    688
                ],
                "asyncio.FIRST_COMPLETED": [
                    688
                ],
                "task": [
                    6056,
                    6060,
                    6061,
                    689,
                    690,
                    691,
                    692,
                    693,
                    694,
                    696,
                    6044,
                    6045
                ],
                "tasks.pop": [
                    690
                ],
                "task.cancelled": [
                    691
                ],
                "cancelled.append": [
                    692
                ],
                "task.exception": [
                    693,
                    694
                ],
                "task.result": [
                    696
                ],
                "sources_to_cache.append": [
                    702
                ],
                "asyncio.gather": [
                    705,
                    6063
                ],
                "WriteBack.NO": [
                    714,
                    805
                ],
                "src.suffix": [
                    723
                ],
                "then": [
                    739,
                    813,
                    726,
                    831
                ],
                "datetime.utcfromtimestamp": [
                    726
                ],
                "datetime": [
                    830,
                    738,
                    813,
                    726
                ],
                "st_mtime": [
                    726
                ],
                "src.stat": [
                    726
                ],
                "open": [
                    735,
                    727
                ],
                "buf": [
                    728,
                    727
                ],
                "src_contents": [
                    741,
                    848,
                    851,
                    852,
                    856,
                    728,
                    857,
                    730,
                    890
                ],
                "encoding": [
                    933,
                    935,
                    939,
                    940,
                    749,
                    814,
                    728,
                    825,
                    735
                ],
                "newline": [
                    937,
                    940,
                    814,
                    750,
                    728,
                    825,
                    735
                ],
                "decode_bytes": [
                    728,
                    814
                ],
                "buf.read": [
                    728
                ],
                "dst_contents": [
                    736,
                    923,
                    741,
                    913,
                    851,
                    852,
                    915,
                    856,
                    857,
                    730,
                    891,
                    858,
                    922
                ],
                "format_file_contents": [
                    817,
                    730
                ],
                "NothingChanged": [
                    849,
                    731,
                    820,
                    853
                ],
                "f": [
                    6017,
                    6018,
                    791,
                    792,
                    797,
                    801,
                    6313,
                    6314,
                    6315,
                    824,
                    828,
                    836,
                    837,
                    838,
                    735,
                    736,
                    747,
                    753,
                    754,
                    755,
                    6013,
                    6015
                ],
                "f.write": [
                    736,
                    6017,
                    837,
                    754,
                    828,
                    6015
                ],
                "WriteBack.COLOR_DIFF": [
                    737,
                    834,
                    829
                ],
                "now": [
                    832,
                    738,
                    740,
                    830
                ],
                "datetime.utcnow": [
                    738,
                    813,
                    830
                ],
                "src_name": [
                    833,
                    739,
                    741,
                    831
                ],
                "dst_name": [
                    832,
                    833,
                    740,
                    741
                ],
                "diff_contents": [
                    744,
                    754,
                    741
                ],
                "write_back.COLOR_DIFF": [
                    743
                ],
                "color_diff": [
                    744,
                    835
                ],
                "nullcontext": [
                    746
                ],
                "io.TextIOWrapper": [
                    777,
                    778,
                    747,
                    939,
                    824
                ],
                "io": [
                    932,
                    777,
                    778,
                    747,
                    939,
                    824
                ],
                "sys.stdout.buffer": [
                    825,
                    748
                ],
                "sys.stdout": [
                    825,
                    748
                ],
                "wrap_stream_for_windows": [
                    753,
                    836
                ],
                "f.detach": [
                    755,
                    797,
                    838
                ],
                "lines": [
                    6016,
                    898,
                    772,
                    773,
                    912,
                    933,
                    934,
                    937,
                    5689,
                    5692,
                    5693,
                    2625,
                    2626,
                    2627,
                    6354,
                    6357,
                    6362,
                    6364,
                    6365,
                    995,
                    997,
                    762,
                    763,
                    6014,
                    6015
                ],
                "contents.split": [
                    762
                ],
                "contents": [
                    762
                ],
                "i": [
                    772,
                    4108,
                    4111,
                    3099,
                    3100,
                    3103,
                    3104,
                    4792,
                    4793,
                    4027,
                    4796,
                    4797,
                    4030,
                    2894,
                    2897,
                    2898,
                    2900,
                    2903,
                    6365,
                    6367,
                    4065,
                    3811,
                    4068,
                    3822,
                    3824,
                    3825,
                    3827,
                    763
                ],
                "line": [
                    6145,
                    3599,
                    4629,
                    3098,
                    3610,
                    3614,
                    2591,
                    2592,
                    3104,
                    2595,
                    3108,
                    4132,
                    4644,
                    4645,
                    4646,
                    6181,
                    2608,
                    2609,
                    2610,
                    4147,
                    2612,
                    2613,
                    6195,
                    2615,
                    6197,
                    6198,
                    6199,
                    2619,
                    6200,
                    3134,
                    4159,
                    2624,
                    2625,
                    4673,
                    3139,
                    6206,
                    6207,
                    2635,
                    4172,
                    2637,
                    6221,
                    3153,
                    3155,
                    4692,
                    4693,
                    4182,
                    4694,
                    4184,
                    4707,
                    2662,
                    6248,
                    4202,
                    4715,
                    6250,
                    3694,
                    4207,
                    3192,
                    2683,
                    3715,
                    3735,
                    3743,
                    3744,
                    3749,
                    3238,
                    3244,
                    3249,
                    3250,
                    3252,
                    3260,
                    2757,
                    2760,
                    4818,
                    2771,
                    6357,
                    6358,
                    6360,
                    2777,
                    2778,
                    6365,
                    6366,
                    4833,
                    4837,
                    3302,
                    3307,
                    4847,
                    763,
                    3324,
                    764,
                    765,
                    766,
                    768,
                    769,
                    770,
                    771,
                    772,
                    3328,
                    767,
                    4862,
                    4865,
                    3343,
                    3344,
                    4883,
                    4900,
                    4903,
                    3371,
                    4913,
                    4916,
                    4919,
                    3386,
                    2890,
                    3931,
                    2908,
                    3941,
                    3945,
                    3450,
                    4859,
                    2948,
                    5519,
                    2961,
                    2962,
                    2963,
                    916,
                    5521,
                    6034,
                    6035,
                    922,
                    2981,
                    4519,
                    2985,
                    3513,
                    5598,
                    3552,
                    6113,
                    5602,
                    2533,
                    2534,
                    2535,
                    2536,
                    6118,
                    2538,
                    2542,
                    5617,
                    6130,
                    2550,
                    6134
                ],
                "enumerate": [
                    4065,
                    2533,
                    4027,
                    1447,
                    4108,
                    2894,
                    6365,
                    6111,
                    3099,
                    3196,
                    5117,
                    763
                ],
                "line.startswith": [
                    768,
                    770,
                    2538,
                    764,
                    766
                ],
                "initialise.wrap_stream": [
                    791
                ],
                "initialise": [
                    791
                ],
                "ImportError": [
                    798
                ],
                "sys.stdin.buffer.read": [
                    814
                ],
                "sys.stdin.buffer": [
                    814
                ],
                "sys.stdin": [
                    814
                ],
                "dst": [
                    833,
                    5995,
                    5996,
                    5998,
                    815,
                    5999,
                    817,
                    5973,
                    5975,
                    828
                ],
                "d": [
                    833,
                    835,
                    837
                ],
                "src_contents.strip": [
                    848
                ],
                "assert_equivalent": [
                    856
                ],
                "assert_stable": [
                    857
                ],
                "src_node": [
                    896,
                    897,
                    912,
                    890,
                    892
                ],
                "lib2to3_parse": [
                    1081,
                    890
                ],
                "src_contents.lstrip": [
                    890
                ],
                "mode.target_versions": [
                    890,
                    893,
                    894
                ],
                "future_imports": [
                    899,
                    892
                ],
                "get_future_imports": [
                    892
                ],
                "detect_target_versions": [
                    896
                ],
                "normalize_fmt_off": [
                    897
                ],
                "LineGenerator": [
                    898
                ],
                "supports_feature": [
                    969,
                    900,
                    974,
                    910
                ],
                "mode.is_pyi": [
                    904,
                    901
                ],
                "mode.string_normalization": [
                    902,
                    919
                ],
                "elt": [
                    904,
                    914
                ],
                "EmptyLineTracker": [
                    904
                ],
                "empty_line": [
                    905,
                    913,
                    915
                ],
                "Line": [
                    5508,
                    4742,
                    905,
                    4617,
                    1932,
                    1807,
                    4883,
                    2580,
                    2584,
                    2970,
                    3356,
                    2718,
                    1951,
                    6174,
                    4769,
                    4514,
                    4131,
                    4770,
                    3237,
                    1958,
                    4897,
                    2728,
                    4776,
                    3114,
                    1707,
                    4522,
                    4903,
                    4654,
                    4905,
                    4913,
                    4658,
                    1974,
                    3512,
                    2746,
                    3642,
                    1852,
                    2623,
                    3575,
                    4898,
                    1861,
                    1989,
                    1864,
                    2889,
                    1995,
                    1999,
                    1745,
                    4817,
                    5585,
                    2004,
                    1749,
                    1877,
                    4181,
                    1880,
                    2009,
                    3930,
                    2907,
                    3291,
                    4826,
                    6103,
                    3551,
                    2660,
                    3301,
                    1767,
                    2026,
                    6124,
                    4847,
                    3313,
                    4851,
                    1910,
                    3191,
                    2936,
                    2937,
                    6138,
                    4859,
                    1916
                ],
                "after": [
                    1763,
                    1765,
                    906,
                    5099,
                    5100,
                    5070,
                    5071,
                    913,
                    914,
                    5073,
                    5075,
                    5076,
                    5078,
                    5079,
                    5081,
                    1755
                ],
                "split_line_features": [
                    920,
                    907
                ],
                "current_line": [
                    1792,
                    1800,
                    912,
                    1809,
                    914,
                    1810,
                    4881,
                    917,
                    4883,
                    4884,
                    4888,
                    4889,
                    1818,
                    4891,
                    4892,
                    1825,
                    1831,
                    4903,
                    1833,
                    1834,
                    4909,
                    1839,
                    4911,
                    4913,
                    4914,
                    1846,
                    4922,
                    4923,
                    1861,
                    1755,
                    1764,
                    1769,
                    1771,
                    1773,
                    4847,
                    1779,
                    4855,
                    4857,
                    1786,
                    1787,
                    4860,
                    4859
                ],
                "lines.visit": [
                    912
                ],
                "dst_contents.append": [
                    913,
                    922,
                    915
                ],
                "before": [
                    1795,
                    1802,
                    1804,
                    914,
                    915,
                    1826,
                    5070,
                    5071,
                    5073,
                    5080,
                    5081,
                    1755,
                    1756,
                    1761,
                    1765,
                    5099,
                    5100,
                    1774,
                    1775,
                    1778,
                    1783,
                    1785,
                    1787
                ],
                "elt.maybe_empty_lines": [
                    914
                ],
                "transform_line": [
                    916,
                    2669
                ],
                "mode.line_length": [
                    918
                ],
                "bytes": [
                    926
                ],
                "srcbuf": [
                    938,
                    939,
                    932,
                    933
                ],
                "io.BytesIO": [
                    932
                ],
                "tokenize.detect_encoding": [
                    933
                ],
                "tokenize": [
                    933
                ],
                "srcbuf.readline": [
                    933
                ],
                "srcbuf.seek": [
                    938
                ],
                "tiow": [
                    939,
                    940
                ],
                "tiow.read": [
                    940
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement_async_keywords": [
                    972,
                    948
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    976,
                    950
                ],
                "pygram.python_grammar_no_print_statement": [
                    952,
                    961
                ],
                "pygram.python_grammar": [
                    954,
                    963
                ],
                "version.is_python2": [
                    957
                ],
                "grammars": [
                    976,
                    971,
                    979,
                    967
                ],
                "grammars.append": [
                    976,
                    971
                ],
                "Grammar": [
                    943
                ],
                "src_txt": [
                    984,
                    985,
                    995,
                    990
                ],
                "grammar": [
                    987,
                    988
                ],
                "get_grammars": [
                    987
                ],
                "drv": [
                    988,
                    990
                ],
                "driver.Driver": [
                    988
                ],
                "driver": [
                    988
                ],
                "pytree.convert": [
                    988
                ],
                "pytree": [
                    988
                ],
                "result": [
                    4737,
                    4738,
                    4739,
                    3598,
                    3599,
                    3600,
                    3601,
                    3602,
                    2551,
                    4648,
                    4649,
                    4650,
                    4776,
                    4778,
                    4779,
                    4802,
                    4804,
                    4806,
                    4807,
                    990,
                    2526,
                    2528,
                    2660,
                    1004,
                    1005,
                    1006,
                    2668,
                    2679,
                    2557
                ],
                "drv.parse_string": [
                    990
                ],
                "ParseError": [
                    993
                ],
                "lineno": [
                    1000,
                    994,
                    997
                ],
                "column": [
                    1000,
                    5257,
                    994,
                    5255
                ],
                "pe.context": [
                    994
                ],
                "pe": [
                    994
                ],
                "src_txt.splitlines": [
                    995
                ],
                "faulty_line": [
                    1000,
                    997,
                    999
                ],
                "IndexError": [
                    4834,
                    998,
                    2312,
                    1546,
                    1485,
                    1490,
                    5522
                ],
                "InvalidInput": [
                    1000
                ],
                "syms.file_input": [
                    1005,
                    2358
                ],
                "node": [
                    1028,
                    1029,
                    1031,
                    1038,
                    1040,
                    5136,
                    5137,
                    5139,
                    1044,
                    1045,
                    5140,
                    5657,
                    5146,
                    5149,
                    5150,
                    1055,
                    1056,
                    5154,
                    1059,
                    1065,
                    1067,
                    5163,
                    1070,
                    1071,
                    5171,
                    1592,
                    1593,
                    5266,
                    5281,
                    5282,
                    5283,
                    5284,
                    5285,
                    5289,
                    5290,
                    5292,
                    5312,
                    5315,
                    5329,
                    5330,
                    5331,
                    5332,
                    5340,
                    5343,
                    5370,
                    5371,
                    2303,
                    2304,
                    5378,
                    5379,
                    5380,
                    5892,
                    5893,
                    5895,
                    5896,
                    5386,
                    2315,
                    5898,
                    5899,
                    5901,
                    5392,
                    5395,
                    5909,
                    5398,
                    2327,
                    2328,
                    5401,
                    2330,
                    5911,
                    2332,
                    5404,
                    5913,
                    5918,
                    2337,
                    2338,
                    2339,
                    2340,
                    5922,
                    5934,
                    5950,
                    5442,
                    5443,
                    5444,
                    5445,
                    5959,
                    5449,
                    5454,
                    5457,
                    5460,
                    1882,
                    1884,
                    5474,
                    5477,
                    5478,
                    5483,
                    1900,
                    1901,
                    1902,
                    1903,
                    1904,
                    1905,
                    1906,
                    1907,
                    1908,
                    4469,
                    4472,
                    1914,
                    1925,
                    1944,
                    1945,
                    1953,
                    1954,
                    5538,
                    1956,
                    1960,
                    1962,
                    1963,
                    1966,
                    1970,
                    1972,
                    1978,
                    1991,
                    5579,
                    2014,
                    2023,
                    2024,
                    1011,
                    5112,
                    5117
                ],
                "node.type": [
                    5378,
                    1028,
                    1029,
                    1031,
                    5392,
                    5395,
                    5140,
                    5398,
                    2330,
                    1056,
                    5281,
                    1065,
                    5312,
                    5454,
                    5329,
                    5474,
                    1901,
                    1904,
                    1906,
                    5370
                ],
                "name": [
                    1036,
                    1029,
                    1031
                ],
                "token.tok_name": [
                    1097,
                    1065,
                    1029
                ],
                "token": [
                    3584,
                    1537,
                    1538,
                    3076,
                    1029,
                    3589,
                    6149,
                    5642,
                    4110,
                    6159,
                    2064,
                    5648,
                    4114,
                    6161,
                    2068,
                    3092,
                    6162,
                    5143,
                    4122,
                    5147,
                    5149,
                    5150,
                    5666,
                    5667,
                    2086,
                    1065,
                    2090,
                    4139,
                    2103,
                    2104,
                    4154,
                    2107,
                    1085,
                    3135,
                    2112,
                    4161,
                    3139,
                    1604,
                    4186,
                    1097,
                    1100,
                    1101,
                    1102,
                    1615,
                    1103,
                    1104,
                    1105,
                    1613,
                    1108,
                    1109,
                    1110,
                    1111,
                    1112,
                    1113,
                    1114,
                    1115,
                    1116,
                    1117,
                    1118,
                    1119,
                    1120,
                    1121,
                    1632,
                    1123,
                    1124,
                    2144,
                    2148,
                    4198,
                    4700,
                    3689,
                    5226,
                    6229,
                    4703,
                    2159,
                    1648,
                    6230,
                    4210,
                    2164,
                    1658,
                    3707,
                    2172,
                    4220,
                    3198,
                    2176,
                    3204,
                    2181,
                    6234,
                    2188,
                    3213,
                    3726,
                    2193,
                    3732,
                    2197,
                    2199,
                    2202,
                    1179,
                    1180,
                    1181,
                    1182,
                    1183,
                    1184,
                    1185,
                    1186,
                    1187,
                    1188,
                    1189,
                    1190,
                    1191,
                    1192,
                    2210,
                    2215,
                    2218,
                    5291,
                    4272,
                    4273,
                    4276,
                    4788,
                    2230,
                    3254,
                    4279,
                    2234,
                    4283,
                    4796,
                    2237,
                    4797,
                    2757,
                    5318,
                    1223,
                    5321,
                    2253,
                    2259,
                    5331,
                    5332,
                    4310,
                    2271,
                    5344,
                    2277,
                    2280,
                    2284,
                    2285,
                    5358,
                    4335,
                    2288,
                    5359,
                    2292,
                    4343,
                    1277,
                    5375,
                    5380,
                    3335,
                    3336,
                    1289,
                    5395,
                    1304,
                    4888,
                    4891,
                    5405,
                    1316,
                    1326,
                    3391,
                    5443,
                    4932,
                    5444,
                    5445,
                    3399,
                    2376,
                    1355,
                    3403,
                    3407,
                    2896,
                    4945,
                    2898,
                    2205,
                    2902,
                    5464,
                    2396,
                    3421,
                    1888,
                    3425,
                    3226,
                    3432,
                    5479,
                    1901,
                    2414,
                    1904,
                    2416,
                    1394,
                    3441,
                    2420,
                    2427,
                    3230,
                    1406,
                    5502,
                    4480,
                    5504,
                    4484,
                    1414,
                    2952,
                    3979,
                    5520,
                    1427,
                    2454,
                    1946,
                    1436,
                    3999,
                    2466,
                    5539,
                    4006,
                    5544,
                    5548,
                    5552,
                    1458,
                    5558,
                    1463,
                    4029,
                    1982,
                    1471,
                    3520,
                    4033,
                    1475,
                    2501,
                    3528,
                    1492,
                    1493,
                    3542,
                    1495,
                    3036,
                    4061,
                    2018,
                    4067,
                    2020,
                    1509,
                    2021,
                    1511,
                    2132,
                    4071,
                    2029,
                    3054,
                    1520,
                    3570,
                    2547,
                    4083
                ],
                "type_repr": [
                    1056,
                    1031
                ],
                "visitf": [
                    1036,
                    1037,
                    1038
                ],
                "getattr": [
                    5922,
                    1036
                ],
                "self.visit_default": [
                    1956,
                    1925,
                    2024,
                    1963,
                    1966,
                    1040,
                    2001,
                    1972,
                    2036,
                    2007,
                    1914
                ],
                "child": [
                    5120,
                    5121,
                    5126,
                    5127,
                    5640,
                    5641,
                    5642,
                    5643,
                    5132,
                    5645,
                    5646,
                    5135,
                    5136,
                    5137,
                    5138,
                    5139,
                    5652,
                    1045,
                    1046,
                    5143,
                    5651,
                    5145,
                    5657,
                    5147,
                    5658,
                    5661,
                    5153,
                    5154,
                    1059,
                    1060,
                    5156,
                    5665,
                    5667,
                    5712,
                    5714,
                    5715,
                    5720,
                    5722,
                    5726,
                    5728,
                    5734,
                    5739,
                    5742,
                    5232,
                    5233,
                    5744,
                    5235,
                    5747,
                    5750,
                    5252,
                    5254,
                    5255,
                    5256,
                    5257,
                    5259,
                    5266,
                    5267,
                    5268,
                    5360,
                    5361,
                    5362,
                    5363,
                    5460,
                    5462,
                    5463,
                    5464,
                    4447,
                    1945,
                    1946,
                    1949,
                    1979,
                    1980,
                    1982,
                    1986,
                    1987,
                    1991,
                    1993,
                    5117
                ],
                "node.children": [
                    5379,
                    5380,
                    5266,
                    1045,
                    1945,
                    5146,
                    5401,
                    5404,
                    5657,
                    1954,
                    1059,
                    5289,
                    5290,
                    5292,
                    1978,
                    5442,
                    5315,
                    5443,
                    5444,
                    5445,
                    1991,
                    5449,
                    5457,
                    5330,
                    5331,
                    5332,
                    5460,
                    5340,
                    2014,
                    5343,
                    5477,
                    5478,
                    5483,
                    5117
                ],
                "self.visit": [
                    1954,
                    1987,
                    1060,
                    1993,
                    1046,
                    1980,
                    1949
                ],
                "Visitor": [
                    1050,
                    1852
                ],
                "tree_depth": [
                    1051
                ],
                "indent": [
                    1057,
                    1063,
                    1066,
                    1873,
                    6356,
                    1877,
                    1718,
                    6360,
                    1721,
                    6363,
                    6366,
                    1054
                ],
                "self.tree_depth": [
                    1062,
                    1058,
                    1054
                ],
                "_type": [
                    1056,
                    1057,
                    1063,
                    1065,
                    1066
                ],
                "token.tok_name.get": [
                    1065
                ],
                "node.prefix": [
                    5112,
                    1067,
                    1070
                ],
                "node.value": [
                    5899,
                    5395,
                    1071
                ],
                "DebugVisitor": [
                    1079
                ],
                "v.visit": [
                    1082
                ],
                "WHITESPACE": [
                    1906,
                    5180,
                    1085
                ],
                "token.DEDENT": [
                    5445,
                    1085
                ],
                "token.INDENT": [
                    2029,
                    5444,
                    1085
                ],
                "token.NEWLINE": [
                    5443,
                    5667,
                    3336,
                    2029,
                    1085
                ],
                "STATEMENT": [
                    1960,
                    1086
                ],
                "syms.if_stmt": [
                    1087
                ],
                "syms.while_stmt": [
                    1088
                ],
                "syms.for_stmt": [
                    1089
                ],
                "syms.try_stmt": [
                    1090
                ],
                "syms.except_clause": [
                    1091
                ],
                "syms.with_stmt": [
                    1092
                ],
                "syms.funcdef": [
                    1093
                ],
                "syms.classdef": [
                    2233,
                    1094
                ],
                "STANDALONE_COMMENT": [
                    1379,
                    1668,
                    1096,
                    1097,
                    1642,
                    5608,
                    1389,
                    4945,
                    1652,
                    2068,
                    2549,
                    1527,
                    4889,
                    4793,
                    5178,
                    5208
                ],
                "LOGIC_OPERATORS": [
                    2472,
                    1098
                ],
                "COMPARATORS": [
                    2410,
                    1099
                ],
                "token.LESS": [
                    1100
                ],
                "token.GREATER": [
                    1101
                ],
                "token.EQEQUAL": [
                    1102
                ],
                "token.NOTEQUAL": [
                    1103
                ],
                "token.LESSEQUAL": [
                    1104
                ],
                "token.GREATEREQUAL": [
                    1105
                ],
                "MATH_OPERATORS": [
                    2139,
                    1107,
                    2404
                ],
                "token.VBAR": [
                    1179,
                    1108
                ],
                "token.CIRCUMFLEX": [
                    1180,
                    1109
                ],
                "token.AMPER": [
                    1181,
                    1110
                ],
                "token.LEFTSHIFT": [
                    1182,
                    1111
                ],
                "token.RIGHTSHIFT": [
                    1112,
                    2144,
                    1183
                ],
                "token.PLUS": [
                    1184,
                    3520,
                    3584,
                    3399,
                    3570,
                    1113
                ],
                "token.MINUS": [
                    1185,
                    1114
                ],
                "token.STAR": [
                    5147,
                    1123,
                    1186,
                    1115
                ],
                "token.SLASH": [
                    1124,
                    5548,
                    1187,
                    1116
                ],
                "token.DOUBLESLASH": [
                    1188,
                    1117
                ],
                "token.PERCENT": [
                    4273,
                    1189,
                    1118
                ],
                "token.AT": [
                    1394,
                    2230,
                    1190,
                    1119
                ],
                "token.TILDE": [
                    1120,
                    1191
                ],
                "token.DOUBLESTAR": [
                    1121,
                    2018,
                    1123,
                    1192,
                    2259
                ],
                "STARS": [
                    1123,
                    1124,
                    5571,
                    5566
                ],
                "VARARGS_SPECIALS": [
                    2128,
                    2218,
                    5419,
                    1124
                ],
                "VARARGS_PARENTS": [
                    2129,
                    1125,
                    2390
                ],
                "syms.arglist": [
                    2115,
                    1126,
                    4874,
                    2157,
                    5549,
                    5556
                ],
                "syms.argument": [
                    2208,
                    5569,
                    2116,
                    2277,
                    1127,
                    4874,
                    4081,
                    4060
                ],
                "syms.trailer": [
                    1128,
                    6236,
                    1152,
                    2191
                ],
                "syms.typedargslist": [
                    4870,
                    1129,
                    2122,
                    5549,
                    5556,
                    2167,
                    5560
                ],
                "syms.varargslist": [
                    2162,
                    1130,
                    2118
                ],
                "UNPACKING_PARENTS": [
                    2129,
                    1132,
                    2390
                ],
                "syms.atom": [
                    5312,
                    5281,
                    5474,
                    2023,
                    5513,
                    2252,
                    1133,
                    5135,
                    5329,
                    5363,
                    5398,
                    5462,
                    5370
                ],
                "syms.dictsetmaker": [
                    2257,
                    4105,
                    1134
                ],
                "syms.listmaker": [
                    1697,
                    1135
                ],
                "syms.testlist_gexp": [
                    1136,
                    5372
                ],
                "syms.testlist_star_expr": [
                    1137,
                    5127,
                    2063
                ],
                "TEST_DESCENDANTS": [
                    1139,
                    1703
                ],
                "syms.test": [
                    2442,
                    1140,
                    3998
                ],
                "syms.lambdef": [
                    1141
                ],
                "syms.or_test": [
                    1142
                ],
                "syms.and_test": [
                    1143
                ],
                "syms.not_test": [
                    1144
                ],
                "syms.comparison": [
                    1145,
                    2451
                ],
                "syms.star_expr": [
                    1146,
                    2406,
                    2262,
                    5423
                ],
                "syms.expr": [
                    1147
                ],
                "syms.xor_expr": [
                    1148
                ],
                "syms.and_expr": [
                    1149
                ],
                "syms.shift_expr": [
                    2146,
                    1150
                ],
                "syms.arith_expr": [
                    1151
                ],
                "syms.term": [
                    1153
                ],
                "syms.power": [
                    2016,
                    1154,
                    4060
                ],
                "ASSIGNMENTS": [
                    1156,
                    2055
                ],
                "COMPREHENSION_PRIORITY": [
                    2440,
                    2433,
                    1172
                ],
                "COMMA_PRIORITY": [
                    5285,
                    2377,
                    5525,
                    1173,
                    4887
                ],
                "TERNARY_PRIORITY": [
                    2443,
                    1174
                ],
                "LOGIC_PRIORITY": [
                    2473,
                    1175
                ],
                "STRING_PRIORITY": [
                    1176,
                    2418
                ],
                "COMPARATOR_PRIORITY": [
                    2470,
                    2411,
                    2446,
                    1177,
                    2458
                ],
                "MATH_PRIORITIES": [
                    2408,
                    1178
                ],
                "DOT_PRIORITY": [
                    2401,
                    1194,
                    4843,
                    6191
                ],
                "depth": [
                    1793,
                    5957,
                    5926,
                    5959,
                    5911,
                    1201,
                    5938,
                    1779,
                    1780,
                    1333,
                    5941,
                    1783,
                    5944,
                    1785
                ],
                "bracket_match": [
                    1202
                ],
                "delimiters": [
                    1203
                ],
                "previous": [
                    2465,
                    2466,
                    2467,
                    2415,
                    2416,
                    1204,
                    2453,
                    2454,
                    2455,
                    2399
                ],
                "_for_loop_depths": [
                    1205
                ],
                "_lambda_argument_depths": [
                    1206
                ],
                "leaf.type": [
                    4480,
                    5504,
                    4484,
                    1289,
                    6154,
                    3726,
                    4110,
                    6159,
                    6161,
                    6165,
                    1304,
                    4632,
                    4638,
                    2080,
                    5502,
                    1316,
                    5419,
                    1458,
                    4029,
                    3135,
                    6208,
                    4929,
                    3139,
                    2501,
                    2757,
                    1223,
                    1351,
                    2376,
                    4679,
                    1355,
                    1228,
                    6215,
                    1230,
                    4943,
                    2896,
                    2902,
                    1241,
                    1242,
                    2396,
                    1379,
                    2404,
                    4067,
                    2408,
                    5608,
                    2410,
                    2414,
                    4334,
                    5614,
                    5616,
                    6256,
                    2420,
                    1527,
                    2427,
                    1277,
                    3198
                ],
                "leaf": [
                    5632,
                    6208,
                    6153,
                    6154,
                    4108,
                    4110,
                    6159,
                    6161,
                    4629,
                    6165,
                    4632,
                    4633,
                    3099,
                    4636,
                    4638,
                    4639,
                    2080,
                    2081,
                    2082,
                    3108,
                    2089,
                    2097,
                    5171,
                    5173,
                    5179,
                    3134,
                    3135,
                    1600,
                    4673,
                    5183,
                    3139,
                    4675,
                    4677,
                    6207,
                    3143,
                    4679,
                    4680,
                    4681,
                    3147,
                    4171,
                    4172,
                    6215,
                    3153,
                    3155,
                    5225,
                    6250,
                    6252,
                    5231,
                    6256,
                    5233,
                    3196,
                    3198,
                    3724,
                    3725,
                    1678,
                    3726,
                    1701,
                    3243,
                    3244,
                    1722,
                    1723,
                    4801,
                    4802,
                    4803,
                    2757,
                    1223,
                    1226,
                    1227,
                    1228,
                    1230,
                    1231,
                    1232,
                    1234,
                    1238,
                    1240,
                    1241,
                    1242,
                    1244,
                    1245,
                    1246,
                    4331,
                    4334,
                    4855,
                    4860,
                    1277,
                    4862,
                    4863,
                    4865,
                    4868,
                    4869,
                    4870,
                    1289,
                    1290,
                    3851,
                    4874,
                    4879,
                    1304,
                    1316,
                    5419,
                    2348,
                    2349,
                    4909,
                    5422,
                    4914,
                    4916,
                    4917,
                    4919,
                    5436,
                    4928,
                    4929,
                    4930,
                    1351,
                    2376,
                    1355,
                    2894,
                    4943,
                    1360,
                    1361,
                    2896,
                    4944,
                    1364,
                    1365,
                    1366,
                    1367,
                    2390,
                    2902,
                    3416,
                    3417,
                    2396,
                    2397,
                    2398,
                    4955,
                    4960,
                    5464,
                    1379,
                    2404,
                    2405,
                    2406,
                    4963,
                    1384,
                    2408,
                    2410,
                    4973,
                    2414,
                    4974,
                    5487,
                    5488,
                    4979,
                    2420,
                    2424,
                    2425,
                    2426,
                    2427,
                    4476,
                    2430,
                    2431,
                    4480,
                    4990,
                    5502,
                    5503,
                    2436,
                    2437,
                    2438,
                    4484,
                    5504,
                    5505,
                    2442,
                    5003,
                    2445,
                    5007,
                    2449,
                    2450,
                    2451,
                    5011,
                    2461,
                    2462,
                    2463,
                    5026,
                    1447,
                    1448,
                    2472,
                    1457,
                    1458,
                    4027,
                    4029,
                    5055,
                    2501,
                    5064,
                    2001,
                    2007,
                    4065,
                    5602,
                    4067,
                    5091,
                    6113,
                    6114,
                    5607,
                    5608,
                    6115,
                    6118,
                    6121,
                    5612,
                    2029,
                    2030,
                    5614,
                    2032,
                    2033,
                    2034,
                    5615,
                    2036,
                    5616,
                    1526,
                    1527,
                    5621,
                    5630,
                    5631
                ],
                "token.COMMENT": [
                    1888,
                    2086,
                    1223,
                    1648,
                    4945,
                    2547
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    1226
                ],
                "self.maybe_decrement_after_lambda_arguments": [
                    1227
                ],
                "CLOSING_BRACKETS": [
                    6208,
                    4679,
                    6155,
                    1228,
                    3213,
                    1614,
                    5614,
                    5616,
                    6204,
                    2066,
                    2067,
                    2068,
                    6165,
                    4632,
                    1433,
                    1468,
                    2399
                ],
                "self.depth": [
                    1315,
                    1318,
                    1288,
                    1306,
                    1292,
                    1229,
                    1230,
                    1326,
                    1232,
                    1233,
                    1708,
                    1718,
                    1305,
                    1242,
                    1243,
                    1278,
                    1279
                ],
                "opening_bracket": [
                    5512,
                    5513,
                    5514,
                    5631,
                    4787,
                    4671,
                    4675,
                    4806,
                    4680,
                    4683,
                    1230,
                    1231,
                    4692,
                    4693,
                    4694,
                    4700,
                    4701,
                    5599,
                    5611,
                    5612,
                    5613,
                    4735
                ],
                "self.bracket_match.pop": [
                    1230
                ],
                "self.bracket_match": [
                    1326,
                    1242,
                    1250,
                    1230
                ],
                "leaf.opening_bracket": [
                    6208,
                    4680,
                    1231,
                    4633,
                    5631
                ],
                "leaf.bracket_depth": [
                    4868,
                    4869,
                    1232,
                    1458,
                    1527
                ],
                "delim": [
                    1234,
                    1235,
                    1236,
                    1238,
                    1239,
                    1240
                ],
                "is_split_before_delimiter": [
                    1234
                ],
                "self.previous": [
                    1234,
                    1235,
                    1236,
                    1238,
                    1244
                ],
                "self.delimiters": [
                    1258,
                    1265,
                    1236,
                    1269,
                    1240
                ],
                "id": [
                    1536,
                    2824,
                    1545,
                    1673,
                    1678,
                    3343,
                    3344,
                    4879,
                    5520,
                    1683,
                    1684,
                    1593,
                    3139,
                    4679,
                    3153,
                    3155,
                    1236,
                    1240,
                    4839,
                    4713,
                    5615,
                    5621,
                    5625
                ],
                "is_split_after_delimiter": [
                    1238
                ],
                "OPENING_BRACKETS": [
                    6215,
                    2154,
                    6154,
                    6256,
                    2065,
                    5617,
                    2067,
                    2100,
                    6162,
                    1241,
                    2266,
                    6204,
                    4638,
                    6239
                ],
                "BRACKET": [
                    2064,
                    2065,
                    1242,
                    2066
                ],
                "self.maybe_increment_lambda_arguments": [
                    1245
                ],
                "self.maybe_increment_for_loop_variable": [
                    1246
                ],
                "max": [
                    4601,
                    1258
                ],
                "self.delimiters.items": [
                    1258
                ],
                "priority": [
                    1268,
                    1269
                ],
                "self.max_delimiter_priority": [
                    1268
                ],
                "sum": [
                    1269
                ],
                "self.delimiters.values": [
                    1269
                ],
                "token.NAME": [
                    1289,
                    5642,
                    3213,
                    5648,
                    6161,
                    5395,
                    2454,
                    1304,
                    1946,
                    3999,
                    2466,
                    4276,
                    4932,
                    1615,
                    3407,
                    1492,
                    1495,
                    4061,
                    2148,
                    2280,
                    3432,
                    2288,
                    2420,
                    1277,
                    1406
                ],
                "leaf.value": [
                    4480,
                    5505,
                    2436,
                    4484,
                    1290,
                    2442,
                    5003,
                    2445,
                    5007,
                    2449,
                    5011,
                    1304,
                    2461,
                    2082,
                    5026,
                    5630,
                    2472,
                    5436,
                    5055,
                    4930,
                    1351,
                    3143,
                    5064,
                    3147,
                    4944,
                    2902,
                    6114,
                    5091,
                    6115,
                    5607,
                    4973,
                    4974,
                    2032,
                    2033,
                    4979,
                    2424,
                    1277,
                    4990,
                    5503
                ],
                "self._for_loop_depths.append": [
                    1279
                ],
                "self._for_loop_depths": [
                    1288,
                    1287,
                    1293,
                    1279
                ],
                "self._for_loop_depths.pop": [
                    1293
                ],
                "self._lambda_argument_depths.append": [
                    1306
                ],
                "self._lambda_argument_depths": [
                    1306,
                    1315,
                    1314,
                    1319
                ],
                "token.COLON": [
                    1316,
                    2090,
                    1355,
                    4110,
                    3407,
                    1427,
                    2132,
                    2103,
                    2104,
                    2271
                ],
                "self._lambda_argument_depths.pop": [
                    1319
                ],
                "self.bracket_match.get": [
                    1326
                ],
                "token.RSQB": [
                    2064,
                    6234,
                    1326
                ],
                "leaves": [
                    6145,
                    6146,
                    6149,
                    6152,
                    6153,
                    4780,
                    4782,
                    4788,
                    1334,
                    4535,
                    1719,
                    4792,
                    4793,
                    1720,
                    1722,
                    4796,
                    4797,
                    4801,
                    4310,
                    4313
                ],
                "comments": [
                    1336,
                    1555,
                    1556
                ],
                "bracket_tracker": [
                    1337
                ],
                "BracketTracker": [
                    1337,
                    5482
                ],
                "inside_brackets": [
                    1338,
                    4954
                ],
                "should_explode": [
                    1339,
                    4806
                ],
                "has_value": [
                    1352,
                    1351
                ],
                "BRACKETS": [
                    2361,
                    2067,
                    1351
                ],
                "leaf.value.strip": [
                    1351
                ],
                "self.is_class_paren_empty": [
                    1355
                ],
                "self.leaves": [
                    1667,
                    1413,
                    1544,
                    1672,
                    1423,
                    1682,
                    1427,
                    1428,
                    1684,
                    1431,
                    1569,
                    1447,
                    1535,
                    1456,
                    1457,
                    1585,
                    1586,
                    1463,
                    1592,
                    1719,
                    1468,
                    1470,
                    1600,
                    1475,
                    1604,
                    1731,
                    1610,
                    1356,
                    1357,
                    1484,
                    1612,
                    1613,
                    1489,
                    1615,
                    1618,
                    1621,
                    1622,
                    1367,
                    1623,
                    1627,
                    1628,
                    1629,
                    1379,
                    1507,
                    1509,
                    1510,
                    1511,
                    1512,
                    1389,
                    1520,
                    1521,
                    1394,
                    1651,
                    1526,
                    1399,
                    1656,
                    1406,
                    1407
                ],
                "preformatted": [
                    1384,
                    1363,
                    1357
                ],
                "leaf.prefix": [
                    4960,
                    6114,
                    4963,
                    2501,
                    5607,
                    2348,
                    1360,
                    5173,
                    4955
                ],
                "whitespace": [
                    1360
                ],
                "self.is_complex_subscript": [
                    1361
                ],
                "self.inside_brackets": [
                    1433,
                    1363,
                    1709
                ],
                "self.bracket_tracker.mark": [
                    1364
                ],
                "self.bracket_tracker": [
                    1690,
                    1643,
                    1364,
                    1375
                ],
                "self.maybe_remove_trailing_comma": [
                    1365
                ],
                "self.append_comment": [
                    1366
                ],
                "self.leaves.append": [
                    1367
                ],
                "self.bracket_tracker.depth": [
                    1375
                ],
                "self.is_comment": [
                    1376
                ],
                "self.append": [
                    1384
                ],
                "type": [
                    3204,
                    3589,
                    5380,
                    6149,
                    3979,
                    3213,
                    4114,
                    1427,
                    3732,
                    4888,
                    4889,
                    3226,
                    4122,
                    3230,
                    3999,
                    5667,
                    4006,
                    4139,
                    5558,
                    1463,
                    4793,
                    4154,
                    1468,
                    4796,
                    3391,
                    3520,
                    4033,
                    1475,
                    1604,
                    5443,
                    5444,
                    5445,
                    3528,
                    1613,
                    1615,
                    2898,
                    5331,
                    5332,
                    2517,
                    3542,
                    4310,
                    3036,
                    4061,
                    2018,
                    1509,
                    4198,
                    1511,
                    4071,
                    1389,
                    3054,
                    1520,
                    3441,
                    1394,
                    3570,
                    4083,
                    5617,
                    1406,
                    5375
                ],
                "property": [
                    1410,
                    1480,
                    1417,
                    1386,
                    1515,
                    1391,
                    1396,
                    1401,
                    1499,
                    5820
                ],
                "is_import": [
                    1399
                ],
                "self.is_class": [
                    1508,
                    1413
                ],
                "token.DOT": [
                    6149,
                    1414,
                    3432,
                    2284,
                    2253,
                    2285,
                    6159,
                    4272,
                    6162,
                    2292,
                    2197,
                    2230,
                    5464,
                    2396,
                    3230
                ],
                "range": [
                    4792,
                    5873,
                    1414
                ],
                "closer": [
                    1446,
                    1428,
                    1431,
                    1433,
                    1436,
                    1470,
                    1471
                ],
                "close_index": [
                    1475,
                    1456,
                    1457,
                    1429,
                    1463,
                    1432,
                    1468,
                    1469,
                    1470
                ],
                "closer.type": [
                    1433,
                    1436,
                    1471
                ],
                "token.RPAR": [
                    5504,
                    1538,
                    4484,
                    2064,
                    2193,
                    3226,
                    1436,
                    5405,
                    5150,
                    5291,
                    1471,
                    5321,
                    5332,
                    6229,
                    3421,
                    4703,
                    1632,
                    5344,
                    2021,
                    4198,
                    1511,
                    5479,
                    5359,
                    4210,
                    4343,
                    1658
                ],
                "opener": [
                    1448,
                    1446
                ],
                "closer.opening_bracket": [
                    1446
                ],
                "_open_index": [
                    1457,
                    1447
                ],
                "commas": [
                    1465,
                    1459,
                    1460,
                    1455
                ],
                "comma_depth": [
                    1456,
                    1458
                ],
                "bracket_depth": [
                    1456
                ],
                "token.COMMA": [
                    1537,
                    5380,
                    2181,
                    3589,
                    2188,
                    5520,
                    2068,
                    3732,
                    4888,
                    4122,
                    4891,
                    2205,
                    4139,
                    1458,
                    4788,
                    5558,
                    1463,
                    2107,
                    4796,
                    4029,
                    4797,
                    1475,
                    1604,
                    3139,
                    2376,
                    3403,
                    1613,
                    3542,
                    3425,
                    2159,
                    4083,
                    2164,
                    4220,
                    5375
                ],
                "first_leaf": [
                    1484,
                    1773,
                    1774,
                    1776,
                    1492,
                    1493
                ],
                "second_leaf": [
                    1489,
                    1491,
                    1494,
                    1495,
                    1496
                ],
                "first_leaf.type": [
                    1492,
                    1493
                ],
                "first_leaf.value": [
                    1492
                ],
                "token.ASYNC": [
                    2427,
                    2420,
                    1493,
                    1982
                ],
                "second_leaf.type": [
                    1495
                ],
                "second_leaf.value": [
                    1496
                ],
                "token.LPAR": [
                    4480,
                    3204,
                    3726,
                    2064,
                    2193,
                    5143,
                    5149,
                    5405,
                    2215,
                    5291,
                    4279,
                    4154,
                    2234,
                    4283,
                    2237,
                    3391,
                    4161,
                    5318,
                    5331,
                    4700,
                    5344,
                    2020,
                    1509,
                    5479,
                    5358,
                    4335,
                    3441,
                    5502
                ],
                "token.STRING": [
                    3076,
                    6149,
                    3335,
                    2952,
                    3979,
                    4114,
                    3092,
                    5666,
                    5539,
                    4006,
                    3254,
                    3135,
                    4033,
                    2757,
                    3528,
                    2896,
                    2898,
                    2902,
                    4310,
                    4186,
                    3036,
                    4071,
                    2280,
                    3689,
                    1901,
                    2414,
                    3054,
                    1520,
                    2416,
                    3707,
                    3198
                ],
                "value.startswith": [
                    1521
                ],
                "sys.maxsize": [
                    4848,
                    6356,
                    1524,
                    6363
                ],
                "depth_limit": [
                    1527
                ],
                "ignored_ids": [
                    1536,
                    1545,
                    1533,
                    1560
                ],
                "last_leaf": [
                    1536,
                    1537,
                    1538,
                    4833,
                    4839,
                    1544,
                    1545,
                    1672,
                    1673,
                    5519,
                    5520,
                    1656,
                    1658,
                    1659,
                    1660,
                    1661,
                    1535
                ],
                "ignored_ids.add": [
                    1536,
                    1545
                ],
                "last_leaf.type": [
                    5520,
                    1537,
                    1538,
                    1658
                ],
                "last_leaf.value": [
                    1538,
                    1659
                ],
                "comment_seen": [
                    1554,
                    1564,
                    1558
                ],
                "leaf_id": [
                    1560,
                    1555
                ],
                "self.comments.items": [
                    1555
                ],
                "self.comments": [
                    1731,
                    1673,
                    1678,
                    1555,
                    1683,
                    1684,
                    1593,
                    1724
                ],
                "comment": [
                    1668,
                    1669,
                    1673,
                    1556,
                    1557,
                    1559,
                    5246,
                    4385,
                    4386,
                    5173,
                    5174,
                    1593,
                    1594,
                    5178,
                    1724,
                    1725,
                    5190,
                    5192,
                    5210,
                    1884,
                    1887,
                    1888,
                    5215,
                    1890,
                    6118,
                    6119,
                    1897,
                    1642,
                    1645,
                    1648,
                    1652,
                    1653,
                    2550,
                    2553,
                    5243,
                    5244,
                    1662
                ],
                "is_type_comment": [
                    1594,
                    1557,
                    1662,
                    1559
                ],
                "first_line": [
                    4166,
                    4173,
                    4175,
                    4208,
                    1585,
                    4147,
                    1588,
                    4159
                ],
                "next": [
                    1985,
                    6152,
                    6155,
                    1585,
                    1586,
                    6162,
                    1720
                ],
                "l.lineno": [
                    1585,
                    1586
                ],
                "l": [
                    2662,
                    2663,
                    2670,
                    1585,
                    1586,
                    4818,
                    4788,
                    4819,
                    4820
                ],
                "last_line": [
                    4224,
                    3715,
                    3716,
                    3748,
                    3749,
                    3750,
                    4207,
                    4208,
                    1586,
                    1588,
                    3734,
                    3735,
                    3736,
                    4215,
                    3740,
                    3741,
                    4222
                ],
                "reversed": [
                    4673,
                    1586,
                    6097,
                    6111
                ],
                "self.comments.get": [
                    1593,
                    1678
                ],
                "any": [
                    1600,
                    4788,
                    2757,
                    1702
                ],
                "is_multiline_string": [
                    1600,
                    5153,
                    6243,
                    2030
                ],
                "self.is_import": [
                    1611
                ],
                "closing.type": [
                    1632,
                    1614
                ],
                "closing": [
                    1632,
                    1614
                ],
                "self.remove_trailing_comma": [
                    1636
                ],
                "comment.type": [
                    1888,
                    1668,
                    1642,
                    1648,
                    1652,
                    5178
                ],
                "self.bracket_tracker.any_open_brackets": [
                    1643
                ],
                "comment.prefix": [
                    1653,
                    1645,
                    1669
                ],
                "last_leaf.parent": [
                    1660,
                    1661
                ],
                "last_leaf.parent.leaves": [
                    1661
                ],
                "append": [
                    1673
                ],
                "self.comments.setdefault": [
                    1673,
                    1684
                ],
                "trailing_comma": [
                    1682,
                    1683
                ],
                "self.leaves.pop": [
                    1682
                ],
                "trailing_comma_comments": [
                    1683,
                    1685
                ],
                "self.comments.pop": [
                    1683
                ],
                "extend": [
                    1684
                ],
                "open_lsqb": [
                    1690,
                    1691,
                    1694
                ],
                "self.bracket_tracker.get_open_lsqb": [
                    1690
                ],
                "subscript_start": [
                    1696,
                    1697,
                    1700,
                    1701,
                    1702,
                    1703,
                    1694
                ],
                "open_lsqb.next_sibling": [
                    1694
                ],
                "subscript_start.type": [
                    1697,
                    1700
                ],
                "syms.subscriptlist": [
                    2244,
                    1700,
                    2092
                ],
                "child_towards": [
                    1701
                ],
                "n.type": [
                    5539,
                    1703,
                    5544,
                    5548,
                    5552,
                    5556,
                    5560
                ],
                "n": [
                    5538,
                    5539,
                    5540,
                    1703,
                    5192,
                    5544,
                    5545,
                    5548,
                    5549,
                    5552,
                    5556,
                    5557,
                    5558,
                    5560,
                    5565
                ],
                "subscript_start.pre_order": [
                    1703
                ],
                "self.should_explode": [
                    1710
                ],
                "iter": [
                    1978,
                    1719
                ],
                "first": [
                    5289,
                    5291,
                    5294,
                    6197,
                    1720,
                    1721,
                    6204,
                    6208,
                    5187,
                    5188,
                    5189,
                    5190,
                    5315,
                    5317,
                    5318,
                    5319,
                    6243,
                    5477,
                    5479
                ],
                "res": [
                    2304,
                    2305,
                    2306,
                    2307,
                    2310,
                    1721,
                    1723,
                    1725,
                    1727
                ],
                "first.prefix": [
                    1721,
                    5189,
                    5190
                ],
                "first.value": [
                    1721,
                    5294,
                    5319
                ],
                "itertools.chain.from_iterable": [
                    1724
                ],
                "itertools.chain": [
                    1724
                ],
                "itertools": [
                    1724
                ],
                "self.comments.values": [
                    1724
                ],
                "previous_line": [
                    1745
                ],
                "previous_after": [
                    1746
                ],
                "previous_defs": [
                    1747
                ],
                "self._maybe_empty_lines": [
                    1755
                ],
                "self.previous_line": [
                    1760,
                    1793,
                    1824,
                    1825,
                    1764,
                    1798,
                    1799,
                    1831,
                    1833,
                    1834,
                    1839,
                    1811,
                    1815,
                    1818,
                    1819,
                    1790,
                    1791
                ],
                "self.previous_after": [
                    1761,
                    1763
                ],
                "max_allowed": [
                    1768,
                    1770,
                    1775
                ],
                "current_line.depth": [
                    1825,
                    1831,
                    1769,
                    1810,
                    1779,
                    1846,
                    1818
                ],
                "current_line.leaves": [
                    4888,
                    4889,
                    1771,
                    1773
                ],
                "first_leaf.prefix.count": [
                    1774
                ],
                "first_leaf.prefix": [
                    1776,
                    1774
                ],
                "self.previous_defs": [
                    1810,
                    1780,
                    1781
                ],
                "self.previous_defs.pop": [
                    1781
                ],
                "current_line.is_decorator": [
                    1809,
                    1786
                ],
                "current_line.is_def": [
                    1786,
                    1839
                ],
                "current_line.is_class": [
                    1833,
                    1786
                ],
                "self._maybe_empty_lines_for_class_or_def": [
                    1787
                ],
                "self.previous_line.is_import": [
                    1791
                ],
                "current_line.is_import": [
                    1792
                ],
                "self.previous_line.depth": [
                    1793,
                    1818,
                    1831,
                    1825
                ],
                "self.previous_line.is_class": [
                    1833,
                    1819,
                    1799
                ],
                "current_line.is_triple_quoted_string": [
                    1800
                ],
                "self.previous_defs.append": [
                    1810
                ],
                "self.previous_line.is_decorator": [
                    1815
                ],
                "self.previous_line.is_def": [
                    1819,
                    1839
                ],
                "self.previous_line.is_comment": [
                    1824
                ],
                "newlines": [
                    2519,
                    1832,
                    1836,
                    1838,
                    1841,
                    1843,
                    1845,
                    1846,
                    1847,
                    1848
                ],
                "current_line.is_stub_class": [
                    1834
                ],
                "self.previous_line.is_stub_class": [
                    1834
                ],
                "normalize_strings": [
                    2672,
                    2715,
                    1860,
                    2599
                ],
                "remove_u_prefix": [
                    4977,
                    1862
                ],
                "self.current_line": [
                    1890,
                    1897,
                    2031,
                    1872,
                    1873,
                    1907,
                    1876,
                    1877,
                    2005,
                    1883,
                    1887
                ],
                "self.current_line.depth": [
                    1873,
                    2031
                ],
                "complete_line": [
                    1876,
                    1877,
                    1878
                ],
                "complete_line.depth": [
                    1877
                ],
                "any_open_brackets": [
                    1883,
                    1900,
                    1885
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1883,
                    2005
                ],
                "self.current_line.bracket_tracker": [
                    1883,
                    2005
                ],
                "generate_comments": [
                    1884
                ],
                "self.current_line.append": [
                    1897,
                    1890,
                    1907,
                    1887
                ],
                "self.line": [
                    1921,
                    1891,
                    1895,
                    1928,
                    1992,
                    1898,
                    1965,
                    1997,
                    1967,
                    2002,
                    1971,
                    2006,
                    1976,
                    1913,
                    1947
                ],
                "normalize_prefix": [
                    4819,
                    1900,
                    4782
                ],
                "self.normalize_strings": [
                    3077,
                    3850,
                    1901
                ],
                "normalize_string_prefix": [
                    1902
                ],
                "self.remove_u_prefix": [
                    1902
                ],
                "normalize_string_quotes": [
                    2034,
                    3851,
                    3078,
                    1903
                ],
                "token.NUMBER": [
                    1904,
                    2280,
                    5544,
                    2199
                ],
                "normalize_numeric_literal": [
                    1905
                ],
                "visit_default": [
                    1908
                ],
                "super": [
                    1908
                ],
                "normalize_invisible_parens": [
                    1944,
                    5121
                ],
                "parens": [
                    1944
                ],
                "child.type": [
                    5120,
                    5127,
                    5642,
                    5645,
                    5135,
                    5651,
                    5658,
                    5462,
                    5143,
                    1946,
                    5147,
                    1982
                ],
                "child.value": [
                    5145,
                    1946,
                    5643,
                    5156
                ],
                "keywords": [
                    1946
                ],
                "is_stub_suite": [
                    1953,
                    1970
                ],
                "is_suite_like": [
                    1960,
                    1961
                ],
                "node.parent": [
                    2338,
                    2339,
                    1960,
                    2315,
                    1970,
                    4469,
                    4472
                ],
                "node.parent.type": [
                    1960,
                    4472
                ],
                "is_stub_body": [
                    5449,
                    1962
                ],
                "children": [
                    5640,
                    1985,
                    1978,
                    1979
                ],
                "internal_stmt": [
                    1985,
                    1986
                ],
                "internal_stmt.children": [
                    1986
                ],
                "_operator": [
                    2014
                ],
                "operand": [
                    2016,
                    2017,
                    2018,
                    2022,
                    2023,
                    2014
                ],
                "operand.type": [
                    2016
                ],
                "operand.children": [
                    2017,
                    2018
                ],
                "lpar": [
                    5344,
                    2020,
                    2023,
                    5358,
                    5363,
                    5404,
                    5405,
                    5343
                ],
                "rpar": [
                    5344,
                    2021,
                    2023,
                    5359,
                    5363,
                    5404,
                    5405,
                    5343
                ],
                "index": [
                    6113,
                    5602,
                    2533,
                    2022,
                    2023,
                    5125,
                    6121,
                    5200,
                    5617,
                    2546,
                    5149,
                    5202,
                    5362,
                    5365,
                    6096,
                    6098,
                    6099,
                    5117
                ],
                "operand.remove": [
                    2022
                ],
                "node.insert_child": [
                    5149,
                    2023
                ],
                "prev_siblings_are": [
                    2028,
                    2332
                ],
                "leaf.parent": [
                    2437,
                    2438,
                    2442,
                    2450,
                    2451,
                    2462,
                    2463,
                    2081,
                    2472,
                    5419,
                    5422,
                    4928,
                    2397,
                    2398,
                    2405,
                    2406,
                    2029,
                    2425,
                    2426
                ],
                "syms.simple_stmt": [
                    5658,
                    2029,
                    5454
                ],
                "prefix": [
                    3072,
                    3081,
                    5007,
                    3089,
                    5012,
                    3868,
                    3869,
                    3871,
                    5026,
                    5029,
                    2355,
                    5055,
                    5189,
                    5190,
                    3147,
                    3148,
                    3151,
                    3032,
                    3034,
                    3675,
                    5210,
                    4573,
                    3038,
                    2527,
                    4576,
                    6368,
                    4579,
                    2533,
                    3686,
                    3559,
                    3565,
                    2031,
                    2032,
                    5360,
                    3699,
                    5364,
                    3062,
                    3705,
                    3071
                ],
                "docstring": [
                    2032,
                    2033,
                    6354,
                    6350
                ],
                "fix_docstring": [
                    2032
                ],
                "self.visit_stmt": [
                    2040
                ],
                "\u00d8": [
                    2049,
                    2051,
                    2052,
                    2053,
                    2054,
                    2055,
                    2057,
                    2058,
                    2041
                ],
                "self.visit_assert_stmt": [
                    2042
                ],
                "self.visit_if_stmt": [
                    2043
                ],
                "self.visit_while_stmt": [
                    2046
                ],
                "self.visit_for_stmt": [
                    2047
                ],
                "self.visit_try_stmt": [
                    2048
                ],
                "self.visit_except_clause": [
                    2051
                ],
                "self.visit_with_stmt": [
                    2052
                ],
                "self.visit_funcdef": [
                    2053
                ],
                "self.visit_classdef": [
                    2054
                ],
                "self.visit_expr_stmt": [
                    2055
                ],
                "self.visit_return_stmt": [
                    2056
                ],
                "self.visit_import_from": [
                    2057
                ],
                "self.visit_del_stmt": [
                    2058
                ],
                "self.visit_async_funcdef": [
                    2059
                ],
                "self.visit_async_stmt": [
                    2059
                ],
                "self.visit_decorated": [
                    2060
                ],
                "self.visit_decorators": [
                    2060
                ],
                "IMPLICIT_TUPLE": [
                    5378,
                    2063
                ],
                "syms.testlist": [
                    2063
                ],
                "syms.exprlist": [
                    2063
                ],
                "token.LSQB": [
                    2064,
                    2202
                ],
                "token.LBRACE": [
                    2064
                ],
                "token.RBRACE": [
                    2064,
                    6230
                ],
                "BRACKET.keys": [
                    2065
                ],
                "BRACKET.values": [
                    2066
                ],
                "ALWAYS_NO_SPACE": [
                    2083,
                    2068
                ],
                "SPACE": [
                    2245,
                    2290,
                    2134,
                    2078,
                    2298,
                    2110
                ],
                "DOUBLESPACE": [
                    2087,
                    2079
                ],
                "t": [
                    2193,
                    2197,
                    2202,
                    2080,
                    2210,
                    2083,
                    2086,
                    2090,
                    2103,
                    2234,
                    4929,
                    4932,
                    2253,
                    4943,
                    4945,
                    2280,
                    2284,
                    2288,
                    2172
                ],
                "p.type": [
                    2184,
                    2191,
                    2295,
                    2208,
                    2090,
                    2221,
                    5423,
                    2225,
                    5431,
                    2233,
                    2240,
                    4934,
                    4935,
                    2252,
                    2257,
                    2262,
                    2283,
                    2157,
                    2162,
                    2167
                ],
                "syms.subscript": [
                    2240,
                    2272,
                    2091,
                    2133
                ],
                "syms.sliceop": [
                    2240,
                    2273,
                    2093,
                    2133,
                    2295
                ],
                "prev": [
                    2176,
                    2179,
                    2181,
                    2186,
                    2196,
                    2205,
                    2213,
                    2218,
                    2097,
                    2098,
                    2226,
                    5179,
                    5180,
                    2237,
                    2242,
                    2253,
                    2259,
                    2264,
                    2154,
                    2285,
                    2159,
                    2164,
                    2292,
                    2169,
                    2173
                ],
                "leaf.prev_sibling": [
                    2097,
                    2430,
                    2431
                ],
                "prevp": [
                    2187,
                    2188,
                    2198,
                    2199,
                    2214,
                    2215,
                    2099,
                    2100,
                    2229,
                    2230,
                    2104,
                    2107,
                    2112,
                    2113,
                    2114,
                    2122,
                    2126,
                    2128,
                    2129,
                    2132,
                    2133,
                    2137,
                    2138,
                    2139,
                    2265,
                    2266,
                    2269,
                    2271,
                    2144,
                    2145,
                    2146,
                    2147,
                    2148,
                    2149,
                    2277
                ],
                "preceding_leaf": [
                    2214,
                    2187,
                    2099,
                    2229,
                    2198,
                    2265,
                    5179
                ],
                "prevp.type": [
                    2112,
                    2144,
                    2277,
                    2215,
                    2139,
                    2188,
                    2128,
                    2100,
                    2132,
                    2230,
                    2199,
                    2104,
                    2266,
                    2107,
                    2271
                ],
                "complex_subscript": [
                    2249,
                    2107,
                    2134
                ],
                "token.EQUAL": [
                    2112,
                    2176,
                    2210,
                    4067,
                    2277,
                    2218,
                    3407,
                    2172
                ],
                "prevp.parent": [
                    2113,
                    2114,
                    2145,
                    2146,
                    2122,
                    2133,
                    2137,
                    2138,
                    2269
                ],
                "prevp.parent.type": [
                    2114,
                    2146,
                    2122,
                    2133,
                    2138
                ],
                "syms.parameters": [
                    2157,
                    2117
                ],
                "prevp.prefix": [
                    2126
                ],
                "is_vararg": [
                    2129,
                    4874,
                    2390,
                    4870
                ],
                "syms.factor": [
                    2138,
                    2406,
                    2262
                ],
                "prevp.prev_sibling": [
                    2147,
                    2148,
                    2149
                ],
                "prevp.prev_sibling.type": [
                    2148
                ],
                "prevp.prev_sibling.value": [
                    2149
                ],
                "prev.type": [
                    2176,
                    2181,
                    2154,
                    2218,
                    2285,
                    2159,
                    2259,
                    2164,
                    2292,
                    2205,
                    2237,
                    5180,
                    2173
                ],
                "syms.tname": [
                    2184,
                    2173
                ],
                "prev.prefix": [
                    2179
                ],
                "syms.decorator": [
                    2221
                ],
                "syms.dotted_name": [
                    2225,
                    2398
                ],
                "p.parent": [
                    5426,
                    2243,
                    2244,
                    5429
                ],
                "p.parent.type": [
                    2244
                ],
                "prevp_parent": [
                    2277,
                    2269,
                    2270,
                    2271
                ],
                "prevp_parent.type": [
                    2277,
                    2271
                ],
                "syms.import_from": [
                    4935,
                    5513,
                    5673,
                    2283,
                    5140,
                    2398
                ],
                "node.prev_sibling": [
                    2304,
                    2332
                ],
                "res.leaves": [
                    2310
                ],
                "tokens": [
                    2330,
                    2324,
                    2332,
                    2326
                ],
                "descendant": [
                    2337
                ],
                "ancestor": [
                    2338
                ],
                "same_prefix": [
                    2355,
                    2348
                ],
                "container": [
                    5252,
                    5225,
                    5226,
                    5227,
                    2349,
                    2350,
                    2351,
                    5231,
                    5232,
                    5237,
                    5238,
                    5243,
                    2364,
                    2365
                ],
                "parent": [
                    5188,
                    5284,
                    4105,
                    4554,
                    4555,
                    2351,
                    2352,
                    2991,
                    4560,
                    2355,
                    5203,
                    5205,
                    2358,
                    5296,
                    5365,
                    2361,
                    2364
                ],
                "container.parent": [
                    2351
                ],
                "parent.children": [
                    2355
                ],
                "parent.type": [
                    5284,
                    2358
                ],
                "parent.prev_sibling": [
                    2361
                ],
                "parent.prev_sibling.type": [
                    2361
                ],
                "leaf.parent.type": [
                    2406,
                    2438,
                    2442,
                    2451,
                    2426,
                    2398,
                    2463
                ],
                "previous.type": [
                    2416,
                    2466,
                    2454,
                    2399
                ],
                "syms.comp_for": [
                    2426
                ],
                "syms.old_comp_for": [
                    2426
                ],
                "leaf.prev_sibling.value": [
                    2431
                ],
                "syms.comp_if": [
                    2438
                ],
                "syms.old_comp_if": [
                    2438
                ],
                "syms.comp_op": [
                    2451,
                    2463
                ],
                "previous.value": [
                    2467,
                    2455
                ],
                "FMT_OFF": [
                    5174,
                    5113,
                    5246,
                    2478
                ],
                "FMT_ON": [
                    5244,
                    2479
                ],
                "pc": [
                    5112,
                    5113,
                    2501,
                    2502
                ],
                "list_comments": [
                    5112,
                    5243,
                    5173,
                    2501
                ],
                "token.ENDMARKER": [
                    5226,
                    2501
                ],
                "pc.type": [
                    2502
                ],
                "pc.value": [
                    5113,
                    2502
                ],
                "pc.newlines": [
                    2502
                ],
                "consumed": [
                    2520,
                    2553,
                    2530,
                    2534
                ],
                "ProtoComment": [
                    2552,
                    2524,
                    2526
                ],
                "nlines": [
                    2537,
                    2531,
                    2556,
                    2553
                ],
                "ignored_lines": [
                    2546,
                    2532,
                    2543
                ],
                "prefix.split": [
                    2533
                ],
                "line.lstrip": [
                    6358,
                    2535
                ],
                "line.endswith": [
                    2542
                ],
                "is_endmarker": [
                    2546
                ],
                "comment_type": [
                    2553,
                    2547,
                    2549
                ],
                "make_comment": [
                    2550
                ],
                "result.append": [
                    4802,
                    4804,
                    2551
                ],
                "lru_cache": [
                    5753,
                    2523,
                    5685
                ],
                "content": [
                    2568,
                    2569,
                    2572,
                    2573,
                    2574,
                    2575,
                    2576
                ],
                "content.rstrip": [
                    2568
                ],
                "line.is_comment": [
                    2591
                ],
                "line_str": [
                    2595,
                    2663,
                    6129,
                    6130,
                    2612,
                    6132,
                    6133
                ],
                "line_to_string": [
                    6130,
                    2595
                ],
                "Type": [
                    2597
                ],
                "StringTransformer": [
                    2866,
                    3268,
                    2597,
                    3174
                ],
                "ST": [
                    2599
                ],
                "string_merge": [
                    2649,
                    2601,
                    2618,
                    2639
                ],
                "init_st": [
                    2601,
                    2602,
                    2603,
                    2604
                ],
                "StringMerger": [
                    2601
                ],
                "string_paren_strip": [
                    2640,
                    2602,
                    2618,
                    2650
                ],
                "StringParenStripper": [
                    2602
                ],
                "string_split": [
                    2643,
                    2603,
                    2651
                ],
                "StringSplitter": [
                    2603
                ],
                "string_paren_wrap": [
                    2604,
                    2652,
                    2644
                ],
                "StringParenWrapper": [
                    2604
                ],
                "transformers": [
                    2656,
                    2638,
                    2606,
                    2648,
                    2618,
                    2620
                ],
                "line.contains_uncollapsable_type_comments": [
                    2608
                ],
                "line.should_explode": [
                    4184,
                    2609
                ],
                "line.is_collection_with_optional_trailing_comma": [
                    2610
                ],
                "is_line_short_enough": [
                    4721,
                    2626,
                    2612
                ],
                "line.contains_unsplittable_type_ignore": [
                    2613
                ],
                "line.contains_standalone_comments": [
                    4900,
                    6134,
                    2615
                ],
                "line.inside_brackets": [
                    4903,
                    2637,
                    4847,
                    4913,
                    4883,
                    2615,
                    4859
                ],
                "line.is_def": [
                    2619
                ],
                "left_hand_split": [
                    2620
                ],
                "omit": [
                    2624,
                    2625,
                    4679,
                    4713,
                    4715,
                    5628,
                    5625,
                    5626,
                    5595,
                    5596
                ],
                "generate_trailers_to_omit": [
                    2624
                ],
                "right_hand_split": [
                    2625,
                    2635,
                    4715
                ],
                "features": [
                    2625,
                    5537,
                    5572,
                    2662,
                    5542,
                    4872,
                    5574,
                    5546,
                    2635,
                    4715,
                    4876,
                    5550,
                    5579,
                    5581,
                    2673,
                    4818,
                    5553,
                    5567
                ],
                "delimiter_split": [
                    2641
                ],
                "standalone_comment_split": [
                    2642
                ],
                "rhs": [
                    2653,
                    2645
                ],
                "transform": [
                    2656,
                    2662
                ],
                "strip": [
                    4519,
                    6362,
                    4756,
                    2663
                ],
                "result.extend": [
                    2668
                ],
                "ABC": [
                    2687
                ],
                "abstractmethod": [
                    3290,
                    2717,
                    2727
                ],
                "line.leaves": [
                    6145,
                    2948,
                    3343,
                    3344,
                    5519,
                    4629,
                    4132,
                    2981,
                    3238,
                    3371,
                    6195,
                    4916,
                    6197,
                    6198,
                    6199,
                    6200,
                    3513,
                    3134,
                    4673,
                    2757,
                    2890,
                    6221,
                    3931,
                    3552,
                    4833,
                    6113,
                    3941,
                    5617,
                    3192,
                    3324,
                    4862
                ],
                "match_result": [
                    3302,
                    3303,
                    2760,
                    3304,
                    2762,
                    2763,
                    3306,
                    3311,
                    2769
                ],
                "self.do_match": [
                    2760
                ],
                "cant_transform": [
                    2922,
                    2763,
                    2767,
                    2928,
                    2930,
                    2773,
                    4374,
                    4375,
                    2776
                ],
                "match_result.err": [
                    2763
                ],
                "self.__class__.__name__": [
                    4361,
                    2765
                ],
                "self.__class__": [
                    4361,
                    2765
                ],
                "string_idx": [
                    3589,
                    4115,
                    4119,
                    3100,
                    3613,
                    3103,
                    4127,
                    3619,
                    4135,
                    3629,
                    4142,
                    4148,
                    3134,
                    4163,
                    3658,
                    4180,
                    4191,
                    4192,
                    3719,
                    3724,
                    3217,
                    3732,
                    3221,
                    3735,
                    3744,
                    3233,
                    3241,
                    3243,
                    3252,
                    3254,
                    3255,
                    3256,
                    3260,
                    2769,
                    2771,
                    4310,
                    4312,
                    3306,
                    3307,
                    3326,
                    3328,
                    3343,
                    3344,
                    3388,
                    3389,
                    3391,
                    3392,
                    3393,
                    3419,
                    3420,
                    3421,
                    2910,
                    3935,
                    3423,
                    3933,
                    3934,
                    2915,
                    3936,
                    3429,
                    3430,
                    3937,
                    3938,
                    3940,
                    3941,
                    3440,
                    3441,
                    3955,
                    3450,
                    2950,
                    2965,
                    2985,
                    2991,
                    2999,
                    4034,
                    4038,
                    4042,
                    3531,
                    3535,
                    3031,
                    3549,
                    3554,
                    3557,
                    3559,
                    4072,
                    4076,
                    3053,
                    3566,
                    4089
                ],
                "match_result.ok": [
                    2769,
                    3306
                ],
                "line_result": [
                    2777,
                    2771,
                    2772,
                    2773
                ],
                "self.do_transform": [
                    2771
                ],
                "line_result.err": [
                    2773
                ],
                "line_result.ok": [
                    2777
                ],
                "has_prefix": [
                    3082,
                    3089,
                    3090,
                    2803,
                    3068,
                    3069
                ],
                "break_idx": [
                    3680,
                    3681,
                    3840,
                    3683,
                    3841,
                    3685,
                    3842,
                    3844,
                    3847,
                    3831,
                    3667,
                    2804,
                    3699,
                    3670,
                    3830,
                    3832,
                    3834,
                    3647
                ],
                "_Key": [
                    2814,
                    2815
                ],
                "_CUSTOM_SPLIT_MAP": [
                    2815
                ],
                "CustomSplit": [
                    3090,
                    2827,
                    2837,
                    2815
                ],
                "defaultdict": [
                    2815
                ],
                "tuple": [
                    2835,
                    2815
                ],
                "string": [
                    4608,
                    4611,
                    4612,
                    4614,
                    2824,
                    2834,
                    3866,
                    3868,
                    3871,
                    2850,
                    3878,
                    2862,
                    3776,
                    3779,
                    3013,
                    3016,
                    3794,
                    3799,
                    4571,
                    4575,
                    4576,
                    4458,
                    3822,
                    3824,
                    3825,
                    4598,
                    4599,
                    4606,
                    4607
                ],
                "staticmethod": [
                    2817,
                    3113,
                    4011,
                    4046,
                    3984,
                    2934,
                    3959,
                    4093
                ],
                "key": [
                    2850,
                    2852,
                    2853,
                    2862,
                    2863,
                    2834,
                    2835
                ],
                "self._get_key": [
                    2834,
                    2850,
                    2862
                ],
                "self._CUSTOM_SPLIT_MAP": [
                    2835,
                    2852,
                    2853,
                    2863
                ],
                "custom_splits": [
                    3619,
                    2852,
                    3110,
                    2855,
                    3623,
                    3624,
                    3657,
                    3024,
                    3090,
                    2835,
                    3638,
                    3646
                ],
                "CustomSplitMapMixin": [
                    3881,
                    2866,
                    3463
                ],
                "LL": [
                    3585,
                    3589,
                    4105,
                    4106,
                    4108,
                    4111,
                    4114,
                    4119,
                    4122,
                    3099,
                    3613,
                    3104,
                    3619,
                    4132,
                    4134,
                    4135,
                    4137,
                    4139,
                    3629,
                    4142,
                    4144,
                    4148,
                    4163,
                    3658,
                    4180,
                    4192,
                    3192,
                    3194,
                    3196,
                    4221,
                    3204,
                    3205,
                    3724,
                    3213,
                    3732,
                    3221,
                    3735,
                    3226,
                    3227,
                    3230,
                    3744,
                    3238,
                    3241,
                    3243,
                    3252,
                    3254,
                    3255,
                    3256,
                    3260,
                    3263,
                    3324,
                    3326,
                    3371,
                    3373,
                    3391,
                    3392,
                    3398,
                    2890,
                    2892,
                    2894,
                    2898,
                    3416,
                    3931,
                    3420,
                    3421,
                    3934,
                    3423,
                    3935,
                    3936,
                    3937,
                    3938,
                    3430,
                    3441,
                    3450,
                    2948,
                    3972,
                    2950,
                    3975,
                    3977,
                    3979,
                    2963,
                    3998,
                    3999,
                    4000,
                    4002,
                    4004,
                    2981,
                    4006,
                    2983,
                    2991,
                    2999,
                    4024,
                    3513,
                    4025,
                    3515,
                    4027,
                    4030,
                    3520,
                    4033,
                    3524,
                    4038,
                    3528,
                    3535,
                    3538,
                    3542,
                    3036,
                    4060,
                    3038,
                    4061,
                    3552,
                    4063,
                    3554,
                    4065,
                    3556,
                    3557,
                    4068,
                    3559,
                    4071,
                    4076,
                    3054,
                    3566,
                    3057,
                    3570,
                    4081,
                    4083
                ],
                "is_valid_index": [
                    3841,
                    3203,
                    3844,
                    3589,
                    3719,
                    3975,
                    3977,
                    4106,
                    3979,
                    3212,
                    4114,
                    3225,
                    4122,
                    3230,
                    4126,
                    4511,
                    4002,
                    4004,
                    4006,
                    2983,
                    4134,
                    3373,
                    4025,
                    3515,
                    3388,
                    3520,
                    3776,
                    3778,
                    4033,
                    3524,
                    3528,
                    4041,
                    2892,
                    2897,
                    3538,
                    3542,
                    3546,
                    3419,
                    3035,
                    4063,
                    4191,
                    3556,
                    3429,
                    4071,
                    3054,
                    3440,
                    4082,
                    3831,
                    4088,
                    3194
                ],
                "is_valid_index_factory": [
                    3776,
                    4002,
                    3556,
                    4134,
                    2983,
                    3975,
                    4106,
                    2892,
                    3373,
                    4025,
                    3194,
                    3515,
                    4063
                ],
                "TErr": [
                    3330,
                    3338,
                    2956,
                    3346,
                    3352,
                    3612,
                    3235,
                    3245,
                    3144,
                    3529,
                    3149,
                    3156,
                    3159,
                    2905,
                    3547,
                    3164,
                    3169,
                    3950,
                    3957
                ],
                "new_line": [
                    3586,
                    2961,
                    2962,
                    2963,
                    2965,
                    2968,
                    3098,
                    3101,
                    3105,
                    3108,
                    3111,
                    3249,
                    3250,
                    3252,
                    3257,
                    3260,
                    4540,
                    4543,
                    3265,
                    2908,
                    2910,
                    2913,
                    2915,
                    2917,
                    2932
                ],
                "rblc_result": [
                    2912,
                    2913,
                    2919,
                    2921,
                    2909
                ],
                "self.__remove_backslash_line_continuation_chars": [
                    2909
                ],
                "rblc_result.ok": [
                    2913
                ],
                "msg_result": [
                    2915,
                    2916,
                    2917,
                    2919,
                    2920
                ],
                "self.__merge_string_group": [
                    2915
                ],
                "msg_result.ok": [
                    2917
                ],
                "msg_cant_transform": [
                    2920,
                    2928,
                    2927
                ],
                "msg_result.err": [
                    2920
                ],
                "rblc_cant_transform": [
                    2921,
                    2927
                ],
                "rblc_result.err": [
                    2921
                ],
                "msg_cant_transform.__cause__": [
                    2927
                ],
                "cant_transform.__cause__": [
                    2928
                ],
                "string_leaf": [
                    3329,
                    2950,
                    3334,
                    2952,
                    2953,
                    2954,
                    3339,
                    2957,
                    3092,
                    3095,
                    3351,
                    3101,
                    3110,
                    3254,
                    3256,
                    3257,
                    4438,
                    4439,
                    4186,
                    4187,
                    4188,
                    3326
                ],
                "string_leaf.type": [
                    2952
                ],
                "string_leaf.value": [
                    3329,
                    3110,
                    2953,
                    2954,
                    3339,
                    3351
                ],
                "has_triple_quotes": [
                    2954,
                    3351,
                    5436,
                    3143
                ],
                "line.clone": [
                    3715,
                    3694,
                    4207,
                    2961,
                    3249,
                    4147,
                    3098,
                    3743
                ],
                "new_line.comments": [
                    3250,
                    2962
                ],
                "line.comments": [
                    3139,
                    3749,
                    3343,
                    3344,
                    3153,
                    3250,
                    2962,
                    3155
                ],
                "append_leaves": [
                    3744,
                    3108,
                    4202,
                    2963,
                    3252,
                    3735,
                    3259,
                    4159
                ],
                "new_string_leaf": [
                    2965,
                    2966
                ],
                "new_line.leaves": [
                    2965
                ],
                "new_string_leaf.value": [
                    2966
                ],
                "new_string_leaf.value.replace": [
                    2966
                ],
                "vresult": [
                    2985,
                    2986,
                    2987,
                    3308,
                    3307,
                    3309
                ],
                "self.__validate_msg": [
                    2985
                ],
                "atom_node": [
                    3095,
                    3094,
                    2991
                ],
                "BREAK_MARK": [
                    3083,
                    3088,
                    3092,
                    2997,
                    3071
                ],
                "QUOTE": [
                    3554,
                    3685,
                    3018,
                    3699,
                    3670,
                    2999,
                    3071
                ],
                "assert_is_leaf_string": [
                    3866,
                    3779,
                    3013,
                    4571
                ],
                "RE_EVEN_BACKSLASHES": [
                    3018,
                    3015
                ],
                "naked_string": [
                    3016,
                    3017,
                    3018,
                    3020
                ],
                "string_prefix": [
                    3016
                ],
                "re.sub": [
                    3872,
                    3017,
                    5954,
                    3873
                ],
                "prefix_tracker": [
                    3082,
                    3027,
                    3069
                ],
                "next_str_idx": [
                    3074,
                    3053,
                    3054,
                    3057,
                    3031,
                    3035,
                    3036,
                    3038,
                    3039
                ],
                "get_string_prefix": [
                    3559,
                    3147,
                    3058,
                    3799,
                    3038
                ],
                "S": [
                    3072,
                    3050,
                    3076,
                    3071
                ],
                "NS": [
                    3072,
                    3051,
                    3071
                ],
                "num_of_strings": [
                    3146,
                    3052,
                    3055,
                    3158,
                    3160,
                    3133,
                    3103
                ],
                "SS": [
                    3064,
                    3057,
                    3058,
                    3066
                ],
                "next_prefix": [
                    3058,
                    3068,
                    3066,
                    3062
                ],
                "re.subf": [
                    3064
                ],
                "NSS": [
                    3066,
                    3071
                ],
                "make_naked": [
                    3072,
                    3066
                ],
                "prefix_tracker.append": [
                    3069
                ],
                "S_leaf": [
                    3081,
                    3076,
                    3092,
                    3078
                ],
                "temp_string": [
                    3088,
                    3081,
                    3083
                ],
                "S_leaf.value": [
                    3081,
                    3092
                ],
                "mark_idx": [
                    3088,
                    3089,
                    3083,
                    3085
                ],
                "temp_string.find": [
                    3083
                ],
                "breakpoint_idx": [
                    3089,
                    3090
                ],
                "custom_splits.append": [
                    3090
                ],
                "S_leaf.value.replace": [
                    3092
                ],
                "replace_child": [
                    3585,
                    4163,
                    4212,
                    3095,
                    3256,
                    4539,
                    4221
                ],
                "new_line.append": [
                    3105,
                    3586,
                    3257,
                    4540,
                    3101,
                    4543
                ],
                "comment_leaf": [
                    3104,
                    3105,
                    3457,
                    4172,
                    4173,
                    3450,
                    4542,
                    4543
                ],
                "line.comments_after": [
                    3104,
                    4865,
                    6118,
                    3244,
                    4172,
                    4919,
                    3450
                ],
                "self.add_custom_splits": [
                    3110
                ],
                "num_of_inline_string_comments": [
                    3140,
                    3163,
                    3154,
                    3131,
                    3165
                ],
                "set_of_prefixes": [
                    3168,
                    3169,
                    3132,
                    3151
                ],
                "set_of_prefixes.add": [
                    3151
                ],
                "contains_pragma_comment": [
                    3155,
                    3343
                ],
                "idx": [
                    3203,
                    3204,
                    3205,
                    3977,
                    3979,
                    3212,
                    3213,
                    3980,
                    4111,
                    3217,
                    4114,
                    4115,
                    4119,
                    4122,
                    4123,
                    4509,
                    4126,
                    4004,
                    4006,
                    4007,
                    3517,
                    4030,
                    3520,
                    3521,
                    4033,
                    4034,
                    3524,
                    3525,
                    4038,
                    3528,
                    4041,
                    3531,
                    3535,
                    3538,
                    3539,
                    3542,
                    3543,
                    4312,
                    4313,
                    3546,
                    4314,
                    4315,
                    4068,
                    4071,
                    4072,
                    4076,
                    4082,
                    4083,
                    4085,
                    4088,
                    3196
                ],
                "is_empty_lpar": [
                    4476,
                    3524,
                    3205
                ],
                "string_parser": [
                    4037,
                    4038,
                    3240,
                    3241,
                    4075,
                    4076,
                    3534,
                    3535,
                    3220,
                    3221,
                    4118,
                    4119
                ],
                "StringParser": [
                    4037,
                    3240,
                    4075,
                    3534,
                    3220,
                    4118
                ],
                "next_idx": [
                    3221,
                    3225,
                    3226,
                    3227,
                    3230
                ],
                "string_parser.parse": [
                    4038,
                    3241,
                    4076,
                    3535,
                    3221,
                    4119
                ],
                "is_empty_rpar": [
                    3538,
                    3227,
                    4476
                ],
                "rpar_idx": [
                    3241,
                    3243,
                    3260,
                    3263
                ],
                "line.comments.copy": [
                    3250,
                    3749
                ],
                "remove": [
                    3263,
                    3255
                ],
                "self.do_splitter_match": [
                    3302
                ],
                "self.__validate": [
                    3307
                ],
                "max_string_length": [
                    3328,
                    3329,
                    3459,
                    3460,
                    3945,
                    3946
                ],
                "self.__get_max_string_length": [
                    3328
                ],
                "string_leaf.parent": [
                    4438,
                    3334
                ],
                "L.type": [
                    3334
                ],
                "L": [
                    3334
                ],
                "string_leaf.parent.children": [
                    3334
                ],
                "offset": [
                    3457,
                    3427,
                    3459,
                    3401,
                    3405,
                    3437,
                    3444,
                    3413,
                    3447,
                    3417,
                    3386,
                    3454
                ],
                "line.depth": [
                    5598,
                    4903,
                    6248,
                    3945,
                    3599,
                    4847,
                    4913,
                    3610,
                    4883,
                    4182,
                    6206,
                    3386,
                    4859,
                    3614
                ],
                "p_idx": [
                    3416,
                    3396,
                    3389,
                    3398
                ],
                "P": [
                    3407,
                    3403,
                    3398,
                    3399
                ],
                "P.type": [
                    3403,
                    3407,
                    3399
                ],
                "N": [
                    3425,
                    3432,
                    3420,
                    3421,
                    3423
                ],
                "N.type": [
                    3432,
                    3425,
                    3421
                ],
                "N.value": [
                    3421
                ],
                "NN": [
                    3432,
                    3430,
                    3447
                ],
                "NN.type": [
                    3432
                ],
                "NN.value": [
                    3447
                ],
                "has_comments": [
                    3449,
                    3451,
                    3452
                ],
                "comment_leaf.value": [
                    3457
                ],
                "BaseStringSplitter": [
                    3881,
                    3463
                ],
                "MIN_SUBSTR_SIZE": [
                    3500
                ],
                "RE_FEXPR": [
                    3502
                ],
                "insert_str_child": [
                    4450,
                    4165,
                    3557,
                    4135,
                    3690,
                    4214,
                    4187,
                    3708
                ],
                "insert_str_child_factory": [
                    3557,
                    4135
                ],
                "drop_pointless_f_prefix": [
                    3704,
                    3673,
                    3565
                ],
                "re.search": [
                    3868,
                    3565
                ],
                "self.RE_FEXPR": [
                    3794,
                    3868,
                    3566
                ],
                "re.VERBOSE": [
                    3794,
                    3868,
                    5037,
                    3566
                ],
                "first_string_line": [
                    3700,
                    3569,
                    3660,
                    3573
                ],
                "starts_with_plus": [
                    3570,
                    3573
                ],
                "line_needs_plus": [
                    3601,
                    3650,
                    3583
                ],
                "plus_leaf": [
                    3584,
                    3585,
                    3586
                ],
                "ends_with_comma": [
                    4193,
                    3588,
                    4138,
                    4140,
                    4143,
                    3600,
                    4219
                ],
                "max_break_idx": [
                    3840,
                    3650,
                    3778,
                    3624,
                    3606,
                    3830,
                    3608,
                    3610,
                    3611
                ],
                "self.pop_custom_splits": [
                    3619
                ],
                "use_custom_breakpoints": [
                    3682,
                    3622,
                    3661,
                    3637,
                    3644
                ],
                "csplit.break_idx": [
                    3624,
                    3647
                ],
                "csplit": [
                    3624,
                    3682,
                    3646,
                    3647
                ],
                "rest_value": [
                    3651,
                    3685,
                    3658,
                    3723,
                    3629,
                    3699,
                    3670,
                    3640,
                    3705,
                    3707
                ],
                "max_last_string": [
                    3640,
                    3731
                ],
                "string_line_results": [
                    3697,
                    3642,
                    3659,
                    3702
                ],
                "more_splits_should_be_made": [
                    3643
                ],
                "custom_splits.pop": [
                    3646
                ],
                "max_bidx": [
                    3650,
                    3651
                ],
                "maybe_break_idx": [
                    3667,
                    3651,
                    3652
                ],
                "self.__get_break_idx": [
                    3651
                ],
                "next_value": [
                    3685,
                    3686,
                    3689,
                    3670,
                    3675
                ],
                "self.__normalize_f_string": [
                    3705,
                    3675,
                    3686
                ],
                "csplit.has_prefix": [
                    3682
                ],
                "next_leaf": [
                    3696,
                    3689,
                    3690,
                    3691
                ],
                "self.__maybe_normalize_string_quotes": [
                    3713,
                    3691
                ],
                "next_line": [
                    3696,
                    3697,
                    3694,
                    3695
                ],
                "maybe_append_plus": [
                    3716,
                    3695
                ],
                "next_line.append": [
                    3696
                ],
                "string_line_results.append": [
                    3697
                ],
                "rest_leaf": [
                    3713,
                    3740,
                    3748,
                    3734,
                    3707,
                    3708
                ],
                "temp_value": [
                    3723,
                    3731,
                    3725
                ],
                "last_line.append": [
                    3748,
                    3734,
                    4215,
                    3740,
                    4222
                ],
                "non_string_line": [
                    3744,
                    3745,
                    3743
                ],
                "last_line.comments": [
                    3749
                ],
                "_fexpr_slices": [
                    3781,
                    3792,
                    3793,
                    3795,
                    3797
                ],
                "match": [
                    4973,
                    4974,
                    4975,
                    3794,
                    3795,
                    4979
                ],
                "re.finditer": [
                    3794
                ],
                "_fexpr_slices.append": [
                    3795
                ],
                "match.span": [
                    3795
                ],
                "is_fstring": [
                    3807,
                    3799
                ],
                "start": [
                    3810,
                    3811
                ],
                "end": [
                    3810,
                    3811
                ],
                "fexpr_slices": [
                    3810
                ],
                "is_space": [
                    3827,
                    3822
                ],
                "is_big_enough": [
                    3827,
                    3823
                ],
                "self.MIN_SUBSTR_SIZE": [
                    3824,
                    3825
                ],
                "breaks_fstring_expression": [
                    3827
                ],
                "passes_all_checks": [
                    3841,
                    3834,
                    3844,
                    3831
                ],
                "new_prefix": [
                    3876,
                    4976,
                    4978,
                    4979,
                    3869
                ],
                "prefix.replace": [
                    3869
                ],
                "temp": [
                    3872,
                    3873,
                    3874,
                    3871
                ],
                "new_string": [
                    3874,
                    3876
                ],
                "self._return_match": [
                    3934
                ],
                "self._else_match": [
                    3935
                ],
                "self._assert_match": [
                    3936
                ],
                "self._assign_match": [
                    3937
                ],
                "self._dict_match": [
                    3938
                ],
                "string_value": [
                    3941,
                    3943,
                    3946,
                    3948,
                    4180,
                    4186
                ],
                "self.has_custom_splits": [
                    3948
                ],
                "parent_type": [
                    3972,
                    4105,
                    4081,
                    4024,
                    4060,
                    3998
                ],
                "syms.return_stmt": [
                    3972
                ],
                "syms.yield_expr": [
                    5392,
                    3972
                ],
                "is_empty_par": [
                    4068,
                    4004,
                    3977,
                    4331,
                    4111,
                    4030
                ],
                "syms.assert_stmt": [
                    4024
                ],
                "syms.expr_stmt": [
                    5284,
                    4060
                ],
                "token.PLUSEQUAL": [
                    4067
                ],
                "comma_idx": [
                    4144,
                    4137,
                    4139,
                    4221
                ],
                "leaves_to_steal_comments_from": [
                    4144,
                    4171,
                    4156,
                    4142
                ],
                "leaves_to_steal_comments_from.append": [
                    4144,
                    4156
                ],
                "left_leaves": [
                    4148,
                    4154,
                    4156,
                    4157,
                    4159
                ],
                "old_parens_exist": [
                    4153,
                    4162,
                    4155,
                    4196
                ],
                "left_leaves.pop": [
                    4157
                ],
                "lpar_leaf": [
                    4161,
                    4163,
                    4165,
                    4166
                ],
                "first_line.append": [
                    4173,
                    4166
                ],
                "string_line": [
                    4204,
                    4202,
                    4188,
                    4181
                ],
                "string_line.append": [
                    4188
                ],
                "old_rpar_leaf": [
                    4200,
                    4211,
                    4212,
                    4190
                ],
                "right_leaves": [
                    4192,
                    4194,
                    4198,
                    4200,
                    4202
                ],
                "right_leaves.pop": [
                    4200,
                    4194
                ],
                "last_line.bracket_tracker": [
                    4208
                ],
                "first_line.bracket_tracker": [
                    4208
                ],
                "new_rpar_leaf": [
                    4210,
                    4212,
                    4214,
                    4215
                ],
                "comma_leaf": [
                    4220,
                    4221,
                    4222
                ],
                "DEFAULT_TOKEN": [
                    4257,
                    4292,
                    4274,
                    4280,
                    4284,
                    4287
                ],
                "START": [
                    4272,
                    4273,
                    4274,
                    4260
                ],
                "DOT": [
                    4272,
                    4276,
                    4261
                ],
                "NAME": [
                    4280,
                    4276,
                    4262,
                    4279
                ],
                "PERCENT": [
                    4273,
                    4283,
                    4284,
                    4263
                ],
                "SINGLE_FMT_ARG": [
                    4264,
                    4284,
                    4287
                ],
                "LPAR": [
                    4265,
                    4283,
                    4279
                ],
                "RPAR": [
                    4266,
                    4292
                ],
                "DONE": [
                    4292,
                    4267,
                    4274,
                    4280,
                    4287
                ],
                "_goto": [
                    4270
                ],
                "self._state": [
                    4352,
                    4357,
                    4296,
                    4363,
                    4338,
                    4346
                ],
                "self.START": [
                    4296
                ],
                "self._unmatched_lpars": [
                    4336,
                    4297,
                    4344,
                    4345
                ],
                "self._next_state": [
                    4313
                ],
                "next_token": [
                    4352,
                    4334,
                    4335,
                    4343,
                    4351
                ],
                "current_state": [
                    4352,
                    4356,
                    4357,
                    4338,
                    4342,
                    4351
                ],
                "self.LPAR": [
                    4342
                ],
                "self.RPAR": [
                    4346
                ],
                "self._goto": [
                    4352,
                    4356,
                    4357,
                    4351
                ],
                "self.DEFAULT_TOKEN": [
                    4356,
                    4357
                ],
                "RuntimeError": [
                    4361
                ],
                "self.DONE": [
                    4363
                ],
                "err_msg": [
                    4374
                ],
                "comment_list": [
                    4385
                ],
                "comment.value.startswith": [
                    4386
                ],
                "comment.value": [
                    4386,
                    6119,
                    5192,
                    5174,
                    5244,
                    5246
                ],
                "string_parent": [
                    4444,
                    4438,
                    4447
                ],
                "string_child_idx": [
                    4448,
                    4445,
                    4447,
                    4439
                ],
                "string_leaf.remove": [
                    4439
                ],
                "string_parent.insert_child": [
                    4447
                ],
                "raw_string": [
                    4458,
                    4459
                ],
                "string.lstrip": [
                    4458
                ],
                "Sequence": [
                    6110,
                    6094,
                    4487
                ],
                "seq": [
                    4509
                ],
                "old_leaf": [
                    4535,
                    4536,
                    4538,
                    4539,
                    4542
                ],
                "old_line.leaves": [
                    4536
                ],
                "old_line": [
                    4536,
                    4542
                ],
                "new_leaf": [
                    4538,
                    4539,
                    4540
                ],
                "old_leaf.type": [
                    4538
                ],
                "old_leaf.value": [
                    4538
                ],
                "old_line.comments_after": [
                    4542
                ],
                "old_child.parent": [
                    4554
                ],
                "old_child": [
                    4554,
                    4558
                ],
                "child_idx": [
                    4560,
                    4558,
                    4559
                ],
                "old_child.remove": [
                    4558
                ],
                "parent.insert_child": [
                    4560,
                    5365,
                    5205
                ],
                "new_child": [
                    4560,
                    5363,
                    5364,
                    5365
                ],
                "prefix_idx": [
                    4576,
                    4577,
                    4574,
                    4575
                ],
                "lower": [
                    4576
                ],
                "dquote_idx": [
                    4600,
                    4601,
                    4603,
                    4598
                ],
                "string.find": [
                    4598,
                    4599
                ],
                "squote_idx": [
                    4600,
                    4601,
                    4603,
                    4599
                ],
                "quote_idx": [
                    4612,
                    4614,
                    4601,
                    4603,
                    4606
                ],
                "issubset": [
                    4612
                ],
                "tail_leaves": [
                    4676,
                    4646,
                    4678,
                    4624,
                    4689,
                    4694,
                    4635,
                    4667,
                    4670
                ],
                "body_leaves": [
                    4640,
                    4674,
                    4676,
                    4645,
                    4682,
                    4625,
                    4690,
                    4693,
                    4631,
                    4635,
                    4668
                ],
                "head_leaves": [
                    4669,
                    4644,
                    4676,
                    4683,
                    4626,
                    4627,
                    4691,
                    4692,
                    4635,
                    4637
                ],
                "current_leaves": [
                    4640,
                    4674,
                    4676,
                    4677,
                    4678,
                    4682,
                    4627,
                    4631,
                    4635,
                    4636,
                    4637,
                    4670
                ],
                "matching_bracket": [
                    4641,
                    4644,
                    4645,
                    4646,
                    4628,
                    4633,
                    4639
                ],
                "current_leaves.append": [
                    4636,
                    4677
                ],
                "CannotSplit": [
                    4642,
                    4835,
                    4901,
                    4841,
                    4845,
                    4718,
                    4687,
                    4723,
                    4759,
                    4728,
                    4762
                ],
                "head": [
                    4737,
                    4644,
                    4647,
                    4648,
                    4727,
                    4692,
                    4695
                ],
                "bracket_split_build_line": [
                    4644,
                    4645,
                    4646,
                    4692,
                    4693,
                    4694
                ],
                "body": [
                    4737,
                    5011,
                    4757,
                    5013,
                    5019,
                    5022,
                    5023,
                    5025,
                    5026,
                    4645,
                    4647,
                    4648,
                    5047,
                    4693,
                    4695,
                    4698,
                    4709,
                    4711,
                    4720,
                    4721
                ],
                "tail": [
                    4737,
                    4646,
                    4647,
                    4648,
                    4727,
                    4756,
                    4694,
                    4695
                ],
                "bracket_split_succeeded_or_raise": [
                    4695,
                    4647
                ],
                "closing_bracket": [
                    4672,
                    4704,
                    4736,
                    5600,
                    5632,
                    4681,
                    4713,
                    4683,
                    5624,
                    5625,
                    4703
                ],
                "tail_leaves.reverse": [
                    4689
                ],
                "body_leaves.reverse": [
                    4690
                ],
                "head_leaves.reverse": [
                    4691
                ],
                "body.should_explode": [
                    4698
                ],
                "opening_bracket.type": [
                    4700
                ],
                "opening_bracket.value": [
                    5514,
                    4787,
                    4701
                ],
                "closing_bracket.type": [
                    4703
                ],
                "closing_bracket.value": [
                    4704
                ],
                "line.is_import": [
                    4707
                ],
                "body.contains_standalone_comments": [
                    4709
                ],
                "can_omit_invisible_parens": [
                    4711
                ],
                "can_be_split": [
                    4720
                ],
                "head.contains_multiline_strings": [
                    4727
                ],
                "tail.contains_multiline_strings": [
                    4727
                ],
                "ensure_visible": [
                    4736,
                    4735
                ],
                "tail_len": [
                    4761,
                    4763,
                    4756,
                    4758
                ],
                "original.depth": [
                    4776
                ],
                "original": [
                    6080,
                    4803,
                    4776,
                    4786,
                    4791
                ],
                "is_body": [
                    4777,
                    4805
                ],
                "result.inside_brackets": [
                    4778
                ],
                "result.depth": [
                    4779
                ],
                "no_commas": [
                    4785,
                    4791
                ],
                "original.is_def": [
                    4786
                ],
                "l.type": [
                    4788
                ],
                "original.is_import": [
                    4791
                ],
                "leaves.insert": [
                    4797
                ],
                "comment_after": [
                    4865,
                    4866,
                    4803,
                    4804,
                    4919,
                    4920
                ],
                "original.comments_after": [
                    4803
                ],
                "result.should_explode": [
                    4806
                ],
                "split_func": [
                    4816,
                    4818
                ],
                "l.leaves": [
                    4819
                ],
                "wraps": [
                    4816
                ],
                "split_wrapper": [
                    4822
                ],
                "bt": [
                    4837,
                    6181,
                    4839,
                    6182,
                    5482,
                    6186,
                    4844,
                    5485,
                    6187,
                    4879,
                    5488,
                    5490
                ],
                "line.bracket_tracker": [
                    5521,
                    6181,
                    4837
                ],
                "delimiter_priority": [
                    4839,
                    4843,
                    4844,
                    4880,
                    4887
                ],
                "bt.max_delimiter_priority": [
                    5490,
                    6186,
                    4839
                ],
                "bt.delimiter_count_with_priority": [
                    6187,
                    4844
                ],
                "lowest_depth": [
                    4848,
                    4868,
                    4869
                ],
                "trailing_comma_safe": [
                    4871,
                    4872,
                    4875,
                    4876,
                    4849,
                    4886
                ],
                "current_line.append_safe": [
                    4909,
                    4855
                ],
                "current_line.append": [
                    4914,
                    4891,
                    4860
                ],
                "append_to_line": [
                    4920,
                    4866,
                    4917,
                    4863
                ],
                "leaf_priority": [
                    4880,
                    4879
                ],
                "bt.delimiters.get": [
                    4879
                ],
                "bt.delimiters": [
                    6182,
                    4879
                ],
                "dont_increase_indentation": [
                    4825,
                    4895
                ],
                "syms.import_name": [
                    4934
                ],
                "v.startswith": [
                    4945
                ],
                "suffix": [
                    5088,
                    4945,
                    5084,
                    5086,
                    5087
                ],
                "spl": [
                    4955,
                    4956,
                    4957,
                    4958
                ],
                "leaf.prefix.split": [
                    4955
                ],
                "nl_count": [
                    4960,
                    4957,
                    4959
                ],
                "count": [
                    4957
                ],
                "re.match": [
                    4973
                ],
                "re.DOTALL": [
                    4973
                ],
                "orig_prefix": [
                    4976,
                    4975
                ],
                "match.group": [
                    4979,
                    4975
                ],
                "orig_prefix.replace": [
                    4976
                ],
                "new_prefix.replace": [
                    4978
                ],
                "leaf.value.lstrip": [
                    4990
                ],
                "orig_quote": [
                    5026,
                    4995,
                    5027,
                    4998,
                    5001,
                    5003,
                    5010,
                    5011,
                    5052
                ],
                "new_quote": [
                    4996,
                    5028,
                    4999,
                    5002,
                    5008,
                    5009,
                    5044,
                    5022,
                    5055
                ],
                "first_quote_pos": [
                    5011,
                    5003,
                    5004,
                    5007
                ],
                "leaf.value.find": [
                    5003
                ],
                "unescaped_new_quote": [
                    5008,
                    5028,
                    5013
                ],
                "re.compile": [
                    5008,
                    5009,
                    5010,
                    6090
                ],
                "escaped_new_quote": [
                    5009,
                    5022
                ],
                "escaped_orig_quote": [
                    5010,
                    5027
                ],
                "prefix.casefold": [
                    5012,
                    5029
                ],
                "unescaped_new_quote.search": [
                    5013
                ],
                "new_body": [
                    5025,
                    5027,
                    5028,
                    5036,
                    5044,
                    5046,
                    5048,
                    5055,
                    5019,
                    5022,
                    5023
                ],
                "sub_twice": [
                    5027,
                    5028,
                    5022
                ],
                "matches": [
                    5030,
                    5039
                ],
                "re.findall": [
                    5030
                ],
                "m": [
                    5040,
                    5039
                ],
                "orig_escape_count": [
                    5049,
                    5052,
                    5047
                ],
                "body.count": [
                    5047
                ],
                "new_escape_count": [
                    5048,
                    5049,
                    5052
                ],
                "new_body.count": [
                    5048
                ],
                "text": [
                    5088,
                    5090,
                    5091,
                    5064,
                    5065,
                    5096,
                    5097,
                    5068,
                    5099,
                    5070,
                    5071,
                    5072,
                    5073,
                    5081,
                    5082,
                    5083,
                    5084
                ],
                "leaf.value.lower": [
                    5064
                ],
                "text.startswith": [
                    5065,
                    5068
                ],
                "after.upper": [
                    5071
                ],
                "text.split": [
                    5073,
                    5099
                ],
                "sign": [
                    5081,
                    5074,
                    5077
                ],
                "after.startswith": [
                    5075,
                    5078
                ],
                "format_float_or_int_string": [
                    5080,
                    5090,
                    5088
                ],
                "text.endswith": [
                    5082
                ],
                "number": [
                    5088,
                    5083
                ],
                "check_lpar": [
                    5129,
                    5131,
                    5116,
                    5156
                ],
                "syms.annassign": [
                    5120
                ],
                "parens_after": [
                    5121,
                    5156
                ],
                "is_walrus_assignment": [
                    5132
                ],
                "maybe_make_parens_invisible_in_atom": [
                    5136,
                    5296
                ],
                "wrap_in_parentheses": [
                    5137,
                    5154,
                    5139
                ],
                "is_one_tuple": [
                    5138,
                    5283
                ],
                "node.append_child": [
                    5150
                ],
                "try_again": [
                    5161,
                    5162,
                    5163
                ],
                "convert_one_fmt_off_pair": [
                    5163
                ],
                "node.leaves": [
                    5171
                ],
                "previous_consumed": [
                    5210,
                    5172,
                    5215
                ],
                "ignored_nodes": [
                    5184,
                    5187,
                    5192,
                    5199,
                    5183
                ],
                "generate_ignored_nodes": [
                    5183
                ],
                "first.parent": [
                    5188
                ],
                "comment.consumed": [
                    5190,
                    5215
                ],
                "hidden_value": [
                    5209,
                    5194,
                    5197,
                    5191
                ],
                "hidden_value.endswith": [
                    5194
                ],
                "first_idx": [
                    5198,
                    5201,
                    5202,
                    5204,
                    5206
                ],
                "ignored": [
                    5200,
                    5199
                ],
                "ignored.remove": [
                    5200
                ],
                "comment.newlines": [
                    5210
                ],
                "container_of": [
                    5225
                ],
                "container.type": [
                    5226
                ],
                "fmt_on": [
                    5227,
                    5259
                ],
                "contains_fmt_on_at_column": [
                    5233,
                    5231
                ],
                "leaf.column": [
                    5233,
                    5231
                ],
                "container.children": [
                    5232,
                    5252
                ],
                "container.next_sibling": [
                    5238
                ],
                "is_fmt_on": [
                    5248,
                    5242,
                    5245,
                    5247
                ],
                "container.prefix": [
                    5243
                ],
                "first_leaf_column": [
                    5255
                ],
                "child.column": [
                    5257,
                    5268
                ],
                "is_empty_tuple": [
                    5282
                ],
                "is_yield": [
                    5284,
                    5406
                ],
                "max_delimiter_priority_in_atom": [
                    5285
                ],
                "last": [
                    5315,
                    5478,
                    5479,
                    5320,
                    5321,
                    5290,
                    5291,
                    5322,
                    6252,
                    5295,
                    6229,
                    6230,
                    6200,
                    6234,
                    6235,
                    6236
                ],
                "first.type": [
                    5291,
                    6204,
                    5318,
                    5479
                ],
                "last.type": [
                    5479,
                    5321,
                    5291,
                    6229,
                    6230,
                    6234
                ],
                "middle": [
                    5296,
                    5298,
                    5292,
                    5301
                ],
                "last.value": [
                    5322,
                    5295
                ],
                "is_atom_with_invisible_parens": [
                    5298
                ],
                "middle.replace": [
                    5301
                ],
                "middle.children": [
                    5301
                ],
                "wrapped": [
                    5347,
                    5343
                ],
                "lpar.type": [
                    5344,
                    5405
                ],
                "rpar.type": [
                    5344,
                    5405
                ],
                "visible": [
                    5358,
                    5359
                ],
                "child.prefix": [
                    5360,
                    5361
                ],
                "child.remove": [
                    5362
                ],
                "new_child.prefix": [
                    5364
                ],
                "gexp": [
                    5371,
                    5372,
                    5375
                ],
                "unwrap_singleton_parenthesis": [
                    5386,
                    5371
                ],
                "gexp.type": [
                    5372
                ],
                "gexp.children": [
                    5375
                ],
                "inner": [
                    5386,
                    5387
                ],
                "inner.type": [
                    5387
                ],
                "syms.namedexpr_test": [
                    5387
                ],
                "expr": [
                    5404,
                    5406
                ],
                "within": [
                    5431
                ],
                "child.children": [
                    5665,
                    5667,
                    5646,
                    5652,
                    5463,
                    5464,
                    5661
                ],
                "c": [
                    5483,
                    5484,
                    5485,
                    5487
                ],
                "bt.mark": [
                    5488,
                    5485
                ],
                "c.leaves": [
                    5487
                ],
                "opening_bracket.parent": [
                    5512,
                    5513
                ],
                "opening_bracket.parent.type": [
                    5513
                ],
                "max_priority": [
                    6186,
                    6187,
                    6191,
                    5521,
                    5525
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    5521
                ],
                "node.pre_order": [
                    5538
                ],
                "value_head": [
                    5540,
                    5541
                ],
                "n.value": [
                    5545,
                    5540
                ],
                "features.add": [
                    5572,
                    5542,
                    5546,
                    5550,
                    5553,
                    5567
                ],
                "n.parent": [
                    5549
                ],
                "n.parent.type": [
                    5549
                ],
                "token.COLONEQUAL": [
                    5552
                ],
                "n.children": [
                    5557,
                    5558,
                    5565
                ],
                "ch": [
                    5569,
                    5570,
                    5565,
                    5566
                ],
                "ch.type": [
                    5569,
                    5566
                ],
                "argch": [
                    5570,
                    5571
                ],
                "ch.children": [
                    5570
                ],
                "argch.type": [
                    5571
                ],
                "get_features_used": [
                    5579
                ],
                "length": [
                    6114,
                    5603,
                    5604,
                    6211,
                    6212,
                    6119,
                    6248,
                    6121,
                    6251,
                    6253,
                    6206,
                    5598
                ],
                "inner_brackets": [
                    5601,
                    5615,
                    5621,
                    5626,
                    5627
                ],
                "leaf_length": [
                    5602,
                    6211,
                    5603,
                    5607,
                    6250,
                    6251,
                    6207
                ],
                "enumerate_with_length": [
                    5602,
                    6250,
                    6207
                ],
                "has_inline_comment": [
                    5608,
                    5607
                ],
                "inner_brackets.add": [
                    5621,
                    5615
                ],
                "omit.add": [
                    5625
                ],
                "omit.update": [
                    5626
                ],
                "inner_brackets.clear": [
                    5627
                ],
                "imports": [
                    5682,
                    5637,
                    5678
                ],
                "syms.import_as_name": [
                    5645
                ],
                "orig_name": [
                    5648,
                    5649,
                    5646,
                    5647
                ],
                "orig_name.type": [
                    5648
                ],
                "orig_name.value": [
                    5649
                ],
                "syms.import_as_names": [
                    5651
                ],
                "get_imports_from_children": [
                    5652,
                    5678
                ],
                "AssertionError": [
                    5986,
                    5967,
                    6001,
                    5655,
                    5976
                ],
                "Generator": [
                    5639
                ],
                "first_child": [
                    5666,
                    5673,
                    5674,
                    5678,
                    5661,
                    5662
                ],
                "first_child.type": [
                    5673,
                    5666
                ],
                "module_name": [
                    5674,
                    5675
                ],
                "first_child.children": [
                    5674,
                    5678
                ],
                "module_name.value": [
                    5675
                ],
                "gitignore": [
                    5744,
                    5714,
                    5688,
                    5690,
                    5691
                ],
                "gitignore.is_file": [
                    5690
                ],
                "gitignore.open": [
                    5691
                ],
                "gf": [
                    5691,
                    5692
                ],
                "gf.readlines": [
                    5692
                ],
                "PathSpec.from_lines": [
                    5693
                ],
                "PathSpec": [
                    5702,
                    5693,
                    5686
                ],
                "Pattern": [
                    5699,
                    5700,
                    6083,
                    6090,
                    6074
                ],
                "root.is_absolute": [
                    5711
                ],
                "path.iterdir": [
                    5712
                ],
                "path": [
                    5712,
                    5818,
                    6287
                ],
                "gitignore.match_file": [
                    5714
                ],
                "child.as_posix": [
                    5714
                ],
                "report.path_ignored": [
                    5722,
                    5715,
                    5739,
                    5727
                ],
                "normalized_path": [
                    5720,
                    5737,
                    5748,
                    5735
                ],
                "as_posix": [
                    5720
                ],
                "relative_to": [
                    5720
                ],
                "child.resolve": [
                    5720
                ],
                "child.is_symlink": [
                    5726
                ],
                "child.is_dir": [
                    5742,
                    5734
                ],
                "exclude_match": [
                    5737,
                    5738
                ],
                "exclude.search": [
                    5737
                ],
                "exclude_match.group": [
                    5738
                ],
                "child.is_file": [
                    5747
                ],
                "include_match": [
                    5748,
                    5749
                ],
                "include.search": [
                    5748
                ],
                "srcs": [
                    5763,
                    5766
                ],
                "resolve": [
                    5764,
                    5766
                ],
                "common_base": [
                    5769,
                    5770,
                    5766,
                    5767
                ],
                "common_base.is_dir": [
                    5767
                ],
                "directory": [
                    5770,
                    5771,
                    5772,
                    5774,
                    5775,
                    5777,
                    5778,
                    5780
                ],
                "common_base.parents": [
                    5770
                ],
                "exists": [
                    5771
                ],
                "is_dir": [
                    5774
                ],
                "is_file": [
                    5777
                ],
                "change_count": [
                    5791
                ],
                "same_count": [
                    5792
                ],
                "failure_count": [
                    5793
                ],
                "reformatted": [
                    5856,
                    5798,
                    5800,
                    5845,
                    5849
                ],
                "self.check": [
                    5834,
                    5844,
                    5798
                ],
                "self.diff": [
                    5844,
                    5798
                ],
                "self.verbose": [
                    5817,
                    5803,
                    5799
                ],
                "self.quiet": [
                    5799
                ],
                "self.change_count": [
                    5856,
                    5801,
                    5834,
                    5853,
                    5854
                ],
                "msg": [
                    5808,
                    5805,
                    5807
                ],
                "self.same_count": [
                    5809,
                    5858,
                    5859,
                    5860
                ],
                "message": [
                    5818,
                    5813
                ],
                "self.failure_count": [
                    5861,
                    5862,
                    5831,
                    5864,
                    5814
                ],
                "unchanged": [
                    5850,
                    5860,
                    5846
                ],
                "failed": [
                    5864,
                    5851,
                    5847
                ],
                "report.append": [
                    5863,
                    5860,
                    5855
                ],
                "click.style": [
                    5856,
                    5864
                ],
                "filename": [
                    5881,
                    5875,
                    5870
                ],
                "sys.version_info": [
                    5873,
                    6051,
                    5916,
                    5871
                ],
                "minor_version": [
                    5873,
                    5875
                ],
                "ast.parse": [
                    5875
                ],
                "ast": [
                    5889,
                    5890,
                    5892,
                    5893,
                    5895,
                    5896,
                    5898,
                    5899,
                    5869,
                    5934,
                    5935,
                    5905,
                    5875,
                    5940,
                    5943,
                    5917,
                    5950
                ],
                "SyntaxError": [
                    5882,
                    5876
                ],
                "feature_version": [
                    5881,
                    5879
                ],
                "ast3.parse": [
                    5881
                ],
                "ast3": [
                    5889,
                    5890,
                    5892,
                    5895,
                    5898,
                    5869,
                    5934,
                    5935,
                    5905,
                    5940,
                    5943,
                    5881,
                    5915
                ],
                "ast27.parse": [
                    5885
                ],
                "ast27": [
                    5889,
                    5890,
                    5892,
                    5895,
                    5869,
                    5934,
                    5935,
                    5905,
                    5940,
                    5943,
                    5915,
                    5885
                ],
                "ast.AST": [
                    5889,
                    5890,
                    5869,
                    5905,
                    5940,
                    5943
                ],
                "ast3.AST": [
                    5889,
                    5890,
                    5869,
                    5905,
                    5940,
                    5943
                ],
                "ast27.AST": [
                    5889,
                    5890,
                    5869,
                    5905,
                    5940,
                    5943
                ],
                "ast.Str": [
                    5892
                ],
                "ast3.Str": [
                    5892
                ],
                "ast27.Str": [
                    5892
                ],
                "ast.Bytes": [
                    5892
                ],
                "ast3.Bytes": [
                    5892
                ],
                "ast.Constant": [
                    5896,
                    5899,
                    5893,
                    5950
                ],
                "node.s": [
                    5893
                ],
                "ast.Num": [
                    5895
                ],
                "ast3.Num": [
                    5895
                ],
                "ast27.Num": [
                    5895
                ],
                "node.n": [
                    5896
                ],
                "ast.NameConstant": [
                    5898
                ],
                "ast3.NameConstant": [
                    5898
                ],
                "_fixup_ast_constants": [
                    5909
                ],
                "node.__class__.__name__": [
                    5959,
                    5911
                ],
                "node.__class__": [
                    5959,
                    5911
                ],
                "node._fields": [
                    5913
                ],
                "type_ignore_classes": [
                    5915,
                    5917,
                    5918
                ],
                "ast3.TypeIgnore": [
                    5915
                ],
                "ast27.TypeIgnore": [
                    5915
                ],
                "ast.TypeIgnore": [
                    5917
                ],
                "AttributeError": [
                    5923
                ],
                "item": [
                    5929,
                    5935,
                    5937,
                    5938,
                    5940,
                    5941
                ],
                "ast.Delete": [
                    5934
                ],
                "ast3.Delete": [
                    5934
                ],
                "ast27.Delete": [
                    5934
                ],
                "ast.Tuple": [
                    5935
                ],
                "ast3.Tuple": [
                    5935
                ],
                "ast27.Tuple": [
                    5935
                ],
                "item.elts": [
                    5937
                ],
                "_stringify_ast": [
                    5938,
                    5941,
                    5944,
                    5982,
                    5983
                ],
                "normalized": [
                    5954,
                    5956,
                    5957
                ],
                "value.__class__.__name__": [
                    5957
                ],
                "value.__class__": [
                    5957
                ],
                "src_ast": [
                    5965,
                    5982
                ],
                "parse_ast": [
                    5973,
                    5965
                ],
                "dst_ast": [
                    5973,
                    5983
                ],
                "log": [
                    5985,
                    5989,
                    5997,
                    6004,
                    5975,
                    5979
                ],
                "dump_to_file": [
                    5985,
                    5997,
                    5975
                ],
                "traceback.format_tb": [
                    5975
                ],
                "traceback": [
                    5975
                ],
                "exc.__traceback__": [
                    5975
                ],
                "src_ast_str": [
                    5984,
                    5985,
                    5982
                ],
                "dst_ast_str": [
                    5984,
                    5985,
                    5983
                ],
                "newdst": [
                    5995,
                    5996,
                    5999
                ],
                "tempfile.NamedTemporaryFile": [
                    6313,
                    6011
                ],
                "tempfile": [
                    6313,
                    6011
                ],
                "output": [
                    6014
                ],
                "f.name": [
                    6018,
                    6315
                ],
                "mypyc_attr": [
                    6008
                ],
                "contextmanager": [
                    6021
                ],
                "a_lines": [
                    6034,
                    6037
                ],
                "a.splitlines": [
                    6034
                ],
                "a": [
                    6034
                ],
                "b_lines": [
                    6035,
                    6037
                ],
                "b.splitlines": [
                    6035
                ],
                "b": [
                    6035
                ],
                "difflib.unified_diff": [
                    6037
                ],
                "difflib": [
                    6037
                ],
                "a_name": [
                    6037
                ],
                "b_name": [
                    6037
                ],
                "task.cancel": [
                    6045,
                    6061
                ],
                "all_tasks": [
                    6056,
                    6052,
                    6054
                ],
                "asyncio.all_tasks": [
                    6052
                ],
                "asyncio.Task.all_tasks": [
                    6054
                ],
                "asyncio.Task": [
                    6054
                ],
                "to_cancel": [
                    6056,
                    6057,
                    6060,
                    6063
                ],
                "task.done": [
                    6056
                ],
                "cf_logger": [
                    6069,
                    6070
                ],
                "logging.getLogger": [
                    6069
                ],
                "logging": [
                    6069,
                    6070
                ],
                "cf_logger.setLevel": [
                    6070
                ],
                "logging.CRITICAL": [
                    6070
                ],
                "loop.close": [
                    6071
                ],
                "regex.sub": [
                    6080
                ],
                "regex": [
                    6080,
                    6089,
                    6090,
                    6088
                ],
                "replacement": [
                    6080
                ],
                "compiled": [
                    6090,
                    6091
                ],
                "sequence": [
                    6096,
                    6097
                ],
                "element": [
                    6097,
                    6098
                ],
                "op": [
                    6113,
                    6109
                ],
                "cast": [
                    6109
                ],
                "enumerate_reversed": [
                    6111
                ],
                "call_count": [
                    6168,
                    6150,
                    6158
                ],
                "dot_count": [
                    6160,
                    6168,
                    6151
                ],
                "next.type": [
                    6162,
                    6155
                ],
                "second": [
                    6204,
                    6198
                ],
                "penultimate": [
                    6239,
                    6199
                ],
                "second.type": [
                    6204
                ],
                "remainder": [
                    6217,
                    6209,
                    6210,
                    6205
                ],
                "_index": [
                    6250,
                    6221,
                    6207
                ],
                "last.parent": [
                    6235,
                    6236
                ],
                "last.parent.type": [
                    6236
                ],
                "penultimate.type": [
                    6239
                ],
                "seen_other_brackets": [
                    6249,
                    6258,
                    6253
                ],
                "last.opening_bracket": [
                    6252
                ],
                "mode.get_cache_key": [
                    6264
                ],
                "cache_file": [
                    6272,
                    6273,
                    6276,
                    6309,
                    6313,
                    6315
                ],
                "get_cache_file": [
                    6272,
                    6309
                ],
                "cache_file.exists": [
                    6273
                ],
                "cache_file.open": [
                    6276
                ],
                "fobj": [
                    6276,
                    6278
                ],
                "pickle.load": [
                    6278
                ],
                "pickle": [
                    6314,
                    6278,
                    6279
                ],
                "pickle.UnpicklingError": [
                    6279
                ],
                "stat": [
                    6288,
                    6287
                ],
                "path.stat": [
                    6287
                ],
                "stat.st_mtime": [
                    6288
                ],
                "stat.st_size": [
                    6288
                ],
                "todo": [
                    6304,
                    6297,
                    6301
                ],
                "cache.get": [
                    6300
                ],
                "todo.add": [
                    6301
                ],
                "done.add": [
                    6303
                ],
                "CACHE_DIR.mkdir": [
                    6311
                ],
                "new_cache": [
                    6312,
                    6314
                ],
                "cache_file.parent": [
                    6313
                ],
                "pickle.dump": [
                    6314
                ],
                "os.replace": [
                    6315
                ],
                "ModuleNotFoundError": [
                    6334
                ],
                "module": [
                    6337,
                    6338,
                    6339
                ],
                "core": [
                    6337
                ],
                "_unicodefun": [
                    6337
                ],
                "hasattr": [
                    6338
                ],
                "module._verify_python3_env": [
                    6339
                ],
                "freeze_support": [
                    6343
                ],
                "patch_click": [
                    6344
                ],
                "main": [
                    6345
                ],
                "splitlines": [
                    6354
                ],
                "docstring.expandtabs": [
                    6354
                ],
                "stripped": [
                    6360,
                    6358,
                    6359
                ],
                "trimmed": [
                    6368,
                    6370,
                    6362,
                    6372
                ],
                "last_line_idx": [
                    6364,
                    6367
                ],
                "stripped_line": [
                    6368,
                    6366,
                    6367
                ],
                "rstrip": [
                    6366
                ],
                "trimmed.append": [
                    6368,
                    6370
                ],
                "__name__": [
                    6375
                ],
                "patched_main": [
                    6376
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    63
                ],
                "DEFAULT_LINE_LENGTH": [
                    240,
                    66,
                    341
                ],
                "DEFAULT_EXCLUDES": [
                    418,
                    67
                ],
                "DEFAULT_INCLUDES": [
                    68,
                    406
                ],
                "CACHE_DIR": [
                    6264,
                    69,
                    94,
                    6311
                ],
                "Path": [
                    640,
                    5764,
                    5766,
                    6285,
                    528,
                    531,
                    6291,
                    5795,
                    6307,
                    5811,
                    5686,
                    5816,
                    5697,
                    5698,
                    580,
                    69,
                    711,
                    5703,
                    90,
                    613,
                    6263,
                    5754
                ],
                "user_cache_dir": [
                    69
                ],
                "__version__": [
                    69,
                    445
                ],
                "STRING_PREFIX_CHARS": [
                    4613,
                    4614,
                    71,
                    4458,
                    4973,
                    4990,
                    4575
                ],
                "Final": [
                    1156,
                    1172,
                    1173,
                    1174,
                    1175,
                    1176,
                    1177,
                    1178,
                    1194,
                    1085,
                    1086,
                    71,
                    1096,
                    1098,
                    1099,
                    1107,
                    1123,
                    1124,
                    1125,
                    1132,
                    1139
                ],
                "FileContent": [
                    841,
                    75,
                    861,
                    926
                ],
                "Encoding": [
                    76,
                    926
                ],
                "NewLine": [
                    77,
                    926
                ],
                "Depth": [
                    1202,
                    78
                ],
                "NodeType": [
                    5411,
                    4462,
                    2319,
                    4270,
                    79,
                    1202
                ],
                "ParserState": [
                    80,
                    4270
                ],
                "LeafID": [
                    5601,
                    1252,
                    81,
                    4657,
                    1203,
                    5585,
                    1336,
                    5595
                ],
                "StringID": [
                    82,
                    2814
                ],
                "Priority": [
                    2368,
                    1252,
                    1260,
                    2382,
                    83,
                    1203,
                    5468
                ],
                "Index": [
                    3781,
                    3783,
                    3816,
                    139,
                    6094,
                    84,
                    6104,
                    3801,
                    6110
                ],
                "LN": [
                    5251,
                    5639,
                    5384,
                    5390,
                    2319,
                    1042,
                    5272,
                    1053,
                    2335,
                    2337,
                    2343,
                    4392,
                    2349,
                    2482,
                    5308,
                    4546,
                    5452,
                    5326,
                    85,
                    1880,
                    4441,
                    5336,
                    5468,
                    5220,
                    5350,
                    5225,
                    4462,
                    5368,
                    5241,
                    1018,
                    2301
                ],
                "Union": [
                    5889,
                    5890,
                    325,
                    137,
                    778,
                    5869,
                    5905,
                    1074,
                    85
                ],
                "Leaf": [
                    3584,
                    3076,
                    5641,
                    5647,
                    4624,
                    4625,
                    4626,
                    3092,
                    4628,
                    2071,
                    5149,
                    5150,
                    5662,
                    5153,
                    5156,
                    5675,
                    1074,
                    4667,
                    4668,
                    4669,
                    4671,
                    4672,
                    4161,
                    1602,
                    85,
                    5207,
                    4186,
                    5220,
                    1639,
                    3689,
                    4210,
                    3707,
                    4220,
                    5256,
                    1676,
                    5267,
                    1688,
                    4769,
                    1202,
                    1204,
                    3254,
                    1208,
                    4797,
                    5312,
                    5317,
                    5320,
                    4299,
                    4317,
                    5358,
                    5359,
                    4851,
                    1271,
                    2301,
                    2306,
                    1284,
                    3849,
                    1298,
                    4378,
                    4891,
                    1311,
                    5411,
                    2343,
                    4392,
                    4905,
                    1324,
                    1334,
                    1336,
                    5434,
                    1341,
                    4926,
                    2368,
                    4940,
                    2382,
                    4948,
                    5464,
                    1369,
                    1882,
                    4966,
                    5484,
                    1910,
                    4982,
                    3960,
                    5496,
                    4475,
                    1916,
                    2430,
                    4479,
                    4483,
                    5508,
                    1414,
                    3985,
                    4522,
                    4012,
                    2482,
                    4538,
                    5058,
                    2502,
                    1995,
                    1999,
                    4047,
                    1489,
                    2004,
                    6104,
                    6110,
                    5599,
                    5600,
                    2020,
                    2021,
                    2026,
                    1004,
                    4094
                ],
                "Node": [
                    5120,
                    5635,
                    5126,
                    5254,
                    1931,
                    5265,
                    1044,
                    5528,
                    2335,
                    1696,
                    1951,
                    1055,
                    1958,
                    5159,
                    5166,
                    1074,
                    1974,
                    5439,
                    1989,
                    5577,
                    5454,
                    85,
                    982,
                    2009,
                    5350,
                    2023,
                    1005,
                    5103,
                    1009,
                    5363
                ],
                "Transformer": [
                    2606,
                    4810,
                    86
                ],
                "Callable": [
                    4392,
                    6110,
                    86,
                    4487
                ],
                "Collection": [
                    4897,
                    4617,
                    4656,
                    4657,
                    4817,
                    86,
                    2583,
                    4826,
                    2746,
                    2623
                ],
                "Iterator": [
                    6022,
                    4617,
                    1932,
                    1042,
                    5906,
                    2584,
                    1053,
                    1951,
                    4898,
                    4131,
                    3237,
                    1958,
                    2728,
                    4905,
                    2482,
                    4658,
                    1974,
                    2746,
                    2623,
                    1989,
                    3783,
                    1864,
                    5703,
                    1995,
                    6094,
                    1999,
                    4817,
                    5585,
                    2004,
                    86,
                    1880,
                    2009,
                    4826,
                    2907,
                    6104,
                    6110,
                    3551,
                    5220,
                    2026,
                    4851,
                    1910,
                    1018,
                    1916
                ],
                "Timestamp": [
                    89,
                    87
                ],
                "FileSize": [
                    88,
                    89
                ],
                "CacheInfo": [
                    89,
                    90,
                    6285
                ],
                "Tuple": [
                    325,
                    485,
                    1767,
                    3781,
                    3783,
                    2814,
                    4270,
                    1808,
                    6094,
                    1202,
                    6291,
                    1749,
                    6110,
                    6104,
                    568,
                    89,
                    926,
                    2815
                ],
                "Cache": [
                    6307,
                    6278,
                    655,
                    593,
                    6291,
                    90,
                    6267
                ],
                "Dict": [
                    199,
                    4270,
                    1202,
                    1203,
                    276,
                    1336,
                    90,
                    315,
                    2815
                ],
                "out": [
                    512,
                    545,
                    1057,
                    1063,
                    5800,
                    1066,
                    1070,
                    1071,
                    5808,
                    562,
                    5818,
                    91,
                    575
                ],
                "partial": [
                    2048,
                    2051,
                    2052,
                    2053,
                    2054,
                    2043,
                    2055,
                    2056,
                    2057,
                    2058,
                    2042,
                    91,
                    92,
                    2046,
                    2047
                ],
                "click.secho": [
                    563,
                    91,
                    92
                ],
                "click": [
                    388,
                    393,
                    398,
                    403,
                    287,
                    415,
                    427,
                    302,
                    563,
                    436,
                    311,
                    568,
                    445,
                    446,
                    449,
                    325,
                    454,
                    456,
                    335,
                    336,
                    337,
                    468,
                    470,
                    345,
                    91,
                    348,
                    92,
                    5856,
                    356,
                    5864,
                    365,
                    373,
                    379
                ],
                "err": [
                    519,
                    524,
                    492,
                    497,
                    5813,
                    6043,
                    92,
                    542
                ],
                "pygram.initialize": [
                    94
                ],
                "pygram": [
                    961,
                    963,
                    972,
                    976,
                    948,
                    950,
                    952,
                    954,
                    94,
                    95
                ],
                "syms": [
                    5120,
                    5127,
                    4105,
                    5645,
                    2063,
                    5135,
                    5651,
                    5140,
                    5658,
                    5673,
                    2091,
                    2092,
                    2093,
                    1087,
                    1088,
                    1089,
                    1090,
                    1091,
                    1092,
                    1093,
                    1094,
                    2115,
                    2116,
                    2117,
                    2118,
                    2122,
                    2133,
                    2138,
                    6236,
                    95,
                    2146,
                    1126,
                    1127,
                    1128,
                    1129,
                    1130,
                    2157,
                    1133,
                    1134,
                    1135,
                    1136,
                    2162,
                    1137,
                    1140,
                    1141,
                    1142,
                    2167,
                    1143,
                    1144,
                    1145,
                    1146,
                    1147,
                    2173,
                    1148,
                    1149,
                    1152,
                    1153,
                    1154,
                    1150,
                    1151,
                    2184,
                    2191,
                    2208,
                    1697,
                    5281,
                    1700,
                    5284,
                    2221,
                    2225,
                    2233,
                    2240,
                    5312,
                    2244,
                    2252,
                    2257,
                    5329,
                    2262,
                    2272,
                    2273,
                    2277,
                    2283,
                    5363,
                    2295,
                    5370,
                    5372,
                    4870,
                    4874,
                    5387,
                    5392,
                    5398,
                    5423,
                    2358,
                    4934,
                    4935,
                    5454,
                    5462,
                    2398,
                    5474,
                    2406,
                    2426,
                    3972,
                    2438,
                    5513,
                    2442,
                    2451,
                    3998,
                    2463,
                    5549,
                    5556,
                    4024,
                    5560,
                    5569,
                    4060,
                    2016,
                    2023,
                    1005,
                    2029,
                    4081
                ],
                "pygram.python_symbols": [
                    95
                ],
                "CannotTransform": [
                    2758,
                    2664,
                    106,
                    138,
                    2764,
                    2922,
                    4369,
                    2676,
                    2774,
                    4374
                ],
                "T": [
                    1018,
                    1050,
                    137,
                    138,
                    6094,
                    114,
                    1015,
                    1042,
                    118,
                    119,
                    122,
                    1053
                ],
                "TypeVar": [
                    114,
                    115
                ],
                "E": [
                    130,
                    137,
                    115,
                    126,
                    127
                ],
                "Generic": [
                    126,
                    118,
                    1015
                ],
                "self._value": [
                    120,
                    123
                ],
                "self": [
                    2048,
                    2051,
                    2052,
                    2053,
                    2054,
                    2055,
                    1544,
                    2056,
                    2057,
                    2058,
                    1036,
                    2059,
                    2060,
                    3598,
                    1040,
                    1555,
                    1046,
                    3606,
                    1054,
                    1569,
                    1058,
                    3619,
                    1060,
                    4345,
                    1062,
                    3110,
                    1585,
                    1586,
                    1592,
                    1593,
                    2047,
                    1600,
                    3651,
                    1604,
                    1610,
                    1611,
                    1612,
                    1613,
                    5844,
                    1615,
                    1618,
                    1621,
                    1622,
                    1623,
                    1627,
                    1628,
                    1629,
                    3675,
                    1636,
                    3686,
                    1643,
                    3691,
                    1651,
                    120,
                    1656,
                    3077,
                    123,
                    3705,
                    128,
                    3713,
                    131,
                    1667,
                    1672,
                    1673,
                    1678,
                    1682,
                    1683,
                    1684,
                    1690,
                    5798,
                    5799,
                    5801,
                    5834,
                    5803,
                    1708,
                    1709,
                    1710,
                    5809,
                    178,
                    1715,
                    1718,
                    1719,
                    5814,
                    5817,
                    1724,
                    1731,
                    5831,
                    2760,
                    4296,
                    1226,
                    1227,
                    4297,
                    1229,
                    1230,
                    2765,
                    1232,
                    1233,
                    1234,
                    1235,
                    1236,
                    2771,
                    1238,
                    3794,
                    1240,
                    4313,
                    1242,
                    1243,
                    1244,
                    1245,
                    1246,
                    1755,
                    1760,
                    1761,
                    1250,
                    1763,
                    1764,
                    5853,
                    3302,
                    5854,
                    5856,
                    3937,
                    1258,
                    1770,
                    3307,
                    5860,
                    5861,
                    5862,
                    3824,
                    1265,
                    3825,
                    4336,
                    1268,
                    245,
                    1269,
                    1780,
                    248,
                    1781,
                    1782,
                    1787,
                    4342,
                    4344,
                    1278,
                    1279,
                    256,
                    254,
                    255,
                    1790,
                    1791,
                    1793,
                    1798,
                    1287,
                    1288,
                    1799,
                    3850,
                    4356,
                    1292,
                    1293,
                    4357,
                    4361,
                    4363,
                    1810,
                    1811,
                    2834,
                    2835,
                    1815,
                    4346,
                    1305,
                    1306,
                    1818,
                    1819,
                    3868,
                    1824,
                    1825,
                    1314,
                    1315,
                    2850,
                    2852,
                    1318,
                    1319,
                    1830,
                    1831,
                    1833,
                    1834,
                    2853,
                    5859,
                    1326,
                    1839,
                    2862,
                    2863,
                    5864,
                    4338,
                    1355,
                    1356,
                    1357,
                    1872,
                    1361,
                    1873,
                    1363,
                    1364,
                    1365,
                    1366,
                    1367,
                    1876,
                    1877,
                    1883,
                    3936,
                    2909,
                    3934,
                    1375,
                    1376,
                    1887,
                    1890,
                    1379,
                    1891,
                    2915,
                    3935,
                    1895,
                    1384,
                    1897,
                    1898,
                    3328,
                    3938,
                    1389,
                    1901,
                    1902,
                    3945,
                    3948,
                    1394,
                    1907,
                    1399,
                    1913,
                    1914,
                    1405,
                    1406,
                    1407,
                    1921,
                    3459,
                    4351,
                    1413,
                    1925,
                    1928,
                    4352,
                    1423,
                    1427,
                    1428,
                    1431,
                    1433,
                    1947,
                    1949,
                    1953,
                    1954,
                    1956,
                    1447,
                    2985,
                    1962,
                    1963,
                    1965,
                    1966,
                    1967,
                    1456,
                    1457,
                    1970,
                    1971,
                    1972,
                    5858,
                    1463,
                    1976,
                    1468,
                    1980,
                    1470,
                    1475,
                    1987,
                    1992,
                    1993,
                    1484,
                    1997,
                    1489,
                    2001,
                    2002,
                    2005,
                    2006,
                    2007,
                    1506,
                    1507,
                    1508,
                    1509,
                    1510,
                    1511,
                    1512,
                    2024,
                    3566,
                    1519,
                    1520,
                    1521,
                    2031,
                    2036,
                    1526,
                    2040,
                    2042,
                    2043,
                    2046,
                    1535
                ],
                "value": [
                    4994,
                    3972,
                    4997,
                    4991,
                    5146,
                    3613,
                    4000,
                    5922,
                    3619,
                    294,
                    295,
                    296,
                    5928,
                    5929,
                    300,
                    3629,
                    303,
                    3254,
                    2999,
                    4024,
                    5943,
                    5944,
                    3392,
                    321,
                    5952,
                    5954,
                    5956,
                    5957,
                    3658,
                    1618,
                    4180,
                    1622,
                    1623,
                    2518,
                    1628,
                    1629,
                    3038,
                    3554,
                    3941,
                    1510,
                    3559,
                    1512,
                    3566,
                    1521,
                    3057,
                    120,
                    4990,
                    1407
                ],
                "self._e": [
                    128,
                    131
                ],
                "e": [
                    128,
                    5722,
                    303
                ],
                "Result": [
                    137,
                    138
                ],
                "Ok": [
                    4224,
                    137,
                    3736,
                    2968,
                    3354,
                    3741,
                    3233,
                    3745,
                    3750,
                    3111,
                    3642,
                    3265,
                    4175,
                    2900,
                    2903,
                    3549,
                    2912,
                    3171,
                    2916,
                    4204,
                    3697,
                    3955,
                    2932
                ],
                "Err": [
                    2919,
                    3303,
                    137,
                    2762,
                    2986,
                    3308,
                    4369,
                    2930,
                    2772,
                    4375
                ],
                "TResult": [
                    4131,
                    3237,
                    2728,
                    138,
                    139,
                    3114,
                    3313,
                    2937,
                    2970,
                    2907,
                    3551
                ],
                "TMatchResult": [
                    3301,
                    2889,
                    139,
                    3191,
                    3512,
                    3930,
                    3291,
                    2718
                ],
                "Enum": [
                    168,
                    162,
                    142,
                    184
                ],
                "NO": [
                    2182,
                    2189,
                    143,
                    2194,
                    2200,
                    2203,
                    2077,
                    2206,
                    163,
                    2084,
                    2211,
                    2216,
                    2219,
                    2095,
                    2223,
                    2227,
                    2101,
                    2231,
                    2105,
                    2235,
                    2108,
                    2238,
                    2247,
                    2120,
                    2250,
                    2255,
                    2130,
                    2260,
                    2134,
                    2267,
                    2141,
                    2275,
                    2278,
                    2152,
                    2281,
                    2155,
                    2286,
                    2160,
                    2165,
                    2293,
                    2296,
                    2170,
                    2174
                ],
                "YES": [
                    144,
                    165
                ],
                "DIFF": [
                    145
                ],
                "CHECK": [
                    146
                ],
                "COLOR_DIFF": [
                    147
                ],
                "check": [
                    153,
                    5787,
                    489,
                    526
                ],
                "diff": [
                    833,
                    5788,
                    5985,
                    741,
                    489,
                    526,
                    5998,
                    5999,
                    153,
                    156,
                    159
                ],
                "cls.CHECK": [
                    154
                ],
                "cls": [
                    154,
                    157,
                    159
                ],
                "color": [
                    489,
                    156
                ],
                "cls.COLOR_DIFF": [
                    157
                ],
                "cls.DIFF": [
                    159
                ],
                "cls.YES": [
                    159
                ],
                "CACHED": [
                    164
                ],
                "PY27": [
                    169
                ],
                "PY33": [
                    170
                ],
                "PY34": [
                    171
                ],
                "PY35": [
                    172
                ],
                "PY36": [
                    173
                ],
                "PY37": [
                    174
                ],
                "PY38": [
                    175
                ],
                "TargetVersion.PY27": [
                    200,
                    178
                ],
                "TargetVersion": [
                    265,
                    943,
                    178,
                    181,
                    326,
                    199,
                    200,
                    201,
                    202,
                    203,
                    332,
                    5581,
                    5577,
                    208,
                    982,
                    216,
                    473,
                    348,
                    224,
                    239
                ],
                "PY36_VERSIONS": [
                    501,
                    181
                ],
                "TargetVersion.PY36": [
                    208,
                    181
                ],
                "TargetVersion.PY37": [
                    216,
                    181
                ],
                "TargetVersion.PY38": [
                    224,
                    181
                ],
                "UNICODE_LITERALS": [
                    186
                ],
                "F_STRINGS": [
                    187
                ],
                "NUMERIC_UNDERSCORES": [
                    188
                ],
                "TRAILING_COMMA_IN_CALL": [
                    189
                ],
                "TRAILING_COMMA_IN_DEF": [
                    190
                ],
                "ASYNC_IDENTIFIERS": [
                    193
                ],
                "ASYNC_KEYWORDS": [
                    194
                ],
                "ASSIGNMENT_EXPRESSIONS": [
                    195
                ],
                "POS_ONLY_ARGUMENTS": [
                    196
                ],
                "VERSION_TO_FEATURES": [
                    266,
                    5581,
                    199
                ],
                "Set": [
                    640,
                    5635,
                    5637,
                    265,
                    1931,
                    528,
                    6291,
                    5528,
                    5537,
                    5411,
                    943,
                    199,
                    5577,
                    5585,
                    5595,
                    5601,
                    613,
                    239,
                    5103,
                    2041
                ],
                "Feature": [
                    900,
                    4872,
                    265,
                    4617,
                    4876,
                    909,
                    2583,
                    5528,
                    4897,
                    5537,
                    5542,
                    5546,
                    5550,
                    4656,
                    5553,
                    5561,
                    2746,
                    5563,
                    2623,
                    199,
                    200,
                    201,
                    202,
                    969,
                    204,
                    205,
                    206,
                    974,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    4817,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    4826,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232
                ],
                "TargetVersion.PY33": [
                    201
                ],
                "TargetVersion.PY34": [
                    202
                ],
                "TargetVersion.PY35": [
                    203
                ],
                "Feature.ASYNC_IDENTIFIERS": [
                    200,
                    201,
                    202,
                    969,
                    206,
                    214
                ],
                "Feature.UNICODE_LITERALS": [
                    225,
                    900,
                    201,
                    202,
                    204,
                    209,
                    217
                ],
                "Feature.TRAILING_COMMA_IN_CALL": [
                    228,
                    4876,
                    205,
                    909,
                    212,
                    5563,
                    220
                ],
                "Feature.F_STRINGS": [
                    218,
                    210,
                    226,
                    5542
                ],
                "Feature.NUMERIC_UNDERSCORES": [
                    5546,
                    211,
                    219,
                    227
                ],
                "Feature.TRAILING_COMMA_IN_DEF": [
                    229,
                    4872,
                    909,
                    213,
                    5561,
                    221
                ],
                "Feature.ASYNC_KEYWORDS": [
                    974,
                    222,
                    230
                ],
                "Feature.ASSIGNMENT_EXPRESSIONS": [
                    5553,
                    231
                ],
                "Feature.POS_ONLY_ARGUMENTS": [
                    232,
                    5550
                ],
                "target_versions": [
                    969,
                    266,
                    974,
                    239,
                    944,
                    987,
                    957
                ],
                "field": [
                    5922,
                    1861,
                    5926,
                    5933,
                    239,
                    1202,
                    1203,
                    1747,
                    1205,
                    1206,
                    1334,
                    1336,
                    1337,
                    5913,
                    5951
                ],
                "line_length": [
                    2624,
                    2625,
                    2626,
                    5604,
                    6212,
                    2599,
                    4711,
                    4715,
                    6253,
                    2671,
                    240,
                    4721,
                    2612,
                    6132,
                    2714,
                    507
                ],
                "string_normalization": [
                    241
                ],
                "is_pyi": [
                    1744,
                    242,
                    1859
                ],
                "self.target_versions": [
                    248,
                    245
                ],
                "version_str": [
                    251,
                    253,
                    246
                ],
                "join": [
                    258,
                    6372,
                    773,
                    5192,
                    5866,
                    6036,
                    246,
                    5975,
                    923,
                    5982,
                    5983
                ],
                "version.value": [
                    247
                ],
                "version": [
                    266,
                    5581,
                    247,
                    248,
                    957
                ],
                "v.value": [
                    248
                ],
                "v": [
                    2049,
                    2051,
                    2052,
                    2053,
                    2054,
                    2055,
                    2056,
                    2057,
                    2058,
                    283,
                    2082,
                    1079,
                    1082,
                    4930,
                    4934,
                    4935,
                    332,
                    4944,
                    4945,
                    348,
                    248,
                    1258,
                    2289,
                    2040,
                    2042,
                    2044,
                    2046,
                    2047
                ],
                "parts": [
                    258,
                    252
                ],
                "self.line_length": [
                    3459,
                    3945,
                    3598,
                    3606,
                    254
                ],
                "self.string_normalization": [
                    255
                ],
                "self.is_pyi": [
                    256,
                    1953,
                    1830,
                    1770,
                    1962,
                    1970,
                    1782
                ],
                "dataclass": [
                    1734,
                    2505,
                    237,
                    1197,
                    1329,
                    5783,
                    1049,
                    1851,
                    2781,
                    2686
                ],
                "FileMode": [
                    262
                ],
                "Mode": [
                    643,
                    580,
                    613,
                    262,
                    805,
                    6307,
                    713,
                    841,
                    5993,
                    6263,
                    505,
                    6267,
                    861
                ],
                "feature": [
                    5572,
                    266,
                    908,
                    909,
                    910,
                    5561,
                    5563,
                    5567
                ],
                "path_project_root": [
                    272,
                    271
                ],
                "find_project_root": [
                    527,
                    271
                ],
                "path_search_start": [
                    271
                ],
                "path_pyproject_toml": [
                    272,
                    273
                ],
                "path_pyproject_toml.is_file": [
                    273
                ],
                "Optional": [
                    269,
                    2319,
                    3985,
                    5265,
                    4628,
                    2335,
                    288,
                    2337,
                    287,
                    3752,
                    1324,
                    4012,
                    1204,
                    4671,
                    2368,
                    4672,
                    3781,
                    2382,
                    4047,
                    5198,
                    1489,
                    1745,
                    471,
                    5336,
                    5599,
                    5600,
                    486,
                    5225,
                    4462,
                    3960,
                    2301,
                    4094
                ],
                "pyproject_toml": [
                    281,
                    282
                ],
                "toml.load": [
                    281
                ],
                "toml": [
                    281,
                    301
                ],
                "path_config": [
                    281
                ],
                "config": [
                    512,
                    300,
                    306,
                    309,
                    282,
                    283,
                    318,
                    511
                ],
                "get": [
                    282
                ],
                "pyproject_toml.get": [
                    282
                ],
                "replace": [
                    4976,
                    283,
                    724
                ],
                "k.replace": [
                    283
                ],
                "k": [
                    1258,
                    283
                ],
                "config.items": [
                    283
                ],
                "Any": [
                    315,
                    276,
                    715,
                    4487
                ],
                "click.Context": [
                    568,
                    325,
                    470,
                    287
                ],
                "click.Parameter": [
                    325,
                    287
                ],
                "find_pyproject_toml": [
                    295
                ],
                "ctx.params.get": [
                    295
                ],
                "ctx.params": [
                    295
                ],
                "ctx": [
                    320,
                    576,
                    546,
                    515,
                    295,
                    520,
                    493,
                    525,
                    529,
                    564,
                    316,
                    317
                ],
                "parse_pyproject_toml": [
                    300
                ],
                "toml.TomlDecodeError": [
                    301
                ],
                "click.FileError": [
                    302
                ],
                "target_version": [
                    490,
                    309,
                    310,
                    495
                ],
                "config.get": [
                    309
                ],
                "click.BadOptionUsage": [
                    311
                ],
                "default_map": [
                    320,
                    315,
                    317,
                    318
                ],
                "ctx.default_map": [
                    320,
                    316,
                    317
                ],
                "default_map.update": [
                    317,
                    318
                ],
                "click.Option": [
                    325
                ],
                "val.upper": [
                    332
                ],
                "val": [
                    332
                ],
                "List": [
                    5639,
                    1676,
                    2319,
                    4624,
                    3985,
                    4625,
                    4626,
                    2837,
                    4378,
                    4769,
                    4522,
                    4012,
                    2606,
                    943,
                    1205,
                    1206,
                    1334,
                    1336,
                    5689,
                    3642,
                    4667,
                    4668,
                    4669,
                    3781,
                    326,
                    4299,
                    4047,
                    1747,
                    473,
                    2524,
                    2526,
                    2660,
                    3960,
                    4094
                ],
                "write_back": [
                    656,
                    667,
                    675,
                    552,
                    558,
                    827,
                    700,
                    829,
                    699,
                    834,
                    590,
                    594,
                    600,
                    603,
                    604,
                    734,
                    737,
                    743,
                    489,
                    627
                ],
                "WriteBack.from_configuration": [
                    489
                ],
                "WriteBack": [
                    737,
                    642,
                    700,
                    580,
                    613,
                    805,
                    827,
                    834,
                    489,
                    714,
                    829,
                    667,
                    656,
                    594,
                    603,
                    604,
                    699,
                    734
                ],
                "py36": [
                    496,
                    491
                ],
                "ctx.exit": [
                    576,
                    546,
                    515,
                    520,
                    525,
                    493,
                    564
                ],
                "versions": [
                    896,
                    900,
                    910,
                    495,
                    501,
                    504,
                    506,
                    894
                ],
                "mode": [
                    6272,
                    514,
                    901,
                    902,
                    904,
                    657,
                    918,
                    919,
                    675,
                    6309,
                    553,
                    558,
                    817,
                    707,
                    590,
                    595,
                    724,
                    851,
                    600,
                    857,
                    730,
                    606,
                    5995,
                    628,
                    6264,
                    505,
                    890,
                    893,
                    894
                ],
                "pyi": [
                    508
                ],
                "skip_string_normalization": [
                    509
                ],
                "verbose": [
                    544,
                    5790,
                    526,
                    529,
                    561,
                    574,
                    511
                ],
                "code": [
                    513,
                    514,
                    1011,
                    1012,
                    1080,
                    1081,
                    1082
                ],
                "format_str": [
                    514,
                    851,
                    5995
                ],
                "include_regex": [
                    517,
                    535
                ],
                "re_compile_maybe_verbose": [
                    522,
                    517
                ],
                "include": [
                    5744,
                    5748,
                    517,
                    519
                ],
                "re.error": [
                    523,
                    518
                ],
                "re": [
                    3872,
                    3873,
                    5954,
                    518,
                    5030,
                    3017,
                    6090,
                    523,
                    3565,
                    3566,
                    4973,
                    5008,
                    5009,
                    3794,
                    5010,
                    5037,
                    3064,
                    3868
                ],
                "exclude_regex": [
                    522,
                    535
                ],
                "exclude": [
                    5737,
                    522,
                    1258,
                    524,
                    5520,
                    5521,
                    5744
                ],
                "report": [
                    526,
                    660,
                    535,
                    554,
                    558,
                    562,
                    563,
                    564,
                    694,
                    703,
                    5715,
                    5722,
                    5852,
                    5727,
                    607,
                    609,
                    5855,
                    5860,
                    5863,
                    5866,
                    5739,
                    5744,
                    629
                ],
                "Report": [
                    526
                ],
                "quiet": [
                    544,
                    526,
                    529,
                    561,
                    5789,
                    574
                ],
                "root": [
                    5728,
                    5720,
                    5711,
                    527,
                    5744,
                    535,
                    5688
                ],
                "src": [
                    5766,
                    527,
                    529,
                    530,
                    659,
                    660,
                    6298,
                    6299,
                    6300,
                    6301,
                    6303,
                    675,
                    932,
                    677,
                    678,
                    5800,
                    6312,
                    5805,
                    814,
                    815,
                    5807,
                    817,
                    690,
                    5813,
                    694,
                    573,
                    702,
                    703,
                    833,
                    589,
                    5965,
                    723,
                    596,
                    726,
                    727,
                    600,
                    606,
                    607,
                    735,
                    609,
                    739,
                    740,
                    5998,
                    5875,
                    5881,
                    5885
                ],
                "sources": [
                    548,
                    550,
                    678,
                    6312,
                    558,
                    528,
                    625,
                    658,
                    533,
                    661,
                    6298,
                    540,
                    543
                ],
                "path_empty": [
                    529
                ],
                "s": [
                    5856,
                    5859,
                    5860,
                    5862,
                    542,
                    5864,
                    530,
                    531,
                    538,
                    5854
                ],
                "p": [
                    2184,
                    2187,
                    2191,
                    531,
                    532,
                    2198,
                    535,
                    538,
                    2295,
                    540,
                    2208,
                    2081,
                    2214,
                    2089,
                    2090,
                    2221,
                    5422,
                    5423,
                    2225,
                    5426,
                    2099,
                    2229,
                    5429,
                    5431,
                    2233,
                    2240,
                    4928,
                    2243,
                    2244,
                    4934,
                    4935,
                    2252,
                    2257,
                    2262,
                    2265,
                    2283,
                    2157,
                    2162,
                    1269,
                    2167
                ],
                "p.is_dir": [
                    532
                ],
                "sources.update": [
                    533
                ],
                "gen_python_files_in_dir": [
                    534,
                    5743
                ],
                "get_gitignore": [
                    535
                ],
                "p.is_file": [
                    538
                ],
                "sources.add": [
                    540
                ],
                "reformat_one": [
                    549
                ],
                "sources.pop": [
                    550
                ],
                "fast": [
                    675,
                    551,
                    590,
                    558,
                    817,
                    626,
                    855,
                    600,
                    730
                ],
                "reformat_many": [
                    557
                ],
                "report.return_code": [
                    562,
                    564
                ],
                "click.command": [
                    335
                ],
                "click.option": [
                    356,
                    388,
                    454,
                    393,
                    427,
                    365,
                    398,
                    336,
                    337,
                    403,
                    436,
                    373,
                    345,
                    379,
                    415
                ],
                "click.Choice": [
                    348
                ],
                "v.name.lower": [
                    348
                ],
                "v.name": [
                    348
                ],
                "target_version_option_callback": [
                    349
                ],
                "click.version_option": [
                    445
                ],
                "click.argument": [
                    446
                ],
                "click.Path": [
                    456,
                    449
                ],
                "read_pyproject_toml": [
                    465
                ],
                "click.pass_context": [
                    468
                ],
                "changed": [
                    700,
                    5797,
                    588,
                    5804,
                    591,
                    703,
                    598,
                    599,
                    696,
                    602,
                    603,
                    604,
                    607
                ],
                "Changed.NO": [
                    5804,
                    588,
                    696,
                    700,
                    604
                ],
                "Changed": [
                    700,
                    5795,
                    5797,
                    588,
                    5804,
                    591,
                    660,
                    598,
                    599,
                    696,
                    602,
                    603,
                    604
                ],
                "src.is_file": [
                    589
                ],
                "format_stdin_to_stdout": [
                    590
                ],
                "Changed.YES": [
                    696,
                    602,
                    5797,
                    591
                ],
                "cache": [
                    707,
                    6278,
                    6312,
                    6282,
                    655,
                    593,
                    657,
                    595,
                    658,
                    597,
                    6300,
                    606
                ],
                "WriteBack.DIFF": [
                    737,
                    656,
                    594,
                    667,
                    829
                ],
                "read_cache": [
                    657,
                    595
                ],
                "res_src": [
                    596,
                    597
                ],
                "src.resolve": [
                    6312,
                    6299,
                    596
                ],
                "get_cache_info": [
                    6312,
                    6300,
                    597
                ],
                "Changed.CACHED": [
                    603,
                    660,
                    598,
                    599
                ],
                "format_file_in_place": [
                    675,
                    599
                ],
                "WriteBack.YES": [
                    827,
                    603,
                    699,
                    734
                ],
                "WriteBack.CHECK": [
                    700,
                    604
                ],
                "write_cache": [
                    707,
                    606
                ],
                "report.done": [
                    703,
                    660,
                    607
                ],
                "report.failed": [
                    609,
                    694
                ],
                "exc": [
                    609,
                    1000,
                    1002,
                    5969,
                    5975,
                    5977
                ],
                "loop": [
                    705,
                    674,
                    616,
                    6056,
                    682,
                    683,
                    6062,
                    623,
                    6063,
                    630,
                    6071,
                    635
                ],
                "asyncio.get_event_loop": [
                    616
                ],
                "asyncio": [
                    6048,
                    673,
                    705,
                    6052,
                    645,
                    6054,
                    616,
                    6063,
                    688
                ],
                "worker_count": [
                    617,
                    620,
                    621
                ],
                "os.cpu_count": [
                    617
                ],
                "os": [
                    617,
                    6315
                ],
                "sys.platform": [
                    618
                ],
                "sys": [
                    6051,
                    618,
                    748,
                    814,
                    5871,
                    4848,
                    5873,
                    1524,
                    6356,
                    825,
                    6363,
                    5916
                ],
                "executor": [
                    675,
                    636,
                    621,
                    631
                ],
                "ProcessPoolExecutor": [
                    621
                ],
                "loop.run_until_complete": [
                    6062,
                    623
                ],
                "schedule_formatting": [
                    624
                ],
                "shutdown": [
                    635
                ],
                "executor.shutdown": [
                    636
                ],
                "asyncio.AbstractEventLoop": [
                    6048,
                    645
                ],
                "Executor": [
                    646
                ],
                "cached": [
                    658,
                    659
                ],
                "filter_cached": [
                    658
                ],
                "cancelled": [
                    664,
                    705,
                    692,
                    704
                ],
                "sources_to_cache": [
                    665,
                    706,
                    707,
                    702
                ],
                "lock": [
                    746,
                    666,
                    675,
                    671
                ],
                "manager": [
                    670,
                    671
                ],
                "Manager": [
                    670
                ],
                "manager.Lock": [
                    671
                ],
                "tasks": [
                    672,
                    690,
                    6044,
                    680
                ],
                "asyncio.ensure_future": [
                    673
                ],
                "loop.run_in_executor": [
                    674
                ],
                "pending": [
                    680,
                    682,
                    683,
                    687,
                    688
                ],
                "Iterable": [
                    6307,
                    1252,
                    680,
                    2827,
                    6291,
                    982,
                    6041,
                    5754
                ],
                "tasks.keys": [
                    680
                ],
                "loop.add_signal_handler": [
                    682,
                    683
                ],
                "signal.SIGINT": [
                    682
                ],
                "signal": [
                    682,
                    683
                ],
                "cancel": [
                    682,
                    683
                ],
                "signal.SIGTERM": [
                    683
                ],
                "done": [
                    6304,
                    688,
                    689,
                    6297,
                    6303
                ],
                "_": [
                    688,
                    1414
                ],
                "asyncio.wait": [
                    688
                ],
                "asyncio.FIRST_COMPLETED": [
                    688
                ],
                "task": [
                    6056,
                    6060,
                    6061,
                    689,
                    690,
                    691,
                    692,
                    693,
                    694,
                    696,
                    6044,
                    6045
                ],
                "tasks.pop": [
                    690
                ],
                "task.cancelled": [
                    691
                ],
                "cancelled.append": [
                    692
                ],
                "task.exception": [
                    693,
                    694
                ],
                "task.result": [
                    696
                ],
                "sources_to_cache.append": [
                    702
                ],
                "asyncio.gather": [
                    705,
                    6063
                ],
                "WriteBack.NO": [
                    714,
                    805
                ],
                "src.suffix": [
                    723
                ],
                "then": [
                    739,
                    813,
                    726,
                    831
                ],
                "datetime.utcfromtimestamp": [
                    726
                ],
                "datetime": [
                    830,
                    738,
                    813,
                    726
                ],
                "st_mtime": [
                    726
                ],
                "src.stat": [
                    726
                ],
                "buf": [
                    728,
                    727
                ],
                "src_contents": [
                    741,
                    848,
                    851,
                    852,
                    856,
                    728,
                    857,
                    730,
                    890
                ],
                "encoding": [
                    933,
                    935,
                    939,
                    940,
                    749,
                    814,
                    728,
                    825,
                    735
                ],
                "newline": [
                    937,
                    940,
                    814,
                    750,
                    728,
                    825,
                    735
                ],
                "decode_bytes": [
                    728,
                    814
                ],
                "buf.read": [
                    728
                ],
                "dst_contents": [
                    736,
                    923,
                    741,
                    913,
                    851,
                    852,
                    915,
                    856,
                    857,
                    730,
                    891,
                    858,
                    922
                ],
                "format_file_contents": [
                    817,
                    730
                ],
                "NothingChanged": [
                    849,
                    731,
                    820,
                    853
                ],
                "f": [
                    6017,
                    6018,
                    791,
                    792,
                    797,
                    801,
                    6313,
                    6314,
                    6315,
                    824,
                    828,
                    836,
                    837,
                    838,
                    735,
                    736,
                    747,
                    753,
                    754,
                    755,
                    6013,
                    6015
                ],
                "f.write": [
                    736,
                    6017,
                    837,
                    754,
                    828,
                    6015
                ],
                "WriteBack.COLOR_DIFF": [
                    737,
                    834,
                    829
                ],
                "now": [
                    832,
                    738,
                    740,
                    830
                ],
                "datetime.utcnow": [
                    738,
                    813,
                    830
                ],
                "src_name": [
                    833,
                    739,
                    741,
                    831
                ],
                "dst_name": [
                    832,
                    833,
                    740,
                    741
                ],
                "diff_contents": [
                    744,
                    754,
                    741
                ],
                "write_back.COLOR_DIFF": [
                    743
                ],
                "color_diff": [
                    744,
                    835
                ],
                "nullcontext": [
                    746
                ],
                "io.TextIOWrapper": [
                    777,
                    778,
                    747,
                    939,
                    824
                ],
                "io": [
                    932,
                    777,
                    778,
                    747,
                    939,
                    824
                ],
                "sys.stdout.buffer": [
                    825,
                    748
                ],
                "sys.stdout": [
                    825,
                    748
                ],
                "wrap_stream_for_windows": [
                    753,
                    836
                ],
                "f.detach": [
                    755,
                    797,
                    838
                ],
                "lines": [
                    6016,
                    898,
                    772,
                    773,
                    912,
                    933,
                    934,
                    937,
                    5689,
                    5692,
                    5693,
                    2625,
                    2626,
                    2627,
                    6354,
                    6357,
                    6362,
                    6364,
                    6365,
                    995,
                    997,
                    762,
                    763,
                    6014,
                    6015
                ],
                "contents.split": [
                    762
                ],
                "contents": [
                    762
                ],
                "i": [
                    772,
                    4108,
                    4111,
                    3099,
                    3100,
                    3103,
                    3104,
                    4792,
                    4793,
                    4027,
                    4796,
                    4797,
                    4030,
                    2894,
                    2897,
                    2898,
                    2900,
                    2903,
                    6365,
                    6367,
                    4065,
                    3811,
                    4068,
                    3822,
                    3824,
                    3825,
                    3827,
                    763
                ],
                "line": [
                    6145,
                    3599,
                    4629,
                    3098,
                    3610,
                    3614,
                    2591,
                    2592,
                    3104,
                    2595,
                    3108,
                    4132,
                    4644,
                    4645,
                    4646,
                    6181,
                    2608,
                    2609,
                    2610,
                    4147,
                    2612,
                    2613,
                    6195,
                    2615,
                    6197,
                    6198,
                    6199,
                    2619,
                    6200,
                    3134,
                    4159,
                    2624,
                    2625,
                    4673,
                    3139,
                    6206,
                    6207,
                    2635,
                    4172,
                    2637,
                    6221,
                    3153,
                    3155,
                    4692,
                    4693,
                    4182,
                    4694,
                    4184,
                    4707,
                    2662,
                    6248,
                    4202,
                    4715,
                    6250,
                    3694,
                    4207,
                    3192,
                    2683,
                    3715,
                    3735,
                    3743,
                    3744,
                    3749,
                    3238,
                    3244,
                    3249,
                    3250,
                    3252,
                    3260,
                    2757,
                    2760,
                    4818,
                    2771,
                    6357,
                    6358,
                    6360,
                    2777,
                    2778,
                    6365,
                    6366,
                    4833,
                    4837,
                    3302,
                    3307,
                    4847,
                    763,
                    3324,
                    764,
                    765,
                    766,
                    768,
                    769,
                    770,
                    771,
                    772,
                    3328,
                    767,
                    4862,
                    4865,
                    3343,
                    3344,
                    4883,
                    4900,
                    4903,
                    3371,
                    4913,
                    4916,
                    4919,
                    3386,
                    2890,
                    3931,
                    2908,
                    3941,
                    3945,
                    3450,
                    4859,
                    2948,
                    5519,
                    2961,
                    2962,
                    2963,
                    916,
                    5521,
                    6034,
                    6035,
                    922,
                    2981,
                    4519,
                    2985,
                    3513,
                    5598,
                    3552,
                    6113,
                    5602,
                    2533,
                    2534,
                    2535,
                    2536,
                    6118,
                    2538,
                    2542,
                    5617,
                    6130,
                    2550,
                    6134
                ],
                "line.startswith": [
                    768,
                    770,
                    2538,
                    764,
                    766
                ],
                "initialise.wrap_stream": [
                    791
                ],
                "initialise": [
                    791
                ],
                "sys.stdin.buffer.read": [
                    814
                ],
                "sys.stdin.buffer": [
                    814
                ],
                "sys.stdin": [
                    814
                ],
                "dst": [
                    833,
                    5995,
                    5996,
                    5998,
                    815,
                    5999,
                    817,
                    5973,
                    5975,
                    828
                ],
                "d": [
                    833,
                    835,
                    837
                ],
                "src_contents.strip": [
                    848
                ],
                "assert_equivalent": [
                    856
                ],
                "assert_stable": [
                    857
                ],
                "src_node": [
                    896,
                    897,
                    912,
                    890,
                    892
                ],
                "lib2to3_parse": [
                    1081,
                    890
                ],
                "src_contents.lstrip": [
                    890
                ],
                "mode.target_versions": [
                    890,
                    893,
                    894
                ],
                "future_imports": [
                    899,
                    892
                ],
                "get_future_imports": [
                    892
                ],
                "detect_target_versions": [
                    896
                ],
                "normalize_fmt_off": [
                    897
                ],
                "LineGenerator": [
                    898
                ],
                "supports_feature": [
                    969,
                    900,
                    974,
                    910
                ],
                "mode.is_pyi": [
                    904,
                    901
                ],
                "mode.string_normalization": [
                    902,
                    919
                ],
                "elt": [
                    904,
                    914
                ],
                "EmptyLineTracker": [
                    904
                ],
                "empty_line": [
                    905,
                    913,
                    915
                ],
                "Line": [
                    5508,
                    4742,
                    905,
                    4617,
                    1932,
                    1807,
                    4883,
                    2580,
                    2584,
                    2970,
                    3356,
                    2718,
                    1951,
                    6174,
                    4769,
                    4514,
                    4131,
                    4770,
                    3237,
                    1958,
                    4897,
                    2728,
                    4776,
                    3114,
                    1707,
                    4522,
                    4903,
                    4654,
                    4905,
                    4913,
                    4658,
                    1974,
                    3512,
                    2746,
                    3642,
                    1852,
                    2623,
                    3575,
                    4898,
                    1861,
                    1989,
                    1864,
                    2889,
                    1995,
                    1999,
                    1745,
                    4817,
                    5585,
                    2004,
                    1749,
                    1877,
                    4181,
                    1880,
                    2009,
                    3930,
                    2907,
                    3291,
                    4826,
                    6103,
                    3551,
                    2660,
                    3301,
                    1767,
                    2026,
                    6124,
                    4847,
                    3313,
                    4851,
                    1910,
                    3191,
                    2936,
                    2937,
                    6138,
                    4859,
                    1916
                ],
                "after": [
                    1763,
                    1765,
                    906,
                    5099,
                    5100,
                    5070,
                    5071,
                    913,
                    914,
                    5073,
                    5075,
                    5076,
                    5078,
                    5079,
                    5081,
                    1755
                ],
                "split_line_features": [
                    920,
                    907
                ],
                "current_line": [
                    1792,
                    1800,
                    912,
                    1809,
                    914,
                    1810,
                    4881,
                    917,
                    4883,
                    4884,
                    4888,
                    4889,
                    1818,
                    4891,
                    4892,
                    1825,
                    1831,
                    4903,
                    1833,
                    1834,
                    4909,
                    1839,
                    4911,
                    4913,
                    4914,
                    1846,
                    4922,
                    4923,
                    1861,
                    1755,
                    1764,
                    1769,
                    1771,
                    1773,
                    4847,
                    1779,
                    4855,
                    4857,
                    1786,
                    1787,
                    4860,
                    4859
                ],
                "lines.visit": [
                    912
                ],
                "dst_contents.append": [
                    913,
                    922,
                    915
                ],
                "before": [
                    1795,
                    1802,
                    1804,
                    914,
                    915,
                    1826,
                    5070,
                    5071,
                    5073,
                    5080,
                    5081,
                    1755,
                    1756,
                    1761,
                    1765,
                    5099,
                    5100,
                    1774,
                    1775,
                    1778,
                    1783,
                    1785,
                    1787
                ],
                "elt.maybe_empty_lines": [
                    914
                ],
                "transform_line": [
                    916,
                    2669
                ],
                "mode.line_length": [
                    918
                ],
                "srcbuf": [
                    938,
                    939,
                    932,
                    933
                ],
                "io.BytesIO": [
                    932
                ],
                "tokenize.detect_encoding": [
                    933
                ],
                "tokenize": [
                    933
                ],
                "srcbuf.readline": [
                    933
                ],
                "srcbuf.seek": [
                    938
                ],
                "tiow": [
                    939,
                    940
                ],
                "tiow.read": [
                    940
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement_async_keywords": [
                    972,
                    948
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    976,
                    950
                ],
                "pygram.python_grammar_no_print_statement": [
                    952,
                    961
                ],
                "pygram.python_grammar": [
                    954,
                    963
                ],
                "version.is_python2": [
                    957
                ],
                "grammars": [
                    976,
                    971,
                    979,
                    967
                ],
                "grammars.append": [
                    976,
                    971
                ],
                "Grammar": [
                    943
                ],
                "src_txt": [
                    984,
                    985,
                    995,
                    990
                ],
                "grammar": [
                    987,
                    988
                ],
                "get_grammars": [
                    987
                ],
                "drv": [
                    988,
                    990
                ],
                "driver.Driver": [
                    988
                ],
                "driver": [
                    988
                ],
                "pytree.convert": [
                    988
                ],
                "pytree": [
                    988
                ],
                "result": [
                    4737,
                    4738,
                    4739,
                    3598,
                    3599,
                    3600,
                    3601,
                    3602,
                    2551,
                    4648,
                    4649,
                    4650,
                    4776,
                    4778,
                    4779,
                    4802,
                    4804,
                    4806,
                    4807,
                    990,
                    2526,
                    2528,
                    2660,
                    1004,
                    1005,
                    1006,
                    2668,
                    2679,
                    2557
                ],
                "drv.parse_string": [
                    990
                ],
                "ParseError": [
                    993
                ],
                "lineno": [
                    1000,
                    994,
                    997
                ],
                "column": [
                    1000,
                    5257,
                    994,
                    5255
                ],
                "pe.context": [
                    994
                ],
                "pe": [
                    994
                ],
                "src_txt.splitlines": [
                    995
                ],
                "faulty_line": [
                    1000,
                    997,
                    999
                ],
                "InvalidInput": [
                    1000
                ],
                "syms.file_input": [
                    1005,
                    2358
                ],
                "node": [
                    1028,
                    1029,
                    1031,
                    1038,
                    1040,
                    5136,
                    5137,
                    5139,
                    1044,
                    1045,
                    5140,
                    5657,
                    5146,
                    5149,
                    5150,
                    1055,
                    1056,
                    5154,
                    1059,
                    1065,
                    1067,
                    5163,
                    1070,
                    1071,
                    5171,
                    1592,
                    1593,
                    5266,
                    5281,
                    5282,
                    5283,
                    5284,
                    5285,
                    5289,
                    5290,
                    5292,
                    5312,
                    5315,
                    5329,
                    5330,
                    5331,
                    5332,
                    5340,
                    5343,
                    5370,
                    5371,
                    2303,
                    2304,
                    5378,
                    5379,
                    5380,
                    5892,
                    5893,
                    5895,
                    5896,
                    5386,
                    2315,
                    5898,
                    5899,
                    5901,
                    5392,
                    5395,
                    5909,
                    5398,
                    2327,
                    2328,
                    5401,
                    2330,
                    5911,
                    2332,
                    5404,
                    5913,
                    5918,
                    2337,
                    2338,
                    2339,
                    2340,
                    5922,
                    5934,
                    5950,
                    5442,
                    5443,
                    5444,
                    5445,
                    5959,
                    5449,
                    5454,
                    5457,
                    5460,
                    1882,
                    1884,
                    5474,
                    5477,
                    5478,
                    5483,
                    1900,
                    1901,
                    1902,
                    1903,
                    1904,
                    1905,
                    1906,
                    1907,
                    1908,
                    4469,
                    4472,
                    1914,
                    1925,
                    1944,
                    1945,
                    1953,
                    1954,
                    5538,
                    1956,
                    1960,
                    1962,
                    1963,
                    1966,
                    1970,
                    1972,
                    1978,
                    1991,
                    5579,
                    2014,
                    2023,
                    2024,
                    1011,
                    5112,
                    5117
                ],
                "node.type": [
                    5378,
                    1028,
                    1029,
                    1031,
                    5392,
                    5395,
                    5140,
                    5398,
                    2330,
                    1056,
                    5281,
                    1065,
                    5312,
                    5454,
                    5329,
                    5474,
                    1901,
                    1904,
                    1906,
                    5370
                ],
                "name": [
                    1036,
                    1029,
                    1031
                ],
                "token.tok_name": [
                    1097,
                    1065,
                    1029
                ],
                "token": [
                    3584,
                    1537,
                    1538,
                    3076,
                    1029,
                    3589,
                    6149,
                    5642,
                    4110,
                    6159,
                    2064,
                    5648,
                    4114,
                    6161,
                    2068,
                    3092,
                    6162,
                    5143,
                    4122,
                    5147,
                    5149,
                    5150,
                    5666,
                    5667,
                    2086,
                    1065,
                    2090,
                    4139,
                    2103,
                    2104,
                    4154,
                    2107,
                    1085,
                    3135,
                    2112,
                    4161,
                    3139,
                    1604,
                    4186,
                    1097,
                    1100,
                    1101,
                    1102,
                    1615,
                    1103,
                    1104,
                    1105,
                    1613,
                    1108,
                    1109,
                    1110,
                    1111,
                    1112,
                    1113,
                    1114,
                    1115,
                    1116,
                    1117,
                    1118,
                    1119,
                    1120,
                    1121,
                    1632,
                    1123,
                    1124,
                    2144,
                    2148,
                    4198,
                    4700,
                    3689,
                    5226,
                    6229,
                    4703,
                    2159,
                    1648,
                    6230,
                    4210,
                    2164,
                    1658,
                    3707,
                    2172,
                    4220,
                    3198,
                    2176,
                    3204,
                    2181,
                    6234,
                    2188,
                    3213,
                    3726,
                    2193,
                    3732,
                    2197,
                    2199,
                    2202,
                    1179,
                    1180,
                    1181,
                    1182,
                    1183,
                    1184,
                    1185,
                    1186,
                    1187,
                    1188,
                    1189,
                    1190,
                    1191,
                    1192,
                    2210,
                    2215,
                    2218,
                    5291,
                    4272,
                    4273,
                    4276,
                    4788,
                    2230,
                    3254,
                    4279,
                    2234,
                    4283,
                    4796,
                    2237,
                    4797,
                    2757,
                    5318,
                    1223,
                    5321,
                    2253,
                    2259,
                    5331,
                    5332,
                    4310,
                    2271,
                    5344,
                    2277,
                    2280,
                    2284,
                    2285,
                    5358,
                    4335,
                    2288,
                    5359,
                    2292,
                    4343,
                    1277,
                    5375,
                    5380,
                    3335,
                    3336,
                    1289,
                    5395,
                    1304,
                    4888,
                    4891,
                    5405,
                    1316,
                    1326,
                    3391,
                    5443,
                    4932,
                    5444,
                    5445,
                    3399,
                    2376,
                    1355,
                    3403,
                    3407,
                    2896,
                    4945,
                    2898,
                    2205,
                    2902,
                    5464,
                    2396,
                    3421,
                    1888,
                    3425,
                    3226,
                    3432,
                    5479,
                    1901,
                    2414,
                    1904,
                    2416,
                    1394,
                    3441,
                    2420,
                    2427,
                    3230,
                    1406,
                    5502,
                    4480,
                    5504,
                    4484,
                    1414,
                    2952,
                    3979,
                    5520,
                    1427,
                    2454,
                    1946,
                    1436,
                    3999,
                    2466,
                    5539,
                    4006,
                    5544,
                    5548,
                    5552,
                    1458,
                    5558,
                    1463,
                    4029,
                    1982,
                    1471,
                    3520,
                    4033,
                    1475,
                    2501,
                    3528,
                    1492,
                    1493,
                    3542,
                    1495,
                    3036,
                    4061,
                    2018,
                    4067,
                    2020,
                    1509,
                    2021,
                    1511,
                    2132,
                    4071,
                    2029,
                    3054,
                    1520,
                    3570,
                    2547,
                    4083
                ],
                "type_repr": [
                    1056,
                    1031
                ],
                "visitf": [
                    1036,
                    1037,
                    1038
                ],
                "self.visit_default": [
                    1956,
                    1925,
                    2024,
                    1963,
                    1966,
                    1040,
                    2001,
                    1972,
                    2036,
                    2007,
                    1914
                ],
                "child": [
                    5120,
                    5121,
                    5126,
                    5127,
                    5640,
                    5641,
                    5642,
                    5643,
                    5132,
                    5645,
                    5646,
                    5135,
                    5136,
                    5137,
                    5138,
                    5139,
                    5652,
                    1045,
                    1046,
                    5143,
                    5651,
                    5145,
                    5657,
                    5147,
                    5658,
                    5661,
                    5153,
                    5154,
                    1059,
                    1060,
                    5156,
                    5665,
                    5667,
                    5712,
                    5714,
                    5715,
                    5720,
                    5722,
                    5726,
                    5728,
                    5734,
                    5739,
                    5742,
                    5232,
                    5233,
                    5744,
                    5235,
                    5747,
                    5750,
                    5252,
                    5254,
                    5255,
                    5256,
                    5257,
                    5259,
                    5266,
                    5267,
                    5268,
                    5360,
                    5361,
                    5362,
                    5363,
                    5460,
                    5462,
                    5463,
                    5464,
                    4447,
                    1945,
                    1946,
                    1949,
                    1979,
                    1980,
                    1982,
                    1986,
                    1987,
                    1991,
                    1993,
                    5117
                ],
                "node.children": [
                    5379,
                    5380,
                    5266,
                    1045,
                    1945,
                    5146,
                    5401,
                    5404,
                    5657,
                    1954,
                    1059,
                    5289,
                    5290,
                    5292,
                    1978,
                    5442,
                    5315,
                    5443,
                    5444,
                    5445,
                    1991,
                    5449,
                    5457,
                    5330,
                    5331,
                    5332,
                    5460,
                    5340,
                    2014,
                    5343,
                    5477,
                    5478,
                    5483,
                    5117
                ],
                "self.visit": [
                    1954,
                    1987,
                    1060,
                    1993,
                    1046,
                    1980,
                    1949
                ],
                "Visitor": [
                    1050,
                    1852
                ],
                "tree_depth": [
                    1051
                ],
                "indent": [
                    1057,
                    1063,
                    1066,
                    1873,
                    6356,
                    1877,
                    1718,
                    6360,
                    1721,
                    6363,
                    6366,
                    1054
                ],
                "self.tree_depth": [
                    1062,
                    1058,
                    1054
                ],
                "_type": [
                    1056,
                    1057,
                    1063,
                    1065,
                    1066
                ],
                "token.tok_name.get": [
                    1065
                ],
                "node.prefix": [
                    5112,
                    1067,
                    1070
                ],
                "node.value": [
                    5899,
                    5395,
                    1071
                ],
                "DebugVisitor": [
                    1079
                ],
                "v.visit": [
                    1082
                ],
                "WHITESPACE": [
                    1906,
                    5180,
                    1085
                ],
                "token.DEDENT": [
                    5445,
                    1085
                ],
                "token.INDENT": [
                    2029,
                    5444,
                    1085
                ],
                "token.NEWLINE": [
                    5443,
                    5667,
                    3336,
                    2029,
                    1085
                ],
                "STATEMENT": [
                    1960,
                    1086
                ],
                "syms.if_stmt": [
                    1087
                ],
                "syms.while_stmt": [
                    1088
                ],
                "syms.for_stmt": [
                    1089
                ],
                "syms.try_stmt": [
                    1090
                ],
                "syms.except_clause": [
                    1091
                ],
                "syms.with_stmt": [
                    1092
                ],
                "syms.funcdef": [
                    1093
                ],
                "syms.classdef": [
                    2233,
                    1094
                ],
                "STANDALONE_COMMENT": [
                    1379,
                    1668,
                    1096,
                    1097,
                    1642,
                    5608,
                    1389,
                    4945,
                    1652,
                    2068,
                    2549,
                    1527,
                    4889,
                    4793,
                    5178,
                    5208
                ],
                "LOGIC_OPERATORS": [
                    2472,
                    1098
                ],
                "COMPARATORS": [
                    2410,
                    1099
                ],
                "token.LESS": [
                    1100
                ],
                "token.GREATER": [
                    1101
                ],
                "token.EQEQUAL": [
                    1102
                ],
                "token.NOTEQUAL": [
                    1103
                ],
                "token.LESSEQUAL": [
                    1104
                ],
                "token.GREATEREQUAL": [
                    1105
                ],
                "MATH_OPERATORS": [
                    2139,
                    1107,
                    2404
                ],
                "token.VBAR": [
                    1179,
                    1108
                ],
                "token.CIRCUMFLEX": [
                    1180,
                    1109
                ],
                "token.AMPER": [
                    1181,
                    1110
                ],
                "token.LEFTSHIFT": [
                    1182,
                    1111
                ],
                "token.RIGHTSHIFT": [
                    1112,
                    2144,
                    1183
                ],
                "token.PLUS": [
                    1184,
                    3520,
                    3584,
                    3399,
                    3570,
                    1113
                ],
                "token.MINUS": [
                    1185,
                    1114
                ],
                "token.STAR": [
                    5147,
                    1123,
                    1186,
                    1115
                ],
                "token.SLASH": [
                    1124,
                    5548,
                    1187,
                    1116
                ],
                "token.DOUBLESLASH": [
                    1188,
                    1117
                ],
                "token.PERCENT": [
                    4273,
                    1189,
                    1118
                ],
                "token.AT": [
                    1394,
                    2230,
                    1190,
                    1119
                ],
                "token.TILDE": [
                    1120,
                    1191
                ],
                "token.DOUBLESTAR": [
                    1121,
                    2018,
                    1123,
                    1192,
                    2259
                ],
                "STARS": [
                    1123,
                    1124,
                    5571,
                    5566
                ],
                "VARARGS_SPECIALS": [
                    2128,
                    2218,
                    5419,
                    1124
                ],
                "VARARGS_PARENTS": [
                    2129,
                    1125,
                    2390
                ],
                "syms.arglist": [
                    2115,
                    1126,
                    4874,
                    2157,
                    5549,
                    5556
                ],
                "syms.argument": [
                    2208,
                    5569,
                    2116,
                    2277,
                    1127,
                    4874,
                    4081,
                    4060
                ],
                "syms.trailer": [
                    1128,
                    6236,
                    1152,
                    2191
                ],
                "syms.typedargslist": [
                    4870,
                    1129,
                    2122,
                    5549,
                    5556,
                    2167,
                    5560
                ],
                "syms.varargslist": [
                    2162,
                    1130,
                    2118
                ],
                "UNPACKING_PARENTS": [
                    2129,
                    1132,
                    2390
                ],
                "syms.atom": [
                    5312,
                    5281,
                    5474,
                    2023,
                    5513,
                    2252,
                    1133,
                    5135,
                    5329,
                    5363,
                    5398,
                    5462,
                    5370
                ],
                "syms.dictsetmaker": [
                    2257,
                    4105,
                    1134
                ],
                "syms.listmaker": [
                    1697,
                    1135
                ],
                "syms.testlist_gexp": [
                    1136,
                    5372
                ],
                "syms.testlist_star_expr": [
                    1137,
                    5127,
                    2063
                ],
                "TEST_DESCENDANTS": [
                    1139,
                    1703
                ],
                "syms.test": [
                    2442,
                    1140,
                    3998
                ],
                "syms.lambdef": [
                    1141
                ],
                "syms.or_test": [
                    1142
                ],
                "syms.and_test": [
                    1143
                ],
                "syms.not_test": [
                    1144
                ],
                "syms.comparison": [
                    1145,
                    2451
                ],
                "syms.star_expr": [
                    1146,
                    2406,
                    2262,
                    5423
                ],
                "syms.expr": [
                    1147
                ],
                "syms.xor_expr": [
                    1148
                ],
                "syms.and_expr": [
                    1149
                ],
                "syms.shift_expr": [
                    2146,
                    1150
                ],
                "syms.arith_expr": [
                    1151
                ],
                "syms.term": [
                    1153
                ],
                "syms.power": [
                    2016,
                    1154,
                    4060
                ],
                "ASSIGNMENTS": [
                    1156,
                    2055
                ],
                "COMPREHENSION_PRIORITY": [
                    2440,
                    2433,
                    1172
                ],
                "COMMA_PRIORITY": [
                    5285,
                    2377,
                    5525,
                    1173,
                    4887
                ],
                "TERNARY_PRIORITY": [
                    2443,
                    1174
                ],
                "LOGIC_PRIORITY": [
                    2473,
                    1175
                ],
                "STRING_PRIORITY": [
                    1176,
                    2418
                ],
                "COMPARATOR_PRIORITY": [
                    2470,
                    2411,
                    2446,
                    1177,
                    2458
                ],
                "MATH_PRIORITIES": [
                    2408,
                    1178
                ],
                "DOT_PRIORITY": [
                    2401,
                    1194,
                    4843,
                    6191
                ],
                "depth": [
                    1793,
                    5957,
                    5926,
                    5959,
                    5911,
                    1201,
                    5938,
                    1779,
                    1780,
                    1333,
                    5941,
                    1783,
                    5944,
                    1785
                ],
                "bracket_match": [
                    1202
                ],
                "delimiters": [
                    1203
                ],
                "previous": [
                    2465,
                    2466,
                    2467,
                    2415,
                    2416,
                    1204,
                    2453,
                    2454,
                    2455,
                    2399
                ],
                "_for_loop_depths": [
                    1205
                ],
                "_lambda_argument_depths": [
                    1206
                ],
                "leaf.type": [
                    4480,
                    5504,
                    4484,
                    1289,
                    6154,
                    3726,
                    4110,
                    6159,
                    6161,
                    6165,
                    1304,
                    4632,
                    4638,
                    2080,
                    5502,
                    1316,
                    5419,
                    1458,
                    4029,
                    3135,
                    6208,
                    4929,
                    3139,
                    2501,
                    2757,
                    1223,
                    1351,
                    2376,
                    4679,
                    1355,
                    1228,
                    6215,
                    1230,
                    4943,
                    2896,
                    2902,
                    1241,
                    1242,
                    2396,
                    1379,
                    2404,
                    4067,
                    2408,
                    5608,
                    2410,
                    2414,
                    4334,
                    5614,
                    5616,
                    6256,
                    2420,
                    1527,
                    2427,
                    1277,
                    3198
                ],
                "leaf": [
                    5632,
                    6208,
                    6153,
                    6154,
                    4108,
                    4110,
                    6159,
                    6161,
                    4629,
                    6165,
                    4632,
                    4633,
                    3099,
                    4636,
                    4638,
                    4639,
                    2080,
                    2081,
                    2082,
                    3108,
                    2089,
                    2097,
                    5171,
                    5173,
                    5179,
                    3134,
                    3135,
                    1600,
                    4673,
                    5183,
                    3139,
                    4675,
                    4677,
                    6207,
                    3143,
                    4679,
                    4680,
                    4681,
                    3147,
                    4171,
                    4172,
                    6215,
                    3153,
                    3155,
                    5225,
                    6250,
                    6252,
                    5231,
                    6256,
                    5233,
                    3196,
                    3198,
                    3724,
                    3725,
                    1678,
                    3726,
                    1701,
                    3243,
                    3244,
                    1722,
                    1723,
                    4801,
                    4802,
                    4803,
                    2757,
                    1223,
                    1226,
                    1227,
                    1228,
                    1230,
                    1231,
                    1232,
                    1234,
                    1238,
                    1240,
                    1241,
                    1242,
                    1244,
                    1245,
                    1246,
                    4331,
                    4334,
                    4855,
                    4860,
                    1277,
                    4862,
                    4863,
                    4865,
                    4868,
                    4869,
                    4870,
                    1289,
                    1290,
                    3851,
                    4874,
                    4879,
                    1304,
                    1316,
                    5419,
                    2348,
                    2349,
                    4909,
                    5422,
                    4914,
                    4916,
                    4917,
                    4919,
                    5436,
                    4928,
                    4929,
                    4930,
                    1351,
                    2376,
                    1355,
                    2894,
                    4943,
                    1360,
                    1361,
                    2896,
                    4944,
                    1364,
                    1365,
                    1366,
                    1367,
                    2390,
                    2902,
                    3416,
                    3417,
                    2396,
                    2397,
                    2398,
                    4955,
                    4960,
                    5464,
                    1379,
                    2404,
                    2405,
                    2406,
                    4963,
                    1384,
                    2408,
                    2410,
                    4973,
                    2414,
                    4974,
                    5487,
                    5488,
                    4979,
                    2420,
                    2424,
                    2425,
                    2426,
                    2427,
                    4476,
                    2430,
                    2431,
                    4480,
                    4990,
                    5502,
                    5503,
                    2436,
                    2437,
                    2438,
                    4484,
                    5504,
                    5505,
                    2442,
                    5003,
                    2445,
                    5007,
                    2449,
                    2450,
                    2451,
                    5011,
                    2461,
                    2462,
                    2463,
                    5026,
                    1447,
                    1448,
                    2472,
                    1457,
                    1458,
                    4027,
                    4029,
                    5055,
                    2501,
                    5064,
                    2001,
                    2007,
                    4065,
                    5602,
                    4067,
                    5091,
                    6113,
                    6114,
                    5607,
                    5608,
                    6115,
                    6118,
                    6121,
                    5612,
                    2029,
                    2030,
                    5614,
                    2032,
                    2033,
                    2034,
                    5615,
                    2036,
                    5616,
                    1526,
                    1527,
                    5621,
                    5630,
                    5631
                ],
                "token.COMMENT": [
                    1888,
                    2086,
                    1223,
                    1648,
                    4945,
                    2547
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    1226
                ],
                "self.maybe_decrement_after_lambda_arguments": [
                    1227
                ],
                "CLOSING_BRACKETS": [
                    6208,
                    4679,
                    6155,
                    1228,
                    3213,
                    1614,
                    5614,
                    5616,
                    6204,
                    2066,
                    2067,
                    2068,
                    6165,
                    4632,
                    1433,
                    1468,
                    2399
                ],
                "self.depth": [
                    1315,
                    1318,
                    1288,
                    1306,
                    1292,
                    1229,
                    1230,
                    1326,
                    1232,
                    1233,
                    1708,
                    1718,
                    1305,
                    1242,
                    1243,
                    1278,
                    1279
                ],
                "opening_bracket": [
                    5512,
                    5513,
                    5514,
                    5631,
                    4787,
                    4671,
                    4675,
                    4806,
                    4680,
                    4683,
                    1230,
                    1231,
                    4692,
                    4693,
                    4694,
                    4700,
                    4701,
                    5599,
                    5611,
                    5612,
                    5613,
                    4735
                ],
                "self.bracket_match.pop": [
                    1230
                ],
                "self.bracket_match": [
                    1326,
                    1242,
                    1250,
                    1230
                ],
                "leaf.opening_bracket": [
                    6208,
                    4680,
                    1231,
                    4633,
                    5631
                ],
                "leaf.bracket_depth": [
                    4868,
                    4869,
                    1232,
                    1458,
                    1527
                ],
                "delim": [
                    1234,
                    1235,
                    1236,
                    1238,
                    1239,
                    1240
                ],
                "is_split_before_delimiter": [
                    1234
                ],
                "self.previous": [
                    1234,
                    1235,
                    1236,
                    1238,
                    1244
                ],
                "self.delimiters": [
                    1258,
                    1265,
                    1236,
                    1269,
                    1240
                ],
                "is_split_after_delimiter": [
                    1238
                ],
                "OPENING_BRACKETS": [
                    6215,
                    2154,
                    6154,
                    6256,
                    2065,
                    5617,
                    2067,
                    2100,
                    6162,
                    1241,
                    2266,
                    6204,
                    4638,
                    6239
                ],
                "BRACKET": [
                    2064,
                    2065,
                    1242,
                    2066
                ],
                "self.maybe_increment_lambda_arguments": [
                    1245
                ],
                "self.maybe_increment_for_loop_variable": [
                    1246
                ],
                "self.delimiters.items": [
                    1258
                ],
                "priority": [
                    1268,
                    1269
                ],
                "self.max_delimiter_priority": [
                    1268
                ],
                "self.delimiters.values": [
                    1269
                ],
                "token.NAME": [
                    1289,
                    5642,
                    3213,
                    5648,
                    6161,
                    5395,
                    2454,
                    1304,
                    1946,
                    3999,
                    2466,
                    4276,
                    4932,
                    1615,
                    3407,
                    1492,
                    1495,
                    4061,
                    2148,
                    2280,
                    3432,
                    2288,
                    2420,
                    1277,
                    1406
                ],
                "leaf.value": [
                    4480,
                    5505,
                    2436,
                    4484,
                    1290,
                    2442,
                    5003,
                    2445,
                    5007,
                    2449,
                    5011,
                    1304,
                    2461,
                    2082,
                    5026,
                    5630,
                    2472,
                    5436,
                    5055,
                    4930,
                    1351,
                    3143,
                    5064,
                    3147,
                    4944,
                    2902,
                    6114,
                    5091,
                    6115,
                    5607,
                    4973,
                    4974,
                    2032,
                    2033,
                    4979,
                    2424,
                    1277,
                    4990,
                    5503
                ],
                "self._for_loop_depths.append": [
                    1279
                ],
                "self._for_loop_depths": [
                    1288,
                    1287,
                    1293,
                    1279
                ],
                "self._for_loop_depths.pop": [
                    1293
                ],
                "self._lambda_argument_depths.append": [
                    1306
                ],
                "self._lambda_argument_depths": [
                    1306,
                    1315,
                    1314,
                    1319
                ],
                "token.COLON": [
                    1316,
                    2090,
                    1355,
                    4110,
                    3407,
                    1427,
                    2132,
                    2103,
                    2104,
                    2271
                ],
                "self._lambda_argument_depths.pop": [
                    1319
                ],
                "self.bracket_match.get": [
                    1326
                ],
                "token.RSQB": [
                    2064,
                    6234,
                    1326
                ],
                "leaves": [
                    6145,
                    6146,
                    6149,
                    6152,
                    6153,
                    4780,
                    4782,
                    4788,
                    1334,
                    4535,
                    1719,
                    4792,
                    4793,
                    1720,
                    1722,
                    4796,
                    4797,
                    4801,
                    4310,
                    4313
                ],
                "comments": [
                    1336,
                    1555,
                    1556
                ],
                "bracket_tracker": [
                    1337
                ],
                "BracketTracker": [
                    1337,
                    5482
                ],
                "inside_brackets": [
                    1338,
                    4954
                ],
                "should_explode": [
                    1339,
                    4806
                ],
                "has_value": [
                    1352,
                    1351
                ],
                "BRACKETS": [
                    2361,
                    2067,
                    1351
                ],
                "leaf.value.strip": [
                    1351
                ],
                "self.is_class_paren_empty": [
                    1355
                ],
                "self.leaves": [
                    1667,
                    1413,
                    1544,
                    1672,
                    1423,
                    1682,
                    1427,
                    1428,
                    1684,
                    1431,
                    1569,
                    1447,
                    1535,
                    1456,
                    1457,
                    1585,
                    1586,
                    1463,
                    1592,
                    1719,
                    1468,
                    1470,
                    1600,
                    1475,
                    1604,
                    1731,
                    1610,
                    1356,
                    1357,
                    1484,
                    1612,
                    1613,
                    1489,
                    1615,
                    1618,
                    1621,
                    1622,
                    1367,
                    1623,
                    1627,
                    1628,
                    1629,
                    1379,
                    1507,
                    1509,
                    1510,
                    1511,
                    1512,
                    1389,
                    1520,
                    1521,
                    1394,
                    1651,
                    1526,
                    1399,
                    1656,
                    1406,
                    1407
                ],
                "preformatted": [
                    1384,
                    1363,
                    1357
                ],
                "leaf.prefix": [
                    4960,
                    6114,
                    4963,
                    2501,
                    5607,
                    2348,
                    1360,
                    5173,
                    4955
                ],
                "whitespace": [
                    1360
                ],
                "self.is_complex_subscript": [
                    1361
                ],
                "self.inside_brackets": [
                    1433,
                    1363,
                    1709
                ],
                "self.bracket_tracker.mark": [
                    1364
                ],
                "self.bracket_tracker": [
                    1690,
                    1643,
                    1364,
                    1375
                ],
                "self.maybe_remove_trailing_comma": [
                    1365
                ],
                "self.append_comment": [
                    1366
                ],
                "self.leaves.append": [
                    1367
                ],
                "self.bracket_tracker.depth": [
                    1375
                ],
                "self.is_comment": [
                    1376
                ],
                "self.append": [
                    1384
                ],
                "is_import": [
                    1399
                ],
                "self.is_class": [
                    1508,
                    1413
                ],
                "token.DOT": [
                    6149,
                    1414,
                    3432,
                    2284,
                    2253,
                    2285,
                    6159,
                    4272,
                    6162,
                    2292,
                    2197,
                    2230,
                    5464,
                    2396,
                    3230
                ],
                "closer": [
                    1446,
                    1428,
                    1431,
                    1433,
                    1436,
                    1470,
                    1471
                ],
                "close_index": [
                    1475,
                    1456,
                    1457,
                    1429,
                    1463,
                    1432,
                    1468,
                    1469,
                    1470
                ],
                "closer.type": [
                    1433,
                    1436,
                    1471
                ],
                "token.RPAR": [
                    5504,
                    1538,
                    4484,
                    2064,
                    2193,
                    3226,
                    1436,
                    5405,
                    5150,
                    5291,
                    1471,
                    5321,
                    5332,
                    6229,
                    3421,
                    4703,
                    1632,
                    5344,
                    2021,
                    4198,
                    1511,
                    5479,
                    5359,
                    4210,
                    4343,
                    1658
                ],
                "opener": [
                    1448,
                    1446
                ],
                "closer.opening_bracket": [
                    1446
                ],
                "_open_index": [
                    1457,
                    1447
                ],
                "commas": [
                    1465,
                    1459,
                    1460,
                    1455
                ],
                "comma_depth": [
                    1456,
                    1458
                ],
                "bracket_depth": [
                    1456
                ],
                "token.COMMA": [
                    1537,
                    5380,
                    2181,
                    3589,
                    2188,
                    5520,
                    2068,
                    3732,
                    4888,
                    4122,
                    4891,
                    2205,
                    4139,
                    1458,
                    4788,
                    5558,
                    1463,
                    2107,
                    4796,
                    4029,
                    4797,
                    1475,
                    1604,
                    3139,
                    2376,
                    3403,
                    1613,
                    3542,
                    3425,
                    2159,
                    4083,
                    2164,
                    4220,
                    5375
                ],
                "first_leaf": [
                    1484,
                    1773,
                    1774,
                    1776,
                    1492,
                    1493
                ],
                "second_leaf": [
                    1489,
                    1491,
                    1494,
                    1495,
                    1496
                ],
                "first_leaf.type": [
                    1492,
                    1493
                ],
                "first_leaf.value": [
                    1492
                ],
                "token.ASYNC": [
                    2427,
                    2420,
                    1493,
                    1982
                ],
                "second_leaf.type": [
                    1495
                ],
                "second_leaf.value": [
                    1496
                ],
                "token.LPAR": [
                    4480,
                    3204,
                    3726,
                    2064,
                    2193,
                    5143,
                    5149,
                    5405,
                    2215,
                    5291,
                    4279,
                    4154,
                    2234,
                    4283,
                    2237,
                    3391,
                    4161,
                    5318,
                    5331,
                    4700,
                    5344,
                    2020,
                    1509,
                    5479,
                    5358,
                    4335,
                    3441,
                    5502
                ],
                "token.STRING": [
                    3076,
                    6149,
                    3335,
                    2952,
                    3979,
                    4114,
                    3092,
                    5666,
                    5539,
                    4006,
                    3254,
                    3135,
                    4033,
                    2757,
                    3528,
                    2896,
                    2898,
                    2902,
                    4310,
                    4186,
                    3036,
                    4071,
                    2280,
                    3689,
                    1901,
                    2414,
                    3054,
                    1520,
                    2416,
                    3707,
                    3198
                ],
                "value.startswith": [
                    1521
                ],
                "sys.maxsize": [
                    4848,
                    6356,
                    1524,
                    6363
                ],
                "depth_limit": [
                    1527
                ],
                "ignored_ids": [
                    1536,
                    1545,
                    1533,
                    1560
                ],
                "last_leaf": [
                    1536,
                    1537,
                    1538,
                    4833,
                    4839,
                    1544,
                    1545,
                    1672,
                    1673,
                    5519,
                    5520,
                    1656,
                    1658,
                    1659,
                    1660,
                    1661,
                    1535
                ],
                "ignored_ids.add": [
                    1536,
                    1545
                ],
                "last_leaf.type": [
                    5520,
                    1537,
                    1538,
                    1658
                ],
                "last_leaf.value": [
                    1538,
                    1659
                ],
                "comment_seen": [
                    1554,
                    1564,
                    1558
                ],
                "leaf_id": [
                    1560,
                    1555
                ],
                "self.comments.items": [
                    1555
                ],
                "self.comments": [
                    1731,
                    1673,
                    1678,
                    1555,
                    1683,
                    1684,
                    1593,
                    1724
                ],
                "comment": [
                    1668,
                    1669,
                    1673,
                    1556,
                    1557,
                    1559,
                    5246,
                    4385,
                    4386,
                    5173,
                    5174,
                    1593,
                    1594,
                    5178,
                    1724,
                    1725,
                    5190,
                    5192,
                    5210,
                    1884,
                    1887,
                    1888,
                    5215,
                    1890,
                    6118,
                    6119,
                    1897,
                    1642,
                    1645,
                    1648,
                    1652,
                    1653,
                    2550,
                    2553,
                    5243,
                    5244,
                    1662
                ],
                "is_type_comment": [
                    1594,
                    1557,
                    1662,
                    1559
                ],
                "first_line": [
                    4166,
                    4173,
                    4175,
                    4208,
                    1585,
                    4147,
                    1588,
                    4159
                ],
                "l.lineno": [
                    1585,
                    1586
                ],
                "l": [
                    2662,
                    2663,
                    2670,
                    1585,
                    1586,
                    4818,
                    4788,
                    4819,
                    4820
                ],
                "last_line": [
                    4224,
                    3715,
                    3716,
                    3748,
                    3749,
                    3750,
                    4207,
                    4208,
                    1586,
                    1588,
                    3734,
                    3735,
                    3736,
                    4215,
                    3740,
                    3741,
                    4222
                ],
                "self.comments.get": [
                    1593,
                    1678
                ],
                "is_multiline_string": [
                    1600,
                    5153,
                    6243,
                    2030
                ],
                "self.is_import": [
                    1611
                ],
                "closing.type": [
                    1632,
                    1614
                ],
                "closing": [
                    1632,
                    1614
                ],
                "self.remove_trailing_comma": [
                    1636
                ],
                "comment.type": [
                    1888,
                    1668,
                    1642,
                    1648,
                    1652,
                    5178
                ],
                "self.bracket_tracker.any_open_brackets": [
                    1643
                ],
                "comment.prefix": [
                    1653,
                    1645,
                    1669
                ],
                "last_leaf.parent": [
                    1660,
                    1661
                ],
                "last_leaf.parent.leaves": [
                    1661
                ],
                "append": [
                    1673
                ],
                "self.comments.setdefault": [
                    1673,
                    1684
                ],
                "trailing_comma": [
                    1682,
                    1683
                ],
                "self.leaves.pop": [
                    1682
                ],
                "trailing_comma_comments": [
                    1683,
                    1685
                ],
                "self.comments.pop": [
                    1683
                ],
                "extend": [
                    1684
                ],
                "open_lsqb": [
                    1690,
                    1691,
                    1694
                ],
                "self.bracket_tracker.get_open_lsqb": [
                    1690
                ],
                "subscript_start": [
                    1696,
                    1697,
                    1700,
                    1701,
                    1702,
                    1703,
                    1694
                ],
                "open_lsqb.next_sibling": [
                    1694
                ],
                "subscript_start.type": [
                    1697,
                    1700
                ],
                "syms.subscriptlist": [
                    2244,
                    1700,
                    2092
                ],
                "child_towards": [
                    1701
                ],
                "n.type": [
                    5539,
                    1703,
                    5544,
                    5548,
                    5552,
                    5556,
                    5560
                ],
                "n": [
                    5538,
                    5539,
                    5540,
                    1703,
                    5192,
                    5544,
                    5545,
                    5548,
                    5549,
                    5552,
                    5556,
                    5557,
                    5558,
                    5560,
                    5565
                ],
                "subscript_start.pre_order": [
                    1703
                ],
                "self.should_explode": [
                    1710
                ],
                "first": [
                    5289,
                    5291,
                    5294,
                    6197,
                    1720,
                    1721,
                    6204,
                    6208,
                    5187,
                    5188,
                    5189,
                    5190,
                    5315,
                    5317,
                    5318,
                    5319,
                    6243,
                    5477,
                    5479
                ],
                "res": [
                    2304,
                    2305,
                    2306,
                    2307,
                    2310,
                    1721,
                    1723,
                    1725,
                    1727
                ],
                "first.prefix": [
                    1721,
                    5189,
                    5190
                ],
                "first.value": [
                    1721,
                    5294,
                    5319
                ],
                "itertools.chain.from_iterable": [
                    1724
                ],
                "itertools.chain": [
                    1724
                ],
                "itertools": [
                    1724
                ],
                "self.comments.values": [
                    1724
                ],
                "previous_line": [
                    1745
                ],
                "previous_after": [
                    1746
                ],
                "previous_defs": [
                    1747
                ],
                "self._maybe_empty_lines": [
                    1755
                ],
                "self.previous_line": [
                    1760,
                    1793,
                    1824,
                    1825,
                    1764,
                    1798,
                    1799,
                    1831,
                    1833,
                    1834,
                    1839,
                    1811,
                    1815,
                    1818,
                    1819,
                    1790,
                    1791
                ],
                "self.previous_after": [
                    1761,
                    1763
                ],
                "max_allowed": [
                    1768,
                    1770,
                    1775
                ],
                "current_line.depth": [
                    1825,
                    1831,
                    1769,
                    1810,
                    1779,
                    1846,
                    1818
                ],
                "current_line.leaves": [
                    4888,
                    4889,
                    1771,
                    1773
                ],
                "first_leaf.prefix.count": [
                    1774
                ],
                "first_leaf.prefix": [
                    1776,
                    1774
                ],
                "self.previous_defs": [
                    1810,
                    1780,
                    1781
                ],
                "self.previous_defs.pop": [
                    1781
                ],
                "current_line.is_decorator": [
                    1809,
                    1786
                ],
                "current_line.is_def": [
                    1786,
                    1839
                ],
                "current_line.is_class": [
                    1833,
                    1786
                ],
                "self._maybe_empty_lines_for_class_or_def": [
                    1787
                ],
                "self.previous_line.is_import": [
                    1791
                ],
                "current_line.is_import": [
                    1792
                ],
                "self.previous_line.depth": [
                    1793,
                    1818,
                    1831,
                    1825
                ],
                "self.previous_line.is_class": [
                    1833,
                    1819,
                    1799
                ],
                "current_line.is_triple_quoted_string": [
                    1800
                ],
                "self.previous_defs.append": [
                    1810
                ],
                "self.previous_line.is_decorator": [
                    1815
                ],
                "self.previous_line.is_def": [
                    1819,
                    1839
                ],
                "self.previous_line.is_comment": [
                    1824
                ],
                "newlines": [
                    2519,
                    1832,
                    1836,
                    1838,
                    1841,
                    1843,
                    1845,
                    1846,
                    1847,
                    1848
                ],
                "current_line.is_stub_class": [
                    1834
                ],
                "self.previous_line.is_stub_class": [
                    1834
                ],
                "normalize_strings": [
                    2672,
                    2715,
                    1860,
                    2599
                ],
                "remove_u_prefix": [
                    4977,
                    1862
                ],
                "self.current_line": [
                    1890,
                    1897,
                    2031,
                    1872,
                    1873,
                    1907,
                    1876,
                    1877,
                    2005,
                    1883,
                    1887
                ],
                "self.current_line.depth": [
                    1873,
                    2031
                ],
                "complete_line": [
                    1876,
                    1877,
                    1878
                ],
                "complete_line.depth": [
                    1877
                ],
                "any_open_brackets": [
                    1883,
                    1900,
                    1885
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1883,
                    2005
                ],
                "self.current_line.bracket_tracker": [
                    1883,
                    2005
                ],
                "generate_comments": [
                    1884
                ],
                "self.current_line.append": [
                    1897,
                    1890,
                    1907,
                    1887
                ],
                "self.line": [
                    1921,
                    1891,
                    1895,
                    1928,
                    1992,
                    1898,
                    1965,
                    1997,
                    1967,
                    2002,
                    1971,
                    2006,
                    1976,
                    1913,
                    1947
                ],
                "normalize_prefix": [
                    4819,
                    1900,
                    4782
                ],
                "self.normalize_strings": [
                    3077,
                    3850,
                    1901
                ],
                "normalize_string_prefix": [
                    1902
                ],
                "self.remove_u_prefix": [
                    1902
                ],
                "normalize_string_quotes": [
                    2034,
                    3851,
                    3078,
                    1903
                ],
                "token.NUMBER": [
                    1904,
                    2280,
                    5544,
                    2199
                ],
                "normalize_numeric_literal": [
                    1905
                ],
                "visit_default": [
                    1908
                ],
                "normalize_invisible_parens": [
                    1944,
                    5121
                ],
                "parens": [
                    1944
                ],
                "child.type": [
                    5120,
                    5127,
                    5642,
                    5645,
                    5135,
                    5651,
                    5658,
                    5462,
                    5143,
                    1946,
                    5147,
                    1982
                ],
                "child.value": [
                    5145,
                    1946,
                    5643,
                    5156
                ],
                "keywords": [
                    1946
                ],
                "is_stub_suite": [
                    1953,
                    1970
                ],
                "is_suite_like": [
                    1960,
                    1961
                ],
                "node.parent": [
                    2338,
                    2339,
                    1960,
                    2315,
                    1970,
                    4469,
                    4472
                ],
                "node.parent.type": [
                    1960,
                    4472
                ],
                "is_stub_body": [
                    5449,
                    1962
                ],
                "children": [
                    5640,
                    1985,
                    1978,
                    1979
                ],
                "internal_stmt": [
                    1985,
                    1986
                ],
                "internal_stmt.children": [
                    1986
                ],
                "_operator": [
                    2014
                ],
                "operand": [
                    2016,
                    2017,
                    2018,
                    2022,
                    2023,
                    2014
                ],
                "operand.type": [
                    2016
                ],
                "operand.children": [
                    2017,
                    2018
                ],
                "lpar": [
                    5344,
                    2020,
                    2023,
                    5358,
                    5363,
                    5404,
                    5405,
                    5343
                ],
                "rpar": [
                    5344,
                    2021,
                    2023,
                    5359,
                    5363,
                    5404,
                    5405,
                    5343
                ],
                "index": [
                    6113,
                    5602,
                    2533,
                    2022,
                    2023,
                    5125,
                    6121,
                    5200,
                    5617,
                    2546,
                    5149,
                    5202,
                    5362,
                    5365,
                    6096,
                    6098,
                    6099,
                    5117
                ],
                "operand.remove": [
                    2022
                ],
                "node.insert_child": [
                    5149,
                    2023
                ],
                "prev_siblings_are": [
                    2028,
                    2332
                ],
                "leaf.parent": [
                    2437,
                    2438,
                    2442,
                    2450,
                    2451,
                    2462,
                    2463,
                    2081,
                    2472,
                    5419,
                    5422,
                    4928,
                    2397,
                    2398,
                    2405,
                    2406,
                    2029,
                    2425,
                    2426
                ],
                "syms.simple_stmt": [
                    5658,
                    2029,
                    5454
                ],
                "prefix": [
                    3072,
                    3081,
                    5007,
                    3089,
                    5012,
                    3868,
                    3869,
                    3871,
                    5026,
                    5029,
                    2355,
                    5055,
                    5189,
                    5190,
                    3147,
                    3148,
                    3151,
                    3032,
                    3034,
                    3675,
                    5210,
                    4573,
                    3038,
                    2527,
                    4576,
                    6368,
                    4579,
                    2533,
                    3686,
                    3559,
                    3565,
                    2031,
                    2032,
                    5360,
                    3699,
                    5364,
                    3062,
                    3705,
                    3071
                ],
                "docstring": [
                    2032,
                    2033,
                    6354,
                    6350
                ],
                "fix_docstring": [
                    2032
                ],
                "self.visit_stmt": [
                    2040
                ],
                "\u00d8": [
                    2049,
                    2051,
                    2052,
                    2053,
                    2054,
                    2055,
                    2057,
                    2058,
                    2041
                ],
                "self.visit_assert_stmt": [
                    2042
                ],
                "self.visit_if_stmt": [
                    2043
                ],
                "self.visit_while_stmt": [
                    2046
                ],
                "self.visit_for_stmt": [
                    2047
                ],
                "self.visit_try_stmt": [
                    2048
                ],
                "self.visit_except_clause": [
                    2051
                ],
                "self.visit_with_stmt": [
                    2052
                ],
                "self.visit_funcdef": [
                    2053
                ],
                "self.visit_classdef": [
                    2054
                ],
                "self.visit_expr_stmt": [
                    2055
                ],
                "self.visit_return_stmt": [
                    2056
                ],
                "self.visit_import_from": [
                    2057
                ],
                "self.visit_del_stmt": [
                    2058
                ],
                "self.visit_async_funcdef": [
                    2059
                ],
                "self.visit_async_stmt": [
                    2059
                ],
                "self.visit_decorated": [
                    2060
                ],
                "self.visit_decorators": [
                    2060
                ],
                "IMPLICIT_TUPLE": [
                    5378,
                    2063
                ],
                "syms.testlist": [
                    2063
                ],
                "syms.exprlist": [
                    2063
                ],
                "token.LSQB": [
                    2064,
                    2202
                ],
                "token.LBRACE": [
                    2064
                ],
                "token.RBRACE": [
                    2064,
                    6230
                ],
                "BRACKET.keys": [
                    2065
                ],
                "BRACKET.values": [
                    2066
                ],
                "ALWAYS_NO_SPACE": [
                    2083,
                    2068
                ],
                "SPACE": [
                    2245,
                    2290,
                    2134,
                    2078,
                    2298,
                    2110
                ],
                "DOUBLESPACE": [
                    2087,
                    2079
                ],
                "t": [
                    2193,
                    2197,
                    2202,
                    2080,
                    2210,
                    2083,
                    2086,
                    2090,
                    2103,
                    2234,
                    4929,
                    4932,
                    2253,
                    4943,
                    4945,
                    2280,
                    2284,
                    2288,
                    2172
                ],
                "p.type": [
                    2184,
                    2191,
                    2295,
                    2208,
                    2090,
                    2221,
                    5423,
                    2225,
                    5431,
                    2233,
                    2240,
                    4934,
                    4935,
                    2252,
                    2257,
                    2262,
                    2283,
                    2157,
                    2162,
                    2167
                ],
                "syms.subscript": [
                    2240,
                    2272,
                    2091,
                    2133
                ],
                "syms.sliceop": [
                    2240,
                    2273,
                    2093,
                    2133,
                    2295
                ],
                "prev": [
                    2176,
                    2179,
                    2181,
                    2186,
                    2196,
                    2205,
                    2213,
                    2218,
                    2097,
                    2098,
                    2226,
                    5179,
                    5180,
                    2237,
                    2242,
                    2253,
                    2259,
                    2264,
                    2154,
                    2285,
                    2159,
                    2164,
                    2292,
                    2169,
                    2173
                ],
                "leaf.prev_sibling": [
                    2097,
                    2430,
                    2431
                ],
                "prevp": [
                    2187,
                    2188,
                    2198,
                    2199,
                    2214,
                    2215,
                    2099,
                    2100,
                    2229,
                    2230,
                    2104,
                    2107,
                    2112,
                    2113,
                    2114,
                    2122,
                    2126,
                    2128,
                    2129,
                    2132,
                    2133,
                    2137,
                    2138,
                    2139,
                    2265,
                    2266,
                    2269,
                    2271,
                    2144,
                    2145,
                    2146,
                    2147,
                    2148,
                    2149,
                    2277
                ],
                "preceding_leaf": [
                    2214,
                    2187,
                    2099,
                    2229,
                    2198,
                    2265,
                    5179
                ],
                "prevp.type": [
                    2112,
                    2144,
                    2277,
                    2215,
                    2139,
                    2188,
                    2128,
                    2100,
                    2132,
                    2230,
                    2199,
                    2104,
                    2266,
                    2107,
                    2271
                ],
                "complex_subscript": [
                    2249,
                    2107,
                    2134
                ],
                "token.EQUAL": [
                    2112,
                    2176,
                    2210,
                    4067,
                    2277,
                    2218,
                    3407,
                    2172
                ],
                "prevp.parent": [
                    2113,
                    2114,
                    2145,
                    2146,
                    2122,
                    2133,
                    2137,
                    2138,
                    2269
                ],
                "prevp.parent.type": [
                    2114,
                    2146,
                    2122,
                    2133,
                    2138
                ],
                "syms.parameters": [
                    2157,
                    2117
                ],
                "prevp.prefix": [
                    2126
                ],
                "is_vararg": [
                    2129,
                    4874,
                    2390,
                    4870
                ],
                "syms.factor": [
                    2138,
                    2406,
                    2262
                ],
                "prevp.prev_sibling": [
                    2147,
                    2148,
                    2149
                ],
                "prevp.prev_sibling.type": [
                    2148
                ],
                "prevp.prev_sibling.value": [
                    2149
                ],
                "prev.type": [
                    2176,
                    2181,
                    2154,
                    2218,
                    2285,
                    2159,
                    2259,
                    2164,
                    2292,
                    2205,
                    2237,
                    5180,
                    2173
                ],
                "syms.tname": [
                    2184,
                    2173
                ],
                "prev.prefix": [
                    2179
                ],
                "syms.decorator": [
                    2221
                ],
                "syms.dotted_name": [
                    2225,
                    2398
                ],
                "p.parent": [
                    5426,
                    2243,
                    2244,
                    5429
                ],
                "p.parent.type": [
                    2244
                ],
                "prevp_parent": [
                    2277,
                    2269,
                    2270,
                    2271
                ],
                "prevp_parent.type": [
                    2277,
                    2271
                ],
                "syms.import_from": [
                    4935,
                    5513,
                    5673,
                    2283,
                    5140,
                    2398
                ],
                "node.prev_sibling": [
                    2304,
                    2332
                ],
                "res.leaves": [
                    2310
                ],
                "tokens": [
                    2330,
                    2324,
                    2332,
                    2326
                ],
                "descendant": [
                    2337
                ],
                "ancestor": [
                    2338
                ],
                "same_prefix": [
                    2355,
                    2348
                ],
                "container": [
                    5252,
                    5225,
                    5226,
                    5227,
                    2349,
                    2350,
                    2351,
                    5231,
                    5232,
                    5237,
                    5238,
                    5243,
                    2364,
                    2365
                ],
                "parent": [
                    5188,
                    5284,
                    4105,
                    4554,
                    4555,
                    2351,
                    2352,
                    2991,
                    4560,
                    2355,
                    5203,
                    5205,
                    2358,
                    5296,
                    5365,
                    2361,
                    2364
                ],
                "container.parent": [
                    2351
                ],
                "parent.children": [
                    2355
                ],
                "parent.type": [
                    5284,
                    2358
                ],
                "parent.prev_sibling": [
                    2361
                ],
                "parent.prev_sibling.type": [
                    2361
                ],
                "leaf.parent.type": [
                    2406,
                    2438,
                    2442,
                    2451,
                    2426,
                    2398,
                    2463
                ],
                "previous.type": [
                    2416,
                    2466,
                    2454,
                    2399
                ],
                "syms.comp_for": [
                    2426
                ],
                "syms.old_comp_for": [
                    2426
                ],
                "leaf.prev_sibling.value": [
                    2431
                ],
                "syms.comp_if": [
                    2438
                ],
                "syms.old_comp_if": [
                    2438
                ],
                "syms.comp_op": [
                    2451,
                    2463
                ],
                "previous.value": [
                    2467,
                    2455
                ],
                "FMT_OFF": [
                    5174,
                    5113,
                    5246,
                    2478
                ],
                "FMT_ON": [
                    5244,
                    2479
                ],
                "pc": [
                    5112,
                    5113,
                    2501,
                    2502
                ],
                "list_comments": [
                    5112,
                    5243,
                    5173,
                    2501
                ],
                "token.ENDMARKER": [
                    5226,
                    2501
                ],
                "pc.type": [
                    2502
                ],
                "pc.value": [
                    5113,
                    2502
                ],
                "pc.newlines": [
                    2502
                ],
                "consumed": [
                    2520,
                    2553,
                    2530,
                    2534
                ],
                "ProtoComment": [
                    2552,
                    2524,
                    2526
                ],
                "nlines": [
                    2537,
                    2531,
                    2556,
                    2553
                ],
                "ignored_lines": [
                    2546,
                    2532,
                    2543
                ],
                "prefix.split": [
                    2533
                ],
                "line.lstrip": [
                    6358,
                    2535
                ],
                "line.endswith": [
                    2542
                ],
                "is_endmarker": [
                    2546
                ],
                "comment_type": [
                    2553,
                    2547,
                    2549
                ],
                "make_comment": [
                    2550
                ],
                "result.append": [
                    4802,
                    4804,
                    2551
                ],
                "lru_cache": [
                    5753,
                    2523,
                    5685
                ],
                "content": [
                    2568,
                    2569,
                    2572,
                    2573,
                    2574,
                    2575,
                    2576
                ],
                "content.rstrip": [
                    2568
                ],
                "line.is_comment": [
                    2591
                ],
                "line_str": [
                    2595,
                    2663,
                    6129,
                    6130,
                    2612,
                    6132,
                    6133
                ],
                "line_to_string": [
                    6130,
                    2595
                ],
                "Type": [
                    2597
                ],
                "StringTransformer": [
                    2866,
                    3268,
                    2597,
                    3174
                ],
                "ST": [
                    2599
                ],
                "string_merge": [
                    2649,
                    2601,
                    2618,
                    2639
                ],
                "init_st": [
                    2601,
                    2602,
                    2603,
                    2604
                ],
                "StringMerger": [
                    2601
                ],
                "string_paren_strip": [
                    2640,
                    2602,
                    2618,
                    2650
                ],
                "StringParenStripper": [
                    2602
                ],
                "string_split": [
                    2643,
                    2603,
                    2651
                ],
                "StringSplitter": [
                    2603
                ],
                "string_paren_wrap": [
                    2604,
                    2652,
                    2644
                ],
                "StringParenWrapper": [
                    2604
                ],
                "transformers": [
                    2656,
                    2638,
                    2606,
                    2648,
                    2618,
                    2620
                ],
                "line.contains_uncollapsable_type_comments": [
                    2608
                ],
                "line.should_explode": [
                    4184,
                    2609
                ],
                "line.is_collection_with_optional_trailing_comma": [
                    2610
                ],
                "is_line_short_enough": [
                    4721,
                    2626,
                    2612
                ],
                "line.contains_unsplittable_type_ignore": [
                    2613
                ],
                "line.contains_standalone_comments": [
                    4900,
                    6134,
                    2615
                ],
                "line.inside_brackets": [
                    4903,
                    2637,
                    4847,
                    4913,
                    4883,
                    2615,
                    4859
                ],
                "line.is_def": [
                    2619
                ],
                "left_hand_split": [
                    2620
                ],
                "omit": [
                    2624,
                    2625,
                    4679,
                    4713,
                    4715,
                    5628,
                    5625,
                    5626,
                    5595,
                    5596
                ],
                "generate_trailers_to_omit": [
                    2624
                ],
                "right_hand_split": [
                    2625,
                    2635,
                    4715
                ],
                "features": [
                    2625,
                    5537,
                    5572,
                    2662,
                    5542,
                    4872,
                    5574,
                    5546,
                    2635,
                    4715,
                    4876,
                    5550,
                    5579,
                    5581,
                    2673,
                    4818,
                    5553,
                    5567
                ],
                "delimiter_split": [
                    2641
                ],
                "standalone_comment_split": [
                    2642
                ],
                "rhs": [
                    2653,
                    2645
                ],
                "transform": [
                    2656,
                    2662
                ],
                "strip": [
                    4519,
                    6362,
                    4756,
                    2663
                ],
                "result.extend": [
                    2668
                ],
                "ABC": [
                    2687
                ],
                "abstractmethod": [
                    3290,
                    2717,
                    2727
                ],
                "line.leaves": [
                    6145,
                    2948,
                    3343,
                    3344,
                    5519,
                    4629,
                    4132,
                    2981,
                    3238,
                    3371,
                    6195,
                    4916,
                    6197,
                    6198,
                    6199,
                    6200,
                    3513,
                    3134,
                    4673,
                    2757,
                    2890,
                    6221,
                    3931,
                    3552,
                    4833,
                    6113,
                    3941,
                    5617,
                    3192,
                    3324,
                    4862
                ],
                "match_result": [
                    3302,
                    3303,
                    2760,
                    3304,
                    2762,
                    2763,
                    3306,
                    3311,
                    2769
                ],
                "self.do_match": [
                    2760
                ],
                "cant_transform": [
                    2922,
                    2763,
                    2767,
                    2928,
                    2930,
                    2773,
                    4374,
                    4375,
                    2776
                ],
                "match_result.err": [
                    2763
                ],
                "self.__class__.__name__": [
                    4361,
                    2765
                ],
                "self.__class__": [
                    4361,
                    2765
                ],
                "string_idx": [
                    3589,
                    4115,
                    4119,
                    3100,
                    3613,
                    3103,
                    4127,
                    3619,
                    4135,
                    3629,
                    4142,
                    4148,
                    3134,
                    4163,
                    3658,
                    4180,
                    4191,
                    4192,
                    3719,
                    3724,
                    3217,
                    3732,
                    3221,
                    3735,
                    3744,
                    3233,
                    3241,
                    3243,
                    3252,
                    3254,
                    3255,
                    3256,
                    3260,
                    2769,
                    2771,
                    4310,
                    4312,
                    3306,
                    3307,
                    3326,
                    3328,
                    3343,
                    3344,
                    3388,
                    3389,
                    3391,
                    3392,
                    3393,
                    3419,
                    3420,
                    3421,
                    2910,
                    3935,
                    3423,
                    3933,
                    3934,
                    2915,
                    3936,
                    3429,
                    3430,
                    3937,
                    3938,
                    3940,
                    3941,
                    3440,
                    3441,
                    3955,
                    3450,
                    2950,
                    2965,
                    2985,
                    2991,
                    2999,
                    4034,
                    4038,
                    4042,
                    3531,
                    3535,
                    3031,
                    3549,
                    3554,
                    3557,
                    3559,
                    4072,
                    4076,
                    3053,
                    3566,
                    4089
                ],
                "match_result.ok": [
                    2769,
                    3306
                ],
                "line_result": [
                    2777,
                    2771,
                    2772,
                    2773
                ],
                "self.do_transform": [
                    2771
                ],
                "line_result.err": [
                    2773
                ],
                "line_result.ok": [
                    2777
                ],
                "has_prefix": [
                    3082,
                    3089,
                    3090,
                    2803,
                    3068,
                    3069
                ],
                "break_idx": [
                    3680,
                    3681,
                    3840,
                    3683,
                    3841,
                    3685,
                    3842,
                    3844,
                    3847,
                    3831,
                    3667,
                    2804,
                    3699,
                    3670,
                    3830,
                    3832,
                    3834,
                    3647
                ],
                "_Key": [
                    2814,
                    2815
                ],
                "_CUSTOM_SPLIT_MAP": [
                    2815
                ],
                "CustomSplit": [
                    3090,
                    2827,
                    2837,
                    2815
                ],
                "defaultdict": [
                    2815
                ],
                "string": [
                    4608,
                    4611,
                    4612,
                    4614,
                    2824,
                    2834,
                    3866,
                    3868,
                    3871,
                    2850,
                    3878,
                    2862,
                    3776,
                    3779,
                    3013,
                    3016,
                    3794,
                    3799,
                    4571,
                    4575,
                    4576,
                    4458,
                    3822,
                    3824,
                    3825,
                    4598,
                    4599,
                    4606,
                    4607
                ],
                "key": [
                    2850,
                    2852,
                    2853,
                    2862,
                    2863,
                    2834,
                    2835
                ],
                "self._get_key": [
                    2834,
                    2850,
                    2862
                ],
                "self._CUSTOM_SPLIT_MAP": [
                    2835,
                    2852,
                    2853,
                    2863
                ],
                "custom_splits": [
                    3619,
                    2852,
                    3110,
                    2855,
                    3623,
                    3624,
                    3657,
                    3024,
                    3090,
                    2835,
                    3638,
                    3646
                ],
                "CustomSplitMapMixin": [
                    3881,
                    2866,
                    3463
                ],
                "LL": [
                    3585,
                    3589,
                    4105,
                    4106,
                    4108,
                    4111,
                    4114,
                    4119,
                    4122,
                    3099,
                    3613,
                    3104,
                    3619,
                    4132,
                    4134,
                    4135,
                    4137,
                    4139,
                    3629,
                    4142,
                    4144,
                    4148,
                    4163,
                    3658,
                    4180,
                    4192,
                    3192,
                    3194,
                    3196,
                    4221,
                    3204,
                    3205,
                    3724,
                    3213,
                    3732,
                    3221,
                    3735,
                    3226,
                    3227,
                    3230,
                    3744,
                    3238,
                    3241,
                    3243,
                    3252,
                    3254,
                    3255,
                    3256,
                    3260,
                    3263,
                    3324,
                    3326,
                    3371,
                    3373,
                    3391,
                    3392,
                    3398,
                    2890,
                    2892,
                    2894,
                    2898,
                    3416,
                    3931,
                    3420,
                    3421,
                    3934,
                    3423,
                    3935,
                    3936,
                    3937,
                    3938,
                    3430,
                    3441,
                    3450,
                    2948,
                    3972,
                    2950,
                    3975,
                    3977,
                    3979,
                    2963,
                    3998,
                    3999,
                    4000,
                    4002,
                    4004,
                    2981,
                    4006,
                    2983,
                    2991,
                    2999,
                    4024,
                    3513,
                    4025,
                    3515,
                    4027,
                    4030,
                    3520,
                    4033,
                    3524,
                    4038,
                    3528,
                    3535,
                    3538,
                    3542,
                    3036,
                    4060,
                    3038,
                    4061,
                    3552,
                    4063,
                    3554,
                    4065,
                    3556,
                    3557,
                    4068,
                    3559,
                    4071,
                    4076,
                    3054,
                    3566,
                    3057,
                    3570,
                    4081,
                    4083
                ],
                "is_valid_index": [
                    3841,
                    3203,
                    3844,
                    3589,
                    3719,
                    3975,
                    3977,
                    4106,
                    3979,
                    3212,
                    4114,
                    3225,
                    4122,
                    3230,
                    4126,
                    4511,
                    4002,
                    4004,
                    4006,
                    2983,
                    4134,
                    3373,
                    4025,
                    3515,
                    3388,
                    3520,
                    3776,
                    3778,
                    4033,
                    3524,
                    3528,
                    4041,
                    2892,
                    2897,
                    3538,
                    3542,
                    3546,
                    3419,
                    3035,
                    4063,
                    4191,
                    3556,
                    3429,
                    4071,
                    3054,
                    3440,
                    4082,
                    3831,
                    4088,
                    3194
                ],
                "is_valid_index_factory": [
                    3776,
                    4002,
                    3556,
                    4134,
                    2983,
                    3975,
                    4106,
                    2892,
                    3373,
                    4025,
                    3194,
                    3515,
                    4063
                ],
                "TErr": [
                    3330,
                    3338,
                    2956,
                    3346,
                    3352,
                    3612,
                    3235,
                    3245,
                    3144,
                    3529,
                    3149,
                    3156,
                    3159,
                    2905,
                    3547,
                    3164,
                    3169,
                    3950,
                    3957
                ],
                "new_line": [
                    3586,
                    2961,
                    2962,
                    2963,
                    2965,
                    2968,
                    3098,
                    3101,
                    3105,
                    3108,
                    3111,
                    3249,
                    3250,
                    3252,
                    3257,
                    3260,
                    4540,
                    4543,
                    3265,
                    2908,
                    2910,
                    2913,
                    2915,
                    2917,
                    2932
                ],
                "rblc_result": [
                    2912,
                    2913,
                    2919,
                    2921,
                    2909
                ],
                "self.__remove_backslash_line_continuation_chars": [
                    2909
                ],
                "rblc_result.ok": [
                    2913
                ],
                "msg_result": [
                    2915,
                    2916,
                    2917,
                    2919,
                    2920
                ],
                "self.__merge_string_group": [
                    2915
                ],
                "msg_result.ok": [
                    2917
                ],
                "msg_cant_transform": [
                    2920,
                    2928,
                    2927
                ],
                "msg_result.err": [
                    2920
                ],
                "rblc_cant_transform": [
                    2921,
                    2927
                ],
                "rblc_result.err": [
                    2921
                ],
                "msg_cant_transform.__cause__": [
                    2927
                ],
                "cant_transform.__cause__": [
                    2928
                ],
                "string_leaf": [
                    3329,
                    2950,
                    3334,
                    2952,
                    2953,
                    2954,
                    3339,
                    2957,
                    3092,
                    3095,
                    3351,
                    3101,
                    3110,
                    3254,
                    3256,
                    3257,
                    4438,
                    4439,
                    4186,
                    4187,
                    4188,
                    3326
                ],
                "string_leaf.type": [
                    2952
                ],
                "string_leaf.value": [
                    3329,
                    3110,
                    2953,
                    2954,
                    3339,
                    3351
                ],
                "has_triple_quotes": [
                    2954,
                    3351,
                    5436,
                    3143
                ],
                "line.clone": [
                    3715,
                    3694,
                    4207,
                    2961,
                    3249,
                    4147,
                    3098,
                    3743
                ],
                "new_line.comments": [
                    3250,
                    2962
                ],
                "line.comments": [
                    3139,
                    3749,
                    3343,
                    3344,
                    3153,
                    3250,
                    2962,
                    3155
                ],
                "append_leaves": [
                    3744,
                    3108,
                    4202,
                    2963,
                    3252,
                    3735,
                    3259,
                    4159
                ],
                "new_string_leaf": [
                    2965,
                    2966
                ],
                "new_line.leaves": [
                    2965
                ],
                "new_string_leaf.value": [
                    2966
                ],
                "new_string_leaf.value.replace": [
                    2966
                ],
                "vresult": [
                    2985,
                    2986,
                    2987,
                    3308,
                    3307,
                    3309
                ],
                "self.__validate_msg": [
                    2985
                ],
                "atom_node": [
                    3095,
                    3094,
                    2991
                ],
                "BREAK_MARK": [
                    3083,
                    3088,
                    3092,
                    2997,
                    3071
                ],
                "QUOTE": [
                    3554,
                    3685,
                    3018,
                    3699,
                    3670,
                    2999,
                    3071
                ],
                "assert_is_leaf_string": [
                    3866,
                    3779,
                    3013,
                    4571
                ],
                "RE_EVEN_BACKSLASHES": [
                    3018,
                    3015
                ],
                "naked_string": [
                    3016,
                    3017,
                    3018,
                    3020
                ],
                "string_prefix": [
                    3016
                ],
                "re.sub": [
                    3872,
                    3017,
                    5954,
                    3873
                ],
                "prefix_tracker": [
                    3082,
                    3027,
                    3069
                ],
                "next_str_idx": [
                    3074,
                    3053,
                    3054,
                    3057,
                    3031,
                    3035,
                    3036,
                    3038,
                    3039
                ],
                "get_string_prefix": [
                    3559,
                    3147,
                    3058,
                    3799,
                    3038
                ],
                "S": [
                    3072,
                    3050,
                    3076,
                    3071
                ],
                "NS": [
                    3072,
                    3051,
                    3071
                ],
                "num_of_strings": [
                    3146,
                    3052,
                    3055,
                    3158,
                    3160,
                    3133,
                    3103
                ],
                "SS": [
                    3064,
                    3057,
                    3058,
                    3066
                ],
                "next_prefix": [
                    3058,
                    3068,
                    3066,
                    3062
                ],
                "re.subf": [
                    3064
                ],
                "NSS": [
                    3066,
                    3071
                ],
                "make_naked": [
                    3072,
                    3066
                ],
                "prefix_tracker.append": [
                    3069
                ],
                "S_leaf": [
                    3081,
                    3076,
                    3092,
                    3078
                ],
                "temp_string": [
                    3088,
                    3081,
                    3083
                ],
                "S_leaf.value": [
                    3081,
                    3092
                ],
                "mark_idx": [
                    3088,
                    3089,
                    3083,
                    3085
                ],
                "temp_string.find": [
                    3083
                ],
                "breakpoint_idx": [
                    3089,
                    3090
                ],
                "custom_splits.append": [
                    3090
                ],
                "S_leaf.value.replace": [
                    3092
                ],
                "replace_child": [
                    3585,
                    4163,
                    4212,
                    3095,
                    3256,
                    4539,
                    4221
                ],
                "new_line.append": [
                    3105,
                    3586,
                    3257,
                    4540,
                    3101,
                    4543
                ],
                "comment_leaf": [
                    3104,
                    3105,
                    3457,
                    4172,
                    4173,
                    3450,
                    4542,
                    4543
                ],
                "line.comments_after": [
                    3104,
                    4865,
                    6118,
                    3244,
                    4172,
                    4919,
                    3450
                ],
                "self.add_custom_splits": [
                    3110
                ],
                "num_of_inline_string_comments": [
                    3140,
                    3163,
                    3154,
                    3131,
                    3165
                ],
                "set_of_prefixes": [
                    3168,
                    3169,
                    3132,
                    3151
                ],
                "set_of_prefixes.add": [
                    3151
                ],
                "contains_pragma_comment": [
                    3155,
                    3343
                ],
                "idx": [
                    3203,
                    3204,
                    3205,
                    3977,
                    3979,
                    3212,
                    3213,
                    3980,
                    4111,
                    3217,
                    4114,
                    4115,
                    4119,
                    4122,
                    4123,
                    4509,
                    4126,
                    4004,
                    4006,
                    4007,
                    3517,
                    4030,
                    3520,
                    3521,
                    4033,
                    4034,
                    3524,
                    3525,
                    4038,
                    3528,
                    4041,
                    3531,
                    3535,
                    3538,
                    3539,
                    3542,
                    3543,
                    4312,
                    4313,
                    3546,
                    4314,
                    4315,
                    4068,
                    4071,
                    4072,
                    4076,
                    4082,
                    4083,
                    4085,
                    4088,
                    3196
                ],
                "is_empty_lpar": [
                    4476,
                    3524,
                    3205
                ],
                "string_parser": [
                    4037,
                    4038,
                    3240,
                    3241,
                    4075,
                    4076,
                    3534,
                    3535,
                    3220,
                    3221,
                    4118,
                    4119
                ],
                "StringParser": [
                    4037,
                    3240,
                    4075,
                    3534,
                    3220,
                    4118
                ],
                "next_idx": [
                    3221,
                    3225,
                    3226,
                    3227,
                    3230
                ],
                "string_parser.parse": [
                    4038,
                    3241,
                    4076,
                    3535,
                    3221,
                    4119
                ],
                "is_empty_rpar": [
                    3538,
                    3227,
                    4476
                ],
                "rpar_idx": [
                    3241,
                    3243,
                    3260,
                    3263
                ],
                "line.comments.copy": [
                    3250,
                    3749
                ],
                "remove": [
                    3263,
                    3255
                ],
                "self.do_splitter_match": [
                    3302
                ],
                "self.__validate": [
                    3307
                ],
                "max_string_length": [
                    3328,
                    3329,
                    3459,
                    3460,
                    3945,
                    3946
                ],
                "self.__get_max_string_length": [
                    3328
                ],
                "string_leaf.parent": [
                    4438,
                    3334
                ],
                "L.type": [
                    3334
                ],
                "L": [
                    3334
                ],
                "string_leaf.parent.children": [
                    3334
                ],
                "offset": [
                    3457,
                    3427,
                    3459,
                    3401,
                    3405,
                    3437,
                    3444,
                    3413,
                    3447,
                    3417,
                    3386,
                    3454
                ],
                "line.depth": [
                    5598,
                    4903,
                    6248,
                    3945,
                    3599,
                    4847,
                    4913,
                    3610,
                    4883,
                    4182,
                    6206,
                    3386,
                    4859,
                    3614
                ],
                "p_idx": [
                    3416,
                    3396,
                    3389,
                    3398
                ],
                "P": [
                    3407,
                    3403,
                    3398,
                    3399
                ],
                "P.type": [
                    3403,
                    3407,
                    3399
                ],
                "N": [
                    3425,
                    3432,
                    3420,
                    3421,
                    3423
                ],
                "N.type": [
                    3432,
                    3425,
                    3421
                ],
                "N.value": [
                    3421
                ],
                "NN": [
                    3432,
                    3430,
                    3447
                ],
                "NN.type": [
                    3432
                ],
                "NN.value": [
                    3447
                ],
                "has_comments": [
                    3449,
                    3451,
                    3452
                ],
                "comment_leaf.value": [
                    3457
                ],
                "BaseStringSplitter": [
                    3881,
                    3463
                ],
                "MIN_SUBSTR_SIZE": [
                    3500
                ],
                "RE_FEXPR": [
                    3502
                ],
                "insert_str_child": [
                    4450,
                    4165,
                    3557,
                    4135,
                    3690,
                    4214,
                    4187,
                    3708
                ],
                "insert_str_child_factory": [
                    3557,
                    4135
                ],
                "drop_pointless_f_prefix": [
                    3704,
                    3673,
                    3565
                ],
                "re.search": [
                    3868,
                    3565
                ],
                "self.RE_FEXPR": [
                    3794,
                    3868,
                    3566
                ],
                "re.VERBOSE": [
                    3794,
                    3868,
                    5037,
                    3566
                ],
                "first_string_line": [
                    3700,
                    3569,
                    3660,
                    3573
                ],
                "starts_with_plus": [
                    3570,
                    3573
                ],
                "line_needs_plus": [
                    3601,
                    3650,
                    3583
                ],
                "plus_leaf": [
                    3584,
                    3585,
                    3586
                ],
                "ends_with_comma": [
                    4193,
                    3588,
                    4138,
                    4140,
                    4143,
                    3600,
                    4219
                ],
                "max_break_idx": [
                    3840,
                    3650,
                    3778,
                    3624,
                    3606,
                    3830,
                    3608,
                    3610,
                    3611
                ],
                "self.pop_custom_splits": [
                    3619
                ],
                "use_custom_breakpoints": [
                    3682,
                    3622,
                    3661,
                    3637,
                    3644
                ],
                "csplit.break_idx": [
                    3624,
                    3647
                ],
                "csplit": [
                    3624,
                    3682,
                    3646,
                    3647
                ],
                "rest_value": [
                    3651,
                    3685,
                    3658,
                    3723,
                    3629,
                    3699,
                    3670,
                    3640,
                    3705,
                    3707
                ],
                "max_last_string": [
                    3640,
                    3731
                ],
                "string_line_results": [
                    3697,
                    3642,
                    3659,
                    3702
                ],
                "more_splits_should_be_made": [
                    3643
                ],
                "custom_splits.pop": [
                    3646
                ],
                "max_bidx": [
                    3650,
                    3651
                ],
                "maybe_break_idx": [
                    3667,
                    3651,
                    3652
                ],
                "self.__get_break_idx": [
                    3651
                ],
                "next_value": [
                    3685,
                    3686,
                    3689,
                    3670,
                    3675
                ],
                "self.__normalize_f_string": [
                    3705,
                    3675,
                    3686
                ],
                "csplit.has_prefix": [
                    3682
                ],
                "next_leaf": [
                    3696,
                    3689,
                    3690,
                    3691
                ],
                "self.__maybe_normalize_string_quotes": [
                    3713,
                    3691
                ],
                "next_line": [
                    3696,
                    3697,
                    3694,
                    3695
                ],
                "maybe_append_plus": [
                    3716,
                    3695
                ],
                "next_line.append": [
                    3696
                ],
                "string_line_results.append": [
                    3697
                ],
                "rest_leaf": [
                    3713,
                    3740,
                    3748,
                    3734,
                    3707,
                    3708
                ],
                "temp_value": [
                    3723,
                    3731,
                    3725
                ],
                "last_line.append": [
                    3748,
                    3734,
                    4215,
                    3740,
                    4222
                ],
                "non_string_line": [
                    3744,
                    3745,
                    3743
                ],
                "last_line.comments": [
                    3749
                ],
                "_fexpr_slices": [
                    3781,
                    3792,
                    3793,
                    3795,
                    3797
                ],
                "match": [
                    4973,
                    4974,
                    4975,
                    3794,
                    3795,
                    4979
                ],
                "re.finditer": [
                    3794
                ],
                "_fexpr_slices.append": [
                    3795
                ],
                "match.span": [
                    3795
                ],
                "is_fstring": [
                    3807,
                    3799
                ],
                "start": [
                    3810,
                    3811
                ],
                "end": [
                    3810,
                    3811
                ],
                "fexpr_slices": [
                    3810
                ],
                "is_space": [
                    3827,
                    3822
                ],
                "is_big_enough": [
                    3827,
                    3823
                ],
                "self.MIN_SUBSTR_SIZE": [
                    3824,
                    3825
                ],
                "breaks_fstring_expression": [
                    3827
                ],
                "passes_all_checks": [
                    3841,
                    3834,
                    3844,
                    3831
                ],
                "new_prefix": [
                    3876,
                    4976,
                    4978,
                    4979,
                    3869
                ],
                "prefix.replace": [
                    3869
                ],
                "temp": [
                    3872,
                    3873,
                    3874,
                    3871
                ],
                "new_string": [
                    3874,
                    3876
                ],
                "self._return_match": [
                    3934
                ],
                "self._else_match": [
                    3935
                ],
                "self._assert_match": [
                    3936
                ],
                "self._assign_match": [
                    3937
                ],
                "self._dict_match": [
                    3938
                ],
                "string_value": [
                    3941,
                    3943,
                    3946,
                    3948,
                    4180,
                    4186
                ],
                "self.has_custom_splits": [
                    3948
                ],
                "parent_type": [
                    3972,
                    4105,
                    4081,
                    4024,
                    4060,
                    3998
                ],
                "syms.return_stmt": [
                    3972
                ],
                "syms.yield_expr": [
                    5392,
                    3972
                ],
                "is_empty_par": [
                    4068,
                    4004,
                    3977,
                    4331,
                    4111,
                    4030
                ],
                "syms.assert_stmt": [
                    4024
                ],
                "syms.expr_stmt": [
                    5284,
                    4060
                ],
                "token.PLUSEQUAL": [
                    4067
                ],
                "comma_idx": [
                    4144,
                    4137,
                    4139,
                    4221
                ],
                "leaves_to_steal_comments_from": [
                    4144,
                    4171,
                    4156,
                    4142
                ],
                "leaves_to_steal_comments_from.append": [
                    4144,
                    4156
                ],
                "left_leaves": [
                    4148,
                    4154,
                    4156,
                    4157,
                    4159
                ],
                "old_parens_exist": [
                    4153,
                    4162,
                    4155,
                    4196
                ],
                "left_leaves.pop": [
                    4157
                ],
                "lpar_leaf": [
                    4161,
                    4163,
                    4165,
                    4166
                ],
                "first_line.append": [
                    4173,
                    4166
                ],
                "string_line": [
                    4204,
                    4202,
                    4188,
                    4181
                ],
                "string_line.append": [
                    4188
                ],
                "old_rpar_leaf": [
                    4200,
                    4211,
                    4212,
                    4190
                ],
                "right_leaves": [
                    4192,
                    4194,
                    4198,
                    4200,
                    4202
                ],
                "right_leaves.pop": [
                    4200,
                    4194
                ],
                "last_line.bracket_tracker": [
                    4208
                ],
                "first_line.bracket_tracker": [
                    4208
                ],
                "new_rpar_leaf": [
                    4210,
                    4212,
                    4214,
                    4215
                ],
                "comma_leaf": [
                    4220,
                    4221,
                    4222
                ],
                "DEFAULT_TOKEN": [
                    4257,
                    4292,
                    4274,
                    4280,
                    4284,
                    4287
                ],
                "START": [
                    4272,
                    4273,
                    4274,
                    4260
                ],
                "DOT": [
                    4272,
                    4276,
                    4261
                ],
                "NAME": [
                    4280,
                    4276,
                    4262,
                    4279
                ],
                "PERCENT": [
                    4273,
                    4283,
                    4284,
                    4263
                ],
                "SINGLE_FMT_ARG": [
                    4264,
                    4284,
                    4287
                ],
                "LPAR": [
                    4265,
                    4283,
                    4279
                ],
                "RPAR": [
                    4266,
                    4292
                ],
                "DONE": [
                    4292,
                    4267,
                    4274,
                    4280,
                    4287
                ],
                "_goto": [
                    4270
                ],
                "self._state": [
                    4352,
                    4357,
                    4296,
                    4363,
                    4338,
                    4346
                ],
                "self.START": [
                    4296
                ],
                "self._unmatched_lpars": [
                    4336,
                    4297,
                    4344,
                    4345
                ],
                "self._next_state": [
                    4313
                ],
                "next_token": [
                    4352,
                    4334,
                    4335,
                    4343,
                    4351
                ],
                "current_state": [
                    4352,
                    4356,
                    4357,
                    4338,
                    4342,
                    4351
                ],
                "self.LPAR": [
                    4342
                ],
                "self.RPAR": [
                    4346
                ],
                "self._goto": [
                    4352,
                    4356,
                    4357,
                    4351
                ],
                "self.DEFAULT_TOKEN": [
                    4356,
                    4357
                ],
                "self.DONE": [
                    4363
                ],
                "err_msg": [
                    4374
                ],
                "comment_list": [
                    4385
                ],
                "comment.value.startswith": [
                    4386
                ],
                "comment.value": [
                    4386,
                    6119,
                    5192,
                    5174,
                    5244,
                    5246
                ],
                "string_parent": [
                    4444,
                    4438,
                    4447
                ],
                "string_child_idx": [
                    4448,
                    4445,
                    4447,
                    4439
                ],
                "string_leaf.remove": [
                    4439
                ],
                "string_parent.insert_child": [
                    4447
                ],
                "raw_string": [
                    4458,
                    4459
                ],
                "string.lstrip": [
                    4458
                ],
                "Sequence": [
                    6110,
                    6094,
                    4487
                ],
                "seq": [
                    4509
                ],
                "old_leaf": [
                    4535,
                    4536,
                    4538,
                    4539,
                    4542
                ],
                "old_line.leaves": [
                    4536
                ],
                "old_line": [
                    4536,
                    4542
                ],
                "new_leaf": [
                    4538,
                    4539,
                    4540
                ],
                "old_leaf.type": [
                    4538
                ],
                "old_leaf.value": [
                    4538
                ],
                "old_line.comments_after": [
                    4542
                ],
                "old_child.parent": [
                    4554
                ],
                "old_child": [
                    4554,
                    4558
                ],
                "child_idx": [
                    4560,
                    4558,
                    4559
                ],
                "old_child.remove": [
                    4558
                ],
                "parent.insert_child": [
                    4560,
                    5365,
                    5205
                ],
                "new_child": [
                    4560,
                    5363,
                    5364,
                    5365
                ],
                "prefix_idx": [
                    4576,
                    4577,
                    4574,
                    4575
                ],
                "lower": [
                    4576
                ],
                "dquote_idx": [
                    4600,
                    4601,
                    4603,
                    4598
                ],
                "string.find": [
                    4598,
                    4599
                ],
                "squote_idx": [
                    4600,
                    4601,
                    4603,
                    4599
                ],
                "quote_idx": [
                    4612,
                    4614,
                    4601,
                    4603,
                    4606
                ],
                "issubset": [
                    4612
                ],
                "tail_leaves": [
                    4676,
                    4646,
                    4678,
                    4624,
                    4689,
                    4694,
                    4635,
                    4667,
                    4670
                ],
                "body_leaves": [
                    4640,
                    4674,
                    4676,
                    4645,
                    4682,
                    4625,
                    4690,
                    4693,
                    4631,
                    4635,
                    4668
                ],
                "head_leaves": [
                    4669,
                    4644,
                    4676,
                    4683,
                    4626,
                    4627,
                    4691,
                    4692,
                    4635,
                    4637
                ],
                "current_leaves": [
                    4640,
                    4674,
                    4676,
                    4677,
                    4678,
                    4682,
                    4627,
                    4631,
                    4635,
                    4636,
                    4637,
                    4670
                ],
                "matching_bracket": [
                    4641,
                    4644,
                    4645,
                    4646,
                    4628,
                    4633,
                    4639
                ],
                "current_leaves.append": [
                    4636,
                    4677
                ],
                "CannotSplit": [
                    4642,
                    4835,
                    4901,
                    4841,
                    4845,
                    4718,
                    4687,
                    4723,
                    4759,
                    4728,
                    4762
                ],
                "head": [
                    4737,
                    4644,
                    4647,
                    4648,
                    4727,
                    4692,
                    4695
                ],
                "bracket_split_build_line": [
                    4644,
                    4645,
                    4646,
                    4692,
                    4693,
                    4694
                ],
                "body": [
                    4737,
                    5011,
                    4757,
                    5013,
                    5019,
                    5022,
                    5023,
                    5025,
                    5026,
                    4645,
                    4647,
                    4648,
                    5047,
                    4693,
                    4695,
                    4698,
                    4709,
                    4711,
                    4720,
                    4721
                ],
                "tail": [
                    4737,
                    4646,
                    4647,
                    4648,
                    4727,
                    4756,
                    4694,
                    4695
                ],
                "bracket_split_succeeded_or_raise": [
                    4695,
                    4647
                ],
                "closing_bracket": [
                    4672,
                    4704,
                    4736,
                    5600,
                    5632,
                    4681,
                    4713,
                    4683,
                    5624,
                    5625,
                    4703
                ],
                "tail_leaves.reverse": [
                    4689
                ],
                "body_leaves.reverse": [
                    4690
                ],
                "head_leaves.reverse": [
                    4691
                ],
                "body.should_explode": [
                    4698
                ],
                "opening_bracket.type": [
                    4700
                ],
                "opening_bracket.value": [
                    5514,
                    4787,
                    4701
                ],
                "closing_bracket.type": [
                    4703
                ],
                "closing_bracket.value": [
                    4704
                ],
                "line.is_import": [
                    4707
                ],
                "body.contains_standalone_comments": [
                    4709
                ],
                "can_omit_invisible_parens": [
                    4711
                ],
                "can_be_split": [
                    4720
                ],
                "head.contains_multiline_strings": [
                    4727
                ],
                "tail.contains_multiline_strings": [
                    4727
                ],
                "ensure_visible": [
                    4736,
                    4735
                ],
                "tail_len": [
                    4761,
                    4763,
                    4756,
                    4758
                ],
                "original.depth": [
                    4776
                ],
                "original": [
                    6080,
                    4803,
                    4776,
                    4786,
                    4791
                ],
                "is_body": [
                    4777,
                    4805
                ],
                "result.inside_brackets": [
                    4778
                ],
                "result.depth": [
                    4779
                ],
                "no_commas": [
                    4785,
                    4791
                ],
                "original.is_def": [
                    4786
                ],
                "l.type": [
                    4788
                ],
                "original.is_import": [
                    4791
                ],
                "leaves.insert": [
                    4797
                ],
                "comment_after": [
                    4865,
                    4866,
                    4803,
                    4804,
                    4919,
                    4920
                ],
                "original.comments_after": [
                    4803
                ],
                "result.should_explode": [
                    4806
                ],
                "split_func": [
                    4816,
                    4818
                ],
                "l.leaves": [
                    4819
                ],
                "wraps": [
                    4816
                ],
                "split_wrapper": [
                    4822
                ],
                "bt": [
                    4837,
                    6181,
                    4839,
                    6182,
                    5482,
                    6186,
                    4844,
                    5485,
                    6187,
                    4879,
                    5488,
                    5490
                ],
                "line.bracket_tracker": [
                    5521,
                    6181,
                    4837
                ],
                "delimiter_priority": [
                    4839,
                    4843,
                    4844,
                    4880,
                    4887
                ],
                "bt.max_delimiter_priority": [
                    5490,
                    6186,
                    4839
                ],
                "bt.delimiter_count_with_priority": [
                    6187,
                    4844
                ],
                "lowest_depth": [
                    4848,
                    4868,
                    4869
                ],
                "trailing_comma_safe": [
                    4871,
                    4872,
                    4875,
                    4876,
                    4849,
                    4886
                ],
                "current_line.append_safe": [
                    4909,
                    4855
                ],
                "current_line.append": [
                    4914,
                    4891,
                    4860
                ],
                "append_to_line": [
                    4920,
                    4866,
                    4917,
                    4863
                ],
                "leaf_priority": [
                    4880,
                    4879
                ],
                "bt.delimiters.get": [
                    4879
                ],
                "bt.delimiters": [
                    6182,
                    4879
                ],
                "dont_increase_indentation": [
                    4825,
                    4895
                ],
                "syms.import_name": [
                    4934
                ],
                "v.startswith": [
                    4945
                ],
                "suffix": [
                    5088,
                    4945,
                    5084,
                    5086,
                    5087
                ],
                "spl": [
                    4955,
                    4956,
                    4957,
                    4958
                ],
                "leaf.prefix.split": [
                    4955
                ],
                "nl_count": [
                    4960,
                    4957,
                    4959
                ],
                "count": [
                    4957
                ],
                "re.match": [
                    4973
                ],
                "re.DOTALL": [
                    4973
                ],
                "orig_prefix": [
                    4976,
                    4975
                ],
                "match.group": [
                    4979,
                    4975
                ],
                "orig_prefix.replace": [
                    4976
                ],
                "new_prefix.replace": [
                    4978
                ],
                "leaf.value.lstrip": [
                    4990
                ],
                "orig_quote": [
                    5026,
                    4995,
                    5027,
                    4998,
                    5001,
                    5003,
                    5010,
                    5011,
                    5052
                ],
                "new_quote": [
                    4996,
                    5028,
                    4999,
                    5002,
                    5008,
                    5009,
                    5044,
                    5022,
                    5055
                ],
                "first_quote_pos": [
                    5011,
                    5003,
                    5004,
                    5007
                ],
                "leaf.value.find": [
                    5003
                ],
                "unescaped_new_quote": [
                    5008,
                    5028,
                    5013
                ],
                "re.compile": [
                    5008,
                    5009,
                    5010,
                    6090
                ],
                "escaped_new_quote": [
                    5009,
                    5022
                ],
                "escaped_orig_quote": [
                    5010,
                    5027
                ],
                "prefix.casefold": [
                    5012,
                    5029
                ],
                "unescaped_new_quote.search": [
                    5013
                ],
                "new_body": [
                    5025,
                    5027,
                    5028,
                    5036,
                    5044,
                    5046,
                    5048,
                    5055,
                    5019,
                    5022,
                    5023
                ],
                "sub_twice": [
                    5027,
                    5028,
                    5022
                ],
                "matches": [
                    5030,
                    5039
                ],
                "re.findall": [
                    5030
                ],
                "m": [
                    5040,
                    5039
                ],
                "orig_escape_count": [
                    5049,
                    5052,
                    5047
                ],
                "body.count": [
                    5047
                ],
                "new_escape_count": [
                    5048,
                    5049,
                    5052
                ],
                "new_body.count": [
                    5048
                ],
                "text": [
                    5088,
                    5090,
                    5091,
                    5064,
                    5065,
                    5096,
                    5097,
                    5068,
                    5099,
                    5070,
                    5071,
                    5072,
                    5073,
                    5081,
                    5082,
                    5083,
                    5084
                ],
                "leaf.value.lower": [
                    5064
                ],
                "text.startswith": [
                    5065,
                    5068
                ],
                "after.upper": [
                    5071
                ],
                "text.split": [
                    5073,
                    5099
                ],
                "sign": [
                    5081,
                    5074,
                    5077
                ],
                "after.startswith": [
                    5075,
                    5078
                ],
                "format_float_or_int_string": [
                    5080,
                    5090,
                    5088
                ],
                "text.endswith": [
                    5082
                ],
                "number": [
                    5088,
                    5083
                ],
                "check_lpar": [
                    5129,
                    5131,
                    5116,
                    5156
                ],
                "syms.annassign": [
                    5120
                ],
                "parens_after": [
                    5121,
                    5156
                ],
                "is_walrus_assignment": [
                    5132
                ],
                "maybe_make_parens_invisible_in_atom": [
                    5136,
                    5296
                ],
                "wrap_in_parentheses": [
                    5137,
                    5154,
                    5139
                ],
                "is_one_tuple": [
                    5138,
                    5283
                ],
                "node.append_child": [
                    5150
                ],
                "try_again": [
                    5161,
                    5162,
                    5163
                ],
                "convert_one_fmt_off_pair": [
                    5163
                ],
                "node.leaves": [
                    5171
                ],
                "previous_consumed": [
                    5210,
                    5172,
                    5215
                ],
                "ignored_nodes": [
                    5184,
                    5187,
                    5192,
                    5199,
                    5183
                ],
                "generate_ignored_nodes": [
                    5183
                ],
                "first.parent": [
                    5188
                ],
                "comment.consumed": [
                    5190,
                    5215
                ],
                "hidden_value": [
                    5209,
                    5194,
                    5197,
                    5191
                ],
                "hidden_value.endswith": [
                    5194
                ],
                "first_idx": [
                    5198,
                    5201,
                    5202,
                    5204,
                    5206
                ],
                "ignored": [
                    5200,
                    5199
                ],
                "ignored.remove": [
                    5200
                ],
                "comment.newlines": [
                    5210
                ],
                "container_of": [
                    5225
                ],
                "container.type": [
                    5226
                ],
                "fmt_on": [
                    5227,
                    5259
                ],
                "contains_fmt_on_at_column": [
                    5233,
                    5231
                ],
                "leaf.column": [
                    5233,
                    5231
                ],
                "container.children": [
                    5232,
                    5252
                ],
                "container.next_sibling": [
                    5238
                ],
                "is_fmt_on": [
                    5248,
                    5242,
                    5245,
                    5247
                ],
                "container.prefix": [
                    5243
                ],
                "first_leaf_column": [
                    5255
                ],
                "child.column": [
                    5257,
                    5268
                ],
                "is_empty_tuple": [
                    5282
                ],
                "is_yield": [
                    5284,
                    5406
                ],
                "max_delimiter_priority_in_atom": [
                    5285
                ],
                "last": [
                    5315,
                    5478,
                    5479,
                    5320,
                    5321,
                    5290,
                    5291,
                    5322,
                    6252,
                    5295,
                    6229,
                    6230,
                    6200,
                    6234,
                    6235,
                    6236
                ],
                "first.type": [
                    5291,
                    6204,
                    5318,
                    5479
                ],
                "last.type": [
                    5479,
                    5321,
                    5291,
                    6229,
                    6230,
                    6234
                ],
                "middle": [
                    5296,
                    5298,
                    5292,
                    5301
                ],
                "last.value": [
                    5322,
                    5295
                ],
                "is_atom_with_invisible_parens": [
                    5298
                ],
                "middle.replace": [
                    5301
                ],
                "middle.children": [
                    5301
                ],
                "wrapped": [
                    5347,
                    5343
                ],
                "lpar.type": [
                    5344,
                    5405
                ],
                "rpar.type": [
                    5344,
                    5405
                ],
                "visible": [
                    5358,
                    5359
                ],
                "child.prefix": [
                    5360,
                    5361
                ],
                "child.remove": [
                    5362
                ],
                "new_child.prefix": [
                    5364
                ],
                "gexp": [
                    5371,
                    5372,
                    5375
                ],
                "unwrap_singleton_parenthesis": [
                    5386,
                    5371
                ],
                "gexp.type": [
                    5372
                ],
                "gexp.children": [
                    5375
                ],
                "inner": [
                    5386,
                    5387
                ],
                "inner.type": [
                    5387
                ],
                "syms.namedexpr_test": [
                    5387
                ],
                "expr": [
                    5404,
                    5406
                ],
                "within": [
                    5431
                ],
                "child.children": [
                    5665,
                    5667,
                    5646,
                    5652,
                    5463,
                    5464,
                    5661
                ],
                "c": [
                    5483,
                    5484,
                    5485,
                    5487
                ],
                "bt.mark": [
                    5488,
                    5485
                ],
                "c.leaves": [
                    5487
                ],
                "opening_bracket.parent": [
                    5512,
                    5513
                ],
                "opening_bracket.parent.type": [
                    5513
                ],
                "max_priority": [
                    6186,
                    6187,
                    6191,
                    5521,
                    5525
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    5521
                ],
                "node.pre_order": [
                    5538
                ],
                "value_head": [
                    5540,
                    5541
                ],
                "n.value": [
                    5545,
                    5540
                ],
                "features.add": [
                    5572,
                    5542,
                    5546,
                    5550,
                    5553,
                    5567
                ],
                "n.parent": [
                    5549
                ],
                "n.parent.type": [
                    5549
                ],
                "token.COLONEQUAL": [
                    5552
                ],
                "n.children": [
                    5557,
                    5558,
                    5565
                ],
                "ch": [
                    5569,
                    5570,
                    5565,
                    5566
                ],
                "ch.type": [
                    5569,
                    5566
                ],
                "argch": [
                    5570,
                    5571
                ],
                "ch.children": [
                    5570
                ],
                "argch.type": [
                    5571
                ],
                "get_features_used": [
                    5579
                ],
                "length": [
                    6114,
                    5603,
                    5604,
                    6211,
                    6212,
                    6119,
                    6248,
                    6121,
                    6251,
                    6253,
                    6206,
                    5598
                ],
                "inner_brackets": [
                    5601,
                    5615,
                    5621,
                    5626,
                    5627
                ],
                "leaf_length": [
                    5602,
                    6211,
                    5603,
                    5607,
                    6250,
                    6251,
                    6207
                ],
                "enumerate_with_length": [
                    5602,
                    6250,
                    6207
                ],
                "has_inline_comment": [
                    5608,
                    5607
                ],
                "inner_brackets.add": [
                    5621,
                    5615
                ],
                "omit.add": [
                    5625
                ],
                "omit.update": [
                    5626
                ],
                "inner_brackets.clear": [
                    5627
                ],
                "imports": [
                    5682,
                    5637,
                    5678
                ],
                "syms.import_as_name": [
                    5645
                ],
                "orig_name": [
                    5648,
                    5649,
                    5646,
                    5647
                ],
                "orig_name.type": [
                    5648
                ],
                "orig_name.value": [
                    5649
                ],
                "syms.import_as_names": [
                    5651
                ],
                "get_imports_from_children": [
                    5652,
                    5678
                ],
                "Generator": [
                    5639
                ],
                "first_child": [
                    5666,
                    5673,
                    5674,
                    5678,
                    5661,
                    5662
                ],
                "first_child.type": [
                    5673,
                    5666
                ],
                "module_name": [
                    5674,
                    5675
                ],
                "first_child.children": [
                    5674,
                    5678
                ],
                "module_name.value": [
                    5675
                ],
                "gitignore": [
                    5744,
                    5714,
                    5688,
                    5690,
                    5691
                ],
                "gitignore.is_file": [
                    5690
                ],
                "gitignore.open": [
                    5691
                ],
                "gf": [
                    5691,
                    5692
                ],
                "gf.readlines": [
                    5692
                ],
                "PathSpec.from_lines": [
                    5693
                ],
                "PathSpec": [
                    5702,
                    5693,
                    5686
                ],
                "Pattern": [
                    5699,
                    5700,
                    6083,
                    6090,
                    6074
                ],
                "root.is_absolute": [
                    5711
                ],
                "path.iterdir": [
                    5712
                ],
                "path": [
                    5712,
                    5818,
                    6287
                ],
                "gitignore.match_file": [
                    5714
                ],
                "child.as_posix": [
                    5714
                ],
                "report.path_ignored": [
                    5722,
                    5715,
                    5739,
                    5727
                ],
                "normalized_path": [
                    5720,
                    5737,
                    5748,
                    5735
                ],
                "as_posix": [
                    5720
                ],
                "relative_to": [
                    5720
                ],
                "child.resolve": [
                    5720
                ],
                "child.is_symlink": [
                    5726
                ],
                "child.is_dir": [
                    5742,
                    5734
                ],
                "exclude_match": [
                    5737,
                    5738
                ],
                "exclude.search": [
                    5737
                ],
                "exclude_match.group": [
                    5738
                ],
                "child.is_file": [
                    5747
                ],
                "include_match": [
                    5748,
                    5749
                ],
                "include.search": [
                    5748
                ],
                "srcs": [
                    5763,
                    5766
                ],
                "resolve": [
                    5764,
                    5766
                ],
                "common_base": [
                    5769,
                    5770,
                    5766,
                    5767
                ],
                "common_base.is_dir": [
                    5767
                ],
                "directory": [
                    5770,
                    5771,
                    5772,
                    5774,
                    5775,
                    5777,
                    5778,
                    5780
                ],
                "common_base.parents": [
                    5770
                ],
                "exists": [
                    5771
                ],
                "is_dir": [
                    5774
                ],
                "is_file": [
                    5777
                ],
                "change_count": [
                    5791
                ],
                "same_count": [
                    5792
                ],
                "failure_count": [
                    5793
                ],
                "reformatted": [
                    5856,
                    5798,
                    5800,
                    5845,
                    5849
                ],
                "self.check": [
                    5834,
                    5844,
                    5798
                ],
                "self.diff": [
                    5844,
                    5798
                ],
                "self.verbose": [
                    5817,
                    5803,
                    5799
                ],
                "self.quiet": [
                    5799
                ],
                "self.change_count": [
                    5856,
                    5801,
                    5834,
                    5853,
                    5854
                ],
                "msg": [
                    5808,
                    5805,
                    5807
                ],
                "self.same_count": [
                    5809,
                    5858,
                    5859,
                    5860
                ],
                "message": [
                    5818,
                    5813
                ],
                "self.failure_count": [
                    5861,
                    5862,
                    5831,
                    5864,
                    5814
                ],
                "unchanged": [
                    5850,
                    5860,
                    5846
                ],
                "failed": [
                    5864,
                    5851,
                    5847
                ],
                "report.append": [
                    5863,
                    5860,
                    5855
                ],
                "click.style": [
                    5856,
                    5864
                ],
                "filename": [
                    5881,
                    5875,
                    5870
                ],
                "sys.version_info": [
                    5873,
                    6051,
                    5916,
                    5871
                ],
                "minor_version": [
                    5873,
                    5875
                ],
                "ast.parse": [
                    5875
                ],
                "ast": [
                    5889,
                    5890,
                    5892,
                    5893,
                    5895,
                    5896,
                    5898,
                    5899,
                    5869,
                    5934,
                    5935,
                    5905,
                    5875,
                    5940,
                    5943,
                    5917,
                    5950
                ],
                "feature_version": [
                    5881,
                    5879
                ],
                "ast3.parse": [
                    5881
                ],
                "ast3": [
                    5889,
                    5890,
                    5892,
                    5895,
                    5898,
                    5869,
                    5934,
                    5935,
                    5905,
                    5940,
                    5943,
                    5881,
                    5915
                ],
                "ast27.parse": [
                    5885
                ],
                "ast27": [
                    5889,
                    5890,
                    5892,
                    5895,
                    5869,
                    5934,
                    5935,
                    5905,
                    5940,
                    5943,
                    5915,
                    5885
                ],
                "ast.AST": [
                    5889,
                    5890,
                    5869,
                    5905,
                    5940,
                    5943
                ],
                "ast3.AST": [
                    5889,
                    5890,
                    5869,
                    5905,
                    5940,
                    5943
                ],
                "ast27.AST": [
                    5889,
                    5890,
                    5869,
                    5905,
                    5940,
                    5943
                ],
                "ast.Str": [
                    5892
                ],
                "ast3.Str": [
                    5892
                ],
                "ast27.Str": [
                    5892
                ],
                "ast.Bytes": [
                    5892
                ],
                "ast3.Bytes": [
                    5892
                ],
                "ast.Constant": [
                    5896,
                    5899,
                    5893,
                    5950
                ],
                "node.s": [
                    5893
                ],
                "ast.Num": [
                    5895
                ],
                "ast3.Num": [
                    5895
                ],
                "ast27.Num": [
                    5895
                ],
                "node.n": [
                    5896
                ],
                "ast.NameConstant": [
                    5898
                ],
                "ast3.NameConstant": [
                    5898
                ],
                "_fixup_ast_constants": [
                    5909
                ],
                "node.__class__.__name__": [
                    5959,
                    5911
                ],
                "node.__class__": [
                    5959,
                    5911
                ],
                "node._fields": [
                    5913
                ],
                "type_ignore_classes": [
                    5915,
                    5917,
                    5918
                ],
                "ast3.TypeIgnore": [
                    5915
                ],
                "ast27.TypeIgnore": [
                    5915
                ],
                "ast.TypeIgnore": [
                    5917
                ],
                "item": [
                    5929,
                    5935,
                    5937,
                    5938,
                    5940,
                    5941
                ],
                "ast.Delete": [
                    5934
                ],
                "ast3.Delete": [
                    5934
                ],
                "ast27.Delete": [
                    5934
                ],
                "ast.Tuple": [
                    5935
                ],
                "ast3.Tuple": [
                    5935
                ],
                "ast27.Tuple": [
                    5935
                ],
                "item.elts": [
                    5937
                ],
                "_stringify_ast": [
                    5938,
                    5941,
                    5944,
                    5982,
                    5983
                ],
                "normalized": [
                    5954,
                    5956,
                    5957
                ],
                "value.__class__.__name__": [
                    5957
                ],
                "value.__class__": [
                    5957
                ],
                "src_ast": [
                    5965,
                    5982
                ],
                "parse_ast": [
                    5973,
                    5965
                ],
                "dst_ast": [
                    5973,
                    5983
                ],
                "log": [
                    5985,
                    5989,
                    5997,
                    6004,
                    5975,
                    5979
                ],
                "dump_to_file": [
                    5985,
                    5997,
                    5975
                ],
                "traceback.format_tb": [
                    5975
                ],
                "traceback": [
                    5975
                ],
                "exc.__traceback__": [
                    5975
                ],
                "src_ast_str": [
                    5984,
                    5985,
                    5982
                ],
                "dst_ast_str": [
                    5984,
                    5985,
                    5983
                ],
                "newdst": [
                    5995,
                    5996,
                    5999
                ],
                "tempfile.NamedTemporaryFile": [
                    6313,
                    6011
                ],
                "tempfile": [
                    6313,
                    6011
                ],
                "output": [
                    6014
                ],
                "f.name": [
                    6018,
                    6315
                ],
                "mypyc_attr": [
                    6008
                ],
                "contextmanager": [
                    6021
                ],
                "a_lines": [
                    6034,
                    6037
                ],
                "a.splitlines": [
                    6034
                ],
                "a": [
                    6034
                ],
                "b_lines": [
                    6035,
                    6037
                ],
                "b.splitlines": [
                    6035
                ],
                "b": [
                    6035
                ],
                "difflib.unified_diff": [
                    6037
                ],
                "difflib": [
                    6037
                ],
                "a_name": [
                    6037
                ],
                "b_name": [
                    6037
                ],
                "task.cancel": [
                    6045,
                    6061
                ],
                "all_tasks": [
                    6056,
                    6052,
                    6054
                ],
                "asyncio.all_tasks": [
                    6052
                ],
                "asyncio.Task.all_tasks": [
                    6054
                ],
                "asyncio.Task": [
                    6054
                ],
                "to_cancel": [
                    6056,
                    6057,
                    6060,
                    6063
                ],
                "task.done": [
                    6056
                ],
                "cf_logger": [
                    6069,
                    6070
                ],
                "logging.getLogger": [
                    6069
                ],
                "logging": [
                    6069,
                    6070
                ],
                "cf_logger.setLevel": [
                    6070
                ],
                "logging.CRITICAL": [
                    6070
                ],
                "loop.close": [
                    6071
                ],
                "regex.sub": [
                    6080
                ],
                "regex": [
                    6080,
                    6089,
                    6090,
                    6088
                ],
                "replacement": [
                    6080
                ],
                "compiled": [
                    6090,
                    6091
                ],
                "sequence": [
                    6096,
                    6097
                ],
                "element": [
                    6097,
                    6098
                ],
                "op": [
                    6113,
                    6109
                ],
                "cast": [
                    6109
                ],
                "enumerate_reversed": [
                    6111
                ],
                "call_count": [
                    6168,
                    6150,
                    6158
                ],
                "dot_count": [
                    6160,
                    6168,
                    6151
                ],
                "next.type": [
                    6162,
                    6155
                ],
                "second": [
                    6204,
                    6198
                ],
                "penultimate": [
                    6239,
                    6199
                ],
                "second.type": [
                    6204
                ],
                "remainder": [
                    6217,
                    6209,
                    6210,
                    6205
                ],
                "_index": [
                    6250,
                    6221,
                    6207
                ],
                "last.parent": [
                    6235,
                    6236
                ],
                "last.parent.type": [
                    6236
                ],
                "penultimate.type": [
                    6239
                ],
                "seen_other_brackets": [
                    6249,
                    6258,
                    6253
                ],
                "last.opening_bracket": [
                    6252
                ],
                "mode.get_cache_key": [
                    6264
                ],
                "cache_file": [
                    6272,
                    6273,
                    6276,
                    6309,
                    6313,
                    6315
                ],
                "get_cache_file": [
                    6272,
                    6309
                ],
                "cache_file.exists": [
                    6273
                ],
                "cache_file.open": [
                    6276
                ],
                "fobj": [
                    6276,
                    6278
                ],
                "pickle.load": [
                    6278
                ],
                "pickle": [
                    6314,
                    6278,
                    6279
                ],
                "pickle.UnpicklingError": [
                    6279
                ],
                "stat": [
                    6288,
                    6287
                ],
                "path.stat": [
                    6287
                ],
                "stat.st_mtime": [
                    6288
                ],
                "stat.st_size": [
                    6288
                ],
                "todo": [
                    6304,
                    6297,
                    6301
                ],
                "cache.get": [
                    6300
                ],
                "todo.add": [
                    6301
                ],
                "done.add": [
                    6303
                ],
                "CACHE_DIR.mkdir": [
                    6311
                ],
                "new_cache": [
                    6312,
                    6314
                ],
                "cache_file.parent": [
                    6313
                ],
                "pickle.dump": [
                    6314
                ],
                "os.replace": [
                    6315
                ],
                "module": [
                    6337,
                    6338,
                    6339
                ],
                "core": [
                    6337
                ],
                "_unicodefun": [
                    6337
                ],
                "module._verify_python3_env": [
                    6339
                ],
                "freeze_support": [
                    6343
                ],
                "patch_click": [
                    6344
                ],
                "main": [
                    6345
                ],
                "splitlines": [
                    6354
                ],
                "docstring.expandtabs": [
                    6354
                ],
                "stripped": [
                    6360,
                    6358,
                    6359
                ],
                "trimmed": [
                    6368,
                    6370,
                    6362,
                    6372
                ],
                "last_line_idx": [
                    6364,
                    6367
                ],
                "stripped_line": [
                    6368,
                    6366,
                    6367
                ],
                "rstrip": [
                    6366
                ],
                "trimmed.append": [
                    6368,
                    6370
                ],
                "patched_main": [
                    6376
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/black_1/tests/test_black.py",
                "test_function": "test_works_in_mono_process_only_environment",
                "test_function_code": "    @patch(\"black.ProcessPoolExecutor\", autospec=True)\n    def test_works_in_mono_process_only_environment(self, mock_executor) -> None:\n        mock_executor.side_effect = OSError()\n        mode = black.FileMode()\n        with cache_dir() as workspace:\n            one = (workspace / \"one.py\").resolve()\n            with one.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            two = (workspace / \"two.py\").resolve()\n            with two.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            black.write_cache({}, [one], mode)\n            self.invokeBlack([str(workspace)])\n            with one.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), \"print('hello')\")\n            with two.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), 'print(\"hello\")\\n')\n            cache = black.read_cache(mode)\n            self.assertIn(one, cache)\n            self.assertIn(two, cache)",
                "test_error": "AssertionError: 1 != 0 :",
                "full_test_error": "self = <tests.test_black.BlackTestCase testMethod=test_works_in_mono_process_only_environment>\nmock_executor = <MagicMock name='ProcessPoolExecutor' spec='ProcessPoolExecutor' id='4533856144'>\n\n    @patch(\"black.ProcessPoolExecutor\", autospec=True)\n    def test_works_in_mono_process_only_environment(self, mock_executor) -> None:\n        mock_executor.side_effect = OSError()\n        mode = black.FileMode()\n        with cache_dir() as workspace:\n            one = (workspace / \"one.py\").resolve()\n            with one.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            two = (workspace / \"two.py\").resolve()\n            with two.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            black.write_cache({}, [one], mode)\n>           self.invokeBlack([str(workspace)])\n\ntests/test_black.py:1288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:162: in invokeBlack\n    self.assertEqual(result.exit_code, exit_code, msg=runner.stderr_bytes.decode())\nE   AssertionError: 1 != 0 :",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "patch('black.ProcessPoolExecutor', autospec=True)"
                ]
            }
        ]
    }
}