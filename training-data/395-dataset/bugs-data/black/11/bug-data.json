{
    "black:11": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/black_11/black.py": {
            "buggy_functions": [
                {
                    "function_name": "split_line",
                    "function_code": "def split_line(\n    line: Line, line_length: int, inner: bool = False, py36: bool = False\n) -> Iterator[Line]:\n    \"\"\"Split a `line` into potentially many lines.\n\n    They should fit in the allotted `line_length` but might not be able to.\n    `inner` signifies that there were a pair of brackets somewhere around the\n    current `line`, possibly transitively. This means we can fallback to splitting\n    by delimiters if the LHS/RHS don't yield any results.\n\n    If `py36` is True, splitting may generate syntax that is only compatible\n    with Python 3.6 and later.\n    \"\"\"\n    if line.is_comment:\n        yield line\n        return\n\n    line_str = str(line).strip(\"\\n\")\n    if not line.should_explode and is_line_short_enough(\n        line, line_length=line_length, line_str=line_str\n    ):\n        yield line\n        return\n\n    split_funcs: List[SplitFunc]\n    if line.is_def:\n        split_funcs = [left_hand_split]\n    else:\n\n        def rhs(line: Line, py36: bool = False) -> Iterator[Line]:\n            for omit in generate_trailers_to_omit(line, line_length):\n                lines = list(right_hand_split(line, line_length, py36, omit=omit))\n                if is_line_short_enough(lines[0], line_length=line_length):\n                    yield from lines\n                    return\n\n            # All splits failed, best effort split with no omits.\n            # This mostly happens to multiline strings that are by definition\n            # reported as not fitting a single line.\n            yield from right_hand_split(line, py36)\n\n        if line.inside_brackets:\n            split_funcs = [delimiter_split, standalone_comment_split, rhs]\n        else:\n            split_funcs = [rhs]\n    for split_func in split_funcs:\n        # We are accumulating lines in `result` because we might want to abort\n        # mission and return the original line in the end, or attempt a different\n        # split altogether.\n        result: List[Line] = []\n        try:\n            for l in split_func(line, py36):\n                if str(l).strip(\"\\n\") == line_str:\n                    raise CannotSplit(\"Split function returned an unchanged result\")\n\n                result.extend(\n                    split_line(l, line_length=line_length, inner=True, py36=py36)\n                )\n        except CannotSplit:\n            continue\n\n        else:\n            yield from result\n            break\n\n    else:\n        yield line\n",
                    "decorators": [],
                    "docstring": "Split a `line` into potentially many lines.\n\nThey should fit in the allotted `line_length` but might not be able to.\n`inner` signifies that there were a pair of brackets somewhere around the\ncurrent `line`, possibly transitively. This means we can fallback to splitting\nby delimiters if the LHS/RHS don't yield any results.\n\nIf `py36` is True, splitting may generate syntax that is only compatible\nwith Python 3.6 and later.",
                    "start_line": 2097,
                    "variables": {
                        "Line": [
                            2146,
                            2098,
                            2099,
                            2126
                        ],
                        "int": [
                            2098
                        ],
                        "bool": [
                            2098,
                            2126
                        ],
                        "line.is_comment": [
                            2110
                        ],
                        "line": [
                            2114,
                            2115,
                            2116,
                            2148,
                            2118,
                            2122,
                            2127,
                            2128,
                            2163,
                            2136,
                            2138,
                            2110,
                            2111
                        ],
                        "line_str": [
                            2114,
                            2116,
                            2149
                        ],
                        "strip": [
                            2114,
                            2149
                        ],
                        "str": [
                            2114,
                            2149
                        ],
                        "line.should_explode": [
                            2115
                        ],
                        "is_line_short_enough": [
                            2129,
                            2115
                        ],
                        "line_length": [
                            2116,
                            2153,
                            2127,
                            2128,
                            2129
                        ],
                        "split_funcs": [
                            2121,
                            2123,
                            2139,
                            2141,
                            2142
                        ],
                        "List": [
                            2121,
                            2146
                        ],
                        "SplitFunc": [
                            2121
                        ],
                        "line.is_def": [
                            2122
                        ],
                        "left_hand_split": [
                            2123
                        ],
                        "omit": [
                            2128,
                            2127
                        ],
                        "generate_trailers_to_omit": [
                            2127
                        ],
                        "lines": [
                            2128,
                            2129,
                            2130
                        ],
                        "list": [
                            2128
                        ],
                        "right_hand_split": [
                            2128,
                            2136
                        ],
                        "py36": [
                            2128,
                            2153,
                            2136,
                            2148
                        ],
                        "Iterator": [
                            2099,
                            2126
                        ],
                        "line.inside_brackets": [
                            2138
                        ],
                        "delimiter_split": [
                            2139
                        ],
                        "standalone_comment_split": [
                            2139
                        ],
                        "rhs": [
                            2139,
                            2141
                        ],
                        "split_func": [
                            2148,
                            2142
                        ],
                        "result": [
                            2152,
                            2146,
                            2159
                        ],
                        "l": [
                            2153,
                            2148,
                            2149
                        ],
                        "CannotSplit": [
                            2155,
                            2150
                        ],
                        "result.extend": [
                            2152
                        ],
                        "split_line": [
                            2153
                        ]
                    },
                    "filtered_variables": {
                        "Line": [
                            2146,
                            2098,
                            2099,
                            2126
                        ],
                        "line.is_comment": [
                            2110
                        ],
                        "line": [
                            2114,
                            2115,
                            2116,
                            2148,
                            2118,
                            2122,
                            2127,
                            2128,
                            2163,
                            2136,
                            2138,
                            2110,
                            2111
                        ],
                        "line_str": [
                            2114,
                            2116,
                            2149
                        ],
                        "strip": [
                            2114,
                            2149
                        ],
                        "line.should_explode": [
                            2115
                        ],
                        "is_line_short_enough": [
                            2129,
                            2115
                        ],
                        "line_length": [
                            2116,
                            2153,
                            2127,
                            2128,
                            2129
                        ],
                        "split_funcs": [
                            2121,
                            2123,
                            2139,
                            2141,
                            2142
                        ],
                        "List": [
                            2121,
                            2146
                        ],
                        "SplitFunc": [
                            2121
                        ],
                        "line.is_def": [
                            2122
                        ],
                        "left_hand_split": [
                            2123
                        ],
                        "omit": [
                            2128,
                            2127
                        ],
                        "generate_trailers_to_omit": [
                            2127
                        ],
                        "lines": [
                            2128,
                            2129,
                            2130
                        ],
                        "right_hand_split": [
                            2128,
                            2136
                        ],
                        "py36": [
                            2128,
                            2153,
                            2136,
                            2148
                        ],
                        "Iterator": [
                            2099,
                            2126
                        ],
                        "line.inside_brackets": [
                            2138
                        ],
                        "delimiter_split": [
                            2139
                        ],
                        "standalone_comment_split": [
                            2139
                        ],
                        "rhs": [
                            2139,
                            2141
                        ],
                        "split_func": [
                            2148,
                            2142
                        ],
                        "result": [
                            2152,
                            2146,
                            2159
                        ],
                        "l": [
                            2153,
                            2148,
                            2149
                        ],
                        "CannotSplit": [
                            2155,
                            2150
                        ],
                        "result.extend": [
                            2152
                        ],
                        "split_line": [
                            2153
                        ]
                    },
                    "diff_line_number": 2115,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4509013808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509137264: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')], comments={4509013088: [Leaf(COMMENT, '# type: int')], 4509013184: [Leaf(COMMENT, '# type: int')], 4509013280: [Leaf(COMMENT, '# type: int')], 4509013376: [Leaf(COMMENT, '# type: int')], 4509013472: [Leaf(COMMENT, '# type: int')], 4509013568: [Leaf(COMMENT, '# type: int')], 4509013664: [Leaf(COMMENT, '# type: int')], 4509013760: [Leaf(COMMENT, '# type: int')], 4509013808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013088: 18, 4509013184: 18, 4509013280: 18, 4509013376: 18, 4509013472: 18, 4509013568: 18, 4509013664: 18, 4509013760: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a, b, c, d, e, f, g, h, i  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "146"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10ccf7ee0>, <function standalone_comment_split at 0x10ccfc040>, <function split_line.<locals>.rhs at 0x10cc44550>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc44550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10ccf7ee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4509013088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013088: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4509013184: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013184: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4509013280: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013280: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4509013376: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013376: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4509013472: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013472: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4509013568: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013568: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4509013664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4509013760: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013760: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4509013808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509137264: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4509013808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509137264: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cc27fc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4509013088: [Leaf(COMMENT, '# type: int')], 4509013184: [Leaf(COMMENT, '# type: int')], 4509013280: [Leaf(COMMENT, '# type: int')], 4509013376: [Leaf(COMMENT, '# type: int')], 4509013472: [Leaf(COMMENT, '# type: int')], 4509013568: [Leaf(COMMENT, '# type: int')], 4509013664: [Leaf(COMMENT, '# type: int')], 4509013760: [Leaf(COMMENT, '# type: int')], 4509013808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(a, b, c, d, e, f, g, h, i):  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "150"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10ccf7b80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10ccf7b80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4509013088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013088: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4509013184: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013184: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4509013280: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013280: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4509013376: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013376: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4509013472: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013472: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4509013568: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013568: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4509013664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4509013760: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509013760: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4509013808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509137264: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cc30180>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4509015152: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509209504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')], comments={4509014720: [Leaf(COMMENT, '# type: int')], 4509014864: [Leaf(COMMENT, '# type: *Any')], 4509015056: [Leaf(COMMENT, '# type: bool')], 4509015152: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509014720: 18, 4509014864: 18, 4509015056: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    arg, *args, default=False, **kwargs  # type: int  # type: *Any  # type: bool  # type: **Any'",
                                    "variable_type": "str",
                                    "variable_shape": "95"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10ccf7ee0>, <function standalone_comment_split at 0x10ccfc040>, <function split_line.<locals>.rhs at 0x10cc4c820>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4c820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10ccf7ee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4509014720: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509014720: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4509014864: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509014864: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4509015056: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509015056: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4509015152: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509209504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4509015152: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509209504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cc41f40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4509014720: [Leaf(COMMENT, '# type: int')], 4509014864: [Leaf(COMMENT, '# type: *Any')], 4509015056: [Leaf(COMMENT, '# type: bool')], 4509015152: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(arg, *args, default=False, **kwargs):  # type: int  # type: *Any  # type: bool  # type: **Any'",
                                    "variable_type": "str",
                                    "variable_shape": "99"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10ccf7b80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10ccf7b80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4509014720: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509014720: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4509014864: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509014864: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4509015056: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509015056: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4509015152: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509209504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cc38d80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = ('",
                                    "variable_type": "str",
                                    "variable_shape": "115"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x10cc4c4c0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4c4c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4c4c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cbbde00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509030144: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NUMBER, '3'), Leaf(RPAR, ')')], comments={4509030144: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = 3  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "128"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x10cc4cb80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4cb80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4cb80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NUMBER, '3')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NUMBER, '3'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509030144: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509030144: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cc41580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4509030624: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509155824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4509030624: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509155824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "129"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10ccf7ee0>, <function standalone_comment_split at 0x10ccfc040>, <function split_line.<locals>.rhs at 0x10cc4dd30>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4dd30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4dd30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cc455c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4509030624: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509155824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')], comments={4509030576: [Leaf(COMMENT, '# type: int')], 4509030624: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509030576: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_element, another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "158"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10ccf7ee0>, <function standalone_comment_split at 0x10ccfc040>, <function split_line.<locals>.rhs at 0x10cc4dee0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10ccf7ee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4509030576: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509030576: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4509030624: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509155824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "l": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4509030624: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509155824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cbc71c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509030768: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(RPAR, ')')], comments={4509030576: [Leaf(COMMENT, '# type: int')], 4509030624: [Leaf(COMMENT, '# type: int')], 4509030768: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    tup = (another_element, another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style)  # type: int  # type: int  # type: Tuple[int, int]'",
                                    "variable_type": "str",
                                    "variable_shape": "187"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x10cc4d670>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4d670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4d670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4509030576: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509030576: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4509030624: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509155824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509030768: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509030768: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cc47340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4509031152: 5, 4509031248: 5, 4509031344: 5, 4509031440: 5, 4509031536: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        element + another_element + another_element_with_long_name + element + another_element + another_element_with_long_name'",
                                    "variable_type": "str",
                                    "variable_shape": "127"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10ccf7ee0>, <function standalone_comment_split at 0x10ccfc040>, <function split_line.<locals>.rhs at 0x10cc4cf70>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4cf70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10ccf7ee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=2, leaves=[Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cbc71c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509031728: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(RPAR, ')')], comments={4509031728: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a = element + another_element + another_element_with_long_name + element + another_element + another_element_with_long_name  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "140"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x10cc4c0d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4c0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10cc4c0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509031728: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4509031728: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10cbebb40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370990128: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370990128: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370990128: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370990128: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370990128: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370990128: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370990128: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370990128: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x10489d670>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489d670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489d670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10482bec0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370990128: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(a,):  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "7"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370990128: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370990128: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370990128: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10482f600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370802288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370802288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370802288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370802288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104842670>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370802096: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802096: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370802096: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802096: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370802096: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802096: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    b,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370802096: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802096: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104842b80>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842b80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842b80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824c00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370801904: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801904: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370801904: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801904: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370801904: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801904: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    c,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370801904: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801904: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048a2160>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048a2160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048a2160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370801712: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801712: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'd'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370801712: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801712: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370801712: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801712: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    d,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'd'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370801712: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801712: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048325e0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048325e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048325e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104841f40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4370992000: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'e'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4370992000: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4370992000: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    e,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'e'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4370992000: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104832160>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104832160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104832160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4370992192: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992192: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'f'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4370992192: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992192: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4370992192: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992192: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    f,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'f'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4370992192: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992192: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x10489dca0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489dca0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489dca0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824c00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4370992288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'g'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4370992288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4370992288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    g,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'g'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4370992288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x10489d8b0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489d8b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489d8b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824480>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4370992384: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992384: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'h'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4370992384: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992384: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4370992384: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992384: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    h,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'h'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4370992384: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992384: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x10489d3a0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489d3a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10489d3a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048244c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370775824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'i'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370775824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')], comments={4370802288: [Leaf(COMMENT, '# type: int')], 4370802096: [Leaf(COMMENT, '# type: int')], 4370801904: [Leaf(COMMENT, '# type: int')], 4370801712: [Leaf(COMMENT, '# type: int')], 4370992000: [Leaf(COMMENT, '# type: int')], 4370992192: [Leaf(COMMENT, '# type: int')], 4370992288: [Leaf(COMMENT, '# type: int')], 4370992384: [Leaf(COMMENT, '# type: int')], 4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18, 4370802096: 18, 4370801904: 18, 4370801712: 18, 4370992000: 18, 4370992192: 18, 4370992288: 18, 4370992384: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a, b, c, d, e, f, g, h, i  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "146"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')]",
                                    "variable_type": "list",
                                    "variable_shape": "17"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')], comments={4370802288: [Leaf(COMMENT, '# type: int')], 4370802096: [Leaf(COMMENT, '# type: int')], 4370801904: [Leaf(COMMENT, '# type: int')], 4370801712: [Leaf(COMMENT, '# type: int')], 4370992000: [Leaf(COMMENT, '# type: int')], 4370992192: [Leaf(COMMENT, '# type: int')], 4370992288: [Leaf(COMMENT, '# type: int')], 4370992384: [Leaf(COMMENT, '# type: int')], 4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18, 4370802096: 18, 4370801904: 18, 4370801712: 18, 4370992000: 18, 4370992192: 18, 4370992288: 18, 4370992384: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048421f0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048421f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370802288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370802096: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802096: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370801904: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801904: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370801712: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801712: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4370992000: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4370992192: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992192: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4370992288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4370992384: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992384: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370775824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370775824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104829040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370802288: [Leaf(COMMENT, '# type: int')], 4370802096: [Leaf(COMMENT, '# type: int')], 4370801904: [Leaf(COMMENT, '# type: int')], 4370801712: [Leaf(COMMENT, '# type: int')], 4370992000: [Leaf(COMMENT, '# type: int')], 4370992192: [Leaf(COMMENT, '# type: int')], 4370992288: [Leaf(COMMENT, '# type: int')], 4370992384: [Leaf(COMMENT, '# type: int')], 4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(a, b, c, d, e, f, g, h, i):  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "150"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "22"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370802288: [Leaf(COMMENT, '# type: int')], 4370802096: [Leaf(COMMENT, '# type: int')], 4370801904: [Leaf(COMMENT, '# type: int')], 4370801712: [Leaf(COMMENT, '# type: int')], 4370992000: [Leaf(COMMENT, '# type: int')], 4370992192: [Leaf(COMMENT, '# type: int')], 4370992288: [Leaf(COMMENT, '# type: int')], 4370992384: [Leaf(COMMENT, '# type: int')], 4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370802288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370802096: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370802096: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370801904: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801904: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370801712: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370801712: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4370992000: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4370992192: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992192: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4370992288: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992288: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4370992384: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370992384: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4370992432: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370775824: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104829f40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370833664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370833664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370833664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    arg,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "21"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370833664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048c1670>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048c1670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048c1670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824480>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370833808: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370833808: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370833808: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    *args,  # type: *Any'",
                                    "variable_type": "str",
                                    "variable_shape": "24"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: *Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370833808: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048c11f0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048c11f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048c11f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370834000: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370834000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370834000: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370834000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370834000: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370834000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    default=False,  # type: bool'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: bool')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370834000: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370834000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104842a60>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104889c40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371136576: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371136576: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')], comments={4370833664: [Leaf(COMMENT, '# type: int')], 4370833808: [Leaf(COMMENT, '# type: *Any')], 4370834000: [Leaf(COMMENT, '# type: bool')], 4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18, 4370833808: 18, 4370834000: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    arg, *args, default=False, **kwargs  # type: int  # type: *Any  # type: bool  # type: **Any'",
                                    "variable_type": "str",
                                    "variable_shape": "95"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'kwargs')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: **Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')], comments={4370833664: [Leaf(COMMENT, '# type: int')], 4370833808: [Leaf(COMMENT, '# type: *Any')], 4370834000: [Leaf(COMMENT, '# type: bool')], 4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18, 4370833808: 18, 4370834000: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048acaf0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048acaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370833664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370833808: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370834000: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370834000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371136576: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371136576: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104889b00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370833664: [Leaf(COMMENT, '# type: int')], 4370833808: [Leaf(COMMENT, '# type: *Any')], 4370834000: [Leaf(COMMENT, '# type: bool')], 4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(arg, *args, default=False, **kwargs):  # type: int  # type: *Any  # type: bool  # type: **Any'",
                                    "variable_type": "str",
                                    "variable_shape": "99"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: **Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370833664: [Leaf(COMMENT, '# type: int')], 4370833808: [Leaf(COMMENT, '# type: *Any')], 4370834000: [Leaf(COMMENT, '# type: bool')], 4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370833664: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833664: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370833808: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370833808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370834000: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370834000: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370834096: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371136576: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104847c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370835008: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370835008: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370835008: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370835008: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048ca1f0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca1f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca1f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370835104: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835104: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370835104: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835104: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370835104: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835104: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    b,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370835104: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835104: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048ca790>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104841f40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370835200: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835200: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370835200: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835200: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370835200: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835200: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    c,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370835200: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835200: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048ca790>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10488e500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370652272: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'd'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370652272: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd')], comments={4370835008: [Leaf(COMMENT, '# type: int')], 4370835104: [Leaf(COMMENT, '# type: int')], 4370835200: [Leaf(COMMENT, '# type: int')], 4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18, 4370835104: 18, 4370835200: 18}, previous=Leaf(NAME, 'd'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a, b, c, d  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "66"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd')]",
                                    "variable_type": "list",
                                    "variable_shape": "7"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd')], comments={4370835008: [Leaf(COMMENT, '# type: int')], 4370835104: [Leaf(COMMENT, '# type: int')], 4370835200: [Leaf(COMMENT, '# type: int')], 4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18, 4370835104: 18, 4370835200: 18}, previous=Leaf(NAME, 'd'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048bb3a0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048bb3a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370835008: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370835104: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835104: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370835200: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835200: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370652272: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370652272: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104829f80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370835008: [Leaf(COMMENT, '# type: int')], 4370835104: [Leaf(COMMENT, '# type: int')], 4370835200: [Leaf(COMMENT, '# type: int')], 4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(a, b, c, d):  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "70"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370835008: [Leaf(COMMENT, '# type: int')], 4370835104: [Leaf(COMMENT, '# type: int')], 4370835200: [Leaf(COMMENT, '# type: int')], 4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370835008: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835008: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4370835104: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835104: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4370835200: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370835200: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4370835248: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370652272: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824c40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = ('",
                                    "variable_type": "str",
                                    "variable_shape": "115"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x104832160>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104832160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104832160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104829400>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370836736: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370836736: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NUMBER, '3'), Leaf(RPAR, ')')], comments={4370836736: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = 3  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "128"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NUMBER, '3'), Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NUMBER, '3'), Leaf(RPAR, ')')], comments={4370836736: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x1048ca9d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca9d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ca9d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NUMBER, '3')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NUMBER, '3'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370836736: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370836736: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104850580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4370837168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4370837168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4370837168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_element,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "37"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4370837168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048e4940>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4940>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4940>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048fd840>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "129"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048e4430>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10488e680>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')], comments={4370837168: [Leaf(COMMENT, '# type: int')], 4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_element, another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "158"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')], comments={4370837168: [Leaf(COMMENT, '# type: int')], 4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104842ee0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842ee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4370837168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "l": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10488ad00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370837360: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370837360: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(RPAR, ')')], comments={4370837168: [Leaf(COMMENT, '# type: int')], 4370837216: [Leaf(COMMENT, '# type: int')], 4370837360: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    tup = (another_element, another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style)  # type: int  # type: int  # type: Tuple[int, int]'",
                                    "variable_type": "str",
                                    "variable_shape": "187"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "7"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: Tuple[int, int]')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(RPAR, ')')], comments={4370837168: [Leaf(COMMENT, '# type: int')], 4370837216: [Leaf(COMMENT, '# type: int')], 4370837360: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x1048bbf70>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048bbf70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048bbf70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4370837168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370837168: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4370837216: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574208: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370837360: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4370837360: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048a7080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371038512: 5, 4371038608: 5, 4371038704: 5, 4371038800: 5, 4371038896: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        element + another_element + another_element_with_long_name + element + another_element + another_element_with_long_name'",
                                    "variable_type": "str",
                                    "variable_shape": "127"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element_with_long_name')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371038512: 5, 4371038608: 5, 4371038704: 5, 4371038800: 5, 4371038896: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048cb280>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048cb280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=2, leaves=[Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10491cb80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371039088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371039088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(RPAR, ')')], comments={4371039088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a = element + another_element + another_element_with_long_name + element + another_element + another_element_with_long_name  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "140"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "15"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(RPAR, ')')], comments={4371039088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x1048ac700>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371039088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371039088: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048240c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370574448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574448: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370574448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574448: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370574448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574448: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370574448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574448: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104842dc0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842dc0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842dc0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048e9480>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370574448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(a,):  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "7"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370574448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4370574448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370574448: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104935440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371237232: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371237232: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371237232: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371237232: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048e4f70>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4f70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4f70>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10494d7c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371234928: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234928: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371234928: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234928: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371234928: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234928: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    b,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371234928: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234928: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048e4550>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e4550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104931b40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371234976: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234976: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371234976: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234976: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371234976: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234976: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    c,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371234976: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234976: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048e41f0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e41f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048e41f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104931940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371236080: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371236080: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'd'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371236080: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371236080: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371236080: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371236080: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    d,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'd'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371236080: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371236080: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048ac0d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048cca40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4371235504: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'e'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4371235504: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4371235504: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    e,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'e'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4371235504: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048cb0d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048cb0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048cb0d0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1049575c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4371235552: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'f'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4371235552: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4371235552: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    f,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'f'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4371235552: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104910c10>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104910c10>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104910c10>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048e9100>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4371237856: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237856: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'g'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4371237856: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237856: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4371237856: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237856: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    g,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'g'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4371237856: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237856: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1049743a0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1049743a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1049743a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10495c780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4371237808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'h'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4371237808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4371237808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    h,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'h'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4371237808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104974a60>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104974a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104974a60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1049810c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371139744: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'i'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371139744: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')], comments={4371237232: [Leaf(COMMENT, '# type: int')], 4371234928: [Leaf(COMMENT, '# type: int')], 4371234976: [Leaf(COMMENT, '# type: int')], 4371236080: [Leaf(COMMENT, '# type: int')], 4371235504: [Leaf(COMMENT, '# type: int')], 4371235552: [Leaf(COMMENT, '# type: int')], 4371237856: [Leaf(COMMENT, '# type: int')], 4371237808: [Leaf(COMMENT, '# type: int')], 4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18, 4371234928: 18, 4371234976: 18, 4371236080: 18, 4371235504: 18, 4371235552: 18, 4371237856: 18, 4371237808: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a, b, c, d, e, f, g, h, i  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "146"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')]",
                                    "variable_type": "list",
                                    "variable_shape": "17"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')], comments={4371237232: [Leaf(COMMENT, '# type: int')], 4371234928: [Leaf(COMMENT, '# type: int')], 4371234976: [Leaf(COMMENT, '# type: int')], 4371236080: [Leaf(COMMENT, '# type: int')], 4371235504: [Leaf(COMMENT, '# type: int')], 4371235552: [Leaf(COMMENT, '# type: int')], 4371237856: [Leaf(COMMENT, '# type: int')], 4371237808: [Leaf(COMMENT, '# type: int')], 4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18, 4371234928: 18, 4371234976: 18, 4371236080: 18, 4371235504: 18, 4371235552: 18, 4371237856: 18, 4371237808: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104832820>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104832820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371237232: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371234928: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234928: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371234976: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234976: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371236080: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371236080: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4371235504: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4371235552: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4371237856: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237856: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4371237808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371139744: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371139744: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048e2040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4371237232: [Leaf(COMMENT, '# type: int')], 4371234928: [Leaf(COMMENT, '# type: int')], 4371234976: [Leaf(COMMENT, '# type: int')], 4371236080: [Leaf(COMMENT, '# type: int')], 4371235504: [Leaf(COMMENT, '# type: int')], 4371235552: [Leaf(COMMENT, '# type: int')], 4371237856: [Leaf(COMMENT, '# type: int')], 4371237808: [Leaf(COMMENT, '# type: int')], 4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(a, b, c, d, e, f, g, h, i):  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "150"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "22"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4371237232: [Leaf(COMMENT, '# type: int')], 4371234928: [Leaf(COMMENT, '# type: int')], 4371234976: [Leaf(COMMENT, '# type: int')], 4371236080: [Leaf(COMMENT, '# type: int')], 4371235504: [Leaf(COMMENT, '# type: int')], 4371235552: [Leaf(COMMENT, '# type: int')], 4371237856: [Leaf(COMMENT, '# type: int')], 4371237808: [Leaf(COMMENT, '# type: int')], 4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371237232: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237232: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371234928: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234928: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371234976: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371234976: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371236080: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371236080: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'e'), Leaf(COMMA, ',')], comments={4371235504: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235504: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'f'), Leaf(COMMA, ',')], comments={4371235552: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371235552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'g'), Leaf(COMMA, ',')], comments={4371237856: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237856: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'h'), Leaf(COMMA, ',')], comments={4371237808: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371237808: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'i'), Leaf(COMMA, ',')], comments={4371235168: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371139744: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1048f0e40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370712656: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370712656: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370712656: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    arg,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "21"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370712656: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104944d30>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104944d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104944d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104952ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370711552: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370711552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370711552: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370711552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370711552: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370711552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    *args,  # type: *Any'",
                                    "variable_type": "str",
                                    "variable_shape": "24"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: *Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370711552: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370711552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104963280>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104963280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104963280>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10497ff40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370713520: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370713520: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370713520: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370713520: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370713520: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370713520: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    default=False,  # type: bool'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: bool')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370713520: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370713520: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104910820>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104910820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104910820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1049a7480>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4364389728: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4364389728: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')], comments={4370712656: [Leaf(COMMENT, '# type: int')], 4370711552: [Leaf(COMMENT, '# type: *Any')], 4370713520: [Leaf(COMMENT, '# type: bool')], 4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18, 4370711552: 18, 4370713520: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    arg, *args, default=False, **kwargs  # type: int  # type: *Any  # type: bool  # type: **Any'",
                                    "variable_type": "str",
                                    "variable_shape": "95"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'kwargs')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: **Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')], comments={4370712656: [Leaf(COMMENT, '# type: int')], 4370711552: [Leaf(COMMENT, '# type: *Any')], 4370713520: [Leaf(COMMENT, '# type: bool')], 4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18, 4370711552: 18, 4370713520: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048cbd30>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048cbd30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370712656: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370711552: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370711552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370713520: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370713520: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4364389728: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4364389728: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10483b300>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370712656: [Leaf(COMMENT, '# type: int')], 4370711552: [Leaf(COMMENT, '# type: *Any')], 4370713520: [Leaf(COMMENT, '# type: bool')], 4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(arg, *args, default=False, **kwargs):  # type: int  # type: *Any  # type: bool  # type: **Any'",
                                    "variable_type": "str",
                                    "variable_shape": "99"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "16"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: **Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4370712656: [Leaf(COMMENT, '# type: int')], 4370711552: [Leaf(COMMENT, '# type: *Any')], 4370713520: [Leaf(COMMENT, '# type: bool')], 4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ',')], comments={4370712656: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370712656: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ',')], comments={4370711552: [Leaf(COMMENT, '# type: *Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370711552: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ',')], comments={4370713520: [Leaf(COMMENT, '# type: bool')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370713520: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')], comments={4370713280: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4364389728: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104973140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371175840: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371175840: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371175840: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371175840: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x10495bd30>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10495bd30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10495bd30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10497e0c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371175888: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175888: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371175888: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175888: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371175888: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175888: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    b,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'b'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371175888: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175888: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048ac550>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac550>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104912440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371177040: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371177040: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371177040: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371177040: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371177040: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371177040: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    c,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'c'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371177040: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371177040: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048ac430>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac430>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1049e2b80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370651312: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'd'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370651312: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd')], comments={4371175840: [Leaf(COMMENT, '# type: int')], 4371175888: [Leaf(COMMENT, '# type: int')], 4371177040: [Leaf(COMMENT, '# type: int')], 4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18, 4371175888: 18, 4371177040: 18}, previous=Leaf(NAME, 'd'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a, b, c, d  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "66"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd')]",
                                    "variable_type": "list",
                                    "variable_shape": "7"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd')], comments={4371175840: [Leaf(COMMENT, '# type: int')], 4371175888: [Leaf(COMMENT, '# type: int')], 4371177040: [Leaf(COMMENT, '# type: int')], 4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18, 4371175888: 18, 4371177040: 18}, previous=Leaf(NAME, 'd'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1048ac940>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1048ac940>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371175840: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371175888: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175888: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371177040: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371177040: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370651312: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370651312: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1049b3980>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4371175840: [Leaf(COMMENT, '# type: int')], 4371175888: [Leaf(COMMENT, '# type: int')], 4371177040: [Leaf(COMMENT, '# type: int')], 4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'def f(a, b, c, d):  # type: int  # type: int  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "70"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COLON, ':')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(RPAR, ')'), Leaf(COLON, ':')]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '('), Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={4371175840: [Leaf(COMMENT, '# type: int')], 4371175888: [Leaf(COMMENT, '# type: int')], 4371177040: [Leaf(COMMENT, '# type: int')], 4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(COLON, ':'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "11",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function left_hand_split at 0x10439db80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function left_hand_split at 0x10439db80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=0, leaves=[Leaf(NAME, 'def'), Leaf(NAME, 'f'), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ',')], comments={4371175840: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175840: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'b'), Leaf(COMMA, ',')], comments={4371175888: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371175888: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'c'), Leaf(COMMA, ',')], comments={4371177040: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371177040: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(NAME, 'd'), Leaf(COMMA, ',')], comments={4371175408: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4370651312: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=0, leaves=[Leaf(RPAR, ')'), Leaf(COLON, ':')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1049b1e80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = ('",
                                    "variable_type": "str",
                                    "variable_shape": "115"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x1049105e0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1049105e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1049105e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104824840>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176032: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176032: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NUMBER, '3'), Leaf(RPAR, ')')], comments={4371176032: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = 3  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "128"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NUMBER, '3'), Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NUMBER, '3'), Leaf(RPAR, ')')], comments={4371176032: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x104842700>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842700>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NUMBER, '3')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NUMBER, '3'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176032: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176032: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104912440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4371174592: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4371174592: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4371174592: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_element,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "37"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4371174592: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x10495b790>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10495b790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10495b790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10499b780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style,  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "129"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1049103a0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1049103a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1049103a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1049b9780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')], comments={4371174592: [Leaf(COMMENT, '# type: int')], 4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        another_element, another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style  # type: int  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "158"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')], comments={4371174592: [Leaf(COMMENT, '# type: int')], 4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x104968ca0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104968ca0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4371174592: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "l": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10492ea80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176272: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176272: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(RPAR, ')')], comments={4371174592: [Leaf(COMMENT, '# type: int')], 4371175264: [Leaf(COMMENT, '# type: int')], 4371176272: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    tup = (another_element, another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style)  # type: int  # type: int  # type: Tuple[int, int]'",
                                    "variable_type": "str",
                                    "variable_shape": "187"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "7"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: Tuple[int, int]')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(RPAR, ')')], comments={4371174592: [Leaf(COMMENT, '# type: int')], 4371175264: [Leaf(COMMENT, '# type: int')], 4371176272: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x10495b8b0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10495b8b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x10495b8b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'tup'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ',')], comments={4371174592: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371174592: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')], comments={4371175264: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4372019424: 18}, previous=Leaf(COMMA, ','), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176272: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371176272: [Leaf(COMMENT, '# type: Tuple[int, int]')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10483f0c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371176896: 5, 4371174736: 5, 4371174880: 5, 4371174976: 5, 4371175072: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'        element + another_element + another_element_with_long_name + element + another_element + another_element_with_long_name'",
                                    "variable_type": "str",
                                    "variable_shape": "127"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element_with_long_name')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=2, leaves=[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4371176896: 5, 4371174736: 5, 4371174880: 5, 4371174976: 5, 4371175072: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function delimiter_split at 0x10439dee0>, <function standalone_comment_split at 0x1043a5040>, <function split_line.<locals>.rhs at 0x1049688b0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x1049688b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function delimiter_split at 0x10439dee0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=2, leaves=[Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "l": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10497fc80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371175120: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371175120: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(RPAR, ')')], comments={4371175120: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "line_str": {
                                    "variable_value": "'    a = element + another_element + another_element_with_long_name + element + another_element + another_element_with_long_name  # type: int'",
                                    "variable_type": "str",
                                    "variable_shape": "140"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_special_comment": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(RPAR, ')')]",
                                    "variable_type": "list",
                                    "variable_shape": "15"
                                },
                                "comment": {
                                    "variable_value": "Leaf(COMMENT, '# type: int')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.comments_after": {
                                    "variable_value": "<bound method Line.comments_after of Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '('), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(RPAR, ')')], comments={4371175120: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(RPAR, ')'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "leaf.type": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_special_comment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.should_explode": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_line_short_enough": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line_length": {
                                    "variable_value": "88",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "split_funcs": {
                                    "variable_value": "[<function split_line.<locals>.rhs at 0x104842b80>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SplitFunc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.is_def": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "left_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generate_trailers_to_omit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "right_hand_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py36": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Iterator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.inside_brackets": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "delimiter_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "standalone_comment_split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rhs": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842b80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "split_func": {
                                    "variable_value": "<function split_line.<locals>.rhs at 0x104842b80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(EQUAL, '='), Leaf(LPAR, '(')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False), Line(depth=2, leaves=[Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=2, leaves=[Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False), Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371175120: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)]",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "l": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(RPAR, ')')], comments={4371175120: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={}, previous=None, _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=False, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "CannotSplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10496cf40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "split_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "normalize_prefix",
                    "function_code": "def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:\n    \"\"\"Leave existing extra newlines if not `inside_brackets`. Remove everything\n    else.\n\n    Note: don't use backslashes for formatting or you'll lose your voting rights.\n    \"\"\"\n    if not inside_brackets:\n        spl = leaf.prefix.split(\"#\")\n        if \"\\\\\" not in spl[0]:\n            nl_count = spl[-1].count(\"\\n\")\n            if len(spl) > 1:\n                nl_count -= 1\n            leaf.prefix = \"\\n\" * nl_count\n            return\n\n    leaf.prefix = \"\"\n",
                    "decorators": [],
                    "docstring": "Leave existing extra newlines if not `inside_brackets`. Remove everything\nelse.\n\nNote: don't use backslashes for formatting or you'll lose your voting rights.",
                    "start_line": 2465,
                    "variables": {
                        "Leaf": [
                            2465
                        ],
                        "bool": [
                            2465
                        ],
                        "inside_brackets": [
                            2471
                        ],
                        "spl": [
                            2472,
                            2473,
                            2474,
                            2475
                        ],
                        "leaf.prefix.split": [
                            2472
                        ],
                        "leaf.prefix": [
                            2472,
                            2477,
                            2480
                        ],
                        "leaf": [
                            2472,
                            2477,
                            2480
                        ],
                        "nl_count": [
                            2474,
                            2476,
                            2477
                        ],
                        "count": [
                            2474
                        ],
                        "len": [
                            2475
                        ]
                    },
                    "filtered_variables": {
                        "Leaf": [
                            2465
                        ],
                        "inside_brackets": [
                            2471
                        ],
                        "spl": [
                            2472,
                            2473,
                            2474,
                            2475
                        ],
                        "leaf.prefix.split": [
                            2472
                        ],
                        "leaf.prefix": [
                            2472,
                            2477,
                            2480
                        ],
                        "leaf": [
                            2472,
                            2477,
                            2480
                        ],
                        "nl_count": [
                            2474,
                            2476,
                            2477
                        ],
                        "count": [
                            2474
                        ]
                    },
                    "diff_line_number": 2465,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'Any')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'Tuple')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'Tuple')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'e')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'e')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'f')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'f')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'g')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'g')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'h')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'h')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'e')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'e')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'f')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'f')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'g')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'g')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'h')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'h')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'e')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'e')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'f')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'f')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'g')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'g')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'h')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'h')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'i')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'arg')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'arg')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(STAR, '*')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(STAR, '*')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'args')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'args')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: *Any\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'default')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'default')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(EQUAL, '=')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(EQUAL, '=')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'False')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'False')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: bool\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(DOUBLESTAR, '**')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(DOUBLESTAR, '**')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'kwargs')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'kwargs')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: **Any\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'arg')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'arg')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'arg')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'arg')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(STAR, '*')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(STAR, '*')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'default')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'default')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(DOUBLESTAR, '**')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(DOUBLESTAR, '**')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'a')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'b')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'c')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'd')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '0')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '0')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '1')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '1')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '2')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '2')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '3')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '3')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '3')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '3')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '3')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NUMBER, '3')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(COMMA, ',')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'  # type: int\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, ')')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element_with_long_name')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element_with_long_name')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n        '",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element_with_long_name')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element_with_long_name')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "'\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(RPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(NAME, 'element')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "' '",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_brackets": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "spl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leaf.prefix.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "leaf.prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "leaf": {
                                    "variable_value": "Leaf(PLUS, '+')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "nl_count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "count": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "should_explode",
                    "function_code": "def should_explode(line: Line, opening_bracket: Leaf) -> bool:\n    \"\"\"Should `line` immediately be split with `delimiter_split()` after RHS?\"\"\"\n    if not (\n        opening_bracket.parent\n        and opening_bracket.parent.type in {syms.atom, syms.import_from}\n        and opening_bracket.value in \"[{(\"\n    ):\n        return False\n\n    try:\n        last_leaf = line.leaves[-1]\n        exclude = {id(last_leaf)} if last_leaf.type == token.COMMA else set()\n        max_priority = line.bracket_tracker.max_delimiter_priority(exclude=exclude)\n    except (IndexError, ValueError):\n        return False\n\n    return max_priority == COMMA_PRIORITY\n",
                    "decorators": [],
                    "docstring": "Should `line` immediately be split with `delimiter_split()` after RHS?",
                    "start_line": 2952,
                    "variables": {
                        "Line": [
                            2952
                        ],
                        "Leaf": [
                            2952
                        ],
                        "opening_bracket.parent": [
                            2955,
                            2956
                        ],
                        "opening_bracket": [
                            2955,
                            2956,
                            2957
                        ],
                        "opening_bracket.parent.type": [
                            2956
                        ],
                        "syms.atom": [
                            2956
                        ],
                        "syms": [
                            2956
                        ],
                        "syms.import_from": [
                            2956
                        ],
                        "opening_bracket.value": [
                            2957
                        ],
                        "last_leaf": [
                            2962,
                            2963
                        ],
                        "line.leaves": [
                            2962
                        ],
                        "line": [
                            2962,
                            2964
                        ],
                        "exclude": [
                            2963,
                            2964
                        ],
                        "last_leaf.type": [
                            2963
                        ],
                        "token.COMMA": [
                            2963
                        ],
                        "token": [
                            2963
                        ],
                        "id": [
                            2963
                        ],
                        "set": [
                            2963
                        ],
                        "max_priority": [
                            2968,
                            2964
                        ],
                        "line.bracket_tracker.max_delimiter_priority": [
                            2964
                        ],
                        "line.bracket_tracker": [
                            2964
                        ],
                        "IndexError": [
                            2965
                        ],
                        "ValueError": [
                            2965
                        ],
                        "COMMA_PRIORITY": [
                            2968
                        ],
                        "bool": [
                            2952
                        ]
                    },
                    "filtered_variables": {
                        "Line": [
                            2952
                        ],
                        "Leaf": [
                            2952
                        ],
                        "opening_bracket.parent": [
                            2955,
                            2956
                        ],
                        "opening_bracket": [
                            2955,
                            2956,
                            2957
                        ],
                        "opening_bracket.parent.type": [
                            2956
                        ],
                        "syms.atom": [
                            2956
                        ],
                        "syms": [
                            2956
                        ],
                        "syms.import_from": [
                            2956
                        ],
                        "opening_bracket.value": [
                            2957
                        ],
                        "last_leaf": [
                            2962,
                            2963
                        ],
                        "line.leaves": [
                            2962
                        ],
                        "line": [
                            2962,
                            2964
                        ],
                        "exclude": [
                            2963,
                            2964
                        ],
                        "last_leaf.type": [
                            2963
                        ],
                        "token.COMMA": [
                            2963
                        ],
                        "token": [
                            2963
                        ],
                        "max_priority": [
                            2968,
                            2964
                        ],
                        "line.bracket_tracker.max_delimiter_priority": [
                            2964
                        ],
                        "line.bracket_tracker": [
                            2964
                        ],
                        "COMMA_PRIORITY": [
                            2968
                        ]
                    },
                    "diff_line_number": 2953,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(parameters, [Leaf(LPAR, '('), Node(typedargslist, [Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(COMMA, ',')]), Leaf(RPAR, ')')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "'('",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "last_leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')]",
                                    "variable_type": "list",
                                    "variable_shape": "17"
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')], comments={4537766912: [Leaf(COMMENT, '# type: int')], 4537767008: [Leaf(COMMENT, '# type: int')], 4537767104: [Leaf(COMMENT, '# type: int')], 4537767200: [Leaf(COMMENT, '# type: int')], 4537767296: [Leaf(COMMENT, '# type: int')], 4537767392: [Leaf(COMMENT, '# type: int')], 4537767488: [Leaf(COMMENT, '# type: int')], 4537767584: [Leaf(COMMENT, '# type: int')], 4537767632: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537766912: 18, 4537767008: 18, 4537767104: 18, 4537767200: 18, 4537767296: 18, 4537767392: 18, 4537767488: 18, 4537767584: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "last_leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537766912: 18, 4537767008: 18, 4537767104: 18, 4537767200: 18, 4537767296: 18, 4537767392: 18, 4537767488: 18, 4537767584: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(parameters, [Leaf(LPAR, '('), Node(typedargslist, [Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i'), Leaf(COMMA, ',')]), Leaf(RPAR, ')')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "'('",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "last_leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')]",
                                    "variable_type": "list",
                                    "variable_shape": "17"
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'a'), Leaf(COMMA, ','), Leaf(NAME, 'b'), Leaf(COMMA, ','), Leaf(NAME, 'c'), Leaf(COMMA, ','), Leaf(NAME, 'd'), Leaf(COMMA, ','), Leaf(NAME, 'e'), Leaf(COMMA, ','), Leaf(NAME, 'f'), Leaf(COMMA, ','), Leaf(NAME, 'g'), Leaf(COMMA, ','), Leaf(NAME, 'h'), Leaf(COMMA, ','), Leaf(NAME, 'i')], comments={4537766912: [Leaf(COMMENT, '# type: int')], 4537767008: [Leaf(COMMENT, '# type: int')], 4537767104: [Leaf(COMMENT, '# type: int')], 4537767200: [Leaf(COMMENT, '# type: int')], 4537767296: [Leaf(COMMENT, '# type: int')], 4537767392: [Leaf(COMMENT, '# type: int')], 4537767488: [Leaf(COMMENT, '# type: int')], 4537767584: [Leaf(COMMENT, '# type: int')], 4537767632: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537766912: 18, 4537767008: 18, 4537767104: 18, 4537767200: 18, 4537767296: 18, 4537767392: 18, 4537767488: 18, 4537767584: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "last_leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537766912: 18, 4537767008: 18, 4537767104: 18, 4537767200: 18, 4537767296: 18, 4537767392: 18, 4537767488: 18, 4537767584: 18}, previous=Leaf(NAME, 'i'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(parameters, [Leaf(LPAR, '('), Node(typedargslist, [Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')]), Leaf(RPAR, ')')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "'('",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "last_leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')], comments={4537768544: [Leaf(COMMENT, '# type: int')], 4537768688: [Leaf(COMMENT, '# type: *Any')], 4537768880: [Leaf(COMMENT, '# type: bool')], 4537768976: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537768544: 18, 4537768688: 18, 4537768880: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "last_leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537768544: 18, 4537768688: 18, 4537768880: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(parameters, [Leaf(LPAR, '('), Node(typedargslist, [Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs'), Leaf(COMMA, ',')]), Leaf(RPAR, ')')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "'('",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "last_leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "line": {
                                    "variable_value": "Line(depth=1, leaves=[Leaf(NAME, 'arg'), Leaf(COMMA, ','), Leaf(STAR, '*'), Leaf(NAME, 'args'), Leaf(COMMA, ','), Leaf(NAME, 'default'), Leaf(EQUAL, '='), Leaf(NAME, 'False'), Leaf(COMMA, ','), Leaf(DOUBLESTAR, '**'), Leaf(NAME, 'kwargs')], comments={4537768544: [Leaf(COMMENT, '# type: int')], 4537768688: [Leaf(COMMENT, '# type: *Any')], 4537768880: [Leaf(COMMENT, '# type: bool')], 4537768976: [Leaf(COMMENT, '# type: **Any')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537768544: 18, 4537768688: 18, 4537768880: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "last_leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537768544: 18, 4537768688: 18, 4537768880: 18}, previous=Leaf(NAME, 'kwargs'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(atom, [Leaf(LPAR, '('), Node(testlist_gexp, [Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]), Leaf(RPAR, ')')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "'('",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "last_leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')], comments={4537784400: [Leaf(COMMENT, '# type: int')], 4537784448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537784400: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "last_leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537784400: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(atom, [Leaf(LPAR, '('), Node(testlist_gexp, [Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), Leaf(COMMA, ',')]), Leaf(RPAR, ')')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '(')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "'('",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "last_leaf": {
                                    "variable_value": "Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'another_element'), Leaf(COMMA, ','), Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style')], comments={4537784400: [Leaf(COMMENT, '# type: int')], 4537784448: [Leaf(COMMENT, '# type: int')]}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537784400: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "last_leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": "18",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537784400: 18}, previous=Leaf(NAME, 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(atom, [Leaf(LPAR, ''), Node(arith_expr, [Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]), Leaf(RPAR, '')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "last_leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537784976: 5, 4537785072: 5, 4537785168: 5, 4537785264: 5, 4537785360: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "last_leaf.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537784976: 5, 4537785072: 5, 4537785168: 5, 4537785264: 5, 4537785360: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Leaf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent": {
                                    "variable_value": "Node(atom, [Leaf(LPAR, ''), Node(arith_expr, [Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]), Leaf(RPAR, '')])",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "opening_bracket": {
                                    "variable_value": "Leaf(LPAR, '')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "opening_bracket.parent.type": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "syms.atom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "syms.import_from": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opening_bracket.value": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "last_leaf": {
                                    "variable_value": "Leaf(NAME, 'another_element_with_long_name')",
                                    "variable_type": "Leaf",
                                    "variable_shape": null
                                },
                                "line.leaves": {
                                    "variable_value": "[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')]",
                                    "variable_type": "list",
                                    "variable_shape": "11"
                                },
                                "line": {
                                    "variable_value": "Line(depth=2, leaves=[Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name'), Leaf(PLUS, '+'), Leaf(NAME, 'element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element'), Leaf(PLUS, '+'), Leaf(NAME, 'another_element_with_long_name')], comments={}, bracket_tracker=BracketTracker(depth=0, bracket_match={}, delimiters={4537784976: 5, 4537785072: 5, 4537785168: 5, 4537785264: 5, 4537785360: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[]), inside_brackets=True, should_explode=False)",
                                    "variable_type": "Line",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "last_leaf.type": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "token.COMMA": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_priority": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker.max_delimiter_priority": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line.bracket_tracker": {
                                    "variable_value": "BracketTracker(depth=0, bracket_match={}, delimiters={4537784976: 5, 4537785072: 5, 4537785168: 5, 4537785264: 5, 4537785360: 5}, previous=Leaf(NAME, 'another_element_with_long_name'), _for_loop_depths=[], _lambda_argument_depths=[])",
                                    "variable_type": "BracketTracker",
                                    "variable_shape": null
                                },
                                "COMMA_PRIORITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def read_pyproject_toml(\n    ctx: click.Context, param: click.Parameter, value: Union[str, int, bool, None]\n) -> Optional[str]:\n    \"\"\"Inject Black configuration from \"pyproject.toml\" into defaults in `ctx`.\n\n    Returns the path to a successfully found and read configuration file, None\n    otherwise.\n    \"\"\"\n    assert not isinstance(value, (int, bool)), \"Invalid parameter type passed\"\n    if not value:\n        root = find_project_root(ctx.params.get(\"src\", ()))\n        path = root / \"pyproject.toml\"\n        if path.is_file():\n            value = str(path)\n        else:\n            return None\n\n    try:\n        pyproject_toml = toml.load(value)\n        config = pyproject_toml.get(\"tool\", {}).get(\"black\", {})\n    except (toml.TomlDecodeError, OSError) as e:\n        raise click.FileError(\n            filename=value, hint=f\"Error reading configuration file: {e}\"\n        )\n\n    if not config:\n        return None\n\n    if ctx.default_map is None:\n        ctx.default_map = {}\n    ctx.default_map.update(  # type: ignore  # bad types in .pyi\n        {k.replace(\"--\", \"\").replace(\"-\", \"_\"): v for k, v in config.items()}\n    )\n    return value",
                "@click.command(context_settings=dict(help_option_names=[\"-h\", \"--help\"]))\n@click.option(\n    \"-l\",\n    \"--line-length\",\n    type=int,\n    default=DEFAULT_LINE_LENGTH,\n    help=\"How many characters per line to allow.\",\n    show_default=True,\n)\n@click.option(\n    \"--py36\",\n    is_flag=True,\n    help=(\n        \"Allow using Python 3.6-only syntax on all input files.  This will put \"\n        \"trailing commas in function signatures and calls also after *args and \"\n        \"**kwargs.  [default: per-file auto-detection]\"\n    ),\n)\n@click.option(\n    \"--pyi\",\n    is_flag=True,\n    help=(\n        \"Format all input files like typing stubs regardless of file extension \"\n        \"(useful when piping source on standard input).\"\n    ),\n)\n@click.option(\n    \"-S\",\n    \"--skip-string-normalization\",\n    is_flag=True,\n    help=\"Don't normalize string quotes or prefixes.\",\n)\n@click.option(\n    \"-N\",\n    \"--skip-numeric-underscore-normalization\",\n    is_flag=True,\n    help=\"Don't normalize underscores in numeric literals.\",\n)\n@click.option(\n    \"--check\",\n    is_flag=True,\n    help=(\n        \"Don't write the files back, just return the status.  Return code 0 \"\n        \"means nothing would change.  Return code 1 means some files would be \"\n        \"reformatted.  Return code 123 means there was an internal error.\"\n    ),\n)\n@click.option(\n    \"--diff\",\n    is_flag=True,\n    help=\"Don't write the files back, just output a diff for each file on stdout.\",\n)\n@click.option(\n    \"--fast/--safe\",\n    is_flag=True,\n    help=\"If --fast given, skip temporary sanity checks. [default: --safe]\",\n)\n@click.option(\n    \"--include\",\n    type=str,\n    default=DEFAULT_INCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be \"\n        \"included on recursive searches.  An empty value means all files are \"\n        \"included regardless of the name.  Use forward slashes for directories on \"\n        \"all platforms (Windows, too).  Exclusions are calculated first, inclusions \"\n        \"later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"--exclude\",\n    type=str,\n    default=DEFAULT_EXCLUDES,\n    help=(\n        \"A regular expression that matches files and directories that should be \"\n        \"excluded on recursive searches.  An empty value means no paths are excluded. \"\n        \"Use forward slashes for directories on all platforms (Windows, too).  \"\n        \"Exclusions are calculated first, inclusions later.\"\n    ),\n    show_default=True,\n)\n@click.option(\n    \"-q\",\n    \"--quiet\",\n    is_flag=True,\n    help=(\n        \"Don't emit non-error messages to stderr. Errors are still emitted, \"\n        \"silence those with 2>/dev/null.\"\n    ),\n)\n@click.option(\n    \"-v\",\n    \"--verbose\",\n    is_flag=True,\n    help=(\n        \"Also emit messages to stderr about files that were not changed or were \"\n        \"ignored due to --exclude=.\"\n    ),\n)\n@click.version_option(version=__version__)\n@click.argument(\n    \"src\",\n    nargs=-1,\n    type=click.Path(\n        exists=True, file_okay=True, dir_okay=True, readable=True, allow_dash=True\n    ),\n    is_eager=True,\n)\n@click.option(\n    \"--config\",\n    type=click.Path(\n        exists=False, file_okay=True, dir_okay=False, readable=True, allow_dash=False\n    ),\n    is_eager=True,\n    callback=read_pyproject_toml,\n    help=\"Read configuration from PATH.\",\n)\n@click.pass_context\ndef main(\n    ctx: click.Context,\n    line_length: int,\n    check: bool,\n    diff: bool,\n    fast: bool,\n    pyi: bool,\n    py36: bool,\n    skip_string_normalization: bool,\n    skip_numeric_underscore_normalization: bool,\n    quiet: bool,\n    verbose: bool,\n    include: str,\n    exclude: str,\n    src: Tuple[str],\n    config: Optional[str],\n) -> None:\n    \"\"\"The uncompromising code formatter.\"\"\"\n    write_back = WriteBack.from_configuration(check=check, diff=diff)\n    mode = FileMode.from_configuration(\n        py36=py36,\n        pyi=pyi,\n        skip_string_normalization=skip_string_normalization,\n        skip_numeric_underscore_normalization=skip_numeric_underscore_normalization,\n    )\n    if config and verbose:\n        out(f\"Using configuration from {config}.\", bold=False, fg=\"blue\")\n    try:\n        include_regex = re_compile_maybe_verbose(include)\n    except re.error:\n        err(f\"Invalid regular expression for include given: {include!r}\")\n        ctx.exit(2)\n    try:\n        exclude_regex = re_compile_maybe_verbose(exclude)\n    except re.error:\n        err(f\"Invalid regular expression for exclude given: {exclude!r}\")\n        ctx.exit(2)\n    report = Report(check=check, quiet=quiet, verbose=verbose)\n    root = find_project_root(src)\n    sources: Set[Path] = set()\n    for s in src:\n        p = Path(s)\n        if p.is_dir():\n            sources.update(\n                gen_python_files_in_dir(p, root, include_regex, exclude_regex, report)\n            )\n        elif p.is_file() or s == \"-\":\n            # if a file was explicitly given, we don't care about its extension\n            sources.add(p)\n        else:\n            err(f\"invalid path: {s}\")\n    if len(sources) == 0:\n        if verbose or not quiet:\n            out(\"No paths given. Nothing to do \ud83d\ude34\")\n        ctx.exit(0)\n\n    if len(sources) == 1:\n        reformat_one(\n            src=sources.pop(),\n            line_length=line_length,\n            fast=fast,\n            write_back=write_back,\n            mode=mode,\n            report=report,\n        )\n    else:\n        loop = asyncio.get_event_loop()\n        executor = ProcessPoolExecutor(max_workers=os.cpu_count())\n        try:\n            loop.run_until_complete(\n                schedule_formatting(\n                    sources=sources,\n                    line_length=line_length,\n                    fast=fast,\n                    write_back=write_back,\n                    mode=mode,\n                    report=report,\n                    loop=loop,\n                    executor=executor,\n                )\n            )\n        finally:\n            shutdown(loop)\n    if verbose or not quiet:\n        bang = \"\ud83d\udca5 \ud83d\udc94 \ud83d\udca5\" if report.return_code else \"\u2728 \ud83c\udf70 \u2728\"\n        out(f\"All done! {bang}\")\n        click.secho(str(report), err=True)\n    ctx.exit(report.return_code)",
                "def reformat_one(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack,\n    mode: FileMode,\n    report: \"Report\",\n) -> None:\n    \"\"\"Reformat a single file under `src` without spawning child processes.\n\n    If `quiet` is True, non-error messages are not output. `line_length`,\n    `write_back`, `fast` and `pyi` options are passed to\n    :func:`format_file_in_place` or :func:`format_stdin_to_stdout`.\n    \"\"\"\n    try:\n        changed = Changed.NO\n        if not src.is_file() and str(src) == \"-\":\n            if format_stdin_to_stdout(\n                line_length=line_length, fast=fast, write_back=write_back, mode=mode\n            ):\n                changed = Changed.YES\n        else:\n            cache: Cache = {}\n            if write_back != WriteBack.DIFF:\n                cache = read_cache(line_length, mode)\n                res_src = src.resolve()\n                if res_src in cache and cache[res_src] == get_cache_info(res_src):\n                    changed = Changed.CACHED\n            if changed is not Changed.CACHED and format_file_in_place(\n                src,\n                line_length=line_length,\n                fast=fast,\n                write_back=write_back,\n                mode=mode,\n            ):\n                changed = Changed.YES\n            if (write_back is WriteBack.YES and changed is not Changed.CACHED) or (\n                write_back is WriteBack.CHECK and changed is Changed.NO\n            ):\n                write_cache(cache, [src], line_length, mode)\n        report.done(src, changed)\n    except Exception as exc:\n        report.failed(src, str(exc))",
                "async def schedule_formatting(\n    sources: Set[Path],\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack,\n    mode: FileMode,\n    report: \"Report\",\n    loop: BaseEventLoop,\n    executor: Executor,\n) -> None:\n    \"\"\"Run formatting of `sources` in parallel using the provided `executor`.\n\n    (Use ProcessPoolExecutors for actual parallelism.)\n\n    `line_length`, `write_back`, `fast`, and `pyi` options are passed to\n    :func:`format_file_in_place`.\n    \"\"\"\n    cache: Cache = {}\n    if write_back != WriteBack.DIFF:\n        cache = read_cache(line_length, mode)\n        sources, cached = filter_cached(cache, sources)\n        for src in sorted(cached):\n            report.done(src, Changed.CACHED)\n    if not sources:\n        return\n\n    cancelled = []\n    sources_to_cache = []\n    lock = None\n    if write_back == WriteBack.DIFF:\n        # For diff output, we need locks to ensure we don't interleave output\n        # from different processes.\n        manager = Manager()\n        lock = manager.Lock()\n    tasks = {\n        loop.run_in_executor(\n            executor,\n            format_file_in_place,\n            src,\n            line_length,\n            fast,\n            write_back,\n            mode,\n            lock,\n        ): src\n        for src in sorted(sources)\n    }\n    pending: Iterable[asyncio.Task] = tasks.keys()\n    try:\n        loop.add_signal_handler(signal.SIGINT, cancel, pending)\n        loop.add_signal_handler(signal.SIGTERM, cancel, pending)\n    except NotImplementedError:\n        # There are no good alternatives for these on Windows.\n        pass\n    while pending:\n        done, _ = await asyncio.wait(pending, return_when=asyncio.FIRST_COMPLETED)\n        for task in done:\n            src = tasks.pop(task)\n            if task.cancelled():\n                cancelled.append(task)\n            elif task.exception():\n                report.failed(src, str(task.exception()))\n            else:\n                changed = Changed.YES if task.result() else Changed.NO\n                # If the file was written back or was successfully checked as\n                # well-formatted, store this information in the cache.\n                if write_back is WriteBack.YES or (\n                    write_back is WriteBack.CHECK and changed is Changed.NO\n                ):\n                    sources_to_cache.append(src)\n                report.done(src, changed)\n    if cancelled:\n        await asyncio.gather(*cancelled, loop=loop, return_exceptions=True)\n    if sources_to_cache:\n        write_cache(cache, sources_to_cache, line_length, mode)",
                "def format_file_in_place(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    mode: FileMode = FileMode.AUTO_DETECT,\n    lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy\n) -> bool:\n    \"\"\"Format file under `src` path. Return True if changed.\n\n    If `write_back` is DIFF, write a diff to stdout. If it is YES, write reformatted\n    code to the file.\n    `line_length` and `fast` options are passed to :func:`format_file_contents`.\n    \"\"\"\n    if src.suffix == \".pyi\":\n        mode |= FileMode.PYI\n\n    then = datetime.utcfromtimestamp(src.stat().st_mtime)\n    with open(src, \"rb\") as buf:\n        src_contents, encoding, newline = decode_bytes(buf.read())\n    try:\n        dst_contents = format_file_contents(\n            src_contents, line_length=line_length, fast=fast, mode=mode\n        )\n    except NothingChanged:\n        return False\n\n    if write_back == write_back.YES:\n        with open(src, \"w\", encoding=encoding, newline=newline) as f:\n            f.write(dst_contents)\n    elif write_back == write_back.DIFF:\n        now = datetime.utcnow()\n        src_name = f\"{src}\\t{then} +0000\"\n        dst_name = f\"{src}\\t{now} +0000\"\n        diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n        if lock:\n            lock.acquire()\n        try:\n            f = io.TextIOWrapper(\n                sys.stdout.buffer,\n                encoding=encoding,\n                newline=newline,\n                write_through=True,\n            )\n            f.write(diff_contents)\n            f.detach()\n        finally:\n            if lock:\n                lock.release()\n    return True",
                "def format_stdin_to_stdout(\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    mode: FileMode = FileMode.AUTO_DETECT,\n) -> bool:\n    \"\"\"Format file on stdin. Return True if changed.\n\n    If `write_back` is YES, write reformatted code back to stdout. If it is DIFF,\n    write a diff to stdout.\n    `line_length`, `fast`, `is_pyi`, and `force_py36` arguments are passed to\n    :func:`format_file_contents`.\n    \"\"\"\n    then = datetime.utcnow()\n    src, encoding, newline = decode_bytes(sys.stdin.buffer.read())\n    dst = src\n    try:\n        dst = format_file_contents(src, line_length=line_length, fast=fast, mode=mode)\n        return True\n\n    except NothingChanged:\n        return False\n\n    finally:\n        f = io.TextIOWrapper(\n            sys.stdout.buffer, encoding=encoding, newline=newline, write_through=True\n        )\n        if write_back == WriteBack.YES:\n            f.write(dst)\n        elif write_back == WriteBack.DIFF:\n            now = datetime.utcnow()\n            src_name = f\"STDIN\\t{then} +0000\"\n            dst_name = f\"STDOUT\\t{now} +0000\"\n            f.write(diff(src, dst, src_name, dst_name))\n        f.detach()",
                "def format_file_contents(\n    src_contents: str,\n    *,\n    line_length: int,\n    fast: bool,\n    mode: FileMode = FileMode.AUTO_DETECT,\n) -> FileContent:\n    \"\"\"Reformat contents a file and return new contents.\n\n    If `fast` is False, additionally confirm that the reformatted code is\n    valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.\n    `line_length` is passed to :func:`format_str`.\n    \"\"\"\n    if src_contents.strip() == \"\":\n        raise NothingChanged\n\n    dst_contents = format_str(src_contents, line_length=line_length, mode=mode)\n    if src_contents == dst_contents:\n        raise NothingChanged\n\n    if not fast:\n        assert_equivalent(src_contents, dst_contents)\n        assert_stable(src_contents, dst_contents, line_length=line_length, mode=mode)\n    return dst_contents",
                "def format_str(\n    src_contents: str, line_length: int, *, mode: FileMode = FileMode.AUTO_DETECT\n) -> FileContent:\n    \"\"\"Reformat a string and return new contents.\n\n    `line_length` determines how many characters per line are allowed.\n    \"\"\"\n    src_node = lib2to3_parse(src_contents.lstrip())\n    dst_contents = \"\"\n    future_imports = get_future_imports(src_node)\n    is_pyi = bool(mode & FileMode.PYI)\n    py36 = bool(mode & FileMode.PYTHON36) or is_python36(src_node)\n    normalize_strings = not bool(mode & FileMode.NO_STRING_NORMALIZATION)\n    normalize_fmt_off(src_node)\n    lines = LineGenerator(\n        remove_u_prefix=py36 or \"unicode_literals\" in future_imports,\n        is_pyi=is_pyi,\n        normalize_strings=normalize_strings,\n        allow_underscores=py36\n        and not bool(mode & FileMode.NO_NUMERIC_UNDERSCORE_NORMALIZATION),\n    )\n    elt = EmptyLineTracker(is_pyi=is_pyi)\n    empty_line = Line()\n    after = 0\n    for current_line in lines.visit(src_node):\n        for _ in range(after):\n            dst_contents += str(empty_line)\n        before, after = elt.maybe_empty_lines(current_line)\n        for _ in range(before):\n            dst_contents += str(empty_line)\n        for line in split_line(current_line, line_length=line_length, py36=py36):\n            dst_contents += str(line)\n    return dst_contents",
                "def decode_bytes(src: bytes) -> Tuple[FileContent, Encoding, NewLine]:\n    \"\"\"Return a tuple of (decoded_contents, encoding, newline).\n\n    `newline` is either CRLF or LF but `decoded_contents` is decoded with\n    universal newlines (i.e. only contains LF).\n    \"\"\"\n    srcbuf = io.BytesIO(src)\n    encoding, lines = tokenize.detect_encoding(srcbuf.readline)\n    if not lines:\n        return \"\", encoding, \"\\n\"\n\n    newline = \"\\r\\n\" if b\"\\r\\n\" == lines[0][-2:] else \"\\n\"\n    srcbuf.seek(0)\n    with io.TextIOWrapper(srcbuf, encoding) as tiow:\n        return tiow.read(), encoding, newline",
                "def lib2to3_parse(src_txt: str) -> Node:\n    \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n    if src_txt[-1:] != \"\\n\":\n        src_txt += \"\\n\"\n    for grammar in GRAMMARS:\n        drv = driver.Driver(grammar, pytree.convert)\n        try:\n            result = drv.parse_string(src_txt, True)\n            break\n\n        except ParseError as pe:\n            lineno, column = pe.context[1]\n            lines = src_txt.splitlines()\n            try:\n                faulty_line = lines[lineno - 1]\n            except IndexError:\n                faulty_line = \"<line number missing in source>\"\n            exc = InvalidInput(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n    else:\n        raise exc from None\n\n    if isinstance(result, Leaf):\n        result = Node(syms.file_input, [result])\n    return result",
                "def lib2to3_unparse(node: Node) -> str:\n    \"\"\"Given a lib2to3 node, return its string representation.\"\"\"\n    code = str(node)\n    return code",
                "def whitespace(leaf: Leaf, *, complex_subscript: bool) -> str:  # noqa C901\n    \"\"\"Return whitespace prefix if needed for the given `leaf`.\n\n    `complex_subscript` signals whether the given leaf is part of a subscription\n    which has non-trivial arguments, like arithmetic expressions or function calls.\n    \"\"\"\n    NO = \"\"\n    SPACE = \" \"\n    DOUBLESPACE = \"  \"\n    t = leaf.type\n    p = leaf.parent\n    v = leaf.value\n    if t in ALWAYS_NO_SPACE:\n        return NO\n\n    if t == token.COMMENT:\n        return DOUBLESPACE\n\n    assert p is not None, f\"INTERNAL ERROR: hand-made leaf without parent: {leaf!r}\"\n    if t == token.COLON and p.type not in {\n        syms.subscript,\n        syms.subscriptlist,\n        syms.sliceop,\n    }:\n        return NO\n\n    prev = leaf.prev_sibling\n    if not prev:\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type in OPENING_BRACKETS:\n            return NO\n\n        if t == token.COLON:\n            if prevp.type == token.COLON:\n                return NO\n\n            elif prevp.type != token.COMMA and not complex_subscript:\n                return NO\n\n            return SPACE\n\n        if prevp.type == token.EQUAL:\n            if prevp.parent:\n                if prevp.parent.type in {\n                    syms.arglist,\n                    syms.argument,\n                    syms.parameters,\n                    syms.varargslist,\n                }:\n                    return NO\n\n                elif prevp.parent.type == syms.typedargslist:\n                    # A bit hacky: if the equal sign has whitespace, it means we\n                    # previously found it's a typed argument.  So, we're using\n                    # that, too.\n                    return prevp.prefix\n\n        elif prevp.type in STARS:\n            if is_vararg(prevp, within=VARARGS_PARENTS | UNPACKING_PARENTS):\n                return NO\n\n        elif prevp.type == token.COLON:\n            if prevp.parent and prevp.parent.type in {syms.subscript, syms.sliceop}:\n                return SPACE if complex_subscript else NO\n\n        elif (\n            prevp.parent\n            and prevp.parent.type == syms.factor\n            and prevp.type in MATH_OPERATORS\n        ):\n            return NO\n\n        elif (\n            prevp.type == token.RIGHTSHIFT\n            and prevp.parent\n            and prevp.parent.type == syms.shift_expr\n            and prevp.prev_sibling\n            and prevp.prev_sibling.type == token.NAME\n            and prevp.prev_sibling.value == \"print\"  # type: ignore\n        ):\n            # Python 2 print chevron\n            return NO\n\n    elif prev.type in OPENING_BRACKETS:\n        return NO\n\n    if p.type in {syms.parameters, syms.arglist}:\n        # untyped function signatures or calls\n        if not prev or prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.varargslist:\n        # lambdas\n        if prev and prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.typedargslist:\n        # typed function signatures\n        if not prev:\n            return NO\n\n        if t == token.EQUAL:\n            if prev.type != syms.tname:\n                return NO\n\n        elif prev.type == token.EQUAL:\n            # A bit hacky: if the equal sign has whitespace, it means we\n            # previously found it's a typed argument.  So, we're using that, too.\n            return prev.prefix\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.tname:\n        # type names\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type != token.COMMA:\n                return NO\n\n    elif p.type == syms.trailer:\n        # attributes and calls\n        if t == token.LPAR or t == token.RPAR:\n            return NO\n\n        if not prev:\n            if t == token.DOT:\n                prevp = preceding_leaf(p)\n                if not prevp or prevp.type != token.NUMBER:\n                    return NO\n\n            elif t == token.LSQB:\n                return NO\n\n        elif prev.type != token.COMMA:\n            return NO\n\n    elif p.type == syms.argument:\n        # single argument\n        if t == token.EQUAL:\n            return NO\n\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type == token.LPAR:\n                return NO\n\n        elif prev.type in {token.EQUAL} | STARS:\n            return NO\n\n    elif p.type == syms.decorator:\n        # decorators\n        return NO\n\n    elif p.type == syms.dotted_name:\n        if prev:\n            return NO\n\n        prevp = preceding_leaf(p)\n        if not prevp or prevp.type == token.AT or prevp.type == token.DOT:\n            return NO\n\n    elif p.type == syms.classdef:\n        if t == token.LPAR:\n            return NO\n\n        if prev and prev.type == token.LPAR:\n            return NO\n\n    elif p.type in {syms.subscript, syms.sliceop}:\n        # indexing\n        if not prev:\n            assert p.parent is not None, \"subscripts are always parented\"\n            if p.parent.type == syms.subscriptlist:\n                return SPACE\n\n            return NO\n\n        elif not complex_subscript:\n            return NO\n\n    elif p.type == syms.atom:\n        if prev and t == token.DOT:\n            # dots, but not the first one.\n            return NO\n\n    elif p.type == syms.dictsetmaker:\n        # dict unpacking\n        if prev and prev.type == token.DOUBLESTAR:\n            return NO\n\n    elif p.type in {syms.factor, syms.star_expr}:\n        # unary ops\n        if not prev:\n            prevp = preceding_leaf(p)\n            if not prevp or prevp.type in OPENING_BRACKETS:\n                return NO\n\n            prevp_parent = prevp.parent\n            assert prevp_parent is not None\n            if prevp.type == token.COLON and prevp_parent.type in {\n                syms.subscript,\n                syms.sliceop,\n            }:\n                return NO\n\n            elif prevp.type == token.EQUAL and prevp_parent.type == syms.argument:\n                return NO\n\n        elif t in {token.NAME, token.NUMBER, token.STRING}:\n            return NO\n\n    elif p.type == syms.import_from:\n        if t == token.DOT:\n            if prev and prev.type == token.DOT:\n                return NO\n\n        elif t == token.NAME:\n            if v == \"import\":\n                return SPACE\n\n            if prev and prev.type == token.DOT:\n                return NO\n\n    elif p.type == syms.sliceop:\n        return NO\n\n    return SPACE",
                "def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:\n    \"\"\"Return the first leaf that precedes `node`, if any.\"\"\"\n    while node:\n        res = node.prev_sibling\n        if res:\n            if isinstance(res, Leaf):\n                return res\n\n            try:\n                return list(res.leaves())[-1]\n\n            except IndexError:\n                return None\n\n        node = node.parent\n    return None",
                "def child_towards(ancestor: Node, descendant: LN) -> Optional[LN]:\n    \"\"\"Return the child of `ancestor` that contains `descendant`.\"\"\"\n    node: Optional[LN] = descendant\n    while node and node.parent != ancestor:\n        node = node.parent\n    return node",
                "def container_of(leaf: Leaf) -> LN:\n    \"\"\"Return `leaf` or one of its ancestors that is the topmost container of it.\n\n    By \"container\" we mean a node where `leaf` is the very first child.\n    \"\"\"\n    same_prefix = leaf.prefix\n    container: LN = leaf\n    while container:\n        parent = container.parent\n        if parent is None:\n            break\n\n        if parent.children[0].prefix != same_prefix:\n            break\n\n        if parent.type == syms.file_input:\n            break\n\n        if parent.prev_sibling is not None and parent.prev_sibling.type in BRACKETS:\n            break\n\n        container = parent\n    return container",
                "def is_split_after_delimiter(leaf: Leaf, previous: Optional[Leaf] = None) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line break after it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break after themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if leaf.type == token.COMMA:\n        return COMMA_PRIORITY\n\n    return 0",
                "def is_split_before_delimiter(leaf: Leaf, previous: Optional[Leaf] = None) -> int:\n    \"\"\"Return the priority of the `leaf` delimiter, given a line break before it.\n\n    The delimiter priorities returned here are from those delimiters that would\n    cause a line break before themselves.\n\n    Higher numbers are higher priority.\n    \"\"\"\n    if is_vararg(leaf, within=VARARGS_PARENTS | UNPACKING_PARENTS):\n        # * and ** might also be MATH_OPERATORS but in this case they are not.\n        # Don't treat them as a delimiter.\n        return 0\n\n    if (\n        leaf.type == token.DOT\n        and leaf.parent\n        and leaf.parent.type not in {syms.import_from, syms.dotted_name}\n        and (previous is None or previous.type in CLOSING_BRACKETS)\n    ):\n        return DOT_PRIORITY\n\n    if (\n        leaf.type in MATH_OPERATORS\n        and leaf.parent\n        and leaf.parent.type not in {syms.factor, syms.star_expr}\n    ):\n        return MATH_PRIORITIES[leaf.type]\n\n    if leaf.type in COMPARATORS:\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.type == token.STRING\n        and previous is not None\n        and previous.type == token.STRING\n    ):\n        return STRING_PRIORITY\n\n    if leaf.type not in {token.NAME, token.ASYNC}:\n        return 0\n\n    if (\n        leaf.value == \"for\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_for, syms.old_comp_for}\n        or leaf.type == token.ASYNC\n    ):\n        if (\n            not isinstance(leaf.prev_sibling, Leaf)\n            or leaf.prev_sibling.value != \"async\"\n        ):\n            return COMPREHENSION_PRIORITY\n\n    if (\n        leaf.value == \"if\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_if, syms.old_comp_if}\n    ):\n        return COMPREHENSION_PRIORITY\n\n    if leaf.value in {\"if\", \"else\"} and leaf.parent and leaf.parent.type == syms.test:\n        return TERNARY_PRIORITY\n\n    if leaf.value == \"is\":\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.value == \"in\"\n        and leaf.parent\n        and leaf.parent.type in {syms.comp_op, syms.comparison}\n        and not (\n            previous is not None\n            and previous.type == token.NAME\n            and previous.value == \"not\"\n        )\n    ):\n        return COMPARATOR_PRIORITY\n\n    if (\n        leaf.value == \"not\"\n        and leaf.parent\n        and leaf.parent.type == syms.comp_op\n        and not (\n            previous is not None\n            and previous.type == token.NAME\n            and previous.value == \"is\"\n        )\n    ):\n        return COMPARATOR_PRIORITY\n\n    if leaf.value in LOGIC_OPERATORS and leaf.parent:\n        return LOGIC_PRIORITY\n\n    return 0",
                "def generate_comments(leaf: LN) -> Iterator[Leaf]:\n    \"\"\"Clean the prefix of the `leaf` and generate comments from it, if any.\n\n    Comments in lib2to3 are shoved into the whitespace prefix.  This happens\n    in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation\n    move because it does away with modifying the grammar to include all the\n    possible places in which comments can be placed.\n\n    The sad consequence for us though is that comments don't \"belong\" anywhere.\n    This is why this function generates simple parentless Leaf objects for\n    comments.  We simply don't know what the correct parent should be.\n\n    No matter though, we can live without this.  We really only need to\n    differentiate between inline and standalone comments.  The latter don't\n    share the line with any code.\n\n    Inline comments are emitted as regular token.COMMENT leaves.  Standalone\n    are emitted with a fake STANDALONE_COMMENT token identifier.\n    \"\"\"\n    for pc in list_comments(leaf.prefix, is_endmarker=leaf.type == token.ENDMARKER):\n        yield Leaf(pc.type, pc.value, prefix=\"\\n\" * pc.newlines)",
                "@lru_cache(maxsize=4096)\ndef list_comments(prefix: str, *, is_endmarker: bool) -> List[ProtoComment]:\n    \"\"\"Return a list of :class:`ProtoComment` objects parsed from the given `prefix`.\"\"\"\n    result: List[ProtoComment] = []\n    if not prefix or \"#\" not in prefix:\n        return result\n\n    consumed = 0\n    nlines = 0\n    for index, line in enumerate(prefix.split(\"\\n\")):\n        consumed += len(line) + 1  # adding the length of the split '\\n'\n        line = line.lstrip()\n        if not line:\n            nlines += 1\n        if not line.startswith(\"#\"):\n            continue\n\n        if index == 0 and not is_endmarker:\n            comment_type = token.COMMENT  # simple trailing comment\n        else:\n            comment_type = STANDALONE_COMMENT\n        comment = make_comment(line)\n        result.append(\n            ProtoComment(\n                type=comment_type, value=comment, newlines=nlines, consumed=consumed\n            )\n        )\n        nlines = 0\n    return result",
                "def make_comment(content: str) -> str:\n    \"\"\"Return a consistently formatted comment from the given `content` string.\n\n    All comments (except for \"##\", \"#!\", \"#:\", '#'\", \"#%%\") should have a single\n    space between the hash sign and the content.\n\n    If `content` didn't start with a hash sign, one is provided.\n    \"\"\"\n    content = content.rstrip()\n    if not content:\n        return \"#\"\n\n    if content[0] == \"#\":\n        content = content[1:]\n    if content and content[0] not in \" !:#'%\":\n        content = \" \" + content\n    return \"#\" + content",
                "def split_line(\n    line: Line, line_length: int, inner: bool = False, py36: bool = False\n) -> Iterator[Line]:\n    \"\"\"Split a `line` into potentially many lines.\n\n    They should fit in the allotted `line_length` but might not be able to.\n    `inner` signifies that there were a pair of brackets somewhere around the\n    current `line`, possibly transitively. This means we can fallback to splitting\n    by delimiters if the LHS/RHS don't yield any results.\n\n    If `py36` is True, splitting may generate syntax that is only compatible\n    with Python 3.6 and later.\n    \"\"\"\n    if line.is_comment:\n        yield line\n        return\n\n    line_str = str(line).strip(\"\\n\")\n    if not line.should_explode and is_line_short_enough(\n        line, line_length=line_length, line_str=line_str\n    ):\n        yield line\n        return\n\n    split_funcs: List[SplitFunc]\n    if line.is_def:\n        split_funcs = [left_hand_split]\n    else:\n\n        def rhs(line: Line, py36: bool = False) -> Iterator[Line]:\n            for omit in generate_trailers_to_omit(line, line_length):\n                lines = list(right_hand_split(line, line_length, py36, omit=omit))\n                if is_line_short_enough(lines[0], line_length=line_length):\n                    yield from lines\n                    return\n\n            # All splits failed, best effort split with no omits.\n            # This mostly happens to multiline strings that are by definition\n            # reported as not fitting a single line.\n            yield from right_hand_split(line, py36)\n\n        if line.inside_brackets:\n            split_funcs = [delimiter_split, standalone_comment_split, rhs]\n        else:\n            split_funcs = [rhs]\n    for split_func in split_funcs:\n        # We are accumulating lines in `result` because we might want to abort\n        # mission and return the original line in the end, or attempt a different\n        # split altogether.\n        result: List[Line] = []\n        try:\n            for l in split_func(line, py36):\n                if str(l).strip(\"\\n\") == line_str:\n                    raise CannotSplit(\"Split function returned an unchanged result\")\n\n                result.extend(\n                    split_line(l, line_length=line_length, inner=True, py36=py36)\n                )\n        except CannotSplit:\n            continue\n\n        else:\n            yield from result\n            break\n\n    else:\n        yield line",
                "def left_hand_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the first matching bracket pair.\n\n    Note: this usually looks weird, only use this for function definitions.\n    Prefer RHS otherwise.  This is why this function is not symmetrical with\n    :func:`right_hand_split` which also handles optional parentheses.\n    \"\"\"\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = head_leaves\n    matching_bracket = None\n    for leaf in line.leaves:\n        if (\n            current_leaves is body_leaves\n            and leaf.type in CLOSING_BRACKETS\n            and leaf.opening_bracket is matching_bracket\n        ):\n            current_leaves = tail_leaves if body_leaves else head_leaves\n        current_leaves.append(leaf)\n        if current_leaves is head_leaves:\n            if leaf.type in OPENING_BRACKETS:\n                matching_bracket = leaf\n                current_leaves = body_leaves\n    if not matching_bracket:\n        raise CannotSplit(\"No brackets found\")\n\n    head = bracket_split_build_line(head_leaves, line, matching_bracket)\n    body = bracket_split_build_line(body_leaves, line, matching_bracket, is_body=True)\n    tail = bracket_split_build_line(tail_leaves, line, matching_bracket)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def right_hand_split(\n    line: Line, line_length: int, py36: bool = False, omit: Collection[LeafID] = ()\n) -> Iterator[Line]:\n    \"\"\"Split line into many lines, starting with the last matching bracket pair.\n\n    If the split was by optional parentheses, attempt splitting without them, too.\n    `omit` is a collection of closing bracket IDs that shouldn't be considered for\n    this split.\n\n    Note: running this function modifies `bracket_depth` on the leaves of `line`.\n    \"\"\"\n    tail_leaves: List[Leaf] = []\n    body_leaves: List[Leaf] = []\n    head_leaves: List[Leaf] = []\n    current_leaves = tail_leaves\n    opening_bracket = None\n    closing_bracket = None\n    for leaf in reversed(line.leaves):\n        if current_leaves is body_leaves:\n            if leaf is opening_bracket:\n                current_leaves = head_leaves if body_leaves else tail_leaves\n        current_leaves.append(leaf)\n        if current_leaves is tail_leaves:\n            if leaf.type in CLOSING_BRACKETS and id(leaf) not in omit:\n                opening_bracket = leaf.opening_bracket\n                closing_bracket = leaf\n                current_leaves = body_leaves\n    if not (opening_bracket and closing_bracket and head_leaves):\n        # If there is no opening or closing_bracket that means the split failed and\n        # all content is in the tail.  Otherwise, if `head_leaves` are empty, it means\n        # the matching `opening_bracket` wasn't available on `line` anymore.\n        raise CannotSplit(\"No brackets found\")\n\n    tail_leaves.reverse()\n    body_leaves.reverse()\n    head_leaves.reverse()\n    head = bracket_split_build_line(head_leaves, line, opening_bracket)\n    body = bracket_split_build_line(body_leaves, line, opening_bracket, is_body=True)\n    tail = bracket_split_build_line(tail_leaves, line, opening_bracket)\n    bracket_split_succeeded_or_raise(head, body, tail)\n    if (\n        # the body shouldn't be exploded\n        not body.should_explode\n        # the opening bracket is an optional paren\n        and opening_bracket.type == token.LPAR\n        and not opening_bracket.value\n        # the closing bracket is an optional paren\n        and closing_bracket.type == token.RPAR\n        and not closing_bracket.value\n        # it's not an import (optional parens are the only thing we can split on\n        # in this case; attempting a split without them is a waste of time)\n        and not line.is_import\n        # there are no standalone comments in the body\n        and not body.contains_standalone_comments(0)\n        # and we can actually remove the parens\n        and can_omit_invisible_parens(body, line_length)\n    ):\n        omit = {id(closing_bracket), *omit}\n        try:\n            yield from right_hand_split(line, line_length, py36=py36, omit=omit)\n            return\n\n        except CannotSplit:\n            if not (\n                can_be_split(body)\n                or is_line_short_enough(body, line_length=line_length)\n            ):\n                raise CannotSplit(\n                    \"Splitting failed, body is still too long and can't be split.\"\n                )\n\n            elif head.contains_multiline_strings() or tail.contains_multiline_strings():\n                raise CannotSplit(\n                    \"The current optional pair of parentheses is bound to fail to \"\n                    \"satisfy the splitting algorithm because the head or the tail \"\n                    \"contains multiline strings which by definition never fit one \"\n                    \"line.\"\n                )\n\n    ensure_visible(opening_bracket)\n    ensure_visible(closing_bracket)\n    for result in (head, body, tail):\n        if result:\n            yield result",
                "def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:\n    \"\"\"Raise :exc:`CannotSplit` if the last left- or right-hand split failed.\n\n    Do nothing otherwise.\n\n    A left- or right-hand split is based on a pair of brackets. Content before\n    (and including) the opening bracket is left on one line, content inside the\n    brackets is put on a separate line, and finally content starting with and\n    following the closing bracket is put on a separate line.\n\n    Those are called `head`, `body`, and `tail`, respectively. If the split\n    produced the same line (all content in `head`) or ended up with an empty `body`\n    and the `tail` is just the closing bracket, then it's considered failed.\n    \"\"\"\n    tail_len = len(str(tail).strip())\n    if not body:\n        if tail_len == 0:\n            raise CannotSplit(\"Splitting brackets produced the same line\")\n\n        elif tail_len < 3:\n            raise CannotSplit(\n                f\"Splitting brackets on an empty body to save \"\n                f\"{tail_len} characters is not worth it\"\n            )",
                "def bracket_split_build_line(\n    leaves: List[Leaf], original: Line, opening_bracket: Leaf, *, is_body: bool = False\n) -> Line:\n    \"\"\"Return a new line with given `leaves` and respective comments from `original`.\n\n    If `is_body` is True, the result line is one-indented inside brackets and as such\n    has its first leaf's prefix normalized and a trailing comma added when expected.\n    \"\"\"\n    result = Line(depth=original.depth)\n    if is_body:\n        result.inside_brackets = True\n        result.depth += 1\n        if leaves:\n            # Since body is a new indent level, remove spurious leading whitespace.\n            normalize_prefix(leaves[0], inside_brackets=True)\n            # Ensure a trailing comma when expected.\n            if original.is_import:\n                if leaves[-1].type != token.COMMA:\n                    leaves.append(Leaf(token.COMMA, \",\"))\n    # Populate the line\n    for leaf in leaves:\n        result.append(leaf, preformatted=True)\n        for comment_after in original.comments_after(leaf):\n            result.append(comment_after, preformatted=True)\n    if is_body:\n        result.should_explode = should_explode(result, opening_bracket)\n    return result",
                "def dont_increase_indentation(split_func: SplitFunc) -> SplitFunc:\n    \"\"\"Normalize prefix of the first leaf in every line returned by `split_func`.\n\n    This is a decorator over relevant split functions.\n    \"\"\"\n\n    @wraps(split_func)\n    def split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:\n        for l in split_func(line, py36):\n            normalize_prefix(l.leaves[0], inside_brackets=True)\n            yield l\n\n    return split_wrapper",
                "@dont_increase_indentation\ndef delimiter_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split according to delimiters of the highest priority.\n\n    If `py36` is True, the split will add trailing commas also in function\n    signatures that contain `*` and `**`.\n    \"\"\"\n    try:\n        last_leaf = line.leaves[-1]\n    except IndexError:\n        raise CannotSplit(\"Line empty\")\n\n    bt = line.bracket_tracker\n    try:\n        delimiter_priority = bt.max_delimiter_priority(exclude={id(last_leaf)})\n    except ValueError:\n        raise CannotSplit(\"No delimiters found\")\n\n    if delimiter_priority == DOT_PRIORITY:\n        if bt.delimiter_count_with_priority(delimiter_priority) == 1:\n            raise CannotSplit(\"Splitting a single attribute from its owner looks wrong\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    lowest_depth = sys.maxsize\n    trailing_comma_safe = True\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for leaf in line.leaves:\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf):\n            yield from append_to_line(comment_after)\n\n        lowest_depth = min(lowest_depth, leaf.bracket_depth)\n        if leaf.bracket_depth == lowest_depth and is_vararg(\n            leaf, within=VARARGS_PARENTS\n        ):\n            trailing_comma_safe = trailing_comma_safe and py36\n        leaf_priority = bt.delimiters.get(id(leaf))\n        if leaf_priority == delimiter_priority:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n    if current_line:\n        if (\n            trailing_comma_safe\n            and delimiter_priority == COMMA_PRIORITY\n            and current_line.leaves[-1].type != token.COMMA\n            and current_line.leaves[-1].type != STANDALONE_COMMENT\n        ):\n            current_line.append(Leaf(token.COMMA, \",\"))\n        yield current_line",
                "@dont_increase_indentation\ndef standalone_comment_split(line: Line, py36: bool = False) -> Iterator[Line]:\n    \"\"\"Split standalone comments from the rest of the line.\"\"\"\n    if not line.contains_standalone_comments(0):\n        raise CannotSplit(\"Line does not have any standalone comments\")\n\n    current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n\n    def append_to_line(leaf: Leaf) -> Iterator[Line]:\n        \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n        nonlocal current_line\n        try:\n            current_line.append_safe(leaf, preformatted=True)\n        except ValueError:\n            yield current_line\n\n            current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n            current_line.append(leaf)\n\n    for leaf in line.leaves:\n        yield from append_to_line(leaf)\n\n        for comment_after in line.comments_after(leaf):\n            yield from append_to_line(comment_after)\n\n    if current_line:\n        yield current_line",
                "def is_import(leaf: Leaf) -> bool:\n    \"\"\"Return True if the given leaf starts an import statement.\"\"\"\n    p = leaf.parent\n    t = leaf.type\n    v = leaf.value\n    return bool(\n        t == token.NAME\n        and (\n            (v == \"import\" and p and p.type == syms.import_name)\n            or (v == \"from\" and p and p.type == syms.import_from)\n        )\n    )",
                "def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:\n    \"\"\"Leave existing extra newlines if not `inside_brackets`. Remove everything\n    else.\n\n    Note: don't use backslashes for formatting or you'll lose your voting rights.\n    \"\"\"\n    if not inside_brackets:\n        spl = leaf.prefix.split(\"#\")\n        if \"\\\\\" not in spl[0]:\n            nl_count = spl[-1].count(\"\\n\")\n            if len(spl) > 1:\n                nl_count -= 1\n            leaf.prefix = \"\\n\" * nl_count\n            return\n\n    leaf.prefix = \"\"",
                "def normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool = False) -> None:\n    \"\"\"Make all string prefixes lowercase.\n\n    If remove_u_prefix is given, also removes any u prefix from the string.\n\n    Note: Mutates its argument.\n    \"\"\"\n    match = re.match(r\"^([furbFURB]*)(.*)$\", leaf.value, re.DOTALL)\n    assert match is not None, f\"failed to match string {leaf.value!r}\"\n    orig_prefix = match.group(1)\n    new_prefix = orig_prefix.lower()\n    if remove_u_prefix:\n        new_prefix = new_prefix.replace(\"u\", \"\")\n    leaf.value = f\"{new_prefix}{match.group(2)}\"",
                "def normalize_string_quotes(leaf: Leaf) -> None:\n    \"\"\"Prefer double quotes but only if it doesn't cause more escaping.\n\n    Adds or removes backslashes as appropriate. Doesn't parse and fix\n    strings nested in f-strings (yet).\n\n    Note: Mutates its argument.\n    \"\"\"\n    value = leaf.value.lstrip(\"furbFURB\")\n    if value[:3] == '\"\"\"':\n        return\n\n    elif value[:3] == \"'''\":\n        orig_quote = \"'''\"\n        new_quote = '\"\"\"'\n    elif value[0] == '\"':\n        orig_quote = '\"'\n        new_quote = \"'\"\n    else:\n        orig_quote = \"'\"\n        new_quote = '\"'\n    first_quote_pos = leaf.value.find(orig_quote)\n    if first_quote_pos == -1:\n        return  # There's an internal error\n\n    prefix = leaf.value[:first_quote_pos]\n    unescaped_new_quote = re.compile(rf\"(([^\\\\]|^)(\\\\\\\\)*){new_quote}\")\n    escaped_new_quote = re.compile(rf\"([^\\\\]|^)\\\\((?:\\\\\\\\)*){new_quote}\")\n    escaped_orig_quote = re.compile(rf\"([^\\\\]|^)\\\\((?:\\\\\\\\)*){orig_quote}\")\n    body = leaf.value[first_quote_pos + len(orig_quote) : -len(orig_quote)]\n    if \"r\" in prefix.casefold():\n        if unescaped_new_quote.search(body):\n            # There's at least one unescaped new_quote in this raw string\n            # so converting is impossible\n            return\n\n        # Do not introduce or remove backslashes in raw strings\n        new_body = body\n    else:\n        # remove unnecessary escapes\n        new_body = sub_twice(escaped_new_quote, rf\"\\1\\2{new_quote}\", body)\n        if body != new_body:\n            # Consider the string without unnecessary escapes as the original\n            body = new_body\n            leaf.value = f\"{prefix}{orig_quote}{body}{orig_quote}\"\n        new_body = sub_twice(escaped_orig_quote, rf\"\\1\\2{orig_quote}\", new_body)\n        new_body = sub_twice(unescaped_new_quote, rf\"\\1\\\\{new_quote}\", new_body)\n    if \"f\" in prefix.casefold():\n        matches = re.findall(r\"[^{]\\{(.*?)\\}[^}]\", new_body)\n        for m in matches:\n            if \"\\\\\" in str(m):\n                # Do not introduce backslashes in interpolated expressions\n                return\n    if new_quote == '\"\"\"' and new_body[-1:] == '\"':\n        # edge case:\n        new_body = new_body[:-1] + '\\\\\"'\n    orig_escape_count = body.count(\"\\\\\")\n    new_escape_count = new_body.count(\"\\\\\")\n    if new_escape_count > orig_escape_count:\n        return  # Do not introduce more escaping\n\n    if new_escape_count == orig_escape_count and orig_quote == '\"':\n        return  # Prefer double quotes\n\n    leaf.value = f\"{prefix}{new_quote}{new_body}{new_quote}\"",
                "def normalize_numeric_literal(leaf: Leaf, allow_underscores: bool) -> None:\n    \"\"\"Normalizes numeric (float, int, and complex) literals.\n\n    All letters used in the representation are normalized to lowercase (except\n    in Python 2 long literals), and long number literals are split using underscores.\n    \"\"\"\n    text = leaf.value.lower()\n    if text.startswith((\"0o\", \"0b\")):\n        # Leave octal and binary literals alone.\n        pass\n    elif text.startswith(\"0x\"):\n        # Change hex literals to upper case.\n        before, after = text[:2], text[2:]\n        text = f\"{before}{after.upper()}\"\n    elif \"e\" in text:\n        before, after = text.split(\"e\")\n        sign = \"\"\n        if after.startswith(\"-\"):\n            after = after[1:]\n            sign = \"-\"\n        elif after.startswith(\"+\"):\n            after = after[1:]\n        before = format_float_or_int_string(before, allow_underscores)\n        after = format_int_string(after, allow_underscores)\n        text = f\"{before}e{sign}{after}\"\n    elif text.endswith((\"j\", \"l\")):\n        number = text[:-1]\n        suffix = text[-1]\n        # Capitalize in \"2L\" because \"l\" looks too similar to \"1\".\n        if suffix == \"l\":\n            suffix = \"L\"\n        text = f\"{format_float_or_int_string(number, allow_underscores)}{suffix}\"\n    else:\n        text = format_float_or_int_string(text, allow_underscores)\n    leaf.value = text",
                "def format_float_or_int_string(text: str, allow_underscores: bool) -> str:\n    \"\"\"Formats a float string like \"1.0\".\"\"\"\n    if \".\" not in text:\n        return format_int_string(text, allow_underscores)\n\n    before, after = text.split(\".\")\n    before = format_int_string(before, allow_underscores) if before else \"0\"\n    if after:\n        after = format_int_string(after, allow_underscores, count_from_end=False)\n    else:\n        after = \"0\"\n    return f\"{before}.{after}\"",
                "def format_int_string(\n    text: str, allow_underscores: bool, count_from_end: bool = True\n) -> str:\n    \"\"\"Normalizes underscores in a string to e.g. 1_000_000.\n\n    Input must be a string of digits and optional underscores.\n    If count_from_end is False, we add underscores after groups of three digits\n    counting from the beginning instead of the end of the strings. This is used\n    for the fractional part of float literals.\n    \"\"\"\n    if not allow_underscores:\n        return text\n\n    text = text.replace(\"_\", \"\")\n    if len(text) <= 5:\n        # No underscores for numbers <= 5 digits long.\n        return text\n\n    if count_from_end:\n        # Avoid removing leading zeros, which are important if we're formatting\n        # part of a number like \"0.001\".\n        return format(int(\"1\" + text), \"3_\")[1:].lstrip(\"_\")\n    else:\n        return \"_\".join(text[i : i + 3] for i in range(0, len(text), 3))",
                "def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:\n    \"\"\"Make existing optional parentheses invisible or create new ones.\n\n    `parens_after` is a set of string leaf values immeditely after which parens\n    should be put.\n\n    Standardizes on visible parentheses for single-element tuples, and keeps\n    existing visible parentheses for other tuples and generator expressions.\n    \"\"\"\n    for pc in list_comments(node.prefix, is_endmarker=False):\n        if pc.value in FMT_OFF:\n            # This `node` has a prefix with `# fmt: off`, don't mess with parens.\n            return\n\n    check_lpar = False\n    for index, child in enumerate(list(node.children)):\n        if check_lpar:\n            if child.type == syms.atom:\n                if maybe_make_parens_invisible_in_atom(child):\n                    lpar = Leaf(token.LPAR, \"\")\n                    rpar = Leaf(token.RPAR, \"\")\n                    index = child.remove() or 0\n                    node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n            elif is_one_tuple(child):\n                # wrap child in visible parentheses\n                lpar = Leaf(token.LPAR, \"(\")\n                rpar = Leaf(token.RPAR, \")\")\n                child.remove()\n                node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n            elif node.type == syms.import_from:\n                # \"import from\" nodes store parentheses directly as part of\n                # the statement\n                if child.type == token.LPAR:\n                    # make parentheses invisible\n                    child.value = \"\"  # type: ignore\n                    node.children[-1].value = \"\"  # type: ignore\n                elif child.type != token.STAR:\n                    # insert invisible parentheses\n                    node.insert_child(index, Leaf(token.LPAR, \"\"))\n                    node.append_child(Leaf(token.RPAR, \"\"))\n                break\n\n            elif not (isinstance(child, Leaf) and is_multiline_string(child)):\n                # wrap child in invisible parentheses\n                lpar = Leaf(token.LPAR, \"\")\n                rpar = Leaf(token.RPAR, \"\")\n                index = child.remove() or 0\n                node.insert_child(index, Node(syms.atom, [lpar, child, rpar]))\n\n        check_lpar = isinstance(child, Leaf) and child.value in parens_after",
                "def normalize_fmt_off(node: Node) -> None:\n    \"\"\"Convert content between `# fmt: off`/`# fmt: on` into standalone comments.\"\"\"\n    try_again = True\n    while try_again:\n        try_again = convert_one_fmt_off_pair(node)",
                "def convert_one_fmt_off_pair(node: Node) -> bool:\n    \"\"\"Convert content of a single `# fmt: off`/`# fmt: on` into a standalone comment.\n\n    Returns True if a pair was converted.\n    \"\"\"\n    for leaf in node.leaves():\n        previous_consumed = 0\n        for comment in list_comments(leaf.prefix, is_endmarker=False):\n            if comment.value in FMT_OFF:\n                # We only want standalone comments. If there's no previous leaf or\n                # the previous leaf is indentation, it's a standalone comment in\n                # disguise.\n                if comment.type != STANDALONE_COMMENT:\n                    prev = preceding_leaf(leaf)\n                    if prev and prev.type not in WHITESPACE:\n                        continue\n\n                ignored_nodes = list(generate_ignored_nodes(leaf))\n                if not ignored_nodes:\n                    continue\n\n                first = ignored_nodes[0]  # Can be a container node with the `leaf`.\n                parent = first.parent\n                prefix = first.prefix\n                first.prefix = prefix[comment.consumed :]\n                hidden_value = (\n                    comment.value + \"\\n\" + \"\".join(str(n) for n in ignored_nodes)\n                )\n                if hidden_value.endswith(\"\\n\"):\n                    # That happens when one of the `ignored_nodes` ended with a NEWLINE\n                    # leaf (possibly followed by a DEDENT).\n                    hidden_value = hidden_value[:-1]\n                first_idx = None\n                for ignored in ignored_nodes:\n                    index = ignored.remove()\n                    if first_idx is None:\n                        first_idx = index\n                assert parent is not None, \"INTERNAL ERROR: fmt: on/off handling (1)\"\n                assert first_idx is not None, \"INTERNAL ERROR: fmt: on/off handling (2)\"\n                parent.insert_child(\n                    first_idx,\n                    Leaf(\n                        STANDALONE_COMMENT,\n                        hidden_value,\n                        prefix=prefix[:previous_consumed] + \"\\n\" * comment.newlines,\n                    ),\n                )\n                return True\n\n            previous_consumed = comment.consumed\n\n    return False",
                "def generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]:\n    \"\"\"Starting from the container of `leaf`, generate all leaves until `# fmt: on`.\n\n    Stops at the end of the block.\n    \"\"\"\n    container: Optional[LN] = container_of(leaf)\n    while container is not None and container.type != token.ENDMARKER:\n        for comment in list_comments(container.prefix, is_endmarker=False):\n            if comment.value in FMT_ON:\n                return\n\n        yield container\n\n        container = container.next_sibling",
                "def maybe_make_parens_invisible_in_atom(node: LN) -> bool:\n    \"\"\"If it's safe, make the parens in the atom `node` invisible, recursively.\n\n    Returns whether the node should itself be wrapped in invisible parentheses.\n\n    \"\"\"\n    if (\n        node.type != syms.atom\n        or is_empty_tuple(node)\n        or is_one_tuple(node)\n        or is_yield(node)\n        or max_delimiter_priority_in_atom(node) >= COMMA_PRIORITY\n    ):\n        return False\n\n    first = node.children[0]\n    last = node.children[-1]\n    if first.type == token.LPAR and last.type == token.RPAR:\n        # make parentheses invisible\n        first.value = \"\"  # type: ignore\n        last.value = \"\"  # type: ignore\n        if len(node.children) > 1:\n            maybe_make_parens_invisible_in_atom(node.children[1])\n        return False\n\n    return True",
                "def is_empty_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds an empty tuple.\"\"\"\n    return (\n        node.type == syms.atom\n        and len(node.children) == 2\n        and node.children[0].type == token.LPAR\n        and node.children[1].type == token.RPAR\n    )",
                "def is_one_tuple(node: LN) -> bool:\n    \"\"\"Return True if `node` holds a tuple with one element, with or without parens.\"\"\"\n    if node.type == syms.atom:\n        if len(node.children) != 3:\n            return False\n\n        lpar, gexp, rpar = node.children\n        if not (\n            lpar.type == token.LPAR\n            and gexp.type == syms.testlist_gexp\n            and rpar.type == token.RPAR\n        ):\n            return False\n\n        return len(gexp.children) == 2 and gexp.children[1].type == token.COMMA\n\n    return (\n        node.type in IMPLICIT_TUPLE\n        and len(node.children) == 2\n        and node.children[1].type == token.COMMA\n    )",
                "def is_yield(node: LN) -> bool:\n    \"\"\"Return True if `node` holds a `yield` or `yield from` expression.\"\"\"\n    if node.type == syms.yield_expr:\n        return True\n\n    if node.type == token.NAME and node.value == \"yield\":  # type: ignore\n        return True\n\n    if node.type != syms.atom:\n        return False\n\n    if len(node.children) != 3:\n        return False\n\n    lpar, expr, rpar = node.children\n    if lpar.type == token.LPAR and rpar.type == token.RPAR:\n        return is_yield(expr)\n\n    return False",
                "def is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool:\n    \"\"\"Return True if `leaf` is a star or double star in a vararg or kwarg.\n\n    If `within` includes VARARGS_PARENTS, this applies to function signatures.\n    If `within` includes UNPACKING_PARENTS, it applies to right hand-side\n    extended iterable unpacking (PEP 3132) and additional unpacking\n    generalizations (PEP 448).\n    \"\"\"\n    if leaf.type not in STARS or not leaf.parent:\n        return False\n\n    p = leaf.parent\n    if p.type == syms.star_expr:\n        # Star expressions are also used as assignment targets in extended\n        # iterable unpacking (PEP 3132).  See what its parent is instead.\n        if not p.parent:\n            return False\n\n        p = p.parent\n\n    return p.type in within",
                "def is_multiline_string(leaf: Leaf) -> bool:\n    \"\"\"Return True if `leaf` is a multiline string that actually spans many lines.\"\"\"\n    value = leaf.value.lstrip(\"furbFURB\")\n    return value[:3] in {'\"\"\"', \"'''\"} and \"\\n\" in value",
                "def is_stub_suite(node: Node) -> bool:\n    \"\"\"Return True if `node` is a suite with a stub body.\"\"\"\n    if (\n        len(node.children) != 4\n        or node.children[0].type != token.NEWLINE\n        or node.children[1].type != token.INDENT\n        or node.children[3].type != token.DEDENT\n    ):\n        return False\n\n    return is_stub_body(node.children[2])",
                "def is_stub_body(node: LN) -> bool:\n    \"\"\"Return True if `node` is a simple statement containing an ellipsis.\"\"\"\n    if not isinstance(node, Node) or node.type != syms.simple_stmt:\n        return False\n\n    if len(node.children) != 2:\n        return False\n\n    child = node.children[0]\n    return (\n        child.type == syms.atom\n        and len(child.children) == 3\n        and all(leaf == Leaf(token.DOT, \".\") for leaf in child.children)\n    )",
                "def max_delimiter_priority_in_atom(node: LN) -> int:\n    \"\"\"Return maximum delimiter priority inside `node`.\n\n    This is specific to atoms with contents contained in a pair of parentheses.\n    If `node` isn't an atom or there are no enclosing parentheses, returns 0.\n    \"\"\"\n    if node.type != syms.atom:\n        return 0\n\n    first = node.children[0]\n    last = node.children[-1]\n    if not (first.type == token.LPAR and last.type == token.RPAR):\n        return 0\n\n    bt = BracketTracker()\n    for c in node.children[1:-1]:\n        if isinstance(c, Leaf):\n            bt.mark(c)\n        else:\n            for leaf in c.leaves():\n                bt.mark(leaf)\n    try:\n        return bt.max_delimiter_priority()\n\n    except ValueError:\n        return 0",
                "def ensure_visible(leaf: Leaf) -> None:\n    \"\"\"Make sure parentheses are visible.\n\n    They could be invisible as part of some statements (see\n    :func:`normalize_invible_parens` and :func:`visit_import_from`).\n    \"\"\"\n    if leaf.type == token.LPAR:\n        leaf.value = \"(\"\n    elif leaf.type == token.RPAR:\n        leaf.value = \")\"",
                "def should_explode(line: Line, opening_bracket: Leaf) -> bool:\n    \"\"\"Should `line` immediately be split with `delimiter_split()` after RHS?\"\"\"\n    if not (\n        opening_bracket.parent\n        and opening_bracket.parent.type in {syms.atom, syms.import_from}\n        and opening_bracket.value in \"[{(\"\n    ):\n        return False\n\n    try:\n        last_leaf = line.leaves[-1]\n        exclude = {id(last_leaf)} if last_leaf.type == token.COMMA else set()\n        max_priority = line.bracket_tracker.max_delimiter_priority(exclude=exclude)\n    except (IndexError, ValueError):\n        return False\n\n    return max_priority == COMMA_PRIORITY",
                "def is_python36(node: Node) -> bool:\n    \"\"\"Return True if the current file is using Python 3.6+ features.\n\n    Currently looking for:\n    - f-strings;\n    - underscores in numeric literals; and\n    - trailing commas after * or ** in function signatures and calls.\n    \"\"\"\n    for n in node.pre_order():\n        if n.type == token.STRING:\n            value_head = n.value[:2]  # type: ignore\n            if value_head in {'f\"', 'F\"', \"f'\", \"F'\", \"rf\", \"fr\", \"RF\", \"FR\"}:\n                return True\n\n        elif n.type == token.NUMBER:\n            if \"_\" in n.value:  # type: ignore\n                return True\n\n        elif (\n            n.type in {syms.typedargslist, syms.arglist}\n            and n.children\n            and n.children[-1].type == token.COMMA\n        ):\n            for ch in n.children:\n                if ch.type in STARS:\n                    return True\n\n                if ch.type == syms.argument:\n                    for argch in ch.children:\n                        if argch.type in STARS:\n                            return True\n\n    return False",
                "def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]:\n    \"\"\"Generate sets of closing bracket IDs that should be omitted in a RHS.\n\n    Brackets can be omitted if the entire trailer up to and including\n    a preceding closing bracket fits in one line.\n\n    Yielded sets are cumulative (contain results of previous yields, too).  First\n    set is empty.\n    \"\"\"\n\n    omit: Set[LeafID] = set()\n    yield omit\n\n    length = 4 * line.depth\n    opening_bracket = None\n    closing_bracket = None\n    inner_brackets: Set[LeafID] = set()\n    for index, leaf, leaf_length in enumerate_with_length(line, reversed=True):\n        length += leaf_length\n        if length > line_length:\n            break\n\n        has_inline_comment = leaf_length > len(leaf.value) + len(leaf.prefix)\n        if leaf.type == STANDALONE_COMMENT or has_inline_comment:\n            break\n\n        if opening_bracket:\n            if leaf is opening_bracket:\n                opening_bracket = None\n            elif leaf.type in CLOSING_BRACKETS:\n                inner_brackets.add(id(leaf))\n        elif leaf.type in CLOSING_BRACKETS:\n            if index > 0 and line.leaves[index - 1].type in OPENING_BRACKETS:\n                # Empty brackets would fail a split so treat them as \"inner\"\n                # brackets (e.g. only add them to the `omit` set if another\n                # pair of brackets was good enough.\n                inner_brackets.add(id(leaf))\n                continue\n\n            if closing_bracket:\n                omit.add(id(closing_bracket))\n                omit.update(inner_brackets)\n                inner_brackets.clear()\n                yield omit\n\n            if leaf.value:\n                opening_bracket = leaf.opening_bracket\n                closing_bracket = leaf",
                "def get_future_imports(node: Node) -> Set[str]:\n    \"\"\"Return a set of __future__ imports in the file.\"\"\"\n    imports: Set[str] = set()\n\n    def get_imports_from_children(children: List[LN]) -> Generator[str, None, None]:\n        for child in children:\n            if isinstance(child, Leaf):\n                if child.type == token.NAME:\n                    yield child.value\n            elif child.type == syms.import_as_name:\n                orig_name = child.children[0]\n                assert isinstance(orig_name, Leaf), \"Invalid syntax parsing imports\"\n                assert orig_name.type == token.NAME, \"Invalid syntax parsing imports\"\n                yield orig_name.value\n            elif child.type == syms.import_as_names:\n                yield from get_imports_from_children(child.children)\n            else:\n                assert False, \"Invalid syntax parsing imports\"\n\n    for child in node.children:\n        if child.type != syms.simple_stmt:\n            break\n        first_child = child.children[0]\n        if isinstance(first_child, Leaf):\n            # Continue looking if we see a docstring; otherwise stop.\n            if (\n                len(child.children) == 2\n                and first_child.type == token.STRING\n                and child.children[1].type == token.NEWLINE\n            ):\n                continue\n            else:\n                break\n        elif first_child.type == syms.import_from:\n            module_name = first_child.children[1]\n            if not isinstance(module_name, Leaf) or module_name.value != \"__future__\":\n                break\n            imports |= set(get_imports_from_children(first_child.children[3:]))\n        else:\n            break\n    return imports",
                "def gen_python_files_in_dir(\n    path: Path,\n    root: Path,\n    include: Pattern[str],\n    exclude: Pattern[str],\n    report: \"Report\",\n) -> Iterator[Path]:\n    \"\"\"Generate all files under `path` whose paths are not excluded by the\n    `exclude` regex, but are included by the `include` regex.\n\n    Symbolic links pointing outside of the `root` directory are ignored.\n\n    `report` is where output about exclusions goes.\n    \"\"\"\n    assert root.is_absolute(), f\"INTERNAL ERROR: `root` must be absolute but is {root}\"\n    for child in path.iterdir():\n        try:\n            normalized_path = \"/\" + child.resolve().relative_to(root).as_posix()\n        except ValueError:\n            if child.is_symlink():\n                report.path_ignored(\n                    child, f\"is a symbolic link that points outside {root}\"\n                )\n                continue\n\n            raise\n\n        if child.is_dir():\n            normalized_path += \"/\"\n        exclude_match = exclude.search(normalized_path)\n        if exclude_match and exclude_match.group(0):\n            report.path_ignored(child, f\"matches the --exclude regular expression\")\n            continue\n\n        if child.is_dir():\n            yield from gen_python_files_in_dir(child, root, include, exclude, report)\n\n        elif child.is_file():\n            include_match = include.search(normalized_path)\n            if include_match:\n                yield child",
                "@lru_cache()\ndef find_project_root(srcs: Iterable[str]) -> Path:\n    \"\"\"Return a directory containing .git, .hg, or pyproject.toml.\n\n    That directory can be one of the directories passed in `srcs` or their\n    common parent.\n\n    If no directory in the tree contains a marker that would specify it's the\n    project root, the root of the file system is returned.\n    \"\"\"\n    if not srcs:\n        return Path(\"/\").resolve()\n\n    common_base = min(Path(src).resolve() for src in srcs)\n    if common_base.is_dir():\n        # Append a fake file so `parents` below returns `common_base_dir`, too.\n        common_base /= \"fake-file\"\n    for directory in common_base.parents:\n        if (directory / \".git\").is_dir():\n            return directory\n\n        if (directory / \".hg\").is_dir():\n            return directory\n\n        if (directory / \"pyproject.toml\").is_file():\n            return directory\n\n    return directory",
                "def assert_equivalent(src: str, dst: str) -> None:\n    \"\"\"Raise AssertionError if `src` and `dst` aren't equivalent.\"\"\"\n\n    import ast\n    import traceback\n\n    def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n        \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n        yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n        for field in sorted(node._fields):\n            try:\n                value = getattr(node, field)\n            except AttributeError:\n                continue\n\n            yield f\"{'  ' * (depth+1)}{field}=\"\n\n            if isinstance(value, list):\n                for item in value:\n                    if isinstance(item, ast.AST):\n                        yield from _v(item, depth + 2)\n\n            elif isinstance(value, ast.AST):\n                yield from _v(value, depth + 2)\n\n            else:\n                yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n        yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"\n\n    try:\n        src_ast = ast.parse(src)\n    except Exception as exc:\n        major, minor = sys.version_info[:2]\n        raise AssertionError(\n            f\"cannot use --safe with this file; failed to parse source file \"\n            f\"with Python {major}.{minor}'s builtin AST. Re-run with --fast \"\n            f\"or stop using deprecated Python 2 syntax. AST error message: {exc}\"\n        )\n\n    try:\n        dst_ast = ast.parse(dst)\n    except Exception as exc:\n        log = dump_to_file(\"\".join(traceback.format_tb(exc.__traceback__)), dst)\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced invalid code: {exc}. \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This invalid output might be helpful: {log}\"\n        ) from None\n\n    src_ast_str = \"\\n\".join(_v(src_ast))\n    dst_ast_str = \"\\n\".join(_v(dst_ast))\n    if src_ast_str != dst_ast_str:\n        log = dump_to_file(diff(src_ast_str, dst_ast_str, \"src\", \"dst\"))\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced code that is not equivalent to \"\n            f\"the source.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
                "def assert_stable(\n    src: str, dst: str, line_length: int, mode: FileMode = FileMode.AUTO_DETECT\n) -> None:\n    \"\"\"Raise AssertionError if `dst` reformats differently the second time.\"\"\"\n    newdst = format_str(dst, line_length=line_length, mode=mode)\n    if dst != newdst:\n        log = dump_to_file(\n            diff(src, dst, \"source\", \"first pass\"),\n            diff(dst, newdst, \"first pass\", \"second pass\"),\n        )\n        raise AssertionError(\n            f\"INTERNAL ERROR: Black produced different code on the second pass \"\n            f\"of the formatter.  \"\n            f\"Please report a bug on https://github.com/ambv/black/issues.  \"\n            f\"This diff might be helpful: {log}\"\n        ) from None",
                "def dump_to_file(*output: str) -> str:\n    \"\"\"Dump `output` to a temporary file. Return path to the file.\"\"\"\n    import tempfile\n\n    with tempfile.NamedTemporaryFile(\n        mode=\"w\", prefix=\"blk_\", suffix=\".log\", delete=False, encoding=\"utf8\"\n    ) as f:\n        for lines in output:\n            f.write(lines)\n            if lines and lines[-1] != \"\\n\":\n                f.write(\"\\n\")\n    return f.name",
                "def diff(a: str, b: str, a_name: str, b_name: str) -> str:\n    \"\"\"Return a unified diff string between strings `a` and `b`.\"\"\"\n    import difflib\n\n    a_lines = [line + \"\\n\" for line in a.split(\"\\n\")]\n    b_lines = [line + \"\\n\" for line in b.split(\"\\n\")]\n    return \"\".join(\n        difflib.unified_diff(a_lines, b_lines, fromfile=a_name, tofile=b_name, n=5)\n    )",
                "def cancel(tasks: Iterable[asyncio.Task]) -> None:\n    \"\"\"asyncio signal handler that cancels all `tasks` and reports to stderr.\"\"\"\n    err(\"Aborted!\")\n    for task in tasks:\n        task.cancel()",
                "def shutdown(loop: BaseEventLoop) -> None:\n    \"\"\"Cancel all pending tasks on `loop`, wait for them, and close the loop.\"\"\"\n    try:\n        # This part is borrowed from asyncio/runners.py in Python 3.7b2.\n        to_cancel = [task for task in asyncio.Task.all_tasks(loop) if not task.done()]\n        if not to_cancel:\n            return\n\n        for task in to_cancel:\n            task.cancel()\n        loop.run_until_complete(\n            asyncio.gather(*to_cancel, loop=loop, return_exceptions=True)\n        )\n    finally:\n        # `concurrent.futures.Future` objects cannot be cancelled once they\n        # are already running. There might be some when the `shutdown()` happened.\n        # Silence their logger's spew about the event loop being closed.\n        cf_logger = logging.getLogger(\"concurrent.futures\")\n        cf_logger.setLevel(logging.CRITICAL)\n        loop.close()",
                "def sub_twice(regex: Pattern[str], replacement: str, original: str) -> str:\n    \"\"\"Replace `regex` with `replacement` twice on `original`.\n\n    This is used by string normalization to perform replaces on\n    overlapping matches.\n    \"\"\"\n    return regex.sub(replacement, regex.sub(replacement, original))",
                "def re_compile_maybe_verbose(regex: str) -> Pattern[str]:\n    \"\"\"Compile a regular expression string in `regex`.\n\n    If it contains newlines, use verbose mode.\n    \"\"\"\n    if \"\\n\" in regex:\n        regex = \"(?x)\" + regex\n    return re.compile(regex)",
                "def enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]:\n    \"\"\"Like `reversed(enumerate(sequence))` if that were possible.\"\"\"\n    index = len(sequence) - 1\n    for element in reversed(sequence):\n        yield (index, element)\n        index -= 1",
                "def enumerate_with_length(\n    line: Line, reversed: bool = False\n) -> Iterator[Tuple[Index, Leaf, int]]:\n    \"\"\"Return an enumeration of leaves with their length.\n\n    Stops prematurely on multiline strings and standalone comments.\n    \"\"\"\n    op = cast(\n        Callable[[Sequence[Leaf]], Iterator[Tuple[Index, Leaf]]],\n        enumerate_reversed if reversed else enumerate,\n    )\n    for index, leaf in op(line.leaves):\n        length = len(leaf.prefix) + len(leaf.value)\n        if \"\\n\" in leaf.value:\n            return  # Multiline strings, we can't continue.\n\n        comment: Optional[Leaf]\n        for comment in line.comments_after(leaf):\n            length += len(comment.value)\n\n        yield index, leaf, length",
                "def is_line_short_enough(line: Line, *, line_length: int, line_str: str = \"\") -> bool:\n    \"\"\"Return True if `line` is no longer than `line_length`.\n\n    Uses the provided `line_str` rendering, if any, otherwise computes a new one.\n    \"\"\"\n    if not line_str:\n        line_str = str(line).strip(\"\\n\")\n    return (\n        len(line_str) <= line_length\n        and \"\\n\" not in line_str  # multiline strings\n        and not line.contains_standalone_comments()\n    )",
                "def can_be_split(line: Line) -> bool:\n    \"\"\"Return False if the line cannot be split *for sure*.\n\n    This is not an exhaustive search but a cheap heuristic that we can use to\n    avoid some unfortunate formattings (mostly around wrapping unsplittable code\n    in unnecessary parentheses).\n    \"\"\"\n    leaves = line.leaves\n    if len(leaves) < 2:\n        return False\n\n    if leaves[0].type == token.STRING and leaves[1].type == token.DOT:\n        call_count = 0\n        dot_count = 0\n        next = leaves[-1]\n        for leaf in leaves[-2::-1]:\n            if leaf.type in OPENING_BRACKETS:\n                if next.type not in CLOSING_BRACKETS:\n                    return False\n\n                call_count += 1\n            elif leaf.type == token.DOT:\n                dot_count += 1\n            elif leaf.type == token.NAME:\n                if not (next.type == token.DOT or next.type in OPENING_BRACKETS):\n                    return False\n\n            elif leaf.type not in CLOSING_BRACKETS:\n                return False\n\n            if dot_count > 1 and call_count > 1:\n                return False\n\n    return True",
                "def can_omit_invisible_parens(line: Line, line_length: int) -> bool:\n    \"\"\"Does `line` have a shape safe to reformat without optional parens around it?\n\n    Returns True for only a subset of potentially nice looking formattings but\n    the point is to not return false positives that end up producing lines that\n    are too long.\n    \"\"\"\n    bt = line.bracket_tracker\n    if not bt.delimiters:\n        # Without delimiters the optional parentheses are useless.\n        return True\n\n    max_priority = bt.max_delimiter_priority()\n    if bt.delimiter_count_with_priority(max_priority) > 1:\n        # With more than one delimiter of a kind the optional parentheses read better.\n        return False\n\n    if max_priority == DOT_PRIORITY:\n        # A single stranded method call doesn't require optional parentheses.\n        return True\n\n    assert len(line.leaves) >= 2, \"Stranded delimiter\"\n\n    first = line.leaves[0]\n    second = line.leaves[1]\n    penultimate = line.leaves[-2]\n    last = line.leaves[-1]\n\n    # With a single delimiter, omit if the expression starts or ends with\n    # a bracket.\n    if first.type in OPENING_BRACKETS and second.type not in CLOSING_BRACKETS:\n        remainder = False\n        length = 4 * line.depth\n        for _index, leaf, leaf_length in enumerate_with_length(line):\n            if leaf.type in CLOSING_BRACKETS and leaf.opening_bracket is first:\n                remainder = True\n            if remainder:\n                length += leaf_length\n                if length > line_length:\n                    break\n\n                if leaf.type in OPENING_BRACKETS:\n                    # There are brackets we can further split on.\n                    remainder = False\n\n        else:\n            # checked the entire string and line length wasn't exceeded\n            if len(line.leaves) == _index + 1:\n                return True\n\n        # Note: we are not returning False here because a line might have *both*\n        # a leading opening bracket and a trailing closing bracket.  If the\n        # opening bracket doesn't match our rule, maybe the closing will.\n\n    if (\n        last.type == token.RPAR\n        or last.type == token.RBRACE\n        or (\n            # don't use indexing for omitting optional parentheses;\n            # it looks weird\n            last.type == token.RSQB\n            and last.parent\n            and last.parent.type != syms.trailer\n        )\n    ):\n        if penultimate.type in OPENING_BRACKETS:\n            # Empty brackets don't help.\n            return False\n\n        if is_multiline_string(first):\n            # Additional wrapping of a multiline string in this situation is\n            # unnecessary.\n            return True\n\n        length = 4 * line.depth\n        seen_other_brackets = False\n        for _index, leaf, leaf_length in enumerate_with_length(line):\n            length += leaf_length\n            if leaf is last.opening_bracket:\n                if seen_other_brackets or length <= line_length:\n                    return True\n\n            elif leaf.type in OPENING_BRACKETS:\n                # There are brackets we can further split on.\n                seen_other_brackets = True\n\n    return False",
                "def get_cache_file(line_length: int, mode: FileMode) -> Path:\n    return CACHE_DIR / f\"cache.{line_length}.{mode.value}.pickle\"",
                "def read_cache(line_length: int, mode: FileMode) -> Cache:\n    \"\"\"Read the cache if it exists and is well formed.\n\n    If it is not well formed, the call to write_cache later should resolve the issue.\n    \"\"\"\n    cache_file = get_cache_file(line_length, mode)\n    if not cache_file.exists():\n        return {}\n\n    with cache_file.open(\"rb\") as fobj:\n        try:\n            cache: Cache = pickle.load(fobj)\n        except pickle.UnpicklingError:\n            return {}\n\n    return cache",
                "def get_cache_info(path: Path) -> CacheInfo:\n    \"\"\"Return the information used to check if a file is already formatted or not.\"\"\"\n    stat = path.stat()\n    return stat.st_mtime, stat.st_size",
                "def filter_cached(cache: Cache, sources: Iterable[Path]) -> Tuple[Set[Path], Set[Path]]:\n    \"\"\"Split an iterable of paths in `sources` into two sets.\n\n    The first contains paths of files that modified on disk or are not in the\n    cache. The other contains paths to non-modified files.\n    \"\"\"\n    todo, done = set(), set()\n    for src in sources:\n        src = src.resolve()\n        if cache.get(src) != get_cache_info(src):\n            todo.add(src)\n        else:\n            done.add(src)\n    return todo, done",
                "def write_cache(\n    cache: Cache, sources: Iterable[Path], line_length: int, mode: FileMode\n) -> None:\n    \"\"\"Update the cache file.\"\"\"\n    cache_file = get_cache_file(line_length, mode)\n    try:\n        if not CACHE_DIR.exists():\n            CACHE_DIR.mkdir(parents=True)\n        new_cache = {**cache, **{src.resolve(): get_cache_info(src) for src in sources}}\n        with cache_file.open(\"wb\") as fobj:\n            pickle.dump(new_cache, fobj, protocol=pickle.HIGHEST_PROTOCOL)\n    except OSError:\n        pass",
                "def patch_click() -> None:\n    \"\"\"Make Click not crash.\n\n    On certain misconfigured environments, Python 3 selects the ASCII encoding as the\n    default which restricts paths that it can access during the lifetime of the\n    application.  Click refuses to work in this scenario by raising a RuntimeError.\n\n    In case of Black the likelihood that non-ASCII characters are going to be used in\n    file paths is minimal since it's Python source code.  Moreover, this crash was\n    spurious on Python 3.7 thanks to PEP 538 and PEP 540.\n    \"\"\"\n    try:\n        from click import core\n        from click import _unicodefun  # type: ignore\n    except ModuleNotFoundError:\n        return\n\n    for module in (core, _unicodefun):\n        if hasattr(module, \"_verify_python3_env\"):\n            module._verify_python3_env = lambda: None",
                "def patched_main() -> None:\n    freeze_support()\n    patch_click()\n    main()",
                "@classmethod\ndef from_configuration(cls, *, check: bool, diff: bool) -> \"WriteBack\":\n    if check and not diff:\n        return cls.CHECK\n\n    return cls.DIFF if diff else cls.YES",
                "@classmethod\ndef from_configuration(\n    cls,\n    *,\n    py36: bool,\n    pyi: bool,\n    skip_string_normalization: bool,\n    skip_numeric_underscore_normalization: bool,\n) -> \"FileMode\":\n    mode = cls.AUTO_DETECT\n    if py36:\n        mode |= cls.PYTHON36\n    if pyi:\n        mode |= cls.PYI\n    if skip_string_normalization:\n        mode |= cls.NO_STRING_NORMALIZATION\n    if skip_numeric_underscore_normalization:\n        mode |= cls.NO_NUMERIC_UNDERSCORE_NORMALIZATION\n    return mode",
                "def visit(self, node: LN) -> Iterator[T]:\n    \"\"\"Main method to visit `node` and its children.\n\n    It tries to find a `visit_*()` method for the given `node.type`, like\n    `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.\n    If no dedicated `visit_*()` method is found, chooses `visit_default()`\n    instead.\n\n    Then yields objects of type `T` from the selected visitor.\n    \"\"\"\n    if node.type < 256:\n        name = token.tok_name[node.type]\n    else:\n        name = type_repr(node.type)\n    yield from getattr(self, f\"visit_{name}\", self.visit_default)(node)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Node):\n        for child in node.children:\n            yield from self.visit(child)",
                "def visit_default(self, node: LN) -> Iterator[T]:\n    indent = \" \" * (2 * self.tree_depth)\n    if isinstance(node, Node):\n        _type = type_repr(node.type)\n        out(f\"{indent}{_type}\", fg=\"yellow\")\n        self.tree_depth += 1\n        for child in node.children:\n            yield from self.visit(child)\n\n        self.tree_depth -= 1\n        out(f\"{indent}/{_type}\", fg=\"yellow\", bold=False)\n    else:\n        _type = token.tok_name.get(node.type, str(node.type))\n        out(f\"{indent}{_type}\", fg=\"blue\", nl=False)\n        if node.prefix:\n            # We don't have to handle prefixes for `Node` objects since\n            # that delegates to the first child anyway.\n            out(f\" {node.prefix!r}\", fg=\"green\", bold=False, nl=False)\n        out(f\" {node.value!r}\", fg=\"blue\", bold=False)",
                "@classmethod\ndef show(cls, code: Union[str, Leaf, Node]) -> None:\n    \"\"\"Pretty-print the lib2to3 AST of a given string of `code`.\n\n    Convenience method for debugging.\n    \"\"\"\n    v: DebugVisitor[None] = DebugVisitor()\n    if isinstance(code, str):\n        code = lib2to3_parse(code)\n    list(v.visit(code))",
                "def mark(self, leaf: Leaf) -> None:\n    \"\"\"Mark `leaf` with bracket-related metadata. Keep track of delimiters.\n\n    All leaves receive an int `bracket_depth` field that stores how deep\n    within brackets a given leaf is. 0 means there are no enclosing brackets\n    that started on this line.\n\n    If a leaf is itself a closing bracket, it receives an `opening_bracket`\n    field that it forms a pair with. This is a one-directional link to\n    avoid reference cycles.\n\n    If a leaf is a delimiter (a token on which Black can split the line if\n    needed) and it's on depth 0, its `id()` is stored in the tracker's\n    `delimiters` field.\n    \"\"\"\n    if leaf.type == token.COMMENT:\n        return\n\n    self.maybe_decrement_after_for_loop_variable(leaf)\n    self.maybe_decrement_after_lambda_arguments(leaf)\n    if leaf.type in CLOSING_BRACKETS:\n        self.depth -= 1\n        opening_bracket = self.bracket_match.pop((self.depth, leaf.type))\n        leaf.opening_bracket = opening_bracket\n    leaf.bracket_depth = self.depth\n    if self.depth == 0:\n        delim = is_split_before_delimiter(leaf, self.previous)\n        if delim and self.previous is not None:\n            self.delimiters[id(self.previous)] = delim\n        else:\n            delim = is_split_after_delimiter(leaf, self.previous)\n            if delim:\n                self.delimiters[id(leaf)] = delim\n    if leaf.type in OPENING_BRACKETS:\n        self.bracket_match[self.depth, BRACKET[leaf.type]] = leaf\n        self.depth += 1\n    self.previous = leaf\n    self.maybe_increment_lambda_arguments(leaf)\n    self.maybe_increment_for_loop_variable(leaf)",
                "def any_open_brackets(self) -> bool:\n    \"\"\"Return True if there is an yet unmatched open bracket on the line.\"\"\"\n    return bool(self.bracket_match)",
                "def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> int:\n    \"\"\"Return the highest priority of a delimiter found on the line.\n\n    Values are consistent with what `is_split_*_delimiter()` return.\n    Raises ValueError on no delimiters.\n    \"\"\"\n    return max(v for k, v in self.delimiters.items() if k not in exclude)",
                "def delimiter_count_with_priority(self, priority: int = 0) -> int:\n    \"\"\"Return the number of delimiters with the given `priority`.\n\n    If no `priority` is passed, defaults to max priority on the line.\n    \"\"\"\n    if not self.delimiters:\n        return 0\n\n    priority = priority or self.max_delimiter_priority()\n    return sum(1 for p in self.delimiters.values() if p == priority)",
                "def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"In a for loop, or comprehension, the variables are often unpacks.\n\n    To avoid splitting on the comma in this situation, increase the depth of\n    tokens between `for` and `in`.\n    \"\"\"\n    if leaf.type == token.NAME and leaf.value == \"for\":\n        self.depth += 1\n        self._for_loop_depths.append(self.depth)\n        return True\n\n    return False",
                "def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:\n    \"\"\"See `maybe_increment_for_loop_variable` above for explanation.\"\"\"\n    if (\n        self._for_loop_depths\n        and self._for_loop_depths[-1] == self.depth\n        and leaf.type == token.NAME\n        and leaf.value == \"in\"\n    ):\n        self.depth -= 1\n        self._for_loop_depths.pop()\n        return True\n\n    return False",
                "def maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool:\n    \"\"\"In a lambda expression, there might be more than one argument.\n\n    To avoid splitting on the comma in this situation, increase the depth of\n    tokens between `lambda` and `:`.\n    \"\"\"\n    if leaf.type == token.NAME and leaf.value == \"lambda\":\n        self.depth += 1\n        self._lambda_argument_depths.append(self.depth)\n        return True\n\n    return False",
                "def maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool:\n    \"\"\"See `maybe_increment_lambda_arguments` above for explanation.\"\"\"\n    if (\n        self._lambda_argument_depths\n        and self._lambda_argument_depths[-1] == self.depth\n        and leaf.type == token.COLON\n    ):\n        self.depth -= 1\n        self._lambda_argument_depths.pop()\n        return True\n\n    return False",
                "def get_open_lsqb(self) -> Optional[Leaf]:\n    \"\"\"Return the most recent opening square bracket (if any).\"\"\"\n    return self.bracket_match.get((self.depth - 1, token.RSQB))",
                "def append(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Add a new `leaf` to the end of the line.\n\n    Unless `preformatted` is True, the `leaf` will receive a new consistent\n    whitespace prefix and metadata applied by :class:`BracketTracker`.\n    Trailing commas are maybe removed, unpacked for loop variables are\n    demoted from being delimiters.\n\n    Inline comments are put aside.\n    \"\"\"\n    has_value = leaf.type in BRACKETS or bool(leaf.value.strip())\n    if not has_value:\n        return\n\n    if token.COLON == leaf.type and self.is_class_paren_empty:\n        del self.leaves[-2:]\n    if self.leaves and not preformatted:\n        # Note: at this point leaf.prefix should be empty except for\n        # imports, for which we only preserve newlines.\n        leaf.prefix += whitespace(\n            leaf, complex_subscript=self.is_complex_subscript(leaf)\n        )\n    if self.inside_brackets or not preformatted:\n        self.bracket_tracker.mark(leaf)\n        self.maybe_remove_trailing_comma(leaf)\n    if not self.append_comment(leaf):\n        self.leaves.append(leaf)",
                "def append_safe(self, leaf: Leaf, preformatted: bool = False) -> None:\n    \"\"\"Like :func:`append()` but disallow invalid standalone comment structure.\n\n    Raises ValueError when any `leaf` is appended after a standalone comment\n    or when a standalone comment is not the first leaf on the line.\n    \"\"\"\n    if self.bracket_tracker.depth == 0:\n        if self.is_comment:\n            raise ValueError(\"cannot append to standalone comments\")\n\n        if self.leaves and leaf.type == STANDALONE_COMMENT:\n            raise ValueError(\n                \"cannot append standalone comments to a populated line\"\n            )\n\n    self.append(leaf, preformatted=preformatted)",
                "@property\ndef is_comment(self) -> bool:\n    \"\"\"Is this line a standalone comment?\"\"\"\n    return len(self.leaves) == 1 and self.leaves[0].type == STANDALONE_COMMENT",
                "@property\ndef is_decorator(self) -> bool:\n    \"\"\"Is this line a decorator?\"\"\"\n    return bool(self) and self.leaves[0].type == token.AT",
                "@property\ndef is_import(self) -> bool:\n    \"\"\"Is this an import line?\"\"\"\n    return bool(self) and is_import(self.leaves[0])",
                "@property\ndef is_class(self) -> bool:\n    \"\"\"Is this line a class definition?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.NAME\n        and self.leaves[0].value == \"class\"\n    )",
                "@property\ndef is_stub_class(self) -> bool:\n    \"\"\"Is this line a class definition with a body consisting only of \"...\"?\"\"\"\n    return self.is_class and self.leaves[-3:] == [\n        Leaf(token.DOT, \".\") for _ in range(3)\n    ]",
                "@property\ndef is_def(self) -> bool:\n    \"\"\"Is this a function definition? (Also returns True for async defs.)\"\"\"\n    try:\n        first_leaf = self.leaves[0]\n    except IndexError:\n        return False\n\n    try:\n        second_leaf: Optional[Leaf] = self.leaves[1]\n    except IndexError:\n        second_leaf = None\n    return (first_leaf.type == token.NAME and first_leaf.value == \"def\") or (\n        first_leaf.type == token.ASYNC\n        and second_leaf is not None\n        and second_leaf.type == token.NAME\n        and second_leaf.value == \"def\"\n    )",
                "@property\ndef is_class_paren_empty(self) -> bool:\n    \"\"\"Is this a class with no base classes but using parentheses?\n\n    Those are unnecessary and should be removed.\n    \"\"\"\n    return (\n        bool(self)\n        and len(self.leaves) == 4\n        and self.is_class\n        and self.leaves[2].type == token.LPAR\n        and self.leaves[2].value == \"(\"\n        and self.leaves[3].type == token.RPAR\n        and self.leaves[3].value == \")\"\n    )",
                "@property\ndef is_triple_quoted_string(self) -> bool:\n    \"\"\"Is the line a triple quoted string?\"\"\"\n    return (\n        bool(self)\n        and self.leaves[0].type == token.STRING\n        and self.leaves[0].value.startswith(('\"\"\"', \"'''\"))\n    )",
                "def contains_standalone_comments(self, depth_limit: int = sys.maxsize) -> bool:\n    \"\"\"If so, needs to be split before emitting.\"\"\"\n    for leaf in self.leaves:\n        if leaf.type == STANDALONE_COMMENT:\n            if leaf.bracket_depth <= depth_limit:\n                return True\n\n    return False",
                "def contains_multiline_strings(self) -> bool:\n    for leaf in self.leaves:\n        if is_multiline_string(leaf):\n            return True\n\n    return False",
                "def maybe_remove_trailing_comma(self, closing: Leaf) -> bool:\n    \"\"\"Remove trailing comma if there is one and it's safe.\"\"\"\n    if not (\n        self.leaves\n        and self.leaves[-1].type == token.COMMA\n        and closing.type in CLOSING_BRACKETS\n    ):\n        return False\n\n    if closing.type == token.RBRACE:\n        self.remove_trailing_comma()\n        return True\n\n    if closing.type == token.RSQB:\n        comma = self.leaves[-1]\n        if comma.parent and comma.parent.type == syms.listmaker:\n            self.remove_trailing_comma()\n            return True\n\n    # For parens let's check if it's safe to remove the comma.\n    # Imports are always safe.\n    if self.is_import:\n        self.remove_trailing_comma()\n        return True\n\n    # Otherwise, if the trailing one is the only one, we might mistakenly\n    # change a tuple into a different type by removing the comma.\n    depth = closing.bracket_depth + 1\n    commas = 0\n    opening = closing.opening_bracket\n    for _opening_index, leaf in enumerate(self.leaves):\n        if leaf is opening:\n            break\n\n    else:\n        return False\n\n    for leaf in self.leaves[_opening_index + 1 :]:\n        if leaf is closing:\n            break\n\n        bracket_depth = leaf.bracket_depth\n        if bracket_depth == depth and leaf.type == token.COMMA:\n            commas += 1\n            if leaf.parent and leaf.parent.type == syms.arglist:\n                commas += 1\n                break\n\n    if commas > 1:\n        self.remove_trailing_comma()\n        return True\n\n    return False",
                "def append_comment(self, comment: Leaf) -> bool:\n    \"\"\"Add an inline or standalone comment to the line.\"\"\"\n    if (\n        comment.type == STANDALONE_COMMENT\n        and self.bracket_tracker.any_open_brackets()\n    ):\n        comment.prefix = \"\"\n        return False\n\n    if comment.type != token.COMMENT:\n        return False\n\n    if not self.leaves:\n        comment.type = STANDALONE_COMMENT\n        comment.prefix = \"\"\n        return False\n\n    else:\n        leaf_id = id(self.leaves[-1])\n        if leaf_id not in self.comments:\n            self.comments[leaf_id] = [comment]\n        else:\n            self.comments[leaf_id].append(comment)\n        return True",
                "def comments_after(self, leaf: Leaf) -> List[Leaf]:\n    \"\"\"Generate comments that should appear directly after `leaf`.\"\"\"\n    return self.comments.get(id(leaf), [])",
                "def remove_trailing_comma(self) -> None:\n    \"\"\"Remove the trailing comma and moves the comments attached to it.\"\"\"\n    # Remember, the LeafID keys of self.comments are ordered by the\n    # corresponding leaf's index in self.leaves\n    # If id(self.leaves[-2]) is in self.comments, the order doesn't change.\n    # Otherwise, we insert it into self.comments, and it becomes the last entry.\n    # However, since we delete id(self.leaves[-1]) from self.comments, the invariant\n    # is maintained\n    self.comments.setdefault(id(self.leaves[-2]), []).extend(\n        self.comments.get(id(self.leaves[-1]), [])\n    )\n    self.comments.pop(id(self.leaves[-1]), None)\n    self.leaves.pop()",
                "def is_complex_subscript(self, leaf: Leaf) -> bool:\n    \"\"\"Return True iff `leaf` is part of a slice with non-trivial exprs.\"\"\"\n    open_lsqb = self.bracket_tracker.get_open_lsqb()\n    if open_lsqb is None:\n        return False\n\n    subscript_start = open_lsqb.next_sibling\n\n    if isinstance(subscript_start, Node):\n        if subscript_start.type == syms.listmaker:\n            return False\n\n        if subscript_start.type == syms.subscriptlist:\n            subscript_start = child_towards(subscript_start, leaf)\n    return subscript_start is not None and any(\n        n.type in TEST_DESCENDANTS for n in subscript_start.pre_order()\n    )",
                "def __str__(self) -> str:\n    \"\"\"Render the line.\"\"\"\n    if not self:\n        return \"\\n\"\n\n    indent = \"    \" * self.depth\n    leaves = iter(self.leaves)\n    first = next(leaves)\n    res = f\"{first.prefix}{indent}{first.value}\"\n    for leaf in leaves:\n        res += str(leaf)\n    for comment in itertools.chain.from_iterable(self.comments.values()):\n        res += str(comment)\n    return res + \"\\n\"",
                "def __bool__(self) -> bool:\n    \"\"\"Return True if the line has leaves or comments.\"\"\"\n    return bool(self.leaves or self.comments)",
                "def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    \"\"\"Return the number of extra empty lines before and after the `current_line`.\n\n    This is for separating `def`, `async def` and `class` with extra empty\n    lines (two on module-level).\n    \"\"\"\n    before, after = self._maybe_empty_lines(current_line)\n    before -= self.previous_after\n    self.previous_after = after\n    self.previous_line = current_line\n    return before, after",
                "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 1 if self.is_pyi else 2\n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    depth = current_line.depth\n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        if self.is_pyi:\n            before = 0 if depth else 1\n        else:\n            before = 1 if depth else 2\n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        return self._maybe_empty_lines_for_class_or_def(current_line, before)\n\n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and depth == self.previous_line.depth\n    ):\n        return (before or 1), 0\n\n    if (\n        self.previous_line\n        and self.previous_line.is_class\n        and current_line.is_triple_quoted_string\n    ):\n        return before, 1\n\n    return before, 0",
                "def _maybe_empty_lines_for_class_or_def(\n    self, current_line: Line, before: int\n) -> Tuple[int, int]:\n    if not current_line.is_decorator:\n        self.previous_defs.append(current_line.depth)\n    if self.previous_line is None:\n        # Don't insert empty lines before the first line in the file.\n        return 0, 0\n\n    if self.previous_line.is_decorator:\n        return 0, 0\n\n    if self.previous_line.depth < current_line.depth and (\n        self.previous_line.is_class or self.previous_line.is_def\n    ):\n        return 0, 0\n\n    if (\n        self.previous_line.is_comment\n        and self.previous_line.depth == current_line.depth\n        and before == 0\n    ):\n        return 0, 0\n\n    if self.is_pyi:\n        if self.previous_line.depth > current_line.depth:\n            newlines = 1\n        elif current_line.is_class or self.previous_line.is_class:\n            if current_line.is_stub_class and self.previous_line.is_stub_class:\n                # No blank line between classes with an empty body\n                newlines = 0\n            else:\n                newlines = 1\n        elif current_line.is_def and not self.previous_line.is_def:\n            # Blank line between a block of functions and a block of non-functions\n            newlines = 1\n        else:\n            newlines = 0\n    else:\n        newlines = 2\n    if current_line.depth and newlines:\n        newlines -= 1\n    return newlines, 0",
                "def line(self, indent: int = 0) -> Iterator[Line]:\n    \"\"\"Generate a line.\n\n    If the line is empty, only emit if it makes sense.\n    If the line is too long, split it first and then generate.\n\n    If any lines were generated, set up a new current_line.\n    \"\"\"\n    if not self.current_line:\n        self.current_line.depth += indent\n        return  # Line is empty, don't emit. Creating a new one unnecessary.\n\n    complete_line = self.current_line\n    self.current_line = Line(depth=complete_line.depth + indent)\n    yield complete_line",
                "def visit_default(self, node: LN) -> Iterator[Line]:\n    \"\"\"Default `visit_*()` implementation. Recurses to children of `node`.\"\"\"\n    if isinstance(node, Leaf):\n        any_open_brackets = self.current_line.bracket_tracker.any_open_brackets()\n        for comment in generate_comments(node):\n            if any_open_brackets:\n                # any comment within brackets is subject to splitting\n                self.current_line.append(comment)\n            elif comment.type == token.COMMENT:\n                # regular trailing comment\n                self.current_line.append(comment)\n                yield from self.line()\n\n            else:\n                # regular standalone comment\n                yield from self.line()\n\n                self.current_line.append(comment)\n                yield from self.line()\n\n        normalize_prefix(node, inside_brackets=any_open_brackets)\n        if self.normalize_strings and node.type == token.STRING:\n            normalize_string_prefix(node, remove_u_prefix=self.remove_u_prefix)\n            normalize_string_quotes(node)\n        if node.type == token.NUMBER:\n            normalize_numeric_literal(node, self.allow_underscores)\n        if node.type not in WHITESPACE:\n            self.current_line.append(node)\n    yield from super().visit_default(node)",
                "def visit_INDENT(self, node: Node) -> Iterator[Line]:\n    \"\"\"Increase indentation level, maybe yield a line.\"\"\"\n    # In blib2to3 INDENT never holds comments.\n    yield from self.line(+1)\n    yield from self.visit_default(node)",
                "def visit_DEDENT(self, node: Node) -> Iterator[Line]:\n    \"\"\"Decrease indentation level, maybe yield a line.\"\"\"\n    # The current line might still wait for trailing comments.  At DEDENT time\n    # there won't be any (they would be prefixes on the preceding NEWLINE).\n    # Emit the line then.\n    yield from self.line()\n\n    # While DEDENT has no value, its prefix may contain standalone comments\n    # that belong to the current indentation level.  Get 'em.\n    yield from self.visit_default(node)\n\n    # Finally, emit the dedent.\n    yield from self.line(-1)",
                "def visit_stmt(\n    self, node: Node, keywords: Set[str], parens: Set[str]\n) -> Iterator[Line]:\n    \"\"\"Visit a statement.\n\n    This implementation is shared for `if`, `while`, `for`, `try`, `except`,\n    `def`, `with`, `class`, `assert` and assignments.\n\n    The relevant Python language `keywords` for a given statement will be\n    NAME leaves within it. This methods puts those on a separate line.\n\n    `parens` holds a set of string leaf values immediately after which\n    invisible parens should be put.\n    \"\"\"\n    normalize_invisible_parens(node, parens_after=parens)\n    for child in node.children:\n        if child.type == token.NAME and child.value in keywords:  # type: ignore\n            yield from self.line()\n\n        yield from self.visit(child)",
                "def visit_suite(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit a suite.\"\"\"\n    if self.is_pyi and is_stub_suite(node):\n        yield from self.visit(node.children[2])\n    else:\n        yield from self.visit_default(node)",
                "def visit_simple_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit a statement without nested statements.\"\"\"\n    is_suite_like = node.parent and node.parent.type in STATEMENT\n    if is_suite_like:\n        if self.is_pyi and is_stub_body(node):\n            yield from self.visit_default(node)\n        else:\n            yield from self.line(+1)\n            yield from self.visit_default(node)\n            yield from self.line(-1)\n\n    else:\n        if not self.is_pyi or not node.parent or not is_stub_suite(node.parent):\n            yield from self.line()\n        yield from self.visit_default(node)",
                "def visit_async_stmt(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit `async def`, `async for`, `async with`.\"\"\"\n    yield from self.line()\n\n    children = iter(node.children)\n    for child in children:\n        yield from self.visit(child)\n\n        if child.type == token.ASYNC:\n            break\n\n    internal_stmt = next(children)\n    for child in internal_stmt.children:\n        yield from self.visit(child)",
                "def visit_decorators(self, node: Node) -> Iterator[Line]:\n    \"\"\"Visit decorators.\"\"\"\n    for child in node.children:\n        yield from self.line()\n        yield from self.visit(child)",
                "def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Remove a semicolon and put the other statement on a separate line.\"\"\"\n    yield from self.line()",
                "def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:\n    \"\"\"End of file. Process outstanding comments and end with a newline.\"\"\"\n    yield from self.visit_default(leaf)\n    yield from self.line()",
                "def visit_STANDALONE_COMMENT(self, leaf: Leaf) -> Iterator[Line]:\n    if not self.current_line.bracket_tracker.any_open_brackets():\n        yield from self.line()\n    yield from self.visit_default(leaf)",
                "def __attrs_post_init__(self) -> None:\n    \"\"\"You are in a twisty little maze of passages.\"\"\"\n    v = self.visit_stmt\n    \u00d8: Set[str] = set()\n    self.visit_assert_stmt = partial(v, keywords={\"assert\"}, parens={\"assert\", \",\"})\n    self.visit_if_stmt = partial(\n        v, keywords={\"if\", \"else\", \"elif\"}, parens={\"if\", \"elif\"}\n    )\n    self.visit_while_stmt = partial(v, keywords={\"while\", \"else\"}, parens={\"while\"})\n    self.visit_for_stmt = partial(v, keywords={\"for\", \"else\"}, parens={\"for\", \"in\"})\n    self.visit_try_stmt = partial(\n        v, keywords={\"try\", \"except\", \"else\", \"finally\"}, parens=\u00d8\n    )\n    self.visit_except_clause = partial(v, keywords={\"except\"}, parens=\u00d8)\n    self.visit_with_stmt = partial(v, keywords={\"with\"}, parens=\u00d8)\n    self.visit_funcdef = partial(v, keywords={\"def\"}, parens=\u00d8)\n    self.visit_classdef = partial(v, keywords={\"class\"}, parens=\u00d8)\n    self.visit_expr_stmt = partial(v, keywords=\u00d8, parens=ASSIGNMENTS)\n    self.visit_return_stmt = partial(v, keywords={\"return\"}, parens={\"return\"})\n    self.visit_import_from = partial(v, keywords=\u00d8, parens={\"import\"})\n    self.visit_async_funcdef = self.visit_async_stmt\n    self.visit_decorated = self.visit_decorators",
                "@wraps(split_func)\ndef split_wrapper(line: Line, py36: bool = False) -> Iterator[Line]:\n    for l in split_func(line, py36):\n        normalize_prefix(l.leaves[0], inside_brackets=True)\n        yield l",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def append_to_line(leaf: Leaf) -> Iterator[Line]:\n    \"\"\"Append `leaf` to current line or to new line if appending impossible.\"\"\"\n    nonlocal current_line\n    try:\n        current_line.append_safe(leaf, preformatted=True)\n    except ValueError:\n        yield current_line\n\n        current_line = Line(depth=line.depth, inside_brackets=line.inside_brackets)\n        current_line.append(leaf)",
                "def get_imports_from_children(children: List[LN]) -> Generator[str, None, None]:\n    for child in children:\n        if isinstance(child, Leaf):\n            if child.type == token.NAME:\n                yield child.value\n        elif child.type == syms.import_as_name:\n            orig_name = child.children[0]\n            assert isinstance(orig_name, Leaf), \"Invalid syntax parsing imports\"\n            assert orig_name.type == token.NAME, \"Invalid syntax parsing imports\"\n            yield orig_name.value\n        elif child.type == syms.import_as_names:\n            yield from get_imports_from_children(child.children)\n        else:\n            assert False, \"Invalid syntax parsing imports\"",
                "def done(self, src: Path, changed: Changed) -> None:\n    \"\"\"Increment the counter for successful reformatting. Write out a message.\"\"\"\n    if changed is Changed.YES:\n        reformatted = \"would reformat\" if self.check else \"reformatted\"\n        if self.verbose or not self.quiet:\n            out(f\"{reformatted} {src}\")\n        self.change_count += 1\n    else:\n        if self.verbose:\n            if changed is Changed.NO:\n                msg = f\"{src} already well formatted, good job.\"\n            else:\n                msg = f\"{src} wasn't modified on disk since last run.\"\n            out(msg, bold=False)\n        self.same_count += 1",
                "def failed(self, src: Path, message: str) -> None:\n    \"\"\"Increment the counter for failed reformatting. Write out a message.\"\"\"\n    err(f\"error: cannot format {src}: {message}\")\n    self.failure_count += 1",
                "def path_ignored(self, path: Path, message: str) -> None:\n    if self.verbose:\n        out(f\"{path} ignored: {message}\", bold=False)",
                "@property\ndef return_code(self) -> int:\n    \"\"\"Return the exit code that the app should use.\n\n    This considers the current state of changed files and failures:\n    - if there were any failures, return 123;\n    - if any files were changed and --check is being used, return 1;\n    - otherwise return 0.\n    \"\"\"\n    # According to http://tldp.org/LDP/abs/html/exitcodes.html starting with\n    # 126 we have special return codes reserved by the shell.\n    if self.failure_count:\n        return 123\n\n    elif self.change_count and self.check:\n        return 1\n\n    return 0",
                "def __str__(self) -> str:\n    \"\"\"Render a color report of the current state.\n\n    Use `click.unstyle` to remove colors.\n    \"\"\"\n    if self.check:\n        reformatted = \"would be reformatted\"\n        unchanged = \"would be left unchanged\"\n        failed = \"would fail to reformat\"\n    else:\n        reformatted = \"reformatted\"\n        unchanged = \"left unchanged\"\n        failed = \"failed to reformat\"\n    report = []\n    if self.change_count:\n        s = \"s\" if self.change_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.change_count} file{s} {reformatted}\", bold=True)\n        )\n    if self.same_count:\n        s = \"s\" if self.same_count > 1 else \"\"\n        report.append(f\"{self.same_count} file{s} {unchanged}\")\n    if self.failure_count:\n        s = \"s\" if self.failure_count > 1 else \"\"\n        report.append(\n            click.style(f\"{self.failure_count} file{s} {failed}\", fg=\"red\")\n        )\n    return \", \".join(report) + \".\"",
                "def _v(node: ast.AST, depth: int = 0) -> Iterator[str]:\n    \"\"\"Simple visitor generating strings to compare ASTs by content.\"\"\"\n    yield f\"{'  ' * depth}{node.__class__.__name__}(\"\n\n    for field in sorted(node._fields):\n        try:\n            value = getattr(node, field)\n        except AttributeError:\n            continue\n\n        yield f\"{'  ' * (depth+1)}{field}=\"\n\n        if isinstance(value, list):\n            for item in value:\n                if isinstance(item, ast.AST):\n                    yield from _v(item, depth + 2)\n\n        elif isinstance(value, ast.AST):\n            yield from _v(value, depth + 2)\n\n        else:\n            yield f\"{'  ' * (depth+2)}{value!r},  # {value.__class__.__name__}\"\n\n    yield f\"{'  ' * depth})  # /{node.__class__.__name__}\"",
                "def rhs(line: Line, py36: bool = False) -> Iterator[Line]:\n    for omit in generate_trailers_to_omit(line, line_length):\n        lines = list(right_hand_split(line, line_length, py36, omit=omit))\n        if is_line_short_enough(lines[0], line_length=line_length):\n            yield from lines\n            return\n\n    # All splits failed, best effort split with no omits.\n    # This mostly happens to multiline strings that are by definition\n    # reported as not fitting a single line.\n    yield from right_hand_split(line, py36)"
            ],
            "inscope_function_signatures": [
                "read_pyproject_toml(ctx: click.Context, param: click.Parameter, value: Union[str, int, bool, None]) -> Optional[str]",
                "main(ctx: click.Context, line_length: int, check: bool, diff: bool, fast: bool, pyi: bool, py36: bool, skip_string_normalization: bool, skip_numeric_underscore_normalization: bool, quiet: bool, verbose: bool, include: str, exclude: str, src: Tuple[str], config: Optional[str]) -> None",
                "reformat_one(src: Path, line_length: int, fast: bool, write_back: WriteBack, mode: FileMode, report: 'Report') -> None",
                "schedule_formatting(sources: Set[Path], line_length: int, fast: bool, write_back: WriteBack, mode: FileMode, report: 'Report', loop: BaseEventLoop, executor: Executor) -> None",
                "format_file_in_place(src: Path, line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, mode: FileMode=FileMode.AUTO_DETECT, lock: Any=None) -> bool",
                "format_stdin_to_stdout(line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, mode: FileMode=FileMode.AUTO_DETECT) -> bool",
                "format_file_contents(src_contents: str) -> FileContent",
                "format_str(src_contents: str, line_length: int) -> FileContent",
                "decode_bytes(src: bytes) -> Tuple[FileContent, Encoding, NewLine]",
                "lib2to3_parse(src_txt: str) -> Node",
                "lib2to3_unparse(node: Node) -> str",
                "whitespace(leaf: Leaf) -> str",
                "preceding_leaf(node: Optional[LN]) -> Optional[Leaf]",
                "child_towards(ancestor: Node, descendant: LN) -> Optional[LN]",
                "container_of(leaf: Leaf) -> LN",
                "is_split_after_delimiter(leaf: Leaf, previous: Optional[Leaf]=None) -> int",
                "is_split_before_delimiter(leaf: Leaf, previous: Optional[Leaf]=None) -> int",
                "generate_comments(leaf: LN) -> Iterator[Leaf]",
                "list_comments(prefix: str) -> List[ProtoComment]",
                "make_comment(content: str) -> str",
                "split_line(line: Line, line_length: int, inner: bool=False, py36: bool=False) -> Iterator[Line]",
                "left_hand_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "right_hand_split(line: Line, line_length: int, py36: bool=False, omit: Collection[LeafID]=()) -> Iterator[Line]",
                "bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None",
                "bracket_split_build_line(leaves: List[Leaf], original: Line, opening_bracket: Leaf) -> Line",
                "dont_increase_indentation(split_func: SplitFunc) -> SplitFunc",
                "delimiter_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "standalone_comment_split(line: Line, py36: bool=False) -> Iterator[Line]",
                "is_import(leaf: Leaf) -> bool",
                "normalize_prefix(leaf: Leaf) -> None",
                "normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool=False) -> None",
                "normalize_string_quotes(leaf: Leaf) -> None",
                "normalize_numeric_literal(leaf: Leaf, allow_underscores: bool) -> None",
                "format_float_or_int_string(text: str, allow_underscores: bool) -> str",
                "format_int_string(text: str, allow_underscores: bool, count_from_end: bool=True) -> str",
                "normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None",
                "normalize_fmt_off(node: Node) -> None",
                "convert_one_fmt_off_pair(node: Node) -> bool",
                "generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]",
                "maybe_make_parens_invisible_in_atom(node: LN) -> bool",
                "is_empty_tuple(node: LN) -> bool",
                "is_one_tuple(node: LN) -> bool",
                "is_yield(node: LN) -> bool",
                "is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool",
                "is_multiline_string(leaf: Leaf) -> bool",
                "is_stub_suite(node: Node) -> bool",
                "is_stub_body(node: LN) -> bool",
                "max_delimiter_priority_in_atom(node: LN) -> int",
                "ensure_visible(leaf: Leaf) -> None",
                "should_explode(line: Line, opening_bracket: Leaf) -> bool",
                "is_python36(node: Node) -> bool",
                "generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]",
                "get_future_imports(node: Node) -> Set[str]",
                "gen_python_files_in_dir(path: Path, root: Path, include: Pattern[str], exclude: Pattern[str], report: 'Report') -> Iterator[Path]",
                "find_project_root(srcs: Iterable[str]) -> Path",
                "assert_equivalent(src: str, dst: str) -> None",
                "assert_stable(src: str, dst: str, line_length: int, mode: FileMode=FileMode.AUTO_DETECT) -> None",
                "dump_to_file(*output: str) -> str",
                "diff(a: str, b: str, a_name: str, b_name: str) -> str",
                "cancel(tasks: Iterable[asyncio.Task]) -> None",
                "shutdown(loop: BaseEventLoop) -> None",
                "sub_twice(regex: Pattern[str], replacement: str, original: str) -> str",
                "re_compile_maybe_verbose(regex: str) -> Pattern[str]",
                "enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]",
                "enumerate_with_length(line: Line, reversed: bool=False) -> Iterator[Tuple[Index, Leaf, int]]",
                "is_line_short_enough(line: Line) -> bool",
                "can_be_split(line: Line) -> bool",
                "can_omit_invisible_parens(line: Line, line_length: int) -> bool",
                "get_cache_file(line_length: int, mode: FileMode) -> Path",
                "read_cache(line_length: int, mode: FileMode) -> Cache",
                "get_cache_info(path: Path) -> CacheInfo",
                "filter_cached(cache: Cache, sources: Iterable[Path]) -> Tuple[Set[Path], Set[Path]]",
                "write_cache(cache: Cache, sources: Iterable[Path], line_length: int, mode: FileMode) -> None",
                "patch_click() -> None",
                "patched_main() -> None",
                "from_configuration(cls) -> 'WriteBack'",
                "from_configuration(cls) -> 'FileMode'",
                "visit(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "visit_default(self, node: LN) -> Iterator[T]",
                "show(cls, code: Union[str, Leaf, Node]) -> None",
                "mark(self, leaf: Leaf) -> None",
                "any_open_brackets(self) -> bool",
                "max_delimiter_priority(self, exclude: Iterable[LeafID]=()) -> int",
                "delimiter_count_with_priority(self, priority: int=0) -> int",
                "maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool",
                "maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool",
                "maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool",
                "get_open_lsqb(self) -> Optional[Leaf]",
                "append(self, leaf: Leaf, preformatted: bool=False) -> None",
                "append_safe(self, leaf: Leaf, preformatted: bool=False) -> None",
                "is_comment(self) -> bool",
                "is_decorator(self) -> bool",
                "is_import(self) -> bool",
                "is_class(self) -> bool",
                "is_stub_class(self) -> bool",
                "is_def(self) -> bool",
                "is_class_paren_empty(self) -> bool",
                "is_triple_quoted_string(self) -> bool",
                "contains_standalone_comments(self, depth_limit: int=sys.maxsize) -> bool",
                "contains_multiline_strings(self) -> bool",
                "maybe_remove_trailing_comma(self, closing: Leaf) -> bool",
                "append_comment(self, comment: Leaf) -> bool",
                "comments_after(self, leaf: Leaf) -> List[Leaf]",
                "remove_trailing_comma(self) -> None",
                "is_complex_subscript(self, leaf: Leaf) -> bool",
                "__str__(self) -> str",
                "__bool__(self) -> bool",
                "maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "_maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]",
                "_maybe_empty_lines_for_class_or_def(self, current_line: Line, before: int) -> Tuple[int, int]",
                "line(self, indent: int=0) -> Iterator[Line]",
                "visit_default(self, node: LN) -> Iterator[Line]",
                "visit_INDENT(self, node: Node) -> Iterator[Line]",
                "visit_DEDENT(self, node: Node) -> Iterator[Line]",
                "visit_stmt(self, node: Node, keywords: Set[str], parens: Set[str]) -> Iterator[Line]",
                "visit_suite(self, node: Node) -> Iterator[Line]",
                "visit_simple_stmt(self, node: Node) -> Iterator[Line]",
                "visit_async_stmt(self, node: Node) -> Iterator[Line]",
                "visit_decorators(self, node: Node) -> Iterator[Line]",
                "visit_SEMI(self, leaf: Leaf) -> Iterator[Line]",
                "visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]",
                "visit_STANDALONE_COMMENT(self, leaf: Leaf) -> Iterator[Line]",
                "__attrs_post_init__(self) -> None",
                "split_wrapper(line: Line, py36: bool=False) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "append_to_line(leaf: Leaf) -> Iterator[Line]",
                "get_imports_from_children(children: List[LN]) -> Generator[str, None, None]",
                "done(self, src: Path, changed: Changed) -> None",
                "failed(self, src: Path, message: str) -> None",
                "path_ignored(self, path: Path, message: str) -> None",
                "return_code(self) -> int",
                "__str__(self) -> str",
                "_v(node: ast.AST, depth: int=0) -> Iterator[str]",
                "rhs(line: Line, py36: bool=False) -> Iterator[Line]"
            ],
            "variables_in_file": {
                "__version__": [
                    57,
                    51,
                    278
                ],
                "DEFAULT_LINE_LENGTH": [
                    52,
                    183
                ],
                "DEFAULT_EXCLUDES": [
                    251,
                    53
                ],
                "DEFAULT_INCLUDES": [
                    56,
                    238
                ],
                "CACHE_DIR": [
                    78,
                    3631,
                    3632,
                    57,
                    3582
                ],
                "Path": [
                    388,
                    3204,
                    3603,
                    3609,
                    3100,
                    3101,
                    3105,
                    3626,
                    433,
                    57,
                    3143,
                    74,
                    336,
                    3153,
                    338,
                    3155,
                    3183,
                    3581,
                    510,
                    3199
                ],
                "user_cache_dir": [
                    57
                ],
                "FileContent": [
                    626,
                    659,
                    604,
                    61
                ],
                "str": [
                    2048,
                    769,
                    3204,
                    775,
                    1289,
                    650,
                    3338,
                    653,
                    143,
                    144,
                    655,
                    403,
                    1299,
                    1301,
                    3352,
                    155,
                    3227,
                    2078,
                    3102,
                    3103,
                    2042,
                    2728,
                    683,
                    2603,
                    429,
                    1582,
                    309,
                    310,
                    311,
                    312,
                    3257,
                    2618,
                    2619,
                    61,
                    62,
                    63,
                    3263,
                    3392,
                    2114,
                    3448,
                    709,
                    711,
                    3143,
                    3401,
                    1611,
                    2643,
                    599,
                    1501,
                    3199,
                    2149,
                    237,
                    493,
                    3056,
                    625,
                    3058,
                    3442,
                    3060,
                    2549,
                    760,
                    3321,
                    250,
                    2302,
                    383
                ],
                "Encoding": [
                    659,
                    62
                ],
                "NewLine": [
                    659,
                    63
                ],
                "Depth": [
                    64,
                    898
                ],
                "int": [
                    897,
                    3585,
                    389,
                    901,
                    902,
                    1029,
                    1158,
                    3209,
                    143,
                    150,
                    1434,
                    2203,
                    3492,
                    1321,
                    1322,
                    299,
                    1324,
                    3626,
                    434,
                    562,
                    948,
                    2098,
                    182,
                    1336,
                    956,
                    3006,
                    3263,
                    64,
                    65,
                    66,
                    67,
                    68,
                    3321,
                    72,
                    2638,
                    601,
                    3421,
                    1376,
                    1377,
                    2912,
                    1892,
                    746,
                    3179,
                    3180,
                    3181,
                    625,
                    1906,
                    3442,
                    2041,
                    2043,
                    2044,
                    3581,
                    511
                ],
                "NodeType": [
                    65,
                    898,
                    2854
                ],
                "LeafID": [
                    66,
                    899,
                    3016,
                    1033,
                    3022,
                    948,
                    2203,
                    3006
                ],
                "Priority": [
                    67,
                    899
                ],
                "Index": [
                    3427,
                    3411,
                    68,
                    3421
                ],
                "LN": [
                    2833,
                    1450,
                    1841,
                    1859,
                    2756,
                    69,
                    1861,
                    2761,
                    1867,
                    2896,
                    721,
                    1873,
                    2772,
                    2006,
                    2912,
                    737,
                    748,
                    2800,
                    3060,
                    2810
                ],
                "Union": [
                    769,
                    69,
                    143
                ],
                "Leaf": [
                    2688,
                    769,
                    898,
                    900,
                    2692,
                    1030,
                    2566,
                    904,
                    1033,
                    2952,
                    2315,
                    3079,
                    1038,
                    2451,
                    3091,
                    1174,
                    2332,
                    1565,
                    1569,
                    1954,
                    2465,
                    2213,
                    1574,
                    2214,
                    2215,
                    2854,
                    1066,
                    1452,
                    1841,
                    2483,
                    1846,
                    2743,
                    2877,
                    704,
                    2430,
                    2499,
                    2756,
                    69,
                    2685,
                    967,
                    2940,
                    1611,
                    1228,
                    1867,
                    2687,
                    2384,
                    980,
                    2006,
                    1111,
                    2908,
                    3421,
                    994,
                    1123,
                    1892,
                    1253,
                    2662,
                    2663,
                    3427,
                    2026,
                    3435,
                    2668,
                    2669,
                    1007,
                    2928,
                    1906,
                    2418,
                    3062,
                    1271,
                    2681,
                    2682,
                    3067,
                    1020,
                    2173,
                    2174,
                    2175
                ],
                "Node": [
                    769,
                    2690,
                    2695,
                    1544,
                    2702,
                    1559,
                    2971,
                    683,
                    705,
                    1859,
                    2883,
                    709,
                    69,
                    1480,
                    1486,
                    2898,
                    2643,
                    1501,
                    739,
                    2665,
                    750,
                    2671,
                    3056,
                    1521,
                    1528,
                    1279
                ],
                "SplitFunc": [
                    2121,
                    70,
                    2343
                ],
                "Callable": [
                    3427,
                    70
                ],
                "bool": [
                    512,
                    2048,
                    516,
                    2566,
                    1035,
                    1036,
                    1038,
                    1048,
                    1066,
                    2603,
                    2098,
                    563,
                    566,
                    2618,
                    1084,
                    1089,
                    1091,
                    70,
                    1094,
                    1096,
                    1099,
                    1611,
                    1102,
                    2126,
                    1108,
                    602,
                    1115,
                    101,
                    3176,
                    3177,
                    3178,
                    1134,
                    1140,
                    2166,
                    634,
                    635,
                    636,
                    125,
                    1150,
                    126,
                    128,
                    1153,
                    127,
                    643,
                    1158,
                    2702,
                    143,
                    1167,
                    150,
                    1174,
                    2203,
                    1228,
                    2772,
                    2800,
                    1271,
                    2810,
                    2315,
                    2833,
                    1304,
                    1306,
                    2854,
                    1319,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    2350,
                    2359,
                    2877,
                    2883,
                    2896,
                    3420,
                    3442,
                    2423,
                    3456,
                    390,
                    2952,
                    2451,
                    1428,
                    1429,
                    1431,
                    1432,
                    2456,
                    2971,
                    2465,
                    3492,
                    944,
                    946,
                    435,
                    2483,
                    967,
                    980,
                    994,
                    1007
                ],
                "Iterator": [
                    1544,
                    1559,
                    1434,
                    2204,
                    1565,
                    1569,
                    3105,
                    1574,
                    1450,
                    2350,
                    2099,
                    2359,
                    3006,
                    3263,
                    2756,
                    70,
                    1480,
                    1486,
                    2126,
                    2384,
                    721,
                    3411,
                    2006,
                    3421,
                    1502,
                    737,
                    3427,
                    748,
                    1521,
                    2166,
                    2423,
                    1528,
                    2430
                ],
                "Timestamp": [
                    73,
                    71
                ],
                "float": [
                    71
                ],
                "FileSize": [
                    72,
                    73
                ],
                "CacheInfo": [
                    73,
                    74,
                    3603
                ],
                "Tuple": [
                    1377,
                    898,
                    3427,
                    73,
                    1324,
                    659,
                    3411,
                    311,
                    1336,
                    3609,
                    3421
                ],
                "Cache": [
                    449,
                    3585,
                    74,
                    3626,
                    3596,
                    3609,
                    409
                ],
                "Dict": [
                    1033,
                    74,
                    899,
                    898
                ],
                "out": [
                    350,
                    323,
                    3206,
                    75,
                    766,
                    752,
                    3188,
                    758,
                    761,
                    3196,
                    765,
                    382
                ],
                "partial": [
                    75,
                    76,
                    1583,
                    1584,
                    1587,
                    1588,
                    1589,
                    1592,
                    1593,
                    1594,
                    1595,
                    1596,
                    1597,
                    1598
                ],
                "click.secho": [
                    75,
                    76,
                    383
                ],
                "click": [
                    260,
                    269,
                    143,
                    278,
                    279,
                    282,
                    287,
                    289,
                    163,
                    296,
                    298,
                    3244,
                    178,
                    179,
                    3252,
                    187,
                    196,
                    75,
                    76,
                    204,
                    210,
                    216,
                    225,
                    230,
                    235,
                    248,
                    383
                ],
                "err": [
                    3201,
                    3365,
                    327,
                    76,
                    332,
                    347
                ],
                "pygram.initialize": [
                    78
                ],
                "pygram": [
                    677,
                    678,
                    679,
                    78,
                    79
                ],
                "syms": [
                    3076,
                    3089,
                    1603,
                    79,
                    1631,
                    1632,
                    1633,
                    2660,
                    2665,
                    2671,
                    2672,
                    1655,
                    1656,
                    1657,
                    1658,
                    1662,
                    2690,
                    1673,
                    1678,
                    1686,
                    1697,
                    1189,
                    1702,
                    1707,
                    1713,
                    1724,
                    705,
                    1218,
                    1731,
                    1748,
                    2779,
                    1761,
                    1765,
                    1773,
                    2803,
                    1780,
                    1784,
                    2812,
                    1280,
                    1792,
                    1283,
                    2819,
                    1797,
                    1802,
                    784,
                    785,
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    1812,
                    1813,
                    1817,
                    2835,
                    2841,
                    1823,
                    1835,
                    2866,
                    822,
                    823,
                    824,
                    825,
                    826,
                    829,
                    830,
                    831,
                    832,
                    833,
                    836,
                    837,
                    838,
                    839,
                    840,
                    841,
                    842,
                    843,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    2898,
                    1882,
                    2906,
                    2918,
                    1922,
                    1930,
                    2956,
                    2459,
                    2460,
                    1950,
                    1962,
                    1966,
                    2990,
                    2998,
                    1975,
                    1987,
                    3554,
                    3065,
                    3070
                ],
                "pygram.python_symbols": [
                    79
                ],
                "UserWarning": [
                    82
                ],
                "Exception": [
                    3300,
                    3290,
                    428,
                    86
                ],
                "ValueError": [
                    2435,
                    2373,
                    3117,
                    1074,
                    2389,
                    1077,
                    2965,
                    2936,
                    90
                ],
                "Enum": [
                    108,
                    94
                ],
                "NO": [
                    1795,
                    1670,
                    1800,
                    1674,
                    1807,
                    1681,
                    1815,
                    1818,
                    1692,
                    1821,
                    1695,
                    1826,
                    1700,
                    1705,
                    1833,
                    1836,
                    1710,
                    1714,
                    1722,
                    1729,
                    1734,
                    1740,
                    1743,
                    1617,
                    1746,
                    1751,
                    1624,
                    1756,
                    95,
                    1759,
                    1635,
                    1763,
                    1767,
                    1641,
                    1771,
                    109,
                    1645,
                    1775,
                    1648,
                    1778,
                    1787,
                    1660,
                    1790
                ],
                "YES": [
                    96,
                    111
                ],
                "DIFF": [
                    97
                ],
                "CHECK": [
                    98
                ],
                "check": [
                    3176,
                    334,
                    315,
                    102
                ],
                "diff": [
                    3328,
                    3327,
                    102,
                    105,
                    3311,
                    594,
                    315,
                    543
                ],
                "cls.CHECK": [
                    103
                ],
                "cls": [
                    130,
                    132,
                    134,
                    103,
                    136,
                    105,
                    138
                ],
                "cls.DIFF": [
                    105
                ],
                "cls.YES": [
                    105
                ],
                "classmethod": [
                    768,
                    121,
                    100
                ],
                "CACHED": [
                    110
                ],
                "Flag": [
                    114
                ],
                "AUTO_DETECT": [
                    115
                ],
                "PYTHON36": [
                    116
                ],
                "PYI": [
                    117
                ],
                "NO_STRING_NORMALIZATION": [
                    118
                ],
                "NO_NUMERIC_UNDERSCORE_NORMALIZATION": [
                    119
                ],
                "mode": [
                    130,
                    643,
                    132,
                    134,
                    3590,
                    136,
                    138,
                    139,
                    524,
                    531,
                    405,
                    411,
                    420,
                    426,
                    3629,
                    316,
                    578,
                    451,
                    3324,
                    474,
                    614,
                    359,
                    620,
                    372,
                    634,
                    506,
                    635,
                    636,
                    3582
                ],
                "cls.AUTO_DETECT": [
                    130
                ],
                "py36": [
                    642,
                    131,
                    2148,
                    2405,
                    2153,
                    654,
                    2351,
                    2128,
                    2261,
                    2136,
                    635,
                    317,
                    639
                ],
                "cls.PYTHON36": [
                    132
                ],
                "pyi": [
                    133,
                    318
                ],
                "cls.PYI": [
                    134
                ],
                "skip_string_normalization": [
                    319,
                    135
                ],
                "cls.NO_STRING_NORMALIZATION": [
                    136
                ],
                "skip_numeric_underscore_normalization": [
                    320,
                    137
                ],
                "cls.NO_NUMERIC_UNDERSCORE_NORMALIZATION": [
                    138
                ],
                "click.Context": [
                    298,
                    143
                ],
                "click.Parameter": [
                    143
                ],
                "isinstance": [
                    2692,
                    775,
                    3079,
                    3091,
                    150,
                    1954,
                    1452,
                    1846,
                    704,
                    3275,
                    3277,
                    3280,
                    2898,
                    739,
                    750,
                    2928,
                    3062,
                    3067,
                    2685,
                    1279
                ],
                "value": [
                    1155,
                    1146,
                    150,
                    151,
                    155,
                    160,
                    164,
                    175,
                    2879,
                    2880,
                    3269,
                    2507,
                    2508,
                    3275,
                    3276,
                    2511,
                    1104,
                    3280,
                    2514,
                    3281,
                    3284,
                    2678,
                    1144,
                    2042
                ],
                "root": [
                    3113,
                    3116,
                    335,
                    3120,
                    341,
                    152,
                    153,
                    3134
                ],
                "find_project_root": [
                    152,
                    335
                ],
                "ctx.params.get": [
                    152
                ],
                "ctx.params": [
                    152
                ],
                "ctx": [
                    384,
                    328,
                    170,
                    171,
                    172,
                    333,
                    152,
                    351
                ],
                "path": [
                    3206,
                    3114,
                    3605,
                    153,
                    154,
                    155
                ],
                "path.is_file": [
                    154
                ],
                "pyproject_toml": [
                    160,
                    161
                ],
                "toml.load": [
                    160
                ],
                "toml": [
                    160,
                    162
                ],
                "config": [
                    161,
                    322,
                    323,
                    167,
                    173
                ],
                "get": [
                    161
                ],
                "pyproject_toml.get": [
                    161
                ],
                "toml.TomlDecodeError": [
                    162
                ],
                "OSError": [
                    162,
                    3636
                ],
                "click.FileError": [
                    163
                ],
                "e": [
                    164
                ],
                "ctx.default_map": [
                    170,
                    171,
                    172
                ],
                "ctx.default_map.update": [
                    172
                ],
                "replace": [
                    173
                ],
                "k.replace": [
                    173
                ],
                "k": [
                    954,
                    173
                ],
                "v": [
                    774,
                    777,
                    2455,
                    2459,
                    2460,
                    1829,
                    1581,
                    173,
                    1583,
                    1585,
                    1587,
                    1588,
                    1590,
                    1592,
                    1593,
                    1594,
                    954,
                    1595,
                    1596,
                    1597,
                    1598,
                    1622
                ],
                "config.items": [
                    173
                ],
                "Optional": [
                    1123,
                    900,
                    1861,
                    1859,
                    1892,
                    1320,
                    2761,
                    3435,
                    144,
                    1841,
                    1906,
                    312,
                    1020
                ],
                "write_back": [
                    450,
                    419,
                    358,
                    423,
                    424,
                    588,
                    461,
                    590,
                    498,
                    371,
                    499,
                    405,
                    536,
                    473,
                    410,
                    315,
                    539
                ],
                "WriteBack.from_configuration": [
                    315
                ],
                "WriteBack": [
                    513,
                    450,
                    423,
                    424,
                    391,
                    588,
                    461,
                    590,
                    498,
                    499,
                    436,
                    564,
                    410,
                    315
                ],
                "FileMode.from_configuration": [
                    316
                ],
                "FileMode": [
                    636,
                    3585,
                    514,
                    643,
                    392,
                    635,
                    3626,
                    524,
                    625,
                    437,
                    565,
                    3321,
                    634,
                    603,
                    316,
                    3581
                ],
                "verbose": [
                    322,
                    3178,
                    334,
                    380,
                    349
                ],
                "include_regex": [
                    341,
                    325
                ],
                "re_compile_maybe_verbose": [
                    330,
                    325
                ],
                "include": [
                    3137,
                    325,
                    3134,
                    327
                ],
                "re.error": [
                    331,
                    326
                ],
                "re": [
                    326,
                    331,
                    3408,
                    2547,
                    2490,
                    2525,
                    2526,
                    2527
                ],
                "ctx.exit": [
                    328,
                    384,
                    333,
                    351
                ],
                "exclude_regex": [
                    330,
                    341
                ],
                "exclude": [
                    330,
                    332,
                    2963,
                    2964,
                    3128,
                    954,
                    3134
                ],
                "report": [
                    384,
                    3240,
                    427,
                    3243,
                    429,
                    3119,
                    3248,
                    3251,
                    3254,
                    3130,
                    3134,
                    454,
                    334,
                    341,
                    360,
                    493,
                    373,
                    502,
                    381,
                    383
                ],
                "Report": [
                    334
                ],
                "quiet": [
                    3177,
                    380,
                    349,
                    334
                ],
                "src": [
                    3201,
                    523,
                    526,
                    527,
                    403,
                    537,
                    665,
                    412,
                    541,
                    542,
                    416,
                    3616,
                    3617,
                    3618,
                    3619,
                    3621,
                    426,
                    427,
                    429,
                    3633,
                    575,
                    576,
                    578,
                    453,
                    454,
                    335,
                    337,
                    594,
                    3155,
                    470,
                    3289,
                    476,
                    477,
                    489,
                    493,
                    3188,
                    501,
                    502,
                    3193,
                    3195,
                    3327
                ],
                "sources": [
                    3616,
                    353,
                    355,
                    452,
                    455,
                    336,
                    368,
                    3633,
                    340,
                    345,
                    348,
                    477
                ],
                "Set": [
                    2854,
                    3016,
                    1582,
                    3022,
                    336,
                    433,
                    3058,
                    2643,
                    3056,
                    3609,
                    1501,
                    3006
                ],
                "set": [
                    1605,
                    1606,
                    3016,
                    780,
                    1582,
                    3022,
                    336,
                    3058,
                    2963,
                    3093,
                    3615
                ],
                "s": [
                    3242,
                    3244,
                    3247,
                    3248,
                    337,
                    338,
                    3250,
                    3252,
                    343,
                    347
                ],
                "p": [
                    1792,
                    1797,
                    1802,
                    1805,
                    2453,
                    2459,
                    2460,
                    1823,
                    1697,
                    1702,
                    1707,
                    1835,
                    2865,
                    2866,
                    2869,
                    2872,
                    2874,
                    1724,
                    1727,
                    1731,
                    965,
                    1738,
                    338,
                    339,
                    1748,
                    341,
                    1621,
                    343,
                    345,
                    1754,
                    1629,
                    1630,
                    1761,
                    1765,
                    1639,
                    1769,
                    1773,
                    1780,
                    1783,
                    1784
                ],
                "p.is_dir": [
                    339
                ],
                "sources.update": [
                    340
                ],
                "gen_python_files_in_dir": [
                    341,
                    3134
                ],
                "p.is_file": [
                    343
                ],
                "sources.add": [
                    345
                ],
                "len": [
                    2824,
                    2057,
                    3082,
                    3464,
                    2828,
                    2844,
                    2475,
                    3513,
                    1086,
                    2886,
                    2631,
                    2640,
                    3539,
                    3028,
                    2901,
                    3413,
                    2907,
                    348,
                    2528,
                    353,
                    3431,
                    2793,
                    3437,
                    2804,
                    1141,
                    3450,
                    2813,
                    2302
                ],
                "reformat_one": [
                    354
                ],
                "sources.pop": [
                    355
                ],
                "line_length": [
                    3590,
                    654,
                    531,
                    405,
                    411,
                    417,
                    426,
                    3629,
                    578,
                    451,
                    2116,
                    3530,
                    3450,
                    2127,
                    2128,
                    2129,
                    2257,
                    3025,
                    2261,
                    471,
                    2267,
                    356,
                    614,
                    2153,
                    620,
                    369,
                    3571,
                    506,
                    3324,
                    3582
                ],
                "fast": [
                    418,
                    578,
                    357,
                    618,
                    370,
                    531,
                    405,
                    472
                ],
                "loop": [
                    481,
                    482,
                    363,
                    366,
                    3374,
                    467,
                    3380,
                    3381,
                    374,
                    504,
                    379,
                    3389
                ],
                "asyncio.get_event_loop": [
                    363
                ],
                "asyncio": [
                    3363,
                    487,
                    363,
                    3374,
                    3381,
                    504,
                    479
                ],
                "executor": [
                    468,
                    364,
                    375
                ],
                "ProcessPoolExecutor": [
                    364
                ],
                "os.cpu_count": [
                    364
                ],
                "os": [
                    364
                ],
                "loop.run_until_complete": [
                    3380,
                    366
                ],
                "schedule_formatting": [
                    367
                ],
                "shutdown": [
                    379
                ],
                "bang": [
                    381,
                    382
                ],
                "report.return_code": [
                    384,
                    381
                ],
                "click.command": [
                    178
                ],
                "dict": [
                    1033,
                    178,
                    899,
                    898
                ],
                "click.option": [
                    248,
                    225,
                    196,
                    260,
                    230,
                    235,
                    204,
                    269,
                    210,
                    179,
                    216,
                    187,
                    287
                ],
                "click.version_option": [
                    278
                ],
                "click.argument": [
                    279
                ],
                "click.Path": [
                    289,
                    282
                ],
                "read_pyproject_toml": [
                    293
                ],
                "click.pass_context": [
                    296
                ],
                "changed": [
                    422,
                    423,
                    424,
                    427,
                    495,
                    3185,
                    402,
                    499,
                    502,
                    407,
                    3192,
                    414,
                    415
                ],
                "Changed.NO": [
                    424,
                    495,
                    402,
                    499,
                    3192
                ],
                "Changed": [
                    422,
                    423,
                    424,
                    454,
                    495,
                    3183,
                    3185,
                    402,
                    499,
                    407,
                    3192,
                    414,
                    415
                ],
                "src.is_file": [
                    403
                ],
                "format_stdin_to_stdout": [
                    404
                ],
                "Changed.YES": [
                    3185,
                    495,
                    422,
                    407
                ],
                "cache": [
                    449,
                    3618,
                    451,
                    452,
                    426,
                    3596,
                    3600,
                    3633,
                    409,
                    506,
                    411,
                    413
                ],
                "WriteBack.DIFF": [
                    450,
                    410,
                    461,
                    590
                ],
                "read_cache": [
                    411,
                    451
                ],
                "res_src": [
                    412,
                    413
                ],
                "src.resolve": [
                    3617,
                    412,
                    3633
                ],
                "get_cache_info": [
                    3633,
                    3618,
                    413
                ],
                "Changed.CACHED": [
                    423,
                    454,
                    414,
                    415
                ],
                "format_file_in_place": [
                    469,
                    415
                ],
                "WriteBack.YES": [
                    498,
                    588,
                    423
                ],
                "WriteBack.CHECK": [
                    424,
                    499
                ],
                "write_cache": [
                    426,
                    506
                ],
                "report.done": [
                    427,
                    454,
                    502
                ],
                "report.failed": [
                    493,
                    429
                ],
                "exc": [
                    3301,
                    3303,
                    429,
                    700,
                    702,
                    3295
                ],
                "BaseEventLoop": [
                    3370,
                    439
                ],
                "Executor": [
                    440
                ],
                "cached": [
                    452,
                    453
                ],
                "filter_cached": [
                    452
                ],
                "sorted": [
                    477,
                    3267,
                    453
                ],
                "cancelled": [
                    504,
                    458,
                    491,
                    503
                ],
                "sources_to_cache": [
                    505,
                    506,
                    459,
                    501
                ],
                "lock": [
                    544,
                    545,
                    460,
                    556,
                    557,
                    465,
                    475
                ],
                "manager": [
                    464,
                    465
                ],
                "Manager": [
                    464
                ],
                "manager.Lock": [
                    465
                ],
                "tasks": [
                    489,
                    466,
                    3366,
                    479
                ],
                "loop.run_in_executor": [
                    467
                ],
                "pending": [
                    481,
                    482,
                    486,
                    487,
                    479
                ],
                "Iterable": [
                    3363,
                    3143,
                    3626,
                    948,
                    3609,
                    479
                ],
                "asyncio.Task": [
                    3363,
                    3374,
                    479
                ],
                "tasks.keys": [
                    479
                ],
                "loop.add_signal_handler": [
                    481,
                    482
                ],
                "signal.SIGINT": [
                    481
                ],
                "signal": [
                    481,
                    482
                ],
                "cancel": [
                    481,
                    482
                ],
                "signal.SIGTERM": [
                    482
                ],
                "NotImplementedError": [
                    483
                ],
                "done": [
                    3621,
                    3622,
                    487,
                    488,
                    3615
                ],
                "_": [
                    649,
                    652,
                    1111,
                    487
                ],
                "asyncio.wait": [
                    487
                ],
                "asyncio.FIRST_COMPLETED": [
                    487
                ],
                "task": [
                    3366,
                    3367,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    3374,
                    495,
                    3378,
                    3379
                ],
                "tasks.pop": [
                    489
                ],
                "task.cancelled": [
                    490
                ],
                "cancelled.append": [
                    491
                ],
                "task.exception": [
                    492,
                    493
                ],
                "task.result": [
                    495
                ],
                "sources_to_cache.append": [
                    501
                ],
                "asyncio.gather": [
                    504,
                    3381
                ],
                "Any": [
                    515
                ],
                "WriteBack.NO": [
                    513,
                    564
                ],
                "FileMode.AUTO_DETECT": [
                    514,
                    625,
                    565,
                    3321,
                    603
                ],
                "src.suffix": [
                    523
                ],
                "FileMode.PYI": [
                    634,
                    524
                ],
                "then": [
                    574,
                    592,
                    541,
                    526
                ],
                "datetime.utcfromtimestamp": [
                    526
                ],
                "datetime": [
                    574,
                    540,
                    526,
                    591
                ],
                "st_mtime": [
                    526
                ],
                "src.stat": [
                    526
                ],
                "open": [
                    537,
                    527
                ],
                "buf": [
                    528,
                    527
                ],
                "src_contents": [
                    611,
                    614,
                    615,
                    619,
                    620,
                    528,
                    531,
                    631,
                    543
                ],
                "encoding": [
                    672,
                    673,
                    549,
                    586,
                    528,
                    537,
                    666,
                    668,
                    575
                ],
                "newline": [
                    673,
                    550,
                    586,
                    528,
                    537,
                    670,
                    575
                ],
                "decode_bytes": [
                    528,
                    575
                ],
                "buf.read": [
                    528
                ],
                "dst_contents": [
                    614,
                    615,
                    650,
                    619,
                    620,
                    621,
                    653,
                    655,
                    656,
                    530,
                    632,
                    538,
                    543
                ],
                "format_file_contents": [
                    530,
                    578
                ],
                "NothingChanged": [
                    612,
                    616,
                    581,
                    533
                ],
                "write_back.YES": [
                    536
                ],
                "f": [
                    547,
                    553,
                    554,
                    585,
                    589,
                    3344,
                    594,
                    595,
                    3346,
                    3348,
                    3349,
                    537,
                    538
                ],
                "f.write": [
                    553,
                    589,
                    3346,
                    594,
                    3348,
                    538
                ],
                "write_back.DIFF": [
                    539
                ],
                "now": [
                    593,
                    540,
                    542,
                    591
                ],
                "datetime.utcnow": [
                    540,
                    574,
                    591
                ],
                "src_name": [
                    592,
                    594,
                    541,
                    543
                ],
                "dst_name": [
                    593,
                    594,
                    542,
                    543
                ],
                "diff_contents": [
                    553,
                    543
                ],
                "lock.acquire": [
                    545
                ],
                "io.TextIOWrapper": [
                    672,
                    585,
                    547
                ],
                "io": [
                    672,
                    585,
                    665,
                    547
                ],
                "sys.stdout.buffer": [
                    586,
                    548
                ],
                "sys.stdout": [
                    586,
                    548
                ],
                "sys": [
                    548,
                    1158,
                    586,
                    2381,
                    3291,
                    575
                ],
                "f.detach": [
                    554,
                    595
                ],
                "lock.release": [
                    557
                ],
                "sys.stdin.buffer.read": [
                    575
                ],
                "sys.stdin.buffer": [
                    575
                ],
                "sys.stdin": [
                    575
                ],
                "dst": [
                    576,
                    3328,
                    578,
                    3299,
                    3301,
                    589,
                    594,
                    3324,
                    3325,
                    3327
                ],
                "src_contents.strip": [
                    611
                ],
                "format_str": [
                    3324,
                    614
                ],
                "assert_equivalent": [
                    619
                ],
                "assert_stable": [
                    620
                ],
                "src_node": [
                    648,
                    631,
                    633,
                    635,
                    637
                ],
                "lib2to3_parse": [
                    776,
                    631
                ],
                "src_contents.lstrip": [
                    631
                ],
                "future_imports": [
                    633,
                    639
                ],
                "get_future_imports": [
                    633
                ],
                "is_pyi": [
                    640,
                    645,
                    1319,
                    1428,
                    634
                ],
                "FileMode.PYTHON36": [
                    635
                ],
                "is_python36": [
                    635
                ],
                "normalize_strings": [
                    641,
                    636,
                    1429
                ],
                "FileMode.NO_STRING_NORMALIZATION": [
                    636
                ],
                "normalize_fmt_off": [
                    637
                ],
                "lines": [
                    648,
                    638,
                    2128,
                    2129,
                    2130,
                    3345,
                    3346,
                    3347,
                    695,
                    697,
                    666,
                    667,
                    670
                ],
                "LineGenerator": [
                    638
                ],
                "FileMode.NO_NUMERIC_UNDERSCORE_NORMALIZATION": [
                    643
                ],
                "elt": [
                    651,
                    645
                ],
                "EmptyLineTracker": [
                    645
                ],
                "empty_line": [
                    650,
                    653,
                    646
                ],
                "Line": [
                    3456,
                    646,
                    2438,
                    1544,
                    2952,
                    2315,
                    2316,
                    1421,
                    2322,
                    1430,
                    1559,
                    1434,
                    2203,
                    2204,
                    1565,
                    1569,
                    3492,
                    1574,
                    1447,
                    1320,
                    1450,
                    1324,
                    2350,
                    2098,
                    2099,
                    2359,
                    1336,
                    3006,
                    1480,
                    2380,
                    1486,
                    2126,
                    2384,
                    2392,
                    3420,
                    1502,
                    1376,
                    2146,
                    2410,
                    2288,
                    1521,
                    3442,
                    2166,
                    2423,
                    1528,
                    2428,
                    2430
                ],
                "after": [
                    647,
                    649,
                    651,
                    2578,
                    2579,
                    2581,
                    2583,
                    2584,
                    2586,
                    2587,
                    2589,
                    2590,
                    2608,
                    1330,
                    2610,
                    1332,
                    2613,
                    1334,
                    2611,
                    2614
                ],
                "current_line": [
                    1408,
                    2434,
                    2436,
                    2438,
                    1415,
                    648,
                    2439,
                    651,
                    654,
                    2447,
                    2448,
                    1430,
                    1330,
                    1333,
                    1338,
                    1340,
                    1342,
                    1348,
                    1355,
                    1356,
                    2380,
                    1361,
                    2388,
                    2390,
                    2392,
                    1369,
                    2393,
                    1378,
                    1379,
                    2408,
                    2410,
                    1387,
                    2411,
                    2415,
                    2416,
                    1394,
                    2418,
                    2419,
                    1400,
                    1402,
                    1403,
                    2428
                ],
                "lines.visit": [
                    648
                ],
                "range": [
                    2640,
                    649,
                    652,
                    1111
                ],
                "before": [
                    651,
                    652,
                    2578,
                    2579,
                    2581,
                    2588,
                    2590,
                    2608,
                    2609,
                    1330,
                    1331,
                    1334,
                    2614,
                    1343,
                    1344,
                    1347,
                    1352,
                    1354,
                    1356,
                    1364,
                    1371,
                    1373,
                    1395
                ],
                "elt.maybe_empty_lines": [
                    651
                ],
                "line": [
                    2178,
                    2438,
                    3463,
                    2056,
                    2057,
                    2058,
                    2059,
                    2441,
                    2061,
                    654,
                    655,
                    2444,
                    2193,
                    2194,
                    2195,
                    2068,
                    2962,
                    2964,
                    3356,
                    3357,
                    3518,
                    2219,
                    3499,
                    2351,
                    3513,
                    3515,
                    3516,
                    3517,
                    2110,
                    2111,
                    2238,
                    2239,
                    2114,
                    2115,
                    2116,
                    2240,
                    2118,
                    2366,
                    2370,
                    3524,
                    2122,
                    3019,
                    2380,
                    2253,
                    3525,
                    2127,
                    2128,
                    3023,
                    3539,
                    2261,
                    2136,
                    2392,
                    2138,
                    2395,
                    3452,
                    2398,
                    3038,
                    2148,
                    3430,
                    2410,
                    3436,
                    3566,
                    3568,
                    2163,
                    3448,
                    2425,
                    2428
                ],
                "split_line": [
                    2153,
                    654
                ],
                "bytes": [
                    659
                ],
                "srcbuf": [
                    672,
                    665,
                    666,
                    671
                ],
                "io.BytesIO": [
                    665
                ],
                "tokenize.detect_encoding": [
                    666
                ],
                "tokenize": [
                    666
                ],
                "srcbuf.readline": [
                    666
                ],
                "srcbuf.seek": [
                    671
                ],
                "tiow": [
                    672,
                    673
                ],
                "tiow.read": [
                    673
                ],
                "GRAMMARS": [
                    676,
                    687
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    677
                ],
                "pygram.python_grammar_no_print_statement": [
                    678
                ],
                "pygram.python_grammar": [
                    679
                ],
                "src_txt": [
                    690,
                    685,
                    686,
                    695
                ],
                "grammar": [
                    688,
                    687
                ],
                "drv": [
                    688,
                    690
                ],
                "driver.Driver": [
                    688
                ],
                "driver": [
                    688
                ],
                "pytree.convert": [
                    688
                ],
                "pytree": [
                    688
                ],
                "result": [
                    2050,
                    2052,
                    2322,
                    2324,
                    2069,
                    2197,
                    2198,
                    2199,
                    2325,
                    2075,
                    2335,
                    2337,
                    2339,
                    2340,
                    690,
                    704,
                    705,
                    706,
                    2146,
                    2152,
                    2283,
                    2284,
                    2285,
                    2159
                ],
                "drv.parse_string": [
                    690
                ],
                "ParseError": [
                    693
                ],
                "lineno": [
                    697,
                    700,
                    694
                ],
                "column": [
                    700,
                    694
                ],
                "pe.context": [
                    694
                ],
                "pe": [
                    694
                ],
                "src_txt.splitlines": [
                    695
                ],
                "faulty_line": [
                    697,
                    699,
                    700
                ],
                "IndexError": [
                    1124,
                    2965,
                    698,
                    1852,
                    1119,
                    2367
                ],
                "InvalidInput": [
                    700
                ],
                "syms.file_input": [
                    705,
                    1882
                ],
                "code": [
                    775,
                    712,
                    776,
                    777,
                    711
                ],
                "node": [
                    1536,
                    3075,
                    1540,
                    1542,
                    1548,
                    1561,
                    2652,
                    2658,
                    2665,
                    2671,
                    2672,
                    2678,
                    2681,
                    2682,
                    2690,
                    2699,
                    2707,
                    3265,
                    3267,
                    3269,
                    711,
                    3286,
                    731,
                    732,
                    2779,
                    734,
                    735,
                    2780,
                    2781,
                    2782,
                    739,
                    740,
                    2783,
                    2787,
                    2788,
                    2793,
                    2794,
                    750,
                    751,
                    754,
                    2803,
                    2804,
                    2805,
                    2806,
                    760,
                    762,
                    2812,
                    2813,
                    765,
                    766,
                    2816,
                    2827,
                    2828,
                    2829,
                    2835,
                    2838,
                    2841,
                    2844,
                    2847,
                    1843,
                    1844,
                    1855,
                    1861,
                    1862,
                    1863,
                    1864,
                    2886,
                    2887,
                    2888,
                    2889,
                    2893,
                    2898,
                    2901,
                    2904,
                    2918,
                    2921,
                    2922,
                    2927,
                    2979,
                    1452,
                    1454,
                    1470,
                    1471,
                    1472,
                    1473,
                    1474,
                    1475,
                    1476,
                    1477,
                    1478,
                    1484,
                    1495,
                    1514,
                    1515,
                    1523,
                    1524,
                    1526,
                    1530,
                    1532,
                    1533
                ],
                "T": [
                    737,
                    745,
                    715,
                    748,
                    718,
                    721,
                    3411
                ],
                "TypeVar": [
                    715
                ],
                "Generic": [
                    718
                ],
                "node.type": [
                    1474,
                    1476,
                    2812,
                    2918,
                    2827,
                    751,
                    2672,
                    2898,
                    2803,
                    2835,
                    2838,
                    2841,
                    760,
                    2779,
                    731,
                    732,
                    734,
                    1471
                ],
                "name": [
                    732,
                    734,
                    735
                ],
                "token.tok_name": [
                    760,
                    794,
                    732
                ],
                "token": [
                    1832,
                    3083,
                    3084,
                    1552,
                    2065,
                    1052,
                    1091,
                    1604,
                    1608,
                    1103,
                    1111,
                    1626,
                    1630,
                    1126,
                    1127,
                    2662,
                    1129,
                    2663,
                    1643,
                    1644,
                    2668,
                    2669,
                    1647,
                    2675,
                    1652,
                    1143,
                    2679,
                    1145,
                    2681,
                    2682,
                    2687,
                    2688,
                    1154,
                    1672,
                    1684,
                    1688,
                    1178,
                    1183,
                    1187,
                    1699,
                    1704,
                    1712,
                    1716,
                    1721,
                    1216,
                    1728,
                    1733,
                    2246,
                    1737,
                    2249,
                    1739,
                    2762,
                    1742,
                    1745,
                    1237,
                    1750,
                    1755,
                    732,
                    1758,
                    2789,
                    1770,
                    1774,
                    1777,
                    2805,
                    2806,
                    760,
                    1793,
                    2818,
                    2820,
                    1799,
                    2824,
                    781,
                    2829,
                    1811,
                    2838,
                    1817,
                    794,
                    2331,
                    1820,
                    797,
                    798,
                    799,
                    800,
                    801,
                    802,
                    1824,
                    1825,
                    805,
                    806,
                    807,
                    808,
                    809,
                    810,
                    811,
                    812,
                    813,
                    814,
                    815,
                    816,
                    817,
                    818,
                    820,
                    2887,
                    2888,
                    2889,
                    1900,
                    2908,
                    875,
                    876,
                    877,
                    878,
                    879,
                    880,
                    881,
                    882,
                    883,
                    884,
                    885,
                    886,
                    887,
                    888,
                    2415,
                    2418,
                    2923,
                    1920,
                    2946,
                    2948,
                    3467,
                    1938,
                    2963,
                    1940,
                    3477,
                    919,
                    1944,
                    2457,
                    3479,
                    3480,
                    1951,
                    2980,
                    2985,
                    2992,
                    1458,
                    1978,
                    1471,
                    1474,
                    1990,
                    973,
                    2332,
                    985,
                    3547,
                    3548,
                    3552,
                    1000,
                    2025,
                    1516,
                    1828,
                    1012,
                    3063,
                    2848,
                    3068,
                    1022
                ],
                "type_repr": [
                    734,
                    751
                ],
                "getattr": [
                    3269,
                    735
                ],
                "self": [
                    1536,
                    1537,
                    1540,
                    1541,
                    1542,
                    1546,
                    1550,
                    1557,
                    1562,
                    1563,
                    1052,
                    1053,
                    1054,
                    1567,
                    1058,
                    1571,
                    1060,
                    1061,
                    1062,
                    1063,
                    1064,
                    1572,
                    1575,
                    1576,
                    1577,
                    1581,
                    1583,
                    1072,
                    1073,
                    1584,
                    1587,
                    1076,
                    1588,
                    1589,
                    1592,
                    1081,
                    1593,
                    1594,
                    1595,
                    1596,
                    1086,
                    1597,
                    1598,
                    1599,
                    1600,
                    1091,
                    1096,
                    1102,
                    1103,
                    1104,
                    1110,
                    1118,
                    1123,
                    3186,
                    3187,
                    1140,
                    1141,
                    1142,
                    1143,
                    1144,
                    1145,
                    1146,
                    3189,
                    3191,
                    3197,
                    1153,
                    1154,
                    1155,
                    3202,
                    3205,
                    1160,
                    1168,
                    3219,
                    3222,
                    1177,
                    1178,
                    1184,
                    3232,
                    1188,
                    1190,
                    3241,
                    3242,
                    1195,
                    1196,
                    3244,
                    3246,
                    3247,
                    3248,
                    3249,
                    3250,
                    1204,
                    3252,
                    1211,
                    1223,
                    1232,
                    1240,
                    1246,
                    735,
                    1247,
                    1248,
                    1250,
                    741,
                    1255,
                    749,
                    753,
                    1265,
                    755,
                    1266,
                    757,
                    1268,
                    1269,
                    1273,
                    1291,
                    1294,
                    1295,
                    1300,
                    1306,
                    1330,
                    1331,
                    1332,
                    1333,
                    1339,
                    1349,
                    1350,
                    1351,
                    1356,
                    1359,
                    1360,
                    1362,
                    1367,
                    1368,
                    1379,
                    1380,
                    1384,
                    1387,
                    1388,
                    1393,
                    1394,
                    1399,
                    1400,
                    1402,
                    1403,
                    1408,
                    922,
                    923,
                    925,
                    926,
                    928,
                    929,
                    930,
                    931,
                    932,
                    1442,
                    934,
                    1443,
                    936,
                    1446,
                    938,
                    939,
                    940,
                    941,
                    942,
                    1447,
                    1453,
                    1457,
                    946,
                    1460,
                    1461,
                    1465,
                    954,
                    1467,
                    1468,
                    1471,
                    1472,
                    961,
                    1475,
                    964,
                    965,
                    1477,
                    1483,
                    1484,
                    974,
                    975,
                    1491,
                    983,
                    984,
                    1495,
                    1498,
                    988,
                    989,
                    1001,
                    1002,
                    1517,
                    1519,
                    1010,
                    1011,
                    1523,
                    1524,
                    1014,
                    1015,
                    1526,
                    1532,
                    1533,
                    1022,
                    1535
                ],
                "self.visit_default": [
                    1536,
                    1571,
                    1542,
                    1577,
                    1484,
                    1526,
                    1495,
                    1533,
                    735
                ],
                "child": [
                    2689,
                    2690,
                    3075,
                    2692,
                    3076,
                    3078,
                    3082,
                    3084,
                    1549,
                    1550,
                    1552,
                    1556,
                    1557,
                    1561,
                    1563,
                    3114,
                    3116,
                    3118,
                    3120,
                    3063,
                    3126,
                    3064,
                    3130,
                    3133,
                    3134,
                    3136,
                    3139,
                    2904,
                    2906,
                    2907,
                    2908,
                    2658,
                    740,
                    741,
                    2660,
                    2661,
                    2664,
                    2665,
                    2666,
                    1515,
                    1516,
                    2670,
                    1519,
                    2671,
                    754,
                    755,
                    2675,
                    2677,
                    3061,
                    2679,
                    3062,
                    3065,
                    3066,
                    2685,
                    3070,
                    3071
                ],
                "node.children": [
                    2816,
                    3075,
                    1548,
                    2828,
                    2829,
                    1561,
                    2844,
                    2847,
                    2886,
                    2887,
                    2888,
                    2889,
                    2893,
                    2901,
                    2904,
                    2658,
                    2787,
                    740,
                    2788,
                    2793,
                    2794,
                    1515,
                    2921,
                    2922,
                    2927,
                    754,
                    1524,
                    2804,
                    2678,
                    2805,
                    2806,
                    2813
                ],
                "self.visit": [
                    741,
                    1550,
                    1519,
                    755,
                    1524,
                    1557,
                    1563
                ],
                "Visitor": [
                    745,
                    1421
                ],
                "tree_depth": [
                    746
                ],
                "indent": [
                    1443,
                    1447,
                    749,
                    1294,
                    752,
                    1297,
                    758,
                    761
                ],
                "self.tree_depth": [
                    753,
                    749,
                    757
                ],
                "_type": [
                    751,
                    752,
                    758,
                    760,
                    761
                ],
                "token.tok_name.get": [
                    760
                ],
                "node.prefix": [
                    762,
                    2652,
                    765
                ],
                "node.value": [
                    766,
                    2838
                ],
                "DebugVisitor": [
                    774
                ],
                "list": [
                    2658,
                    901,
                    902,
                    1030,
                    777,
                    1322,
                    3275,
                    2128,
                    1850,
                    2719
                ],
                "v.visit": [
                    777
                ],
                "dataclass": [
                    1025,
                    3172,
                    744,
                    1420,
                    893,
                    2029,
                    1309
                ],
                "KEYWORDS": [
                    780
                ],
                "keyword.kwlist": [
                    780
                ],
                "keyword": [
                    780
                ],
                "WHITESPACE": [
                    2716,
                    1476,
                    781
                ],
                "token.DEDENT": [
                    2889,
                    781
                ],
                "token.INDENT": [
                    2888,
                    781
                ],
                "token.NEWLINE": [
                    3084,
                    781,
                    2887
                ],
                "FLOW_CONTROL": [
                    782
                ],
                "STATEMENT": [
                    1530,
                    783
                ],
                "syms.if_stmt": [
                    784
                ],
                "syms.while_stmt": [
                    785
                ],
                "syms.for_stmt": [
                    786
                ],
                "syms.try_stmt": [
                    787
                ],
                "syms.except_clause": [
                    788
                ],
                "syms.with_stmt": [
                    789
                ],
                "syms.funcdef": [
                    790
                ],
                "syms.classdef": [
                    1773,
                    791
                ],
                "STANDALONE_COMMENT": [
                    1241,
                    1608,
                    1161,
                    1231,
                    2416,
                    2067,
                    1076,
                    3029,
                    2714,
                    2744,
                    793,
                    794,
                    1086
                ],
                "LOGIC_OPERATORS": [
                    795,
                    1996
                ],
                "COMPARATORS": [
                    796,
                    1934
                ],
                "token.LESS": [
                    797
                ],
                "token.GREATER": [
                    798
                ],
                "token.EQEQUAL": [
                    799
                ],
                "token.NOTEQUAL": [
                    800
                ],
                "token.LESSEQUAL": [
                    801
                ],
                "token.GREATEREQUAL": [
                    802
                ],
                "MATH_OPERATORS": [
                    1928,
                    804,
                    1679
                ],
                "token.VBAR": [
                    875,
                    805
                ],
                "token.CIRCUMFLEX": [
                    876,
                    806
                ],
                "token.AMPER": [
                    877,
                    807
                ],
                "token.LEFTSHIFT": [
                    808,
                    878
                ],
                "token.RIGHTSHIFT": [
                    809,
                    1684,
                    879
                ],
                "token.PLUS": [
                    880,
                    810
                ],
                "token.MINUS": [
                    881,
                    811
                ],
                "token.STAR": [
                    882,
                    812,
                    820,
                    2679
                ],
                "token.SLASH": [
                    883,
                    813
                ],
                "token.DOUBLESLASH": [
                    884,
                    814
                ],
                "token.PERCENT": [
                    885,
                    815
                ],
                "token.AT": [
                    816,
                    1770,
                    1091,
                    886
                ],
                "token.TILDE": [
                    817,
                    887
                ],
                "token.DOUBLESTAR": [
                    888,
                    818,
                    820,
                    1799
                ],
                "STARS": [
                    1668,
                    2862,
                    2995,
                    820,
                    3000,
                    1758
                ],
                "VARARGS_PARENTS": [
                    1914,
                    2403,
                    821,
                    1669
                ],
                "syms.arglist": [
                    1697,
                    1218,
                    2990,
                    822,
                    1655
                ],
                "syms.argument": [
                    1748,
                    2998,
                    823,
                    1656,
                    1817
                ],
                "syms.trailer": [
                    824,
                    3554,
                    848,
                    1731
                ],
                "syms.typedargslist": [
                    825,
                    1707,
                    2990,
                    1662
                ],
                "syms.varargslist": [
                    826,
                    1702,
                    1658
                ],
                "UNPACKING_PARENTS": [
                    1914,
                    828,
                    1669
                ],
                "syms.atom": [
                    1792,
                    2690,
                    2660,
                    2918,
                    2665,
                    2956,
                    2671,
                    2803,
                    2841,
                    2906,
                    2779,
                    2812,
                    829
                ],
                "syms.dictsetmaker": [
                    1797,
                    830
                ],
                "syms.listmaker": [
                    1280,
                    1189,
                    831
                ],
                "syms.testlist_gexp": [
                    832,
                    2819
                ],
                "syms.testlist_star_expr": [
                    833,
                    1603
                ],
                "TEST_DESCENDANTS": [
                    835,
                    1286
                ],
                "syms.test": [
                    836,
                    1966
                ],
                "syms.lambdef": [
                    837
                ],
                "syms.or_test": [
                    838
                ],
                "syms.and_test": [
                    839
                ],
                "syms.not_test": [
                    840
                ],
                "syms.comparison": [
                    841,
                    1975
                ],
                "syms.star_expr": [
                    842,
                    1802,
                    2866,
                    1930
                ],
                "syms.expr": [
                    843
                ],
                "syms.xor_expr": [
                    844
                ],
                "syms.and_expr": [
                    845
                ],
                "syms.shift_expr": [
                    1686,
                    846
                ],
                "syms.arith_expr": [
                    847
                ],
                "syms.term": [
                    849
                ],
                "syms.power": [
                    850
                ],
                "ASSIGNMENTS": [
                    852,
                    1596
                ],
                "COMPREHENSION_PRIORITY": [
                    1964,
                    868,
                    1957
                ],
                "COMMA_PRIORITY": [
                    869,
                    1901,
                    2414,
                    2968,
                    2783
                ],
                "TERNARY_PRIORITY": [
                    870,
                    1967
                ],
                "LOGIC_PRIORITY": [
                    1997,
                    871
                ],
                "STRING_PRIORITY": [
                    872,
                    1942
                ],
                "COMPARATOR_PRIORITY": [
                    873,
                    1994,
                    1935,
                    1970,
                    1982
                ],
                "MATH_PRIORITIES": [
                    874,
                    1932
                ],
                "DOT_PRIORITY": [
                    2376,
                    890,
                    1925,
                    3509
                ],
                "depth": [
                    1216,
                    897,
                    3265,
                    1348,
                    1029,
                    1349,
                    1352,
                    3273,
                    1354,
                    3278,
                    1201,
                    1362,
                    3281,
                    3284,
                    3286
                ],
                "bracket_match": [
                    898
                ],
                "Factory": [
                    898,
                    899,
                    901,
                    902,
                    1030,
                    1033,
                    1034,
                    1322,
                    1430
                ],
                "delimiters": [
                    899
                ],
                "previous": [
                    1923,
                    900,
                    1989,
                    1990,
                    1991,
                    1939,
                    1940,
                    1977,
                    1978,
                    1979
                ],
                "_for_loop_depths": [
                    901
                ],
                "List": [
                    2048,
                    2050,
                    2146,
                    1253,
                    901,
                    902,
                    1030,
                    1033,
                    1322,
                    2121,
                    2213,
                    2214,
                    2215,
                    2315,
                    3060,
                    2173,
                    2174,
                    2175
                ],
                "_lambda_argument_depths": [
                    902
                ],
                "leaf.type": [
                    1920,
                    2946,
                    2948,
                    2181,
                    1928,
                    1161,
                    2187,
                    1932,
                    1934,
                    3472,
                    1938,
                    3477,
                    2454,
                    919,
                    1048,
                    1944,
                    3479,
                    3483,
                    1052,
                    924,
                    926,
                    1951,
                    937,
                    938,
                    2862,
                    2225,
                    1076,
                    1216,
                    3526,
                    973,
                    3533,
                    1620,
                    3029,
                    985,
                    3035,
                    3037,
                    1000,
                    2025,
                    1900,
                    1012,
                    3574
                ],
                "leaf": [
                    2563,
                    2572,
                    1048,
                    1052,
                    1057,
                    1058,
                    1571,
                    1061,
                    1062,
                    1063,
                    1064,
                    1577,
                    2600,
                    1076,
                    1081,
                    1620,
                    1621,
                    1622,
                    3477,
                    1629,
                    3479,
                    1637,
                    3483,
                    2178,
                    2181,
                    2182,
                    1160,
                    1161,
                    1162,
                    2185,
                    2187,
                    2188,
                    1168,
                    1169,
                    2707,
                    2709,
                    2472,
                    2715,
                    2719,
                    2219,
                    2221,
                    2223,
                    2225,
                    2226,
                    2227,
                    1204,
                    1205,
                    1211,
                    1212,
                    1215,
                    1216,
                    1218,
                    2761,
                    1255,
                    1284,
                    1298,
                    1299,
                    2334,
                    2335,
                    2336,
                    2862,
                    2865,
                    2879,
                    1872,
                    1873,
                    2388,
                    2393,
                    2395,
                    2396,
                    2908,
                    2398,
                    2401,
                    2402,
                    2403,
                    2406,
                    3430,
                    3431,
                    3432,
                    1900,
                    3436,
                    3439,
                    2931,
                    2932,
                    1914,
                    1920,
                    1921,
                    1922,
                    2434,
                    2946,
                    2947,
                    2948,
                    2439,
                    1928,
                    1929,
                    1930,
                    2441,
                    1932,
                    2442,
                    1934,
                    2444,
                    3471,
                    3472,
                    1938,
                    2453,
                    2454,
                    919,
                    1944,
                    2455,
                    922,
                    923,
                    924,
                    1948,
                    926,
                    927,
                    928,
                    1949,
                    930,
                    1950,
                    1951,
                    1954,
                    934,
                    1955,
                    936,
                    937,
                    938,
                    1960,
                    940,
                    941,
                    942,
                    1961,
                    1962,
                    1966,
                    1969,
                    2477,
                    2480,
                    1973,
                    1974,
                    1975,
                    2490,
                    2491,
                    2496,
                    1985,
                    1986,
                    1987,
                    3525,
                    3526,
                    2507,
                    1996,
                    973,
                    3533,
                    3023,
                    3028,
                    3029,
                    2520,
                    985,
                    986,
                    3033,
                    2524,
                    3035,
                    3036,
                    3037,
                    2528,
                    3042,
                    1000,
                    2025,
                    3051,
                    3052,
                    3053,
                    2543,
                    3568,
                    3570,
                    1012,
                    2949,
                    3574
                ],
                "token.COMMENT": [
                    2065,
                    1458,
                    1237,
                    919,
                    1626
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    922
                ],
                "self.maybe_decrement_after_lambda_arguments": [
                    923
                ],
                "CLOSING_BRACKETS": [
                    3522,
                    1923,
                    2181,
                    1606,
                    1607,
                    1608,
                    3035,
                    3526,
                    2225,
                    3473,
                    3483,
                    1179,
                    924,
                    3037
                ],
                "self.depth": [
                    928,
                    929,
                    1001,
                    938,
                    939,
                    1002,
                    974,
                    975,
                    1294,
                    1011,
                    1014,
                    1022,
                    984,
                    988,
                    925,
                    926
                ],
                "opening_bracket": [
                    2955,
                    2956,
                    2957,
                    926,
                    927,
                    2339,
                    2217,
                    2221,
                    2226,
                    2229,
                    2238,
                    2239,
                    2240,
                    2246,
                    2247,
                    3020,
                    3032,
                    3033,
                    3034,
                    2281,
                    3052
                ],
                "self.bracket_match.pop": [
                    926
                ],
                "self.bracket_match": [
                    946,
                    938,
                    926,
                    1022
                ],
                "leaf.opening_bracket": [
                    3526,
                    2182,
                    3052,
                    2226,
                    927
                ],
                "leaf.bracket_depth": [
                    928,
                    2401,
                    2402,
                    1162,
                    1215
                ],
                "delim": [
                    930,
                    931,
                    932,
                    934,
                    935,
                    936
                ],
                "is_split_before_delimiter": [
                    930
                ],
                "self.previous": [
                    930,
                    931,
                    932,
                    934,
                    940
                ],
                "self.delimiters": [
                    961,
                    932,
                    965,
                    936,
                    954
                ],
                "id": [
                    3042,
                    932,
                    2372,
                    2406,
                    1255,
                    936,
                    3046,
                    1265,
                    1266,
                    2225,
                    1268,
                    2259,
                    2963,
                    3036,
                    1246
                ],
                "is_split_after_delimiter": [
                    934
                ],
                "OPENING_BRACKETS": [
                    3522,
                    1605,
                    3557,
                    1607,
                    1640,
                    937,
                    2187,
                    3533,
                    1806,
                    3472,
                    3038,
                    3574,
                    3480,
                    1694
                ],
                "BRACKET": [
                    938,
                    1604,
                    1605,
                    1606
                ],
                "self.maybe_increment_lambda_arguments": [
                    941
                ],
                "self.maybe_increment_for_loop_variable": [
                    942
                ],
                "max": [
                    954
                ],
                "self.delimiters.items": [
                    954
                ],
                "priority": [
                    964,
                    965
                ],
                "self.max_delimiter_priority": [
                    964
                ],
                "sum": [
                    965
                ],
                "self.delimiters.values": [
                    965
                ],
                "token.NAME": [
                    3479,
                    1828,
                    1126,
                    1990,
                    1000,
                    1129,
                    2457,
                    1516,
                    973,
                    3068,
                    1103,
                    1944,
                    2838,
                    3063,
                    1688,
                    985,
                    1978,
                    1820
                ],
                "leaf.value": [
                    2563,
                    2947,
                    2949,
                    2572,
                    2455,
                    1048,
                    1948,
                    1960,
                    2600,
                    1966,
                    1969,
                    1973,
                    2490,
                    2491,
                    2879,
                    2496,
                    1985,
                    2507,
                    1996,
                    973,
                    3028,
                    1622,
                    2520,
                    986,
                    2524,
                    2528,
                    3431,
                    1000,
                    3432,
                    3051,
                    2543
                ],
                "self._for_loop_depths.append": [
                    975
                ],
                "self._for_loop_depths": [
                    984,
                    983,
                    989,
                    975
                ],
                "self._for_loop_depths.pop": [
                    989
                ],
                "self._lambda_argument_depths.append": [
                    1002
                ],
                "self._lambda_argument_depths": [
                    1015,
                    1002,
                    1010,
                    1011
                ],
                "token.COLON": [
                    1672,
                    1643,
                    1644,
                    1811,
                    1012,
                    1052,
                    1630
                ],
                "self._lambda_argument_depths.pop": [
                    1015
                ],
                "self.bracket_match.get": [
                    1022
                ],
                "token.RSQB": [
                    3552,
                    1187,
                    1604,
                    1022
                ],
                "leaves": [
                    1030,
                    3463,
                    3464,
                    3467,
                    3470,
                    1295,
                    1296,
                    3471,
                    1298,
                    2326,
                    2328,
                    2331,
                    2332,
                    2334
                ],
                "comments": [
                    1033
                ],
                "bracket_tracker": [
                    1034
                ],
                "BracketTracker": [
                    1034,
                    2926
                ],
                "inside_brackets": [
                    1035,
                    2471
                ],
                "should_explode": [
                    2339,
                    1036
                ],
                "has_value": [
                    1048,
                    1049
                ],
                "BRACKETS": [
                    1048,
                    1885,
                    1607
                ],
                "leaf.value.strip": [
                    1048
                ],
                "self.is_class_paren_empty": [
                    1052
                ],
                "self.leaves": [
                    1154,
                    1155,
                    1160,
                    1295,
                    1168,
                    1177,
                    1178,
                    1306,
                    1053,
                    1054,
                    1188,
                    1064,
                    1076,
                    1204,
                    1211,
                    1086,
                    1091,
                    1096,
                    1103,
                    1104,
                    1110,
                    1240,
                    1118,
                    1246,
                    1123,
                    1265,
                    1266,
                    1268,
                    1141,
                    1269,
                    1143,
                    1144,
                    1145,
                    1146
                ],
                "preformatted": [
                    1081,
                    1060,
                    1054
                ],
                "leaf.prefix": [
                    1057,
                    3431,
                    2472,
                    2025,
                    2477,
                    1872,
                    2480,
                    3028,
                    2709
                ],
                "whitespace": [
                    1057
                ],
                "self.is_complex_subscript": [
                    1058
                ],
                "self.inside_brackets": [
                    1060
                ],
                "self.bracket_tracker.mark": [
                    1061
                ],
                "self.bracket_tracker": [
                    1072,
                    1273,
                    1061,
                    1232
                ],
                "self.maybe_remove_trailing_comma": [
                    1062
                ],
                "self.append_comment": [
                    1063
                ],
                "self.leaves.append": [
                    1064
                ],
                "self.bracket_tracker.depth": [
                    1072
                ],
                "self.is_comment": [
                    1073
                ],
                "self.append": [
                    1081
                ],
                "type": [
                    1154,
                    2824,
                    3467,
                    3084,
                    2829,
                    1178,
                    2331,
                    2041,
                    2992,
                    1086,
                    1091,
                    2887,
                    2888,
                    2889,
                    1103,
                    3038,
                    2415,
                    2416,
                    2805,
                    2806,
                    1143,
                    1145
                ],
                "property": [
                    1088,
                    1093,
                    3208,
                    1098,
                    1133,
                    1107,
                    1114,
                    1083,
                    1149
                ],
                "is_import": [
                    1096
                ],
                "self.is_class": [
                    1142,
                    1110
                ],
                "token.DOT": [
                    1824,
                    1793,
                    1825,
                    1920,
                    1832,
                    1737,
                    1770,
                    3467,
                    3477,
                    1111,
                    3480,
                    2908
                ],
                "first_leaf": [
                    1345,
                    1126,
                    1127,
                    1118,
                    1342,
                    1343
                ],
                "second_leaf": [
                    1123,
                    1125,
                    1128,
                    1129,
                    1130
                ],
                "first_leaf.type": [
                    1126,
                    1127
                ],
                "first_leaf.value": [
                    1126
                ],
                "token.ASYNC": [
                    1552,
                    1951,
                    1944,
                    1127
                ],
                "second_leaf.type": [
                    1129
                ],
                "second_leaf.value": [
                    1130
                ],
                "token.LPAR": [
                    2848,
                    2818,
                    2946,
                    1604,
                    1733,
                    2246,
                    2662,
                    2789,
                    2923,
                    2668,
                    1774,
                    1777,
                    2675,
                    2805,
                    1143,
                    2681,
                    1755,
                    2687
                ],
                "token.RPAR": [
                    2688,
                    2848,
                    1604,
                    1733,
                    2789,
                    2663,
                    2820,
                    2249,
                    2948,
                    2923,
                    2669,
                    2806,
                    1145,
                    2682,
                    3547
                ],
                "token.STRING": [
                    1154,
                    2980,
                    3083,
                    3467,
                    1938,
                    1940,
                    1820,
                    1471
                ],
                "value.startswith": [
                    1155
                ],
                "sys.maxsize": [
                    2381,
                    1158
                ],
                "depth_limit": [
                    1162
                ],
                "is_multiline_string": [
                    1169,
                    3561,
                    2685
                ],
                "token.COMMA": [
                    1216,
                    1728,
                    1699,
                    1608,
                    1704,
                    2824,
                    1900,
                    2829,
                    1647,
                    2415,
                    1745,
                    2418,
                    2963,
                    2992,
                    1721,
                    1178,
                    2331,
                    2332
                ],
                "closing.type": [
                    1179,
                    1187,
                    1183
                ],
                "closing": [
                    1187,
                    1201,
                    1203,
                    1179,
                    1212,
                    1183
                ],
                "token.RBRACE": [
                    3548,
                    1604,
                    1183
                ],
                "self.remove_trailing_comma": [
                    1184,
                    1196,
                    1190,
                    1223
                ],
                "comma": [
                    1188,
                    1189
                ],
                "comma.parent": [
                    1189
                ],
                "comma.parent.type": [
                    1189
                ],
                "self.is_import": [
                    1195
                ],
                "closing.bracket_depth": [
                    1201
                ],
                "commas": [
                    1217,
                    1202,
                    1219,
                    1222
                ],
                "opening": [
                    1203,
                    1205
                ],
                "closing.opening_bracket": [
                    1203
                ],
                "_opening_index": [
                    1211,
                    1204
                ],
                "enumerate": [
                    2056,
                    2658,
                    1204,
                    3428
                ],
                "bracket_depth": [
                    1216,
                    1215
                ],
                "leaf.parent": [
                    1921,
                    1922,
                    1929,
                    1930,
                    2453,
                    1949,
                    1950,
                    1961,
                    1962,
                    1966,
                    2862,
                    2865,
                    1974,
                    1975,
                    1218,
                    1986,
                    1987,
                    1996,
                    1621
                ],
                "leaf.parent.type": [
                    1218,
                    1922,
                    1987,
                    1962,
                    1930,
                    1966,
                    1975,
                    1950
                ],
                "comment.type": [
                    1231,
                    1458,
                    1237,
                    1241,
                    2714
                ],
                "comment": [
                    1300,
                    1301,
                    2068,
                    2071,
                    2709,
                    2710,
                    2714,
                    2726,
                    2728,
                    1454,
                    1457,
                    1458,
                    1460,
                    2746,
                    1467,
                    2751,
                    2763,
                    2764,
                    1231,
                    1234,
                    1237,
                    1241,
                    1242,
                    1248,
                    1250,
                    3435,
                    3436,
                    3437
                ],
                "self.bracket_tracker.any_open_brackets": [
                    1232
                ],
                "comment.prefix": [
                    1242,
                    1234
                ],
                "leaf_id": [
                    1248,
                    1250,
                    1246,
                    1247
                ],
                "self.comments": [
                    1248,
                    1250,
                    1255,
                    1265,
                    1266,
                    1268,
                    1300,
                    1306,
                    1247
                ],
                "append": [
                    1250
                ],
                "self.comments.get": [
                    1266,
                    1255
                ],
                "extend": [
                    1265
                ],
                "self.comments.setdefault": [
                    1265
                ],
                "self.comments.pop": [
                    1268
                ],
                "self.leaves.pop": [
                    1269
                ],
                "open_lsqb": [
                    1273,
                    1274,
                    1277
                ],
                "self.bracket_tracker.get_open_lsqb": [
                    1273
                ],
                "subscript_start": [
                    1280,
                    1283,
                    1284,
                    1285,
                    1286,
                    1277,
                    1279
                ],
                "open_lsqb.next_sibling": [
                    1277
                ],
                "subscript_start.type": [
                    1280,
                    1283
                ],
                "syms.subscriptlist": [
                    1632,
                    1784,
                    1283
                ],
                "child_towards": [
                    1284
                ],
                "any": [
                    1285
                ],
                "n.type": [
                    2985,
                    2980,
                    1286,
                    2990
                ],
                "n": [
                    2979,
                    2980,
                    2981,
                    1286,
                    2728,
                    2985,
                    2986,
                    2990,
                    2991,
                    2992,
                    2994
                ],
                "subscript_start.pre_order": [
                    1286
                ],
                "iter": [
                    1548,
                    1295
                ],
                "first": [
                    3522,
                    2723,
                    2724,
                    2725,
                    2726,
                    2787,
                    2789,
                    2791,
                    2921,
                    2923,
                    3526,
                    3561,
                    1296,
                    1297,
                    3515
                ],
                "next": [
                    3470,
                    1296,
                    3473,
                    1555,
                    3480
                ],
                "res": [
                    1847,
                    1297,
                    1299,
                    1844,
                    1301,
                    1302,
                    1845,
                    1846,
                    1850
                ],
                "first.prefix": [
                    1297,
                    2725,
                    2726
                ],
                "first.value": [
                    1297,
                    2791
                ],
                "itertools.chain.from_iterable": [
                    1300
                ],
                "itertools.chain": [
                    1300
                ],
                "itertools": [
                    1300
                ],
                "self.comments.values": [
                    1300
                ],
                "previous_line": [
                    1320
                ],
                "previous_after": [
                    1321
                ],
                "previous_defs": [
                    1322
                ],
                "self._maybe_empty_lines": [
                    1330
                ],
                "self.previous_after": [
                    1331,
                    1332
                ],
                "self.previous_line": [
                    1408,
                    1380,
                    1400,
                    1384,
                    1387,
                    1388,
                    1359,
                    1360,
                    1393,
                    1362,
                    1394,
                    1333,
                    1367,
                    1368,
                    1402,
                    1403
                ],
                "max_allowed": [
                    1344,
                    1337,
                    1339
                ],
                "current_line.depth": [
                    1379,
                    1348,
                    1415,
                    1387,
                    1394,
                    1400,
                    1338
                ],
                "self.is_pyi": [
                    1540,
                    1351,
                    1523,
                    1399,
                    1339,
                    1532
                ],
                "current_line.leaves": [
                    2416,
                    1340,
                    1342,
                    2415
                ],
                "first_leaf.prefix.count": [
                    1343
                ],
                "first_leaf.prefix": [
                    1345,
                    1343
                ],
                "min": [
                    1344,
                    2401,
                    3155
                ],
                "self.previous_defs": [
                    1379,
                    1349,
                    1350
                ],
                "self.previous_defs.pop": [
                    1350
                ],
                "current_line.is_decorator": [
                    1378,
                    1355
                ],
                "current_line.is_def": [
                    1408,
                    1355
                ],
                "current_line.is_class": [
                    1402,
                    1355
                ],
                "self._maybe_empty_lines_for_class_or_def": [
                    1356
                ],
                "self.previous_line.is_import": [
                    1360
                ],
                "current_line.is_import": [
                    1361
                ],
                "self.previous_line.depth": [
                    1400,
                    1362,
                    1387,
                    1394
                ],
                "self.previous_line.is_class": [
                    1368,
                    1402,
                    1388
                ],
                "current_line.is_triple_quoted_string": [
                    1369
                ],
                "self.previous_defs.append": [
                    1379
                ],
                "self.previous_line.is_decorator": [
                    1384
                ],
                "self.previous_line.is_def": [
                    1408,
                    1388
                ],
                "self.previous_line.is_comment": [
                    1393
                ],
                "newlines": [
                    1410,
                    1412,
                    1414,
                    1415,
                    1416,
                    1417,
                    1401,
                    2043,
                    1405,
                    1407
                ],
                "current_line.is_stub_class": [
                    1403
                ],
                "self.previous_line.is_stub_class": [
                    1403
                ],
                "remove_u_prefix": [
                    2494,
                    1431
                ],
                "allow_underscores": [
                    2627,
                    2597,
                    2599,
                    2606,
                    2609,
                    2611,
                    1432,
                    2588,
                    2589
                ],
                "self.current_line": [
                    1442,
                    1443,
                    1477,
                    1446,
                    1447,
                    1575,
                    1453,
                    1457,
                    1460,
                    1467
                ],
                "self.current_line.depth": [
                    1443
                ],
                "complete_line": [
                    1448,
                    1446,
                    1447
                ],
                "complete_line.depth": [
                    1447
                ],
                "any_open_brackets": [
                    1453,
                    1470,
                    1455
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1453,
                    1575
                ],
                "self.current_line.bracket_tracker": [
                    1453,
                    1575
                ],
                "generate_comments": [
                    1454
                ],
                "self.current_line.append": [
                    1457,
                    1467,
                    1460,
                    1477
                ],
                "self.line": [
                    1537,
                    1572,
                    1541,
                    1576,
                    1546,
                    1483,
                    1567,
                    1517,
                    1491,
                    1562,
                    1461,
                    1465,
                    1498,
                    1468,
                    1535
                ],
                "normalize_prefix": [
                    2328,
                    2352,
                    1470
                ],
                "self.normalize_strings": [
                    1471
                ],
                "normalize_string_prefix": [
                    1472
                ],
                "self.remove_u_prefix": [
                    1472
                ],
                "normalize_string_quotes": [
                    1473
                ],
                "token.NUMBER": [
                    2985,
                    1474,
                    1739,
                    1820
                ],
                "normalize_numeric_literal": [
                    1475
                ],
                "self.allow_underscores": [
                    1475
                ],
                "visit_default": [
                    1478
                ],
                "super": [
                    1478
                ],
                "normalize_invisible_parens": [
                    1514
                ],
                "parens": [
                    1514
                ],
                "child.type": [
                    2660,
                    3076,
                    1516,
                    1552,
                    2675,
                    3063,
                    2679,
                    3065,
                    2906,
                    3070
                ],
                "child.value": [
                    3064,
                    2692,
                    1516,
                    2677
                ],
                "keywords": [
                    1516
                ],
                "is_stub_suite": [
                    1523,
                    1540
                ],
                "is_suite_like": [
                    1530,
                    1531
                ],
                "node.parent": [
                    1540,
                    1862,
                    1863,
                    1530,
                    1855
                ],
                "node.parent.type": [
                    1530
                ],
                "is_stub_body": [
                    1532,
                    2893
                ],
                "children": [
                    3061,
                    1555,
                    1548,
                    1549
                ],
                "internal_stmt": [
                    1555,
                    1556
                ],
                "internal_stmt.children": [
                    1556
                ],
                "self.visit_stmt": [
                    1581
                ],
                "\u00d8": [
                    1582,
                    1590,
                    1592,
                    1593,
                    1594,
                    1595,
                    1596,
                    1598
                ],
                "self.visit_assert_stmt": [
                    1583
                ],
                "self.visit_if_stmt": [
                    1584
                ],
                "self.visit_while_stmt": [
                    1587
                ],
                "self.visit_for_stmt": [
                    1588
                ],
                "self.visit_try_stmt": [
                    1589
                ],
                "self.visit_except_clause": [
                    1592
                ],
                "self.visit_with_stmt": [
                    1593
                ],
                "self.visit_funcdef": [
                    1594
                ],
                "self.visit_classdef": [
                    1595
                ],
                "self.visit_expr_stmt": [
                    1596
                ],
                "self.visit_return_stmt": [
                    1597
                ],
                "self.visit_import_from": [
                    1598
                ],
                "self.visit_async_funcdef": [
                    1599
                ],
                "self.visit_async_stmt": [
                    1599
                ],
                "self.visit_decorated": [
                    1600
                ],
                "self.visit_decorators": [
                    1600
                ],
                "IMPLICIT_TUPLE": [
                    2827,
                    1603
                ],
                "syms.testlist": [
                    1603
                ],
                "syms.exprlist": [
                    1603
                ],
                "token.LSQB": [
                    1604,
                    1742
                ],
                "token.LBRACE": [
                    1604
                ],
                "BRACKET.keys": [
                    1605
                ],
                "BRACKET.values": [
                    1606
                ],
                "ALWAYS_NO_SPACE": [
                    1608,
                    1623
                ],
                "SPACE": [
                    1830,
                    1674,
                    1838,
                    1618,
                    1650,
                    1785
                ],
                "DOUBLESPACE": [
                    1627,
                    1619
                ],
                "t": [
                    1824,
                    1793,
                    1828,
                    1733,
                    1737,
                    1643,
                    1742,
                    1774,
                    1712,
                    1620,
                    1750,
                    1623,
                    2454,
                    2457,
                    1626,
                    1820,
                    1630
                ],
                "p.type": [
                    1792,
                    1797,
                    1802,
                    2459,
                    2460,
                    1823,
                    1697,
                    1702,
                    1707,
                    1835,
                    2866,
                    2874,
                    1724,
                    1731,
                    1748,
                    1630,
                    1761,
                    1765,
                    1773,
                    1780
                ],
                "syms.subscript": [
                    1673,
                    1780,
                    1812,
                    1631
                ],
                "syms.sliceop": [
                    1633,
                    1673,
                    1835,
                    1780,
                    1813
                ],
                "prev": [
                    1793,
                    1799,
                    1804,
                    2715,
                    2716,
                    1694,
                    1825,
                    1699,
                    1704,
                    1832,
                    1709,
                    1713,
                    1716,
                    1719,
                    1721,
                    1726,
                    1736,
                    1745,
                    1753,
                    1758,
                    1637,
                    1638,
                    1766,
                    1777,
                    1782
                ],
                "leaf.prev_sibling": [
                    1954,
                    1955,
                    1637
                ],
                "prevp": [
                    1666,
                    1668,
                    1669,
                    1672,
                    1673,
                    1677,
                    1678,
                    1679,
                    1805,
                    1806,
                    1809,
                    1811,
                    1684,
                    1685,
                    1686,
                    1687,
                    1688,
                    1689,
                    1817,
                    1727,
                    1728,
                    1738,
                    1739,
                    1754,
                    1755,
                    1639,
                    1640,
                    1769,
                    1770,
                    1644,
                    1647,
                    1652,
                    1653,
                    1654,
                    1662
                ],
                "preceding_leaf": [
                    1639,
                    1769,
                    1738,
                    1805,
                    1754,
                    2715,
                    1727
                ],
                "prevp.type": [
                    1728,
                    1668,
                    1640,
                    1672,
                    1770,
                    1739,
                    1644,
                    1806,
                    1647,
                    1679,
                    1811,
                    1652,
                    1684,
                    1817,
                    1755
                ],
                "complex_subscript": [
                    1674,
                    1789,
                    1647
                ],
                "token.EQUAL": [
                    1712,
                    1716,
                    1652,
                    1750,
                    1817,
                    1758
                ],
                "prevp.parent": [
                    1673,
                    1677,
                    1678,
                    1809,
                    1653,
                    1654,
                    1685,
                    1686,
                    1662
                ],
                "prevp.parent.type": [
                    1673,
                    1678,
                    1654,
                    1686,
                    1662
                ],
                "syms.parameters": [
                    1657,
                    1697
                ],
                "prevp.prefix": [
                    1666
                ],
                "is_vararg": [
                    1914,
                    1669,
                    2402
                ],
                "syms.factor": [
                    1802,
                    1678,
                    1930
                ],
                "prevp.prev_sibling": [
                    1688,
                    1689,
                    1687
                ],
                "prevp.prev_sibling.type": [
                    1688
                ],
                "prevp.prev_sibling.value": [
                    1689
                ],
                "prev.type": [
                    1825,
                    1699,
                    1799,
                    1704,
                    1832,
                    1758,
                    1713,
                    1745,
                    1777,
                    1716,
                    1721,
                    2716,
                    1694
                ],
                "syms.tname": [
                    1713,
                    1724
                ],
                "prev.prefix": [
                    1719
                ],
                "syms.decorator": [
                    1761
                ],
                "syms.dotted_name": [
                    1922,
                    1765
                ],
                "p.parent": [
                    1784,
                    2872,
                    2869,
                    1783
                ],
                "p.parent.type": [
                    1784
                ],
                "prevp_parent": [
                    1809,
                    1810,
                    1811,
                    1817
                ],
                "prevp_parent.type": [
                    1817,
                    1811
                ],
                "syms.import_from": [
                    1922,
                    2956,
                    2672,
                    3089,
                    2460,
                    1823
                ],
                "node.prev_sibling": [
                    1844
                ],
                "res.leaves": [
                    1850
                ],
                "descendant": [
                    1861
                ],
                "ancestor": [
                    1862
                ],
                "same_prefix": [
                    1872,
                    1879
                ],
                "container": [
                    1888,
                    1889,
                    2761,
                    2762,
                    2763,
                    2767,
                    1873,
                    1874,
                    1875,
                    2769
                ],
                "parent": [
                    1888,
                    2724,
                    1875,
                    1876,
                    2739,
                    2741,
                    1879,
                    1882,
                    1885
                ],
                "container.parent": [
                    1875
                ],
                "prefix": [
                    2529,
                    2051,
                    2563,
                    2725,
                    2726,
                    2056,
                    2543,
                    2546,
                    1879,
                    2746,
                    2524
                ],
                "parent.children": [
                    1879
                ],
                "parent.type": [
                    1882
                ],
                "parent.prev_sibling": [
                    1885
                ],
                "parent.prev_sibling.type": [
                    1885
                ],
                "previous.type": [
                    1978,
                    1923,
                    1940,
                    1990
                ],
                "syms.comp_for": [
                    1950
                ],
                "syms.old_comp_for": [
                    1950
                ],
                "leaf.prev_sibling.value": [
                    1955
                ],
                "syms.comp_if": [
                    1962
                ],
                "syms.old_comp_if": [
                    1962
                ],
                "syms.comp_op": [
                    1987,
                    1975
                ],
                "previous.value": [
                    1979,
                    1991
                ],
                "FMT_OFF": [
                    2002,
                    2653,
                    2710
                ],
                "FMT_ON": [
                    2003,
                    2764
                ],
                "pc": [
                    2025,
                    2026,
                    2652,
                    2653
                ],
                "list_comments": [
                    2025,
                    2763,
                    2652,
                    2709
                ],
                "token.ENDMARKER": [
                    2025,
                    2762
                ],
                "pc.type": [
                    2026
                ],
                "pc.value": [
                    2026,
                    2653
                ],
                "pc.newlines": [
                    2026
                ],
                "consumed": [
                    2057,
                    2044,
                    2054,
                    2071
                ],
                "ProtoComment": [
                    2048,
                    2050,
                    2070
                ],
                "nlines": [
                    2074,
                    2060,
                    2071,
                    2055
                ],
                "index": [
                    2689,
                    2658,
                    2690,
                    3430,
                    2056,
                    2664,
                    2665,
                    2671,
                    2064,
                    2736,
                    2738,
                    3023,
                    3439,
                    3413,
                    3415,
                    3416,
                    2681,
                    3038
                ],
                "prefix.split": [
                    2056
                ],
                "line.lstrip": [
                    2058
                ],
                "line.startswith": [
                    2061
                ],
                "is_endmarker": [
                    2064
                ],
                "comment_type": [
                    2065,
                    2067,
                    2071
                ],
                "make_comment": [
                    2068
                ],
                "result.append": [
                    2337,
                    2069,
                    2335
                ],
                "lru_cache": [
                    3142,
                    2047
                ],
                "content": [
                    2086,
                    2087,
                    2090,
                    2091,
                    2092,
                    2093,
                    2094
                ],
                "content.rstrip": [
                    2086
                ],
                "line.is_comment": [
                    2110
                ],
                "line_str": [
                    2114,
                    2116,
                    2149,
                    3447,
                    3448,
                    3450,
                    3451
                ],
                "strip": [
                    3448,
                    2114,
                    2149,
                    2302
                ],
                "line.should_explode": [
                    2115
                ],
                "is_line_short_enough": [
                    2129,
                    2115,
                    2267
                ],
                "split_funcs": [
                    2121,
                    2123,
                    2139,
                    2141,
                    2142
                ],
                "line.is_def": [
                    2122
                ],
                "left_hand_split": [
                    2123
                ],
                "omit": [
                    3046,
                    3047,
                    3016,
                    3017,
                    3049,
                    2127,
                    2128,
                    2225,
                    2259,
                    2261
                ],
                "generate_trailers_to_omit": [
                    2127
                ],
                "right_hand_split": [
                    2128,
                    2136,
                    2261
                ],
                "line.inside_brackets": [
                    2438,
                    2410,
                    2380,
                    2392,
                    2138,
                    2428
                ],
                "delimiter_split": [
                    2139
                ],
                "standalone_comment_split": [
                    2139
                ],
                "rhs": [
                    2139,
                    2141
                ],
                "split_func": [
                    2148,
                    2349,
                    2142,
                    2351
                ],
                "l": [
                    2148,
                    2149,
                    2153,
                    2351,
                    2352,
                    2353
                ],
                "CannotSplit": [
                    2368,
                    2305,
                    2274,
                    2308,
                    2150,
                    2374,
                    2378,
                    2155,
                    2191,
                    2264,
                    2233,
                    2426,
                    2269
                ],
                "result.extend": [
                    2152
                ],
                "tail_leaves": [
                    2240,
                    2213,
                    2184,
                    2216,
                    2222,
                    2224,
                    2195,
                    2235,
                    2173
                ],
                "body_leaves": [
                    2180,
                    2214,
                    2184,
                    2220,
                    2189,
                    2222,
                    2194,
                    2228,
                    2236,
                    2174,
                    2239
                ],
                "head_leaves": [
                    2176,
                    2215,
                    2184,
                    2186,
                    2222,
                    2193,
                    2229,
                    2237,
                    2238,
                    2175
                ],
                "current_leaves": [
                    2176,
                    2180,
                    2184,
                    2185,
                    2186,
                    2216,
                    2220,
                    2189,
                    2222,
                    2223,
                    2224,
                    2228
                ],
                "matching_bracket": [
                    2177,
                    2182,
                    2188,
                    2190,
                    2193,
                    2194,
                    2195
                ],
                "line.leaves": [
                    2178,
                    3518,
                    3430,
                    3463,
                    2441,
                    2219,
                    2962,
                    3539,
                    3038,
                    3515,
                    3513,
                    2395,
                    3516,
                    3517,
                    2366
                ],
                "current_leaves.append": [
                    2185,
                    2223
                ],
                "head": [
                    2241,
                    2273,
                    2283,
                    2193,
                    2196,
                    2197,
                    2238
                ],
                "bracket_split_build_line": [
                    2240,
                    2193,
                    2194,
                    2195,
                    2238,
                    2239
                ],
                "body": [
                    2194,
                    2196,
                    2197,
                    2239,
                    2241,
                    2244,
                    2255,
                    2257,
                    2266,
                    2267,
                    2528,
                    2530,
                    2536,
                    2283,
                    2539,
                    2540,
                    2542,
                    2543,
                    2555,
                    2303
                ],
                "tail": [
                    2240,
                    2241,
                    2273,
                    2283,
                    2195,
                    2196,
                    2197,
                    2302
                ],
                "bracket_split_succeeded_or_raise": [
                    2241,
                    2196
                ],
                "Collection": [
                    2203
                ],
                "closing_bracket": [
                    3045,
                    3046,
                    2249,
                    2250,
                    2218,
                    2282,
                    3021,
                    3053,
                    2227,
                    2259,
                    2229
                ],
                "reversed": [
                    2219,
                    3428,
                    3414
                ],
                "tail_leaves.reverse": [
                    2235
                ],
                "body_leaves.reverse": [
                    2236
                ],
                "head_leaves.reverse": [
                    2237
                ],
                "body.should_explode": [
                    2244
                ],
                "opening_bracket.type": [
                    2246
                ],
                "opening_bracket.value": [
                    2957,
                    2247
                ],
                "closing_bracket.type": [
                    2249
                ],
                "closing_bracket.value": [
                    2250
                ],
                "line.is_import": [
                    2253
                ],
                "body.contains_standalone_comments": [
                    2255
                ],
                "can_omit_invisible_parens": [
                    2257
                ],
                "can_be_split": [
                    2266
                ],
                "head.contains_multiline_strings": [
                    2273
                ],
                "tail.contains_multiline_strings": [
                    2273
                ],
                "ensure_visible": [
                    2281,
                    2282
                ],
                "tail_len": [
                    2304,
                    2307,
                    2302,
                    2310
                ],
                "original.depth": [
                    2322
                ],
                "original": [
                    2336,
                    2322,
                    2330,
                    3398
                ],
                "is_body": [
                    2338,
                    2323
                ],
                "result.inside_brackets": [
                    2324
                ],
                "result.depth": [
                    2325
                ],
                "original.is_import": [
                    2330
                ],
                "leaves.append": [
                    2332
                ],
                "comment_after": [
                    2336,
                    2337,
                    2444,
                    2445,
                    2398,
                    2399
                ],
                "original.comments_after": [
                    2336
                ],
                "result.should_explode": [
                    2339
                ],
                "l.leaves": [
                    2352
                ],
                "wraps": [
                    2349
                ],
                "split_wrapper": [
                    2355
                ],
                "last_leaf": [
                    2962,
                    2963,
                    2372,
                    2366
                ],
                "bt": [
                    2370,
                    2372,
                    2406,
                    2377,
                    3499,
                    3500,
                    2926,
                    3504,
                    2929,
                    3505,
                    2932,
                    2934
                ],
                "line.bracket_tracker": [
                    2370,
                    3499,
                    2964
                ],
                "delimiter_priority": [
                    2372,
                    2407,
                    2376,
                    2377,
                    2414
                ],
                "bt.max_delimiter_priority": [
                    3504,
                    2372,
                    2934
                ],
                "bt.delimiter_count_with_priority": [
                    2377,
                    3505
                ],
                "line.depth": [
                    3524,
                    2438,
                    2410,
                    3019,
                    2380,
                    3566,
                    2392,
                    2428
                ],
                "lowest_depth": [
                    2401,
                    2402,
                    2381
                ],
                "trailing_comma_safe": [
                    2413,
                    2405,
                    2382
                ],
                "current_line.append_safe": [
                    2434,
                    2388
                ],
                "current_line.append": [
                    2393,
                    2418,
                    2439
                ],
                "append_to_line": [
                    2442,
                    2396,
                    2445,
                    2399
                ],
                "line.comments_after": [
                    3436,
                    2444,
                    2398
                ],
                "leaf_priority": [
                    2406,
                    2407
                ],
                "bt.delimiters.get": [
                    2406
                ],
                "bt.delimiters": [
                    3500,
                    2406
                ],
                "dont_increase_indentation": [
                    2422,
                    2358
                ],
                "line.contains_standalone_comments": [
                    2425,
                    3452
                ],
                "syms.import_name": [
                    2459
                ],
                "spl": [
                    2472,
                    2473,
                    2474,
                    2475
                ],
                "leaf.prefix.split": [
                    2472
                ],
                "nl_count": [
                    2474,
                    2476,
                    2477
                ],
                "count": [
                    2474
                ],
                "match": [
                    2496,
                    2490,
                    2491,
                    2492
                ],
                "re.match": [
                    2490
                ],
                "re.DOTALL": [
                    2490
                ],
                "orig_prefix": [
                    2492,
                    2493
                ],
                "match.group": [
                    2496,
                    2492
                ],
                "new_prefix": [
                    2496,
                    2493,
                    2495
                ],
                "orig_prefix.lower": [
                    2493
                ],
                "new_prefix.replace": [
                    2495
                ],
                "leaf.value.lstrip": [
                    2507,
                    2879
                ],
                "orig_quote": [
                    2528,
                    2560,
                    2543,
                    2512,
                    2544,
                    2515,
                    2518,
                    2520,
                    2527
                ],
                "new_quote": [
                    2563,
                    2539,
                    2513,
                    2545,
                    2516,
                    2519,
                    2552,
                    2525,
                    2526
                ],
                "first_quote_pos": [
                    2520,
                    2521,
                    2528,
                    2524
                ],
                "leaf.value.find": [
                    2520
                ],
                "unescaped_new_quote": [
                    2545,
                    2530,
                    2525
                ],
                "re.compile": [
                    3408,
                    2525,
                    2526,
                    2527
                ],
                "escaped_new_quote": [
                    2539,
                    2526
                ],
                "escaped_orig_quote": [
                    2544,
                    2527
                ],
                "prefix.casefold": [
                    2529,
                    2546
                ],
                "unescaped_new_quote.search": [
                    2530
                ],
                "new_body": [
                    2563,
                    2536,
                    2539,
                    2540,
                    2542,
                    2544,
                    2545,
                    2547,
                    2552,
                    2554,
                    2556
                ],
                "sub_twice": [
                    2544,
                    2545,
                    2539
                ],
                "matches": [
                    2547,
                    2548
                ],
                "re.findall": [
                    2547
                ],
                "m": [
                    2548,
                    2549
                ],
                "orig_escape_count": [
                    2560,
                    2555,
                    2557
                ],
                "body.count": [
                    2555
                ],
                "new_escape_count": [
                    2560,
                    2556,
                    2557
                ],
                "new_body.count": [
                    2556
                ],
                "text": [
                    2572,
                    2573,
                    2576,
                    2578,
                    2579,
                    2580,
                    2581,
                    2590,
                    2591,
                    2592,
                    2593,
                    2597,
                    2599,
                    2600,
                    2605,
                    2606,
                    2608,
                    2628,
                    2630,
                    2631,
                    2633,
                    2638,
                    2640
                ],
                "leaf.value.lower": [
                    2572
                ],
                "text.startswith": [
                    2576,
                    2573
                ],
                "after.upper": [
                    2579
                ],
                "text.split": [
                    2608,
                    2581
                ],
                "sign": [
                    2585,
                    2582,
                    2590
                ],
                "after.startswith": [
                    2586,
                    2583
                ],
                "format_float_or_int_string": [
                    2588,
                    2597,
                    2599
                ],
                "format_int_string": [
                    2609,
                    2611,
                    2589,
                    2606
                ],
                "text.endswith": [
                    2591
                ],
                "number": [
                    2592,
                    2597
                ],
                "suffix": [
                    2593,
                    2595,
                    2596,
                    2597
                ],
                "text.replace": [
                    2630
                ],
                "count_from_end": [
                    2635
                ],
                "lstrip": [
                    2638
                ],
                "format": [
                    2638
                ],
                "join": [
                    3301,
                    2728,
                    3308,
                    3309,
                    2640,
                    3254,
                    3358
                ],
                "i": [
                    2640
                ],
                "check_lpar": [
                    2657,
                    2659,
                    2692
                ],
                "maybe_make_parens_invisible_in_atom": [
                    2794,
                    2661
                ],
                "lpar": [
                    2816,
                    2848,
                    2690,
                    2818,
                    2662,
                    2665,
                    2668,
                    2671,
                    2847,
                    2687
                ],
                "rpar": [
                    2688,
                    2816,
                    2690,
                    2848,
                    2820,
                    2663,
                    2665,
                    2669,
                    2671,
                    2847
                ],
                "child.remove": [
                    2664,
                    2689,
                    2670
                ],
                "node.insert_child": [
                    2681,
                    2665,
                    2690,
                    2671
                ],
                "is_one_tuple": [
                    2666,
                    2781
                ],
                "node.append_child": [
                    2682
                ],
                "parens_after": [
                    2692
                ],
                "try_again": [
                    2697,
                    2698,
                    2699
                ],
                "convert_one_fmt_off_pair": [
                    2699
                ],
                "node.leaves": [
                    2707
                ],
                "previous_consumed": [
                    2746,
                    2708,
                    2751
                ],
                "comment.value": [
                    2728,
                    2764,
                    3437,
                    2710
                ],
                "ignored_nodes": [
                    2720,
                    2723,
                    2728,
                    2735,
                    2719
                ],
                "generate_ignored_nodes": [
                    2719
                ],
                "first.parent": [
                    2724
                ],
                "comment.consumed": [
                    2726,
                    2751
                ],
                "hidden_value": [
                    2745,
                    2730,
                    2733,
                    2727
                ],
                "hidden_value.endswith": [
                    2730
                ],
                "first_idx": [
                    2734,
                    2737,
                    2738,
                    2740,
                    2742
                ],
                "ignored": [
                    2736,
                    2735
                ],
                "ignored.remove": [
                    2736
                ],
                "parent.insert_child": [
                    2741
                ],
                "comment.newlines": [
                    2746
                ],
                "container_of": [
                    2761
                ],
                "container.type": [
                    2762
                ],
                "container.prefix": [
                    2763
                ],
                "container.next_sibling": [
                    2769
                ],
                "is_empty_tuple": [
                    2780
                ],
                "is_yield": [
                    2849,
                    2782
                ],
                "max_delimiter_priority_in_atom": [
                    2783
                ],
                "last": [
                    3552,
                    3553,
                    3554,
                    2788,
                    2789,
                    2792,
                    2922,
                    2923,
                    3570,
                    3547,
                    3548,
                    3518
                ],
                "first.type": [
                    3522,
                    2923,
                    2789
                ],
                "last.type": [
                    3552,
                    2789,
                    2923,
                    3547,
                    3548
                ],
                "last.value": [
                    2792
                ],
                "gexp": [
                    2816,
                    2824,
                    2819
                ],
                "lpar.type": [
                    2848,
                    2818
                ],
                "gexp.type": [
                    2819
                ],
                "rpar.type": [
                    2848,
                    2820
                ],
                "gexp.children": [
                    2824
                ],
                "syms.yield_expr": [
                    2835
                ],
                "expr": [
                    2849,
                    2847
                ],
                "within": [
                    2874
                ],
                "syms.simple_stmt": [
                    2898,
                    3076
                ],
                "child.children": [
                    3078,
                    3082,
                    3084,
                    3066,
                    2907,
                    2908,
                    3071
                ],
                "all": [
                    2908
                ],
                "c": [
                    2928,
                    2929,
                    2931,
                    2927
                ],
                "bt.mark": [
                    2929,
                    2932
                ],
                "c.leaves": [
                    2931
                ],
                "opening_bracket.parent": [
                    2955,
                    2956
                ],
                "opening_bracket.parent.type": [
                    2956
                ],
                "last_leaf.type": [
                    2963
                ],
                "max_priority": [
                    3504,
                    3505,
                    2964,
                    3509,
                    2968
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    2964
                ],
                "node.pre_order": [
                    2979
                ],
                "value_head": [
                    2981,
                    2982
                ],
                "n.value": [
                    2986,
                    2981
                ],
                "n.children": [
                    2992,
                    2994,
                    2991
                ],
                "ch": [
                    2994,
                    2995,
                    2998,
                    2999
                ],
                "ch.type": [
                    2995,
                    2998
                ],
                "argch": [
                    3000,
                    2999
                ],
                "ch.children": [
                    2999
                ],
                "argch.type": [
                    3000
                ],
                "length": [
                    3524,
                    3431,
                    3529,
                    3530,
                    3019,
                    3437,
                    3566,
                    3439,
                    3024,
                    3025,
                    3569,
                    3571
                ],
                "inner_brackets": [
                    3042,
                    3047,
                    3048,
                    3022,
                    3036
                ],
                "leaf_length": [
                    3525,
                    3529,
                    3023,
                    3024,
                    3568,
                    3569,
                    3028
                ],
                "enumerate_with_length": [
                    3568,
                    3525,
                    3023
                ],
                "has_inline_comment": [
                    3028,
                    3029
                ],
                "inner_brackets.add": [
                    3042,
                    3036
                ],
                "omit.add": [
                    3046
                ],
                "omit.update": [
                    3047
                ],
                "inner_brackets.clear": [
                    3048
                ],
                "imports": [
                    3096,
                    3058,
                    3093
                ],
                "syms.import_as_name": [
                    3065
                ],
                "orig_name": [
                    3066,
                    3067,
                    3068,
                    3069
                ],
                "orig_name.type": [
                    3068
                ],
                "orig_name.value": [
                    3069
                ],
                "syms.import_as_names": [
                    3070
                ],
                "get_imports_from_children": [
                    3093,
                    3071
                ],
                "Generator": [
                    3060
                ],
                "first_child": [
                    3078,
                    3079,
                    3083,
                    3089,
                    3090,
                    3093
                ],
                "first_child.type": [
                    3089,
                    3083
                ],
                "module_name": [
                    3090,
                    3091
                ],
                "first_child.children": [
                    3090,
                    3093
                ],
                "module_name.value": [
                    3091
                ],
                "Pattern": [
                    3392,
                    3401,
                    3102,
                    3103
                ],
                "root.is_absolute": [
                    3113
                ],
                "path.iterdir": [
                    3114
                ],
                "normalized_path": [
                    3128,
                    3137,
                    3116,
                    3127
                ],
                "as_posix": [
                    3116
                ],
                "relative_to": [
                    3116
                ],
                "child.resolve": [
                    3116
                ],
                "child.is_symlink": [
                    3118
                ],
                "report.path_ignored": [
                    3130,
                    3119
                ],
                "child.is_dir": [
                    3133,
                    3126
                ],
                "exclude_match": [
                    3128,
                    3129
                ],
                "exclude.search": [
                    3128
                ],
                "exclude_match.group": [
                    3129
                ],
                "child.is_file": [
                    3136
                ],
                "include_match": [
                    3137,
                    3138
                ],
                "include.search": [
                    3137
                ],
                "srcs": [
                    3152,
                    3155
                ],
                "resolve": [
                    3153,
                    3155
                ],
                "common_base": [
                    3155,
                    3156,
                    3158,
                    3159
                ],
                "common_base.is_dir": [
                    3156
                ],
                "directory": [
                    3169,
                    3159,
                    3160,
                    3161,
                    3163,
                    3164,
                    3166,
                    3167
                ],
                "common_base.parents": [
                    3159
                ],
                "is_dir": [
                    3160,
                    3163
                ],
                "is_file": [
                    3166
                ],
                "change_count": [
                    3179
                ],
                "same_count": [
                    3180
                ],
                "failure_count": [
                    3181
                ],
                "reformatted": [
                    3233,
                    3237,
                    3244,
                    3186,
                    3188
                ],
                "self.check": [
                    3232,
                    3186,
                    3222
                ],
                "self.verbose": [
                    3187,
                    3205,
                    3191
                ],
                "self.quiet": [
                    3187
                ],
                "self.change_count": [
                    3241,
                    3242,
                    3244,
                    3189,
                    3222
                ],
                "msg": [
                    3193,
                    3195,
                    3196
                ],
                "self.same_count": [
                    3248,
                    3197,
                    3246,
                    3247
                ],
                "message": [
                    3201,
                    3206
                ],
                "self.failure_count": [
                    3202,
                    3249,
                    3250,
                    3219,
                    3252
                ],
                "unchanged": [
                    3248,
                    3234,
                    3238
                ],
                "failed": [
                    3235,
                    3252,
                    3239
                ],
                "report.append": [
                    3248,
                    3243,
                    3251
                ],
                "click.style": [
                    3252,
                    3244
                ],
                "ast.AST": [
                    3280,
                    3277,
                    3263
                ],
                "ast": [
                    3299,
                    3277,
                    3280,
                    3289,
                    3263
                ],
                "node.__class__.__name__": [
                    3265,
                    3286
                ],
                "node.__class__": [
                    3265,
                    3286
                ],
                "field": [
                    3273,
                    3267,
                    3269
                ],
                "node._fields": [
                    3267
                ],
                "AttributeError": [
                    3270
                ],
                "item": [
                    3276,
                    3277,
                    3278
                ],
                "_v": [
                    3281,
                    3308,
                    3309,
                    3278
                ],
                "value.__class__.__name__": [
                    3284
                ],
                "value.__class__": [
                    3284
                ],
                "src_ast": [
                    3289,
                    3308
                ],
                "ast.parse": [
                    3289,
                    3299
                ],
                "major": [
                    3291,
                    3294
                ],
                "minor": [
                    3291,
                    3294
                ],
                "sys.version_info": [
                    3291
                ],
                "AssertionError": [
                    3312,
                    3330,
                    3292,
                    3302
                ],
                "dst_ast": [
                    3299,
                    3309
                ],
                "log": [
                    3301,
                    3334,
                    3305,
                    3311,
                    3316,
                    3326
                ],
                "dump_to_file": [
                    3301,
                    3326,
                    3311
                ],
                "traceback.format_tb": [
                    3301
                ],
                "traceback": [
                    3301
                ],
                "exc.__traceback__": [
                    3301
                ],
                "src_ast_str": [
                    3308,
                    3310,
                    3311
                ],
                "dst_ast_str": [
                    3309,
                    3310,
                    3311
                ],
                "newdst": [
                    3328,
                    3324,
                    3325
                ],
                "tempfile.NamedTemporaryFile": [
                    3342
                ],
                "tempfile": [
                    3342
                ],
                "output": [
                    3345
                ],
                "f.name": [
                    3349
                ],
                "a_lines": [
                    3356,
                    3359
                ],
                "a.split": [
                    3356
                ],
                "a": [
                    3356
                ],
                "b_lines": [
                    3357,
                    3359
                ],
                "b.split": [
                    3357
                ],
                "b": [
                    3357
                ],
                "difflib.unified_diff": [
                    3359
                ],
                "difflib": [
                    3359
                ],
                "a_name": [
                    3359
                ],
                "b_name": [
                    3359
                ],
                "task.cancel": [
                    3379,
                    3367
                ],
                "to_cancel": [
                    3378,
                    3381,
                    3374,
                    3375
                ],
                "asyncio.Task.all_tasks": [
                    3374
                ],
                "task.done": [
                    3374
                ],
                "cf_logger": [
                    3387,
                    3388
                ],
                "logging.getLogger": [
                    3387
                ],
                "logging": [
                    3387,
                    3388
                ],
                "cf_logger.setLevel": [
                    3388
                ],
                "logging.CRITICAL": [
                    3388
                ],
                "loop.close": [
                    3389
                ],
                "regex.sub": [
                    3398
                ],
                "regex": [
                    3408,
                    3406,
                    3398,
                    3407
                ],
                "replacement": [
                    3398
                ],
                "Sequence": [
                    3427,
                    3411
                ],
                "sequence": [
                    3413,
                    3414
                ],
                "element": [
                    3414,
                    3415
                ],
                "op": [
                    3426,
                    3430
                ],
                "cast": [
                    3426
                ],
                "enumerate_reversed": [
                    3428
                ],
                "call_count": [
                    3476,
                    3468,
                    3486
                ],
                "dot_count": [
                    3486,
                    3469,
                    3478
                ],
                "next.type": [
                    3480,
                    3473
                ],
                "second": [
                    3522,
                    3516
                ],
                "penultimate": [
                    3557,
                    3517
                ],
                "second.type": [
                    3522
                ],
                "remainder": [
                    3528,
                    3535,
                    3523,
                    3527
                ],
                "_index": [
                    3568,
                    3539,
                    3525
                ],
                "last.parent": [
                    3553,
                    3554
                ],
                "last.parent.type": [
                    3554
                ],
                "penultimate.type": [
                    3557
                ],
                "seen_other_brackets": [
                    3576,
                    3571,
                    3567
                ],
                "last.opening_bracket": [
                    3570
                ],
                "mode.value": [
                    3582
                ],
                "cache_file": [
                    3590,
                    3591,
                    3594,
                    3629,
                    3634
                ],
                "get_cache_file": [
                    3629,
                    3590
                ],
                "cache_file.exists": [
                    3591
                ],
                "cache_file.open": [
                    3594,
                    3634
                ],
                "fobj": [
                    3634,
                    3594,
                    3635,
                    3596
                ],
                "pickle.load": [
                    3596
                ],
                "pickle": [
                    3635,
                    3596,
                    3597
                ],
                "pickle.UnpicklingError": [
                    3597
                ],
                "stat": [
                    3605,
                    3606
                ],
                "path.stat": [
                    3605
                ],
                "stat.st_mtime": [
                    3606
                ],
                "stat.st_size": [
                    3606
                ],
                "todo": [
                    3619,
                    3622,
                    3615
                ],
                "cache.get": [
                    3618
                ],
                "todo.add": [
                    3619
                ],
                "done.add": [
                    3621
                ],
                "CACHE_DIR.exists": [
                    3631
                ],
                "CACHE_DIR.mkdir": [
                    3632
                ],
                "new_cache": [
                    3633,
                    3635
                ],
                "pickle.dump": [
                    3635
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    3635
                ],
                "ModuleNotFoundError": [
                    3654
                ],
                "module": [
                    3657,
                    3658,
                    3659
                ],
                "core": [
                    3657
                ],
                "_unicodefun": [
                    3657
                ],
                "hasattr": [
                    3658
                ],
                "module._verify_python3_env": [
                    3659
                ],
                "freeze_support": [
                    3663
                ],
                "patch_click": [
                    3664
                ],
                "main": [
                    3665
                ],
                "__name__": [
                    3668
                ],
                "patched_main": [
                    3669
                ]
            },
            "filtered_variables_in_file": {
                "__version__": [
                    57,
                    51,
                    278
                ],
                "DEFAULT_LINE_LENGTH": [
                    52,
                    183
                ],
                "DEFAULT_EXCLUDES": [
                    251,
                    53
                ],
                "DEFAULT_INCLUDES": [
                    56,
                    238
                ],
                "CACHE_DIR": [
                    78,
                    3631,
                    3632,
                    57,
                    3582
                ],
                "Path": [
                    388,
                    3204,
                    3603,
                    3609,
                    3100,
                    3101,
                    3105,
                    3626,
                    433,
                    57,
                    3143,
                    74,
                    336,
                    3153,
                    338,
                    3155,
                    3183,
                    3581,
                    510,
                    3199
                ],
                "user_cache_dir": [
                    57
                ],
                "FileContent": [
                    626,
                    659,
                    604,
                    61
                ],
                "Encoding": [
                    659,
                    62
                ],
                "NewLine": [
                    659,
                    63
                ],
                "Depth": [
                    64,
                    898
                ],
                "NodeType": [
                    65,
                    898,
                    2854
                ],
                "LeafID": [
                    66,
                    899,
                    3016,
                    1033,
                    3022,
                    948,
                    2203,
                    3006
                ],
                "Priority": [
                    67,
                    899
                ],
                "Index": [
                    3427,
                    3411,
                    68,
                    3421
                ],
                "LN": [
                    2833,
                    1450,
                    1841,
                    1859,
                    2756,
                    69,
                    1861,
                    2761,
                    1867,
                    2896,
                    721,
                    1873,
                    2772,
                    2006,
                    2912,
                    737,
                    748,
                    2800,
                    3060,
                    2810
                ],
                "Union": [
                    769,
                    69,
                    143
                ],
                "Leaf": [
                    2688,
                    769,
                    898,
                    900,
                    2692,
                    1030,
                    2566,
                    904,
                    1033,
                    2952,
                    2315,
                    3079,
                    1038,
                    2451,
                    3091,
                    1174,
                    2332,
                    1565,
                    1569,
                    1954,
                    2465,
                    2213,
                    1574,
                    2214,
                    2215,
                    2854,
                    1066,
                    1452,
                    1841,
                    2483,
                    1846,
                    2743,
                    2877,
                    704,
                    2430,
                    2499,
                    2756,
                    69,
                    2685,
                    967,
                    2940,
                    1611,
                    1228,
                    1867,
                    2687,
                    2384,
                    980,
                    2006,
                    1111,
                    2908,
                    3421,
                    994,
                    1123,
                    1892,
                    1253,
                    2662,
                    2663,
                    3427,
                    2026,
                    3435,
                    2668,
                    2669,
                    1007,
                    2928,
                    1906,
                    2418,
                    3062,
                    1271,
                    2681,
                    2682,
                    3067,
                    1020,
                    2173,
                    2174,
                    2175
                ],
                "Node": [
                    769,
                    2690,
                    2695,
                    1544,
                    2702,
                    1559,
                    2971,
                    683,
                    705,
                    1859,
                    2883,
                    709,
                    69,
                    1480,
                    1486,
                    2898,
                    2643,
                    1501,
                    739,
                    2665,
                    750,
                    2671,
                    3056,
                    1521,
                    1528,
                    1279
                ],
                "SplitFunc": [
                    2121,
                    70,
                    2343
                ],
                "Callable": [
                    3427,
                    70
                ],
                "Iterator": [
                    1544,
                    1559,
                    1434,
                    2204,
                    1565,
                    1569,
                    3105,
                    1574,
                    1450,
                    2350,
                    2099,
                    2359,
                    3006,
                    3263,
                    2756,
                    70,
                    1480,
                    1486,
                    2126,
                    2384,
                    721,
                    3411,
                    2006,
                    3421,
                    1502,
                    737,
                    3427,
                    748,
                    1521,
                    2166,
                    2423,
                    1528,
                    2430
                ],
                "Timestamp": [
                    73,
                    71
                ],
                "FileSize": [
                    72,
                    73
                ],
                "CacheInfo": [
                    73,
                    74,
                    3603
                ],
                "Tuple": [
                    1377,
                    898,
                    3427,
                    73,
                    1324,
                    659,
                    3411,
                    311,
                    1336,
                    3609,
                    3421
                ],
                "Cache": [
                    449,
                    3585,
                    74,
                    3626,
                    3596,
                    3609,
                    409
                ],
                "Dict": [
                    1033,
                    74,
                    899,
                    898
                ],
                "out": [
                    350,
                    323,
                    3206,
                    75,
                    766,
                    752,
                    3188,
                    758,
                    761,
                    3196,
                    765,
                    382
                ],
                "partial": [
                    75,
                    76,
                    1583,
                    1584,
                    1587,
                    1588,
                    1589,
                    1592,
                    1593,
                    1594,
                    1595,
                    1596,
                    1597,
                    1598
                ],
                "click.secho": [
                    75,
                    76,
                    383
                ],
                "click": [
                    260,
                    269,
                    143,
                    278,
                    279,
                    282,
                    287,
                    289,
                    163,
                    296,
                    298,
                    3244,
                    178,
                    179,
                    3252,
                    187,
                    196,
                    75,
                    76,
                    204,
                    210,
                    216,
                    225,
                    230,
                    235,
                    248,
                    383
                ],
                "err": [
                    3201,
                    3365,
                    327,
                    76,
                    332,
                    347
                ],
                "pygram.initialize": [
                    78
                ],
                "pygram": [
                    677,
                    678,
                    679,
                    78,
                    79
                ],
                "syms": [
                    3076,
                    3089,
                    1603,
                    79,
                    1631,
                    1632,
                    1633,
                    2660,
                    2665,
                    2671,
                    2672,
                    1655,
                    1656,
                    1657,
                    1658,
                    1662,
                    2690,
                    1673,
                    1678,
                    1686,
                    1697,
                    1189,
                    1702,
                    1707,
                    1713,
                    1724,
                    705,
                    1218,
                    1731,
                    1748,
                    2779,
                    1761,
                    1765,
                    1773,
                    2803,
                    1780,
                    1784,
                    2812,
                    1280,
                    1792,
                    1283,
                    2819,
                    1797,
                    1802,
                    784,
                    785,
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    1812,
                    1813,
                    1817,
                    2835,
                    2841,
                    1823,
                    1835,
                    2866,
                    822,
                    823,
                    824,
                    825,
                    826,
                    829,
                    830,
                    831,
                    832,
                    833,
                    836,
                    837,
                    838,
                    839,
                    840,
                    841,
                    842,
                    843,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    2898,
                    1882,
                    2906,
                    2918,
                    1922,
                    1930,
                    2956,
                    2459,
                    2460,
                    1950,
                    1962,
                    1966,
                    2990,
                    2998,
                    1975,
                    1987,
                    3554,
                    3065,
                    3070
                ],
                "pygram.python_symbols": [
                    79
                ],
                "Enum": [
                    108,
                    94
                ],
                "NO": [
                    1795,
                    1670,
                    1800,
                    1674,
                    1807,
                    1681,
                    1815,
                    1818,
                    1692,
                    1821,
                    1695,
                    1826,
                    1700,
                    1705,
                    1833,
                    1836,
                    1710,
                    1714,
                    1722,
                    1729,
                    1734,
                    1740,
                    1743,
                    1617,
                    1746,
                    1751,
                    1624,
                    1756,
                    95,
                    1759,
                    1635,
                    1763,
                    1767,
                    1641,
                    1771,
                    109,
                    1645,
                    1775,
                    1648,
                    1778,
                    1787,
                    1660,
                    1790
                ],
                "YES": [
                    96,
                    111
                ],
                "DIFF": [
                    97
                ],
                "CHECK": [
                    98
                ],
                "check": [
                    3176,
                    334,
                    315,
                    102
                ],
                "diff": [
                    3328,
                    3327,
                    102,
                    105,
                    3311,
                    594,
                    315,
                    543
                ],
                "cls.CHECK": [
                    103
                ],
                "cls": [
                    130,
                    132,
                    134,
                    103,
                    136,
                    105,
                    138
                ],
                "cls.DIFF": [
                    105
                ],
                "cls.YES": [
                    105
                ],
                "CACHED": [
                    110
                ],
                "Flag": [
                    114
                ],
                "AUTO_DETECT": [
                    115
                ],
                "PYTHON36": [
                    116
                ],
                "PYI": [
                    117
                ],
                "NO_STRING_NORMALIZATION": [
                    118
                ],
                "NO_NUMERIC_UNDERSCORE_NORMALIZATION": [
                    119
                ],
                "mode": [
                    130,
                    643,
                    132,
                    134,
                    3590,
                    136,
                    138,
                    139,
                    524,
                    531,
                    405,
                    411,
                    420,
                    426,
                    3629,
                    316,
                    578,
                    451,
                    3324,
                    474,
                    614,
                    359,
                    620,
                    372,
                    634,
                    506,
                    635,
                    636,
                    3582
                ],
                "cls.AUTO_DETECT": [
                    130
                ],
                "py36": [
                    642,
                    131,
                    2148,
                    2405,
                    2153,
                    654,
                    2351,
                    2128,
                    2261,
                    2136,
                    635,
                    317,
                    639
                ],
                "cls.PYTHON36": [
                    132
                ],
                "pyi": [
                    133,
                    318
                ],
                "cls.PYI": [
                    134
                ],
                "skip_string_normalization": [
                    319,
                    135
                ],
                "cls.NO_STRING_NORMALIZATION": [
                    136
                ],
                "skip_numeric_underscore_normalization": [
                    320,
                    137
                ],
                "cls.NO_NUMERIC_UNDERSCORE_NORMALIZATION": [
                    138
                ],
                "click.Context": [
                    298,
                    143
                ],
                "click.Parameter": [
                    143
                ],
                "value": [
                    1155,
                    1146,
                    150,
                    151,
                    155,
                    160,
                    164,
                    175,
                    2879,
                    2880,
                    3269,
                    2507,
                    2508,
                    3275,
                    3276,
                    2511,
                    1104,
                    3280,
                    2514,
                    3281,
                    3284,
                    2678,
                    1144,
                    2042
                ],
                "root": [
                    3113,
                    3116,
                    335,
                    3120,
                    341,
                    152,
                    153,
                    3134
                ],
                "find_project_root": [
                    152,
                    335
                ],
                "ctx.params.get": [
                    152
                ],
                "ctx.params": [
                    152
                ],
                "ctx": [
                    384,
                    328,
                    170,
                    171,
                    172,
                    333,
                    152,
                    351
                ],
                "path": [
                    3206,
                    3114,
                    3605,
                    153,
                    154,
                    155
                ],
                "path.is_file": [
                    154
                ],
                "pyproject_toml": [
                    160,
                    161
                ],
                "toml.load": [
                    160
                ],
                "toml": [
                    160,
                    162
                ],
                "config": [
                    161,
                    322,
                    323,
                    167,
                    173
                ],
                "get": [
                    161
                ],
                "pyproject_toml.get": [
                    161
                ],
                "toml.TomlDecodeError": [
                    162
                ],
                "click.FileError": [
                    163
                ],
                "e": [
                    164
                ],
                "ctx.default_map": [
                    170,
                    171,
                    172
                ],
                "ctx.default_map.update": [
                    172
                ],
                "replace": [
                    173
                ],
                "k.replace": [
                    173
                ],
                "k": [
                    954,
                    173
                ],
                "v": [
                    774,
                    777,
                    2455,
                    2459,
                    2460,
                    1829,
                    1581,
                    173,
                    1583,
                    1585,
                    1587,
                    1588,
                    1590,
                    1592,
                    1593,
                    1594,
                    954,
                    1595,
                    1596,
                    1597,
                    1598,
                    1622
                ],
                "config.items": [
                    173
                ],
                "Optional": [
                    1123,
                    900,
                    1861,
                    1859,
                    1892,
                    1320,
                    2761,
                    3435,
                    144,
                    1841,
                    1906,
                    312,
                    1020
                ],
                "write_back": [
                    450,
                    419,
                    358,
                    423,
                    424,
                    588,
                    461,
                    590,
                    498,
                    371,
                    499,
                    405,
                    536,
                    473,
                    410,
                    315,
                    539
                ],
                "WriteBack.from_configuration": [
                    315
                ],
                "WriteBack": [
                    513,
                    450,
                    423,
                    424,
                    391,
                    588,
                    461,
                    590,
                    498,
                    499,
                    436,
                    564,
                    410,
                    315
                ],
                "FileMode.from_configuration": [
                    316
                ],
                "FileMode": [
                    636,
                    3585,
                    514,
                    643,
                    392,
                    635,
                    3626,
                    524,
                    625,
                    437,
                    565,
                    3321,
                    634,
                    603,
                    316,
                    3581
                ],
                "verbose": [
                    322,
                    3178,
                    334,
                    380,
                    349
                ],
                "include_regex": [
                    341,
                    325
                ],
                "re_compile_maybe_verbose": [
                    330,
                    325
                ],
                "include": [
                    3137,
                    325,
                    3134,
                    327
                ],
                "re.error": [
                    331,
                    326
                ],
                "re": [
                    326,
                    331,
                    3408,
                    2547,
                    2490,
                    2525,
                    2526,
                    2527
                ],
                "ctx.exit": [
                    328,
                    384,
                    333,
                    351
                ],
                "exclude_regex": [
                    330,
                    341
                ],
                "exclude": [
                    330,
                    332,
                    2963,
                    2964,
                    3128,
                    954,
                    3134
                ],
                "report": [
                    384,
                    3240,
                    427,
                    3243,
                    429,
                    3119,
                    3248,
                    3251,
                    3254,
                    3130,
                    3134,
                    454,
                    334,
                    341,
                    360,
                    493,
                    373,
                    502,
                    381,
                    383
                ],
                "Report": [
                    334
                ],
                "quiet": [
                    3177,
                    380,
                    349,
                    334
                ],
                "src": [
                    3201,
                    523,
                    526,
                    527,
                    403,
                    537,
                    665,
                    412,
                    541,
                    542,
                    416,
                    3616,
                    3617,
                    3618,
                    3619,
                    3621,
                    426,
                    427,
                    429,
                    3633,
                    575,
                    576,
                    578,
                    453,
                    454,
                    335,
                    337,
                    594,
                    3155,
                    470,
                    3289,
                    476,
                    477,
                    489,
                    493,
                    3188,
                    501,
                    502,
                    3193,
                    3195,
                    3327
                ],
                "sources": [
                    3616,
                    353,
                    355,
                    452,
                    455,
                    336,
                    368,
                    3633,
                    340,
                    345,
                    348,
                    477
                ],
                "Set": [
                    2854,
                    3016,
                    1582,
                    3022,
                    336,
                    433,
                    3058,
                    2643,
                    3056,
                    3609,
                    1501,
                    3006
                ],
                "s": [
                    3242,
                    3244,
                    3247,
                    3248,
                    337,
                    338,
                    3250,
                    3252,
                    343,
                    347
                ],
                "p": [
                    1792,
                    1797,
                    1802,
                    1805,
                    2453,
                    2459,
                    2460,
                    1823,
                    1697,
                    1702,
                    1707,
                    1835,
                    2865,
                    2866,
                    2869,
                    2872,
                    2874,
                    1724,
                    1727,
                    1731,
                    965,
                    1738,
                    338,
                    339,
                    1748,
                    341,
                    1621,
                    343,
                    345,
                    1754,
                    1629,
                    1630,
                    1761,
                    1765,
                    1639,
                    1769,
                    1773,
                    1780,
                    1783,
                    1784
                ],
                "p.is_dir": [
                    339
                ],
                "sources.update": [
                    340
                ],
                "gen_python_files_in_dir": [
                    341,
                    3134
                ],
                "p.is_file": [
                    343
                ],
                "sources.add": [
                    345
                ],
                "reformat_one": [
                    354
                ],
                "sources.pop": [
                    355
                ],
                "line_length": [
                    3590,
                    654,
                    531,
                    405,
                    411,
                    417,
                    426,
                    3629,
                    578,
                    451,
                    2116,
                    3530,
                    3450,
                    2127,
                    2128,
                    2129,
                    2257,
                    3025,
                    2261,
                    471,
                    2267,
                    356,
                    614,
                    2153,
                    620,
                    369,
                    3571,
                    506,
                    3324,
                    3582
                ],
                "fast": [
                    418,
                    578,
                    357,
                    618,
                    370,
                    531,
                    405,
                    472
                ],
                "loop": [
                    481,
                    482,
                    363,
                    366,
                    3374,
                    467,
                    3380,
                    3381,
                    374,
                    504,
                    379,
                    3389
                ],
                "asyncio.get_event_loop": [
                    363
                ],
                "asyncio": [
                    3363,
                    487,
                    363,
                    3374,
                    3381,
                    504,
                    479
                ],
                "executor": [
                    468,
                    364,
                    375
                ],
                "ProcessPoolExecutor": [
                    364
                ],
                "os.cpu_count": [
                    364
                ],
                "os": [
                    364
                ],
                "loop.run_until_complete": [
                    3380,
                    366
                ],
                "schedule_formatting": [
                    367
                ],
                "shutdown": [
                    379
                ],
                "bang": [
                    381,
                    382
                ],
                "report.return_code": [
                    384,
                    381
                ],
                "click.command": [
                    178
                ],
                "click.option": [
                    248,
                    225,
                    196,
                    260,
                    230,
                    235,
                    204,
                    269,
                    210,
                    179,
                    216,
                    187,
                    287
                ],
                "click.version_option": [
                    278
                ],
                "click.argument": [
                    279
                ],
                "click.Path": [
                    289,
                    282
                ],
                "read_pyproject_toml": [
                    293
                ],
                "click.pass_context": [
                    296
                ],
                "changed": [
                    422,
                    423,
                    424,
                    427,
                    495,
                    3185,
                    402,
                    499,
                    502,
                    407,
                    3192,
                    414,
                    415
                ],
                "Changed.NO": [
                    424,
                    495,
                    402,
                    499,
                    3192
                ],
                "Changed": [
                    422,
                    423,
                    424,
                    454,
                    495,
                    3183,
                    3185,
                    402,
                    499,
                    407,
                    3192,
                    414,
                    415
                ],
                "src.is_file": [
                    403
                ],
                "format_stdin_to_stdout": [
                    404
                ],
                "Changed.YES": [
                    3185,
                    495,
                    422,
                    407
                ],
                "cache": [
                    449,
                    3618,
                    451,
                    452,
                    426,
                    3596,
                    3600,
                    3633,
                    409,
                    506,
                    411,
                    413
                ],
                "WriteBack.DIFF": [
                    450,
                    410,
                    461,
                    590
                ],
                "read_cache": [
                    411,
                    451
                ],
                "res_src": [
                    412,
                    413
                ],
                "src.resolve": [
                    3617,
                    412,
                    3633
                ],
                "get_cache_info": [
                    3633,
                    3618,
                    413
                ],
                "Changed.CACHED": [
                    423,
                    454,
                    414,
                    415
                ],
                "format_file_in_place": [
                    469,
                    415
                ],
                "WriteBack.YES": [
                    498,
                    588,
                    423
                ],
                "WriteBack.CHECK": [
                    424,
                    499
                ],
                "write_cache": [
                    426,
                    506
                ],
                "report.done": [
                    427,
                    454,
                    502
                ],
                "report.failed": [
                    493,
                    429
                ],
                "exc": [
                    3301,
                    3303,
                    429,
                    700,
                    702,
                    3295
                ],
                "BaseEventLoop": [
                    3370,
                    439
                ],
                "Executor": [
                    440
                ],
                "cached": [
                    452,
                    453
                ],
                "filter_cached": [
                    452
                ],
                "cancelled": [
                    504,
                    458,
                    491,
                    503
                ],
                "sources_to_cache": [
                    505,
                    506,
                    459,
                    501
                ],
                "lock": [
                    544,
                    545,
                    460,
                    556,
                    557,
                    465,
                    475
                ],
                "manager": [
                    464,
                    465
                ],
                "Manager": [
                    464
                ],
                "manager.Lock": [
                    465
                ],
                "tasks": [
                    489,
                    466,
                    3366,
                    479
                ],
                "loop.run_in_executor": [
                    467
                ],
                "pending": [
                    481,
                    482,
                    486,
                    487,
                    479
                ],
                "Iterable": [
                    3363,
                    3143,
                    3626,
                    948,
                    3609,
                    479
                ],
                "asyncio.Task": [
                    3363,
                    3374,
                    479
                ],
                "tasks.keys": [
                    479
                ],
                "loop.add_signal_handler": [
                    481,
                    482
                ],
                "signal.SIGINT": [
                    481
                ],
                "signal": [
                    481,
                    482
                ],
                "cancel": [
                    481,
                    482
                ],
                "signal.SIGTERM": [
                    482
                ],
                "done": [
                    3621,
                    3622,
                    487,
                    488,
                    3615
                ],
                "_": [
                    649,
                    652,
                    1111,
                    487
                ],
                "asyncio.wait": [
                    487
                ],
                "asyncio.FIRST_COMPLETED": [
                    487
                ],
                "task": [
                    3366,
                    3367,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    3374,
                    495,
                    3378,
                    3379
                ],
                "tasks.pop": [
                    489
                ],
                "task.cancelled": [
                    490
                ],
                "cancelled.append": [
                    491
                ],
                "task.exception": [
                    492,
                    493
                ],
                "task.result": [
                    495
                ],
                "sources_to_cache.append": [
                    501
                ],
                "asyncio.gather": [
                    504,
                    3381
                ],
                "Any": [
                    515
                ],
                "WriteBack.NO": [
                    513,
                    564
                ],
                "FileMode.AUTO_DETECT": [
                    514,
                    625,
                    565,
                    3321,
                    603
                ],
                "src.suffix": [
                    523
                ],
                "FileMode.PYI": [
                    634,
                    524
                ],
                "then": [
                    574,
                    592,
                    541,
                    526
                ],
                "datetime.utcfromtimestamp": [
                    526
                ],
                "datetime": [
                    574,
                    540,
                    526,
                    591
                ],
                "st_mtime": [
                    526
                ],
                "src.stat": [
                    526
                ],
                "buf": [
                    528,
                    527
                ],
                "src_contents": [
                    611,
                    614,
                    615,
                    619,
                    620,
                    528,
                    531,
                    631,
                    543
                ],
                "encoding": [
                    672,
                    673,
                    549,
                    586,
                    528,
                    537,
                    666,
                    668,
                    575
                ],
                "newline": [
                    673,
                    550,
                    586,
                    528,
                    537,
                    670,
                    575
                ],
                "decode_bytes": [
                    528,
                    575
                ],
                "buf.read": [
                    528
                ],
                "dst_contents": [
                    614,
                    615,
                    650,
                    619,
                    620,
                    621,
                    653,
                    655,
                    656,
                    530,
                    632,
                    538,
                    543
                ],
                "format_file_contents": [
                    530,
                    578
                ],
                "NothingChanged": [
                    612,
                    616,
                    581,
                    533
                ],
                "write_back.YES": [
                    536
                ],
                "f": [
                    547,
                    553,
                    554,
                    585,
                    589,
                    3344,
                    594,
                    595,
                    3346,
                    3348,
                    3349,
                    537,
                    538
                ],
                "f.write": [
                    553,
                    589,
                    3346,
                    594,
                    3348,
                    538
                ],
                "write_back.DIFF": [
                    539
                ],
                "now": [
                    593,
                    540,
                    542,
                    591
                ],
                "datetime.utcnow": [
                    540,
                    574,
                    591
                ],
                "src_name": [
                    592,
                    594,
                    541,
                    543
                ],
                "dst_name": [
                    593,
                    594,
                    542,
                    543
                ],
                "diff_contents": [
                    553,
                    543
                ],
                "lock.acquire": [
                    545
                ],
                "io.TextIOWrapper": [
                    672,
                    585,
                    547
                ],
                "io": [
                    672,
                    585,
                    665,
                    547
                ],
                "sys.stdout.buffer": [
                    586,
                    548
                ],
                "sys.stdout": [
                    586,
                    548
                ],
                "sys": [
                    548,
                    1158,
                    586,
                    2381,
                    3291,
                    575
                ],
                "f.detach": [
                    554,
                    595
                ],
                "lock.release": [
                    557
                ],
                "sys.stdin.buffer.read": [
                    575
                ],
                "sys.stdin.buffer": [
                    575
                ],
                "sys.stdin": [
                    575
                ],
                "dst": [
                    576,
                    3328,
                    578,
                    3299,
                    3301,
                    589,
                    594,
                    3324,
                    3325,
                    3327
                ],
                "src_contents.strip": [
                    611
                ],
                "format_str": [
                    3324,
                    614
                ],
                "assert_equivalent": [
                    619
                ],
                "assert_stable": [
                    620
                ],
                "src_node": [
                    648,
                    631,
                    633,
                    635,
                    637
                ],
                "lib2to3_parse": [
                    776,
                    631
                ],
                "src_contents.lstrip": [
                    631
                ],
                "future_imports": [
                    633,
                    639
                ],
                "get_future_imports": [
                    633
                ],
                "is_pyi": [
                    640,
                    645,
                    1319,
                    1428,
                    634
                ],
                "FileMode.PYTHON36": [
                    635
                ],
                "is_python36": [
                    635
                ],
                "normalize_strings": [
                    641,
                    636,
                    1429
                ],
                "FileMode.NO_STRING_NORMALIZATION": [
                    636
                ],
                "normalize_fmt_off": [
                    637
                ],
                "lines": [
                    648,
                    638,
                    2128,
                    2129,
                    2130,
                    3345,
                    3346,
                    3347,
                    695,
                    697,
                    666,
                    667,
                    670
                ],
                "LineGenerator": [
                    638
                ],
                "FileMode.NO_NUMERIC_UNDERSCORE_NORMALIZATION": [
                    643
                ],
                "elt": [
                    651,
                    645
                ],
                "EmptyLineTracker": [
                    645
                ],
                "empty_line": [
                    650,
                    653,
                    646
                ],
                "Line": [
                    3456,
                    646,
                    2438,
                    1544,
                    2952,
                    2315,
                    2316,
                    1421,
                    2322,
                    1430,
                    1559,
                    1434,
                    2203,
                    2204,
                    1565,
                    1569,
                    3492,
                    1574,
                    1447,
                    1320,
                    1450,
                    1324,
                    2350,
                    2098,
                    2099,
                    2359,
                    1336,
                    3006,
                    1480,
                    2380,
                    1486,
                    2126,
                    2384,
                    2392,
                    3420,
                    1502,
                    1376,
                    2146,
                    2410,
                    2288,
                    1521,
                    3442,
                    2166,
                    2423,
                    1528,
                    2428,
                    2430
                ],
                "after": [
                    647,
                    649,
                    651,
                    2578,
                    2579,
                    2581,
                    2583,
                    2584,
                    2586,
                    2587,
                    2589,
                    2590,
                    2608,
                    1330,
                    2610,
                    1332,
                    2613,
                    1334,
                    2611,
                    2614
                ],
                "current_line": [
                    1408,
                    2434,
                    2436,
                    2438,
                    1415,
                    648,
                    2439,
                    651,
                    654,
                    2447,
                    2448,
                    1430,
                    1330,
                    1333,
                    1338,
                    1340,
                    1342,
                    1348,
                    1355,
                    1356,
                    2380,
                    1361,
                    2388,
                    2390,
                    2392,
                    1369,
                    2393,
                    1378,
                    1379,
                    2408,
                    2410,
                    1387,
                    2411,
                    2415,
                    2416,
                    1394,
                    2418,
                    2419,
                    1400,
                    1402,
                    1403,
                    2428
                ],
                "lines.visit": [
                    648
                ],
                "before": [
                    651,
                    652,
                    2578,
                    2579,
                    2581,
                    2588,
                    2590,
                    2608,
                    2609,
                    1330,
                    1331,
                    1334,
                    2614,
                    1343,
                    1344,
                    1347,
                    1352,
                    1354,
                    1356,
                    1364,
                    1371,
                    1373,
                    1395
                ],
                "elt.maybe_empty_lines": [
                    651
                ],
                "line": [
                    2178,
                    2438,
                    3463,
                    2056,
                    2057,
                    2058,
                    2059,
                    2441,
                    2061,
                    654,
                    655,
                    2444,
                    2193,
                    2194,
                    2195,
                    2068,
                    2962,
                    2964,
                    3356,
                    3357,
                    3518,
                    2219,
                    3499,
                    2351,
                    3513,
                    3515,
                    3516,
                    3517,
                    2110,
                    2111,
                    2238,
                    2239,
                    2114,
                    2115,
                    2116,
                    2240,
                    2118,
                    2366,
                    2370,
                    3524,
                    2122,
                    3019,
                    2380,
                    2253,
                    3525,
                    2127,
                    2128,
                    3023,
                    3539,
                    2261,
                    2136,
                    2392,
                    2138,
                    2395,
                    3452,
                    2398,
                    3038,
                    2148,
                    3430,
                    2410,
                    3436,
                    3566,
                    3568,
                    2163,
                    3448,
                    2425,
                    2428
                ],
                "split_line": [
                    2153,
                    654
                ],
                "srcbuf": [
                    672,
                    665,
                    666,
                    671
                ],
                "io.BytesIO": [
                    665
                ],
                "tokenize.detect_encoding": [
                    666
                ],
                "tokenize": [
                    666
                ],
                "srcbuf.readline": [
                    666
                ],
                "srcbuf.seek": [
                    671
                ],
                "tiow": [
                    672,
                    673
                ],
                "tiow.read": [
                    673
                ],
                "GRAMMARS": [
                    676,
                    687
                ],
                "pygram.python_grammar_no_print_statement_no_exec_statement": [
                    677
                ],
                "pygram.python_grammar_no_print_statement": [
                    678
                ],
                "pygram.python_grammar": [
                    679
                ],
                "src_txt": [
                    690,
                    685,
                    686,
                    695
                ],
                "grammar": [
                    688,
                    687
                ],
                "drv": [
                    688,
                    690
                ],
                "driver.Driver": [
                    688
                ],
                "driver": [
                    688
                ],
                "pytree.convert": [
                    688
                ],
                "pytree": [
                    688
                ],
                "result": [
                    2050,
                    2052,
                    2322,
                    2324,
                    2069,
                    2197,
                    2198,
                    2199,
                    2325,
                    2075,
                    2335,
                    2337,
                    2339,
                    2340,
                    690,
                    704,
                    705,
                    706,
                    2146,
                    2152,
                    2283,
                    2284,
                    2285,
                    2159
                ],
                "drv.parse_string": [
                    690
                ],
                "ParseError": [
                    693
                ],
                "lineno": [
                    697,
                    700,
                    694
                ],
                "column": [
                    700,
                    694
                ],
                "pe.context": [
                    694
                ],
                "pe": [
                    694
                ],
                "src_txt.splitlines": [
                    695
                ],
                "faulty_line": [
                    697,
                    699,
                    700
                ],
                "InvalidInput": [
                    700
                ],
                "syms.file_input": [
                    705,
                    1882
                ],
                "code": [
                    775,
                    712,
                    776,
                    777,
                    711
                ],
                "node": [
                    1536,
                    3075,
                    1540,
                    1542,
                    1548,
                    1561,
                    2652,
                    2658,
                    2665,
                    2671,
                    2672,
                    2678,
                    2681,
                    2682,
                    2690,
                    2699,
                    2707,
                    3265,
                    3267,
                    3269,
                    711,
                    3286,
                    731,
                    732,
                    2779,
                    734,
                    735,
                    2780,
                    2781,
                    2782,
                    739,
                    740,
                    2783,
                    2787,
                    2788,
                    2793,
                    2794,
                    750,
                    751,
                    754,
                    2803,
                    2804,
                    2805,
                    2806,
                    760,
                    762,
                    2812,
                    2813,
                    765,
                    766,
                    2816,
                    2827,
                    2828,
                    2829,
                    2835,
                    2838,
                    2841,
                    2844,
                    2847,
                    1843,
                    1844,
                    1855,
                    1861,
                    1862,
                    1863,
                    1864,
                    2886,
                    2887,
                    2888,
                    2889,
                    2893,
                    2898,
                    2901,
                    2904,
                    2918,
                    2921,
                    2922,
                    2927,
                    2979,
                    1452,
                    1454,
                    1470,
                    1471,
                    1472,
                    1473,
                    1474,
                    1475,
                    1476,
                    1477,
                    1478,
                    1484,
                    1495,
                    1514,
                    1515,
                    1523,
                    1524,
                    1526,
                    1530,
                    1532,
                    1533
                ],
                "T": [
                    737,
                    745,
                    715,
                    748,
                    718,
                    721,
                    3411
                ],
                "TypeVar": [
                    715
                ],
                "Generic": [
                    718
                ],
                "node.type": [
                    1474,
                    1476,
                    2812,
                    2918,
                    2827,
                    751,
                    2672,
                    2898,
                    2803,
                    2835,
                    2838,
                    2841,
                    760,
                    2779,
                    731,
                    732,
                    734,
                    1471
                ],
                "name": [
                    732,
                    734,
                    735
                ],
                "token.tok_name": [
                    760,
                    794,
                    732
                ],
                "token": [
                    1832,
                    3083,
                    3084,
                    1552,
                    2065,
                    1052,
                    1091,
                    1604,
                    1608,
                    1103,
                    1111,
                    1626,
                    1630,
                    1126,
                    1127,
                    2662,
                    1129,
                    2663,
                    1643,
                    1644,
                    2668,
                    2669,
                    1647,
                    2675,
                    1652,
                    1143,
                    2679,
                    1145,
                    2681,
                    2682,
                    2687,
                    2688,
                    1154,
                    1672,
                    1684,
                    1688,
                    1178,
                    1183,
                    1187,
                    1699,
                    1704,
                    1712,
                    1716,
                    1721,
                    1216,
                    1728,
                    1733,
                    2246,
                    1737,
                    2249,
                    1739,
                    2762,
                    1742,
                    1745,
                    1237,
                    1750,
                    1755,
                    732,
                    1758,
                    2789,
                    1770,
                    1774,
                    1777,
                    2805,
                    2806,
                    760,
                    1793,
                    2818,
                    2820,
                    1799,
                    2824,
                    781,
                    2829,
                    1811,
                    2838,
                    1817,
                    794,
                    2331,
                    1820,
                    797,
                    798,
                    799,
                    800,
                    801,
                    802,
                    1824,
                    1825,
                    805,
                    806,
                    807,
                    808,
                    809,
                    810,
                    811,
                    812,
                    813,
                    814,
                    815,
                    816,
                    817,
                    818,
                    820,
                    2887,
                    2888,
                    2889,
                    1900,
                    2908,
                    875,
                    876,
                    877,
                    878,
                    879,
                    880,
                    881,
                    882,
                    883,
                    884,
                    885,
                    886,
                    887,
                    888,
                    2415,
                    2418,
                    2923,
                    1920,
                    2946,
                    2948,
                    3467,
                    1938,
                    2963,
                    1940,
                    3477,
                    919,
                    1944,
                    2457,
                    3479,
                    3480,
                    1951,
                    2980,
                    2985,
                    2992,
                    1458,
                    1978,
                    1471,
                    1474,
                    1990,
                    973,
                    2332,
                    985,
                    3547,
                    3548,
                    3552,
                    1000,
                    2025,
                    1516,
                    1828,
                    1012,
                    3063,
                    2848,
                    3068,
                    1022
                ],
                "type_repr": [
                    734,
                    751
                ],
                "self": [
                    1536,
                    1537,
                    1540,
                    1541,
                    1542,
                    1546,
                    1550,
                    1557,
                    1562,
                    1563,
                    1052,
                    1053,
                    1054,
                    1567,
                    1058,
                    1571,
                    1060,
                    1061,
                    1062,
                    1063,
                    1064,
                    1572,
                    1575,
                    1576,
                    1577,
                    1581,
                    1583,
                    1072,
                    1073,
                    1584,
                    1587,
                    1076,
                    1588,
                    1589,
                    1592,
                    1081,
                    1593,
                    1594,
                    1595,
                    1596,
                    1086,
                    1597,
                    1598,
                    1599,
                    1600,
                    1091,
                    1096,
                    1102,
                    1103,
                    1104,
                    1110,
                    1118,
                    1123,
                    3186,
                    3187,
                    1140,
                    1141,
                    1142,
                    1143,
                    1144,
                    1145,
                    1146,
                    3189,
                    3191,
                    3197,
                    1153,
                    1154,
                    1155,
                    3202,
                    3205,
                    1160,
                    1168,
                    3219,
                    3222,
                    1177,
                    1178,
                    1184,
                    3232,
                    1188,
                    1190,
                    3241,
                    3242,
                    1195,
                    1196,
                    3244,
                    3246,
                    3247,
                    3248,
                    3249,
                    3250,
                    1204,
                    3252,
                    1211,
                    1223,
                    1232,
                    1240,
                    1246,
                    735,
                    1247,
                    1248,
                    1250,
                    741,
                    1255,
                    749,
                    753,
                    1265,
                    755,
                    1266,
                    757,
                    1268,
                    1269,
                    1273,
                    1291,
                    1294,
                    1295,
                    1300,
                    1306,
                    1330,
                    1331,
                    1332,
                    1333,
                    1339,
                    1349,
                    1350,
                    1351,
                    1356,
                    1359,
                    1360,
                    1362,
                    1367,
                    1368,
                    1379,
                    1380,
                    1384,
                    1387,
                    1388,
                    1393,
                    1394,
                    1399,
                    1400,
                    1402,
                    1403,
                    1408,
                    922,
                    923,
                    925,
                    926,
                    928,
                    929,
                    930,
                    931,
                    932,
                    1442,
                    934,
                    1443,
                    936,
                    1446,
                    938,
                    939,
                    940,
                    941,
                    942,
                    1447,
                    1453,
                    1457,
                    946,
                    1460,
                    1461,
                    1465,
                    954,
                    1467,
                    1468,
                    1471,
                    1472,
                    961,
                    1475,
                    964,
                    965,
                    1477,
                    1483,
                    1484,
                    974,
                    975,
                    1491,
                    983,
                    984,
                    1495,
                    1498,
                    988,
                    989,
                    1001,
                    1002,
                    1517,
                    1519,
                    1010,
                    1011,
                    1523,
                    1524,
                    1014,
                    1015,
                    1526,
                    1532,
                    1533,
                    1022,
                    1535
                ],
                "self.visit_default": [
                    1536,
                    1571,
                    1542,
                    1577,
                    1484,
                    1526,
                    1495,
                    1533,
                    735
                ],
                "child": [
                    2689,
                    2690,
                    3075,
                    2692,
                    3076,
                    3078,
                    3082,
                    3084,
                    1549,
                    1550,
                    1552,
                    1556,
                    1557,
                    1561,
                    1563,
                    3114,
                    3116,
                    3118,
                    3120,
                    3063,
                    3126,
                    3064,
                    3130,
                    3133,
                    3134,
                    3136,
                    3139,
                    2904,
                    2906,
                    2907,
                    2908,
                    2658,
                    740,
                    741,
                    2660,
                    2661,
                    2664,
                    2665,
                    2666,
                    1515,
                    1516,
                    2670,
                    1519,
                    2671,
                    754,
                    755,
                    2675,
                    2677,
                    3061,
                    2679,
                    3062,
                    3065,
                    3066,
                    2685,
                    3070,
                    3071
                ],
                "node.children": [
                    2816,
                    3075,
                    1548,
                    2828,
                    2829,
                    1561,
                    2844,
                    2847,
                    2886,
                    2887,
                    2888,
                    2889,
                    2893,
                    2901,
                    2904,
                    2658,
                    2787,
                    740,
                    2788,
                    2793,
                    2794,
                    1515,
                    2921,
                    2922,
                    2927,
                    754,
                    1524,
                    2804,
                    2678,
                    2805,
                    2806,
                    2813
                ],
                "self.visit": [
                    741,
                    1550,
                    1519,
                    755,
                    1524,
                    1557,
                    1563
                ],
                "Visitor": [
                    745,
                    1421
                ],
                "tree_depth": [
                    746
                ],
                "indent": [
                    1443,
                    1447,
                    749,
                    1294,
                    752,
                    1297,
                    758,
                    761
                ],
                "self.tree_depth": [
                    753,
                    749,
                    757
                ],
                "_type": [
                    751,
                    752,
                    758,
                    760,
                    761
                ],
                "token.tok_name.get": [
                    760
                ],
                "node.prefix": [
                    762,
                    2652,
                    765
                ],
                "node.value": [
                    766,
                    2838
                ],
                "DebugVisitor": [
                    774
                ],
                "v.visit": [
                    777
                ],
                "dataclass": [
                    1025,
                    3172,
                    744,
                    1420,
                    893,
                    2029,
                    1309
                ],
                "KEYWORDS": [
                    780
                ],
                "keyword.kwlist": [
                    780
                ],
                "keyword": [
                    780
                ],
                "WHITESPACE": [
                    2716,
                    1476,
                    781
                ],
                "token.DEDENT": [
                    2889,
                    781
                ],
                "token.INDENT": [
                    2888,
                    781
                ],
                "token.NEWLINE": [
                    3084,
                    781,
                    2887
                ],
                "FLOW_CONTROL": [
                    782
                ],
                "STATEMENT": [
                    1530,
                    783
                ],
                "syms.if_stmt": [
                    784
                ],
                "syms.while_stmt": [
                    785
                ],
                "syms.for_stmt": [
                    786
                ],
                "syms.try_stmt": [
                    787
                ],
                "syms.except_clause": [
                    788
                ],
                "syms.with_stmt": [
                    789
                ],
                "syms.funcdef": [
                    790
                ],
                "syms.classdef": [
                    1773,
                    791
                ],
                "STANDALONE_COMMENT": [
                    1241,
                    1608,
                    1161,
                    1231,
                    2416,
                    2067,
                    1076,
                    3029,
                    2714,
                    2744,
                    793,
                    794,
                    1086
                ],
                "LOGIC_OPERATORS": [
                    795,
                    1996
                ],
                "COMPARATORS": [
                    796,
                    1934
                ],
                "token.LESS": [
                    797
                ],
                "token.GREATER": [
                    798
                ],
                "token.EQEQUAL": [
                    799
                ],
                "token.NOTEQUAL": [
                    800
                ],
                "token.LESSEQUAL": [
                    801
                ],
                "token.GREATEREQUAL": [
                    802
                ],
                "MATH_OPERATORS": [
                    1928,
                    804,
                    1679
                ],
                "token.VBAR": [
                    875,
                    805
                ],
                "token.CIRCUMFLEX": [
                    876,
                    806
                ],
                "token.AMPER": [
                    877,
                    807
                ],
                "token.LEFTSHIFT": [
                    808,
                    878
                ],
                "token.RIGHTSHIFT": [
                    809,
                    1684,
                    879
                ],
                "token.PLUS": [
                    880,
                    810
                ],
                "token.MINUS": [
                    881,
                    811
                ],
                "token.STAR": [
                    882,
                    812,
                    820,
                    2679
                ],
                "token.SLASH": [
                    883,
                    813
                ],
                "token.DOUBLESLASH": [
                    884,
                    814
                ],
                "token.PERCENT": [
                    885,
                    815
                ],
                "token.AT": [
                    816,
                    1770,
                    1091,
                    886
                ],
                "token.TILDE": [
                    817,
                    887
                ],
                "token.DOUBLESTAR": [
                    888,
                    818,
                    820,
                    1799
                ],
                "STARS": [
                    1668,
                    2862,
                    2995,
                    820,
                    3000,
                    1758
                ],
                "VARARGS_PARENTS": [
                    1914,
                    2403,
                    821,
                    1669
                ],
                "syms.arglist": [
                    1697,
                    1218,
                    2990,
                    822,
                    1655
                ],
                "syms.argument": [
                    1748,
                    2998,
                    823,
                    1656,
                    1817
                ],
                "syms.trailer": [
                    824,
                    3554,
                    848,
                    1731
                ],
                "syms.typedargslist": [
                    825,
                    1707,
                    2990,
                    1662
                ],
                "syms.varargslist": [
                    826,
                    1702,
                    1658
                ],
                "UNPACKING_PARENTS": [
                    1914,
                    828,
                    1669
                ],
                "syms.atom": [
                    1792,
                    2690,
                    2660,
                    2918,
                    2665,
                    2956,
                    2671,
                    2803,
                    2841,
                    2906,
                    2779,
                    2812,
                    829
                ],
                "syms.dictsetmaker": [
                    1797,
                    830
                ],
                "syms.listmaker": [
                    1280,
                    1189,
                    831
                ],
                "syms.testlist_gexp": [
                    832,
                    2819
                ],
                "syms.testlist_star_expr": [
                    833,
                    1603
                ],
                "TEST_DESCENDANTS": [
                    835,
                    1286
                ],
                "syms.test": [
                    836,
                    1966
                ],
                "syms.lambdef": [
                    837
                ],
                "syms.or_test": [
                    838
                ],
                "syms.and_test": [
                    839
                ],
                "syms.not_test": [
                    840
                ],
                "syms.comparison": [
                    841,
                    1975
                ],
                "syms.star_expr": [
                    842,
                    1802,
                    2866,
                    1930
                ],
                "syms.expr": [
                    843
                ],
                "syms.xor_expr": [
                    844
                ],
                "syms.and_expr": [
                    845
                ],
                "syms.shift_expr": [
                    1686,
                    846
                ],
                "syms.arith_expr": [
                    847
                ],
                "syms.term": [
                    849
                ],
                "syms.power": [
                    850
                ],
                "ASSIGNMENTS": [
                    852,
                    1596
                ],
                "COMPREHENSION_PRIORITY": [
                    1964,
                    868,
                    1957
                ],
                "COMMA_PRIORITY": [
                    869,
                    1901,
                    2414,
                    2968,
                    2783
                ],
                "TERNARY_PRIORITY": [
                    870,
                    1967
                ],
                "LOGIC_PRIORITY": [
                    1997,
                    871
                ],
                "STRING_PRIORITY": [
                    872,
                    1942
                ],
                "COMPARATOR_PRIORITY": [
                    873,
                    1994,
                    1935,
                    1970,
                    1982
                ],
                "MATH_PRIORITIES": [
                    874,
                    1932
                ],
                "DOT_PRIORITY": [
                    2376,
                    890,
                    1925,
                    3509
                ],
                "depth": [
                    1216,
                    897,
                    3265,
                    1348,
                    1029,
                    1349,
                    1352,
                    3273,
                    1354,
                    3278,
                    1201,
                    1362,
                    3281,
                    3284,
                    3286
                ],
                "bracket_match": [
                    898
                ],
                "Factory": [
                    898,
                    899,
                    901,
                    902,
                    1030,
                    1033,
                    1034,
                    1322,
                    1430
                ],
                "delimiters": [
                    899
                ],
                "previous": [
                    1923,
                    900,
                    1989,
                    1990,
                    1991,
                    1939,
                    1940,
                    1977,
                    1978,
                    1979
                ],
                "_for_loop_depths": [
                    901
                ],
                "List": [
                    2048,
                    2050,
                    2146,
                    1253,
                    901,
                    902,
                    1030,
                    1033,
                    1322,
                    2121,
                    2213,
                    2214,
                    2215,
                    2315,
                    3060,
                    2173,
                    2174,
                    2175
                ],
                "_lambda_argument_depths": [
                    902
                ],
                "leaf.type": [
                    1920,
                    2946,
                    2948,
                    2181,
                    1928,
                    1161,
                    2187,
                    1932,
                    1934,
                    3472,
                    1938,
                    3477,
                    2454,
                    919,
                    1048,
                    1944,
                    3479,
                    3483,
                    1052,
                    924,
                    926,
                    1951,
                    937,
                    938,
                    2862,
                    2225,
                    1076,
                    1216,
                    3526,
                    973,
                    3533,
                    1620,
                    3029,
                    985,
                    3035,
                    3037,
                    1000,
                    2025,
                    1900,
                    1012,
                    3574
                ],
                "leaf": [
                    2563,
                    2572,
                    1048,
                    1052,
                    1057,
                    1058,
                    1571,
                    1061,
                    1062,
                    1063,
                    1064,
                    1577,
                    2600,
                    1076,
                    1081,
                    1620,
                    1621,
                    1622,
                    3477,
                    1629,
                    3479,
                    1637,
                    3483,
                    2178,
                    2181,
                    2182,
                    1160,
                    1161,
                    1162,
                    2185,
                    2187,
                    2188,
                    1168,
                    1169,
                    2707,
                    2709,
                    2472,
                    2715,
                    2719,
                    2219,
                    2221,
                    2223,
                    2225,
                    2226,
                    2227,
                    1204,
                    1205,
                    1211,
                    1212,
                    1215,
                    1216,
                    1218,
                    2761,
                    1255,
                    1284,
                    1298,
                    1299,
                    2334,
                    2335,
                    2336,
                    2862,
                    2865,
                    2879,
                    1872,
                    1873,
                    2388,
                    2393,
                    2395,
                    2396,
                    2908,
                    2398,
                    2401,
                    2402,
                    2403,
                    2406,
                    3430,
                    3431,
                    3432,
                    1900,
                    3436,
                    3439,
                    2931,
                    2932,
                    1914,
                    1920,
                    1921,
                    1922,
                    2434,
                    2946,
                    2947,
                    2948,
                    2439,
                    1928,
                    1929,
                    1930,
                    2441,
                    1932,
                    2442,
                    1934,
                    2444,
                    3471,
                    3472,
                    1938,
                    2453,
                    2454,
                    919,
                    1944,
                    2455,
                    922,
                    923,
                    924,
                    1948,
                    926,
                    927,
                    928,
                    1949,
                    930,
                    1950,
                    1951,
                    1954,
                    934,
                    1955,
                    936,
                    937,
                    938,
                    1960,
                    940,
                    941,
                    942,
                    1961,
                    1962,
                    1966,
                    1969,
                    2477,
                    2480,
                    1973,
                    1974,
                    1975,
                    2490,
                    2491,
                    2496,
                    1985,
                    1986,
                    1987,
                    3525,
                    3526,
                    2507,
                    1996,
                    973,
                    3533,
                    3023,
                    3028,
                    3029,
                    2520,
                    985,
                    986,
                    3033,
                    2524,
                    3035,
                    3036,
                    3037,
                    2528,
                    3042,
                    1000,
                    2025,
                    3051,
                    3052,
                    3053,
                    2543,
                    3568,
                    3570,
                    1012,
                    2949,
                    3574
                ],
                "token.COMMENT": [
                    2065,
                    1458,
                    1237,
                    919,
                    1626
                ],
                "self.maybe_decrement_after_for_loop_variable": [
                    922
                ],
                "self.maybe_decrement_after_lambda_arguments": [
                    923
                ],
                "CLOSING_BRACKETS": [
                    3522,
                    1923,
                    2181,
                    1606,
                    1607,
                    1608,
                    3035,
                    3526,
                    2225,
                    3473,
                    3483,
                    1179,
                    924,
                    3037
                ],
                "self.depth": [
                    928,
                    929,
                    1001,
                    938,
                    939,
                    1002,
                    974,
                    975,
                    1294,
                    1011,
                    1014,
                    1022,
                    984,
                    988,
                    925,
                    926
                ],
                "opening_bracket": [
                    2955,
                    2956,
                    2957,
                    926,
                    927,
                    2339,
                    2217,
                    2221,
                    2226,
                    2229,
                    2238,
                    2239,
                    2240,
                    2246,
                    2247,
                    3020,
                    3032,
                    3033,
                    3034,
                    2281,
                    3052
                ],
                "self.bracket_match.pop": [
                    926
                ],
                "self.bracket_match": [
                    946,
                    938,
                    926,
                    1022
                ],
                "leaf.opening_bracket": [
                    3526,
                    2182,
                    3052,
                    2226,
                    927
                ],
                "leaf.bracket_depth": [
                    928,
                    2401,
                    2402,
                    1162,
                    1215
                ],
                "delim": [
                    930,
                    931,
                    932,
                    934,
                    935,
                    936
                ],
                "is_split_before_delimiter": [
                    930
                ],
                "self.previous": [
                    930,
                    931,
                    932,
                    934,
                    940
                ],
                "self.delimiters": [
                    961,
                    932,
                    965,
                    936,
                    954
                ],
                "is_split_after_delimiter": [
                    934
                ],
                "OPENING_BRACKETS": [
                    3522,
                    1605,
                    3557,
                    1607,
                    1640,
                    937,
                    2187,
                    3533,
                    1806,
                    3472,
                    3038,
                    3574,
                    3480,
                    1694
                ],
                "BRACKET": [
                    938,
                    1604,
                    1605,
                    1606
                ],
                "self.maybe_increment_lambda_arguments": [
                    941
                ],
                "self.maybe_increment_for_loop_variable": [
                    942
                ],
                "self.delimiters.items": [
                    954
                ],
                "priority": [
                    964,
                    965
                ],
                "self.max_delimiter_priority": [
                    964
                ],
                "self.delimiters.values": [
                    965
                ],
                "token.NAME": [
                    3479,
                    1828,
                    1126,
                    1990,
                    1000,
                    1129,
                    2457,
                    1516,
                    973,
                    3068,
                    1103,
                    1944,
                    2838,
                    3063,
                    1688,
                    985,
                    1978,
                    1820
                ],
                "leaf.value": [
                    2563,
                    2947,
                    2949,
                    2572,
                    2455,
                    1048,
                    1948,
                    1960,
                    2600,
                    1966,
                    1969,
                    1973,
                    2490,
                    2491,
                    2879,
                    2496,
                    1985,
                    2507,
                    1996,
                    973,
                    3028,
                    1622,
                    2520,
                    986,
                    2524,
                    2528,
                    3431,
                    1000,
                    3432,
                    3051,
                    2543
                ],
                "self._for_loop_depths.append": [
                    975
                ],
                "self._for_loop_depths": [
                    984,
                    983,
                    989,
                    975
                ],
                "self._for_loop_depths.pop": [
                    989
                ],
                "self._lambda_argument_depths.append": [
                    1002
                ],
                "self._lambda_argument_depths": [
                    1015,
                    1002,
                    1010,
                    1011
                ],
                "token.COLON": [
                    1672,
                    1643,
                    1644,
                    1811,
                    1012,
                    1052,
                    1630
                ],
                "self._lambda_argument_depths.pop": [
                    1015
                ],
                "self.bracket_match.get": [
                    1022
                ],
                "token.RSQB": [
                    3552,
                    1187,
                    1604,
                    1022
                ],
                "leaves": [
                    1030,
                    3463,
                    3464,
                    3467,
                    3470,
                    1295,
                    1296,
                    3471,
                    1298,
                    2326,
                    2328,
                    2331,
                    2332,
                    2334
                ],
                "comments": [
                    1033
                ],
                "bracket_tracker": [
                    1034
                ],
                "BracketTracker": [
                    1034,
                    2926
                ],
                "inside_brackets": [
                    1035,
                    2471
                ],
                "should_explode": [
                    2339,
                    1036
                ],
                "has_value": [
                    1048,
                    1049
                ],
                "BRACKETS": [
                    1048,
                    1885,
                    1607
                ],
                "leaf.value.strip": [
                    1048
                ],
                "self.is_class_paren_empty": [
                    1052
                ],
                "self.leaves": [
                    1154,
                    1155,
                    1160,
                    1295,
                    1168,
                    1177,
                    1178,
                    1306,
                    1053,
                    1054,
                    1188,
                    1064,
                    1076,
                    1204,
                    1211,
                    1086,
                    1091,
                    1096,
                    1103,
                    1104,
                    1110,
                    1240,
                    1118,
                    1246,
                    1123,
                    1265,
                    1266,
                    1268,
                    1141,
                    1269,
                    1143,
                    1144,
                    1145,
                    1146
                ],
                "preformatted": [
                    1081,
                    1060,
                    1054
                ],
                "leaf.prefix": [
                    1057,
                    3431,
                    2472,
                    2025,
                    2477,
                    1872,
                    2480,
                    3028,
                    2709
                ],
                "whitespace": [
                    1057
                ],
                "self.is_complex_subscript": [
                    1058
                ],
                "self.inside_brackets": [
                    1060
                ],
                "self.bracket_tracker.mark": [
                    1061
                ],
                "self.bracket_tracker": [
                    1072,
                    1273,
                    1061,
                    1232
                ],
                "self.maybe_remove_trailing_comma": [
                    1062
                ],
                "self.append_comment": [
                    1063
                ],
                "self.leaves.append": [
                    1064
                ],
                "self.bracket_tracker.depth": [
                    1072
                ],
                "self.is_comment": [
                    1073
                ],
                "self.append": [
                    1081
                ],
                "is_import": [
                    1096
                ],
                "self.is_class": [
                    1142,
                    1110
                ],
                "token.DOT": [
                    1824,
                    1793,
                    1825,
                    1920,
                    1832,
                    1737,
                    1770,
                    3467,
                    3477,
                    1111,
                    3480,
                    2908
                ],
                "first_leaf": [
                    1345,
                    1126,
                    1127,
                    1118,
                    1342,
                    1343
                ],
                "second_leaf": [
                    1123,
                    1125,
                    1128,
                    1129,
                    1130
                ],
                "first_leaf.type": [
                    1126,
                    1127
                ],
                "first_leaf.value": [
                    1126
                ],
                "token.ASYNC": [
                    1552,
                    1951,
                    1944,
                    1127
                ],
                "second_leaf.type": [
                    1129
                ],
                "second_leaf.value": [
                    1130
                ],
                "token.LPAR": [
                    2848,
                    2818,
                    2946,
                    1604,
                    1733,
                    2246,
                    2662,
                    2789,
                    2923,
                    2668,
                    1774,
                    1777,
                    2675,
                    2805,
                    1143,
                    2681,
                    1755,
                    2687
                ],
                "token.RPAR": [
                    2688,
                    2848,
                    1604,
                    1733,
                    2789,
                    2663,
                    2820,
                    2249,
                    2948,
                    2923,
                    2669,
                    2806,
                    1145,
                    2682,
                    3547
                ],
                "token.STRING": [
                    1154,
                    2980,
                    3083,
                    3467,
                    1938,
                    1940,
                    1820,
                    1471
                ],
                "value.startswith": [
                    1155
                ],
                "sys.maxsize": [
                    2381,
                    1158
                ],
                "depth_limit": [
                    1162
                ],
                "is_multiline_string": [
                    1169,
                    3561,
                    2685
                ],
                "token.COMMA": [
                    1216,
                    1728,
                    1699,
                    1608,
                    1704,
                    2824,
                    1900,
                    2829,
                    1647,
                    2415,
                    1745,
                    2418,
                    2963,
                    2992,
                    1721,
                    1178,
                    2331,
                    2332
                ],
                "closing.type": [
                    1179,
                    1187,
                    1183
                ],
                "closing": [
                    1187,
                    1201,
                    1203,
                    1179,
                    1212,
                    1183
                ],
                "token.RBRACE": [
                    3548,
                    1604,
                    1183
                ],
                "self.remove_trailing_comma": [
                    1184,
                    1196,
                    1190,
                    1223
                ],
                "comma": [
                    1188,
                    1189
                ],
                "comma.parent": [
                    1189
                ],
                "comma.parent.type": [
                    1189
                ],
                "self.is_import": [
                    1195
                ],
                "closing.bracket_depth": [
                    1201
                ],
                "commas": [
                    1217,
                    1202,
                    1219,
                    1222
                ],
                "opening": [
                    1203,
                    1205
                ],
                "closing.opening_bracket": [
                    1203
                ],
                "_opening_index": [
                    1211,
                    1204
                ],
                "bracket_depth": [
                    1216,
                    1215
                ],
                "leaf.parent": [
                    1921,
                    1922,
                    1929,
                    1930,
                    2453,
                    1949,
                    1950,
                    1961,
                    1962,
                    1966,
                    2862,
                    2865,
                    1974,
                    1975,
                    1218,
                    1986,
                    1987,
                    1996,
                    1621
                ],
                "leaf.parent.type": [
                    1218,
                    1922,
                    1987,
                    1962,
                    1930,
                    1966,
                    1975,
                    1950
                ],
                "comment.type": [
                    1231,
                    1458,
                    1237,
                    1241,
                    2714
                ],
                "comment": [
                    1300,
                    1301,
                    2068,
                    2071,
                    2709,
                    2710,
                    2714,
                    2726,
                    2728,
                    1454,
                    1457,
                    1458,
                    1460,
                    2746,
                    1467,
                    2751,
                    2763,
                    2764,
                    1231,
                    1234,
                    1237,
                    1241,
                    1242,
                    1248,
                    1250,
                    3435,
                    3436,
                    3437
                ],
                "self.bracket_tracker.any_open_brackets": [
                    1232
                ],
                "comment.prefix": [
                    1242,
                    1234
                ],
                "leaf_id": [
                    1248,
                    1250,
                    1246,
                    1247
                ],
                "self.comments": [
                    1248,
                    1250,
                    1255,
                    1265,
                    1266,
                    1268,
                    1300,
                    1306,
                    1247
                ],
                "append": [
                    1250
                ],
                "self.comments.get": [
                    1266,
                    1255
                ],
                "extend": [
                    1265
                ],
                "self.comments.setdefault": [
                    1265
                ],
                "self.comments.pop": [
                    1268
                ],
                "self.leaves.pop": [
                    1269
                ],
                "open_lsqb": [
                    1273,
                    1274,
                    1277
                ],
                "self.bracket_tracker.get_open_lsqb": [
                    1273
                ],
                "subscript_start": [
                    1280,
                    1283,
                    1284,
                    1285,
                    1286,
                    1277,
                    1279
                ],
                "open_lsqb.next_sibling": [
                    1277
                ],
                "subscript_start.type": [
                    1280,
                    1283
                ],
                "syms.subscriptlist": [
                    1632,
                    1784,
                    1283
                ],
                "child_towards": [
                    1284
                ],
                "n.type": [
                    2985,
                    2980,
                    1286,
                    2990
                ],
                "n": [
                    2979,
                    2980,
                    2981,
                    1286,
                    2728,
                    2985,
                    2986,
                    2990,
                    2991,
                    2992,
                    2994
                ],
                "subscript_start.pre_order": [
                    1286
                ],
                "first": [
                    3522,
                    2723,
                    2724,
                    2725,
                    2726,
                    2787,
                    2789,
                    2791,
                    2921,
                    2923,
                    3526,
                    3561,
                    1296,
                    1297,
                    3515
                ],
                "res": [
                    1847,
                    1297,
                    1299,
                    1844,
                    1301,
                    1302,
                    1845,
                    1846,
                    1850
                ],
                "first.prefix": [
                    1297,
                    2725,
                    2726
                ],
                "first.value": [
                    1297,
                    2791
                ],
                "itertools.chain.from_iterable": [
                    1300
                ],
                "itertools.chain": [
                    1300
                ],
                "itertools": [
                    1300
                ],
                "self.comments.values": [
                    1300
                ],
                "previous_line": [
                    1320
                ],
                "previous_after": [
                    1321
                ],
                "previous_defs": [
                    1322
                ],
                "self._maybe_empty_lines": [
                    1330
                ],
                "self.previous_after": [
                    1331,
                    1332
                ],
                "self.previous_line": [
                    1408,
                    1380,
                    1400,
                    1384,
                    1387,
                    1388,
                    1359,
                    1360,
                    1393,
                    1362,
                    1394,
                    1333,
                    1367,
                    1368,
                    1402,
                    1403
                ],
                "max_allowed": [
                    1344,
                    1337,
                    1339
                ],
                "current_line.depth": [
                    1379,
                    1348,
                    1415,
                    1387,
                    1394,
                    1400,
                    1338
                ],
                "self.is_pyi": [
                    1540,
                    1351,
                    1523,
                    1399,
                    1339,
                    1532
                ],
                "current_line.leaves": [
                    2416,
                    1340,
                    1342,
                    2415
                ],
                "first_leaf.prefix.count": [
                    1343
                ],
                "first_leaf.prefix": [
                    1345,
                    1343
                ],
                "self.previous_defs": [
                    1379,
                    1349,
                    1350
                ],
                "self.previous_defs.pop": [
                    1350
                ],
                "current_line.is_decorator": [
                    1378,
                    1355
                ],
                "current_line.is_def": [
                    1408,
                    1355
                ],
                "current_line.is_class": [
                    1402,
                    1355
                ],
                "self._maybe_empty_lines_for_class_or_def": [
                    1356
                ],
                "self.previous_line.is_import": [
                    1360
                ],
                "current_line.is_import": [
                    1361
                ],
                "self.previous_line.depth": [
                    1400,
                    1362,
                    1387,
                    1394
                ],
                "self.previous_line.is_class": [
                    1368,
                    1402,
                    1388
                ],
                "current_line.is_triple_quoted_string": [
                    1369
                ],
                "self.previous_defs.append": [
                    1379
                ],
                "self.previous_line.is_decorator": [
                    1384
                ],
                "self.previous_line.is_def": [
                    1408,
                    1388
                ],
                "self.previous_line.is_comment": [
                    1393
                ],
                "newlines": [
                    1410,
                    1412,
                    1414,
                    1415,
                    1416,
                    1417,
                    1401,
                    2043,
                    1405,
                    1407
                ],
                "current_line.is_stub_class": [
                    1403
                ],
                "self.previous_line.is_stub_class": [
                    1403
                ],
                "remove_u_prefix": [
                    2494,
                    1431
                ],
                "allow_underscores": [
                    2627,
                    2597,
                    2599,
                    2606,
                    2609,
                    2611,
                    1432,
                    2588,
                    2589
                ],
                "self.current_line": [
                    1442,
                    1443,
                    1477,
                    1446,
                    1447,
                    1575,
                    1453,
                    1457,
                    1460,
                    1467
                ],
                "self.current_line.depth": [
                    1443
                ],
                "complete_line": [
                    1448,
                    1446,
                    1447
                ],
                "complete_line.depth": [
                    1447
                ],
                "any_open_brackets": [
                    1453,
                    1470,
                    1455
                ],
                "self.current_line.bracket_tracker.any_open_brackets": [
                    1453,
                    1575
                ],
                "self.current_line.bracket_tracker": [
                    1453,
                    1575
                ],
                "generate_comments": [
                    1454
                ],
                "self.current_line.append": [
                    1457,
                    1467,
                    1460,
                    1477
                ],
                "self.line": [
                    1537,
                    1572,
                    1541,
                    1576,
                    1546,
                    1483,
                    1567,
                    1517,
                    1491,
                    1562,
                    1461,
                    1465,
                    1498,
                    1468,
                    1535
                ],
                "normalize_prefix": [
                    2328,
                    2352,
                    1470
                ],
                "self.normalize_strings": [
                    1471
                ],
                "normalize_string_prefix": [
                    1472
                ],
                "self.remove_u_prefix": [
                    1472
                ],
                "normalize_string_quotes": [
                    1473
                ],
                "token.NUMBER": [
                    2985,
                    1474,
                    1739,
                    1820
                ],
                "normalize_numeric_literal": [
                    1475
                ],
                "self.allow_underscores": [
                    1475
                ],
                "visit_default": [
                    1478
                ],
                "normalize_invisible_parens": [
                    1514
                ],
                "parens": [
                    1514
                ],
                "child.type": [
                    2660,
                    3076,
                    1516,
                    1552,
                    2675,
                    3063,
                    2679,
                    3065,
                    2906,
                    3070
                ],
                "child.value": [
                    3064,
                    2692,
                    1516,
                    2677
                ],
                "keywords": [
                    1516
                ],
                "is_stub_suite": [
                    1523,
                    1540
                ],
                "is_suite_like": [
                    1530,
                    1531
                ],
                "node.parent": [
                    1540,
                    1862,
                    1863,
                    1530,
                    1855
                ],
                "node.parent.type": [
                    1530
                ],
                "is_stub_body": [
                    1532,
                    2893
                ],
                "children": [
                    3061,
                    1555,
                    1548,
                    1549
                ],
                "internal_stmt": [
                    1555,
                    1556
                ],
                "internal_stmt.children": [
                    1556
                ],
                "self.visit_stmt": [
                    1581
                ],
                "\u00d8": [
                    1582,
                    1590,
                    1592,
                    1593,
                    1594,
                    1595,
                    1596,
                    1598
                ],
                "self.visit_assert_stmt": [
                    1583
                ],
                "self.visit_if_stmt": [
                    1584
                ],
                "self.visit_while_stmt": [
                    1587
                ],
                "self.visit_for_stmt": [
                    1588
                ],
                "self.visit_try_stmt": [
                    1589
                ],
                "self.visit_except_clause": [
                    1592
                ],
                "self.visit_with_stmt": [
                    1593
                ],
                "self.visit_funcdef": [
                    1594
                ],
                "self.visit_classdef": [
                    1595
                ],
                "self.visit_expr_stmt": [
                    1596
                ],
                "self.visit_return_stmt": [
                    1597
                ],
                "self.visit_import_from": [
                    1598
                ],
                "self.visit_async_funcdef": [
                    1599
                ],
                "self.visit_async_stmt": [
                    1599
                ],
                "self.visit_decorated": [
                    1600
                ],
                "self.visit_decorators": [
                    1600
                ],
                "IMPLICIT_TUPLE": [
                    2827,
                    1603
                ],
                "syms.testlist": [
                    1603
                ],
                "syms.exprlist": [
                    1603
                ],
                "token.LSQB": [
                    1604,
                    1742
                ],
                "token.LBRACE": [
                    1604
                ],
                "BRACKET.keys": [
                    1605
                ],
                "BRACKET.values": [
                    1606
                ],
                "ALWAYS_NO_SPACE": [
                    1608,
                    1623
                ],
                "SPACE": [
                    1830,
                    1674,
                    1838,
                    1618,
                    1650,
                    1785
                ],
                "DOUBLESPACE": [
                    1627,
                    1619
                ],
                "t": [
                    1824,
                    1793,
                    1828,
                    1733,
                    1737,
                    1643,
                    1742,
                    1774,
                    1712,
                    1620,
                    1750,
                    1623,
                    2454,
                    2457,
                    1626,
                    1820,
                    1630
                ],
                "p.type": [
                    1792,
                    1797,
                    1802,
                    2459,
                    2460,
                    1823,
                    1697,
                    1702,
                    1707,
                    1835,
                    2866,
                    2874,
                    1724,
                    1731,
                    1748,
                    1630,
                    1761,
                    1765,
                    1773,
                    1780
                ],
                "syms.subscript": [
                    1673,
                    1780,
                    1812,
                    1631
                ],
                "syms.sliceop": [
                    1633,
                    1673,
                    1835,
                    1780,
                    1813
                ],
                "prev": [
                    1793,
                    1799,
                    1804,
                    2715,
                    2716,
                    1694,
                    1825,
                    1699,
                    1704,
                    1832,
                    1709,
                    1713,
                    1716,
                    1719,
                    1721,
                    1726,
                    1736,
                    1745,
                    1753,
                    1758,
                    1637,
                    1638,
                    1766,
                    1777,
                    1782
                ],
                "leaf.prev_sibling": [
                    1954,
                    1955,
                    1637
                ],
                "prevp": [
                    1666,
                    1668,
                    1669,
                    1672,
                    1673,
                    1677,
                    1678,
                    1679,
                    1805,
                    1806,
                    1809,
                    1811,
                    1684,
                    1685,
                    1686,
                    1687,
                    1688,
                    1689,
                    1817,
                    1727,
                    1728,
                    1738,
                    1739,
                    1754,
                    1755,
                    1639,
                    1640,
                    1769,
                    1770,
                    1644,
                    1647,
                    1652,
                    1653,
                    1654,
                    1662
                ],
                "preceding_leaf": [
                    1639,
                    1769,
                    1738,
                    1805,
                    1754,
                    2715,
                    1727
                ],
                "prevp.type": [
                    1728,
                    1668,
                    1640,
                    1672,
                    1770,
                    1739,
                    1644,
                    1806,
                    1647,
                    1679,
                    1811,
                    1652,
                    1684,
                    1817,
                    1755
                ],
                "complex_subscript": [
                    1674,
                    1789,
                    1647
                ],
                "token.EQUAL": [
                    1712,
                    1716,
                    1652,
                    1750,
                    1817,
                    1758
                ],
                "prevp.parent": [
                    1673,
                    1677,
                    1678,
                    1809,
                    1653,
                    1654,
                    1685,
                    1686,
                    1662
                ],
                "prevp.parent.type": [
                    1673,
                    1678,
                    1654,
                    1686,
                    1662
                ],
                "syms.parameters": [
                    1657,
                    1697
                ],
                "prevp.prefix": [
                    1666
                ],
                "is_vararg": [
                    1914,
                    1669,
                    2402
                ],
                "syms.factor": [
                    1802,
                    1678,
                    1930
                ],
                "prevp.prev_sibling": [
                    1688,
                    1689,
                    1687
                ],
                "prevp.prev_sibling.type": [
                    1688
                ],
                "prevp.prev_sibling.value": [
                    1689
                ],
                "prev.type": [
                    1825,
                    1699,
                    1799,
                    1704,
                    1832,
                    1758,
                    1713,
                    1745,
                    1777,
                    1716,
                    1721,
                    2716,
                    1694
                ],
                "syms.tname": [
                    1713,
                    1724
                ],
                "prev.prefix": [
                    1719
                ],
                "syms.decorator": [
                    1761
                ],
                "syms.dotted_name": [
                    1922,
                    1765
                ],
                "p.parent": [
                    1784,
                    2872,
                    2869,
                    1783
                ],
                "p.parent.type": [
                    1784
                ],
                "prevp_parent": [
                    1809,
                    1810,
                    1811,
                    1817
                ],
                "prevp_parent.type": [
                    1817,
                    1811
                ],
                "syms.import_from": [
                    1922,
                    2956,
                    2672,
                    3089,
                    2460,
                    1823
                ],
                "node.prev_sibling": [
                    1844
                ],
                "res.leaves": [
                    1850
                ],
                "descendant": [
                    1861
                ],
                "ancestor": [
                    1862
                ],
                "same_prefix": [
                    1872,
                    1879
                ],
                "container": [
                    1888,
                    1889,
                    2761,
                    2762,
                    2763,
                    2767,
                    1873,
                    1874,
                    1875,
                    2769
                ],
                "parent": [
                    1888,
                    2724,
                    1875,
                    1876,
                    2739,
                    2741,
                    1879,
                    1882,
                    1885
                ],
                "container.parent": [
                    1875
                ],
                "prefix": [
                    2529,
                    2051,
                    2563,
                    2725,
                    2726,
                    2056,
                    2543,
                    2546,
                    1879,
                    2746,
                    2524
                ],
                "parent.children": [
                    1879
                ],
                "parent.type": [
                    1882
                ],
                "parent.prev_sibling": [
                    1885
                ],
                "parent.prev_sibling.type": [
                    1885
                ],
                "previous.type": [
                    1978,
                    1923,
                    1940,
                    1990
                ],
                "syms.comp_for": [
                    1950
                ],
                "syms.old_comp_for": [
                    1950
                ],
                "leaf.prev_sibling.value": [
                    1955
                ],
                "syms.comp_if": [
                    1962
                ],
                "syms.old_comp_if": [
                    1962
                ],
                "syms.comp_op": [
                    1987,
                    1975
                ],
                "previous.value": [
                    1979,
                    1991
                ],
                "FMT_OFF": [
                    2002,
                    2653,
                    2710
                ],
                "FMT_ON": [
                    2003,
                    2764
                ],
                "pc": [
                    2025,
                    2026,
                    2652,
                    2653
                ],
                "list_comments": [
                    2025,
                    2763,
                    2652,
                    2709
                ],
                "token.ENDMARKER": [
                    2025,
                    2762
                ],
                "pc.type": [
                    2026
                ],
                "pc.value": [
                    2026,
                    2653
                ],
                "pc.newlines": [
                    2026
                ],
                "consumed": [
                    2057,
                    2044,
                    2054,
                    2071
                ],
                "ProtoComment": [
                    2048,
                    2050,
                    2070
                ],
                "nlines": [
                    2074,
                    2060,
                    2071,
                    2055
                ],
                "index": [
                    2689,
                    2658,
                    2690,
                    3430,
                    2056,
                    2664,
                    2665,
                    2671,
                    2064,
                    2736,
                    2738,
                    3023,
                    3439,
                    3413,
                    3415,
                    3416,
                    2681,
                    3038
                ],
                "prefix.split": [
                    2056
                ],
                "line.lstrip": [
                    2058
                ],
                "line.startswith": [
                    2061
                ],
                "is_endmarker": [
                    2064
                ],
                "comment_type": [
                    2065,
                    2067,
                    2071
                ],
                "make_comment": [
                    2068
                ],
                "result.append": [
                    2337,
                    2069,
                    2335
                ],
                "lru_cache": [
                    3142,
                    2047
                ],
                "content": [
                    2086,
                    2087,
                    2090,
                    2091,
                    2092,
                    2093,
                    2094
                ],
                "content.rstrip": [
                    2086
                ],
                "line.is_comment": [
                    2110
                ],
                "line_str": [
                    2114,
                    2116,
                    2149,
                    3447,
                    3448,
                    3450,
                    3451
                ],
                "strip": [
                    3448,
                    2114,
                    2149,
                    2302
                ],
                "line.should_explode": [
                    2115
                ],
                "is_line_short_enough": [
                    2129,
                    2115,
                    2267
                ],
                "split_funcs": [
                    2121,
                    2123,
                    2139,
                    2141,
                    2142
                ],
                "line.is_def": [
                    2122
                ],
                "left_hand_split": [
                    2123
                ],
                "omit": [
                    3046,
                    3047,
                    3016,
                    3017,
                    3049,
                    2127,
                    2128,
                    2225,
                    2259,
                    2261
                ],
                "generate_trailers_to_omit": [
                    2127
                ],
                "right_hand_split": [
                    2128,
                    2136,
                    2261
                ],
                "line.inside_brackets": [
                    2438,
                    2410,
                    2380,
                    2392,
                    2138,
                    2428
                ],
                "delimiter_split": [
                    2139
                ],
                "standalone_comment_split": [
                    2139
                ],
                "rhs": [
                    2139,
                    2141
                ],
                "split_func": [
                    2148,
                    2349,
                    2142,
                    2351
                ],
                "l": [
                    2148,
                    2149,
                    2153,
                    2351,
                    2352,
                    2353
                ],
                "CannotSplit": [
                    2368,
                    2305,
                    2274,
                    2308,
                    2150,
                    2374,
                    2378,
                    2155,
                    2191,
                    2264,
                    2233,
                    2426,
                    2269
                ],
                "result.extend": [
                    2152
                ],
                "tail_leaves": [
                    2240,
                    2213,
                    2184,
                    2216,
                    2222,
                    2224,
                    2195,
                    2235,
                    2173
                ],
                "body_leaves": [
                    2180,
                    2214,
                    2184,
                    2220,
                    2189,
                    2222,
                    2194,
                    2228,
                    2236,
                    2174,
                    2239
                ],
                "head_leaves": [
                    2176,
                    2215,
                    2184,
                    2186,
                    2222,
                    2193,
                    2229,
                    2237,
                    2238,
                    2175
                ],
                "current_leaves": [
                    2176,
                    2180,
                    2184,
                    2185,
                    2186,
                    2216,
                    2220,
                    2189,
                    2222,
                    2223,
                    2224,
                    2228
                ],
                "matching_bracket": [
                    2177,
                    2182,
                    2188,
                    2190,
                    2193,
                    2194,
                    2195
                ],
                "line.leaves": [
                    2178,
                    3518,
                    3430,
                    3463,
                    2441,
                    2219,
                    2962,
                    3539,
                    3038,
                    3515,
                    3513,
                    2395,
                    3516,
                    3517,
                    2366
                ],
                "current_leaves.append": [
                    2185,
                    2223
                ],
                "head": [
                    2241,
                    2273,
                    2283,
                    2193,
                    2196,
                    2197,
                    2238
                ],
                "bracket_split_build_line": [
                    2240,
                    2193,
                    2194,
                    2195,
                    2238,
                    2239
                ],
                "body": [
                    2194,
                    2196,
                    2197,
                    2239,
                    2241,
                    2244,
                    2255,
                    2257,
                    2266,
                    2267,
                    2528,
                    2530,
                    2536,
                    2283,
                    2539,
                    2540,
                    2542,
                    2543,
                    2555,
                    2303
                ],
                "tail": [
                    2240,
                    2241,
                    2273,
                    2283,
                    2195,
                    2196,
                    2197,
                    2302
                ],
                "bracket_split_succeeded_or_raise": [
                    2241,
                    2196
                ],
                "Collection": [
                    2203
                ],
                "closing_bracket": [
                    3045,
                    3046,
                    2249,
                    2250,
                    2218,
                    2282,
                    3021,
                    3053,
                    2227,
                    2259,
                    2229
                ],
                "tail_leaves.reverse": [
                    2235
                ],
                "body_leaves.reverse": [
                    2236
                ],
                "head_leaves.reverse": [
                    2237
                ],
                "body.should_explode": [
                    2244
                ],
                "opening_bracket.type": [
                    2246
                ],
                "opening_bracket.value": [
                    2957,
                    2247
                ],
                "closing_bracket.type": [
                    2249
                ],
                "closing_bracket.value": [
                    2250
                ],
                "line.is_import": [
                    2253
                ],
                "body.contains_standalone_comments": [
                    2255
                ],
                "can_omit_invisible_parens": [
                    2257
                ],
                "can_be_split": [
                    2266
                ],
                "head.contains_multiline_strings": [
                    2273
                ],
                "tail.contains_multiline_strings": [
                    2273
                ],
                "ensure_visible": [
                    2281,
                    2282
                ],
                "tail_len": [
                    2304,
                    2307,
                    2302,
                    2310
                ],
                "original.depth": [
                    2322
                ],
                "original": [
                    2336,
                    2322,
                    2330,
                    3398
                ],
                "is_body": [
                    2338,
                    2323
                ],
                "result.inside_brackets": [
                    2324
                ],
                "result.depth": [
                    2325
                ],
                "original.is_import": [
                    2330
                ],
                "leaves.append": [
                    2332
                ],
                "comment_after": [
                    2336,
                    2337,
                    2444,
                    2445,
                    2398,
                    2399
                ],
                "original.comments_after": [
                    2336
                ],
                "result.should_explode": [
                    2339
                ],
                "l.leaves": [
                    2352
                ],
                "wraps": [
                    2349
                ],
                "split_wrapper": [
                    2355
                ],
                "last_leaf": [
                    2962,
                    2963,
                    2372,
                    2366
                ],
                "bt": [
                    2370,
                    2372,
                    2406,
                    2377,
                    3499,
                    3500,
                    2926,
                    3504,
                    2929,
                    3505,
                    2932,
                    2934
                ],
                "line.bracket_tracker": [
                    2370,
                    3499,
                    2964
                ],
                "delimiter_priority": [
                    2372,
                    2407,
                    2376,
                    2377,
                    2414
                ],
                "bt.max_delimiter_priority": [
                    3504,
                    2372,
                    2934
                ],
                "bt.delimiter_count_with_priority": [
                    2377,
                    3505
                ],
                "line.depth": [
                    3524,
                    2438,
                    2410,
                    3019,
                    2380,
                    3566,
                    2392,
                    2428
                ],
                "lowest_depth": [
                    2401,
                    2402,
                    2381
                ],
                "trailing_comma_safe": [
                    2413,
                    2405,
                    2382
                ],
                "current_line.append_safe": [
                    2434,
                    2388
                ],
                "current_line.append": [
                    2393,
                    2418,
                    2439
                ],
                "append_to_line": [
                    2442,
                    2396,
                    2445,
                    2399
                ],
                "line.comments_after": [
                    3436,
                    2444,
                    2398
                ],
                "leaf_priority": [
                    2406,
                    2407
                ],
                "bt.delimiters.get": [
                    2406
                ],
                "bt.delimiters": [
                    3500,
                    2406
                ],
                "dont_increase_indentation": [
                    2422,
                    2358
                ],
                "line.contains_standalone_comments": [
                    2425,
                    3452
                ],
                "syms.import_name": [
                    2459
                ],
                "spl": [
                    2472,
                    2473,
                    2474,
                    2475
                ],
                "leaf.prefix.split": [
                    2472
                ],
                "nl_count": [
                    2474,
                    2476,
                    2477
                ],
                "count": [
                    2474
                ],
                "match": [
                    2496,
                    2490,
                    2491,
                    2492
                ],
                "re.match": [
                    2490
                ],
                "re.DOTALL": [
                    2490
                ],
                "orig_prefix": [
                    2492,
                    2493
                ],
                "match.group": [
                    2496,
                    2492
                ],
                "new_prefix": [
                    2496,
                    2493,
                    2495
                ],
                "orig_prefix.lower": [
                    2493
                ],
                "new_prefix.replace": [
                    2495
                ],
                "leaf.value.lstrip": [
                    2507,
                    2879
                ],
                "orig_quote": [
                    2528,
                    2560,
                    2543,
                    2512,
                    2544,
                    2515,
                    2518,
                    2520,
                    2527
                ],
                "new_quote": [
                    2563,
                    2539,
                    2513,
                    2545,
                    2516,
                    2519,
                    2552,
                    2525,
                    2526
                ],
                "first_quote_pos": [
                    2520,
                    2521,
                    2528,
                    2524
                ],
                "leaf.value.find": [
                    2520
                ],
                "unescaped_new_quote": [
                    2545,
                    2530,
                    2525
                ],
                "re.compile": [
                    3408,
                    2525,
                    2526,
                    2527
                ],
                "escaped_new_quote": [
                    2539,
                    2526
                ],
                "escaped_orig_quote": [
                    2544,
                    2527
                ],
                "prefix.casefold": [
                    2529,
                    2546
                ],
                "unescaped_new_quote.search": [
                    2530
                ],
                "new_body": [
                    2563,
                    2536,
                    2539,
                    2540,
                    2542,
                    2544,
                    2545,
                    2547,
                    2552,
                    2554,
                    2556
                ],
                "sub_twice": [
                    2544,
                    2545,
                    2539
                ],
                "matches": [
                    2547,
                    2548
                ],
                "re.findall": [
                    2547
                ],
                "m": [
                    2548,
                    2549
                ],
                "orig_escape_count": [
                    2560,
                    2555,
                    2557
                ],
                "body.count": [
                    2555
                ],
                "new_escape_count": [
                    2560,
                    2556,
                    2557
                ],
                "new_body.count": [
                    2556
                ],
                "text": [
                    2572,
                    2573,
                    2576,
                    2578,
                    2579,
                    2580,
                    2581,
                    2590,
                    2591,
                    2592,
                    2593,
                    2597,
                    2599,
                    2600,
                    2605,
                    2606,
                    2608,
                    2628,
                    2630,
                    2631,
                    2633,
                    2638,
                    2640
                ],
                "leaf.value.lower": [
                    2572
                ],
                "text.startswith": [
                    2576,
                    2573
                ],
                "after.upper": [
                    2579
                ],
                "text.split": [
                    2608,
                    2581
                ],
                "sign": [
                    2585,
                    2582,
                    2590
                ],
                "after.startswith": [
                    2586,
                    2583
                ],
                "format_float_or_int_string": [
                    2588,
                    2597,
                    2599
                ],
                "format_int_string": [
                    2609,
                    2611,
                    2589,
                    2606
                ],
                "text.endswith": [
                    2591
                ],
                "number": [
                    2592,
                    2597
                ],
                "suffix": [
                    2593,
                    2595,
                    2596,
                    2597
                ],
                "text.replace": [
                    2630
                ],
                "count_from_end": [
                    2635
                ],
                "lstrip": [
                    2638
                ],
                "join": [
                    3301,
                    2728,
                    3308,
                    3309,
                    2640,
                    3254,
                    3358
                ],
                "i": [
                    2640
                ],
                "check_lpar": [
                    2657,
                    2659,
                    2692
                ],
                "maybe_make_parens_invisible_in_atom": [
                    2794,
                    2661
                ],
                "lpar": [
                    2816,
                    2848,
                    2690,
                    2818,
                    2662,
                    2665,
                    2668,
                    2671,
                    2847,
                    2687
                ],
                "rpar": [
                    2688,
                    2816,
                    2690,
                    2848,
                    2820,
                    2663,
                    2665,
                    2669,
                    2671,
                    2847
                ],
                "child.remove": [
                    2664,
                    2689,
                    2670
                ],
                "node.insert_child": [
                    2681,
                    2665,
                    2690,
                    2671
                ],
                "is_one_tuple": [
                    2666,
                    2781
                ],
                "node.append_child": [
                    2682
                ],
                "parens_after": [
                    2692
                ],
                "try_again": [
                    2697,
                    2698,
                    2699
                ],
                "convert_one_fmt_off_pair": [
                    2699
                ],
                "node.leaves": [
                    2707
                ],
                "previous_consumed": [
                    2746,
                    2708,
                    2751
                ],
                "comment.value": [
                    2728,
                    2764,
                    3437,
                    2710
                ],
                "ignored_nodes": [
                    2720,
                    2723,
                    2728,
                    2735,
                    2719
                ],
                "generate_ignored_nodes": [
                    2719
                ],
                "first.parent": [
                    2724
                ],
                "comment.consumed": [
                    2726,
                    2751
                ],
                "hidden_value": [
                    2745,
                    2730,
                    2733,
                    2727
                ],
                "hidden_value.endswith": [
                    2730
                ],
                "first_idx": [
                    2734,
                    2737,
                    2738,
                    2740,
                    2742
                ],
                "ignored": [
                    2736,
                    2735
                ],
                "ignored.remove": [
                    2736
                ],
                "parent.insert_child": [
                    2741
                ],
                "comment.newlines": [
                    2746
                ],
                "container_of": [
                    2761
                ],
                "container.type": [
                    2762
                ],
                "container.prefix": [
                    2763
                ],
                "container.next_sibling": [
                    2769
                ],
                "is_empty_tuple": [
                    2780
                ],
                "is_yield": [
                    2849,
                    2782
                ],
                "max_delimiter_priority_in_atom": [
                    2783
                ],
                "last": [
                    3552,
                    3553,
                    3554,
                    2788,
                    2789,
                    2792,
                    2922,
                    2923,
                    3570,
                    3547,
                    3548,
                    3518
                ],
                "first.type": [
                    3522,
                    2923,
                    2789
                ],
                "last.type": [
                    3552,
                    2789,
                    2923,
                    3547,
                    3548
                ],
                "last.value": [
                    2792
                ],
                "gexp": [
                    2816,
                    2824,
                    2819
                ],
                "lpar.type": [
                    2848,
                    2818
                ],
                "gexp.type": [
                    2819
                ],
                "rpar.type": [
                    2848,
                    2820
                ],
                "gexp.children": [
                    2824
                ],
                "syms.yield_expr": [
                    2835
                ],
                "expr": [
                    2849,
                    2847
                ],
                "within": [
                    2874
                ],
                "syms.simple_stmt": [
                    2898,
                    3076
                ],
                "child.children": [
                    3078,
                    3082,
                    3084,
                    3066,
                    2907,
                    2908,
                    3071
                ],
                "c": [
                    2928,
                    2929,
                    2931,
                    2927
                ],
                "bt.mark": [
                    2929,
                    2932
                ],
                "c.leaves": [
                    2931
                ],
                "opening_bracket.parent": [
                    2955,
                    2956
                ],
                "opening_bracket.parent.type": [
                    2956
                ],
                "last_leaf.type": [
                    2963
                ],
                "max_priority": [
                    3504,
                    3505,
                    2964,
                    3509,
                    2968
                ],
                "line.bracket_tracker.max_delimiter_priority": [
                    2964
                ],
                "node.pre_order": [
                    2979
                ],
                "value_head": [
                    2981,
                    2982
                ],
                "n.value": [
                    2986,
                    2981
                ],
                "n.children": [
                    2992,
                    2994,
                    2991
                ],
                "ch": [
                    2994,
                    2995,
                    2998,
                    2999
                ],
                "ch.type": [
                    2995,
                    2998
                ],
                "argch": [
                    3000,
                    2999
                ],
                "ch.children": [
                    2999
                ],
                "argch.type": [
                    3000
                ],
                "length": [
                    3524,
                    3431,
                    3529,
                    3530,
                    3019,
                    3437,
                    3566,
                    3439,
                    3024,
                    3025,
                    3569,
                    3571
                ],
                "inner_brackets": [
                    3042,
                    3047,
                    3048,
                    3022,
                    3036
                ],
                "leaf_length": [
                    3525,
                    3529,
                    3023,
                    3024,
                    3568,
                    3569,
                    3028
                ],
                "enumerate_with_length": [
                    3568,
                    3525,
                    3023
                ],
                "has_inline_comment": [
                    3028,
                    3029
                ],
                "inner_brackets.add": [
                    3042,
                    3036
                ],
                "omit.add": [
                    3046
                ],
                "omit.update": [
                    3047
                ],
                "inner_brackets.clear": [
                    3048
                ],
                "imports": [
                    3096,
                    3058,
                    3093
                ],
                "syms.import_as_name": [
                    3065
                ],
                "orig_name": [
                    3066,
                    3067,
                    3068,
                    3069
                ],
                "orig_name.type": [
                    3068
                ],
                "orig_name.value": [
                    3069
                ],
                "syms.import_as_names": [
                    3070
                ],
                "get_imports_from_children": [
                    3093,
                    3071
                ],
                "Generator": [
                    3060
                ],
                "first_child": [
                    3078,
                    3079,
                    3083,
                    3089,
                    3090,
                    3093
                ],
                "first_child.type": [
                    3089,
                    3083
                ],
                "module_name": [
                    3090,
                    3091
                ],
                "first_child.children": [
                    3090,
                    3093
                ],
                "module_name.value": [
                    3091
                ],
                "Pattern": [
                    3392,
                    3401,
                    3102,
                    3103
                ],
                "root.is_absolute": [
                    3113
                ],
                "path.iterdir": [
                    3114
                ],
                "normalized_path": [
                    3128,
                    3137,
                    3116,
                    3127
                ],
                "as_posix": [
                    3116
                ],
                "relative_to": [
                    3116
                ],
                "child.resolve": [
                    3116
                ],
                "child.is_symlink": [
                    3118
                ],
                "report.path_ignored": [
                    3130,
                    3119
                ],
                "child.is_dir": [
                    3133,
                    3126
                ],
                "exclude_match": [
                    3128,
                    3129
                ],
                "exclude.search": [
                    3128
                ],
                "exclude_match.group": [
                    3129
                ],
                "child.is_file": [
                    3136
                ],
                "include_match": [
                    3137,
                    3138
                ],
                "include.search": [
                    3137
                ],
                "srcs": [
                    3152,
                    3155
                ],
                "resolve": [
                    3153,
                    3155
                ],
                "common_base": [
                    3155,
                    3156,
                    3158,
                    3159
                ],
                "common_base.is_dir": [
                    3156
                ],
                "directory": [
                    3169,
                    3159,
                    3160,
                    3161,
                    3163,
                    3164,
                    3166,
                    3167
                ],
                "common_base.parents": [
                    3159
                ],
                "is_dir": [
                    3160,
                    3163
                ],
                "is_file": [
                    3166
                ],
                "change_count": [
                    3179
                ],
                "same_count": [
                    3180
                ],
                "failure_count": [
                    3181
                ],
                "reformatted": [
                    3233,
                    3237,
                    3244,
                    3186,
                    3188
                ],
                "self.check": [
                    3232,
                    3186,
                    3222
                ],
                "self.verbose": [
                    3187,
                    3205,
                    3191
                ],
                "self.quiet": [
                    3187
                ],
                "self.change_count": [
                    3241,
                    3242,
                    3244,
                    3189,
                    3222
                ],
                "msg": [
                    3193,
                    3195,
                    3196
                ],
                "self.same_count": [
                    3248,
                    3197,
                    3246,
                    3247
                ],
                "message": [
                    3201,
                    3206
                ],
                "self.failure_count": [
                    3202,
                    3249,
                    3250,
                    3219,
                    3252
                ],
                "unchanged": [
                    3248,
                    3234,
                    3238
                ],
                "failed": [
                    3235,
                    3252,
                    3239
                ],
                "report.append": [
                    3248,
                    3243,
                    3251
                ],
                "click.style": [
                    3252,
                    3244
                ],
                "ast.AST": [
                    3280,
                    3277,
                    3263
                ],
                "ast": [
                    3299,
                    3277,
                    3280,
                    3289,
                    3263
                ],
                "node.__class__.__name__": [
                    3265,
                    3286
                ],
                "node.__class__": [
                    3265,
                    3286
                ],
                "field": [
                    3273,
                    3267,
                    3269
                ],
                "node._fields": [
                    3267
                ],
                "item": [
                    3276,
                    3277,
                    3278
                ],
                "_v": [
                    3281,
                    3308,
                    3309,
                    3278
                ],
                "value.__class__.__name__": [
                    3284
                ],
                "value.__class__": [
                    3284
                ],
                "src_ast": [
                    3289,
                    3308
                ],
                "ast.parse": [
                    3289,
                    3299
                ],
                "major": [
                    3291,
                    3294
                ],
                "minor": [
                    3291,
                    3294
                ],
                "sys.version_info": [
                    3291
                ],
                "dst_ast": [
                    3299,
                    3309
                ],
                "log": [
                    3301,
                    3334,
                    3305,
                    3311,
                    3316,
                    3326
                ],
                "dump_to_file": [
                    3301,
                    3326,
                    3311
                ],
                "traceback.format_tb": [
                    3301
                ],
                "traceback": [
                    3301
                ],
                "exc.__traceback__": [
                    3301
                ],
                "src_ast_str": [
                    3308,
                    3310,
                    3311
                ],
                "dst_ast_str": [
                    3309,
                    3310,
                    3311
                ],
                "newdst": [
                    3328,
                    3324,
                    3325
                ],
                "tempfile.NamedTemporaryFile": [
                    3342
                ],
                "tempfile": [
                    3342
                ],
                "output": [
                    3345
                ],
                "f.name": [
                    3349
                ],
                "a_lines": [
                    3356,
                    3359
                ],
                "a.split": [
                    3356
                ],
                "a": [
                    3356
                ],
                "b_lines": [
                    3357,
                    3359
                ],
                "b.split": [
                    3357
                ],
                "b": [
                    3357
                ],
                "difflib.unified_diff": [
                    3359
                ],
                "difflib": [
                    3359
                ],
                "a_name": [
                    3359
                ],
                "b_name": [
                    3359
                ],
                "task.cancel": [
                    3379,
                    3367
                ],
                "to_cancel": [
                    3378,
                    3381,
                    3374,
                    3375
                ],
                "asyncio.Task.all_tasks": [
                    3374
                ],
                "task.done": [
                    3374
                ],
                "cf_logger": [
                    3387,
                    3388
                ],
                "logging.getLogger": [
                    3387
                ],
                "logging": [
                    3387,
                    3388
                ],
                "cf_logger.setLevel": [
                    3388
                ],
                "logging.CRITICAL": [
                    3388
                ],
                "loop.close": [
                    3389
                ],
                "regex.sub": [
                    3398
                ],
                "regex": [
                    3408,
                    3406,
                    3398,
                    3407
                ],
                "replacement": [
                    3398
                ],
                "Sequence": [
                    3427,
                    3411
                ],
                "sequence": [
                    3413,
                    3414
                ],
                "element": [
                    3414,
                    3415
                ],
                "op": [
                    3426,
                    3430
                ],
                "cast": [
                    3426
                ],
                "enumerate_reversed": [
                    3428
                ],
                "call_count": [
                    3476,
                    3468,
                    3486
                ],
                "dot_count": [
                    3486,
                    3469,
                    3478
                ],
                "next.type": [
                    3480,
                    3473
                ],
                "second": [
                    3522,
                    3516
                ],
                "penultimate": [
                    3557,
                    3517
                ],
                "second.type": [
                    3522
                ],
                "remainder": [
                    3528,
                    3535,
                    3523,
                    3527
                ],
                "_index": [
                    3568,
                    3539,
                    3525
                ],
                "last.parent": [
                    3553,
                    3554
                ],
                "last.parent.type": [
                    3554
                ],
                "penultimate.type": [
                    3557
                ],
                "seen_other_brackets": [
                    3576,
                    3571,
                    3567
                ],
                "last.opening_bracket": [
                    3570
                ],
                "mode.value": [
                    3582
                ],
                "cache_file": [
                    3590,
                    3591,
                    3594,
                    3629,
                    3634
                ],
                "get_cache_file": [
                    3629,
                    3590
                ],
                "cache_file.exists": [
                    3591
                ],
                "cache_file.open": [
                    3594,
                    3634
                ],
                "fobj": [
                    3634,
                    3594,
                    3635,
                    3596
                ],
                "pickle.load": [
                    3596
                ],
                "pickle": [
                    3635,
                    3596,
                    3597
                ],
                "pickle.UnpicklingError": [
                    3597
                ],
                "stat": [
                    3605,
                    3606
                ],
                "path.stat": [
                    3605
                ],
                "stat.st_mtime": [
                    3606
                ],
                "stat.st_size": [
                    3606
                ],
                "todo": [
                    3619,
                    3622,
                    3615
                ],
                "cache.get": [
                    3618
                ],
                "todo.add": [
                    3619
                ],
                "done.add": [
                    3621
                ],
                "CACHE_DIR.exists": [
                    3631
                ],
                "CACHE_DIR.mkdir": [
                    3632
                ],
                "new_cache": [
                    3633,
                    3635
                ],
                "pickle.dump": [
                    3635
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    3635
                ],
                "module": [
                    3657,
                    3658,
                    3659
                ],
                "core": [
                    3657
                ],
                "_unicodefun": [
                    3657
                ],
                "module._verify_python3_env": [
                    3659
                ],
                "freeze_support": [
                    3663
                ],
                "patch_click": [
                    3664
                ],
                "main": [
                    3665
                ],
                "patched_main": [
                    3669
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/black_11/tests/test_black.py",
                "test_function": "test_comments6",
                "test_function_code": "    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_comments6(self) -> None:\n        source, expected = read_data(\"comments6\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
                "test_error": "AssertionError: 'from[32 chars]ef f(\\n    a,  # type: int\\n):\\n    pass\\n\\n\\n[1362 chars]nt\\n' != 'from[32 chars]ef f(a,):  # type: int\\n    pass\\n\\n\\n# test t[1330 chars]nt\\n'\n  from typing import Any, Tuple\n  \n  \n+ def f(a,):  # type: int\n- def f(\n-     a,  # type: int\n- ):\n      pass\n  \n  \n  # test type comments\n  def f(a, b, c, d, e, f, g, h, i):\n      # type: (int, int, int, int, int, int, int, int, int) -> None\n      pass\n  \n  \n  def f(\n      a,  # type: int\n      b,  # type: int\n      c,  # type: int\n      d,  # type: int\n      e,  # type: int\n      f,  # type: int\n      g,  # type: int\n      h,  # type: int\n      i,  # type: int\n  ):\n      # type: (...) -> None\n      pass\n  \n  \n  def f(\n      arg,  # type: int\n      *args,  # type: *Any\n      default=False,  # type: bool\n      **kwargs,  # type: **Any\n  ):\n      # type: (...) -> None\n      pass\n  \n  \n+ def f(a, b, c, d):  # type: int  # type: int  # type: int  # type: int\n- def f(\n-     a,  # type: int\n-     b,  # type: int\n-     c,  # type: int\n-     d,  # type: int\n- ):\n      # type: (...) -> None\n  \n      element = 0  # type: int\n      another_element = 1  # type: float\n      another_element_with_long_name = 2  # type: int\n      another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = (\n          3\n      )  # type: int\n  \n      tup = (\n          another_element,  # type: int\n          another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style,  # type: int\n      )  # type: Tuple[int, int]\n  \n      a = (\n          element\n          + another_element\n          + another_element_with_long_name\n          + element\n          + another_element\n          + another_element_with_long_name\n      )  # type: int",
                "full_test_error": "self = <test_black.BlackTestCase testMethod=test_comments6>\n\n    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_comments6(self) -> None:\n        source, expected = read_data(\"comments6\")\n        actual = fs(source)\n>       self.assertFormatEqual(expected, actual)\n\ntests/test_black.py:369: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:156: in assertFormatEqual\n    self.assertEqual(expected, actual)\nE   AssertionError: 'from[32 chars]ef f(\\n    a,  # type: int\\n):\\n    pass\\n\\n\\n[1362 chars]nt\\n' != 'from[32 chars]ef f(a,):  # type: int\\n    pass\\n\\n\\n# test t[1330 chars]nt\\n'\nE     from typing import Any, Tuple\nE     \nE     \nE   + def f(a,):  # type: int\nE   - def f(\nE   -     a,  # type: int\nE   - ):\nE         pass\nE     \nE     \nE     # test type comments\nE     def f(a, b, c, d, e, f, g, h, i):\nE         # type: (int, int, int, int, int, int, int, int, int) -> None\nE         pass\nE     \nE     \nE     def f(\nE         a,  # type: int\nE         b,  # type: int\nE         c,  # type: int\nE         d,  # type: int\nE         e,  # type: int\nE         f,  # type: int\nE         g,  # type: int\nE         h,  # type: int\nE         i,  # type: int\nE     ):\nE         # type: (...) -> None\nE         pass\nE     \nE     \nE     def f(\nE         arg,  # type: int\nE         *args,  # type: *Any\nE         default=False,  # type: bool\nE         **kwargs,  # type: **Any\nE     ):\nE         # type: (...) -> None\nE         pass\nE     \nE     \nE   + def f(a, b, c, d):  # type: int  # type: int  # type: int  # type: int\nE   - def f(\nE   -     a,  # type: int\nE   -     b,  # type: int\nE   -     c,  # type: int\nE   -     d,  # type: int\nE   - ):\nE         # type: (...) -> None\nE     \nE         element = 0  # type: int\nE         another_element = 1  # type: float\nE         another_element_with_long_name = 2  # type: int\nE         another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = (\nE             3\nE         )  # type: int\nE     \nE         tup = (\nE             another_element,  # type: int\nE             another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style,  # type: int\nE         )  # type: Tuple[int, int]\nE     \nE         a = (\nE             element\nE             + another_element\nE             + another_element_with_long_name\nE             + element\nE             + another_element\nE             + another_element_with_long_name\nE         )  # type: int",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "patch('black.dump_to_file', dump_to_stderr)"
                ]
            }
        ]
    }
}