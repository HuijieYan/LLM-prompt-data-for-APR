{
    "1.1.1": "def check_required_arguments(argument_spec, module_parameters):\n    \n\n    missing = []\n    if argument_spec is None:\n        return missing\n\n    for (k, v) in argument_spec.items():\n        required = v.get('required', False)\n        if required and k not in module_parameters:\n            missing.append(k)\n\n    if missing:\n        msg = \"missing required arguments: %s\" % \", \".join(missing)\n        raise TypeError(to_native(msg))\n\n    return missing\n",
    "1.1.2": "Check all paramaters in argument_spec and return a list of parameters\nthat are required but not present in module_parameters\n\nRaises TypeError if the check fails\n\n:arg argument_spec: Argument spec dicitionary containing all parameters\n    and their specification\n:arg module_paramaters: Dictionary of module parameters\n\n:returns: Empty list or raises TypeError if the check fails.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/ansible_5/lib/ansible/module_utils/common/validation.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_check_required_arguments_missing_multiple(arguments_terms_multiple):\n    params = {\n        'apples': 'woohoo',\n    }\n    expected = \"missing required arguments: bar, foo\"\n\n    with pytest.raises(TypeError) as e:\n        check_required_arguments(arguments_terms_multiple, params)\n\n    assert to_native(e.value) == expected"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/ansible_5/test/units/module_utils/common/validation/test_check_required_arguments.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert 'missing required arguments: foo, bar' == 'missing required arguments: bar, foo'\nE         - missing required arguments: bar, foo\nE         ?                                -----\nE         + missing required arguments: foo, bar\nE         ?                             +++++"
        ]
    ],
    "2.1.2": [
        [
            "arguments_terms_multiple = {'bar': {'required': True}, 'foo': {'required': True}, 'tomato': {'irrelevant': 72}}\n\n    def test_check_required_arguments_missing_multiple(arguments_terms_multiple):\n        params = {\n            'apples': 'woohoo',\n        }\n        expected = \"missing required arguments: bar, foo\"\n    \n        with pytest.raises(TypeError) as e:\n            check_required_arguments(arguments_terms_multiple, params)\n    \n>       assert to_native(e.value) == expected",
            "\ntest/units/module_utils/common/validation/test_check_required_arguments.py:73: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "Write unit tests for validation methods\n"
    ],
    "3.1.2": [
        "SUMMARY\nThe argument spec validation methods were moved out of basic.py in Ansible 2.8 to make them available for user outside of AnsibleModule. I got several of the unit tests written but not all of them. I'm mainly documenting this here so we can work on them during PyCon 2019 sprints.\n\n check_mutually_exclusive()\n check_required_one_of()\n check_required_together()\n check_required_by()\n check_required_arguments()\n check_required_if()\n fail_on_missing_params()\nISSUE TYPE\nFeature Idea\nCOMPONENT NAME\nlib/ansible/module_utils/common/validation.py\n\nADDITIONAL INFORMATION\nThere may be a bug in check _type_int() that needs fixing and updating the test. If an bool it returns a bool. This is because Python considers True and False integer_types. It seems wrong to me that check_type_int(False) returns False. This has been the behaviour of this method for quite some time, so changing this could have negative effects.\n"
    ]
}