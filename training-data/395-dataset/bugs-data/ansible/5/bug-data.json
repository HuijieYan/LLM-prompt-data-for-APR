{
    "ansible:5": {
        "/Volumes/SSD2T/bgp_envs/repos/ansible_5/lib/ansible/module_utils/common/validation.py": {
            "buggy_functions": [
                {
                    "function_name": "check_required_arguments",
                    "function_code": "def check_required_arguments(argument_spec, module_parameters):\n    \"\"\"Check all paramaters in argument_spec and return a list of parameters\n    that are required but not present in module_parameters\n\n    Raises TypeError if the check fails\n\n    :arg argument_spec: Argument spec dicitionary containing all parameters\n        and their specification\n    :arg module_paramaters: Dictionary of module parameters\n\n    :returns: Empty list or raises TypeError if the check fails.\n    \"\"\"\n\n    missing = []\n    if argument_spec is None:\n        return missing\n\n    for (k, v) in argument_spec.items():\n        required = v.get('required', False)\n        if required and k not in module_parameters:\n            missing.append(k)\n\n    if missing:\n        msg = \"missing required arguments: %s\" % \", \".join(missing)\n        raise TypeError(to_native(msg))\n\n    return missing\n",
                    "decorators": [],
                    "docstring": "Check all paramaters in argument_spec and return a list of parameters\nthat are required but not present in module_parameters\n\nRaises TypeError if the check fails\n\n:arg argument_spec: Argument spec dicitionary containing all parameters\n    and their specification\n:arg module_paramaters: Dictionary of module parameters\n\n:returns: Empty list or raises TypeError if the check fails.",
                    "start_line": 169,
                    "end_line": 195,
                    "variables": {
                        "missing": [
                            192,
                            195,
                            182,
                            184,
                            189,
                            191
                        ],
                        "argument_spec": [
                            186,
                            183
                        ],
                        "k": [
                            186,
                            188,
                            189
                        ],
                        "v": [
                            186,
                            187
                        ],
                        "argument_spec.items": [
                            186
                        ],
                        "required": [
                            187,
                            188
                        ],
                        "v.get": [
                            187
                        ],
                        "module_parameters": [
                            188
                        ],
                        "missing.append": [
                            189
                        ],
                        "msg": [
                            192,
                            193
                        ],
                        "join": [
                            192
                        ],
                        "TypeError": [
                            193
                        ],
                        "to_native": [
                            193
                        ]
                    },
                    "filtered_variables": {
                        "missing": [
                            192,
                            195,
                            182,
                            184,
                            189,
                            191
                        ],
                        "argument_spec": [
                            186,
                            183
                        ],
                        "k": [
                            186,
                            188,
                            189
                        ],
                        "v": [
                            186,
                            187
                        ],
                        "argument_spec.items": [
                            186
                        ],
                        "required": [
                            187,
                            188
                        ],
                        "v.get": [
                            187
                        ],
                        "module_parameters": [
                            188
                        ],
                        "missing.append": [
                            189
                        ],
                        "msg": [
                            192,
                            193
                        ],
                        "join": [
                            192
                        ],
                        "to_native": [
                            193
                        ]
                    },
                    "diff_line_number": 192,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argument_spec": {
                                    "variable_value": "{'foo': {'required': True}, 'bar': {'required': True}, 'tomato': {'irrelevant': 72}}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argument_spec.items": {
                                    "variable_value": "<built-in method items of dict object at 0x1109e40a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "module_parameters": {
                                    "variable_value": "{'apples': 'woohoo'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "missing.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argument_spec": {
                                    "variable_value": "{'foo': {'required': True}, 'bar': {'required': True}, 'tomato': {'irrelevant': 72}}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "k": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argument_spec.items": {
                                    "variable_value": "<built-in method items of dict object at 0x106be80f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "module_parameters": {
                                    "variable_value": "{'apples': 'woohoo'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "missing.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def count_terms(terms, module_parameters):\n    \"\"\"Count the number of occurrences of a key in a given dictionary\n\n    :arg terms: String or iterable of values to check\n    :arg module_parameters: Dictionary of module parameters\n\n    :returns: An integer that is the number of occurrences of the terms values\n        in the provided dictionary.\n    \"\"\"\n\n    if not is_iterable(terms):\n        terms = [terms]\n\n    return len(set(terms).intersection(module_parameters))",
                "def check_mutually_exclusive(terms, module_parameters):\n    \"\"\"Check mutually exclusive terms against argument parameters\n\n    Accepts a single list or list of lists that are groups of terms that should be\n    mutually exclusive with one another\n\n    :arg terms: List of mutually exclusive module parameters\n    :arg module_parameters: Dictionary of module parameters\n\n    :returns: Empty list or raises TypeError if the check fails.\n    \"\"\"\n\n    results = []\n    if terms is None:\n        return results\n\n    for check in terms:\n        count = count_terms(check, module_parameters)\n        if count > 1:\n            results.append(check)\n\n    if results:\n        full_list = ['|'.join(check) for check in results]\n        msg = \"parameters are mutually exclusive: %s\" % ', '.join(full_list)\n        raise TypeError(to_native(msg))\n\n    return results",
                "def check_required_one_of(terms, module_parameters):\n    \"\"\"Check each list of terms to ensure at least one exists in the given module\n    parameters\n\n    Accepts a list of lists or tuples\n\n    :arg terms: List of lists of terms to check. For each list of terms, at\n        least one is required.\n    :arg module_parameters: Dictionary of module parameters\n\n    :returns: Empty list or raises TypeError if the check fails.\n    \"\"\"\n\n    results = []\n    if terms is None:\n        return results\n\n    for term in terms:\n        count = count_terms(term, module_parameters)\n        if count == 0:\n            results.append(term)\n\n    if results:\n        for term in results:\n            msg = \"one of the following is required: %s\" % ', '.join(term)\n            raise TypeError(to_native(msg))\n\n    return results",
                "def check_required_together(terms, module_parameters):\n    \"\"\"Check each list of terms to ensure every parameter in each list exists\n    in the given module parameters\n\n    Accepts a list of lists or tuples\n\n    :arg terms: List of lists of terms to check. Each list should include\n        parameters that are all required when at least one is specified\n        in the module_parameters.\n    :arg module_parameters: Dictionary of module parameters\n\n    :returns: Empty list or raises TypeError if the check fails.\n    \"\"\"\n\n    results = []\n    if terms is None:\n        return results\n\n    for term in terms:\n        counts = [count_terms(field, module_parameters) for field in term]\n        non_zero = [c for c in counts if c > 0]\n        if len(non_zero) > 0:\n            if 0 in counts:\n                results.append(term)\n    if results:\n        for term in results:\n            msg = \"parameters are required together: %s\" % ', '.join(term)\n            raise TypeError(to_native(msg))\n\n    return results",
                "def check_required_by(requirements, module_parameters):\n    \"\"\"For each key in requirements, check the corresponding list to see if they\n    exist in module_parameters\n\n    Accepts a single string or list of values for each key\n\n    :arg requirements: Dictionary of requirements\n    :arg module_parameters: Dictionary of module parameters\n\n    :returns: Empty dictionary or raises TypeError if the\n    \"\"\"\n\n    result = {}\n    if requirements is None:\n        return result\n\n    for (key, value) in requirements.items():\n        if key not in module_parameters or module_parameters[key] is None:\n            continue\n        result[key] = []\n        # Support strings (single-item lists)\n        if isinstance(value, string_types):\n            value = [value]\n        for required in value:\n            if required not in module_parameters or module_parameters[required] is None:\n                result[key].append(required)\n\n    if result:\n        for key, missing in result.items():\n            if len(missing) > 0:\n                msg = \"missing parameter(s) required by '%s': %s\" % (key, ', '.join(missing))\n                raise TypeError(to_native(msg))\n\n    return result",
                "def check_required_arguments(argument_spec, module_parameters):\n    \"\"\"Check all paramaters in argument_spec and return a list of parameters\n    that are required but not present in module_parameters\n\n    Raises TypeError if the check fails\n\n    :arg argument_spec: Argument spec dicitionary containing all parameters\n        and their specification\n    :arg module_paramaters: Dictionary of module parameters\n\n    :returns: Empty list or raises TypeError if the check fails.\n    \"\"\"\n\n    missing = []\n    if argument_spec is None:\n        return missing\n\n    for (k, v) in argument_spec.items():\n        required = v.get('required', False)\n        if required and k not in module_parameters:\n            missing.append(k)\n\n    if missing:\n        msg = \"missing required arguments: %s\" % \", \".join(missing)\n        raise TypeError(to_native(msg))\n\n    return missing",
                "def check_required_if(requirements, module_parameters):\n    \"\"\"Check parameters that are conditionally required\n\n    Raises TypeError if the check fails\n\n    :arg requirements: List of lists specifying a parameter, value, parameters\n        required when the given parameter is the specified value, and optionally\n        a boolean indicating any or all parameters are required.\n\n        Example:\n            required_if=[\n                ['state', 'present', ('path',), True],\n                ['someint', 99, ('bool_param', 'string_param')],\n            ]\n\n    :arg module_paramaters: Dictionary of module parameters\n\n    :returns: Empty list or raises TypeError if the check fails.\n        The results attribute of the exception contains a list of dictionaries.\n        Each dictionary is the result of evaluting each item in requirements.\n        Each return dictionary contains the following keys:\n\n            :key missing: List of parameters that are required but missing\n            :key requires: 'any' or 'all'\n            :key paramater: Parameter name that has the requirement\n            :key value: Original value of the paramater\n            :key requirements: Original required parameters\n\n        Example:\n            [\n                {\n                    'parameter': 'someint',\n                    'value': 99\n                    'requirements': ('bool_param', 'string_param'),\n                    'missing': ['string_param'],\n                    'requires': 'all',\n                }\n            ]\n\n    \"\"\"\n    results = []\n    if requirements is None:\n        return results\n\n    for req in requirements:\n        missing = {}\n        missing['missing'] = []\n        max_missing_count = 0\n        is_one_of = False\n        if len(req) == 4:\n            key, val, requirements, is_one_of = req\n        else:\n            key, val, requirements = req\n\n        # is_one_of is True at least one requirement should be\n        # present, else all requirements should be present.\n        if is_one_of:\n            max_missing_count = len(requirements)\n            missing['requires'] = 'any'\n        else:\n            missing['requires'] = 'all'\n\n        if key in module_parameters and module_parameters[key] == val:\n            for check in requirements:\n                count = count_terms(check, module_parameters)\n                if count == 0:\n                    missing['missing'].append(check)\n        if len(missing['missing']) and len(missing['missing']) >= max_missing_count:\n            missing['parameter'] = key\n            missing['value'] = val\n            missing['requirements'] = requirements\n            results.append(missing)\n\n    if results:\n        for missing in results:\n            msg = \"%s is %s but %s of the following are missing: %s\" % (\n                missing['parameter'], missing['value'], missing['requires'], ', '.join(missing['missing']))\n            raise TypeError(to_native(msg))\n\n    return results",
                "def check_missing_parameters(module_parameters, required_parameters=None):\n    \"\"\"This is for checking for required params when we can not check via\n    argspec because we need more information than is simply given in the argspec.\n\n    Raises TypeError if any required parameters are missing\n\n    :arg module_paramaters: Dictionary of module parameters\n    :arg required_parameters: List of parameters to look for in the given module\n        parameters\n\n    :returns: Empty list or raises TypeError if the check fails.\n    \"\"\"\n    missing_params = []\n    if required_parameters is None:\n        return missing_params\n\n    for param in required_parameters:\n        if not module_parameters.get(param):\n            missing_params.append(param)\n\n    if missing_params:\n        msg = \"missing required arguments: %s\" % ', '.join(missing_params)\n        raise TypeError(to_native(msg))\n\n    return missing_params",
                "def safe_eval(value, locals=None, include_exceptions=False):\n    # do not allow method calls to modules\n    if not isinstance(value, string_types):\n        # already templated to a datavaluestructure, perhaps?\n        if include_exceptions:\n            return (value, None)\n        return value\n    if re.search(r'\\w\\.\\w+\\(', value):\n        if include_exceptions:\n            return (value, None)\n        return value\n    # do not allow imports\n    if re.search(r'import \\w+', value):\n        if include_exceptions:\n            return (value, None)\n        return value\n    try:\n        result = literal_eval(value)\n        if include_exceptions:\n            return (result, None)\n        else:\n            return result\n    except Exception as e:\n        if include_exceptions:\n            return (value, e)\n        return value",
                "def check_type_str(value, allow_conversion=True):\n    \"\"\"Verify that the value is a string or convert to a string.\n\n    Since unexpected changes can sometimes happen when converting to a string,\n    ``allow_conversion`` controls whether or not the value will be converted or a\n    TypeError will be raised if the value is not a string and would be converted\n\n    :arg value: Value to validate or convert to a string\n    :arg allow_conversion: Whether to convert the string and return it or raise\n        a TypeError\n\n    :returns: Original value if it is a string, the value converted to a string\n        if allow_conversion=True, or raises a TypeError if allow_conversion=False.\n    \"\"\"\n    if isinstance(value, string_types):\n        return value\n\n    if allow_conversion:\n        return to_native(value, errors='surrogate_or_strict')\n\n    msg = \"'{0!r}' is not a string and conversion is not allowed\".format(value)\n    raise TypeError(to_native(msg))",
                "def check_type_list(value):\n    \"\"\"Verify that the value is a list or convert to a list\n\n    A comma separated string will be split into a list. Rases a TypeError if\n    unable to convert to a list.\n\n    :arg value: Value to validate or convert to a list\n\n    :returns: Original value if it is already a list, single item list if a\n        float, int or string without commas, or a multi-item list if a\n        comma-delimited string.\n    \"\"\"\n    if isinstance(value, list):\n        return value\n\n    if isinstance(value, string_types):\n        return value.split(\",\")\n    elif isinstance(value, int) or isinstance(value, float):\n        return [str(value)]\n\n    raise TypeError('%s cannot be converted to a list' % type(value))",
                "def check_type_dict(value):\n    \"\"\"Verify that value is a dict or convert it to a dict and return it.\n\n    Raises TypeError if unable to convert to a dict\n\n    :arg value: Dict or string to convert to a dict. Accepts 'k1=v2, k2=v2'.\n\n    :returns: value converted to a dictionary\n    \"\"\"\n    if isinstance(value, dict):\n        return value\n\n    if isinstance(value, string_types):\n        if value.startswith(\"{\"):\n            try:\n                return json.loads(value)\n            except Exception:\n                (result, exc) = safe_eval(value, dict(), include_exceptions=True)\n                if exc is not None:\n                    raise TypeError('unable to evaluate string as dictionary')\n                return result\n        elif '=' in value:\n            fields = []\n            field_buffer = []\n            in_quote = False\n            in_escape = False\n            for c in value.strip():\n                if in_escape:\n                    field_buffer.append(c)\n                    in_escape = False\n                elif c == '\\\\':\n                    in_escape = True\n                elif not in_quote and c in ('\\'', '\"'):\n                    in_quote = c\n                elif in_quote and in_quote == c:\n                    in_quote = False\n                elif not in_quote and c in (',', ' '):\n                    field = ''.join(field_buffer)\n                    if field:\n                        fields.append(field)\n                    field_buffer = []\n                else:\n                    field_buffer.append(c)\n\n            field = ''.join(field_buffer)\n            if field:\n                fields.append(field)\n            return dict(x.split(\"=\", 1) for x in fields)\n        else:\n            raise TypeError(\"dictionary requested, could not parse JSON or key=value\")\n\n    raise TypeError('%s cannot be converted to a dict' % type(value))",
                "def check_type_bool(value):\n    \"\"\"Verify that the value is a bool or convert it to a bool and return it.\n\n    Raises TypeError if unable to convert to a bool\n\n    :arg value: String, int, or float to convert to bool. Valid booleans include:\n         '1', 'on', 1, '0', 0, 'n', 'f', 'false', 'true', 'y', 't', 'yes', 'no', 'off'\n\n    :returns: Boolean True or False\n    \"\"\"\n    if isinstance(value, bool):\n        return value\n\n    if isinstance(value, string_types) or isinstance(value, (int, float)):\n        return boolean(value)\n\n    raise TypeError('%s cannot be converted to a bool' % type(value))",
                "def check_type_int(value):\n    \"\"\"Verify that the value is an integer and return it or convert the value\n    to an integer and return it\n\n    Raises TypeError if unable to convert to an int\n\n    :arg value: String or int to convert of verify\n\n    :return: Int of given value\n    \"\"\"\n    if isinstance(value, integer_types):\n        return value\n\n    if isinstance(value, string_types):\n        try:\n            return int(value)\n        except ValueError:\n            pass\n\n    raise TypeError('%s cannot be converted to an int' % type(value))",
                "def check_type_float(value):\n    \"\"\"Verify that value is a float or convert it to a float and return it\n\n    Raises TypeError if unable to convert to a float\n\n    :arg value: Float, int, str, or bytes to verify or convert and return.\n\n    :returns: Float of given value.\n    \"\"\"\n    if isinstance(value, float):\n        return value\n\n    if isinstance(value, (binary_type, text_type, int)):\n        try:\n            return float(value)\n        except ValueError:\n            pass\n\n    raise TypeError('%s cannot be converted to a float' % type(value))",
                "def check_type_path(value,):\n    \"\"\"Verify the provided value is a string or convert it to a string,\n    then return the expanded path\n    \"\"\"\n    value = check_type_str(value)\n    return os.path.expanduser(os.path.expandvars(value))",
                "def check_type_raw(value):\n    \"\"\"Returns the raw value\n    \"\"\"\n    return value",
                "def check_type_bytes(value):\n    \"\"\"Convert a human-readable string value to bytes\n\n    Raises TypeError if unable to covert the value\n    \"\"\"\n    try:\n        return human_to_bytes(value)\n    except ValueError:\n        raise TypeError('%s cannot be converted to a Byte value' % type(value))",
                "def check_type_bits(value):\n    \"\"\"Convert a human-readable string bits value to bits in integer.\n\n    Example: check_type_bits('1Mb') returns integer 1048576.\n\n    Raises TypeError if unable to covert the value.\n    \"\"\"\n    try:\n        return human_to_bytes(value, isbits=True)\n    except ValueError:\n        raise TypeError('%s cannot be converted to a Bit value' % type(value))",
                "def check_type_jsonarg(value):\n    \"\"\"Return a jsonified string. Sometimes the controller turns a json string\n    into a dict/list so transform it back into json here\n\n    Raises TypeError if unable to covert the value\n\n    \"\"\"\n    if isinstance(value, (text_type, binary_type)):\n        return value.strip()\n    elif isinstance(value, (list, tuple, dict)):\n        return jsonify(value)\n    raise TypeError('%s cannot be converted to a json string' % type(value))"
            ],
            "inscope_function_signatures": [
                "count_terms(terms, module_parameters)",
                "check_mutually_exclusive(terms, module_parameters)",
                "check_required_one_of(terms, module_parameters)",
                "check_required_together(terms, module_parameters)",
                "check_required_by(requirements, module_parameters)",
                "check_required_arguments(argument_spec, module_parameters)",
                "check_required_if(requirements, module_parameters)",
                "check_missing_parameters(module_parameters, required_parameters=None)",
                "safe_eval(value, locals=None, include_exceptions=False)",
                "check_type_str(value, allow_conversion=True)",
                "check_type_list(value)",
                "check_type_dict(value)",
                "check_type_bool(value)",
                "check_type_int(value)",
                "check_type_float(value)",
                "check_type_path(value)",
                "check_type_raw(value)",
                "check_type_bytes(value)",
                "check_type_bits(value)",
                "check_type_jsonarg(value)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "type": [
                    547,
                    452,
                    6,
                    520,
                    495,
                    433,
                    533,
                    474,
                    379
                ],
                "is_iterable": [
                    36
                ],
                "terms": [
                    36,
                    37,
                    39,
                    116,
                    85,
                    119,
                    55,
                    88,
                    58
                ],
                "len": [
                    162,
                    39,
                    265,
                    247,
                    122,
                    255
                ],
                "intersection": [
                    39
                ],
                "set": [
                    39
                ],
                "module_parameters": [
                    260,
                    262,
                    39,
                    297,
                    150,
                    120,
                    89,
                    59,
                    188,
                    157
                ],
                "results": [
                    130,
                    269,
                    271,
                    272,
                    277,
                    54,
                    56,
                    61,
                    63,
                    64,
                    68,
                    84,
                    86,
                    91,
                    93,
                    94,
                    98,
                    238,
                    240,
                    115,
                    117,
                    124,
                    125,
                    126
                ],
                "check": [
                    64,
                    261,
                    262,
                    264,
                    58,
                    59,
                    61
                ],
                "count": [
                    262,
                    263,
                    89,
                    90,
                    59,
                    60
                ],
                "count_terms": [
                    120,
                    89,
                    59,
                    262
                ],
                "results.append": [
                    269,
                    91,
                    124,
                    61
                ],
                "full_list": [
                    64,
                    65
                ],
                "join": [
                    64,
                    65,
                    192,
                    163,
                    419,
                    426,
                    301,
                    274,
                    95,
                    127
                ],
                "msg": [
                    96,
                    65,
                    66,
                    128,
                    163,
                    164,
                    192,
                    193,
                    355,
                    356,
                    301,
                    302,
                    273,
                    275,
                    95,
                    127
                ],
                "TypeError": [
                    96,
                    193,
                    66,
                    128,
                    164,
                    356,
                    452,
                    547,
                    520,
                    302,
                    431,
                    495,
                    401,
                    433,
                    275,
                    533,
                    474,
                    379
                ],
                "to_native": [
                    96,
                    193,
                    66,
                    128,
                    164,
                    353,
                    356,
                    302,
                    275
                ],
                "term": [
                    127,
                    124,
                    119,
                    88,
                    89,
                    126,
                    91,
                    120,
                    94,
                    95
                ],
                "counts": [
                    120,
                    121,
                    123
                ],
                "field": [
                    419,
                    420,
                    421,
                    426,
                    427,
                    428,
                    120
                ],
                "non_zero": [
                    121,
                    122
                ],
                "c": [
                    416,
                    418,
                    424,
                    408,
                    121,
                    410,
                    412,
                    414,
                    415
                ],
                "result": [
                    160,
                    161,
                    324,
                    166,
                    326,
                    328,
                    399,
                    145,
                    402,
                    147,
                    152,
                    158
                ],
                "requirements": [
                    261,
                    268,
                    239,
                    146,
                    242,
                    149,
                    248,
                    250,
                    255
                ],
                "key": [
                    248,
                    161,
                    163,
                    260,
                    266,
                    149,
                    150,
                    152,
                    250,
                    158
                ],
                "value": [
                    518,
                    391,
                    392,
                    520,
                    394,
                    395,
                    397,
                    399,
                    403,
                    531,
                    149,
                    533,
                    408,
                    154,
                    155,
                    156,
                    543,
                    544,
                    545,
                    546,
                    547,
                    433,
                    309,
                    312,
                    313,
                    314,
                    316,
                    317,
                    446,
                    319,
                    447,
                    321,
                    322,
                    449,
                    324,
                    450,
                    452,
                    331,
                    332,
                    465,
                    466,
                    468,
                    470,
                    474,
                    349,
                    350,
                    353,
                    355,
                    503,
                    486,
                    487,
                    489,
                    491,
                    495,
                    371,
                    372,
                    374,
                    375,
                    376,
                    377,
                    502,
                    379,
                    509
                ],
                "requirements.items": [
                    149
                ],
                "isinstance": [
                    449,
                    545,
                    486,
                    391,
                    489,
                    394,
                    465,
                    371,
                    468,
                    309,
                    374,
                    376,
                    154,
                    349,
                    446,
                    543
                ],
                "string_types": [
                    449,
                    394,
                    468,
                    309,
                    374,
                    154,
                    349
                ],
                "required": [
                    156,
                    187,
                    188,
                    157,
                    158
                ],
                "append": [
                    264,
                    158
                ],
                "missing": [
                    256,
                    258,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    272,
                    274,
                    161,
                    162,
                    163,
                    182,
                    184,
                    189,
                    191,
                    192,
                    195,
                    243,
                    244
                ],
                "result.items": [
                    161
                ],
                "argument_spec": [
                    186,
                    183
                ],
                "k": [
                    186,
                    188,
                    189
                ],
                "v": [
                    186,
                    187
                ],
                "argument_spec.items": [
                    186
                ],
                "v.get": [
                    187
                ],
                "missing.append": [
                    189
                ],
                "req": [
                    248,
                    242,
                    250,
                    247
                ],
                "max_missing_count": [
                    265,
                    245,
                    255
                ],
                "is_one_of": [
                    248,
                    246,
                    254
                ],
                "val": [
                    248,
                    250,
                    267,
                    260
                ],
                "missing_params": [
                    292,
                    294,
                    298,
                    300,
                    301,
                    304
                ],
                "required_parameters": [
                    296,
                    293
                ],
                "param": [
                    296,
                    297,
                    298
                ],
                "module_parameters.get": [
                    297
                ],
                "missing_params.append": [
                    298
                ],
                "include_exceptions": [
                    320,
                    325,
                    330,
                    311,
                    315
                ],
                "re.search": [
                    314,
                    319
                ],
                "re": [
                    314,
                    319
                ],
                "literal_eval": [
                    324
                ],
                "Exception": [
                    329,
                    398
                ],
                "e": [
                    331
                ],
                "allow_conversion": [
                    352
                ],
                "format": [
                    355
                ],
                "list": [
                    545,
                    371
                ],
                "value.split": [
                    375
                ],
                "int": [
                    376,
                    449,
                    489,
                    470
                ],
                "float": [
                    376,
                    449,
                    491,
                    486
                ],
                "str": [
                    377
                ],
                "dict": [
                    399,
                    545,
                    429,
                    391
                ],
                "value.startswith": [
                    395
                ],
                "json.loads": [
                    397
                ],
                "json": [
                    397
                ],
                "exc": [
                    400,
                    399
                ],
                "safe_eval": [
                    399
                ],
                "fields": [
                    428,
                    404,
                    421,
                    429
                ],
                "field_buffer": [
                    419,
                    422,
                    424,
                    426,
                    405,
                    410
                ],
                "in_quote": [
                    416,
                    417,
                    418,
                    406,
                    414,
                    415
                ],
                "in_escape": [
                    409,
                    411,
                    413,
                    407
                ],
                "value.strip": [
                    408,
                    544
                ],
                "field_buffer.append": [
                    424,
                    410
                ],
                "fields.append": [
                    428,
                    421
                ],
                "x.split": [
                    429
                ],
                "x": [
                    429
                ],
                "bool": [
                    446
                ],
                "boolean": [
                    450
                ],
                "integer_types": [
                    465
                ],
                "ValueError": [
                    532,
                    492,
                    519,
                    471
                ],
                "binary_type": [
                    489,
                    543
                ],
                "text_type": [
                    489,
                    543
                ],
                "check_type_str": [
                    502
                ],
                "os.path.expanduser": [
                    503
                ],
                "os.path": [
                    503
                ],
                "os": [
                    503
                ],
                "os.path.expandvars": [
                    503
                ],
                "human_to_bytes": [
                    531,
                    518
                ],
                "tuple": [
                    545
                ],
                "jsonify": [
                    546
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "is_iterable": [
                    36
                ],
                "terms": [
                    36,
                    37,
                    39,
                    116,
                    85,
                    119,
                    55,
                    88,
                    58
                ],
                "intersection": [
                    39
                ],
                "module_parameters": [
                    260,
                    262,
                    39,
                    297,
                    150,
                    120,
                    89,
                    59,
                    188,
                    157
                ],
                "results": [
                    130,
                    269,
                    271,
                    272,
                    277,
                    54,
                    56,
                    61,
                    63,
                    64,
                    68,
                    84,
                    86,
                    91,
                    93,
                    94,
                    98,
                    238,
                    240,
                    115,
                    117,
                    124,
                    125,
                    126
                ],
                "check": [
                    64,
                    261,
                    262,
                    264,
                    58,
                    59,
                    61
                ],
                "count": [
                    262,
                    263,
                    89,
                    90,
                    59,
                    60
                ],
                "count_terms": [
                    120,
                    89,
                    59,
                    262
                ],
                "results.append": [
                    269,
                    91,
                    124,
                    61
                ],
                "full_list": [
                    64,
                    65
                ],
                "join": [
                    64,
                    65,
                    192,
                    163,
                    419,
                    426,
                    301,
                    274,
                    95,
                    127
                ],
                "msg": [
                    96,
                    65,
                    66,
                    128,
                    163,
                    164,
                    192,
                    193,
                    355,
                    356,
                    301,
                    302,
                    273,
                    275,
                    95,
                    127
                ],
                "to_native": [
                    96,
                    193,
                    66,
                    128,
                    164,
                    353,
                    356,
                    302,
                    275
                ],
                "term": [
                    127,
                    124,
                    119,
                    88,
                    89,
                    126,
                    91,
                    120,
                    94,
                    95
                ],
                "counts": [
                    120,
                    121,
                    123
                ],
                "field": [
                    419,
                    420,
                    421,
                    426,
                    427,
                    428,
                    120
                ],
                "non_zero": [
                    121,
                    122
                ],
                "c": [
                    416,
                    418,
                    424,
                    408,
                    121,
                    410,
                    412,
                    414,
                    415
                ],
                "result": [
                    160,
                    161,
                    324,
                    166,
                    326,
                    328,
                    399,
                    145,
                    402,
                    147,
                    152,
                    158
                ],
                "requirements": [
                    261,
                    268,
                    239,
                    146,
                    242,
                    149,
                    248,
                    250,
                    255
                ],
                "key": [
                    248,
                    161,
                    163,
                    260,
                    266,
                    149,
                    150,
                    152,
                    250,
                    158
                ],
                "value": [
                    518,
                    391,
                    392,
                    520,
                    394,
                    395,
                    397,
                    399,
                    403,
                    531,
                    149,
                    533,
                    408,
                    154,
                    155,
                    156,
                    543,
                    544,
                    545,
                    546,
                    547,
                    433,
                    309,
                    312,
                    313,
                    314,
                    316,
                    317,
                    446,
                    319,
                    447,
                    321,
                    322,
                    449,
                    324,
                    450,
                    452,
                    331,
                    332,
                    465,
                    466,
                    468,
                    470,
                    474,
                    349,
                    350,
                    353,
                    355,
                    503,
                    486,
                    487,
                    489,
                    491,
                    495,
                    371,
                    372,
                    374,
                    375,
                    376,
                    377,
                    502,
                    379,
                    509
                ],
                "requirements.items": [
                    149
                ],
                "string_types": [
                    449,
                    394,
                    468,
                    309,
                    374,
                    154,
                    349
                ],
                "required": [
                    156,
                    187,
                    188,
                    157,
                    158
                ],
                "append": [
                    264,
                    158
                ],
                "missing": [
                    256,
                    258,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    272,
                    274,
                    161,
                    162,
                    163,
                    182,
                    184,
                    189,
                    191,
                    192,
                    195,
                    243,
                    244
                ],
                "result.items": [
                    161
                ],
                "argument_spec": [
                    186,
                    183
                ],
                "k": [
                    186,
                    188,
                    189
                ],
                "v": [
                    186,
                    187
                ],
                "argument_spec.items": [
                    186
                ],
                "v.get": [
                    187
                ],
                "missing.append": [
                    189
                ],
                "req": [
                    248,
                    242,
                    250,
                    247
                ],
                "max_missing_count": [
                    265,
                    245,
                    255
                ],
                "is_one_of": [
                    248,
                    246,
                    254
                ],
                "val": [
                    248,
                    250,
                    267,
                    260
                ],
                "missing_params": [
                    292,
                    294,
                    298,
                    300,
                    301,
                    304
                ],
                "required_parameters": [
                    296,
                    293
                ],
                "param": [
                    296,
                    297,
                    298
                ],
                "module_parameters.get": [
                    297
                ],
                "missing_params.append": [
                    298
                ],
                "include_exceptions": [
                    320,
                    325,
                    330,
                    311,
                    315
                ],
                "re.search": [
                    314,
                    319
                ],
                "re": [
                    314,
                    319
                ],
                "literal_eval": [
                    324
                ],
                "e": [
                    331
                ],
                "allow_conversion": [
                    352
                ],
                "value.split": [
                    375
                ],
                "value.startswith": [
                    395
                ],
                "json.loads": [
                    397
                ],
                "json": [
                    397
                ],
                "exc": [
                    400,
                    399
                ],
                "safe_eval": [
                    399
                ],
                "fields": [
                    428,
                    404,
                    421,
                    429
                ],
                "field_buffer": [
                    419,
                    422,
                    424,
                    426,
                    405,
                    410
                ],
                "in_quote": [
                    416,
                    417,
                    418,
                    406,
                    414,
                    415
                ],
                "in_escape": [
                    409,
                    411,
                    413,
                    407
                ],
                "value.strip": [
                    408,
                    544
                ],
                "field_buffer.append": [
                    424,
                    410
                ],
                "fields.append": [
                    428,
                    421
                ],
                "x.split": [
                    429
                ],
                "x": [
                    429
                ],
                "boolean": [
                    450
                ],
                "integer_types": [
                    465
                ],
                "binary_type": [
                    489,
                    543
                ],
                "text_type": [
                    489,
                    543
                ],
                "check_type_str": [
                    502
                ],
                "os.path.expanduser": [
                    503
                ],
                "os.path": [
                    503
                ],
                "os": [
                    503
                ],
                "os.path.expandvars": [
                    503
                ],
                "human_to_bytes": [
                    531,
                    518
                ],
                "jsonify": [
                    546
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/ansible_5/test/units/module_utils/common/validation/test_check_required_arguments.py",
                "test_function": "test_check_required_arguments_missing_multiple",
                "test_function_code": "def test_check_required_arguments_missing_multiple(arguments_terms_multiple):\n    params = {\n        'apples': 'woohoo',\n    }\n    expected = \"missing required arguments: bar, foo\"\n\n    with pytest.raises(TypeError) as e:\n        check_required_arguments(arguments_terms_multiple, params)\n\n    assert to_native(e.value) == expected",
                "test_error": "AssertionError: assert 'missing required arguments: foo, bar' == 'missing required arguments: bar, foo'\n  - missing required arguments: bar, foo\n  ?                                -----\n  + missing required arguments: foo, bar\n  ?                             +++++",
                "full_test_error": "arguments_terms_multiple = {'bar': {'required': True}, 'foo': {'required': True}, 'tomato': {'irrelevant': 72}}\n\n    def test_check_required_arguments_missing_multiple(arguments_terms_multiple):\n        params = {\n            'apples': 'woohoo',\n        }\n        expected = \"missing required arguments: bar, foo\"\n    \n        with pytest.raises(TypeError) as e:\n            check_required_arguments(arguments_terms_multiple, params)\n    \n>       assert to_native(e.value) == expected\nE       AssertionError: assert 'missing required arguments: foo, bar' == 'missing required arguments: bar, foo'\nE         - missing required arguments: bar, foo\nE         ?                                -----\nE         + missing required arguments: foo, bar\nE         ?                             +++++\n\ntest/units/module_utils/common/validation/test_check_required_arguments.py:73: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}