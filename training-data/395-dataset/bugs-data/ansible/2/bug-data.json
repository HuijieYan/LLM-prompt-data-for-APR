{
    "ansible:2": {
        "/Volumes/SSD2T/bgp_envs/repos/ansible_2/lib/ansible/utils/version.py": {
            "buggy_functions": [
                {
                    "function_name": "__gt__",
                    "function_code": "def __gt__(self, other):\n    return not self.__lt__(other)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 75,
                    "end_line": 76,
                    "variables": {
                        "self.__lt__": [
                            76
                        ],
                        "self": [
                            76
                        ],
                        "other": [
                            76
                        ]
                    },
                    "filtered_variables": {
                        "self.__lt__": [
                            76
                        ],
                        "self": [
                            76
                        ],
                        "other": [
                            76
                        ]
                    },
                    "diff_line_number": 75,
                    "class_data": {
                        "signature": "class _Alpha()",
                        "docstring": "Class to easily allow comparing strings\n\nLargely this exists to make comparing an integer and a string on py3\nso that it works like py2.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, specifier):\n    self.specifier = specifier",
                            "def __repr__(self):\n    return repr(self.specifier)",
                            "def __eq__(self, other):\n    if isinstance(other, _Alpha):\n        return self.specifier == other.specifier\n    elif isinstance(other, str):\n        return self.specifier == other\n    return False",
                            "def __ne__(self, other):\n    return not self.__eq__(other)",
                            "def __lt__(self, other):\n    if isinstance(other, _Alpha):\n        return self.specifier < other.specifier\n    elif isinstance(other, str):\n        return self.specifier < other\n    elif isinstance(other, _Numeric):\n        return False\n    raise ValueError",
                            "def __gt__(self, other):\n    return not self.__lt__(other)",
                            "def __le__(self, other):\n    return self.__lt__(other) or self.__eq__(other)",
                            "def __ge__(self, other):\n    return self.__gt__(other) or self.__eq__(other)"
                        ],
                        "constructor_variables": [
                            "specifier"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, specifier)",
                            "__repr__(self)",
                            "__eq__(self, other)",
                            "__ne__(self, other)",
                            "__lt__(self, other)",
                            "__gt__(self, other)",
                            "__le__(self, other)",
                            "__ge__(self, other)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'a'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'a'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'a'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 1>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "__ge__",
                    "function_code": "def __ge__(self, other):\n    return self.__gt__(other) or self.__eq__(other)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 81,
                    "end_line": 82,
                    "variables": {
                        "self.__gt__": [
                            82
                        ],
                        "self": [
                            82
                        ],
                        "other": [
                            82
                        ],
                        "self.__eq__": [
                            82
                        ]
                    },
                    "filtered_variables": {
                        "self.__gt__": [
                            82
                        ],
                        "self": [
                            82
                        ],
                        "other": [
                            82
                        ],
                        "self.__eq__": [
                            82
                        ]
                    },
                    "diff_line_number": 81,
                    "class_data": {
                        "signature": "class _Alpha()",
                        "docstring": "Class to easily allow comparing strings\n\nLargely this exists to make comparing an integer and a string on py3\nso that it works like py2.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, specifier):\n    self.specifier = specifier",
                            "def __repr__(self):\n    return repr(self.specifier)",
                            "def __eq__(self, other):\n    if isinstance(other, _Alpha):\n        return self.specifier == other.specifier\n    elif isinstance(other, str):\n        return self.specifier == other\n    return False",
                            "def __ne__(self, other):\n    return not self.__eq__(other)",
                            "def __lt__(self, other):\n    if isinstance(other, _Alpha):\n        return self.specifier < other.specifier\n    elif isinstance(other, str):\n        return self.specifier < other\n    elif isinstance(other, _Numeric):\n        return False\n    raise ValueError",
                            "def __gt__(self, other):\n    return not self.__lt__(other)",
                            "def __le__(self, other):\n    return self.__lt__(other) or self.__eq__(other)",
                            "def __ge__(self, other):\n    return self.__gt__(other) or self.__eq__(other)"
                        ],
                        "constructor_variables": [
                            "specifier"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, specifier)",
                            "__repr__(self)",
                            "__eq__(self, other)",
                            "__ne__(self, other)",
                            "__lt__(self, other)",
                            "__gt__(self, other)",
                            "__le__(self, other)",
                            "__ge__(self, other)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.__gt__": {
                                    "variable_value": "<bound method _Alpha.__gt__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "self.__eq__": {
                                    "variable_value": "<bound method _Alpha.__eq__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__gt__": {
                                    "variable_value": "<bound method _Numeric.__gt__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "self.__eq__": {
                                    "variable_value": "<bound method _Numeric.__eq__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.__gt__": {
                                    "variable_value": "<bound method _Alpha.__gt__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "self.__eq__": {
                                    "variable_value": "<bound method _Alpha.__eq__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__gt__": {
                                    "variable_value": "<bound method _Numeric.__gt__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "self.__eq__": {
                                    "variable_value": "<bound method _Numeric.__eq__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 1>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 1>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Alpha.__lt__ of 'b'>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "'b'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "'a'",
                                    "variable_type": "_Alpha",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.__lt__": {
                                    "variable_value": "<bound method _Numeric.__lt__ of 2>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "2",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "1",
                                    "variable_type": "_Numeric",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, specifier):\n    self.specifier = specifier",
                "def __repr__(self):\n    return repr(self.specifier)",
                "def __eq__(self, other):\n    if isinstance(other, _Alpha):\n        return self.specifier == other.specifier\n    elif isinstance(other, str):\n        return self.specifier == other\n\n    return False",
                "def __ne__(self, other):\n    return not self.__eq__(other)",
                "def __lt__(self, other):\n    if isinstance(other, _Alpha):\n        return self.specifier < other.specifier\n    elif isinstance(other, str):\n        return self.specifier < other\n    elif isinstance(other, _Numeric):\n        return False\n\n    raise ValueError",
                "def __gt__(self, other):\n    return not self.__lt__(other)",
                "def __le__(self, other):\n    return self.__lt__(other) or self.__eq__(other)",
                "def __ge__(self, other):\n    return self.__gt__(other) or self.__eq__(other)",
                "def __init__(self, specifier):\n    self.specifier = int(specifier)",
                "def __repr__(self):\n    return repr(self.specifier)",
                "def __eq__(self, other):\n    if isinstance(other, _Numeric):\n        return self.specifier == other.specifier\n    elif isinstance(other, int):\n        return self.specifier == other\n\n    return False",
                "def __ne__(self, other):\n    return not self.__eq__(other)",
                "def __lt__(self, other):\n    if isinstance(other, _Numeric):\n        return self.specifier < other.specifier\n    elif isinstance(other, int):\n        return self.specifier < other\n    elif isinstance(other, _Alpha):\n        return True\n\n    raise ValueError",
                "def __gt__(self, other):\n    return not self.__lt__(other)",
                "def __le__(self, other):\n    return self.__lt__(other) or self.__eq__(other)",
                "def __ge__(self, other):\n    return self.__gt__(other) or self.__eq__(other)",
                "def __init__(self, vstring=None):\n    self.vstring = vstring\n    self.major = None\n    self.minor = None\n    self.patch = None\n    self.prerelease = ()\n    self.buildmetadata = ()\n\n    if vstring:\n        self.parse(vstring)",
                "def __repr__(self):\n    return 'SemanticVersion(%r)' % self.vstring",
                "@staticmethod\ndef from_loose_version(loose_version):\n    \"\"\"This method is designed to take a ``LooseVersion``\n    and attempt to construct a ``SemanticVersion`` from it\n\n    This is useful where you want to do simple version math\n    without requiring users to provide a compliant semver.\n    \"\"\"\n    if not isinstance(loose_version, LooseVersion):\n        raise ValueError(\"%r is not a LooseVersion\" % loose_version)\n\n    try:\n        version = loose_version.version[:]\n    except AttributeError:\n        raise ValueError(\"%r is not a LooseVersion\" % loose_version)\n\n    extra_idx = 3\n    for marker in ('-', '+'):\n        try:\n            idx = version.index(marker)\n        except ValueError:\n            continue\n        else:\n            if idx < extra_idx:\n                extra_idx = idx\n    version = version[:extra_idx]\n\n    if version and set(type(v) for v in version) != set((int,)):\n        raise ValueError(\"Non integer values in %r\" % loose_version)\n\n    # Extra is everything to the right of the core version\n    extra = re.search('[+-].+$', loose_version.vstring)\n\n    version = version + [0] * (3 - len(version))\n    return SemanticVersion(\n        '%s%s' % (\n            '.'.join(str(v) for v in version),\n            extra.group(0) if extra else ''\n        )\n    )",
                "def parse(self, vstring):\n    match = SEMVER_RE.match(vstring)\n    if not match:\n        raise ValueError(\"invalid semantic version '%s'\" % vstring)\n\n    (major, minor, patch, prerelease, buildmetadata) = match.group(1, 2, 3, 4, 5)\n    self.major = int(major)\n    self.minor = int(minor)\n    self.patch = int(patch)\n\n    if prerelease:\n        self.prerelease = tuple(_Numeric(x) if x.isdigit() else _Alpha(x) for x in prerelease.split('.'))\n    if buildmetadata:\n        self.buildmetadata = tuple(_Numeric(x) if x.isdigit() else _Alpha(x) for x in buildmetadata.split('.'))",
                "@property\ndef core(self):\n    return self.major, self.minor, self.patch",
                "@property\ndef is_prerelease(self):\n    return bool(self.prerelease)",
                "@property\ndef is_stable(self):\n    # Major version zero (0.y.z) is for initial development. Anything MAY change at any time.\n    # The public API SHOULD NOT be considered stable.\n    # https://semver.org/#spec-item-4\n    return not (self.major == 0 or self.is_prerelease)",
                "def _cmp(self, other):\n    if isinstance(other, str):\n        other = SemanticVersion(other)\n\n    if self.core != other.core:\n        # if the core version doesn't match\n        # prerelease and buildmetadata doesn't matter\n        if self.core < other.core:\n            return -1\n        else:\n            return 1\n\n    if not any((self.prerelease, other.prerelease)):\n        return 0\n\n    if self.prerelease and not other.prerelease:\n        return -1\n    elif not self.prerelease and other.prerelease:\n        return 1\n    else:\n        if self.prerelease < other.prerelease:\n            return -1\n        elif self.prerelease > other.prerelease:\n            return 1\n\n    # Build metadata MUST be ignored when determining version precedence\n    # https://semver.org/#spec-item-10\n    # With the above in mind it is ignored here\n\n    # If we have made it here, things should be equal\n    return 0",
                "def __eq__(self, other):\n    return self._cmp(other) == 0",
                "def __ne__(self, other):\n    return not self.__eq__(other)",
                "def __lt__(self, other):\n    return self._cmp(other) < 0",
                "def __le__(self, other):\n    return self._cmp(other) <= 0",
                "def __gt__(self, other):\n    return self._cmp(other) > 0",
                "def __ge__(self, other):\n    return self._cmp(other) >= 0"
            ],
            "inscope_function_signatures": [
                "__init__(self, specifier)",
                "__repr__(self)",
                "__eq__(self, other)",
                "__ne__(self, other)",
                "__lt__(self, other)",
                "__gt__(self, other)",
                "__le__(self, other)",
                "__ge__(self, other)",
                "__init__(self, specifier)",
                "__repr__(self)",
                "__eq__(self, other)",
                "__ne__(self, other)",
                "__lt__(self, other)",
                "__gt__(self, other)",
                "__le__(self, other)",
                "__ge__(self, other)",
                "__init__(self, vstring=None)",
                "__repr__(self)",
                "from_loose_version(loose_version)",
                "parse(self, vstring)",
                "core(self)",
                "is_prerelease(self)",
                "is_stable(self)",
                "_cmp(self, other)",
                "__eq__(self, other)",
                "__ne__(self, other)",
                "__lt__(self, other)",
                "__le__(self, other)",
                "__gt__(self, other)",
                "__ge__(self, other)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "type": [
                    177,
                    6
                ],
                "SEMVER_RE": [
                    192,
                    17,
                    134
                ],
                "re.compile": [
                    17
                ],
                "re": [
                    17,
                    181,
                    38
                ],
                "re.X": [
                    38
                ],
                "self.specifier": [
                    67,
                    99,
                    69,
                    101,
                    110,
                    112,
                    49,
                    52,
                    56,
                    58,
                    92,
                    95
                ],
                "self": [
                    257,
                    260,
                    263,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    266,
                    269,
                    145,
                    272,
                    148,
                    49,
                    52,
                    56,
                    58,
                    63,
                    67,
                    69,
                    197,
                    198,
                    199,
                    202,
                    76,
                    204,
                    79,
                    208,
                    82,
                    212,
                    219,
                    92,
                    95,
                    225,
                    99,
                    228,
                    101,
                    233,
                    106,
                    236,
                    110,
                    238,
                    112,
                    241,
                    243,
                    119,
                    122,
                    125
                ],
                "specifier": [
                    49,
                    92
                ],
                "repr": [
                    52,
                    95
                ],
                "isinstance": [
                    66,
                    98,
                    68,
                    100,
                    70,
                    109,
                    111,
                    113,
                    55,
                    57,
                    222,
                    158
                ],
                "other": [
                    257,
                    260,
                    263,
                    266,
                    269,
                    272,
                    55,
                    56,
                    57,
                    58,
                    63,
                    66,
                    67,
                    68,
                    69,
                    70,
                    76,
                    79,
                    82,
                    222,
                    223,
                    225,
                    98,
                    99,
                    100,
                    101,
                    228,
                    233,
                    106,
                    236,
                    109,
                    110,
                    111,
                    112,
                    113,
                    238,
                    241,
                    243,
                    119,
                    122,
                    125
                ],
                "_Alpha": [
                    66,
                    202,
                    204,
                    113,
                    55
                ],
                "other.specifier": [
                    56,
                    99,
                    67,
                    110
                ],
                "str": [
                    57,
                    186,
                    68,
                    222
                ],
                "self.__eq__": [
                    260,
                    106,
                    79,
                    82,
                    122,
                    125,
                    63
                ],
                "_Numeric": [
                    98,
                    70,
                    202,
                    204,
                    109
                ],
                "ValueError": [
                    194,
                    164,
                    73,
                    170,
                    178,
                    116,
                    159
                ],
                "self.__lt__": [
                    122,
                    76,
                    119,
                    79
                ],
                "self.__gt__": [
                    82,
                    125
                ],
                "int": [
                    100,
                    197,
                    198,
                    199,
                    111,
                    177,
                    92
                ],
                "Version": [
                    128
                ],
                "version_re": [
                    134
                ],
                "self.vstring": [
                    137,
                    148
                ],
                "vstring": [
                    192,
                    194,
                    137,
                    144,
                    145
                ],
                "self.major": [
                    208,
                    138,
                    219,
                    197
                ],
                "self.minor": [
                    208,
                    139,
                    198
                ],
                "self.patch": [
                    208,
                    140,
                    199
                ],
                "self.prerelease": [
                    233,
                    202,
                    236,
                    141,
                    238,
                    241,
                    243,
                    212
                ],
                "self.buildmetadata": [
                    204,
                    142
                ],
                "self.parse": [
                    145
                ],
                "loose_version": [
                    162,
                    164,
                    178,
                    181,
                    158,
                    159
                ],
                "LooseVersion": [
                    158
                ],
                "version": [
                    162,
                    169,
                    175,
                    177,
                    183,
                    186
                ],
                "loose_version.version": [
                    162
                ],
                "AttributeError": [
                    163
                ],
                "extra_idx": [
                    174,
                    173,
                    166,
                    175
                ],
                "marker": [
                    169,
                    167
                ],
                "idx": [
                    169,
                    173,
                    174
                ],
                "version.index": [
                    169
                ],
                "set": [
                    177
                ],
                "v": [
                    177,
                    186
                ],
                "extra": [
                    187,
                    181
                ],
                "re.search": [
                    181
                ],
                "loose_version.vstring": [
                    181
                ],
                "len": [
                    183
                ],
                "SemanticVersion": [
                    184,
                    223
                ],
                "join": [
                    186
                ],
                "extra.group": [
                    187
                ],
                "staticmethod": [
                    150
                ],
                "match": [
                    192,
                    193,
                    196
                ],
                "SEMVER_RE.match": [
                    192
                ],
                "major": [
                    196,
                    197
                ],
                "minor": [
                    196,
                    198
                ],
                "patch": [
                    196,
                    199
                ],
                "prerelease": [
                    201,
                    202,
                    196
                ],
                "buildmetadata": [
                    204,
                    203,
                    196
                ],
                "match.group": [
                    196
                ],
                "tuple": [
                    202,
                    204
                ],
                "x.isdigit": [
                    202,
                    204
                ],
                "x": [
                    202,
                    204
                ],
                "prerelease.split": [
                    202
                ],
                "buildmetadata.split": [
                    204
                ],
                "property": [
                    210,
                    214,
                    206
                ],
                "bool": [
                    212
                ],
                "self.is_prerelease": [
                    219
                ],
                "self.core": [
                    225,
                    228
                ],
                "other.core": [
                    225,
                    228
                ],
                "any": [
                    233
                ],
                "other.prerelease": [
                    233,
                    236,
                    238,
                    241,
                    243
                ],
                "self._cmp": [
                    257,
                    263,
                    266,
                    269,
                    272
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "SEMVER_RE": [
                    192,
                    17,
                    134
                ],
                "re.compile": [
                    17
                ],
                "re": [
                    17,
                    181,
                    38
                ],
                "re.X": [
                    38
                ],
                "self.specifier": [
                    67,
                    99,
                    69,
                    101,
                    110,
                    112,
                    49,
                    52,
                    56,
                    58,
                    92,
                    95
                ],
                "self": [
                    257,
                    260,
                    263,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    266,
                    269,
                    145,
                    272,
                    148,
                    49,
                    52,
                    56,
                    58,
                    63,
                    67,
                    69,
                    197,
                    198,
                    199,
                    202,
                    76,
                    204,
                    79,
                    208,
                    82,
                    212,
                    219,
                    92,
                    95,
                    225,
                    99,
                    228,
                    101,
                    233,
                    106,
                    236,
                    110,
                    238,
                    112,
                    241,
                    243,
                    119,
                    122,
                    125
                ],
                "specifier": [
                    49,
                    92
                ],
                "other": [
                    257,
                    260,
                    263,
                    266,
                    269,
                    272,
                    55,
                    56,
                    57,
                    58,
                    63,
                    66,
                    67,
                    68,
                    69,
                    70,
                    76,
                    79,
                    82,
                    222,
                    223,
                    225,
                    98,
                    99,
                    100,
                    101,
                    228,
                    233,
                    106,
                    236,
                    109,
                    110,
                    111,
                    112,
                    113,
                    238,
                    241,
                    243,
                    119,
                    122,
                    125
                ],
                "_Alpha": [
                    66,
                    202,
                    204,
                    113,
                    55
                ],
                "other.specifier": [
                    56,
                    99,
                    67,
                    110
                ],
                "self.__eq__": [
                    260,
                    106,
                    79,
                    82,
                    122,
                    125,
                    63
                ],
                "_Numeric": [
                    98,
                    70,
                    202,
                    204,
                    109
                ],
                "self.__lt__": [
                    122,
                    76,
                    119,
                    79
                ],
                "self.__gt__": [
                    82,
                    125
                ],
                "Version": [
                    128
                ],
                "version_re": [
                    134
                ],
                "self.vstring": [
                    137,
                    148
                ],
                "vstring": [
                    192,
                    194,
                    137,
                    144,
                    145
                ],
                "self.major": [
                    208,
                    138,
                    219,
                    197
                ],
                "self.minor": [
                    208,
                    139,
                    198
                ],
                "self.patch": [
                    208,
                    140,
                    199
                ],
                "self.prerelease": [
                    233,
                    202,
                    236,
                    141,
                    238,
                    241,
                    243,
                    212
                ],
                "self.buildmetadata": [
                    204,
                    142
                ],
                "self.parse": [
                    145
                ],
                "loose_version": [
                    162,
                    164,
                    178,
                    181,
                    158,
                    159
                ],
                "LooseVersion": [
                    158
                ],
                "version": [
                    162,
                    169,
                    175,
                    177,
                    183,
                    186
                ],
                "loose_version.version": [
                    162
                ],
                "extra_idx": [
                    174,
                    173,
                    166,
                    175
                ],
                "marker": [
                    169,
                    167
                ],
                "idx": [
                    169,
                    173,
                    174
                ],
                "version.index": [
                    169
                ],
                "v": [
                    177,
                    186
                ],
                "extra": [
                    187,
                    181
                ],
                "re.search": [
                    181
                ],
                "loose_version.vstring": [
                    181
                ],
                "SemanticVersion": [
                    184,
                    223
                ],
                "join": [
                    186
                ],
                "extra.group": [
                    187
                ],
                "match": [
                    192,
                    193,
                    196
                ],
                "SEMVER_RE.match": [
                    192
                ],
                "major": [
                    196,
                    197
                ],
                "minor": [
                    196,
                    198
                ],
                "patch": [
                    196,
                    199
                ],
                "prerelease": [
                    201,
                    202,
                    196
                ],
                "buildmetadata": [
                    204,
                    203,
                    196
                ],
                "match.group": [
                    196
                ],
                "x.isdigit": [
                    202,
                    204
                ],
                "x": [
                    202,
                    204
                ],
                "prerelease.split": [
                    202
                ],
                "buildmetadata.split": [
                    204
                ],
                "self.is_prerelease": [
                    219
                ],
                "self.core": [
                    225,
                    228
                ],
                "other.core": [
                    225,
                    228
                ],
                "other.prerelease": [
                    233,
                    236,
                    238,
                    241,
                    243
                ],
                "self._cmp": [
                    257,
                    263,
                    266,
                    269,
                    272
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/ansible_2/test/units/utils/test_version.py",
                "test_function": "test_alpha",
                "test_function_code": "def test_alpha():\n    assert _Alpha('a') == _Alpha('a')\n    assert _Alpha('a') == 'a'\n    assert _Alpha('a') != _Alpha('b')\n    assert _Alpha('a') != 1\n    assert _Alpha('a') < _Alpha('b')\n    assert _Alpha('a') < 'c'\n    assert _Alpha('a') > _Numeric(1)\n    with pytest.raises(ValueError):\n        _Alpha('a') < None\n    assert _Alpha('a') <= _Alpha('a')\n    assert _Alpha('a') <= _Alpha('b')\n    assert _Alpha('b') >= _Alpha('a')\n    assert _Alpha('b') >= _Alpha('b')\n\n    # The following 3*6 tests check that all comparison operators perform\n    # as expected. DO NOT remove any of them, or reformulate them (to remove\n    # the explicit `not`)!\n\n    assert _Alpha('a') == _Alpha('a')\n    assert not _Alpha('a') != _Alpha('a')  # pylint: disable=unneeded-not\n    assert not _Alpha('a') < _Alpha('a')  # pylint: disable=unneeded-not\n    assert _Alpha('a') <= _Alpha('a')\n    assert not _Alpha('a') > _Alpha('a')  # pylint: disable=unneeded-not\n    assert _Alpha('a') >= _Alpha('a')\n\n    assert not _Alpha('a') == _Alpha('b')  # pylint: disable=unneeded-not\n    assert _Alpha('a') != _Alpha('b')\n    assert _Alpha('a') < _Alpha('b')\n    assert _Alpha('a') <= _Alpha('b')\n    assert not _Alpha('a') > _Alpha('b')  # pylint: disable=unneeded-not\n    assert not _Alpha('a') >= _Alpha('b')  # pylint: disable=unneeded-not\n\n    assert not _Alpha('b') == _Alpha('a')  # pylint: disable=unneeded-not\n    assert _Alpha('b') != _Alpha('a')\n    assert not _Alpha('b') < _Alpha('a')  # pylint: disable=unneeded-not\n    assert not _Alpha('b') <= _Alpha('a')  # pylint: disable=unneeded-not\n    assert _Alpha('b') > _Alpha('a')\n    assert _Alpha('b') >= _Alpha('a')",
                "test_error": "AssertionError: assert not 'a' > 'a'\n +  where 'a' = _Alpha('a')\n +  and   'a' = _Alpha('a')",
                "full_test_error": "def test_alpha():\n        assert _Alpha('a') == _Alpha('a')\n        assert _Alpha('a') == 'a'\n        assert _Alpha('a') != _Alpha('b')\n        assert _Alpha('a') != 1\n        assert _Alpha('a') < _Alpha('b')\n        assert _Alpha('a') < 'c'\n        assert _Alpha('a') > _Numeric(1)\n        with pytest.raises(ValueError):\n            _Alpha('a') < None\n        assert _Alpha('a') <= _Alpha('a')\n        assert _Alpha('a') <= _Alpha('b')\n        assert _Alpha('b') >= _Alpha('a')\n        assert _Alpha('b') >= _Alpha('b')\n    \n        # The following 3*6 tests check that all comparison operators perform\n        # as expected. DO NOT remove any of them, or reformulate them (to remove\n        # the explicit `not`)!\n    \n        assert _Alpha('a') == _Alpha('a')\n        assert not _Alpha('a') != _Alpha('a')  # pylint: disable=unneeded-not\n        assert not _Alpha('a') < _Alpha('a')  # pylint: disable=unneeded-not\n        assert _Alpha('a') <= _Alpha('a')\n>       assert not _Alpha('a') > _Alpha('a')  # pylint: disable=unneeded-not\nE       AssertionError: assert not 'a' > 'a'\nE        +  where 'a' = _Alpha('a')\nE        +  and   'a' = _Alpha('a')\n\ntest/units/utils/test_version.py:279: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/ansible_2/test/units/utils/test_version.py",
                "test_function": "test_numeric",
                "test_function_code": "def test_numeric():\n    assert _Numeric(1) == _Numeric(1)\n    assert _Numeric(1) == 1\n    assert _Numeric(1) != _Numeric(2)\n    assert _Numeric(1) != 'a'\n    assert _Numeric(1) < _Numeric(2)\n    assert _Numeric(1) < 3\n    assert _Numeric(1) < _Alpha('b')\n    with pytest.raises(ValueError):\n        _Numeric(1) < None\n    assert _Numeric(1) <= _Numeric(1)\n    assert _Numeric(1) <= _Numeric(2)\n    assert _Numeric(2) >= _Numeric(1)\n    assert _Numeric(2) >= _Numeric(2)\n\n    # The following 3*6 tests check that all comparison operators perform\n    # as expected. DO NOT remove any of them, or reformulate them (to remove\n    # the explicit `not`)!\n\n    assert _Numeric(1) == _Numeric(1)\n    assert not _Numeric(1) != _Numeric(1)  # pylint: disable=unneeded-not\n    assert not _Numeric(1) < _Numeric(1)  # pylint: disable=unneeded-not\n    assert _Numeric(1) <= _Numeric(1)\n    assert not _Numeric(1) > _Numeric(1)  # pylint: disable=unneeded-not\n    assert _Numeric(1) >= _Numeric(1)\n\n    assert not _Numeric(1) == _Numeric(2)  # pylint: disable=unneeded-not\n    assert _Numeric(1) != _Numeric(2)\n    assert _Numeric(1) < _Numeric(2)\n    assert _Numeric(1) <= _Numeric(2)\n    assert not _Numeric(1) > _Numeric(2)  # pylint: disable=unneeded-not\n    assert not _Numeric(1) >= _Numeric(2)  # pylint: disable=unneeded-not\n\n    assert not _Numeric(2) == _Numeric(1)  # pylint: disable=unneeded-not\n    assert _Numeric(2) != _Numeric(1)\n    assert not _Numeric(2) < _Numeric(1)  # pylint: disable=unneeded-not\n    assert not _Numeric(2) <= _Numeric(1)  # pylint: disable=unneeded-not\n    assert _Numeric(2) > _Numeric(1)\n    assert _Numeric(2) >= _Numeric(1)",
                "test_error": "assert not 1 > 1\n +  where 1 = _Numeric(1)\n +  and   1 = _Numeric(1)",
                "full_test_error": "def test_numeric():\n        assert _Numeric(1) == _Numeric(1)\n        assert _Numeric(1) == 1\n        assert _Numeric(1) != _Numeric(2)\n        assert _Numeric(1) != 'a'\n        assert _Numeric(1) < _Numeric(2)\n        assert _Numeric(1) < 3\n        assert _Numeric(1) < _Alpha('b')\n        with pytest.raises(ValueError):\n            _Numeric(1) < None\n        assert _Numeric(1) <= _Numeric(1)\n        assert _Numeric(1) <= _Numeric(2)\n        assert _Numeric(2) >= _Numeric(1)\n        assert _Numeric(2) >= _Numeric(2)\n    \n        # The following 3*6 tests check that all comparison operators perform\n        # as expected. DO NOT remove any of them, or reformulate them (to remove\n        # the explicit `not`)!\n    \n        assert _Numeric(1) == _Numeric(1)\n        assert not _Numeric(1) != _Numeric(1)  # pylint: disable=unneeded-not\n        assert not _Numeric(1) < _Numeric(1)  # pylint: disable=unneeded-not\n        assert _Numeric(1) <= _Numeric(1)\n>       assert not _Numeric(1) > _Numeric(1)  # pylint: disable=unneeded-not\nE       assert not 1 > 1\nE        +  where 1 = _Numeric(1)\nE        +  and   1 = _Numeric(1)\n\ntest/units/utils/test_version.py:320: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}