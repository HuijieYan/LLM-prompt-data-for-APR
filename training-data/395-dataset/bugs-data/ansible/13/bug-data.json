{
    "ansible:13": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_13/lib/ansible/cli/galaxy.py": {
            "buggy_functions": [
                {
                    "function_name": "execute_install",
                    "function_code": "def execute_install(self):\n    \"\"\"\n    Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n    You can pass in a list (roles or collections) or use the file\n    option listed below (these are mutually exclusive). If you pass in a list, it\n    can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n    \"\"\"\n    if context.CLIARGS['type'] == 'collection':\n        collections = context.CLIARGS['args']\n        force = context.CLIARGS['force']\n        output_path = context.CLIARGS['collections_path']\n        ignore_certs = context.CLIARGS['ignore_certs']\n        ignore_errors = context.CLIARGS['ignore_errors']\n        requirements_file = context.CLIARGS['requirements']\n        no_deps = context.CLIARGS['no_deps']\n        force_deps = context.CLIARGS['force_with_deps']\n\n        if collections and requirements_file:\n            raise AnsibleError(\"The positional collection_name arg and --requirements-file are mutually exclusive.\")\n        elif not collections and not requirements_file:\n            raise AnsibleError(\"You must specify a collection name or a requirements file.\")\n\n        if requirements_file:\n            requirements_file = GalaxyCLI._resolve_path(requirements_file)\n            requirements = self._parse_requirements_file(requirements_file, allow_old_format=False)['collections']\n        else:\n            requirements = []\n            for collection_input in collections:\n                name, dummy, requirement = collection_input.partition(':')\n                requirements.append((name, requirement or '*', None))\n\n        output_path = GalaxyCLI._resolve_path(output_path)\n        collections_path = C.COLLECTIONS_PATHS\n\n        if len([p for p in collections_path if p.startswith(output_path)]) == 0:\n            display.warning(\"The specified collections path '%s' is not part of the configured Ansible \"\n                            \"collections paths '%s'. The installed collection won't be picked up in an Ansible \"\n                            \"run.\" % (to_text(output_path), to_text(\":\".join(collections_path))))\n\n        if os.path.split(output_path)[1] != 'ansible_collections':\n            output_path = os.path.join(output_path, 'ansible_collections')\n\n        b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n        if not os.path.exists(b_output_path):\n            os.makedirs(b_output_path)\n\n        install_collections(requirements, output_path, self.api_servers, (not ignore_certs), ignore_errors,\n                            no_deps, force, force_deps)\n\n        return 0\n\n    role_file = context.CLIARGS['role_file']\n\n    if not context.CLIARGS['args'] and role_file is None:\n        # the user needs to specify one of either --role-file or specify a single user/role name\n        raise AnsibleOptionsError(\"- you must specify a user/role name or a roles file\")\n\n    no_deps = context.CLIARGS['no_deps']\n    force_deps = context.CLIARGS['force_with_deps']\n\n    force = context.CLIARGS['force'] or force_deps\n\n    roles_left = []\n    if role_file:\n        if not (role_file.endswith('.yaml') or role_file.endswith('.yml')):\n            raise AnsibleError(\"Invalid role requirements file, it must end with a .yml or .yaml extension\")\n\n        roles_left = self._parse_requirements_file(role_file)['roles']\n    else:\n        # roles were specified directly, so we'll just go out grab them\n        # (and their dependencies, unless the user doesn't want us to).\n        for rname in context.CLIARGS['args']:\n            role = RoleRequirement.role_yaml_parse(rname.strip())\n            roles_left.append(GalaxyRole(self.galaxy, self.api, **role))\n\n    for role in roles_left:\n        # only process roles in roles files when names matches if given\n        if role_file and context.CLIARGS['args'] and role.name not in context.CLIARGS['args']:\n            display.vvv('Skipping role %s' % role.name)\n            continue\n\n        display.vvv('Processing role %s ' % role.name)\n\n        # query the galaxy API for the role data\n\n        if role.install_info is not None:\n            if role.install_info['version'] != role.version or force:\n                if force:\n                    display.display('- changing role %s from %s to %s' %\n                                    (role.name, role.install_info['version'], role.version or \"unspecified\"))\n                    role.remove()\n                else:\n                    display.warning('- %s (%s) is already installed - use --force to change version to %s' %\n                                    (role.name, role.install_info['version'], role.version or \"unspecified\"))\n                    continue\n            else:\n                if not force:\n                    display.display('- %s is already installed, skipping.' % str(role))\n                    continue\n\n        try:\n            installed = role.install()\n        except AnsibleError as e:\n            display.warning(u\"- %s was NOT installed successfully: %s \" % (role.name, to_text(e)))\n            self.exit_without_ignore()\n            continue\n\n        # install dependencies, if we want them\n        if not no_deps and installed:\n            if not role.metadata:\n                display.warning(\"Meta file %s is empty. Skipping dependencies.\" % role.path)\n            else:\n                role_dependencies = role.metadata.get('dependencies') or []\n                for dep in role_dependencies:\n                    display.debug('Installing dep %s' % dep)\n                    dep_req = RoleRequirement()\n                    dep_info = dep_req.role_yaml_parse(dep)\n                    dep_role = GalaxyRole(self.galaxy, self.api, **dep_info)\n                    if '.' not in dep_role.name and '.' not in dep_role.src and dep_role.scm is None:\n                        # we know we can skip this, as it's not going to\n                        # be found on galaxy.ansible.com\n                        continue\n                    if dep_role.install_info is None:\n                        if dep_role not in roles_left:\n                            display.display('- adding dependency: %s' % to_text(dep_role))\n                            roles_left.append(dep_role)\n                        else:\n                            display.display('- dependency %s already pending installation.' % dep_role.name)\n                    else:\n                        if dep_role.install_info['version'] != dep_role.version:\n                            if force_deps:\n                                display.display('- changing dependant role %s from %s to %s' %\n                                                (dep_role.name, dep_role.install_info['version'], dep_role.version or \"unspecified\"))\n                                dep_role.remove()\n                                roles_left.append(dep_role)\n                            else:\n                                display.warning('- dependency %s (%s) from role %s differs from already installed version (%s), skipping' %\n                                                (to_text(dep_role), dep_role.version, role.name, dep_role.install_info['version']))\n                        else:\n                            if force_deps:\n                                roles_left.append(dep_role)\n                            else:\n                                display.display('- dependency %s is already installed, skipping.' % dep_role.name)\n\n        if not installed:\n            display.warning(\"- %s was NOT installed successfully.\" % role.name)\n            self.exit_without_ignore()\n\n    return 0\n",
                    "decorators": [],
                    "docstring": "Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\nYou can pass in a list (roles or collections) or use the file\noption listed below (these are mutually exclusive). If you pass in a list, it\ncan be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.",
                    "start_line": 780,
                    "end_line": 928,
                    "variables": {
                        "context.CLIARGS": [
                            833,
                            837,
                            838,
                            840,
                            787,
                            788,
                            789,
                            790,
                            791,
                            792,
                            793,
                            794,
                            795,
                            851,
                            857,
                            831
                        ],
                        "context": [
                            833,
                            837,
                            838,
                            840,
                            787,
                            788,
                            789,
                            790,
                            791,
                            792,
                            793,
                            794,
                            795,
                            851,
                            857,
                            831
                        ],
                        "collections": [
                            807,
                            788,
                            797,
                            799
                        ],
                        "force": [
                            866,
                            867,
                            840,
                            876,
                            789,
                            827
                        ],
                        "output_path": [
                            811,
                            814,
                            817,
                            819,
                            820,
                            790,
                            822,
                            826
                        ],
                        "ignore_certs": [
                            826,
                            791
                        ],
                        "ignore_errors": [
                            792,
                            826
                        ],
                        "requirements_file": [
                            802,
                            803,
                            804,
                            793,
                            797,
                            799
                        ],
                        "no_deps": [
                            888,
                            794,
                            827,
                            837
                        ],
                        "force_deps": [
                            795,
                            838,
                            840,
                            910,
                            919,
                            827
                        ],
                        "AnsibleError": [
                            800,
                            882,
                            845,
                            798
                        ],
                        "GalaxyCLI._resolve_path": [
                            811,
                            803
                        ],
                        "GalaxyCLI": [
                            811,
                            803
                        ],
                        "requirements": [
                            809,
                            826,
                            804,
                            806
                        ],
                        "self._parse_requirements_file": [
                            804,
                            847
                        ],
                        "self": [
                            897,
                            804,
                            847,
                            884,
                            853,
                            826,
                            926
                        ],
                        "collection_input": [
                            808,
                            807
                        ],
                        "name": [
                            808,
                            809
                        ],
                        "dummy": [
                            808
                        ],
                        "requirement": [
                            808,
                            809
                        ],
                        "collection_input.partition": [
                            808
                        ],
                        "requirements.append": [
                            809
                        ],
                        "collections_path": [
                            817,
                            812,
                            814
                        ],
                        "C.COLLECTIONS_PATHS": [
                            812
                        ],
                        "C": [
                            812
                        ],
                        "len": [
                            814
                        ],
                        "p": [
                            814
                        ],
                        "p.startswith": [
                            814
                        ],
                        "display.warning": [
                            872,
                            815,
                            883,
                            916,
                            890,
                            925
                        ],
                        "display": [
                            868,
                            872,
                            904,
                            907,
                            877,
                            925,
                            815,
                            911,
                            894,
                            883,
                            916,
                            858,
                            861,
                            890,
                            922
                        ],
                        "to_text": [
                            904,
                            817,
                            883,
                            917
                        ],
                        "join": [
                            817
                        ],
                        "os.path.split": [
                            819
                        ],
                        "os.path": [
                            819,
                            820,
                            823
                        ],
                        "os": [
                            824,
                            819,
                            820,
                            823
                        ],
                        "os.path.join": [
                            820
                        ],
                        "b_output_path": [
                            824,
                            822,
                            823
                        ],
                        "to_bytes": [
                            822
                        ],
                        "os.path.exists": [
                            823
                        ],
                        "os.makedirs": [
                            824
                        ],
                        "install_collections": [
                            826
                        ],
                        "self.api_servers": [
                            826
                        ],
                        "role_file": [
                            833,
                            843,
                            844,
                            847,
                            857,
                            831
                        ],
                        "AnsibleOptionsError": [
                            835
                        ],
                        "roles_left": [
                            903,
                            905,
                            842,
                            847,
                            914,
                            853,
                            855,
                            920
                        ],
                        "role_file.endswith": [
                            844
                        ],
                        "rname": [
                            851,
                            852
                        ],
                        "role": [
                            917,
                            925,
                            852,
                            853,
                            855,
                            857,
                            858,
                            861,
                            865,
                            866,
                            869,
                            870,
                            873,
                            877,
                            881,
                            883,
                            889,
                            890,
                            892
                        ],
                        "RoleRequirement.role_yaml_parse": [
                            852
                        ],
                        "RoleRequirement": [
                            852,
                            895
                        ],
                        "rname.strip": [
                            852
                        ],
                        "roles_left.append": [
                            920,
                            905,
                            914,
                            853
                        ],
                        "GalaxyRole": [
                            897,
                            853
                        ],
                        "self.galaxy": [
                            897,
                            853
                        ],
                        "self.api": [
                            897,
                            853
                        ],
                        "role.name": [
                            869,
                            873,
                            925,
                            883,
                            917,
                            857,
                            858,
                            861
                        ],
                        "display.vvv": [
                            858,
                            861
                        ],
                        "role.install_info": [
                            865,
                            866,
                            869,
                            873
                        ],
                        "role.version": [
                            873,
                            866,
                            869
                        ],
                        "display.display": [
                            868,
                            904,
                            907,
                            877,
                            911,
                            922
                        ],
                        "role.remove": [
                            870
                        ],
                        "str": [
                            877
                        ],
                        "installed": [
                            888,
                            881,
                            924
                        ],
                        "role.install": [
                            881
                        ],
                        "e": [
                            883
                        ],
                        "self.exit_without_ignore": [
                            884,
                            926
                        ],
                        "role.metadata": [
                            889,
                            892
                        ],
                        "role.path": [
                            890
                        ],
                        "role_dependencies": [
                            892,
                            893
                        ],
                        "role.metadata.get": [
                            892
                        ],
                        "dep": [
                            896,
                            893,
                            894
                        ],
                        "display.debug": [
                            894
                        ],
                        "dep_req": [
                            896,
                            895
                        ],
                        "dep_info": [
                            896,
                            897
                        ],
                        "dep_req.role_yaml_parse": [
                            896
                        ],
                        "dep_role": [
                            897,
                            898,
                            902,
                            903,
                            904,
                            905,
                            907,
                            909,
                            912,
                            913,
                            914,
                            917,
                            920,
                            922
                        ],
                        "dep_role.name": [
                            912,
                            898,
                            907,
                            922
                        ],
                        "dep_role.src": [
                            898
                        ],
                        "dep_role.scm": [
                            898
                        ],
                        "dep_role.install_info": [
                            912,
                            909,
                            902,
                            917
                        ],
                        "dep_role.version": [
                            912,
                            909,
                            917
                        ],
                        "dep_role.remove": [
                            913
                        ]
                    },
                    "filtered_variables": {
                        "context.CLIARGS": [
                            833,
                            837,
                            838,
                            840,
                            787,
                            788,
                            789,
                            790,
                            791,
                            792,
                            793,
                            794,
                            795,
                            851,
                            857,
                            831
                        ],
                        "context": [
                            833,
                            837,
                            838,
                            840,
                            787,
                            788,
                            789,
                            790,
                            791,
                            792,
                            793,
                            794,
                            795,
                            851,
                            857,
                            831
                        ],
                        "collections": [
                            807,
                            788,
                            797,
                            799
                        ],
                        "force": [
                            866,
                            867,
                            840,
                            876,
                            789,
                            827
                        ],
                        "output_path": [
                            811,
                            814,
                            817,
                            819,
                            820,
                            790,
                            822,
                            826
                        ],
                        "ignore_certs": [
                            826,
                            791
                        ],
                        "ignore_errors": [
                            792,
                            826
                        ],
                        "requirements_file": [
                            802,
                            803,
                            804,
                            793,
                            797,
                            799
                        ],
                        "no_deps": [
                            888,
                            794,
                            827,
                            837
                        ],
                        "force_deps": [
                            795,
                            838,
                            840,
                            910,
                            919,
                            827
                        ],
                        "AnsibleError": [
                            800,
                            882,
                            845,
                            798
                        ],
                        "GalaxyCLI._resolve_path": [
                            811,
                            803
                        ],
                        "GalaxyCLI": [
                            811,
                            803
                        ],
                        "requirements": [
                            809,
                            826,
                            804,
                            806
                        ],
                        "self._parse_requirements_file": [
                            804,
                            847
                        ],
                        "self": [
                            897,
                            804,
                            847,
                            884,
                            853,
                            826,
                            926
                        ],
                        "collection_input": [
                            808,
                            807
                        ],
                        "name": [
                            808,
                            809
                        ],
                        "dummy": [
                            808
                        ],
                        "requirement": [
                            808,
                            809
                        ],
                        "collection_input.partition": [
                            808
                        ],
                        "requirements.append": [
                            809
                        ],
                        "collections_path": [
                            817,
                            812,
                            814
                        ],
                        "C.COLLECTIONS_PATHS": [
                            812
                        ],
                        "C": [
                            812
                        ],
                        "p": [
                            814
                        ],
                        "p.startswith": [
                            814
                        ],
                        "display.warning": [
                            872,
                            815,
                            883,
                            916,
                            890,
                            925
                        ],
                        "display": [
                            868,
                            872,
                            904,
                            907,
                            877,
                            925,
                            815,
                            911,
                            894,
                            883,
                            916,
                            858,
                            861,
                            890,
                            922
                        ],
                        "to_text": [
                            904,
                            817,
                            883,
                            917
                        ],
                        "join": [
                            817
                        ],
                        "os.path.split": [
                            819
                        ],
                        "os.path": [
                            819,
                            820,
                            823
                        ],
                        "os": [
                            824,
                            819,
                            820,
                            823
                        ],
                        "os.path.join": [
                            820
                        ],
                        "b_output_path": [
                            824,
                            822,
                            823
                        ],
                        "to_bytes": [
                            822
                        ],
                        "os.path.exists": [
                            823
                        ],
                        "os.makedirs": [
                            824
                        ],
                        "install_collections": [
                            826
                        ],
                        "self.api_servers": [
                            826
                        ],
                        "role_file": [
                            833,
                            843,
                            844,
                            847,
                            857,
                            831
                        ],
                        "AnsibleOptionsError": [
                            835
                        ],
                        "roles_left": [
                            903,
                            905,
                            842,
                            847,
                            914,
                            853,
                            855,
                            920
                        ],
                        "role_file.endswith": [
                            844
                        ],
                        "rname": [
                            851,
                            852
                        ],
                        "role": [
                            917,
                            925,
                            852,
                            853,
                            855,
                            857,
                            858,
                            861,
                            865,
                            866,
                            869,
                            870,
                            873,
                            877,
                            881,
                            883,
                            889,
                            890,
                            892
                        ],
                        "RoleRequirement.role_yaml_parse": [
                            852
                        ],
                        "RoleRequirement": [
                            852,
                            895
                        ],
                        "rname.strip": [
                            852
                        ],
                        "roles_left.append": [
                            920,
                            905,
                            914,
                            853
                        ],
                        "GalaxyRole": [
                            897,
                            853
                        ],
                        "self.galaxy": [
                            897,
                            853
                        ],
                        "self.api": [
                            897,
                            853
                        ],
                        "role.name": [
                            869,
                            873,
                            925,
                            883,
                            917,
                            857,
                            858,
                            861
                        ],
                        "display.vvv": [
                            858,
                            861
                        ],
                        "role.install_info": [
                            865,
                            866,
                            869,
                            873
                        ],
                        "role.version": [
                            873,
                            866,
                            869
                        ],
                        "display.display": [
                            868,
                            904,
                            907,
                            877,
                            911,
                            922
                        ],
                        "role.remove": [
                            870
                        ],
                        "installed": [
                            888,
                            881,
                            924
                        ],
                        "role.install": [
                            881
                        ],
                        "e": [
                            883
                        ],
                        "self.exit_without_ignore": [
                            884,
                            926
                        ],
                        "role.metadata": [
                            889,
                            892
                        ],
                        "role.path": [
                            890
                        ],
                        "role_dependencies": [
                            892,
                            893
                        ],
                        "role.metadata.get": [
                            892
                        ],
                        "dep": [
                            896,
                            893,
                            894
                        ],
                        "display.debug": [
                            894
                        ],
                        "dep_req": [
                            896,
                            895
                        ],
                        "dep_info": [
                            896,
                            897
                        ],
                        "dep_req.role_yaml_parse": [
                            896
                        ],
                        "dep_role": [
                            897,
                            898,
                            902,
                            903,
                            904,
                            905,
                            907,
                            909,
                            912,
                            913,
                            914,
                            917,
                            920,
                            922
                        ],
                        "dep_role.name": [
                            912,
                            898,
                            907,
                            922
                        ],
                        "dep_role.src": [
                            898
                        ],
                        "dep_role.scm": [
                            898
                        ],
                        "dep_role.install_info": [
                            912,
                            909,
                            902,
                            917
                        ],
                        "dep_role.version": [
                            912,
                            909,
                            917
                        ],
                        "dep_role.remove": [
                            913
                        ]
                    },
                    "diff_line_number": 808,
                    "class_data": {
                        "signature": "class GalaxyCLI(CLI)",
                        "docstring": "command to manage Ansible roles in shared repositories, the default of which is Ansible Galaxy *https://galaxy.ansible.com*.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, args):\n    if len(args) > 1 and args[1] not in ['-h', '--help', '--version'] and ('role' not in args) and ('collection' not in args):\n        idx = 2 if args[1].startswith('-v') else 1\n        args.insert(idx, 'role')\n    self.api_servers = []\n    self.galaxy = None\n    super(GalaxyCLI, self).__init__(args)",
                            "def init_parser(self):\n    \"\"\" create an options parser for bin/ansible \"\"\"\n    super(GalaxyCLI, self).init_parser(desc='Perform various Role and Collection related operations.')\n    common = opt_help.argparse.ArgumentParser(add_help=False)\n    common.add_argument('-s', '--server', dest='api_server', help='The Galaxy API server URL')\n    common.add_argument('--api-key', dest='api_key', help='The Ansible Galaxy API key which can be found at https://galaxy.ansible.com/me/preferences. You can also use ansible-galaxy login to retrieve this key or set the token for the GALAXY_SERVER_LIST entry.')\n    common.add_argument('-c', '--ignore-certs', action='store_true', dest='ignore_certs', default=C.GALAXY_IGNORE_CERTS, help='Ignore SSL certificate validation errors.')\n    opt_help.add_verbosity_options(common)\n    force = opt_help.argparse.ArgumentParser(add_help=False)\n    force.add_argument('-f', '--force', dest='force', action='store_true', default=False, help='Force overwriting an existing role or collection')\n    github = opt_help.argparse.ArgumentParser(add_help=False)\n    github.add_argument('github_user', help='GitHub username')\n    github.add_argument('github_repo', help='GitHub repository')\n    offline = opt_help.argparse.ArgumentParser(add_help=False)\n    offline.add_argument('--offline', dest='offline', default=False, action='store_true', help=\"Don't query the galaxy API when creating roles\")\n    default_roles_path = C.config.get_configuration_definition('DEFAULT_ROLES_PATH').get('default', '')\n    roles_path = opt_help.argparse.ArgumentParser(add_help=False)\n    roles_path.add_argument('-p', '--roles-path', dest='roles_path', type=opt_help.unfrack_path(pathsep=True), default=C.DEFAULT_ROLES_PATH, action=opt_help.PrependListAction, help='The path to the directory containing your roles. The default is the first writable one configured via DEFAULT_ROLES_PATH: %s ' % default_roles_path)\n    type_parser = self.parser.add_subparsers(metavar='TYPE', dest='type')\n    type_parser.required = True\n    collection = type_parser.add_parser('collection', help='Manage an Ansible Galaxy collection.')\n    collection_parser = collection.add_subparsers(metavar='COLLECTION_ACTION', dest='action')\n    collection_parser.required = True\n    self.add_init_options(collection_parser, parents=[common, force])\n    self.add_build_options(collection_parser, parents=[common, force])\n    self.add_publish_options(collection_parser, parents=[common])\n    self.add_install_options(collection_parser, parents=[common, force])\n    role = type_parser.add_parser('role', help='Manage an Ansible Galaxy role.')\n    role_parser = role.add_subparsers(metavar='ROLE_ACTION', dest='action')\n    role_parser.required = True\n    self.add_init_options(role_parser, parents=[common, force, offline])\n    self.add_remove_options(role_parser, parents=[common, roles_path])\n    self.add_delete_options(role_parser, parents=[common, github])\n    self.add_list_options(role_parser, parents=[common, roles_path])\n    self.add_search_options(role_parser, parents=[common])\n    self.add_import_options(role_parser, parents=[common, github])\n    self.add_setup_options(role_parser, parents=[common, roles_path])\n    self.add_login_options(role_parser, parents=[common])\n    self.add_info_options(role_parser, parents=[common, roles_path, offline])\n    self.add_install_options(role_parser, parents=[common, force, roles_path])",
                            "def add_init_options(self, parser, parents=None):\n    galaxy_type = 'collection' if parser.metavar == 'COLLECTION_ACTION' else 'role'\n    init_parser = parser.add_parser('init', parents=parents, help='Initialize new {0} with the base structure of a {0}.'.format(galaxy_type))\n    init_parser.set_defaults(func=self.execute_init)\n    init_parser.add_argument('--init-path', dest='init_path', default='./', help='The path in which the skeleton {0} will be created. The default is the current working directory.'.format(galaxy_type))\n    init_parser.add_argument('--{0}-skeleton'.format(galaxy_type), dest='{0}_skeleton'.format(galaxy_type), default=C.GALAXY_ROLE_SKELETON, help='The path to a {0} skeleton that the new {0} should be based upon.'.format(galaxy_type))\n    obj_name_kwargs = {}\n    if galaxy_type == 'collection':\n        obj_name_kwargs['type'] = validate_collection_name\n    init_parser.add_argument('{0}_name'.format(galaxy_type), help='{0} name'.format(galaxy_type.capitalize()), **obj_name_kwargs)\n    if galaxy_type == 'role':\n        init_parser.add_argument('--type', dest='role_type', action='store', default='default', help=\"Initialize using an alternate role type. Valid types include: 'container', 'apb' and 'network'.\")",
                            "def add_remove_options(self, parser, parents=None):\n    remove_parser = parser.add_parser('remove', parents=parents, help='Delete roles from roles_path.')\n    remove_parser.set_defaults(func=self.execute_remove)\n    remove_parser.add_argument('args', help='Role(s)', metavar='role', nargs='+')",
                            "def add_delete_options(self, parser, parents=None):\n    delete_parser = parser.add_parser('delete', parents=parents, help='Removes the role from Galaxy. It does not remove or alter the actual GitHub repository.')\n    delete_parser.set_defaults(func=self.execute_delete)",
                            "def add_list_options(self, parser, parents=None):\n    list_parser = parser.add_parser('list', parents=parents, help='Show the name and version of each role installed in the roles_path.')\n    list_parser.set_defaults(func=self.execute_list)\n    list_parser.add_argument('role', help='Role', nargs='?', metavar='role')",
                            "def add_search_options(self, parser, parents=None):\n    search_parser = parser.add_parser('search', parents=parents, help='Search the Galaxy database by tags, platforms, author and multiple keywords.')\n    search_parser.set_defaults(func=self.execute_search)\n    search_parser.add_argument('--platforms', dest='platforms', help='list of OS platforms to filter by')\n    search_parser.add_argument('--galaxy-tags', dest='galaxy_tags', help='list of galaxy tags to filter by')\n    search_parser.add_argument('--author', dest='author', help='GitHub username')\n    search_parser.add_argument('args', help='Search terms', metavar='searchterm', nargs='*')",
                            "def add_import_options(self, parser, parents=None):\n    import_parser = parser.add_parser('import', parents=parents, help='Import a role')\n    import_parser.set_defaults(func=self.execute_import)\n    import_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import results.\")\n    import_parser.add_argument('--branch', dest='reference', help=\"The name of a branch to import. Defaults to the repository's default branch (usually master)\")\n    import_parser.add_argument('--role-name', dest='role_name', help='The name the role should have, if different than the repo name')\n    import_parser.add_argument('--status', dest='check_status', action='store_true', default=False, help='Check the status of the most recent import request for given github_user/github_repo.')",
                            "def add_setup_options(self, parser, parents=None):\n    setup_parser = parser.add_parser('setup', parents=parents, help='Manage the integration between Galaxy and the given source.')\n    setup_parser.set_defaults(func=self.execute_setup)\n    setup_parser.add_argument('--remove', dest='remove_id', default=None, help='Remove the integration matching the provided ID value. Use --list to see ID values.')\n    setup_parser.add_argument('--list', dest='setup_list', action='store_true', default=False, help='List all of your integrations.')\n    setup_parser.add_argument('source', help='Source')\n    setup_parser.add_argument('github_user', help='GitHub username')\n    setup_parser.add_argument('github_repo', help='GitHub repository')\n    setup_parser.add_argument('secret', help='Secret')",
                            "def add_login_options(self, parser, parents=None):\n    login_parser = parser.add_parser('login', parents=parents, help=\"Login to api.github.com server in order to use ansible-galaxy role sub command such as 'import', 'delete', 'publish', and 'setup'\")\n    login_parser.set_defaults(func=self.execute_login)\n    login_parser.add_argument('--github-token', dest='token', default=None, help='Identify with github token rather than username and password.')",
                            "def add_info_options(self, parser, parents=None):\n    info_parser = parser.add_parser('info', parents=parents, help='View more details about a specific role.')\n    info_parser.set_defaults(func=self.execute_info)\n    info_parser.add_argument('args', nargs='+', help='role', metavar='role_name[,version]')",
                            "def add_install_options(self, parser, parents=None):\n    galaxy_type = 'collection' if parser.metavar == 'COLLECTION_ACTION' else 'role'\n    args_kwargs = {}\n    if galaxy_type == 'collection':\n        args_kwargs['help'] = 'The collection(s) name or path/url to a tar.gz collection artifact. This is mutually exclusive with --requirements-file.'\n        ignore_errors_help = 'Ignore errors during installation and continue with the next specified collection. This will not ignore dependency conflict errors.'\n    else:\n        args_kwargs['help'] = 'Role name, URL or tar file'\n        ignore_errors_help = 'Ignore errors and continue with the next specified role.'\n    install_parser = parser.add_parser('install', parents=parents, help='Install {0}(s) from file(s), URL(s) or Ansible Galaxy'.format(galaxy_type))\n    install_parser.set_defaults(func=self.execute_install)\n    install_parser.add_argument('args', metavar='{0}_name'.format(galaxy_type), nargs='*', **args_kwargs)\n    install_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False, help=ignore_errors_help)\n    install_exclusive = install_parser.add_mutually_exclusive_group()\n    install_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False, help=\"Don't download {0}s listed as dependencies.\".format(galaxy_type))\n    install_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False, help='Force overwriting an existing {0} and its dependencies.'.format(galaxy_type))\n    if galaxy_type == 'collection':\n        install_parser.add_argument('-p', '--collections-path', dest='collections_path', default=C.COLLECTIONS_PATHS[0], help='The path to the directory containing your collections.')\n        install_parser.add_argument('-r', '--requirements-file', dest='requirements', help='A file containing a list of collections to be installed.')\n    else:\n        install_parser.add_argument('-r', '--role-file', dest='role_file', help='A file containing a list of roles to be imported.')\n        install_parser.add_argument('-g', '--keep-scm-meta', dest='keep_scm_meta', action='store_true', default=False, help='Use tar instead of the scm archive option when packaging the role.')",
                            "def add_build_options(self, parser, parents=None):\n    build_parser = parser.add_parser('build', parents=parents, help='Build an Ansible collection artifact that can be publish to Ansible Galaxy.')\n    build_parser.set_defaults(func=self.execute_build)\n    build_parser.add_argument('args', metavar='collection', nargs='*', default=('.',), help='Path to the collection(s) directory to build. This should be the directory that contains the galaxy.yml file. The default is the current working directory.')\n    build_parser.add_argument('--output-path', dest='output_path', default='./', help='The path in which the collection is built to. The default is the current working directory.')",
                            "def add_publish_options(self, parser, parents=None):\n    publish_parser = parser.add_parser('publish', parents=parents, help='Publish a collection artifact to Ansible Galaxy.')\n    publish_parser.set_defaults(func=self.execute_publish)\n    publish_parser.add_argument('args', metavar='collection_path', help='The path to the collection tarball to publish.')\n    publish_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import validation results.\")\n    publish_parser.add_argument('--import-timeout', dest='import_timeout', type=int, default=0, help='The time to wait for the collection import process to finish.')",
                            "def post_process_args(self, options):\n    options = super(GalaxyCLI, self).post_process_args(options)\n    display.verbosity = options.verbosity\n    return options",
                            "def run(self):\n    super(GalaxyCLI, self).run()\n    self.galaxy = Galaxy()\n\n    def server_config_def(section, key, required):\n        return {'description': 'The %s of the %s Galaxy server' % (key, section), 'ini': [{'section': 'galaxy_server.%s' % section, 'key': key}], 'env': [{'name': 'ANSIBLE_GALAXY_SERVER_%s_%s' % (section.upper(), key.upper())}], 'required': required}\n    server_def = [('url', True), ('username', False), ('password', False), ('token', False), ('auth_url', False)]\n    config_servers = []\n    for server_key in C.GALAXY_SERVER_LIST or []:\n        config_dict = dict(((k, server_config_def(server_key, k, req)) for k, req in server_def))\n        defs = AnsibleLoader(yaml.safe_dump(config_dict)).get_single_data()\n        C.config.initialize_plugin_configuration_definitions('galaxy_server', server_key, defs)\n        server_options = C.config.get_plugin_options('galaxy_server', server_key)\n        auth_url = server_options.pop('auth_url', None)\n        token_val = server_options['token'] or NoTokenSentinel\n        username = server_options['username']\n        server_options['token'] = None\n        if username:\n            server_options['token'] = BasicAuthToken(username, server_options['password'])\n        elif token_val:\n            if auth_url:\n                server_options['token'] = KeycloakToken(access_token=token_val, auth_url=auth_url, validate_certs=not context.CLIARGS['ignore_certs'])\n            else:\n                server_options['token'] = GalaxyToken(token=token_val)\n        config_servers.append(GalaxyAPI(self.galaxy, server_key, **server_options))\n    cmd_server = context.CLIARGS['api_server']\n    cmd_token = GalaxyToken(token=context.CLIARGS['api_key'])\n    if cmd_server:\n        config_server = next((s for s in config_servers if s.name == cmd_server), None)\n        if config_server:\n            self.api_servers.append(config_server)\n        else:\n            self.api_servers.append(GalaxyAPI(self.galaxy, 'cmd_arg', cmd_server, token=cmd_token))\n    else:\n        self.api_servers = config_servers\n    if len(self.api_servers) == 0:\n        self.api_servers.append(GalaxyAPI(self.galaxy, 'default', C.GALAXY_SERVER, token=cmd_token))\n    context.CLIARGS['func']()",
                            "@property\ndef api(self):\n    return self.api_servers[0]",
                            "def _parse_requirements_file(self, requirements_file, allow_old_format=True):\n    \"\"\"\n    Parses an Ansible requirement.yml file and returns all the roles and/or collections defined in it. There are 2\n    requirements file format:\n\n        # v1 (roles only)\n        - src: The source of the role, required if include is not set. Can be Galaxy role name, URL to a SCM repo or tarball.\n          name: Downloads the role to the specified name, defaults to Galaxy name from Galaxy or name of repo if src is a URL.\n          scm: If src is a URL, specify the SCM. Only git or hd are supported and defaults ot git.\n          version: The version of the role to download. Can also be tag, commit, or branch name and defaults to master.\n          include: Path to additional requirements.yml files.\n\n        # v2 (roles and collections)\n        ---\n        roles:\n        # Same as v1 format just under the roles key\n\n        collections:\n        - namespace.collection\n        - name: namespace.collection\n          version: version identifier, multiple identifiers are separated by ','\n          source: the URL or a predefined source name that relates to C.GALAXY_SERVER_LIST\n\n    :param requirements_file: The path to the requirements file.\n    :param allow_old_format: Will fail if a v1 requirements file is found and this is set to False.\n    :return: a dict containing roles and collections to found in the requirements file.\n    \"\"\"\n    requirements = {'roles': [], 'collections': []}\n    b_requirements_file = to_bytes(requirements_file, errors='surrogate_or_strict')\n    if not os.path.exists(b_requirements_file):\n        raise AnsibleError(\"The requirements file '%s' does not exist.\" % to_native(requirements_file))\n    display.vvv(\"Reading requirement file at '%s'\" % requirements_file)\n    with open(b_requirements_file, 'rb') as req_obj:\n        try:\n            file_requirements = yaml.safe_load(req_obj)\n        except YAMLError as err:\n            raise AnsibleError(\"Failed to parse the requirements yml at '%s' with the following error:\\n%s\" % (to_native(requirements_file), to_native(err)))\n    if requirements_file is None:\n        raise AnsibleError(\"No requirements found in file '%s'\" % to_native(requirements_file))\n\n    def parse_role_req(requirement):\n        if 'include' not in requirement:\n            role = RoleRequirement.role_yaml_parse(requirement)\n            display.vvv('found role %s in yaml file' % to_text(role))\n            if 'name' not in role and 'src' not in role:\n                raise AnsibleError('Must specify name or src for role')\n            return [GalaxyRole(self.galaxy, self.api, **role)]\n        else:\n            b_include_path = to_bytes(requirement['include'], errors='surrogate_or_strict')\n            if not os.path.isfile(b_include_path):\n                raise AnsibleError(\"Failed to find include requirements file '%s' in '%s'\" % (to_native(b_include_path), to_native(requirements_file)))\n            with open(b_include_path, 'rb') as f_include:\n                try:\n                    return [GalaxyRole(self.galaxy, self.api, **r) for r in (RoleRequirement.role_yaml_parse(i) for i in yaml.safe_load(f_include))]\n                except Exception as e:\n                    raise AnsibleError('Unable to load data from include requirements file: %s %s' % (to_native(requirements_file), to_native(e)))\n    if isinstance(file_requirements, list):\n        if not allow_old_format:\n            raise AnsibleError(\"Expecting requirements file to be a dict with the key 'collections' that contains a list of collections to install\")\n        for role_req in file_requirements:\n            requirements['roles'] += parse_role_req(role_req)\n    else:\n        extra_keys = set(file_requirements.keys()).difference(set(['roles', 'collections']))\n        if extra_keys:\n            raise AnsibleError(\"Expecting only 'roles' and/or 'collections' as base keys in the requirements file. Found: %s\" % to_native(', '.join(extra_keys)))\n        for role_req in file_requirements.get('roles', []):\n            requirements['roles'] += parse_role_req(role_req)\n        for collection_req in file_requirements.get('collections', []):\n            if isinstance(collection_req, dict):\n                req_name = collection_req.get('name', None)\n                if req_name is None:\n                    raise AnsibleError('Collections requirement entry should contain the key name.')\n                req_version = collection_req.get('version', '*')\n                req_source = collection_req.get('source', None)\n                if req_source:\n                    req_source = next(iter([a for a in self.api_servers if req_source in [a.name, a.api_server]]), GalaxyAPI(self.galaxy, 'explicit_requirement_%s' % req_name, req_source))\n                requirements['collections'].append((req_name, req_version, req_source))\n            else:\n                requirements['collections'].append((collection_req, '*', None))\n    return requirements",
                            "@staticmethod\ndef exit_without_ignore(rc=1):\n    \"\"\"\n    Exits with the specified return code unless the\n    option --ignore-errors was specified\n    \"\"\"\n    if not context.CLIARGS['ignore_errors']:\n        raise AnsibleError('- you can use --ignore-errors to skip failed roles and finish processing the list.')",
                            "@staticmethod\ndef _display_role_info(role_info):\n    text = [u'', u'Role: %s' % to_text(role_info['name'])]\n    text.append(u'\\tdescription: %s' % role_info.get('description', ''))\n    for k in sorted(role_info.keys()):\n        if k in GalaxyCLI.SKIP_INFO_KEYS:\n            continue\n        if isinstance(role_info[k], dict):\n            text.append(u'\\t%s:' % k)\n            for key in sorted(role_info[k].keys()):\n                if key in GalaxyCLI.SKIP_INFO_KEYS:\n                    continue\n                text.append(u'\\t\\t%s: %s' % (key, role_info[k][key]))\n        else:\n            text.append(u'\\t%s: %s' % (k, role_info[k]))\n    return u'\\n'.join(text)",
                            "@staticmethod\ndef _resolve_path(path):\n    return os.path.abspath(os.path.expanduser(os.path.expandvars(path)))",
                            "@staticmethod\ndef _get_skeleton_galaxy_yml(template_path, inject_data):\n    with open(to_bytes(template_path, errors='surrogate_or_strict'), 'rb') as template_obj:\n        meta_template = to_text(template_obj.read(), errors='surrogate_or_strict')\n    galaxy_meta = get_collections_galaxy_meta_info()\n    required_config = []\n    optional_config = []\n    for meta_entry in galaxy_meta:\n        config_list = required_config if meta_entry.get('required', False) else optional_config\n        value = inject_data.get(meta_entry['key'], None)\n        if not value:\n            meta_type = meta_entry.get('type', 'str')\n            if meta_type == 'str':\n                value = ''\n            elif meta_type == 'list':\n                value = []\n            elif meta_type == 'dict':\n                value = {}\n        meta_entry['value'] = value\n        config_list.append(meta_entry)\n    link_pattern = re.compile('L\\\\(([^)]+),\\\\s+([^)]+)\\\\)')\n    const_pattern = re.compile('C\\\\(([^)]+)\\\\)')\n\n    def comment_ify(v):\n        if isinstance(v, list):\n            v = '. '.join([l.rstrip('.') for l in v])\n        v = link_pattern.sub('\\\\1 <\\\\2>', v)\n        v = const_pattern.sub(\"'\\\\1'\", v)\n        return textwrap.fill(v, width=117, initial_indent='# ', subsequent_indent='# ', break_on_hyphens=False)\n\n    def to_yaml(v):\n        return yaml.safe_dump(v, default_flow_style=False).rstrip()\n    env = Environment(loader=BaseLoader)\n    env.filters['comment_ify'] = comment_ify\n    env.filters['to_yaml'] = to_yaml\n    template = env.from_string(meta_template)\n    meta_value = template.render({'required_config': required_config, 'optional_config': optional_config})\n    return meta_value",
                            "def execute_role(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy role. Must be combined with a further action like delete/install/init\n    as listed below.\n    \"\"\"\n    pass",
                            "def execute_collection(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy collection. Must be combined with a further action like init/install as\n    listed below.\n    \"\"\"\n    pass",
                            "def execute_build(self):\n    \"\"\"\n    Build an Ansible Galaxy collection artifact that can be stored in a central repository like Ansible Galaxy.\n    By default, this command builds from the current working directory. You can optionally pass in the\n    collection input path (where the ``galaxy.yml`` file is).\n    \"\"\"\n    force = context.CLIARGS['force']\n    output_path = GalaxyCLI._resolve_path(context.CLIARGS['output_path'])\n    b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n    if not os.path.exists(b_output_path):\n        os.makedirs(b_output_path)\n    elif os.path.isfile(b_output_path):\n        raise AnsibleError('- the output collection directory %s is a file - aborting' % to_native(output_path))\n    for collection_path in context.CLIARGS['args']:\n        collection_path = GalaxyCLI._resolve_path(collection_path)\n        build_collection(collection_path, output_path, force)",
                            "def execute_init(self):\n    \"\"\"\n    Creates the skeleton framework of a role or collection that complies with the Galaxy metadata format.\n    Requires a role or collection name. The collection name must be in the format ``<namespace>.<collection>``.\n    \"\"\"\n    galaxy_type = context.CLIARGS['type']\n    init_path = context.CLIARGS['init_path']\n    force = context.CLIARGS['force']\n    obj_skeleton = context.CLIARGS['{0}_skeleton'.format(galaxy_type)]\n    obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]\n    inject_data = dict(description='your {0} description'.format(galaxy_type), ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'))\n    if galaxy_type == 'role':\n        inject_data.update(dict(author='your name', company='your company (optional)', license='license (GPL-2.0-or-later, MIT, etc)', role_name=obj_name, role_type=context.CLIARGS['role_type'], issue_tracker_url='http://example.com/issue/tracker', repository_url='http://example.com/repository', documentation_url='http://docs.example.com', homepage_url='http://example.com', min_ansible_version=ansible_version[:3]))\n        obj_path = os.path.join(init_path, obj_name)\n    elif galaxy_type == 'collection':\n        namespace, collection_name = obj_name.split('.', 1)\n        inject_data.update(dict(namespace=namespace, collection_name=collection_name, version='1.0.0', readme='README.md', authors=['your name <example@domain.com>'], license=['GPL-2.0-or-later'], repository='http://example.com/repository', documentation='http://docs.example.com', homepage='http://example.com', issues='http://example.com/issue/tracker', build_ignore=[]))\n        obj_path = os.path.join(init_path, namespace, collection_name)\n    b_obj_path = to_bytes(obj_path, errors='surrogate_or_strict')\n    if os.path.exists(b_obj_path):\n        if os.path.isfile(obj_path):\n            raise AnsibleError('- the path %s already exists, but is a file - aborting' % to_native(obj_path))\n        elif not force:\n            raise AnsibleError('- the directory %s already exists. You can use --force to re-initialize this directory,\\nhowever it will reset any main.yml files that may have\\nbeen modified there already.' % to_native(obj_path))\n    if obj_skeleton is not None:\n        own_skeleton = False\n        skeleton_ignore_expressions = C.GALAXY_ROLE_SKELETON_IGNORE\n    else:\n        own_skeleton = True\n        obj_skeleton = self.galaxy.default_role_skeleton_path\n        skeleton_ignore_expressions = ['^.*/.git_keep$']\n    obj_skeleton = os.path.expanduser(obj_skeleton)\n    skeleton_ignore_re = [re.compile(x) for x in skeleton_ignore_expressions]\n    if not os.path.exists(obj_skeleton):\n        raise AnsibleError(\"- the skeleton path '{0}' does not exist, cannot init {1}\".format(to_native(obj_skeleton), galaxy_type))\n    template_env = Environment(loader=FileSystemLoader(obj_skeleton))\n    if not os.path.exists(b_obj_path):\n        os.makedirs(b_obj_path)\n    for root, dirs, files in os.walk(obj_skeleton, topdown=True):\n        rel_root = os.path.relpath(root, obj_skeleton)\n        rel_dirs = rel_root.split(os.sep)\n        rel_root_dir = rel_dirs[0]\n        if galaxy_type == 'collection':\n            in_templates_dir = rel_root_dir in ['playbooks', 'roles'] and 'templates' in rel_dirs\n        else:\n            in_templates_dir = rel_root_dir == 'templates'\n        dirs[:] = [d for d in dirs if not any((r.match(d) for r in skeleton_ignore_re))]\n        for f in files:\n            filename, ext = os.path.splitext(f)\n            if any((r.match(os.path.join(rel_root, f)) for r in skeleton_ignore_re)):\n                continue\n            elif galaxy_type == 'collection' and own_skeleton and (rel_root == '.') and (f == 'galaxy.yml.j2'):\n                template_data = inject_data.copy()\n                template_data['name'] = template_data.pop('collection_name')\n                meta_value = GalaxyCLI._get_skeleton_galaxy_yml(os.path.join(root, rel_root, f), template_data)\n                b_dest_file = to_bytes(os.path.join(obj_path, rel_root, filename), errors='surrogate_or_strict')\n                with open(b_dest_file, 'wb') as galaxy_obj:\n                    galaxy_obj.write(to_bytes(meta_value, errors='surrogate_or_strict'))\n            elif ext == '.j2' and (not in_templates_dir):\n                src_template = os.path.join(rel_root, f)\n                dest_file = os.path.join(obj_path, rel_root, filename)\n                template_env.get_template(src_template).stream(inject_data).dump(dest_file, encoding='utf-8')\n            else:\n                f_rel_path = os.path.relpath(os.path.join(root, f), obj_skeleton)\n                shutil.copyfile(os.path.join(root, f), os.path.join(obj_path, f_rel_path))\n        for d in dirs:\n            b_dir_path = to_bytes(os.path.join(obj_path, rel_root, d), errors='surrogate_or_strict')\n            if not os.path.exists(b_dir_path):\n                os.makedirs(b_dir_path)\n    display.display('- %s %s was created successfully' % (galaxy_type.title(), obj_name))",
                            "def execute_info(self):\n    \"\"\"\n    prints out detailed information about an installed role as well as info available from the galaxy API.\n    \"\"\"\n    roles_path = context.CLIARGS['roles_path']\n    data = ''\n    for role in context.CLIARGS['args']:\n        role_info = {'path': roles_path}\n        gr = GalaxyRole(self.galaxy, self.api, role)\n        install_info = gr.install_info\n        if install_info:\n            if 'version' in install_info:\n                install_info['installed_version'] = install_info['version']\n                del install_info['version']\n            role_info.update(install_info)\n        remote_data = False\n        if not context.CLIARGS['offline']:\n            remote_data = self.api.lookup_role_by_name(role, False)\n        if remote_data:\n            role_info.update(remote_data)\n        if gr.metadata:\n            role_info.update(gr.metadata)\n        req = RoleRequirement()\n        role_spec = req.role_yaml_parse({'role': role})\n        if role_spec:\n            role_info.update(role_spec)\n        data = self._display_role_info(role_info)\n        if not data:\n            data = u'\\n- the role %s was not found' % role\n    self.pager(data)",
                            "def execute_install(self):\n    \"\"\"\n    Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n    You can pass in a list (roles or collections) or use the file\n    option listed below (these are mutually exclusive). If you pass in a list, it\n    can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n    \"\"\"\n    if context.CLIARGS['type'] == 'collection':\n        collections = context.CLIARGS['args']\n        force = context.CLIARGS['force']\n        output_path = context.CLIARGS['collections_path']\n        ignore_certs = context.CLIARGS['ignore_certs']\n        ignore_errors = context.CLIARGS['ignore_errors']\n        requirements_file = context.CLIARGS['requirements']\n        no_deps = context.CLIARGS['no_deps']\n        force_deps = context.CLIARGS['force_with_deps']\n        if collections and requirements_file:\n            raise AnsibleError('The positional collection_name arg and --requirements-file are mutually exclusive.')\n        elif not collections and (not requirements_file):\n            raise AnsibleError('You must specify a collection name or a requirements file.')\n        if requirements_file:\n            requirements_file = GalaxyCLI._resolve_path(requirements_file)\n            requirements = self._parse_requirements_file(requirements_file, allow_old_format=False)['collections']\n        else:\n            requirements = []\n            for collection_input in collections:\n                name, dummy, requirement = collection_input.partition(':')\n                requirements.append((name, requirement or '*', None))\n        output_path = GalaxyCLI._resolve_path(output_path)\n        collections_path = C.COLLECTIONS_PATHS\n        if len([p for p in collections_path if p.startswith(output_path)]) == 0:\n            display.warning(\"The specified collections path '%s' is not part of the configured Ansible collections paths '%s'. The installed collection won't be picked up in an Ansible run.\" % (to_text(output_path), to_text(':'.join(collections_path))))\n        if os.path.split(output_path)[1] != 'ansible_collections':\n            output_path = os.path.join(output_path, 'ansible_collections')\n        b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n        if not os.path.exists(b_output_path):\n            os.makedirs(b_output_path)\n        install_collections(requirements, output_path, self.api_servers, not ignore_certs, ignore_errors, no_deps, force, force_deps)\n        return 0\n    role_file = context.CLIARGS['role_file']\n    if not context.CLIARGS['args'] and role_file is None:\n        raise AnsibleOptionsError('- you must specify a user/role name or a roles file')\n    no_deps = context.CLIARGS['no_deps']\n    force_deps = context.CLIARGS['force_with_deps']\n    force = context.CLIARGS['force'] or force_deps\n    roles_left = []\n    if role_file:\n        if not (role_file.endswith('.yaml') or role_file.endswith('.yml')):\n            raise AnsibleError('Invalid role requirements file, it must end with a .yml or .yaml extension')\n        roles_left = self._parse_requirements_file(role_file)['roles']\n    else:\n        for rname in context.CLIARGS['args']:\n            role = RoleRequirement.role_yaml_parse(rname.strip())\n            roles_left.append(GalaxyRole(self.galaxy, self.api, **role))\n    for role in roles_left:\n        if role_file and context.CLIARGS['args'] and (role.name not in context.CLIARGS['args']):\n            display.vvv('Skipping role %s' % role.name)\n            continue\n        display.vvv('Processing role %s ' % role.name)\n        if role.install_info is not None:\n            if role.install_info['version'] != role.version or force:\n                if force:\n                    display.display('- changing role %s from %s to %s' % (role.name, role.install_info['version'], role.version or 'unspecified'))\n                    role.remove()\n                else:\n                    display.warning('- %s (%s) is already installed - use --force to change version to %s' % (role.name, role.install_info['version'], role.version or 'unspecified'))\n                    continue\n            elif not force:\n                display.display('- %s is already installed, skipping.' % str(role))\n                continue\n        try:\n            installed = role.install()\n        except AnsibleError as e:\n            display.warning(u'- %s was NOT installed successfully: %s ' % (role.name, to_text(e)))\n            self.exit_without_ignore()\n            continue\n        if not no_deps and installed:\n            if not role.metadata:\n                display.warning('Meta file %s is empty. Skipping dependencies.' % role.path)\n            else:\n                role_dependencies = role.metadata.get('dependencies') or []\n                for dep in role_dependencies:\n                    display.debug('Installing dep %s' % dep)\n                    dep_req = RoleRequirement()\n                    dep_info = dep_req.role_yaml_parse(dep)\n                    dep_role = GalaxyRole(self.galaxy, self.api, **dep_info)\n                    if '.' not in dep_role.name and '.' not in dep_role.src and (dep_role.scm is None):\n                        continue\n                    if dep_role.install_info is None:\n                        if dep_role not in roles_left:\n                            display.display('- adding dependency: %s' % to_text(dep_role))\n                            roles_left.append(dep_role)\n                        else:\n                            display.display('- dependency %s already pending installation.' % dep_role.name)\n                    elif dep_role.install_info['version'] != dep_role.version:\n                        if force_deps:\n                            display.display('- changing dependant role %s from %s to %s' % (dep_role.name, dep_role.install_info['version'], dep_role.version or 'unspecified'))\n                            dep_role.remove()\n                            roles_left.append(dep_role)\n                        else:\n                            display.warning('- dependency %s (%s) from role %s differs from already installed version (%s), skipping' % (to_text(dep_role), dep_role.version, role.name, dep_role.install_info['version']))\n                    elif force_deps:\n                        roles_left.append(dep_role)\n                    else:\n                        display.display('- dependency %s is already installed, skipping.' % dep_role.name)\n        if not installed:\n            display.warning('- %s was NOT installed successfully.' % role.name)\n            self.exit_without_ignore()\n    return 0",
                            "def execute_remove(self):\n    \"\"\"\n    removes the list of roles passed as arguments from the local system.\n    \"\"\"\n    if not context.CLIARGS['args']:\n        raise AnsibleOptionsError('- you must specify at least one role to remove.')\n    for role_name in context.CLIARGS['args']:\n        role = GalaxyRole(self.galaxy, self.api, role_name)\n        try:\n            if role.remove():\n                display.display('- successfully removed %s' % role_name)\n            else:\n                display.display('- %s is not installed, skipping.' % role_name)\n        except Exception as e:\n            raise AnsibleError('Failed to remove role %s: %s' % (role_name, to_native(e)))\n    return 0",
                            "def execute_list(self):\n    \"\"\"\n    lists the roles installed on the local system or matches a single role passed as an argument.\n    \"\"\"\n\n    def _display_role(gr):\n        install_info = gr.install_info\n        version = None\n        if install_info:\n            version = install_info.get('version', None)\n        if not version:\n            version = '(unknown version)'\n        display.display('- %s, %s' % (gr.name, version))\n    if context.CLIARGS['role']:\n        name = context.CLIARGS['role']\n        gr = GalaxyRole(self.galaxy, self.api, name)\n        if gr.metadata:\n            display.display('# %s' % os.path.dirname(gr.path))\n            _display_role(gr)\n        else:\n            display.display('- the role %s was not found' % name)\n    else:\n        roles_path = context.CLIARGS['roles_path']\n        path_found = False\n        warnings = []\n        for path in roles_path:\n            role_path = os.path.expanduser(path)\n            if not os.path.exists(role_path):\n                warnings.append('- the configured path %s does not exist.' % role_path)\n                continue\n            elif not os.path.isdir(role_path):\n                warnings.append('- the configured path %s, exists, but it is not a directory.' % role_path)\n                continue\n            display.display('# %s' % role_path)\n            path_files = os.listdir(role_path)\n            path_found = True\n            for path_file in path_files:\n                gr = GalaxyRole(self.galaxy, self.api, path_file, path=path)\n                if gr.metadata:\n                    _display_role(gr)\n        for w in warnings:\n            display.warning(w)\n        if not path_found:\n            raise AnsibleOptionsError('- None of the provided paths was usable. Please specify a valid path with --roles-path')\n    return 0",
                            "def execute_publish(self):\n    \"\"\"\n    Publish a collection into Ansible Galaxy. Requires the path to the collection tarball to publish.\n    \"\"\"\n    collection_path = GalaxyCLI._resolve_path(context.CLIARGS['args'])\n    wait = context.CLIARGS['wait']\n    timeout = context.CLIARGS['import_timeout']\n    publish_collection(collection_path, self.api, wait, timeout)",
                            "def execute_search(self):\n    \"\"\" searches for roles on the Ansible Galaxy server\"\"\"\n    page_size = 1000\n    search = None\n    if context.CLIARGS['args']:\n        search = '+'.join(context.CLIARGS['args'])\n    if not search and (not context.CLIARGS['platforms']) and (not context.CLIARGS['galaxy_tags']) and (not context.CLIARGS['author']):\n        raise AnsibleError('Invalid query. At least one search term, platform, galaxy tag or author must be provided.')\n    response = self.api.search_roles(search, platforms=context.CLIARGS['platforms'], tags=context.CLIARGS['galaxy_tags'], author=context.CLIARGS['author'], page_size=page_size)\n    if response['count'] == 0:\n        display.display('No roles match your search.', color=C.COLOR_ERROR)\n        return True\n    data = [u'']\n    if response['count'] > page_size:\n        data.append(u'Found %d roles matching your search. Showing first %s.' % (response['count'], page_size))\n    else:\n        data.append(u'Found %d roles matching your search:' % response['count'])\n    max_len = []\n    for role in response['results']:\n        max_len.append(len(role['username'] + '.' + role['name']))\n    name_len = max(max_len)\n    format_str = u' %%-%ds %%s' % name_len\n    data.append(u'')\n    data.append(format_str % (u'Name', u'Description'))\n    data.append(format_str % (u'----', u'-----------'))\n    for role in response['results']:\n        data.append(format_str % (u'%s.%s' % (role['username'], role['name']), role['description']))\n    data = u'\\n'.join(data)\n    self.pager(data)\n    return True",
                            "def execute_login(self):\n    \"\"\"\n    verify user's identify via Github and retrieve an auth token from Ansible Galaxy.\n    \"\"\"\n    if context.CLIARGS['token'] is None:\n        if C.GALAXY_TOKEN:\n            github_token = C.GALAXY_TOKEN\n        else:\n            login = GalaxyLogin(self.galaxy)\n            github_token = login.create_github_token()\n    else:\n        github_token = context.CLIARGS['token']\n    galaxy_response = self.api.authenticate(github_token)\n    if context.CLIARGS['token'] is None and C.GALAXY_TOKEN is None:\n        login.remove_github_token()\n    token = GalaxyToken()\n    token.set(galaxy_response['token'])\n    display.display('Successfully logged into Galaxy as %s' % galaxy_response['username'])\n    return 0",
                            "def execute_import(self):\n    \"\"\" used to import a role into Ansible Galaxy \"\"\"\n    colors = {'INFO': 'normal', 'WARNING': C.COLOR_WARN, 'ERROR': C.COLOR_ERROR, 'SUCCESS': C.COLOR_OK, 'FAILED': C.COLOR_ERROR}\n    github_user = to_text(context.CLIARGS['github_user'], errors='surrogate_or_strict')\n    github_repo = to_text(context.CLIARGS['github_repo'], errors='surrogate_or_strict')\n    if context.CLIARGS['check_status']:\n        task = self.api.get_import_task(github_user=github_user, github_repo=github_repo)\n    else:\n        task = self.api.create_import_task(github_user, github_repo, reference=context.CLIARGS['reference'], role_name=context.CLIARGS['role_name'])\n        if len(task) > 1:\n            display.display('WARNING: More than one Galaxy role associated with Github repo %s/%s.' % (github_user, github_repo), color='yellow')\n            display.display('The following Galaxy roles are being updated:' + u'\\n', color=C.COLOR_CHANGED)\n            for t in task:\n                display.display('%s.%s' % (t['summary_fields']['role']['namespace'], t['summary_fields']['role']['name']), color=C.COLOR_CHANGED)\n            display.display(u'\\nTo properly namespace this role, remove each of the above and re-import %s/%s from scratch' % (github_user, github_repo), color=C.COLOR_CHANGED)\n            return 0\n        display.display('Successfully submitted import request %d' % task[0]['id'])\n        if not context.CLIARGS['wait']:\n            display.display('Role name: %s' % task[0]['summary_fields']['role']['name'])\n            display.display('Repo: %s/%s' % (task[0]['github_user'], task[0]['github_repo']))\n    if context.CLIARGS['check_status'] or context.CLIARGS['wait']:\n        msg_list = []\n        finished = False\n        while not finished:\n            task = self.api.get_import_task(task_id=task[0]['id'])\n            for msg in task[0]['summary_fields']['task_messages']:\n                if msg['id'] not in msg_list:\n                    display.display(msg['message_text'], color=colors[msg['message_type']])\n                    msg_list.append(msg['id'])\n            if task[0]['state'] in ['SUCCESS', 'FAILED']:\n                finished = True\n            else:\n                time.sleep(10)\n    return 0",
                            "def execute_setup(self):\n    \"\"\" Setup an integration from Github or Travis for Ansible Galaxy roles\"\"\"\n    if context.CLIARGS['setup_list']:\n        secrets = self.api.list_secrets()\n        if len(secrets) == 0:\n            display.display('No integrations found.')\n            return 0\n        display.display(u'\\n' + 'ID         Source     Repo', color=C.COLOR_OK)\n        display.display('---------- ---------- ----------', color=C.COLOR_OK)\n        for secret in secrets:\n            display.display('%-10s %-10s %s/%s' % (secret['id'], secret['source'], secret['github_user'], secret['github_repo']), color=C.COLOR_OK)\n        return 0\n    if context.CLIARGS['remove_id']:\n        self.api.remove_secret(context.CLIARGS['remove_id'])\n        display.display('Secret removed. Integrations using this secret will not longer work.', color=C.COLOR_OK)\n        return 0\n    source = context.CLIARGS['source']\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    secret = context.CLIARGS['secret']\n    resp = self.api.add_secret(source, github_user, github_repo, secret)\n    display.display('Added integration for %s %s/%s' % (resp['source'], resp['github_user'], resp['github_repo']))\n    return 0",
                            "def execute_delete(self):\n    \"\"\" Delete a role from Ansible Galaxy. \"\"\"\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    resp = self.api.delete_role(github_user, github_repo)\n    if len(resp['deleted_roles']) > 1:\n        display.display('Deleted the following roles:')\n        display.display('ID     User            Name')\n        display.display('------ --------------- ----------')\n        for role in resp['deleted_roles']:\n            display.display('%-8s %-15s %s' % (role.id, role.namespace, role.name))\n    display.display(resp['status'])\n    return True",
                            "def server_config_def(section, key, required):\n    return {'description': 'The %s of the %s Galaxy server' % (key, section), 'ini': [{'section': 'galaxy_server.%s' % section, 'key': key}], 'env': [{'name': 'ANSIBLE_GALAXY_SERVER_%s_%s' % (section.upper(), key.upper())}], 'required': required}",
                            "def parse_role_req(requirement):\n    if 'include' not in requirement:\n        role = RoleRequirement.role_yaml_parse(requirement)\n        display.vvv('found role %s in yaml file' % to_text(role))\n        if 'name' not in role and 'src' not in role:\n            raise AnsibleError('Must specify name or src for role')\n        return [GalaxyRole(self.galaxy, self.api, **role)]\n    else:\n        b_include_path = to_bytes(requirement['include'], errors='surrogate_or_strict')\n        if not os.path.isfile(b_include_path):\n            raise AnsibleError(\"Failed to find include requirements file '%s' in '%s'\" % (to_native(b_include_path), to_native(requirements_file)))\n        with open(b_include_path, 'rb') as f_include:\n            try:\n                return [GalaxyRole(self.galaxy, self.api, **r) for r in (RoleRequirement.role_yaml_parse(i) for i in yaml.safe_load(f_include))]\n            except Exception as e:\n                raise AnsibleError('Unable to load data from include requirements file: %s %s' % (to_native(requirements_file), to_native(e)))",
                            "def comment_ify(v):\n    if isinstance(v, list):\n        v = '. '.join([l.rstrip('.') for l in v])\n    v = link_pattern.sub('\\\\1 <\\\\2>', v)\n    v = const_pattern.sub(\"'\\\\1'\", v)\n    return textwrap.fill(v, width=117, initial_indent='# ', subsequent_indent='# ', break_on_hyphens=False)",
                            "def to_yaml(v):\n    return yaml.safe_dump(v, default_flow_style=False).rstrip()",
                            "def _display_role(gr):\n    install_info = gr.install_info\n    version = None\n    if install_info:\n        version = install_info.get('version', None)\n    if not version:\n        version = '(unknown version)'\n    display.display('- %s, %s' % (gr.name, version))"
                        ],
                        "constructor_variables": [
                            "idx",
                            "galaxy",
                            "api_servers"
                        ],
                        "class_level_variables": [
                            "SKIP_INFO_KEYS"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, args)",
                            "init_parser(self)",
                            "add_init_options(self, parser, parents=None)",
                            "add_remove_options(self, parser, parents=None)",
                            "add_delete_options(self, parser, parents=None)",
                            "add_list_options(self, parser, parents=None)",
                            "add_search_options(self, parser, parents=None)",
                            "add_import_options(self, parser, parents=None)",
                            "add_setup_options(self, parser, parents=None)",
                            "add_login_options(self, parser, parents=None)",
                            "add_info_options(self, parser, parents=None)",
                            "add_install_options(self, parser, parents=None)",
                            "add_build_options(self, parser, parents=None)",
                            "add_publish_options(self, parser, parents=None)",
                            "post_process_args(self, options)",
                            "run(self)",
                            "api(self)",
                            "_parse_requirements_file(self, requirements_file, allow_old_format=True)",
                            "exit_without_ignore(rc=1)",
                            "_display_role_info(role_info)",
                            "_resolve_path(path)",
                            "_get_skeleton_galaxy_yml(template_path, inject_data)",
                            "execute_role(self)",
                            "execute_collection(self)",
                            "execute_build(self)",
                            "execute_init(self)",
                            "execute_info(self)",
                            "execute_install(self)",
                            "execute_remove(self)",
                            "execute_list(self)",
                            "execute_publish(self)",
                            "execute_search(self)",
                            "execute_login(self)",
                            "execute_import(self)",
                            "execute_setup(self)",
                            "execute_delete(self)",
                            "server_config_def(section, key, required)",
                            "parse_role_req(requirement)",
                            "comment_ify(v)",
                            "to_yaml(v)",
                            "_display_role(gr)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "context.CLIARGS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ignore_certs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ignore_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "no_deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force_deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI._resolve_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_requirements_file": {
                                    "variable_value": "<bound method GalaxyCLI._parse_requirements_file of <ansible.cli.galaxy.GalaxyCLI object at 0x107dbb0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x107dbb0d0>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "collection_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_input.partition": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.COLLECTIONS_PATHS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_text": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_output_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.makedirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.api_servers": {
                                    "variable_value": "[<ansible.galaxy.api.GalaxyAPI object at 0x107dc2150>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "role_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleOptionsError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_file.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyRole": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.galaxy": {
                                    "variable_value": "<ansible.galaxy.Galaxy object at 0x1077cff50>",
                                    "variable_type": "Galaxy",
                                    "variable_shape": null
                                },
                                "self.api": {
                                    "variable_value": "<ansible.galaxy.api.GalaxyAPI object at 0x107dc2150>",
                                    "variable_type": "GalaxyAPI",
                                    "variable_shape": null
                                },
                                "role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.vvv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "installed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.exit_without_ignore": {
                                    "variable_value": "<function GalaxyCLI.exit_without_ignore at 0x107d11d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "role.metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.metadata.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.src": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.scm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "context.CLIARGS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": "('https://foo/bar/foo-bar-v1.0.0.tar.gz',)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "force": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_path": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-290/test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Output0/ansible_collections'",
                                    "variable_type": "str",
                                    "variable_shape": "124"
                                },
                                "ignore_certs": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ignore_errors": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "requirements_file": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "no_deps": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "force_deps": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI._resolve_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements": {
                                    "variable_value": "[('https', '//foo/bar/foo-bar-v1.0.0.tar.gz', None)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._parse_requirements_file": {
                                    "variable_value": "<bound method GalaxyCLI._parse_requirements_file of <ansible.cli.galaxy.GalaxyCLI object at 0x107dbb0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x107dbb0d0>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "collection_input": {
                                    "variable_value": "'https://foo/bar/foo-bar-v1.0.0.tar.gz'",
                                    "variable_type": "str",
                                    "variable_shape": "37"
                                },
                                "name": {
                                    "variable_value": "'https'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "dummy": {
                                    "variable_value": "':'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "requirement": {
                                    "variable_value": "'//foo/bar/foo-bar-v1.0.0.tar.gz'",
                                    "variable_type": "str",
                                    "variable_shape": "31"
                                },
                                "collection_input.partition": {
                                    "variable_value": "<built-in method partition of str object at 0x1074ba0f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "requirements.append": {
                                    "variable_value": "<built-in method append of list object at 0x107d81b40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "collections_path": {
                                    "variable_value": "['/Users/jerry/.ansible/collections', '/usr/share/ansible/collections']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "C.COLLECTIONS_PATHS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_text": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_output_path": {
                                    "variable_value": "b'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-290/test-\\xc3\\x85\\xc3\\x91\\xc5\\x9a\\xc3\\x8c\\xce\\xb2\\xc5\\x81\\xc3\\x88 Output0/ansible_collections'",
                                    "variable_type": "bytes",
                                    "variable_shape": "131"
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.makedirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.api_servers": {
                                    "variable_value": "[<ansible.galaxy.api.GalaxyAPI object at 0x107dc2150>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "role_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleOptionsError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_file.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyRole": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.galaxy": {
                                    "variable_value": "<ansible.galaxy.Galaxy object at 0x1077cff50>",
                                    "variable_type": "Galaxy",
                                    "variable_shape": null
                                },
                                "self.api": {
                                    "variable_value": "<ansible.galaxy.api.GalaxyAPI object at 0x107dc2150>",
                                    "variable_type": "GalaxyAPI",
                                    "variable_shape": null
                                },
                                "role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.vvv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "installed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.exit_without_ignore": {
                                    "variable_value": "<function GalaxyCLI.exit_without_ignore at 0x107d11d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "role.metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.metadata.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.src": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.scm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "context.CLIARGS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ignore_certs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ignore_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "no_deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force_deps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI._resolve_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_requirements_file": {
                                    "variable_value": "<bound method GalaxyCLI._parse_requirements_file of <ansible.cli.galaxy.GalaxyCLI object at 0x111ab1290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x111ab1290>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "collection_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_input.partition": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.COLLECTIONS_PATHS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_text": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_output_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.makedirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.api_servers": {
                                    "variable_value": "[<ansible.galaxy.api.GalaxyAPI object at 0x111ac3b50>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "role_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleOptionsError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_file.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyRole": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.galaxy": {
                                    "variable_value": "<ansible.galaxy.Galaxy object at 0x11120dcd0>",
                                    "variable_type": "Galaxy",
                                    "variable_shape": null
                                },
                                "self.api": {
                                    "variable_value": "<ansible.galaxy.api.GalaxyAPI object at 0x111ac3b50>",
                                    "variable_type": "GalaxyAPI",
                                    "variable_shape": null
                                },
                                "role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.vvv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "installed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.exit_without_ignore": {
                                    "variable_value": "<function GalaxyCLI.exit_without_ignore at 0x111bcbef0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "role.metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.metadata.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.src": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.scm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "context.CLIARGS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": "('https://foo/bar/foo-bar-v1.0.0.tar.gz',)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "force": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_path": {
                                    "variable_value": "'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-292/test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Output0/ansible_collections'",
                                    "variable_type": "str",
                                    "variable_shape": "124"
                                },
                                "ignore_certs": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ignore_errors": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "requirements_file": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "no_deps": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "force_deps": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI._resolve_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "requirements": {
                                    "variable_value": "[('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._parse_requirements_file": {
                                    "variable_value": "<bound method GalaxyCLI._parse_requirements_file of <ansible.cli.galaxy.GalaxyCLI object at 0x111ab1290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x111ab1290>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "collection_input": {
                                    "variable_value": "'https://foo/bar/foo-bar-v1.0.0.tar.gz'",
                                    "variable_type": "str",
                                    "variable_shape": "37"
                                },
                                "requirement": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'https://foo/bar/foo-bar-v1.0.0.tar.gz'",
                                    "variable_type": "str",
                                    "variable_shape": "37"
                                },
                                "dummy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_input.partition": {
                                    "variable_value": "<built-in method partition of str object at 0x111535450>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "requirements.append": {
                                    "variable_value": "<built-in method append of list object at 0x111a87370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "collections_path": {
                                    "variable_value": "['/Users/jerry/.ansible/collections', '/usr/share/ansible/collections']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "C.COLLECTIONS_PATHS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_text": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_output_path": {
                                    "variable_value": "b'/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-292/test-\\xc3\\x85\\xc3\\x91\\xc5\\x9a\\xc3\\x8c\\xce\\xb2\\xc5\\x81\\xc3\\x88 Output0/ansible_collections'",
                                    "variable_type": "bytes",
                                    "variable_shape": "131"
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.makedirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_collections": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.api_servers": {
                                    "variable_value": "[<ansible.galaxy.api.GalaxyAPI object at 0x111ac3b50>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "role_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleOptionsError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_file.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RoleRequirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rname.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_left.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyRole": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.galaxy": {
                                    "variable_value": "<ansible.galaxy.Galaxy object at 0x11120dcd0>",
                                    "variable_type": "Galaxy",
                                    "variable_shape": null
                                },
                                "self.api": {
                                    "variable_value": "<ansible.galaxy.api.GalaxyAPI object at 0x111ac3b50>",
                                    "variable_type": "GalaxyAPI",
                                    "variable_shape": null
                                },
                                "role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.vvv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "installed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.install": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.exit_without_ignore": {
                                    "variable_value": "<function GalaxyCLI.exit_without_ignore at 0x111bcbef0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "role.metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.metadata.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_req.role_yaml_parse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.src": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.scm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.install_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dep_role.remove": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from ansible.module_utils._text import to_bytes, to_native, to_text\nfrom ansible.parsing.yaml.loader import AnsibleLoader\nfrom ansible.playbook.role.requirement import RoleRequirement\nfrom ansible.utils.display import Display\nfrom ansible.utils.plugin_docs import get_versioned_doclink\n\ndisplay = Display()",
                    "start_line": 31,
                    "end_line": 38
                }
            ],
            "inscope_functions": [
                "def __init__(self, args):\n    # Inject role into sys.argv[1] as a backwards compatibility step\n    if len(args) > 1 and args[1] not in ['-h', '--help', '--version'] and 'role' not in args and 'collection' not in args:\n        # TODO: Should we add a warning here and eventually deprecate the implicit role subcommand choice\n        # Remove this in Ansible 2.13 when we also remove -v as an option on the root parser for ansible-galaxy.\n        idx = 2 if args[1].startswith('-v') else 1\n        args.insert(idx, 'role')\n\n    self.api_servers = []\n    self.galaxy = None\n    super(GalaxyCLI, self).__init__(args)",
                "def init_parser(self):\n    ''' create an options parser for bin/ansible '''\n\n    super(GalaxyCLI, self).init_parser(\n        desc=\"Perform various Role and Collection related operations.\",\n    )\n\n    # Common arguments that apply to more than 1 action\n    common = opt_help.argparse.ArgumentParser(add_help=False)\n    common.add_argument('-s', '--server', dest='api_server', help='The Galaxy API server URL')\n    common.add_argument('--api-key', dest='api_key',\n                        help='The Ansible Galaxy API key which can be found at '\n                             'https://galaxy.ansible.com/me/preferences. You can also use ansible-galaxy login to '\n                             'retrieve this key or set the token for the GALAXY_SERVER_LIST entry.')\n    common.add_argument('-c', '--ignore-certs', action='store_true', dest='ignore_certs',\n                        default=C.GALAXY_IGNORE_CERTS, help='Ignore SSL certificate validation errors.')\n    opt_help.add_verbosity_options(common)\n\n    force = opt_help.argparse.ArgumentParser(add_help=False)\n    force.add_argument('-f', '--force', dest='force', action='store_true', default=False,\n                       help='Force overwriting an existing role or collection')\n\n    github = opt_help.argparse.ArgumentParser(add_help=False)\n    github.add_argument('github_user', help='GitHub username')\n    github.add_argument('github_repo', help='GitHub repository')\n\n    offline = opt_help.argparse.ArgumentParser(add_help=False)\n    offline.add_argument('--offline', dest='offline', default=False, action='store_true',\n                         help=\"Don't query the galaxy API when creating roles\")\n\n    default_roles_path = C.config.get_configuration_definition('DEFAULT_ROLES_PATH').get('default', '')\n    roles_path = opt_help.argparse.ArgumentParser(add_help=False)\n    roles_path.add_argument('-p', '--roles-path', dest='roles_path', type=opt_help.unfrack_path(pathsep=True),\n                            default=C.DEFAULT_ROLES_PATH, action=opt_help.PrependListAction,\n                            help='The path to the directory containing your roles. The default is the first '\n                                 'writable one configured via DEFAULT_ROLES_PATH: %s ' % default_roles_path)\n\n    # Add sub parser for the Galaxy role type (role or collection)\n    type_parser = self.parser.add_subparsers(metavar='TYPE', dest='type')\n    type_parser.required = True\n\n    # Add sub parser for the Galaxy collection actions\n    collection = type_parser.add_parser('collection', help='Manage an Ansible Galaxy collection.')\n    collection_parser = collection.add_subparsers(metavar='COLLECTION_ACTION', dest='action')\n    collection_parser.required = True\n    self.add_init_options(collection_parser, parents=[common, force])\n    self.add_build_options(collection_parser, parents=[common, force])\n    self.add_publish_options(collection_parser, parents=[common])\n    self.add_install_options(collection_parser, parents=[common, force])\n\n    # Add sub parser for the Galaxy role actions\n    role = type_parser.add_parser('role', help='Manage an Ansible Galaxy role.')\n    role_parser = role.add_subparsers(metavar='ROLE_ACTION', dest='action')\n    role_parser.required = True\n    self.add_init_options(role_parser, parents=[common, force, offline])\n    self.add_remove_options(role_parser, parents=[common, roles_path])\n    self.add_delete_options(role_parser, parents=[common, github])\n    self.add_list_options(role_parser, parents=[common, roles_path])\n    self.add_search_options(role_parser, parents=[common])\n    self.add_import_options(role_parser, parents=[common, github])\n    self.add_setup_options(role_parser, parents=[common, roles_path])\n    self.add_login_options(role_parser, parents=[common])\n    self.add_info_options(role_parser, parents=[common, roles_path, offline])\n    self.add_install_options(role_parser, parents=[common, force, roles_path])",
                "def add_init_options(self, parser, parents=None):\n    galaxy_type = 'collection' if parser.metavar == 'COLLECTION_ACTION' else 'role'\n\n    init_parser = parser.add_parser('init', parents=parents,\n                                    help='Initialize new {0} with the base structure of a '\n                                         '{0}.'.format(galaxy_type))\n    init_parser.set_defaults(func=self.execute_init)\n\n    init_parser.add_argument('--init-path', dest='init_path', default='./',\n                             help='The path in which the skeleton {0} will be created. The default is the '\n                                  'current working directory.'.format(galaxy_type))\n    init_parser.add_argument('--{0}-skeleton'.format(galaxy_type), dest='{0}_skeleton'.format(galaxy_type),\n                             default=C.GALAXY_ROLE_SKELETON,\n                             help='The path to a {0} skeleton that the new {0} should be based '\n                                  'upon.'.format(galaxy_type))\n\n    obj_name_kwargs = {}\n    if galaxy_type == 'collection':\n        obj_name_kwargs['type'] = validate_collection_name\n    init_parser.add_argument('{0}_name'.format(galaxy_type), help='{0} name'.format(galaxy_type.capitalize()),\n                             **obj_name_kwargs)\n\n    if galaxy_type == 'role':\n        init_parser.add_argument('--type', dest='role_type', action='store', default='default',\n                                 help=\"Initialize using an alternate role type. Valid types include: 'container', \"\n                                      \"'apb' and 'network'.\")",
                "def add_remove_options(self, parser, parents=None):\n    remove_parser = parser.add_parser('remove', parents=parents, help='Delete roles from roles_path.')\n    remove_parser.set_defaults(func=self.execute_remove)\n\n    remove_parser.add_argument('args', help='Role(s)', metavar='role', nargs='+')",
                "def add_delete_options(self, parser, parents=None):\n    delete_parser = parser.add_parser('delete', parents=parents,\n                                      help='Removes the role from Galaxy. It does not remove or alter the actual '\n                                           'GitHub repository.')\n    delete_parser.set_defaults(func=self.execute_delete)",
                "def add_list_options(self, parser, parents=None):\n    list_parser = parser.add_parser('list', parents=parents,\n                                    help='Show the name and version of each role installed in the roles_path.')\n    list_parser.set_defaults(func=self.execute_list)\n\n    list_parser.add_argument('role', help='Role', nargs='?', metavar='role')",
                "def add_search_options(self, parser, parents=None):\n    search_parser = parser.add_parser('search', parents=parents,\n                                      help='Search the Galaxy database by tags, platforms, author and multiple '\n                                           'keywords.')\n    search_parser.set_defaults(func=self.execute_search)\n\n    search_parser.add_argument('--platforms', dest='platforms', help='list of OS platforms to filter by')\n    search_parser.add_argument('--galaxy-tags', dest='galaxy_tags', help='list of galaxy tags to filter by')\n    search_parser.add_argument('--author', dest='author', help='GitHub username')\n    search_parser.add_argument('args', help='Search terms', metavar='searchterm', nargs='*')",
                "def add_import_options(self, parser, parents=None):\n    import_parser = parser.add_parser('import', parents=parents, help='Import a role')\n    import_parser.set_defaults(func=self.execute_import)\n\n    import_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True,\n                               help=\"Don't wait for import results.\")\n    import_parser.add_argument('--branch', dest='reference',\n                               help='The name of a branch to import. Defaults to the repository\\'s default branch '\n                                    '(usually master)')\n    import_parser.add_argument('--role-name', dest='role_name',\n                               help='The name the role should have, if different than the repo name')\n    import_parser.add_argument('--status', dest='check_status', action='store_true', default=False,\n                               help='Check the status of the most recent import request for given github_'\n                                    'user/github_repo.')",
                "def add_setup_options(self, parser, parents=None):\n    setup_parser = parser.add_parser('setup', parents=parents,\n                                     help='Manage the integration between Galaxy and the given source.')\n    setup_parser.set_defaults(func=self.execute_setup)\n\n    setup_parser.add_argument('--remove', dest='remove_id', default=None,\n                              help='Remove the integration matching the provided ID value. Use --list to see '\n                                   'ID values.')\n    setup_parser.add_argument('--list', dest=\"setup_list\", action='store_true', default=False,\n                              help='List all of your integrations.')\n    setup_parser.add_argument('source', help='Source')\n    setup_parser.add_argument('github_user', help='GitHub username')\n    setup_parser.add_argument('github_repo', help='GitHub repository')\n    setup_parser.add_argument('secret', help='Secret')",
                "def add_login_options(self, parser, parents=None):\n    login_parser = parser.add_parser('login', parents=parents,\n                                     help=\"Login to api.github.com server in order to use ansible-galaxy role sub \"\n                                          \"command such as 'import', 'delete', 'publish', and 'setup'\")\n    login_parser.set_defaults(func=self.execute_login)\n\n    login_parser.add_argument('--github-token', dest='token', default=None,\n                              help='Identify with github token rather than username and password.')",
                "def add_info_options(self, parser, parents=None):\n    info_parser = parser.add_parser('info', parents=parents, help='View more details about a specific role.')\n    info_parser.set_defaults(func=self.execute_info)\n\n    info_parser.add_argument('args', nargs='+', help='role', metavar='role_name[,version]')",
                "def add_install_options(self, parser, parents=None):\n    galaxy_type = 'collection' if parser.metavar == 'COLLECTION_ACTION' else 'role'\n\n    args_kwargs = {}\n    if galaxy_type == 'collection':\n        args_kwargs['help'] = 'The collection(s) name or path/url to a tar.gz collection artifact. This is ' \\\n                              'mutually exclusive with --requirements-file.'\n        ignore_errors_help = 'Ignore errors during installation and continue with the next specified ' \\\n                             'collection. This will not ignore dependency conflict errors.'\n    else:\n        args_kwargs['help'] = 'Role name, URL or tar file'\n        ignore_errors_help = 'Ignore errors and continue with the next specified role.'\n\n    install_parser = parser.add_parser('install', parents=parents,\n                                       help='Install {0}(s) from file(s), URL(s) or Ansible '\n                                            'Galaxy'.format(galaxy_type))\n    install_parser.set_defaults(func=self.execute_install)\n\n    install_parser.add_argument('args', metavar='{0}_name'.format(galaxy_type), nargs='*', **args_kwargs)\n    install_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False,\n                                help=ignore_errors_help)\n\n    install_exclusive = install_parser.add_mutually_exclusive_group()\n    install_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False,\n                                   help=\"Don't download {0}s listed as dependencies.\".format(galaxy_type))\n    install_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False,\n                                   help=\"Force overwriting an existing {0} and its \"\n                                        \"dependencies.\".format(galaxy_type))\n\n    if galaxy_type == 'collection':\n        install_parser.add_argument('-p', '--collections-path', dest='collections_path',\n                                    default=C.COLLECTIONS_PATHS[0],\n                                    help='The path to the directory containing your collections.')\n        install_parser.add_argument('-r', '--requirements-file', dest='requirements',\n                                    help='A file containing a list of collections to be installed.')\n    else:\n        install_parser.add_argument('-r', '--role-file', dest='role_file',\n                                    help='A file containing a list of roles to be imported.')\n        install_parser.add_argument('-g', '--keep-scm-meta', dest='keep_scm_meta', action='store_true',\n                                    default=False,\n                                    help='Use tar instead of the scm archive option when packaging the role.')",
                "def add_build_options(self, parser, parents=None):\n    build_parser = parser.add_parser('build', parents=parents,\n                                     help='Build an Ansible collection artifact that can be publish to Ansible '\n                                          'Galaxy.')\n    build_parser.set_defaults(func=self.execute_build)\n\n    build_parser.add_argument('args', metavar='collection', nargs='*', default=('.',),\n                              help='Path to the collection(s) directory to build. This should be the directory '\n                                   'that contains the galaxy.yml file. The default is the current working '\n                                   'directory.')\n    build_parser.add_argument('--output-path', dest='output_path', default='./',\n                              help='The path in which the collection is built to. The default is the current '\n                                   'working directory.')",
                "def add_publish_options(self, parser, parents=None):\n    publish_parser = parser.add_parser('publish', parents=parents,\n                                       help='Publish a collection artifact to Ansible Galaxy.')\n    publish_parser.set_defaults(func=self.execute_publish)\n\n    publish_parser.add_argument('args', metavar='collection_path',\n                                help='The path to the collection tarball to publish.')\n    publish_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True,\n                                help=\"Don't wait for import validation results.\")\n    publish_parser.add_argument('--import-timeout', dest='import_timeout', type=int, default=0,\n                                help=\"The time to wait for the collection import process to finish.\")",
                "def post_process_args(self, options):\n    options = super(GalaxyCLI, self).post_process_args(options)\n    display.verbosity = options.verbosity\n    return options",
                "def run(self):\n\n    super(GalaxyCLI, self).run()\n\n    self.galaxy = Galaxy()\n\n    def server_config_def(section, key, required):\n        return {\n            'description': 'The %s of the %s Galaxy server' % (key, section),\n            'ini': [\n                {\n                    'section': 'galaxy_server.%s' % section,\n                    'key': key,\n                }\n            ],\n            'env': [\n                {'name': 'ANSIBLE_GALAXY_SERVER_%s_%s' % (section.upper(), key.upper())},\n            ],\n            'required': required,\n        }\n    server_def = [('url', True), ('username', False), ('password', False), ('token', False),\n                  ('auth_url', False)]\n\n    config_servers = []\n    for server_key in (C.GALAXY_SERVER_LIST or []):\n        # Config definitions are looked up dynamically based on the C.GALAXY_SERVER_LIST entry. We look up the\n        # section [galaxy_server.<server>] for the values url, username, password, and token.\n        config_dict = dict((k, server_config_def(server_key, k, req)) for k, req in server_def)\n        defs = AnsibleLoader(yaml.safe_dump(config_dict)).get_single_data()\n        C.config.initialize_plugin_configuration_definitions('galaxy_server', server_key, defs)\n\n        server_options = C.config.get_plugin_options('galaxy_server', server_key)\n        # auth_url is used to create the token, but not directly by GalaxyAPI, so\n        # it doesn't need to be passed as kwarg to GalaxyApi\n        auth_url = server_options.pop('auth_url', None)\n        token_val = server_options['token'] or NoTokenSentinel\n        username = server_options['username']\n\n        # default case if no auth info is provided.\n        server_options['token'] = None\n\n        if username:\n            server_options['token'] = BasicAuthToken(username,\n                                                     server_options['password'])\n        else:\n            if token_val:\n                if auth_url:\n                    server_options['token'] = KeycloakToken(access_token=token_val,\n                                                            auth_url=auth_url,\n                                                            validate_certs=not context.CLIARGS['ignore_certs'])\n                else:\n                    # The galaxy v1 / github / django / 'Token'\n                    server_options['token'] = GalaxyToken(token=token_val)\n\n        config_servers.append(GalaxyAPI(self.galaxy, server_key, **server_options))\n\n    cmd_server = context.CLIARGS['api_server']\n    cmd_token = GalaxyToken(token=context.CLIARGS['api_key'])\n    if cmd_server:\n        # Cmd args take precedence over the config entry but fist check if the arg was a name and use that config\n        # entry, otherwise create a new API entry for the server specified.\n        config_server = next((s for s in config_servers if s.name == cmd_server), None)\n        if config_server:\n            self.api_servers.append(config_server)\n        else:\n            self.api_servers.append(GalaxyAPI(self.galaxy, 'cmd_arg', cmd_server, token=cmd_token))\n    else:\n        self.api_servers = config_servers\n\n    # Default to C.GALAXY_SERVER if no servers were defined\n    if len(self.api_servers) == 0:\n        self.api_servers.append(GalaxyAPI(self.galaxy, 'default', C.GALAXY_SERVER, token=cmd_token))\n\n    context.CLIARGS['func']()",
                "@property\ndef api(self):\n    return self.api_servers[0]",
                "def _parse_requirements_file(self, requirements_file, allow_old_format=True):\n    \"\"\"\n    Parses an Ansible requirement.yml file and returns all the roles and/or collections defined in it. There are 2\n    requirements file format:\n\n        # v1 (roles only)\n        - src: The source of the role, required if include is not set. Can be Galaxy role name, URL to a SCM repo or tarball.\n          name: Downloads the role to the specified name, defaults to Galaxy name from Galaxy or name of repo if src is a URL.\n          scm: If src is a URL, specify the SCM. Only git or hd are supported and defaults ot git.\n          version: The version of the role to download. Can also be tag, commit, or branch name and defaults to master.\n          include: Path to additional requirements.yml files.\n\n        # v2 (roles and collections)\n        ---\n        roles:\n        # Same as v1 format just under the roles key\n\n        collections:\n        - namespace.collection\n        - name: namespace.collection\n          version: version identifier, multiple identifiers are separated by ','\n          source: the URL or a predefined source name that relates to C.GALAXY_SERVER_LIST\n\n    :param requirements_file: The path to the requirements file.\n    :param allow_old_format: Will fail if a v1 requirements file is found and this is set to False.\n    :return: a dict containing roles and collections to found in the requirements file.\n    \"\"\"\n    requirements = {\n        'roles': [],\n        'collections': [],\n    }\n\n    b_requirements_file = to_bytes(requirements_file, errors='surrogate_or_strict')\n    if not os.path.exists(b_requirements_file):\n        raise AnsibleError(\"The requirements file '%s' does not exist.\" % to_native(requirements_file))\n\n    display.vvv(\"Reading requirement file at '%s'\" % requirements_file)\n    with open(b_requirements_file, 'rb') as req_obj:\n        try:\n            file_requirements = yaml.safe_load(req_obj)\n        except YAMLError as err:\n            raise AnsibleError(\n                \"Failed to parse the requirements yml at '%s' with the following error:\\n%s\"\n                % (to_native(requirements_file), to_native(err)))\n\n    if requirements_file is None:\n        raise AnsibleError(\"No requirements found in file '%s'\" % to_native(requirements_file))\n\n    def parse_role_req(requirement):\n        if \"include\" not in requirement:\n            role = RoleRequirement.role_yaml_parse(requirement)\n            display.vvv(\"found role %s in yaml file\" % to_text(role))\n            if \"name\" not in role and \"src\" not in role:\n                raise AnsibleError(\"Must specify name or src for role\")\n            return [GalaxyRole(self.galaxy, self.api, **role)]\n        else:\n            b_include_path = to_bytes(requirement[\"include\"], errors=\"surrogate_or_strict\")\n            if not os.path.isfile(b_include_path):\n                raise AnsibleError(\"Failed to find include requirements file '%s' in '%s'\"\n                                   % (to_native(b_include_path), to_native(requirements_file)))\n\n            with open(b_include_path, 'rb') as f_include:\n                try:\n                    return [GalaxyRole(self.galaxy, self.api, **r) for r in\n                            (RoleRequirement.role_yaml_parse(i) for i in yaml.safe_load(f_include))]\n                except Exception as e:\n                    raise AnsibleError(\"Unable to load data from include requirements file: %s %s\"\n                                       % (to_native(requirements_file), to_native(e)))\n\n    if isinstance(file_requirements, list):\n        # Older format that contains only roles\n        if not allow_old_format:\n            raise AnsibleError(\"Expecting requirements file to be a dict with the key 'collections' that contains \"\n                               \"a list of collections to install\")\n\n        for role_req in file_requirements:\n            requirements['roles'] += parse_role_req(role_req)\n\n    else:\n        # Newer format with a collections and/or roles key\n        extra_keys = set(file_requirements.keys()).difference(set(['roles', 'collections']))\n        if extra_keys:\n            raise AnsibleError(\"Expecting only 'roles' and/or 'collections' as base keys in the requirements \"\n                               \"file. Found: %s\" % (to_native(\", \".join(extra_keys))))\n\n        for role_req in file_requirements.get('roles', []):\n            requirements['roles'] += parse_role_req(role_req)\n\n        for collection_req in file_requirements.get('collections', []):\n            if isinstance(collection_req, dict):\n                req_name = collection_req.get('name', None)\n                if req_name is None:\n                    raise AnsibleError(\"Collections requirement entry should contain the key name.\")\n\n                req_version = collection_req.get('version', '*')\n                req_source = collection_req.get('source', None)\n                if req_source:\n                    # Try and match up the requirement source with our list of Galaxy API servers defined in the\n                    # config, otherwise create a server with that URL without any auth.\n                    req_source = next(iter([a for a in self.api_servers if req_source in [a.name, a.api_server]]),\n                                      GalaxyAPI(self.galaxy, \"explicit_requirement_%s\" % req_name, req_source))\n\n                requirements['collections'].append((req_name, req_version, req_source))\n            else:\n                requirements['collections'].append((collection_req, '*', None))\n\n    return requirements",
                "@staticmethod\ndef exit_without_ignore(rc=1):\n    \"\"\"\n    Exits with the specified return code unless the\n    option --ignore-errors was specified\n    \"\"\"\n    if not context.CLIARGS['ignore_errors']:\n        raise AnsibleError('- you can use --ignore-errors to skip failed roles and finish processing the list.')",
                "@staticmethod\ndef _display_role_info(role_info):\n\n    text = [u\"\", u\"Role: %s\" % to_text(role_info['name'])]\n    text.append(u\"\\tdescription: %s\" % role_info.get('description', ''))\n\n    for k in sorted(role_info.keys()):\n\n        if k in GalaxyCLI.SKIP_INFO_KEYS:\n            continue\n\n        if isinstance(role_info[k], dict):\n            text.append(u\"\\t%s:\" % (k))\n            for key in sorted(role_info[k].keys()):\n                if key in GalaxyCLI.SKIP_INFO_KEYS:\n                    continue\n                text.append(u\"\\t\\t%s: %s\" % (key, role_info[k][key]))\n        else:\n            text.append(u\"\\t%s: %s\" % (k, role_info[k]))\n\n    return u'\\n'.join(text)",
                "@staticmethod\ndef _resolve_path(path):\n    return os.path.abspath(os.path.expanduser(os.path.expandvars(path)))",
                "@staticmethod\ndef _get_skeleton_galaxy_yml(template_path, inject_data):\n    with open(to_bytes(template_path, errors='surrogate_or_strict'), 'rb') as template_obj:\n        meta_template = to_text(template_obj.read(), errors='surrogate_or_strict')\n\n    galaxy_meta = get_collections_galaxy_meta_info()\n\n    required_config = []\n    optional_config = []\n    for meta_entry in galaxy_meta:\n        config_list = required_config if meta_entry.get('required', False) else optional_config\n\n        value = inject_data.get(meta_entry['key'], None)\n        if not value:\n            meta_type = meta_entry.get('type', 'str')\n\n            if meta_type == 'str':\n                value = ''\n            elif meta_type == 'list':\n                value = []\n            elif meta_type == 'dict':\n                value = {}\n\n        meta_entry['value'] = value\n        config_list.append(meta_entry)\n\n    link_pattern = re.compile(r\"L\\(([^)]+),\\s+([^)]+)\\)\")\n    const_pattern = re.compile(r\"C\\(([^)]+)\\)\")\n\n    def comment_ify(v):\n        if isinstance(v, list):\n            v = \". \".join([l.rstrip('.') for l in v])\n\n        v = link_pattern.sub(r\"\\1 <\\2>\", v)\n        v = const_pattern.sub(r\"'\\1'\", v)\n\n        return textwrap.fill(v, width=117, initial_indent=\"# \", subsequent_indent=\"# \", break_on_hyphens=False)\n\n    def to_yaml(v):\n        return yaml.safe_dump(v, default_flow_style=False).rstrip()\n\n    env = Environment(loader=BaseLoader)\n    env.filters['comment_ify'] = comment_ify\n    env.filters['to_yaml'] = to_yaml\n\n    template = env.from_string(meta_template)\n    meta_value = template.render({'required_config': required_config, 'optional_config': optional_config})\n\n    return meta_value",
                "def execute_role(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy role. Must be combined with a further action like delete/install/init\n    as listed below.\n    \"\"\"\n    # To satisfy doc build\n    pass",
                "def execute_collection(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy collection. Must be combined with a further action like init/install as\n    listed below.\n    \"\"\"\n    # To satisfy doc build\n    pass",
                "def execute_build(self):\n    \"\"\"\n    Build an Ansible Galaxy collection artifact that can be stored in a central repository like Ansible Galaxy.\n    By default, this command builds from the current working directory. You can optionally pass in the\n    collection input path (where the ``galaxy.yml`` file is).\n    \"\"\"\n    force = context.CLIARGS['force']\n    output_path = GalaxyCLI._resolve_path(context.CLIARGS['output_path'])\n    b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n\n    if not os.path.exists(b_output_path):\n        os.makedirs(b_output_path)\n    elif os.path.isfile(b_output_path):\n        raise AnsibleError(\"- the output collection directory %s is a file - aborting\" % to_native(output_path))\n\n    for collection_path in context.CLIARGS['args']:\n        collection_path = GalaxyCLI._resolve_path(collection_path)\n        build_collection(collection_path, output_path, force)",
                "def execute_init(self):\n    \"\"\"\n    Creates the skeleton framework of a role or collection that complies with the Galaxy metadata format.\n    Requires a role or collection name. The collection name must be in the format ``<namespace>.<collection>``.\n    \"\"\"\n\n    galaxy_type = context.CLIARGS['type']\n    init_path = context.CLIARGS['init_path']\n    force = context.CLIARGS['force']\n    obj_skeleton = context.CLIARGS['{0}_skeleton'.format(galaxy_type)]\n\n    obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]\n\n    inject_data = dict(\n        description='your {0} description'.format(galaxy_type),\n        ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),\n    )\n    if galaxy_type == 'role':\n        inject_data.update(dict(\n            author='your name',\n            company='your company (optional)',\n            license='license (GPL-2.0-or-later, MIT, etc)',\n            role_name=obj_name,\n            role_type=context.CLIARGS['role_type'],\n            issue_tracker_url='http://example.com/issue/tracker',\n            repository_url='http://example.com/repository',\n            documentation_url='http://docs.example.com',\n            homepage_url='http://example.com',\n            min_ansible_version=ansible_version[:3],  # x.y\n        ))\n\n        obj_path = os.path.join(init_path, obj_name)\n    elif galaxy_type == 'collection':\n        namespace, collection_name = obj_name.split('.', 1)\n\n        inject_data.update(dict(\n            namespace=namespace,\n            collection_name=collection_name,\n            version='1.0.0',\n            readme='README.md',\n            authors=['your name <example@domain.com>'],\n            license=['GPL-2.0-or-later'],\n            repository='http://example.com/repository',\n            documentation='http://docs.example.com',\n            homepage='http://example.com',\n            issues='http://example.com/issue/tracker',\n            build_ignore=[],\n        ))\n\n        obj_path = os.path.join(init_path, namespace, collection_name)\n\n    b_obj_path = to_bytes(obj_path, errors='surrogate_or_strict')\n\n    if os.path.exists(b_obj_path):\n        if os.path.isfile(obj_path):\n            raise AnsibleError(\"- the path %s already exists, but is a file - aborting\" % to_native(obj_path))\n        elif not force:\n            raise AnsibleError(\"- the directory %s already exists. \"\n                               \"You can use --force to re-initialize this directory,\\n\"\n                               \"however it will reset any main.yml files that may have\\n\"\n                               \"been modified there already.\" % to_native(obj_path))\n\n    if obj_skeleton is not None:\n        own_skeleton = False\n        skeleton_ignore_expressions = C.GALAXY_ROLE_SKELETON_IGNORE\n    else:\n        own_skeleton = True\n        obj_skeleton = self.galaxy.default_role_skeleton_path\n        skeleton_ignore_expressions = ['^.*/.git_keep$']\n\n    obj_skeleton = os.path.expanduser(obj_skeleton)\n    skeleton_ignore_re = [re.compile(x) for x in skeleton_ignore_expressions]\n\n    if not os.path.exists(obj_skeleton):\n        raise AnsibleError(\"- the skeleton path '{0}' does not exist, cannot init {1}\".format(\n            to_native(obj_skeleton), galaxy_type)\n        )\n\n    template_env = Environment(loader=FileSystemLoader(obj_skeleton))\n\n    # create role directory\n    if not os.path.exists(b_obj_path):\n        os.makedirs(b_obj_path)\n\n    for root, dirs, files in os.walk(obj_skeleton, topdown=True):\n        rel_root = os.path.relpath(root, obj_skeleton)\n        rel_dirs = rel_root.split(os.sep)\n        rel_root_dir = rel_dirs[0]\n        if galaxy_type == 'collection':\n            # A collection can contain templates in playbooks/*/templates and roles/*/templates\n            in_templates_dir = rel_root_dir in ['playbooks', 'roles'] and 'templates' in rel_dirs\n        else:\n            in_templates_dir = rel_root_dir == 'templates'\n\n        dirs[:] = [d for d in dirs if not any(r.match(d) for r in skeleton_ignore_re)]\n\n        for f in files:\n            filename, ext = os.path.splitext(f)\n\n            if any(r.match(os.path.join(rel_root, f)) for r in skeleton_ignore_re):\n                continue\n            elif galaxy_type == 'collection' and own_skeleton and rel_root == '.' and f == 'galaxy.yml.j2':\n                # Special use case for galaxy.yml.j2 in our own default collection skeleton. We build the options\n                # dynamically which requires special options to be set.\n\n                # The templated data's keys must match the key name but the inject data contains collection_name\n                # instead of name. We just make a copy and change the key back to name for this file.\n                template_data = inject_data.copy()\n                template_data['name'] = template_data.pop('collection_name')\n\n                meta_value = GalaxyCLI._get_skeleton_galaxy_yml(os.path.join(root, rel_root, f), template_data)\n                b_dest_file = to_bytes(os.path.join(obj_path, rel_root, filename), errors='surrogate_or_strict')\n                with open(b_dest_file, 'wb') as galaxy_obj:\n                    galaxy_obj.write(to_bytes(meta_value, errors='surrogate_or_strict'))\n            elif ext == \".j2\" and not in_templates_dir:\n                src_template = os.path.join(rel_root, f)\n                dest_file = os.path.join(obj_path, rel_root, filename)\n                template_env.get_template(src_template).stream(inject_data).dump(dest_file, encoding='utf-8')\n            else:\n                f_rel_path = os.path.relpath(os.path.join(root, f), obj_skeleton)\n                shutil.copyfile(os.path.join(root, f), os.path.join(obj_path, f_rel_path))\n\n        for d in dirs:\n            b_dir_path = to_bytes(os.path.join(obj_path, rel_root, d), errors='surrogate_or_strict')\n            if not os.path.exists(b_dir_path):\n                os.makedirs(b_dir_path)\n\n    display.display(\"- %s %s was created successfully\" % (galaxy_type.title(), obj_name))",
                "def execute_info(self):\n    \"\"\"\n    prints out detailed information about an installed role as well as info available from the galaxy API.\n    \"\"\"\n\n    roles_path = context.CLIARGS['roles_path']\n\n    data = ''\n    for role in context.CLIARGS['args']:\n\n        role_info = {'path': roles_path}\n        gr = GalaxyRole(self.galaxy, self.api, role)\n\n        install_info = gr.install_info\n        if install_info:\n            if 'version' in install_info:\n                install_info['installed_version'] = install_info['version']\n                del install_info['version']\n            role_info.update(install_info)\n\n        remote_data = False\n        if not context.CLIARGS['offline']:\n            remote_data = self.api.lookup_role_by_name(role, False)\n\n        if remote_data:\n            role_info.update(remote_data)\n\n        if gr.metadata:\n            role_info.update(gr.metadata)\n\n        req = RoleRequirement()\n        role_spec = req.role_yaml_parse({'role': role})\n        if role_spec:\n            role_info.update(role_spec)\n\n        data = self._display_role_info(role_info)\n        # FIXME: This is broken in both 1.9 and 2.0 as\n        # _display_role_info() always returns something\n        if not data:\n            data = u\"\\n- the role %s was not found\" % role\n\n    self.pager(data)",
                "def execute_install(self):\n    \"\"\"\n    Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n    You can pass in a list (roles or collections) or use the file\n    option listed below (these are mutually exclusive). If you pass in a list, it\n    can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n    \"\"\"\n    if context.CLIARGS['type'] == 'collection':\n        collections = context.CLIARGS['args']\n        force = context.CLIARGS['force']\n        output_path = context.CLIARGS['collections_path']\n        ignore_certs = context.CLIARGS['ignore_certs']\n        ignore_errors = context.CLIARGS['ignore_errors']\n        requirements_file = context.CLIARGS['requirements']\n        no_deps = context.CLIARGS['no_deps']\n        force_deps = context.CLIARGS['force_with_deps']\n\n        if collections and requirements_file:\n            raise AnsibleError(\"The positional collection_name arg and --requirements-file are mutually exclusive.\")\n        elif not collections and not requirements_file:\n            raise AnsibleError(\"You must specify a collection name or a requirements file.\")\n\n        if requirements_file:\n            requirements_file = GalaxyCLI._resolve_path(requirements_file)\n            requirements = self._parse_requirements_file(requirements_file, allow_old_format=False)['collections']\n        else:\n            requirements = []\n            for collection_input in collections:\n                name, dummy, requirement = collection_input.partition(':')\n                requirements.append((name, requirement or '*', None))\n\n        output_path = GalaxyCLI._resolve_path(output_path)\n        collections_path = C.COLLECTIONS_PATHS\n\n        if len([p for p in collections_path if p.startswith(output_path)]) == 0:\n            display.warning(\"The specified collections path '%s' is not part of the configured Ansible \"\n                            \"collections paths '%s'. The installed collection won't be picked up in an Ansible \"\n                            \"run.\" % (to_text(output_path), to_text(\":\".join(collections_path))))\n\n        if os.path.split(output_path)[1] != 'ansible_collections':\n            output_path = os.path.join(output_path, 'ansible_collections')\n\n        b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n        if not os.path.exists(b_output_path):\n            os.makedirs(b_output_path)\n\n        install_collections(requirements, output_path, self.api_servers, (not ignore_certs), ignore_errors,\n                            no_deps, force, force_deps)\n\n        return 0\n\n    role_file = context.CLIARGS['role_file']\n\n    if not context.CLIARGS['args'] and role_file is None:\n        # the user needs to specify one of either --role-file or specify a single user/role name\n        raise AnsibleOptionsError(\"- you must specify a user/role name or a roles file\")\n\n    no_deps = context.CLIARGS['no_deps']\n    force_deps = context.CLIARGS['force_with_deps']\n\n    force = context.CLIARGS['force'] or force_deps\n\n    roles_left = []\n    if role_file:\n        if not (role_file.endswith('.yaml') or role_file.endswith('.yml')):\n            raise AnsibleError(\"Invalid role requirements file, it must end with a .yml or .yaml extension\")\n\n        roles_left = self._parse_requirements_file(role_file)['roles']\n    else:\n        # roles were specified directly, so we'll just go out grab them\n        # (and their dependencies, unless the user doesn't want us to).\n        for rname in context.CLIARGS['args']:\n            role = RoleRequirement.role_yaml_parse(rname.strip())\n            roles_left.append(GalaxyRole(self.galaxy, self.api, **role))\n\n    for role in roles_left:\n        # only process roles in roles files when names matches if given\n        if role_file and context.CLIARGS['args'] and role.name not in context.CLIARGS['args']:\n            display.vvv('Skipping role %s' % role.name)\n            continue\n\n        display.vvv('Processing role %s ' % role.name)\n\n        # query the galaxy API for the role data\n\n        if role.install_info is not None:\n            if role.install_info['version'] != role.version or force:\n                if force:\n                    display.display('- changing role %s from %s to %s' %\n                                    (role.name, role.install_info['version'], role.version or \"unspecified\"))\n                    role.remove()\n                else:\n                    display.warning('- %s (%s) is already installed - use --force to change version to %s' %\n                                    (role.name, role.install_info['version'], role.version or \"unspecified\"))\n                    continue\n            else:\n                if not force:\n                    display.display('- %s is already installed, skipping.' % str(role))\n                    continue\n\n        try:\n            installed = role.install()\n        except AnsibleError as e:\n            display.warning(u\"- %s was NOT installed successfully: %s \" % (role.name, to_text(e)))\n            self.exit_without_ignore()\n            continue\n\n        # install dependencies, if we want them\n        if not no_deps and installed:\n            if not role.metadata:\n                display.warning(\"Meta file %s is empty. Skipping dependencies.\" % role.path)\n            else:\n                role_dependencies = role.metadata.get('dependencies') or []\n                for dep in role_dependencies:\n                    display.debug('Installing dep %s' % dep)\n                    dep_req = RoleRequirement()\n                    dep_info = dep_req.role_yaml_parse(dep)\n                    dep_role = GalaxyRole(self.galaxy, self.api, **dep_info)\n                    if '.' not in dep_role.name and '.' not in dep_role.src and dep_role.scm is None:\n                        # we know we can skip this, as it's not going to\n                        # be found on galaxy.ansible.com\n                        continue\n                    if dep_role.install_info is None:\n                        if dep_role not in roles_left:\n                            display.display('- adding dependency: %s' % to_text(dep_role))\n                            roles_left.append(dep_role)\n                        else:\n                            display.display('- dependency %s already pending installation.' % dep_role.name)\n                    else:\n                        if dep_role.install_info['version'] != dep_role.version:\n                            if force_deps:\n                                display.display('- changing dependant role %s from %s to %s' %\n                                                (dep_role.name, dep_role.install_info['version'], dep_role.version or \"unspecified\"))\n                                dep_role.remove()\n                                roles_left.append(dep_role)\n                            else:\n                                display.warning('- dependency %s (%s) from role %s differs from already installed version (%s), skipping' %\n                                                (to_text(dep_role), dep_role.version, role.name, dep_role.install_info['version']))\n                        else:\n                            if force_deps:\n                                roles_left.append(dep_role)\n                            else:\n                                display.display('- dependency %s is already installed, skipping.' % dep_role.name)\n\n        if not installed:\n            display.warning(\"- %s was NOT installed successfully.\" % role.name)\n            self.exit_without_ignore()\n\n    return 0",
                "def execute_remove(self):\n    \"\"\"\n    removes the list of roles passed as arguments from the local system.\n    \"\"\"\n\n    if not context.CLIARGS['args']:\n        raise AnsibleOptionsError('- you must specify at least one role to remove.')\n\n    for role_name in context.CLIARGS['args']:\n        role = GalaxyRole(self.galaxy, self.api, role_name)\n        try:\n            if role.remove():\n                display.display('- successfully removed %s' % role_name)\n            else:\n                display.display('- %s is not installed, skipping.' % role_name)\n        except Exception as e:\n            raise AnsibleError(\"Failed to remove role %s: %s\" % (role_name, to_native(e)))\n\n    return 0",
                "def execute_list(self):\n    \"\"\"\n    lists the roles installed on the local system or matches a single role passed as an argument.\n    \"\"\"\n\n    def _display_role(gr):\n        install_info = gr.install_info\n        version = None\n        if install_info:\n            version = install_info.get(\"version\", None)\n        if not version:\n            version = \"(unknown version)\"\n        display.display(\"- %s, %s\" % (gr.name, version))\n\n    if context.CLIARGS['role']:\n        # show the requested role, if it exists\n        name = context.CLIARGS['role']\n        gr = GalaxyRole(self.galaxy, self.api, name)\n        if gr.metadata:\n            display.display('# %s' % os.path.dirname(gr.path))\n            _display_role(gr)\n        else:\n            display.display(\"- the role %s was not found\" % name)\n    else:\n        # show all valid roles in the roles_path directory\n        roles_path = context.CLIARGS['roles_path']\n        path_found = False\n        warnings = []\n        for path in roles_path:\n            role_path = os.path.expanduser(path)\n            if not os.path.exists(role_path):\n                warnings.append(\"- the configured path %s does not exist.\" % role_path)\n                continue\n            elif not os.path.isdir(role_path):\n                warnings.append(\"- the configured path %s, exists, but it is not a directory.\" % role_path)\n                continue\n            display.display('# %s' % role_path)\n            path_files = os.listdir(role_path)\n            path_found = True\n            for path_file in path_files:\n                gr = GalaxyRole(self.galaxy, self.api, path_file, path=path)\n                if gr.metadata:\n                    _display_role(gr)\n        for w in warnings:\n            display.warning(w)\n        if not path_found:\n            raise AnsibleOptionsError(\"- None of the provided paths was usable. Please specify a valid path with --roles-path\")\n    return 0",
                "def execute_publish(self):\n    \"\"\"\n    Publish a collection into Ansible Galaxy. Requires the path to the collection tarball to publish.\n    \"\"\"\n    collection_path = GalaxyCLI._resolve_path(context.CLIARGS['args'])\n    wait = context.CLIARGS['wait']\n    timeout = context.CLIARGS['import_timeout']\n\n    publish_collection(collection_path, self.api, wait, timeout)",
                "def execute_search(self):\n    ''' searches for roles on the Ansible Galaxy server'''\n    page_size = 1000\n    search = None\n\n    if context.CLIARGS['args']:\n        search = '+'.join(context.CLIARGS['args'])\n\n    if not search and not context.CLIARGS['platforms'] and not context.CLIARGS['galaxy_tags'] and not context.CLIARGS['author']:\n        raise AnsibleError(\"Invalid query. At least one search term, platform, galaxy tag or author must be provided.\")\n\n    response = self.api.search_roles(search, platforms=context.CLIARGS['platforms'],\n                                     tags=context.CLIARGS['galaxy_tags'], author=context.CLIARGS['author'], page_size=page_size)\n\n    if response['count'] == 0:\n        display.display(\"No roles match your search.\", color=C.COLOR_ERROR)\n        return True\n\n    data = [u'']\n\n    if response['count'] > page_size:\n        data.append(u\"Found %d roles matching your search. Showing first %s.\" % (response['count'], page_size))\n    else:\n        data.append(u\"Found %d roles matching your search:\" % response['count'])\n\n    max_len = []\n    for role in response['results']:\n        max_len.append(len(role['username'] + '.' + role['name']))\n    name_len = max(max_len)\n    format_str = u\" %%-%ds %%s\" % name_len\n    data.append(u'')\n    data.append(format_str % (u\"Name\", u\"Description\"))\n    data.append(format_str % (u\"----\", u\"-----------\"))\n    for role in response['results']:\n        data.append(format_str % (u'%s.%s' % (role['username'], role['name']), role['description']))\n\n    data = u'\\n'.join(data)\n    self.pager(data)\n\n    return True",
                "def execute_login(self):\n    \"\"\"\n    verify user's identify via Github and retrieve an auth token from Ansible Galaxy.\n    \"\"\"\n    # Authenticate with github and retrieve a token\n    if context.CLIARGS['token'] is None:\n        if C.GALAXY_TOKEN:\n            github_token = C.GALAXY_TOKEN\n        else:\n            login = GalaxyLogin(self.galaxy)\n            github_token = login.create_github_token()\n    else:\n        github_token = context.CLIARGS['token']\n\n    galaxy_response = self.api.authenticate(github_token)\n\n    if context.CLIARGS['token'] is None and C.GALAXY_TOKEN is None:\n        # Remove the token we created\n        login.remove_github_token()\n\n    # Store the Galaxy token\n    token = GalaxyToken()\n    token.set(galaxy_response['token'])\n\n    display.display(\"Successfully logged into Galaxy as %s\" % galaxy_response['username'])\n    return 0",
                "def execute_import(self):\n    \"\"\" used to import a role into Ansible Galaxy \"\"\"\n\n    colors = {\n        'INFO': 'normal',\n        'WARNING': C.COLOR_WARN,\n        'ERROR': C.COLOR_ERROR,\n        'SUCCESS': C.COLOR_OK,\n        'FAILED': C.COLOR_ERROR,\n    }\n\n    github_user = to_text(context.CLIARGS['github_user'], errors='surrogate_or_strict')\n    github_repo = to_text(context.CLIARGS['github_repo'], errors='surrogate_or_strict')\n\n    if context.CLIARGS['check_status']:\n        task = self.api.get_import_task(github_user=github_user, github_repo=github_repo)\n    else:\n        # Submit an import request\n        task = self.api.create_import_task(github_user, github_repo,\n                                           reference=context.CLIARGS['reference'],\n                                           role_name=context.CLIARGS['role_name'])\n\n        if len(task) > 1:\n            # found multiple roles associated with github_user/github_repo\n            display.display(\"WARNING: More than one Galaxy role associated with Github repo %s/%s.\" % (github_user, github_repo),\n                            color='yellow')\n            display.display(\"The following Galaxy roles are being updated:\" + u'\\n', color=C.COLOR_CHANGED)\n            for t in task:\n                display.display('%s.%s' % (t['summary_fields']['role']['namespace'], t['summary_fields']['role']['name']), color=C.COLOR_CHANGED)\n            display.display(u'\\nTo properly namespace this role, remove each of the above and re-import %s/%s from scratch' % (github_user, github_repo),\n                            color=C.COLOR_CHANGED)\n            return 0\n        # found a single role as expected\n        display.display(\"Successfully submitted import request %d\" % task[0]['id'])\n        if not context.CLIARGS['wait']:\n            display.display(\"Role name: %s\" % task[0]['summary_fields']['role']['name'])\n            display.display(\"Repo: %s/%s\" % (task[0]['github_user'], task[0]['github_repo']))\n\n    if context.CLIARGS['check_status'] or context.CLIARGS['wait']:\n        # Get the status of the import\n        msg_list = []\n        finished = False\n        while not finished:\n            task = self.api.get_import_task(task_id=task[0]['id'])\n            for msg in task[0]['summary_fields']['task_messages']:\n                if msg['id'] not in msg_list:\n                    display.display(msg['message_text'], color=colors[msg['message_type']])\n                    msg_list.append(msg['id'])\n            if task[0]['state'] in ['SUCCESS', 'FAILED']:\n                finished = True\n            else:\n                time.sleep(10)\n\n    return 0",
                "def execute_setup(self):\n    \"\"\" Setup an integration from Github or Travis for Ansible Galaxy roles\"\"\"\n\n    if context.CLIARGS['setup_list']:\n        # List existing integration secrets\n        secrets = self.api.list_secrets()\n        if len(secrets) == 0:\n            # None found\n            display.display(\"No integrations found.\")\n            return 0\n        display.display(u'\\n' + \"ID         Source     Repo\", color=C.COLOR_OK)\n        display.display(\"---------- ---------- ----------\", color=C.COLOR_OK)\n        for secret in secrets:\n            display.display(\"%-10s %-10s %s/%s\" % (secret['id'], secret['source'], secret['github_user'],\n                                                   secret['github_repo']), color=C.COLOR_OK)\n        return 0\n\n    if context.CLIARGS['remove_id']:\n        # Remove a secret\n        self.api.remove_secret(context.CLIARGS['remove_id'])\n        display.display(\"Secret removed. Integrations using this secret will not longer work.\", color=C.COLOR_OK)\n        return 0\n\n    source = context.CLIARGS['source']\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    secret = context.CLIARGS['secret']\n\n    resp = self.api.add_secret(source, github_user, github_repo, secret)\n    display.display(\"Added integration for %s %s/%s\" % (resp['source'], resp['github_user'], resp['github_repo']))\n\n    return 0",
                "def execute_delete(self):\n    \"\"\" Delete a role from Ansible Galaxy. \"\"\"\n\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    resp = self.api.delete_role(github_user, github_repo)\n\n    if len(resp['deleted_roles']) > 1:\n        display.display(\"Deleted the following roles:\")\n        display.display(\"ID     User            Name\")\n        display.display(\"------ --------------- ----------\")\n        for role in resp['deleted_roles']:\n            display.display(\"%-8s %-15s %s\" % (role.id, role.namespace, role.name))\n\n    display.display(resp['status'])\n\n    return True",
                "def server_config_def(section, key, required):\n    return {\n        'description': 'The %s of the %s Galaxy server' % (key, section),\n        'ini': [\n            {\n                'section': 'galaxy_server.%s' % section,\n                'key': key,\n            }\n        ],\n        'env': [\n            {'name': 'ANSIBLE_GALAXY_SERVER_%s_%s' % (section.upper(), key.upper())},\n        ],\n        'required': required,\n    }",
                "def parse_role_req(requirement):\n    if \"include\" not in requirement:\n        role = RoleRequirement.role_yaml_parse(requirement)\n        display.vvv(\"found role %s in yaml file\" % to_text(role))\n        if \"name\" not in role and \"src\" not in role:\n            raise AnsibleError(\"Must specify name or src for role\")\n        return [GalaxyRole(self.galaxy, self.api, **role)]\n    else:\n        b_include_path = to_bytes(requirement[\"include\"], errors=\"surrogate_or_strict\")\n        if not os.path.isfile(b_include_path):\n            raise AnsibleError(\"Failed to find include requirements file '%s' in '%s'\"\n                               % (to_native(b_include_path), to_native(requirements_file)))\n\n        with open(b_include_path, 'rb') as f_include:\n            try:\n                return [GalaxyRole(self.galaxy, self.api, **r) for r in\n                        (RoleRequirement.role_yaml_parse(i) for i in yaml.safe_load(f_include))]\n            except Exception as e:\n                raise AnsibleError(\"Unable to load data from include requirements file: %s %s\"\n                                   % (to_native(requirements_file), to_native(e)))",
                "def comment_ify(v):\n    if isinstance(v, list):\n        v = \". \".join([l.rstrip('.') for l in v])\n\n    v = link_pattern.sub(r\"\\1 <\\2>\", v)\n    v = const_pattern.sub(r\"'\\1'\", v)\n\n    return textwrap.fill(v, width=117, initial_indent=\"# \", subsequent_indent=\"# \", break_on_hyphens=False)",
                "def to_yaml(v):\n    return yaml.safe_dump(v, default_flow_style=False).rstrip()",
                "def _display_role(gr):\n    install_info = gr.install_info\n    version = None\n    if install_info:\n        version = install_info.get(\"version\", None)\n    if not version:\n        version = \"(unknown version)\"\n    display.display(\"- %s, %s\" % (gr.name, version))"
            ],
            "inscope_function_signatures": [
                "__init__(self, args)",
                "init_parser(self)",
                "add_init_options(self, parser, parents=None)",
                "add_remove_options(self, parser, parents=None)",
                "add_delete_options(self, parser, parents=None)",
                "add_list_options(self, parser, parents=None)",
                "add_search_options(self, parser, parents=None)",
                "add_import_options(self, parser, parents=None)",
                "add_setup_options(self, parser, parents=None)",
                "add_login_options(self, parser, parents=None)",
                "add_info_options(self, parser, parents=None)",
                "add_install_options(self, parser, parents=None)",
                "add_build_options(self, parser, parents=None)",
                "add_publish_options(self, parser, parents=None)",
                "post_process_args(self, options)",
                "run(self)",
                "api(self)",
                "_parse_requirements_file(self, requirements_file, allow_old_format=True)",
                "exit_without_ignore(rc=1)",
                "_display_role_info(role_info)",
                "_resolve_path(path)",
                "_get_skeleton_galaxy_yml(template_path, inject_data)",
                "execute_role(self)",
                "execute_collection(self)",
                "execute_build(self)",
                "execute_init(self)",
                "execute_info(self)",
                "execute_install(self)",
                "execute_remove(self)",
                "execute_list(self)",
                "execute_publish(self)",
                "execute_search(self)",
                "execute_login(self)",
                "execute_import(self)",
                "execute_setup(self)",
                "execute_delete(self)",
                "server_config_def(section, key, required)",
                "parse_role_req(requirement)",
                "comment_ify(v)",
                "to_yaml(v)",
                "_display_role(gr)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "type": [
                    6
                ],
                "display": [
                    1024,
                    1152,
                    904,
                    1161,
                    907,
                    911,
                    916,
                    1173,
                    1174,
                    1175,
                    1177,
                    922,
                    1179,
                    412,
                    925,
                    37,
                    294,
                    427,
                    942,
                    815,
                    944,
                    1074,
                    962,
                    969,
                    972,
                    1101,
                    1103,
                    1105,
                    1106,
                    1110,
                    1112,
                    1113,
                    858,
                    986,
                    861,
                    735,
                    994,
                    1123,
                    868,
                    872,
                    877,
                    883,
                    1140,
                    1142,
                    1143,
                    1145,
                    890,
                    894
                ],
                "Display": [
                    37
                ],
                "CLI": [
                    40
                ],
                "SKIP_INFO_KEYS": [
                    43
                ],
                "len": [
                    1099,
                    1036,
                    814,
                    367,
                    47,
                    1138,
                    1172
                ],
                "args": [
                    50,
                    51,
                    55,
                    47
                ],
                "idx": [
                    50,
                    51
                ],
                "startswith": [
                    50
                ],
                "args.insert": [
                    51
                ],
                "self.api_servers": [
                    360,
                    362,
                    364,
                    367,
                    368,
                    53,
                    374,
                    826,
                    475
                ],
                "self": [
                    128,
                    897,
                    772,
                    1160,
                    778,
                    270,
                    1170,
                    1046,
                    151,
                    283,
                    926,
                    159,
                    675,
                    164,
                    293,
                    804,
                    1059,
                    1064,
                    299,
                    172,
                    301,
                    430,
                    939,
                    53,
                    54,
                    55,
                    181,
                    367,
                    439,
                    826,
                    60,
                    368,
                    1092,
                    197,
                    967,
                    1095,
                    1007,
                    847,
                    213,
                    853,
                    1137,
                    475,
                    220,
                    476,
                    990,
                    95,
                    351,
                    1120,
                    102,
                    103,
                    104,
                    105,
                    360,
                    362,
                    364,
                    748,
                    759,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    240,
                    374,
                    884,
                    1020,
                    1151
                ],
                "self.galaxy": [
                    897,
                    675,
                    1059,
                    967,
                    362,
                    939,
                    748,
                    301,
                    430,
                    368,
                    853,
                    54,
                    439,
                    476,
                    990,
                    351
                ],
                "__init__": [
                    55
                ],
                "super": [
                    299,
                    60,
                    293,
                    55
                ],
                "GalaxyCLI": [
                    803,
                    293,
                    299,
                    811,
                    1003,
                    718,
                    596,
                    501,
                    55,
                    507,
                    60,
                    605
                ],
                "init_parser": [
                    128,
                    130,
                    133,
                    141,
                    145,
                    60,
                    125
                ],
                "common": [
                    65,
                    66,
                    67,
                    71,
                    73,
                    102,
                    103,
                    104,
                    105,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120
                ],
                "opt_help.argparse.ArgumentParser": [
                    65,
                    75,
                    79,
                    83,
                    88
                ],
                "opt_help.argparse": [
                    65,
                    75,
                    79,
                    83,
                    88
                ],
                "opt_help": [
                    65,
                    73,
                    75,
                    79,
                    83,
                    88,
                    89,
                    90
                ],
                "common.add_argument": [
                    66,
                    67,
                    71
                ],
                "C.GALAXY_IGNORE_CERTS": [
                    72
                ],
                "C": [
                    1024,
                    1152,
                    134,
                    672,
                    1056,
                    1057,
                    1066,
                    812,
                    1082,
                    1083,
                    1084,
                    1085,
                    321,
                    326,
                    72,
                    328,
                    1103,
                    1105,
                    1107,
                    87,
                    90,
                    368,
                    1142,
                    1143,
                    1146,
                    255
                ],
                "opt_help.add_verbosity_options": [
                    73
                ],
                "force": [
                    866,
                    867,
                    102,
                    103,
                    616,
                    105,
                    840,
                    75,
                    76,
                    664,
                    876,
                    111,
                    595,
                    789,
                    120,
                    827,
                    606
                ],
                "force.add_argument": [
                    76
                ],
                "github": [
                    79,
                    80,
                    81,
                    113,
                    116
                ],
                "github.add_argument": [
                    80,
                    81
                ],
                "offline": [
                    83,
                    84,
                    119,
                    111
                ],
                "offline.add_argument": [
                    84
                ],
                "default_roles_path": [
                    92,
                    87
                ],
                "get": [
                    87
                ],
                "C.config.get_configuration_definition": [
                    87
                ],
                "C.config": [
                    328,
                    326,
                    87
                ],
                "roles_path": [
                    742,
                    747,
                    975,
                    112,
                    114,
                    978,
                    117,
                    119,
                    88,
                    89,
                    120
                ],
                "roles_path.add_argument": [
                    89
                ],
                "opt_help.unfrack_path": [
                    89
                ],
                "C.DEFAULT_ROLES_PATH": [
                    90
                ],
                "opt_help.PrependListAction": [
                    90
                ],
                "type_parser": [
                    96,
                    99,
                    108,
                    95
                ],
                "self.parser.add_subparsers": [
                    95
                ],
                "self.parser": [
                    95
                ],
                "type_parser.required": [
                    96
                ],
                "collection": [
                    99,
                    100
                ],
                "type_parser.add_parser": [
                    99,
                    108
                ],
                "collection_parser": [
                    100,
                    101,
                    102,
                    103,
                    104,
                    105
                ],
                "collection.add_subparsers": [
                    100
                ],
                "collection_parser.required": [
                    101
                ],
                "self.add_init_options": [
                    102,
                    111
                ],
                "self.add_build_options": [
                    103
                ],
                "self.add_publish_options": [
                    104
                ],
                "self.add_install_options": [
                    120,
                    105
                ],
                "role": [
                    768,
                    776,
                    1035,
                    1036,
                    1042,
                    1043,
                    917,
                    1176,
                    1177,
                    925,
                    426,
                    427,
                    428,
                    939,
                    430,
                    941,
                    852,
                    853,
                    855,
                    857,
                    858,
                    861,
                    865,
                    866,
                    869,
                    870,
                    745,
                    873,
                    108,
                    109,
                    748,
                    877,
                    881,
                    883,
                    759,
                    889,
                    890,
                    892
                ],
                "role_parser": [
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120
                ],
                "role.add_subparsers": [
                    109
                ],
                "role_parser.required": [
                    110
                ],
                "self.add_remove_options": [
                    112
                ],
                "self.add_delete_options": [
                    113
                ],
                "self.add_list_options": [
                    114
                ],
                "self.add_search_options": [
                    115
                ],
                "self.add_import_options": [
                    116
                ],
                "self.add_setup_options": [
                    117
                ],
                "self.add_login_options": [
                    118
                ],
                "self.add_info_options": [
                    119
                ],
                "galaxy_type": [
                    640,
                    132,
                    133,
                    136,
                    139,
                    141,
                    144,
                    683,
                    696,
                    709,
                    735,
                    225,
                    228,
                    614,
                    617,
                    619,
                    123,
                    622,
                    239,
                    625,
                    242,
                    248,
                    251,
                    253,
                    127
                ],
                "parser.metavar": [
                    225,
                    123
                ],
                "parser": [
                    225,
                    162,
                    195,
                    169,
                    267,
                    237,
                    219,
                    210,
                    180,
                    150,
                    281,
                    123,
                    156,
                    125
                ],
                "parser.add_parser": [
                    162,
                    195,
                    169,
                    267,
                    237,
                    210,
                    180,
                    150,
                    281,
                    219,
                    156,
                    125
                ],
                "parents": [
                    162,
                    195,
                    169,
                    267,
                    237,
                    210,
                    180,
                    150,
                    281,
                    219,
                    156,
                    125
                ],
                "format": [
                    131,
                    133,
                    135,
                    617,
                    682,
                    619,
                    141,
                    238,
                    622,
                    242,
                    248,
                    250,
                    126
                ],
                "init_parser.set_defaults": [
                    128
                ],
                "self.execute_init": [
                    128
                ],
                "init_parser.add_argument": [
                    145,
                    130,
                    133,
                    141
                ],
                "C.GALAXY_ROLE_SKELETON": [
                    134
                ],
                "obj_name_kwargs": [
                    138,
                    140,
                    142
                ],
                "validate_collection_name": [
                    140
                ],
                "galaxy_type.capitalize": [
                    141
                ],
                "remove_parser": [
                    153,
                    150,
                    151
                ],
                "remove_parser.set_defaults": [
                    151
                ],
                "self.execute_remove": [
                    151
                ],
                "remove_parser.add_argument": [
                    153
                ],
                "delete_parser": [
                    156,
                    159
                ],
                "delete_parser.set_defaults": [
                    159
                ],
                "self.execute_delete": [
                    159
                ],
                "list_parser": [
                    162,
                    164,
                    166
                ],
                "list_parser.set_defaults": [
                    164
                ],
                "self.execute_list": [
                    164
                ],
                "list_parser.add_argument": [
                    166
                ],
                "search_parser": [
                    169,
                    172,
                    174,
                    175,
                    176,
                    177
                ],
                "search_parser.set_defaults": [
                    172
                ],
                "self.execute_search": [
                    172
                ],
                "search_parser.add_argument": [
                    176,
                    177,
                    174,
                    175
                ],
                "import_parser": [
                    180,
                    181,
                    183,
                    185,
                    188,
                    190
                ],
                "import_parser.set_defaults": [
                    181
                ],
                "self.execute_import": [
                    181
                ],
                "import_parser.add_argument": [
                    185,
                    188,
                    190,
                    183
                ],
                "setup_parser": [
                    195,
                    197,
                    199,
                    202,
                    204,
                    205,
                    206,
                    207
                ],
                "setup_parser.set_defaults": [
                    197
                ],
                "self.execute_setup": [
                    197
                ],
                "setup_parser.add_argument": [
                    199,
                    202,
                    204,
                    205,
                    206,
                    207
                ],
                "login_parser": [
                    210,
                    213,
                    215
                ],
                "login_parser.set_defaults": [
                    213
                ],
                "self.execute_login": [
                    213
                ],
                "login_parser.add_argument": [
                    215
                ],
                "info_parser": [
                    219,
                    220,
                    222
                ],
                "info_parser.set_defaults": [
                    220
                ],
                "self.execute_info": [
                    220
                ],
                "info_parser.add_argument": [
                    222
                ],
                "args_kwargs": [
                    242,
                    234,
                    227,
                    229
                ],
                "ignore_errors_help": [
                    235,
                    244,
                    231
                ],
                "install_parser": [
                    257,
                    260,
                    262,
                    237,
                    240,
                    242,
                    243,
                    246,
                    254
                ],
                "install_parser.set_defaults": [
                    240
                ],
                "self.execute_install": [
                    240
                ],
                "install_parser.add_argument": [
                    257,
                    260,
                    262,
                    242,
                    243,
                    254
                ],
                "install_exclusive": [
                    249,
                    246,
                    247
                ],
                "install_parser.add_mutually_exclusive_group": [
                    246
                ],
                "install_exclusive.add_argument": [
                    249,
                    247
                ],
                "C.COLLECTIONS_PATHS": [
                    812,
                    255
                ],
                "build_parser": [
                    272,
                    267,
                    276,
                    270
                ],
                "build_parser.set_defaults": [
                    270
                ],
                "self.execute_build": [
                    270
                ],
                "build_parser.add_argument": [
                    272,
                    276
                ],
                "publish_parser": [
                    289,
                    281,
                    283,
                    285,
                    287
                ],
                "publish_parser.set_defaults": [
                    283
                ],
                "self.execute_publish": [
                    283
                ],
                "publish_parser.add_argument": [
                    289,
                    285,
                    287
                ],
                "int": [
                    289
                ],
                "options": [
                    293,
                    294,
                    295
                ],
                "post_process_args": [
                    293
                ],
                "display.verbosity": [
                    294
                ],
                "options.verbosity": [
                    294
                ],
                "run": [
                    299
                ],
                "Galaxy": [
                    301
                ],
                "key": [
                    305,
                    309,
                    313,
                    506,
                    507,
                    509
                ],
                "section": [
                    305,
                    308,
                    313
                ],
                "section.upper": [
                    313
                ],
                "key.upper": [
                    313
                ],
                "required": [
                    315
                ],
                "server_def": [
                    324,
                    317
                ],
                "config_servers": [
                    320,
                    364,
                    358,
                    351
                ],
                "server_key": [
                    321,
                    324,
                    326,
                    328,
                    351
                ],
                "C.GALAXY_SERVER_LIST": [
                    321
                ],
                "config_dict": [
                    324,
                    325
                ],
                "dict": [
                    643,
                    324,
                    621,
                    465,
                    626,
                    504
                ],
                "k": [
                    324,
                    499,
                    501,
                    504,
                    505,
                    506,
                    509,
                    511
                ],
                "server_config_def": [
                    324
                ],
                "req": [
                    768,
                    324,
                    767
                ],
                "defs": [
                    325,
                    326
                ],
                "get_single_data": [
                    325
                ],
                "AnsibleLoader": [
                    325
                ],
                "yaml.safe_dump": [
                    325,
                    558
                ],
                "yaml": [
                    440,
                    325,
                    558,
                    415
                ],
                "C.config.initialize_plugin_configuration_definitions": [
                    326
                ],
                "server_options": [
                    328,
                    331,
                    332,
                    333,
                    336,
                    339,
                    340,
                    344,
                    349,
                    351
                ],
                "C.config.get_plugin_options": [
                    328
                ],
                "auth_url": [
                    345,
                    331,
                    343
                ],
                "server_options.pop": [
                    331
                ],
                "token_val": [
                    344,
                    332,
                    349,
                    342
                ],
                "NoTokenSentinel": [
                    332
                ],
                "username": [
                    338,
                    339,
                    333
                ],
                "BasicAuthToken": [
                    339
                ],
                "KeycloakToken": [
                    344
                ],
                "context.CLIARGS": [
                    1155,
                    1156,
                    1157,
                    1158,
                    1168,
                    1169,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    1149,
                    1055,
                    1062,
                    935,
                    938,
                    1066,
                    831,
                    1088,
                    833,
                    1089,
                    1091,
                    964,
                    837,
                    838,
                    966,
                    840,
                    1096,
                    1097,
                    975,
                    595,
                    596,
                    851,
                    1111,
                    857,
                    346,
                    1115,
                    604,
                    353,
                    354,
                    614,
                    615,
                    616,
                    617,
                    490,
                    619,
                    742,
                    745,
                    1003,
                    1004,
                    1005,
                    1135,
                    370,
                    1015,
                    758,
                    631,
                    1014,
                    1017,
                    1020,
                    1021,
                    1151
                ],
                "context": [
                    1155,
                    1156,
                    1157,
                    1158,
                    1168,
                    1169,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    1149,
                    1055,
                    1062,
                    935,
                    938,
                    1066,
                    831,
                    1088,
                    833,
                    1089,
                    1091,
                    964,
                    837,
                    838,
                    966,
                    840,
                    1096,
                    1097,
                    975,
                    595,
                    596,
                    851,
                    1111,
                    857,
                    346,
                    1115,
                    604,
                    353,
                    354,
                    614,
                    615,
                    616,
                    617,
                    490,
                    619,
                    742,
                    745,
                    1003,
                    1004,
                    1005,
                    1135,
                    370,
                    1015,
                    758,
                    631,
                    1014,
                    1017,
                    1020,
                    1021,
                    1151
                ],
                "GalaxyToken": [
                    354,
                    349,
                    1071
                ],
                "config_servers.append": [
                    351
                ],
                "GalaxyAPI": [
                    368,
                    362,
                    476,
                    351
                ],
                "cmd_server": [
                    353,
                    362,
                    355,
                    358
                ],
                "cmd_token": [
                    368,
                    354,
                    362
                ],
                "config_server": [
                    360,
                    358,
                    359
                ],
                "next": [
                    475,
                    358
                ],
                "s": [
                    358
                ],
                "s.name": [
                    358
                ],
                "self.api_servers.append": [
                    360,
                    362,
                    368
                ],
                "C.GALAXY_SERVER": [
                    368
                ],
                "property": [
                    372
                ],
                "requirements": [
                    480,
                    482,
                    452,
                    804,
                    806,
                    809,
                    462,
                    403,
                    826,
                    478
                ],
                "b_requirements_file": [
                    408,
                    409,
                    413
                ],
                "to_bytes": [
                    521,
                    719,
                    432,
                    721,
                    659,
                    597,
                    822,
                    408,
                    731
                ],
                "requirements_file": [
                    802,
                    419,
                    803,
                    421,
                    422,
                    804,
                    435,
                    408,
                    793,
                    410,
                    443,
                    412,
                    797,
                    799
                ],
                "os.path.exists": [
                    681,
                    823,
                    689,
                    980,
                    661,
                    599,
                    409,
                    732
                ],
                "os.path": [
                    517,
                    657,
                    661,
                    662,
                    409,
                    678,
                    681,
                    433,
                    689,
                    819,
                    820,
                    693,
                    823,
                    705,
                    707,
                    969,
                    718,
                    719,
                    723,
                    724,
                    979,
                    980,
                    599,
                    727,
                    601,
                    728,
                    731,
                    732,
                    983,
                    639
                ],
                "os": [
                    517,
                    657,
                    661,
                    662,
                    409,
                    678,
                    681,
                    433,
                    689,
                    690,
                    692,
                    693,
                    694,
                    819,
                    820,
                    823,
                    824,
                    705,
                    707,
                    969,
                    718,
                    719,
                    723,
                    724,
                    979,
                    980,
                    599,
                    600,
                    601,
                    727,
                    728,
                    731,
                    732,
                    733,
                    983,
                    987,
                    639
                ],
                "AnsibleError": [
                    663,
                    665,
                    410,
                    798,
                    800,
                    417,
                    422,
                    682,
                    429,
                    434,
                    946,
                    442,
                    448,
                    458,
                    845,
                    468,
                    602,
                    491,
                    882,
                    1018
                ],
                "to_native": [
                    419,
                    422,
                    459,
                    683,
                    946,
                    435,
                    602,
                    663,
                    410,
                    443,
                    668
                ],
                "display.vvv": [
                    858,
                    427,
                    412,
                    861
                ],
                "open": [
                    720,
                    521,
                    413,
                    437
                ],
                "req_obj": [
                    413,
                    415
                ],
                "file_requirements": [
                    451,
                    456,
                    461,
                    464,
                    445,
                    415
                ],
                "yaml.safe_load": [
                    440,
                    415
                ],
                "YAMLError": [
                    416
                ],
                "err": [
                    419
                ],
                "requirement": [
                    808,
                    425,
                    426,
                    809,
                    432
                ],
                "RoleRequirement.role_yaml_parse": [
                    440,
                    426,
                    852
                ],
                "RoleRequirement": [
                    426,
                    767,
                    852,
                    440,
                    895
                ],
                "to_text": [
                    1088,
                    1089,
                    904,
                    522,
                    427,
                    496,
                    817,
                    883,
                    917
                ],
                "GalaxyRole": [
                    897,
                    967,
                    939,
                    748,
                    430,
                    853,
                    439,
                    990
                ],
                "self.api": [
                    897,
                    1160,
                    1170,
                    1064,
                    939,
                    430,
                    439,
                    1092,
                    967,
                    1095,
                    853,
                    990,
                    1120,
                    748,
                    1007,
                    1137,
                    759,
                    1020,
                    1151
                ],
                "b_include_path": [
                    432,
                    433,
                    435,
                    437
                ],
                "os.path.isfile": [
                    601,
                    433,
                    662
                ],
                "f_include": [
                    440,
                    437
                ],
                "r": [
                    707,
                    702,
                    439
                ],
                "i": [
                    440
                ],
                "Exception": [
                    441,
                    945
                ],
                "e": [
                    883,
                    946,
                    443
                ],
                "isinstance": [
                    504,
                    465,
                    549,
                    445
                ],
                "list": [
                    549,
                    445
                ],
                "allow_old_format": [
                    447
                ],
                "role_req": [
                    451,
                    452,
                    461,
                    462
                ],
                "parse_role_req": [
                    452,
                    462
                ],
                "extra_keys": [
                    456,
                    457,
                    459
                ],
                "difference": [
                    456
                ],
                "set": [
                    456
                ],
                "file_requirements.keys": [
                    456
                ],
                "join": [
                    513,
                    550,
                    459,
                    817,
                    1045,
                    1015
                ],
                "file_requirements.get": [
                    464,
                    461
                ],
                "collection_req": [
                    480,
                    464,
                    465,
                    466,
                    470,
                    471
                ],
                "req_name": [
                    466,
                    467,
                    476,
                    478
                ],
                "collection_req.get": [
                    466,
                    470,
                    471
                ],
                "req_version": [
                    478,
                    470
                ],
                "req_source": [
                    471,
                    472,
                    475,
                    476,
                    478
                ],
                "iter": [
                    475
                ],
                "a": [
                    475
                ],
                "a.name": [
                    475
                ],
                "a.api_server": [
                    475
                ],
                "append": [
                    480,
                    478
                ],
                "staticmethod": [
                    515,
                    484,
                    493,
                    519
                ],
                "text": [
                    513,
                    496,
                    497,
                    505,
                    509,
                    511
                ],
                "role_info": [
                    770,
                    762,
                    772,
                    765,
                    747,
                    496,
                    497,
                    499,
                    755,
                    504,
                    506,
                    509,
                    511
                ],
                "text.append": [
                    497,
                    505,
                    509,
                    511
                ],
                "role_info.get": [
                    497
                ],
                "sorted": [
                    506,
                    499
                ],
                "role_info.keys": [
                    499
                ],
                "GalaxyCLI.SKIP_INFO_KEYS": [
                    507,
                    501
                ],
                "keys": [
                    506
                ],
                "os.path.abspath": [
                    517
                ],
                "os.path.expanduser": [
                    979,
                    517,
                    678
                ],
                "os.path.expandvars": [
                    517
                ],
                "path": [
                    978,
                    979,
                    517,
                    990
                ],
                "template_path": [
                    521
                ],
                "template_obj": [
                    521,
                    522
                ],
                "meta_template": [
                    522,
                    564
                ],
                "template_obj.read": [
                    522
                ],
                "galaxy_meta": [
                    528,
                    524
                ],
                "get_collections_galaxy_meta_info": [
                    524
                ],
                "required_config": [
                    529,
                    565,
                    526
                ],
                "optional_config": [
                    529,
                    565,
                    527
                ],
                "meta_entry": [
                    528,
                    529,
                    531,
                    533,
                    542,
                    543
                ],
                "config_list": [
                    529,
                    543
                ],
                "meta_entry.get": [
                    529,
                    533
                ],
                "value": [
                    531,
                    532,
                    536,
                    538,
                    540,
                    542
                ],
                "inject_data.get": [
                    531
                ],
                "inject_data": [
                    643,
                    715,
                    621,
                    626,
                    531,
                    725
                ],
                "meta_type": [
                    537,
                    539,
                    533,
                    535
                ],
                "config_list.append": [
                    543
                ],
                "link_pattern": [
                    552,
                    545
                ],
                "re.compile": [
                    545,
                    546,
                    679
                ],
                "re": [
                    545,
                    546,
                    679
                ],
                "const_pattern": [
                    553,
                    546
                ],
                "v": [
                    549,
                    550,
                    552,
                    553,
                    555,
                    558
                ],
                "l.rstrip": [
                    550
                ],
                "l": [
                    550
                ],
                "link_pattern.sub": [
                    552
                ],
                "const_pattern.sub": [
                    553
                ],
                "textwrap.fill": [
                    555
                ],
                "textwrap": [
                    555
                ],
                "rstrip": [
                    558
                ],
                "env": [
                    560,
                    561,
                    562,
                    564
                ],
                "Environment": [
                    560,
                    686
                ],
                "BaseLoader": [
                    560
                ],
                "env.filters": [
                    561,
                    562
                ],
                "comment_ify": [
                    561
                ],
                "to_yaml": [
                    562
                ],
                "template": [
                    564,
                    565
                ],
                "env.from_string": [
                    564
                ],
                "meta_value": [
                    721,
                    565,
                    718,
                    567
                ],
                "template.render": [
                    565
                ],
                "output_path": [
                    811,
                    814,
                    817,
                    819,
                    596,
                    597,
                    790,
                    820,
                    822,
                    602,
                    826,
                    606
                ],
                "GalaxyCLI._resolve_path": [
                    803,
                    811,
                    1003,
                    596,
                    605
                ],
                "b_output_path": [
                    823,
                    824,
                    597,
                    822,
                    599,
                    600,
                    601
                ],
                "os.makedirs": [
                    600,
                    690,
                    824,
                    733
                ],
                "collection_path": [
                    1003,
                    1007,
                    604,
                    605,
                    606
                ],
                "build_collection": [
                    606
                ],
                "init_path": [
                    657,
                    639,
                    615
                ],
                "obj_skeleton": [
                    675,
                    678,
                    681,
                    617,
                    683,
                    686,
                    692,
                    693,
                    727,
                    670
                ],
                "obj_name": [
                    641,
                    619,
                    639,
                    630,
                    735
                ],
                "get_versioned_doclink": [
                    623
                ],
                "inject_data.update": [
                    626,
                    643
                ],
                "ansible_version": [
                    636
                ],
                "obj_path": [
                    719,
                    657,
                    659,
                    724,
                    662,
                    663,
                    728,
                    731,
                    668,
                    639
                ],
                "os.path.join": [
                    707,
                    718,
                    719,
                    657,
                    723,
                    724,
                    820,
                    727,
                    728,
                    731,
                    639
                ],
                "namespace": [
                    641,
                    657,
                    644
                ],
                "collection_name": [
                    641,
                    657,
                    645
                ],
                "obj_name.split": [
                    641
                ],
                "b_obj_path": [
                    689,
                    690,
                    659,
                    661
                ],
                "own_skeleton": [
                    674,
                    709,
                    671
                ],
                "skeleton_ignore_expressions": [
                    672,
                    676,
                    679
                ],
                "C.GALAXY_ROLE_SKELETON_IGNORE": [
                    672
                ],
                "self.galaxy.default_role_skeleton_path": [
                    675
                ],
                "skeleton_ignore_re": [
                    707,
                    702,
                    679
                ],
                "x": [
                    679
                ],
                "template_env": [
                    725,
                    686
                ],
                "FileSystemLoader": [
                    686
                ],
                "root": [
                    718,
                    692,
                    693,
                    727,
                    728
                ],
                "dirs": [
                    730,
                    692,
                    702
                ],
                "files": [
                    704,
                    692
                ],
                "os.walk": [
                    692
                ],
                "rel_root": [
                    707,
                    709,
                    718,
                    719,
                    723,
                    724,
                    693,
                    694,
                    731
                ],
                "os.path.relpath": [
                    693,
                    727
                ],
                "rel_dirs": [
                    698,
                    694,
                    695
                ],
                "rel_root.split": [
                    694
                ],
                "os.sep": [
                    694
                ],
                "rel_root_dir": [
                    698,
                    700,
                    695
                ],
                "in_templates_dir": [
                    722,
                    698,
                    700
                ],
                "d": [
                    730,
                    731,
                    702
                ],
                "any": [
                    707,
                    702
                ],
                "r.match": [
                    707,
                    702
                ],
                "f": [
                    704,
                    705,
                    707,
                    709,
                    718,
                    723,
                    727,
                    728
                ],
                "filename": [
                    705,
                    724,
                    719
                ],
                "ext": [
                    705,
                    722
                ],
                "os.path.splitext": [
                    705
                ],
                "template_data": [
                    715,
                    716,
                    718
                ],
                "inject_data.copy": [
                    715
                ],
                "template_data.pop": [
                    716
                ],
                "GalaxyCLI._get_skeleton_galaxy_yml": [
                    718
                ],
                "b_dest_file": [
                    720,
                    719
                ],
                "galaxy_obj": [
                    720,
                    721
                ],
                "galaxy_obj.write": [
                    721
                ],
                "src_template": [
                    723,
                    725
                ],
                "dest_file": [
                    724,
                    725
                ],
                "dump": [
                    725
                ],
                "stream": [
                    725
                ],
                "template_env.get_template": [
                    725
                ],
                "f_rel_path": [
                    728,
                    727
                ],
                "shutil.copyfile": [
                    728
                ],
                "shutil": [
                    728
                ],
                "b_dir_path": [
                    731,
                    732,
                    733
                ],
                "display.display": [
                    1024,
                    1152,
                    904,
                    1161,
                    907,
                    911,
                    1173,
                    1174,
                    1175,
                    1177,
                    922,
                    1179,
                    942,
                    944,
                    1074,
                    962,
                    969,
                    972,
                    1101,
                    1103,
                    1105,
                    1106,
                    1110,
                    1112,
                    1113,
                    986,
                    735,
                    1123,
                    868,
                    877,
                    1140,
                    1142,
                    1143,
                    1145
                ],
                "galaxy_type.title": [
                    735
                ],
                "data": [
                    1027,
                    772,
                    1030,
                    775,
                    744,
                    776,
                    778,
                    1032,
                    1039,
                    1040,
                    1041,
                    1043,
                    1045,
                    1046
                ],
                "gr": [
                    992,
                    962,
                    764,
                    967,
                    968,
                    969,
                    970,
                    748,
                    750,
                    956,
                    765,
                    990,
                    991
                ],
                "install_info": [
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    956,
                    958,
                    959
                ],
                "gr.install_info": [
                    956,
                    750
                ],
                "role_info.update": [
                    770,
                    762,
                    755,
                    765
                ],
                "remote_data": [
                    761,
                    762,
                    757,
                    759
                ],
                "self.api.lookup_role_by_name": [
                    759
                ],
                "gr.metadata": [
                    968,
                    764,
                    765,
                    991
                ],
                "role_spec": [
                    768,
                    769,
                    770
                ],
                "req.role_yaml_parse": [
                    768
                ],
                "self._display_role_info": [
                    772
                ],
                "self.pager": [
                    778,
                    1046
                ],
                "collections": [
                    807,
                    788,
                    797,
                    799
                ],
                "ignore_certs": [
                    826,
                    791
                ],
                "ignore_errors": [
                    792,
                    826
                ],
                "no_deps": [
                    888,
                    794,
                    827,
                    837
                ],
                "force_deps": [
                    795,
                    838,
                    840,
                    910,
                    919,
                    827
                ],
                "self._parse_requirements_file": [
                    804,
                    847
                ],
                "collection_input": [
                    808,
                    807
                ],
                "name": [
                    966,
                    967,
                    808,
                    809,
                    972
                ],
                "dummy": [
                    808
                ],
                "collection_input.partition": [
                    808
                ],
                "requirements.append": [
                    809
                ],
                "collections_path": [
                    817,
                    812,
                    814
                ],
                "p": [
                    814
                ],
                "p.startswith": [
                    814
                ],
                "display.warning": [
                    994,
                    872,
                    815,
                    883,
                    916,
                    890,
                    925
                ],
                "os.path.split": [
                    819
                ],
                "install_collections": [
                    826
                ],
                "role_file": [
                    833,
                    843,
                    844,
                    847,
                    857,
                    831
                ],
                "AnsibleOptionsError": [
                    936,
                    835,
                    996
                ],
                "roles_left": [
                    903,
                    905,
                    842,
                    847,
                    914,
                    853,
                    855,
                    920
                ],
                "role_file.endswith": [
                    844
                ],
                "rname": [
                    851,
                    852
                ],
                "rname.strip": [
                    852
                ],
                "roles_left.append": [
                    920,
                    905,
                    914,
                    853
                ],
                "role.name": [
                    1177,
                    869,
                    873,
                    925,
                    883,
                    917,
                    857,
                    858,
                    861
                ],
                "role.install_info": [
                    865,
                    866,
                    869,
                    873
                ],
                "role.version": [
                    873,
                    866,
                    869
                ],
                "role.remove": [
                    941,
                    870
                ],
                "str": [
                    877
                ],
                "installed": [
                    888,
                    881,
                    924
                ],
                "role.install": [
                    881
                ],
                "self.exit_without_ignore": [
                    884,
                    926
                ],
                "role.metadata": [
                    889,
                    892
                ],
                "role.path": [
                    890
                ],
                "role_dependencies": [
                    892,
                    893
                ],
                "role.metadata.get": [
                    892
                ],
                "dep": [
                    896,
                    893,
                    894
                ],
                "display.debug": [
                    894
                ],
                "dep_req": [
                    896,
                    895
                ],
                "dep_info": [
                    896,
                    897
                ],
                "dep_req.role_yaml_parse": [
                    896
                ],
                "dep_role": [
                    897,
                    898,
                    902,
                    903,
                    904,
                    905,
                    907,
                    909,
                    912,
                    913,
                    914,
                    917,
                    920,
                    922
                ],
                "dep_role.name": [
                    912,
                    898,
                    907,
                    922
                ],
                "dep_role.src": [
                    898
                ],
                "dep_role.scm": [
                    898
                ],
                "dep_role.install_info": [
                    912,
                    909,
                    902,
                    917
                ],
                "dep_role.version": [
                    912,
                    909,
                    917
                ],
                "dep_role.remove": [
                    913
                ],
                "role_name": [
                    938,
                    939,
                    942,
                    944,
                    946
                ],
                "version": [
                    960,
                    961,
                    962,
                    957,
                    959
                ],
                "install_info.get": [
                    959
                ],
                "gr.name": [
                    962
                ],
                "os.path.dirname": [
                    969
                ],
                "gr.path": [
                    969
                ],
                "_display_role": [
                    992,
                    970
                ],
                "path_found": [
                    976,
                    995,
                    988
                ],
                "warnings": [
                    984,
                    977,
                    993,
                    981
                ],
                "role_path": [
                    979,
                    980,
                    981,
                    983,
                    984,
                    986,
                    987
                ],
                "warnings.append": [
                    984,
                    981
                ],
                "os.path.isdir": [
                    983
                ],
                "path_files": [
                    987,
                    989
                ],
                "os.listdir": [
                    987
                ],
                "path_file": [
                    989,
                    990
                ],
                "w": [
                    993,
                    994
                ],
                "wait": [
                    1004,
                    1007
                ],
                "timeout": [
                    1005,
                    1007
                ],
                "publish_collection": [
                    1007
                ],
                "page_size": [
                    1029,
                    1011,
                    1021,
                    1030
                ],
                "search": [
                    1017,
                    1012,
                    1020,
                    1015
                ],
                "response": [
                    1029,
                    1030,
                    1032,
                    1035,
                    1042,
                    1020,
                    1023
                ],
                "self.api.search_roles": [
                    1020
                ],
                "C.COLOR_ERROR": [
                    1024,
                    1083,
                    1085
                ],
                "data.append": [
                    1030,
                    1032,
                    1039,
                    1040,
                    1041,
                    1043
                ],
                "max_len": [
                    1034,
                    1036,
                    1037
                ],
                "max_len.append": [
                    1036
                ],
                "name_len": [
                    1037,
                    1038
                ],
                "max": [
                    1037
                ],
                "format_str": [
                    1040,
                    1041,
                    1043,
                    1038
                ],
                "C.GALAXY_TOKEN": [
                    1056,
                    1057,
                    1066
                ],
                "github_token": [
                    1064,
                    1057,
                    1060,
                    1062
                ],
                "login": [
                    1059,
                    1060,
                    1068
                ],
                "GalaxyLogin": [
                    1059
                ],
                "login.create_github_token": [
                    1060
                ],
                "galaxy_response": [
                    1064,
                    1072,
                    1074
                ],
                "self.api.authenticate": [
                    1064
                ],
                "login.remove_github_token": [
                    1068
                ],
                "token": [
                    1072,
                    1071
                ],
                "token.set": [
                    1072
                ],
                "colors": [
                    1080,
                    1123
                ],
                "C.COLOR_WARN": [
                    1082
                ],
                "C.COLOR_OK": [
                    1152,
                    1142,
                    1143,
                    1146,
                    1084
                ],
                "github_user": [
                    1088,
                    1092,
                    1156,
                    1095,
                    1160,
                    1101,
                    1168,
                    1106,
                    1170
                ],
                "github_repo": [
                    1089,
                    1092,
                    1157,
                    1095,
                    1160,
                    1101,
                    1169,
                    1106,
                    1170
                ],
                "task": [
                    1120,
                    1121,
                    1092,
                    1125,
                    1095,
                    1099,
                    1104,
                    1110,
                    1112,
                    1113
                ],
                "self.api.get_import_task": [
                    1120,
                    1092
                ],
                "self.api.create_import_task": [
                    1095
                ],
                "C.COLOR_CHANGED": [
                    1105,
                    1107,
                    1103
                ],
                "t": [
                    1104,
                    1105
                ],
                "msg_list": [
                    1122,
                    1124,
                    1117
                ],
                "finished": [
                    1126,
                    1118,
                    1119
                ],
                "msg": [
                    1121,
                    1122,
                    1123,
                    1124
                ],
                "msg_list.append": [
                    1124
                ],
                "time.sleep": [
                    1128
                ],
                "time": [
                    1128
                ],
                "secrets": [
                    1144,
                    1137,
                    1138
                ],
                "self.api.list_secrets": [
                    1137
                ],
                "secret": [
                    1158,
                    1160,
                    1144,
                    1145,
                    1146
                ],
                "self.api.remove_secret": [
                    1151
                ],
                "source": [
                    1160,
                    1155
                ],
                "resp": [
                    1160,
                    1161,
                    1170,
                    1172,
                    1176,
                    1179
                ],
                "self.api.add_secret": [
                    1160
                ],
                "self.api.delete_role": [
                    1170
                ],
                "role.id": [
                    1177
                ],
                "role.namespace": [
                    1177
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "display": [
                    1024,
                    1152,
                    904,
                    1161,
                    907,
                    911,
                    916,
                    1173,
                    1174,
                    1175,
                    1177,
                    922,
                    1179,
                    412,
                    925,
                    37,
                    294,
                    427,
                    942,
                    815,
                    944,
                    1074,
                    962,
                    969,
                    972,
                    1101,
                    1103,
                    1105,
                    1106,
                    1110,
                    1112,
                    1113,
                    858,
                    986,
                    861,
                    735,
                    994,
                    1123,
                    868,
                    872,
                    877,
                    883,
                    1140,
                    1142,
                    1143,
                    1145,
                    890,
                    894
                ],
                "Display": [
                    37
                ],
                "CLI": [
                    40
                ],
                "SKIP_INFO_KEYS": [
                    43
                ],
                "args": [
                    50,
                    51,
                    55,
                    47
                ],
                "idx": [
                    50,
                    51
                ],
                "startswith": [
                    50
                ],
                "args.insert": [
                    51
                ],
                "self.api_servers": [
                    360,
                    362,
                    364,
                    367,
                    368,
                    53,
                    374,
                    826,
                    475
                ],
                "self": [
                    128,
                    897,
                    772,
                    1160,
                    778,
                    270,
                    1170,
                    1046,
                    151,
                    283,
                    926,
                    159,
                    675,
                    164,
                    293,
                    804,
                    1059,
                    1064,
                    299,
                    172,
                    301,
                    430,
                    939,
                    53,
                    54,
                    55,
                    181,
                    367,
                    439,
                    826,
                    60,
                    368,
                    1092,
                    197,
                    967,
                    1095,
                    1007,
                    847,
                    213,
                    853,
                    1137,
                    475,
                    220,
                    476,
                    990,
                    95,
                    351,
                    1120,
                    102,
                    103,
                    104,
                    105,
                    360,
                    362,
                    364,
                    748,
                    759,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    240,
                    374,
                    884,
                    1020,
                    1151
                ],
                "self.galaxy": [
                    897,
                    675,
                    1059,
                    967,
                    362,
                    939,
                    748,
                    301,
                    430,
                    368,
                    853,
                    54,
                    439,
                    476,
                    990,
                    351
                ],
                "__init__": [
                    55
                ],
                "GalaxyCLI": [
                    803,
                    293,
                    299,
                    811,
                    1003,
                    718,
                    596,
                    501,
                    55,
                    507,
                    60,
                    605
                ],
                "init_parser": [
                    128,
                    130,
                    133,
                    141,
                    145,
                    60,
                    125
                ],
                "common": [
                    65,
                    66,
                    67,
                    71,
                    73,
                    102,
                    103,
                    104,
                    105,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120
                ],
                "opt_help.argparse.ArgumentParser": [
                    65,
                    75,
                    79,
                    83,
                    88
                ],
                "opt_help.argparse": [
                    65,
                    75,
                    79,
                    83,
                    88
                ],
                "opt_help": [
                    65,
                    73,
                    75,
                    79,
                    83,
                    88,
                    89,
                    90
                ],
                "common.add_argument": [
                    66,
                    67,
                    71
                ],
                "C.GALAXY_IGNORE_CERTS": [
                    72
                ],
                "C": [
                    1024,
                    1152,
                    134,
                    672,
                    1056,
                    1057,
                    1066,
                    812,
                    1082,
                    1083,
                    1084,
                    1085,
                    321,
                    326,
                    72,
                    328,
                    1103,
                    1105,
                    1107,
                    87,
                    90,
                    368,
                    1142,
                    1143,
                    1146,
                    255
                ],
                "opt_help.add_verbosity_options": [
                    73
                ],
                "force": [
                    866,
                    867,
                    102,
                    103,
                    616,
                    105,
                    840,
                    75,
                    76,
                    664,
                    876,
                    111,
                    595,
                    789,
                    120,
                    827,
                    606
                ],
                "force.add_argument": [
                    76
                ],
                "github": [
                    79,
                    80,
                    81,
                    113,
                    116
                ],
                "github.add_argument": [
                    80,
                    81
                ],
                "offline": [
                    83,
                    84,
                    119,
                    111
                ],
                "offline.add_argument": [
                    84
                ],
                "default_roles_path": [
                    92,
                    87
                ],
                "get": [
                    87
                ],
                "C.config.get_configuration_definition": [
                    87
                ],
                "C.config": [
                    328,
                    326,
                    87
                ],
                "roles_path": [
                    742,
                    747,
                    975,
                    112,
                    114,
                    978,
                    117,
                    119,
                    88,
                    89,
                    120
                ],
                "roles_path.add_argument": [
                    89
                ],
                "opt_help.unfrack_path": [
                    89
                ],
                "C.DEFAULT_ROLES_PATH": [
                    90
                ],
                "opt_help.PrependListAction": [
                    90
                ],
                "type_parser": [
                    96,
                    99,
                    108,
                    95
                ],
                "self.parser.add_subparsers": [
                    95
                ],
                "self.parser": [
                    95
                ],
                "type_parser.required": [
                    96
                ],
                "collection": [
                    99,
                    100
                ],
                "type_parser.add_parser": [
                    99,
                    108
                ],
                "collection_parser": [
                    100,
                    101,
                    102,
                    103,
                    104,
                    105
                ],
                "collection.add_subparsers": [
                    100
                ],
                "collection_parser.required": [
                    101
                ],
                "self.add_init_options": [
                    102,
                    111
                ],
                "self.add_build_options": [
                    103
                ],
                "self.add_publish_options": [
                    104
                ],
                "self.add_install_options": [
                    120,
                    105
                ],
                "role": [
                    768,
                    776,
                    1035,
                    1036,
                    1042,
                    1043,
                    917,
                    1176,
                    1177,
                    925,
                    426,
                    427,
                    428,
                    939,
                    430,
                    941,
                    852,
                    853,
                    855,
                    857,
                    858,
                    861,
                    865,
                    866,
                    869,
                    870,
                    745,
                    873,
                    108,
                    109,
                    748,
                    877,
                    881,
                    883,
                    759,
                    889,
                    890,
                    892
                ],
                "role_parser": [
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120
                ],
                "role.add_subparsers": [
                    109
                ],
                "role_parser.required": [
                    110
                ],
                "self.add_remove_options": [
                    112
                ],
                "self.add_delete_options": [
                    113
                ],
                "self.add_list_options": [
                    114
                ],
                "self.add_search_options": [
                    115
                ],
                "self.add_import_options": [
                    116
                ],
                "self.add_setup_options": [
                    117
                ],
                "self.add_login_options": [
                    118
                ],
                "self.add_info_options": [
                    119
                ],
                "galaxy_type": [
                    640,
                    132,
                    133,
                    136,
                    139,
                    141,
                    144,
                    683,
                    696,
                    709,
                    735,
                    225,
                    228,
                    614,
                    617,
                    619,
                    123,
                    622,
                    239,
                    625,
                    242,
                    248,
                    251,
                    253,
                    127
                ],
                "parser.metavar": [
                    225,
                    123
                ],
                "parser": [
                    225,
                    162,
                    195,
                    169,
                    267,
                    237,
                    219,
                    210,
                    180,
                    150,
                    281,
                    123,
                    156,
                    125
                ],
                "parser.add_parser": [
                    162,
                    195,
                    169,
                    267,
                    237,
                    210,
                    180,
                    150,
                    281,
                    219,
                    156,
                    125
                ],
                "parents": [
                    162,
                    195,
                    169,
                    267,
                    237,
                    210,
                    180,
                    150,
                    281,
                    219,
                    156,
                    125
                ],
                "init_parser.set_defaults": [
                    128
                ],
                "self.execute_init": [
                    128
                ],
                "init_parser.add_argument": [
                    145,
                    130,
                    133,
                    141
                ],
                "C.GALAXY_ROLE_SKELETON": [
                    134
                ],
                "obj_name_kwargs": [
                    138,
                    140,
                    142
                ],
                "validate_collection_name": [
                    140
                ],
                "galaxy_type.capitalize": [
                    141
                ],
                "remove_parser": [
                    153,
                    150,
                    151
                ],
                "remove_parser.set_defaults": [
                    151
                ],
                "self.execute_remove": [
                    151
                ],
                "remove_parser.add_argument": [
                    153
                ],
                "delete_parser": [
                    156,
                    159
                ],
                "delete_parser.set_defaults": [
                    159
                ],
                "self.execute_delete": [
                    159
                ],
                "list_parser": [
                    162,
                    164,
                    166
                ],
                "list_parser.set_defaults": [
                    164
                ],
                "self.execute_list": [
                    164
                ],
                "list_parser.add_argument": [
                    166
                ],
                "search_parser": [
                    169,
                    172,
                    174,
                    175,
                    176,
                    177
                ],
                "search_parser.set_defaults": [
                    172
                ],
                "self.execute_search": [
                    172
                ],
                "search_parser.add_argument": [
                    176,
                    177,
                    174,
                    175
                ],
                "import_parser": [
                    180,
                    181,
                    183,
                    185,
                    188,
                    190
                ],
                "import_parser.set_defaults": [
                    181
                ],
                "self.execute_import": [
                    181
                ],
                "import_parser.add_argument": [
                    185,
                    188,
                    190,
                    183
                ],
                "setup_parser": [
                    195,
                    197,
                    199,
                    202,
                    204,
                    205,
                    206,
                    207
                ],
                "setup_parser.set_defaults": [
                    197
                ],
                "self.execute_setup": [
                    197
                ],
                "setup_parser.add_argument": [
                    199,
                    202,
                    204,
                    205,
                    206,
                    207
                ],
                "login_parser": [
                    210,
                    213,
                    215
                ],
                "login_parser.set_defaults": [
                    213
                ],
                "self.execute_login": [
                    213
                ],
                "login_parser.add_argument": [
                    215
                ],
                "info_parser": [
                    219,
                    220,
                    222
                ],
                "info_parser.set_defaults": [
                    220
                ],
                "self.execute_info": [
                    220
                ],
                "info_parser.add_argument": [
                    222
                ],
                "args_kwargs": [
                    242,
                    234,
                    227,
                    229
                ],
                "ignore_errors_help": [
                    235,
                    244,
                    231
                ],
                "install_parser": [
                    257,
                    260,
                    262,
                    237,
                    240,
                    242,
                    243,
                    246,
                    254
                ],
                "install_parser.set_defaults": [
                    240
                ],
                "self.execute_install": [
                    240
                ],
                "install_parser.add_argument": [
                    257,
                    260,
                    262,
                    242,
                    243,
                    254
                ],
                "install_exclusive": [
                    249,
                    246,
                    247
                ],
                "install_parser.add_mutually_exclusive_group": [
                    246
                ],
                "install_exclusive.add_argument": [
                    249,
                    247
                ],
                "C.COLLECTIONS_PATHS": [
                    812,
                    255
                ],
                "build_parser": [
                    272,
                    267,
                    276,
                    270
                ],
                "build_parser.set_defaults": [
                    270
                ],
                "self.execute_build": [
                    270
                ],
                "build_parser.add_argument": [
                    272,
                    276
                ],
                "publish_parser": [
                    289,
                    281,
                    283,
                    285,
                    287
                ],
                "publish_parser.set_defaults": [
                    283
                ],
                "self.execute_publish": [
                    283
                ],
                "publish_parser.add_argument": [
                    289,
                    285,
                    287
                ],
                "options": [
                    293,
                    294,
                    295
                ],
                "post_process_args": [
                    293
                ],
                "display.verbosity": [
                    294
                ],
                "options.verbosity": [
                    294
                ],
                "run": [
                    299
                ],
                "Galaxy": [
                    301
                ],
                "key": [
                    305,
                    309,
                    313,
                    506,
                    507,
                    509
                ],
                "section": [
                    305,
                    308,
                    313
                ],
                "section.upper": [
                    313
                ],
                "key.upper": [
                    313
                ],
                "required": [
                    315
                ],
                "server_def": [
                    324,
                    317
                ],
                "config_servers": [
                    320,
                    364,
                    358,
                    351
                ],
                "server_key": [
                    321,
                    324,
                    326,
                    328,
                    351
                ],
                "C.GALAXY_SERVER_LIST": [
                    321
                ],
                "config_dict": [
                    324,
                    325
                ],
                "k": [
                    324,
                    499,
                    501,
                    504,
                    505,
                    506,
                    509,
                    511
                ],
                "server_config_def": [
                    324
                ],
                "req": [
                    768,
                    324,
                    767
                ],
                "defs": [
                    325,
                    326
                ],
                "get_single_data": [
                    325
                ],
                "AnsibleLoader": [
                    325
                ],
                "yaml.safe_dump": [
                    325,
                    558
                ],
                "yaml": [
                    440,
                    325,
                    558,
                    415
                ],
                "C.config.initialize_plugin_configuration_definitions": [
                    326
                ],
                "server_options": [
                    328,
                    331,
                    332,
                    333,
                    336,
                    339,
                    340,
                    344,
                    349,
                    351
                ],
                "C.config.get_plugin_options": [
                    328
                ],
                "auth_url": [
                    345,
                    331,
                    343
                ],
                "server_options.pop": [
                    331
                ],
                "token_val": [
                    344,
                    332,
                    349,
                    342
                ],
                "NoTokenSentinel": [
                    332
                ],
                "username": [
                    338,
                    339,
                    333
                ],
                "BasicAuthToken": [
                    339
                ],
                "KeycloakToken": [
                    344
                ],
                "context.CLIARGS": [
                    1155,
                    1156,
                    1157,
                    1158,
                    1168,
                    1169,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    1149,
                    1055,
                    1062,
                    935,
                    938,
                    1066,
                    831,
                    1088,
                    833,
                    1089,
                    1091,
                    964,
                    837,
                    838,
                    966,
                    840,
                    1096,
                    1097,
                    975,
                    595,
                    596,
                    851,
                    1111,
                    857,
                    346,
                    1115,
                    604,
                    353,
                    354,
                    614,
                    615,
                    616,
                    617,
                    490,
                    619,
                    742,
                    745,
                    1003,
                    1004,
                    1005,
                    1135,
                    370,
                    1015,
                    758,
                    631,
                    1014,
                    1017,
                    1020,
                    1021,
                    1151
                ],
                "context": [
                    1155,
                    1156,
                    1157,
                    1158,
                    1168,
                    1169,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    1149,
                    1055,
                    1062,
                    935,
                    938,
                    1066,
                    831,
                    1088,
                    833,
                    1089,
                    1091,
                    964,
                    837,
                    838,
                    966,
                    840,
                    1096,
                    1097,
                    975,
                    595,
                    596,
                    851,
                    1111,
                    857,
                    346,
                    1115,
                    604,
                    353,
                    354,
                    614,
                    615,
                    616,
                    617,
                    490,
                    619,
                    742,
                    745,
                    1003,
                    1004,
                    1005,
                    1135,
                    370,
                    1015,
                    758,
                    631,
                    1014,
                    1017,
                    1020,
                    1021,
                    1151
                ],
                "GalaxyToken": [
                    354,
                    349,
                    1071
                ],
                "config_servers.append": [
                    351
                ],
                "GalaxyAPI": [
                    368,
                    362,
                    476,
                    351
                ],
                "cmd_server": [
                    353,
                    362,
                    355,
                    358
                ],
                "cmd_token": [
                    368,
                    354,
                    362
                ],
                "config_server": [
                    360,
                    358,
                    359
                ],
                "s": [
                    358
                ],
                "s.name": [
                    358
                ],
                "self.api_servers.append": [
                    360,
                    362,
                    368
                ],
                "C.GALAXY_SERVER": [
                    368
                ],
                "requirements": [
                    480,
                    482,
                    452,
                    804,
                    806,
                    809,
                    462,
                    403,
                    826,
                    478
                ],
                "b_requirements_file": [
                    408,
                    409,
                    413
                ],
                "to_bytes": [
                    521,
                    719,
                    432,
                    721,
                    659,
                    597,
                    822,
                    408,
                    731
                ],
                "requirements_file": [
                    802,
                    419,
                    803,
                    421,
                    422,
                    804,
                    435,
                    408,
                    793,
                    410,
                    443,
                    412,
                    797,
                    799
                ],
                "os.path.exists": [
                    681,
                    823,
                    689,
                    980,
                    661,
                    599,
                    409,
                    732
                ],
                "os.path": [
                    517,
                    657,
                    661,
                    662,
                    409,
                    678,
                    681,
                    433,
                    689,
                    819,
                    820,
                    693,
                    823,
                    705,
                    707,
                    969,
                    718,
                    719,
                    723,
                    724,
                    979,
                    980,
                    599,
                    727,
                    601,
                    728,
                    731,
                    732,
                    983,
                    639
                ],
                "os": [
                    517,
                    657,
                    661,
                    662,
                    409,
                    678,
                    681,
                    433,
                    689,
                    690,
                    692,
                    693,
                    694,
                    819,
                    820,
                    823,
                    824,
                    705,
                    707,
                    969,
                    718,
                    719,
                    723,
                    724,
                    979,
                    980,
                    599,
                    600,
                    601,
                    727,
                    728,
                    731,
                    732,
                    733,
                    983,
                    987,
                    639
                ],
                "AnsibleError": [
                    663,
                    665,
                    410,
                    798,
                    800,
                    417,
                    422,
                    682,
                    429,
                    434,
                    946,
                    442,
                    448,
                    458,
                    845,
                    468,
                    602,
                    491,
                    882,
                    1018
                ],
                "to_native": [
                    419,
                    422,
                    459,
                    683,
                    946,
                    435,
                    602,
                    663,
                    410,
                    443,
                    668
                ],
                "display.vvv": [
                    858,
                    427,
                    412,
                    861
                ],
                "req_obj": [
                    413,
                    415
                ],
                "file_requirements": [
                    451,
                    456,
                    461,
                    464,
                    445,
                    415
                ],
                "yaml.safe_load": [
                    440,
                    415
                ],
                "YAMLError": [
                    416
                ],
                "err": [
                    419
                ],
                "requirement": [
                    808,
                    425,
                    426,
                    809,
                    432
                ],
                "RoleRequirement.role_yaml_parse": [
                    440,
                    426,
                    852
                ],
                "RoleRequirement": [
                    426,
                    767,
                    852,
                    440,
                    895
                ],
                "to_text": [
                    1088,
                    1089,
                    904,
                    522,
                    427,
                    496,
                    817,
                    883,
                    917
                ],
                "GalaxyRole": [
                    897,
                    967,
                    939,
                    748,
                    430,
                    853,
                    439,
                    990
                ],
                "self.api": [
                    897,
                    1160,
                    1170,
                    1064,
                    939,
                    430,
                    439,
                    1092,
                    967,
                    1095,
                    853,
                    990,
                    1120,
                    748,
                    1007,
                    1137,
                    759,
                    1020,
                    1151
                ],
                "b_include_path": [
                    432,
                    433,
                    435,
                    437
                ],
                "os.path.isfile": [
                    601,
                    433,
                    662
                ],
                "f_include": [
                    440,
                    437
                ],
                "r": [
                    707,
                    702,
                    439
                ],
                "i": [
                    440
                ],
                "e": [
                    883,
                    946,
                    443
                ],
                "allow_old_format": [
                    447
                ],
                "role_req": [
                    451,
                    452,
                    461,
                    462
                ],
                "parse_role_req": [
                    452,
                    462
                ],
                "extra_keys": [
                    456,
                    457,
                    459
                ],
                "difference": [
                    456
                ],
                "file_requirements.keys": [
                    456
                ],
                "join": [
                    513,
                    550,
                    459,
                    817,
                    1045,
                    1015
                ],
                "file_requirements.get": [
                    464,
                    461
                ],
                "collection_req": [
                    480,
                    464,
                    465,
                    466,
                    470,
                    471
                ],
                "req_name": [
                    466,
                    467,
                    476,
                    478
                ],
                "collection_req.get": [
                    466,
                    470,
                    471
                ],
                "req_version": [
                    478,
                    470
                ],
                "req_source": [
                    471,
                    472,
                    475,
                    476,
                    478
                ],
                "a": [
                    475
                ],
                "a.name": [
                    475
                ],
                "a.api_server": [
                    475
                ],
                "append": [
                    480,
                    478
                ],
                "text": [
                    513,
                    496,
                    497,
                    505,
                    509,
                    511
                ],
                "role_info": [
                    770,
                    762,
                    772,
                    765,
                    747,
                    496,
                    497,
                    499,
                    755,
                    504,
                    506,
                    509,
                    511
                ],
                "text.append": [
                    497,
                    505,
                    509,
                    511
                ],
                "role_info.get": [
                    497
                ],
                "role_info.keys": [
                    499
                ],
                "GalaxyCLI.SKIP_INFO_KEYS": [
                    507,
                    501
                ],
                "keys": [
                    506
                ],
                "os.path.abspath": [
                    517
                ],
                "os.path.expanduser": [
                    979,
                    517,
                    678
                ],
                "os.path.expandvars": [
                    517
                ],
                "path": [
                    978,
                    979,
                    517,
                    990
                ],
                "template_path": [
                    521
                ],
                "template_obj": [
                    521,
                    522
                ],
                "meta_template": [
                    522,
                    564
                ],
                "template_obj.read": [
                    522
                ],
                "galaxy_meta": [
                    528,
                    524
                ],
                "get_collections_galaxy_meta_info": [
                    524
                ],
                "required_config": [
                    529,
                    565,
                    526
                ],
                "optional_config": [
                    529,
                    565,
                    527
                ],
                "meta_entry": [
                    528,
                    529,
                    531,
                    533,
                    542,
                    543
                ],
                "config_list": [
                    529,
                    543
                ],
                "meta_entry.get": [
                    529,
                    533
                ],
                "value": [
                    531,
                    532,
                    536,
                    538,
                    540,
                    542
                ],
                "inject_data.get": [
                    531
                ],
                "inject_data": [
                    643,
                    715,
                    621,
                    626,
                    531,
                    725
                ],
                "meta_type": [
                    537,
                    539,
                    533,
                    535
                ],
                "config_list.append": [
                    543
                ],
                "link_pattern": [
                    552,
                    545
                ],
                "re.compile": [
                    545,
                    546,
                    679
                ],
                "re": [
                    545,
                    546,
                    679
                ],
                "const_pattern": [
                    553,
                    546
                ],
                "v": [
                    549,
                    550,
                    552,
                    553,
                    555,
                    558
                ],
                "l.rstrip": [
                    550
                ],
                "l": [
                    550
                ],
                "link_pattern.sub": [
                    552
                ],
                "const_pattern.sub": [
                    553
                ],
                "textwrap.fill": [
                    555
                ],
                "textwrap": [
                    555
                ],
                "rstrip": [
                    558
                ],
                "env": [
                    560,
                    561,
                    562,
                    564
                ],
                "Environment": [
                    560,
                    686
                ],
                "BaseLoader": [
                    560
                ],
                "env.filters": [
                    561,
                    562
                ],
                "comment_ify": [
                    561
                ],
                "to_yaml": [
                    562
                ],
                "template": [
                    564,
                    565
                ],
                "env.from_string": [
                    564
                ],
                "meta_value": [
                    721,
                    565,
                    718,
                    567
                ],
                "template.render": [
                    565
                ],
                "output_path": [
                    811,
                    814,
                    817,
                    819,
                    596,
                    597,
                    790,
                    820,
                    822,
                    602,
                    826,
                    606
                ],
                "GalaxyCLI._resolve_path": [
                    803,
                    811,
                    1003,
                    596,
                    605
                ],
                "b_output_path": [
                    823,
                    824,
                    597,
                    822,
                    599,
                    600,
                    601
                ],
                "os.makedirs": [
                    600,
                    690,
                    824,
                    733
                ],
                "collection_path": [
                    1003,
                    1007,
                    604,
                    605,
                    606
                ],
                "build_collection": [
                    606
                ],
                "init_path": [
                    657,
                    639,
                    615
                ],
                "obj_skeleton": [
                    675,
                    678,
                    681,
                    617,
                    683,
                    686,
                    692,
                    693,
                    727,
                    670
                ],
                "obj_name": [
                    641,
                    619,
                    639,
                    630,
                    735
                ],
                "get_versioned_doclink": [
                    623
                ],
                "inject_data.update": [
                    626,
                    643
                ],
                "ansible_version": [
                    636
                ],
                "obj_path": [
                    719,
                    657,
                    659,
                    724,
                    662,
                    663,
                    728,
                    731,
                    668,
                    639
                ],
                "os.path.join": [
                    707,
                    718,
                    719,
                    657,
                    723,
                    724,
                    820,
                    727,
                    728,
                    731,
                    639
                ],
                "namespace": [
                    641,
                    657,
                    644
                ],
                "collection_name": [
                    641,
                    657,
                    645
                ],
                "obj_name.split": [
                    641
                ],
                "b_obj_path": [
                    689,
                    690,
                    659,
                    661
                ],
                "own_skeleton": [
                    674,
                    709,
                    671
                ],
                "skeleton_ignore_expressions": [
                    672,
                    676,
                    679
                ],
                "C.GALAXY_ROLE_SKELETON_IGNORE": [
                    672
                ],
                "self.galaxy.default_role_skeleton_path": [
                    675
                ],
                "skeleton_ignore_re": [
                    707,
                    702,
                    679
                ],
                "x": [
                    679
                ],
                "template_env": [
                    725,
                    686
                ],
                "FileSystemLoader": [
                    686
                ],
                "root": [
                    718,
                    692,
                    693,
                    727,
                    728
                ],
                "dirs": [
                    730,
                    692,
                    702
                ],
                "files": [
                    704,
                    692
                ],
                "os.walk": [
                    692
                ],
                "rel_root": [
                    707,
                    709,
                    718,
                    719,
                    723,
                    724,
                    693,
                    694,
                    731
                ],
                "os.path.relpath": [
                    693,
                    727
                ],
                "rel_dirs": [
                    698,
                    694,
                    695
                ],
                "rel_root.split": [
                    694
                ],
                "os.sep": [
                    694
                ],
                "rel_root_dir": [
                    698,
                    700,
                    695
                ],
                "in_templates_dir": [
                    722,
                    698,
                    700
                ],
                "d": [
                    730,
                    731,
                    702
                ],
                "r.match": [
                    707,
                    702
                ],
                "f": [
                    704,
                    705,
                    707,
                    709,
                    718,
                    723,
                    727,
                    728
                ],
                "filename": [
                    705,
                    724,
                    719
                ],
                "ext": [
                    705,
                    722
                ],
                "os.path.splitext": [
                    705
                ],
                "template_data": [
                    715,
                    716,
                    718
                ],
                "inject_data.copy": [
                    715
                ],
                "template_data.pop": [
                    716
                ],
                "GalaxyCLI._get_skeleton_galaxy_yml": [
                    718
                ],
                "b_dest_file": [
                    720,
                    719
                ],
                "galaxy_obj": [
                    720,
                    721
                ],
                "galaxy_obj.write": [
                    721
                ],
                "src_template": [
                    723,
                    725
                ],
                "dest_file": [
                    724,
                    725
                ],
                "dump": [
                    725
                ],
                "stream": [
                    725
                ],
                "template_env.get_template": [
                    725
                ],
                "f_rel_path": [
                    728,
                    727
                ],
                "shutil.copyfile": [
                    728
                ],
                "shutil": [
                    728
                ],
                "b_dir_path": [
                    731,
                    732,
                    733
                ],
                "display.display": [
                    1024,
                    1152,
                    904,
                    1161,
                    907,
                    911,
                    1173,
                    1174,
                    1175,
                    1177,
                    922,
                    1179,
                    942,
                    944,
                    1074,
                    962,
                    969,
                    972,
                    1101,
                    1103,
                    1105,
                    1106,
                    1110,
                    1112,
                    1113,
                    986,
                    735,
                    1123,
                    868,
                    877,
                    1140,
                    1142,
                    1143,
                    1145
                ],
                "galaxy_type.title": [
                    735
                ],
                "data": [
                    1027,
                    772,
                    1030,
                    775,
                    744,
                    776,
                    778,
                    1032,
                    1039,
                    1040,
                    1041,
                    1043,
                    1045,
                    1046
                ],
                "gr": [
                    992,
                    962,
                    764,
                    967,
                    968,
                    969,
                    970,
                    748,
                    750,
                    956,
                    765,
                    990,
                    991
                ],
                "install_info": [
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    956,
                    958,
                    959
                ],
                "gr.install_info": [
                    956,
                    750
                ],
                "role_info.update": [
                    770,
                    762,
                    755,
                    765
                ],
                "remote_data": [
                    761,
                    762,
                    757,
                    759
                ],
                "self.api.lookup_role_by_name": [
                    759
                ],
                "gr.metadata": [
                    968,
                    764,
                    765,
                    991
                ],
                "role_spec": [
                    768,
                    769,
                    770
                ],
                "req.role_yaml_parse": [
                    768
                ],
                "self._display_role_info": [
                    772
                ],
                "self.pager": [
                    778,
                    1046
                ],
                "collections": [
                    807,
                    788,
                    797,
                    799
                ],
                "ignore_certs": [
                    826,
                    791
                ],
                "ignore_errors": [
                    792,
                    826
                ],
                "no_deps": [
                    888,
                    794,
                    827,
                    837
                ],
                "force_deps": [
                    795,
                    838,
                    840,
                    910,
                    919,
                    827
                ],
                "self._parse_requirements_file": [
                    804,
                    847
                ],
                "collection_input": [
                    808,
                    807
                ],
                "name": [
                    966,
                    967,
                    808,
                    809,
                    972
                ],
                "dummy": [
                    808
                ],
                "collection_input.partition": [
                    808
                ],
                "requirements.append": [
                    809
                ],
                "collections_path": [
                    817,
                    812,
                    814
                ],
                "p": [
                    814
                ],
                "p.startswith": [
                    814
                ],
                "display.warning": [
                    994,
                    872,
                    815,
                    883,
                    916,
                    890,
                    925
                ],
                "os.path.split": [
                    819
                ],
                "install_collections": [
                    826
                ],
                "role_file": [
                    833,
                    843,
                    844,
                    847,
                    857,
                    831
                ],
                "AnsibleOptionsError": [
                    936,
                    835,
                    996
                ],
                "roles_left": [
                    903,
                    905,
                    842,
                    847,
                    914,
                    853,
                    855,
                    920
                ],
                "role_file.endswith": [
                    844
                ],
                "rname": [
                    851,
                    852
                ],
                "rname.strip": [
                    852
                ],
                "roles_left.append": [
                    920,
                    905,
                    914,
                    853
                ],
                "role.name": [
                    1177,
                    869,
                    873,
                    925,
                    883,
                    917,
                    857,
                    858,
                    861
                ],
                "role.install_info": [
                    865,
                    866,
                    869,
                    873
                ],
                "role.version": [
                    873,
                    866,
                    869
                ],
                "role.remove": [
                    941,
                    870
                ],
                "installed": [
                    888,
                    881,
                    924
                ],
                "role.install": [
                    881
                ],
                "self.exit_without_ignore": [
                    884,
                    926
                ],
                "role.metadata": [
                    889,
                    892
                ],
                "role.path": [
                    890
                ],
                "role_dependencies": [
                    892,
                    893
                ],
                "role.metadata.get": [
                    892
                ],
                "dep": [
                    896,
                    893,
                    894
                ],
                "display.debug": [
                    894
                ],
                "dep_req": [
                    896,
                    895
                ],
                "dep_info": [
                    896,
                    897
                ],
                "dep_req.role_yaml_parse": [
                    896
                ],
                "dep_role": [
                    897,
                    898,
                    902,
                    903,
                    904,
                    905,
                    907,
                    909,
                    912,
                    913,
                    914,
                    917,
                    920,
                    922
                ],
                "dep_role.name": [
                    912,
                    898,
                    907,
                    922
                ],
                "dep_role.src": [
                    898
                ],
                "dep_role.scm": [
                    898
                ],
                "dep_role.install_info": [
                    912,
                    909,
                    902,
                    917
                ],
                "dep_role.version": [
                    912,
                    909,
                    917
                ],
                "dep_role.remove": [
                    913
                ],
                "role_name": [
                    938,
                    939,
                    942,
                    944,
                    946
                ],
                "version": [
                    960,
                    961,
                    962,
                    957,
                    959
                ],
                "install_info.get": [
                    959
                ],
                "gr.name": [
                    962
                ],
                "os.path.dirname": [
                    969
                ],
                "gr.path": [
                    969
                ],
                "_display_role": [
                    992,
                    970
                ],
                "path_found": [
                    976,
                    995,
                    988
                ],
                "warnings": [
                    984,
                    977,
                    993,
                    981
                ],
                "role_path": [
                    979,
                    980,
                    981,
                    983,
                    984,
                    986,
                    987
                ],
                "warnings.append": [
                    984,
                    981
                ],
                "os.path.isdir": [
                    983
                ],
                "path_files": [
                    987,
                    989
                ],
                "os.listdir": [
                    987
                ],
                "path_file": [
                    989,
                    990
                ],
                "w": [
                    993,
                    994
                ],
                "wait": [
                    1004,
                    1007
                ],
                "timeout": [
                    1005,
                    1007
                ],
                "publish_collection": [
                    1007
                ],
                "page_size": [
                    1029,
                    1011,
                    1021,
                    1030
                ],
                "search": [
                    1017,
                    1012,
                    1020,
                    1015
                ],
                "response": [
                    1029,
                    1030,
                    1032,
                    1035,
                    1042,
                    1020,
                    1023
                ],
                "self.api.search_roles": [
                    1020
                ],
                "C.COLOR_ERROR": [
                    1024,
                    1083,
                    1085
                ],
                "data.append": [
                    1030,
                    1032,
                    1039,
                    1040,
                    1041,
                    1043
                ],
                "max_len": [
                    1034,
                    1036,
                    1037
                ],
                "max_len.append": [
                    1036
                ],
                "name_len": [
                    1037,
                    1038
                ],
                "format_str": [
                    1040,
                    1041,
                    1043,
                    1038
                ],
                "C.GALAXY_TOKEN": [
                    1056,
                    1057,
                    1066
                ],
                "github_token": [
                    1064,
                    1057,
                    1060,
                    1062
                ],
                "login": [
                    1059,
                    1060,
                    1068
                ],
                "GalaxyLogin": [
                    1059
                ],
                "login.create_github_token": [
                    1060
                ],
                "galaxy_response": [
                    1064,
                    1072,
                    1074
                ],
                "self.api.authenticate": [
                    1064
                ],
                "login.remove_github_token": [
                    1068
                ],
                "token": [
                    1072,
                    1071
                ],
                "token.set": [
                    1072
                ],
                "colors": [
                    1080,
                    1123
                ],
                "C.COLOR_WARN": [
                    1082
                ],
                "C.COLOR_OK": [
                    1152,
                    1142,
                    1143,
                    1146,
                    1084
                ],
                "github_user": [
                    1088,
                    1092,
                    1156,
                    1095,
                    1160,
                    1101,
                    1168,
                    1106,
                    1170
                ],
                "github_repo": [
                    1089,
                    1092,
                    1157,
                    1095,
                    1160,
                    1101,
                    1169,
                    1106,
                    1170
                ],
                "task": [
                    1120,
                    1121,
                    1092,
                    1125,
                    1095,
                    1099,
                    1104,
                    1110,
                    1112,
                    1113
                ],
                "self.api.get_import_task": [
                    1120,
                    1092
                ],
                "self.api.create_import_task": [
                    1095
                ],
                "C.COLOR_CHANGED": [
                    1105,
                    1107,
                    1103
                ],
                "t": [
                    1104,
                    1105
                ],
                "msg_list": [
                    1122,
                    1124,
                    1117
                ],
                "finished": [
                    1126,
                    1118,
                    1119
                ],
                "msg": [
                    1121,
                    1122,
                    1123,
                    1124
                ],
                "msg_list.append": [
                    1124
                ],
                "time.sleep": [
                    1128
                ],
                "time": [
                    1128
                ],
                "secrets": [
                    1144,
                    1137,
                    1138
                ],
                "self.api.list_secrets": [
                    1137
                ],
                "secret": [
                    1158,
                    1160,
                    1144,
                    1145,
                    1146
                ],
                "self.api.remove_secret": [
                    1151
                ],
                "source": [
                    1160,
                    1155
                ],
                "resp": [
                    1160,
                    1161,
                    1170,
                    1172,
                    1176,
                    1179
                ],
                "self.api.add_secret": [
                    1160
                ],
                "self.api.delete_role": [
                    1170
                ],
                "role.id": [
                    1177
                ],
                "role.namespace": [
                    1177
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_13/lib/ansible/galaxy/collection.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_collection_info",
                    "function_code": "def _get_collection_info(dep_map, existing_collections, collection, requirement, source, b_temp_path, apis,\n                         validate_certs, force, parent=None):\n    dep_msg = \"\"\n    if parent:\n        dep_msg = \" - as dependency of %s\" % parent\n    display.vvv(\"Processing requirement collection '%s'%s\" % (to_text(collection), dep_msg))\n\n    b_tar_path = None\n    if os.path.isfile(to_bytes(collection, errors='surrogate_or_strict')):\n        display.vvvv(\"Collection requirement '%s' is a tar artifact\" % to_text(collection))\n        b_tar_path = to_bytes(collection, errors='surrogate_or_strict')\n    elif urlparse(collection).scheme:\n        display.vvvv(\"Collection requirement '%s' is a URL to a tar artifact\" % collection)\n        b_tar_path = _download_file(collection, b_temp_path, None, validate_certs)\n\n    if b_tar_path:\n        req = CollectionRequirement.from_tar(b_tar_path, force, parent=parent)\n\n        collection_name = to_text(req)\n        if collection_name in dep_map:\n            collection_info = dep_map[collection_name]\n            collection_info.add_requirement(None, req.latest_version)\n        else:\n            collection_info = req\n    else:\n        validate_collection_name(collection)\n\n        display.vvvv(\"Collection requirement '%s' is the name of a collection\" % collection)\n        if collection in dep_map:\n            collection_info = dep_map[collection]\n            collection_info.add_requirement(parent, requirement)\n        else:\n            apis = [source] if source else apis\n            collection_info = CollectionRequirement.from_name(collection, apis, requirement, force, parent=parent)\n\n    existing = [c for c in existing_collections if to_text(c) == to_text(collection_info)]\n    if existing and not collection_info.force:\n        # Test that the installed collection fits the requirement\n        existing[0].add_requirement(to_text(collection_info), requirement)\n        collection_info = existing[0]\n\n    dep_map[to_text(collection_info)] = collection_info\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 819,
                    "end_line": 860,
                    "variables": {
                        "dep_msg": [
                            824,
                            821,
                            823
                        ],
                        "parent": [
                            835,
                            849,
                            852,
                            822,
                            823
                        ],
                        "display.vvv": [
                            824
                        ],
                        "display": [
                            824,
                            828,
                            846,
                            831
                        ],
                        "to_text": [
                            837,
                            860,
                            854,
                            824,
                            857,
                            828
                        ],
                        "collection": [
                            832,
                            844,
                            846,
                            847,
                            848,
                            852,
                            824,
                            827,
                            828,
                            829,
                            830,
                            831
                        ],
                        "b_tar_path": [
                            832,
                            834,
                            835,
                            826,
                            829
                        ],
                        "os.path.isfile": [
                            827
                        ],
                        "os.path": [
                            827
                        ],
                        "os": [
                            827
                        ],
                        "to_bytes": [
                            827,
                            829
                        ],
                        "display.vvvv": [
                            828,
                            846,
                            831
                        ],
                        "scheme": [
                            830
                        ],
                        "urlparse": [
                            830
                        ],
                        "_download_file": [
                            832
                        ],
                        "b_temp_path": [
                            832
                        ],
                        "validate_certs": [
                            832
                        ],
                        "req": [
                            840,
                            842,
                            835,
                            837
                        ],
                        "CollectionRequirement.from_tar": [
                            835
                        ],
                        "CollectionRequirement": [
                            835,
                            852
                        ],
                        "force": [
                            835,
                            852
                        ],
                        "collection_name": [
                            837,
                            838,
                            839
                        ],
                        "dep_map": [
                            838,
                            839,
                            847,
                            848,
                            860
                        ],
                        "collection_info": [
                            839,
                            840,
                            842,
                            848,
                            849,
                            852,
                            854,
                            855,
                            857,
                            858,
                            860
                        ],
                        "collection_info.add_requirement": [
                            840,
                            849
                        ],
                        "req.latest_version": [
                            840
                        ],
                        "validate_collection_name": [
                            844
                        ],
                        "requirement": [
                            857,
                            849,
                            852
                        ],
                        "apis": [
                            851,
                            852
                        ],
                        "source": [
                            851
                        ],
                        "CollectionRequirement.from_name": [
                            852
                        ],
                        "existing": [
                            857,
                            858,
                            854,
                            855
                        ],
                        "c": [
                            854
                        ],
                        "existing_collections": [
                            854
                        ],
                        "collection_info.force": [
                            855
                        ],
                        "add_requirement": [
                            857
                        ]
                    },
                    "filtered_variables": {
                        "dep_msg": [
                            824,
                            821,
                            823
                        ],
                        "parent": [
                            835,
                            849,
                            852,
                            822,
                            823
                        ],
                        "display.vvv": [
                            824
                        ],
                        "display": [
                            824,
                            828,
                            846,
                            831
                        ],
                        "to_text": [
                            837,
                            860,
                            854,
                            824,
                            857,
                            828
                        ],
                        "collection": [
                            832,
                            844,
                            846,
                            847,
                            848,
                            852,
                            824,
                            827,
                            828,
                            829,
                            830,
                            831
                        ],
                        "b_tar_path": [
                            832,
                            834,
                            835,
                            826,
                            829
                        ],
                        "os.path.isfile": [
                            827
                        ],
                        "os.path": [
                            827
                        ],
                        "os": [
                            827
                        ],
                        "to_bytes": [
                            827,
                            829
                        ],
                        "display.vvvv": [
                            828,
                            846,
                            831
                        ],
                        "scheme": [
                            830
                        ],
                        "urlparse": [
                            830
                        ],
                        "_download_file": [
                            832
                        ],
                        "b_temp_path": [
                            832
                        ],
                        "validate_certs": [
                            832
                        ],
                        "req": [
                            840,
                            842,
                            835,
                            837
                        ],
                        "CollectionRequirement.from_tar": [
                            835
                        ],
                        "CollectionRequirement": [
                            835,
                            852
                        ],
                        "force": [
                            835,
                            852
                        ],
                        "collection_name": [
                            837,
                            838,
                            839
                        ],
                        "dep_map": [
                            838,
                            839,
                            847,
                            848,
                            860
                        ],
                        "collection_info": [
                            839,
                            840,
                            842,
                            848,
                            849,
                            852,
                            854,
                            855,
                            857,
                            858,
                            860
                        ],
                        "collection_info.add_requirement": [
                            840,
                            849
                        ],
                        "req.latest_version": [
                            840
                        ],
                        "validate_collection_name": [
                            844
                        ],
                        "requirement": [
                            857,
                            849,
                            852
                        ],
                        "apis": [
                            851,
                            852
                        ],
                        "source": [
                            851
                        ],
                        "CollectionRequirement.from_name": [
                            852
                        ],
                        "existing": [
                            857,
                            858,
                            854,
                            855
                        ],
                        "c": [
                            854
                        ],
                        "existing_collections": [
                            854
                        ],
                        "collection_info.force": [
                            855
                        ],
                        "add_requirement": [
                            857
                        ]
                    },
                    "diff_line_number": 830,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def build_collection(collection_path, output_path, force):\n    \"\"\"\n    Creates the Ansible collection artifact in a .tar.gz file.\n\n    :param collection_path: The path to the collection to build. This should be the directory that contains the\n        galaxy.yml file.\n    :param output_path: The path to create the collection build artifact. This should be a directory.\n    :param force: Whether to overwrite an existing collection build artifact or fail.\n    :return: The path to the collection build artifact.\n    \"\"\"\n    b_collection_path = to_bytes(collection_path, errors='surrogate_or_strict')\n    b_galaxy_path = os.path.join(b_collection_path, b'galaxy.yml')\n    if not os.path.exists(b_galaxy_path):\n        raise AnsibleError(\"The collection galaxy.yml path '%s' does not exist.\" % to_native(b_galaxy_path))\n\n    collection_meta = _get_galaxy_yml(b_galaxy_path)\n    file_manifest = _build_files_manifest(b_collection_path, collection_meta['namespace'], collection_meta['name'],\n                                          collection_meta['build_ignore'])\n    collection_manifest = _build_manifest(**collection_meta)\n\n    collection_output = os.path.join(output_path, \"%s-%s-%s.tar.gz\" % (collection_meta['namespace'],\n                                                                       collection_meta['name'],\n                                                                       collection_meta['version']))\n\n    b_collection_output = to_bytes(collection_output, errors='surrogate_or_strict')\n    if os.path.exists(b_collection_output):\n        if os.path.isdir(b_collection_output):\n            raise AnsibleError(\"The output collection artifact '%s' already exists, \"\n                               \"but is a directory - aborting\" % to_native(collection_output))\n        elif not force:\n            raise AnsibleError(\"The file '%s' already exists. You can use --force to re-create \"\n                               \"the collection artifact.\" % to_native(collection_output))\n\n    _build_collection_tar(b_collection_path, b_collection_output, collection_manifest, file_manifest)",
                "def publish_collection(collection_path, api, wait, timeout):\n    \"\"\"\n    Publish an Ansible collection tarball into an Ansible Galaxy server.\n\n    :param collection_path: The path to the collection tarball to publish.\n    :param api: A GalaxyAPI to publish the collection to.\n    :param wait: Whether to wait until the import process is complete.\n    :param timeout: The time in seconds to wait for the import process to finish, 0 is indefinite.\n    \"\"\"\n    import_uri = api.publish_collection(collection_path)\n\n    if wait:\n        # Galaxy returns a url fragment which differs between v2 and v3.  The second to last entry is\n        # always the task_id, though.\n        # v2: {\"task\": \"https://galaxy-dev.ansible.com/api/v2/collection-imports/35573/\"}\n        # v3: {\"task\": \"/api/automation-hub/v3/imports/collections/838d1308-a8f4-402c-95cb-7823f3806cd8/\"}\n        task_id = None\n        for path_segment in reversed(import_uri.split('/')):\n            if path_segment:\n                task_id = path_segment\n                break\n\n        if not task_id:\n            raise AnsibleError(\"Publishing the collection did not return valid task info. Cannot wait for task status. Returned task info: '%s'\" % import_uri)\n\n        display.display(\"Collection has been published to the Galaxy server %s %s\" % (api.name, api.api_server))\n        with _display_progress():\n            api.wait_import_task(task_id, timeout)\n        display.display(\"Collection has been successfully published and imported to the Galaxy server %s %s\"\n                        % (api.name, api.api_server))\n    else:\n        display.display(\"Collection has been pushed to the Galaxy server %s %s, not waiting until import has \"\n                        \"completed due to --no-wait being set. Import task results can be found at %s\"\n                        % (api.name, api.api_server, import_uri))",
                "def install_collections(collections, output_path, apis, validate_certs, ignore_errors, no_deps, force, force_deps):\n    \"\"\"\n    Install Ansible collections to the path specified.\n\n    :param collections: The collections to install, should be a list of tuples with (name, requirement, Galaxy server).\n    :param output_path: The path to install the collections to.\n    :param apis: A list of GalaxyAPIs to query when searching for a collection.\n    :param validate_certs: Whether to validate the certificates if downloading a tarball.\n    :param ignore_errors: Whether to ignore any errors when installing the collection.\n    :param no_deps: Ignore any collection dependencies and only install the base requirements.\n    :param force: Re-install a collection if it has already been installed.\n    :param force_deps: Re-install a collection as well as its dependencies if they have already been installed.\n    \"\"\"\n    existing_collections = _find_existing_collections(output_path)\n\n    with _tempdir() as b_temp_path:\n        display.display(\"Process install dependency map\")\n        with _display_progress():\n            dependency_map = _build_dependency_map(collections, existing_collections, b_temp_path, apis,\n                                                   validate_certs, force, force_deps, no_deps)\n\n        display.display(\"Starting collection install process\")\n        with _display_progress():\n            for collection in dependency_map.values():\n                try:\n                    collection.install(output_path, b_temp_path)\n                except AnsibleError as err:\n                    if ignore_errors:\n                        display.warning(\"Failed to install collection %s but skipping due to --ignore-errors being set. \"\n                                        \"Error: %s\" % (to_text(collection), to_text(err)))\n                    else:\n                        raise",
                "def validate_collection_name(name):\n    \"\"\"\n    Validates the collection name as an input from the user or a requirements file fit the requirements.\n\n    :param name: The input name with optional range specifier split by ':'.\n    :return: The input value, required for argparse validation.\n    \"\"\"\n    collection, dummy, dummy = name.partition(':')\n    if AnsibleCollectionRef.is_valid_collection_name(collection):\n        return name\n\n    raise AnsibleError(\"Invalid collection name '%s', \"\n                       \"name must be in the format <namespace>.<collection>. \"\n                       \"Please make sure namespace and collection name contains \"\n                       \"characters from [a-zA-Z0-9_] only.\" % name)",
                "@contextmanager\ndef _tempdir():\n    b_temp_path = tempfile.mkdtemp(dir=to_bytes(C.DEFAULT_LOCAL_TMP, errors='surrogate_or_strict'))\n    yield b_temp_path\n    shutil.rmtree(b_temp_path)",
                "@contextmanager\ndef _tarfile_extract(tar, member):\n    tar_obj = tar.extractfile(member)\n    yield tar_obj\n    tar_obj.close()",
                "@contextmanager\ndef _display_progress():\n    config_display = C.GALAXY_DISPLAY_PROGRESS\n    display_wheel = sys.stdout.isatty() if config_display is None else config_display\n\n    if not display_wheel:\n        yield\n        return\n\n    def progress(display_queue, actual_display):\n        actual_display.debug(\"Starting display_progress display thread\")\n        t = threading.current_thread()\n\n        while True:\n            for c in \"|/-\\\\\":\n                actual_display.display(c + \"\\b\", newline=False)\n                time.sleep(0.1)\n\n                # Display a message from the main thread\n                while True:\n                    try:\n                        method, args, kwargs = display_queue.get(block=False, timeout=0.1)\n                    except queue.Empty:\n                        break\n                    else:\n                        func = getattr(actual_display, method)\n                        func(*args, **kwargs)\n\n                if getattr(t, \"finish\", False):\n                    actual_display.debug(\"Received end signal for display_progress display thread\")\n                    return\n\n    class DisplayThread(object):\n\n        def __init__(self, display_queue):\n            self.display_queue = display_queue\n\n        def __getattr__(self, attr):\n            def call_display(*args, **kwargs):\n                self.display_queue.put((attr, args, kwargs))\n\n            return call_display\n\n    # Temporary override the global display class with our own which add the calls to a queue for the thread to call.\n    global display\n    old_display = display\n    try:\n        display_queue = queue.Queue()\n        display = DisplayThread(display_queue)\n        t = threading.Thread(target=progress, args=(display_queue, old_display))\n        t.daemon = True\n        t.start()\n\n        try:\n            yield\n        finally:\n            t.finish = True\n            t.join()\n    except Exception:\n        # The exception is re-raised so we can sure the thread is finished and not using the display anymore\n        raise\n    finally:\n        display = old_display",
                "def _get_galaxy_yml(b_galaxy_yml_path):\n    meta_info = get_collections_galaxy_meta_info()\n\n    mandatory_keys = set()\n    string_keys = set()\n    list_keys = set()\n    dict_keys = set()\n\n    for info in meta_info:\n        if info.get('required', False):\n            mandatory_keys.add(info['key'])\n\n        key_list_type = {\n            'str': string_keys,\n            'list': list_keys,\n            'dict': dict_keys,\n        }[info.get('type', 'str')]\n        key_list_type.add(info['key'])\n\n    all_keys = frozenset(list(mandatory_keys) + list(string_keys) + list(list_keys) + list(dict_keys))\n\n    try:\n        with open(b_galaxy_yml_path, 'rb') as g_yaml:\n            galaxy_yml = yaml.safe_load(g_yaml)\n    except YAMLError as err:\n        raise AnsibleError(\"Failed to parse the galaxy.yml at '%s' with the following error:\\n%s\"\n                           % (to_native(b_galaxy_yml_path), to_native(err)))\n\n    set_keys = set(galaxy_yml.keys())\n    missing_keys = mandatory_keys.difference(set_keys)\n    if missing_keys:\n        raise AnsibleError(\"The collection galaxy.yml at '%s' is missing the following mandatory keys: %s\"\n                           % (to_native(b_galaxy_yml_path), \", \".join(sorted(missing_keys))))\n\n    extra_keys = set_keys.difference(all_keys)\n    if len(extra_keys) > 0:\n        display.warning(\"Found unknown keys in collection galaxy.yml at '%s': %s\"\n                        % (to_text(b_galaxy_yml_path), \", \".join(extra_keys)))\n\n    # Add the defaults if they have not been set\n    for optional_string in string_keys:\n        if optional_string not in galaxy_yml:\n            galaxy_yml[optional_string] = None\n\n    for optional_list in list_keys:\n        list_val = galaxy_yml.get(optional_list, None)\n\n        if list_val is None:\n            galaxy_yml[optional_list] = []\n        elif not isinstance(list_val, list):\n            galaxy_yml[optional_list] = [list_val]\n\n    for optional_dict in dict_keys:\n        if optional_dict not in galaxy_yml:\n            galaxy_yml[optional_dict] = {}\n\n    # license is a builtin var in Python, to avoid confusion we just rename it to license_ids\n    galaxy_yml['license_ids'] = galaxy_yml['license']\n    del galaxy_yml['license']\n\n    return galaxy_yml",
                "def _build_files_manifest(b_collection_path, namespace, name, ignore_patterns):\n    # We always ignore .pyc and .retry files as well as some well known version control directories. The ignore\n    # patterns can be extended by the build_ignore key in galaxy.yml\n    b_ignore_patterns = [\n        b'galaxy.yml',\n        b'*.pyc',\n        b'*.retry',\n        b'tests/output',  # Ignore ansible-test result output directory.\n        to_bytes('{0}-{1}-*.tar.gz'.format(namespace, name)),  # Ignores previously built artifacts in the root dir.\n    ]\n    b_ignore_patterns += [to_bytes(p) for p in ignore_patterns]\n    b_ignore_dirs = frozenset([b'CVS', b'.bzr', b'.hg', b'.git', b'.svn', b'__pycache__', b'.tox'])\n\n    entry_template = {\n        'name': None,\n        'ftype': None,\n        'chksum_type': None,\n        'chksum_sha256': None,\n        'format': MANIFEST_FORMAT\n    }\n    manifest = {\n        'files': [\n            {\n                'name': '.',\n                'ftype': 'dir',\n                'chksum_type': None,\n                'chksum_sha256': None,\n                'format': MANIFEST_FORMAT,\n            },\n        ],\n        'format': MANIFEST_FORMAT,\n    }\n\n    def _walk(b_path, b_top_level_dir):\n        for b_item in os.listdir(b_path):\n            b_abs_path = os.path.join(b_path, b_item)\n            b_rel_base_dir = b'' if b_path == b_top_level_dir else b_path[len(b_top_level_dir) + 1:]\n            b_rel_path = os.path.join(b_rel_base_dir, b_item)\n            rel_path = to_text(b_rel_path, errors='surrogate_or_strict')\n\n            if os.path.isdir(b_abs_path):\n                if any(b_item == b_path for b_path in b_ignore_dirs) or \\\n                        any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                    display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                    continue\n\n                if os.path.islink(b_abs_path):\n                    b_link_target = os.path.realpath(b_abs_path)\n\n                    if not b_link_target.startswith(b_top_level_dir):\n                        display.warning(\"Skipping '%s' as it is a symbolic link to a directory outside the collection\"\n                                        % to_text(b_abs_path))\n                        continue\n\n                manifest_entry = entry_template.copy()\n                manifest_entry['name'] = rel_path\n                manifest_entry['ftype'] = 'dir'\n\n                manifest['files'].append(manifest_entry)\n\n                _walk(b_abs_path, b_top_level_dir)\n            else:\n                if any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                    display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                    continue\n\n                manifest_entry = entry_template.copy()\n                manifest_entry['name'] = rel_path\n                manifest_entry['ftype'] = 'file'\n                manifest_entry['chksum_type'] = 'sha256'\n                manifest_entry['chksum_sha256'] = secure_hash(b_abs_path, hash_func=sha256)\n\n                manifest['files'].append(manifest_entry)\n\n    _walk(b_collection_path, b_collection_path)\n\n    return manifest",
                "def _build_manifest(namespace, name, version, authors, readme, tags, description, license_ids, license_file,\n                    dependencies, repository, documentation, homepage, issues, **kwargs):\n\n    manifest = {\n        'collection_info': {\n            'namespace': namespace,\n            'name': name,\n            'version': version,\n            'authors': authors,\n            'readme': readme,\n            'tags': tags,\n            'description': description,\n            'license': license_ids,\n            'license_file': license_file if license_file else None,  # Handle galaxy.yml having an empty string (None)\n            'dependencies': dependencies,\n            'repository': repository,\n            'documentation': documentation,\n            'homepage': homepage,\n            'issues': issues,\n        },\n        'file_manifest_file': {\n            'name': 'FILES.json',\n            'ftype': 'file',\n            'chksum_type': 'sha256',\n            'chksum_sha256': None,  # Filled out in _build_collection_tar\n            'format': MANIFEST_FORMAT\n        },\n        'format': MANIFEST_FORMAT,\n    }\n\n    return manifest",
                "def _build_collection_tar(b_collection_path, b_tar_path, collection_manifest, file_manifest):\n    files_manifest_json = to_bytes(json.dumps(file_manifest, indent=True), errors='surrogate_or_strict')\n    collection_manifest['file_manifest_file']['chksum_sha256'] = secure_hash_s(files_manifest_json, hash_func=sha256)\n    collection_manifest_json = to_bytes(json.dumps(collection_manifest, indent=True), errors='surrogate_or_strict')\n\n    with _tempdir() as b_temp_path:\n        b_tar_filepath = os.path.join(b_temp_path, os.path.basename(b_tar_path))\n\n        with tarfile.open(b_tar_filepath, mode='w:gz') as tar_file:\n            # Add the MANIFEST.json and FILES.json file to the archive\n            for name, b in [('MANIFEST.json', collection_manifest_json), ('FILES.json', files_manifest_json)]:\n                b_io = BytesIO(b)\n                tar_info = tarfile.TarInfo(name)\n                tar_info.size = len(b)\n                tar_info.mtime = time.time()\n                tar_info.mode = 0o0644\n                tar_file.addfile(tarinfo=tar_info, fileobj=b_io)\n\n            for file_info in file_manifest['files']:\n                if file_info['name'] == '.':\n                    continue\n\n                # arcname expects a native string, cannot be bytes\n                filename = to_native(file_info['name'], errors='surrogate_or_strict')\n                b_src_path = os.path.join(b_collection_path, to_bytes(filename, errors='surrogate_or_strict'))\n\n                def reset_stat(tarinfo):\n                    tarinfo.mode = 0o0755 if tarinfo.isdir() else 0o0644\n                    tarinfo.uid = tarinfo.gid = 0\n                    tarinfo.uname = tarinfo.gname = ''\n                    return tarinfo\n\n                tar_file.add(os.path.realpath(b_src_path), arcname=filename, recursive=False, filter=reset_stat)\n\n        shutil.copy(b_tar_filepath, b_tar_path)\n        collection_name = \"%s.%s\" % (collection_manifest['collection_info']['namespace'],\n                                     collection_manifest['collection_info']['name'])\n        display.display('Created collection for %s at %s' % (collection_name, to_text(b_tar_path)))",
                "def _find_existing_collections(path):\n    collections = []\n\n    b_path = to_bytes(path, errors='surrogate_or_strict')\n    for b_namespace in os.listdir(b_path):\n        b_namespace_path = os.path.join(b_path, b_namespace)\n        if os.path.isfile(b_namespace_path):\n            continue\n\n        for b_collection in os.listdir(b_namespace_path):\n            b_collection_path = os.path.join(b_namespace_path, b_collection)\n            if os.path.isdir(b_collection_path):\n                req = CollectionRequirement.from_path(b_collection_path, False)\n                display.vvv(\"Found installed collection %s:%s at '%s'\" % (to_text(req), req.latest_version,\n                                                                          to_text(b_collection_path)))\n                collections.append(req)\n\n    return collections",
                "def _build_dependency_map(collections, existing_collections, b_temp_path, apis, validate_certs, force, force_deps,\n                          no_deps):\n    dependency_map = {}\n\n    # First build the dependency map on the actual requirements\n    for name, version, source in collections:\n        _get_collection_info(dependency_map, existing_collections, name, version, source, b_temp_path, apis,\n                             validate_certs, (force or force_deps))\n\n    checked_parents = set([to_text(c) for c in dependency_map.values() if c.skip])\n    while len(dependency_map) != len(checked_parents):\n        while not no_deps:  # Only parse dependencies if no_deps was not set\n            parents_to_check = set(dependency_map.keys()).difference(checked_parents)\n\n            deps_exhausted = True\n            for parent in parents_to_check:\n                parent_info = dependency_map[parent]\n\n                if parent_info.dependencies:\n                    deps_exhausted = False\n                    for dep_name, dep_requirement in parent_info.dependencies.items():\n                        _get_collection_info(dependency_map, existing_collections, dep_name, dep_requirement,\n                                             parent_info.api, b_temp_path, apis, validate_certs, force_deps,\n                                             parent=parent)\n\n                    checked_parents.add(parent)\n\n            # No extra dependencies were resolved, exit loop\n            if deps_exhausted:\n                break\n\n        # Now we have resolved the deps to our best extent, now select the latest version for collections with\n        # multiple versions found and go from there\n        deps_not_checked = set(dependency_map.keys()).difference(checked_parents)\n        for collection in deps_not_checked:\n            dependency_map[collection].set_latest_version()\n            if no_deps or len(dependency_map[collection].dependencies) == 0:\n                checked_parents.add(collection)\n\n    return dependency_map",
                "def _get_collection_info(dep_map, existing_collections, collection, requirement, source, b_temp_path, apis,\n                         validate_certs, force, parent=None):\n    dep_msg = \"\"\n    if parent:\n        dep_msg = \" - as dependency of %s\" % parent\n    display.vvv(\"Processing requirement collection '%s'%s\" % (to_text(collection), dep_msg))\n\n    b_tar_path = None\n    if os.path.isfile(to_bytes(collection, errors='surrogate_or_strict')):\n        display.vvvv(\"Collection requirement '%s' is a tar artifact\" % to_text(collection))\n        b_tar_path = to_bytes(collection, errors='surrogate_or_strict')\n    elif urlparse(collection).scheme:\n        display.vvvv(\"Collection requirement '%s' is a URL to a tar artifact\" % collection)\n        b_tar_path = _download_file(collection, b_temp_path, None, validate_certs)\n\n    if b_tar_path:\n        req = CollectionRequirement.from_tar(b_tar_path, force, parent=parent)\n\n        collection_name = to_text(req)\n        if collection_name in dep_map:\n            collection_info = dep_map[collection_name]\n            collection_info.add_requirement(None, req.latest_version)\n        else:\n            collection_info = req\n    else:\n        validate_collection_name(collection)\n\n        display.vvvv(\"Collection requirement '%s' is the name of a collection\" % collection)\n        if collection in dep_map:\n            collection_info = dep_map[collection]\n            collection_info.add_requirement(parent, requirement)\n        else:\n            apis = [source] if source else apis\n            collection_info = CollectionRequirement.from_name(collection, apis, requirement, force, parent=parent)\n\n    existing = [c for c in existing_collections if to_text(c) == to_text(collection_info)]\n    if existing and not collection_info.force:\n        # Test that the installed collection fits the requirement\n        existing[0].add_requirement(to_text(collection_info), requirement)\n        collection_info = existing[0]\n\n    dep_map[to_text(collection_info)] = collection_info",
                "def _download_file(url, b_path, expected_hash, validate_certs, headers=None):\n    bufsize = 65536\n    digest = sha256()\n\n    urlsplit = os.path.splitext(to_text(url.rsplit('/', 1)[1]))\n    b_file_name = to_bytes(urlsplit[0], errors='surrogate_or_strict')\n    b_file_ext = to_bytes(urlsplit[1], errors='surrogate_or_strict')\n    b_file_path = tempfile.NamedTemporaryFile(dir=b_path, prefix=b_file_name, suffix=b_file_ext, delete=False).name\n\n    display.vvv(\"Downloading %s to %s\" % (url, to_text(b_path)))\n    # Galaxy redirs downloads to S3 which reject the request if an Authorization header is attached so don't redir that\n    resp = open_url(to_native(url, errors='surrogate_or_strict'), validate_certs=validate_certs, headers=headers,\n                    unredirected_headers=['Authorization'])\n\n    with open(b_file_path, 'wb') as download_file:\n        data = resp.read(bufsize)\n        while data:\n            digest.update(data)\n            download_file.write(data)\n            data = resp.read(bufsize)\n\n    if expected_hash:\n        actual_hash = digest.hexdigest()\n        display.vvvv(\"Validating downloaded file hash %s with expected hash %s\" % (actual_hash, expected_hash))\n        if expected_hash != actual_hash:\n            raise AnsibleError(\"Mismatch artifact hash with downloaded file\")\n\n    return b_file_path",
                "def _extract_tar_file(tar, filename, b_dest, b_temp_path, expected_hash=None):\n    n_filename = to_native(filename, errors='surrogate_or_strict')\n    try:\n        member = tar.getmember(n_filename)\n    except KeyError:\n        raise AnsibleError(\"Collection tar at '%s' does not contain the expected file '%s'.\" % (to_native(tar.name),\n                                                                                                n_filename))\n\n    with tempfile.NamedTemporaryFile(dir=b_temp_path, delete=False) as tmpfile_obj:\n        bufsize = 65536\n        sha256_digest = sha256()\n        with _tarfile_extract(tar, member) as tar_obj:\n            data = tar_obj.read(bufsize)\n            while data:\n                tmpfile_obj.write(data)\n                tmpfile_obj.flush()\n                sha256_digest.update(data)\n                data = tar_obj.read(bufsize)\n\n        actual_hash = sha256_digest.hexdigest()\n\n        if expected_hash and actual_hash != expected_hash:\n            raise AnsibleError(\"Checksum mismatch for '%s' inside collection at '%s'\"\n                               % (n_filename, to_native(tar.name)))\n\n        b_dest_filepath = os.path.join(b_dest, to_bytes(filename, errors='surrogate_or_strict'))\n        b_parent_dir = os.path.split(b_dest_filepath)[0]\n        if not os.path.exists(b_parent_dir):\n            # Seems like Galaxy does not validate if all file entries have a corresponding dir ftype entry. This check\n            # makes sure we create the parent directory even if it wasn't set in the metadata.\n            os.makedirs(b_parent_dir)\n\n        shutil.move(to_bytes(tmpfile_obj.name, errors='surrogate_or_strict'), b_dest_filepath)",
                "def __init__(self, namespace, name, b_path, api, versions, requirement, force, parent=None, metadata=None,\n             files=None, skip=False):\n    \"\"\"\n    Represents a collection requirement, the versions that are available to be installed as well as any\n    dependencies the collection has.\n\n    :param namespace: The collection namespace.\n    :param name: The collection name.\n    :param b_path: Byte str of the path to the collection tarball if it has already been downloaded.\n    :param api: The GalaxyAPI to use if the collection is from Galaxy.\n    :param versions: A list of versions of the collection that are available.\n    :param requirement: The version requirement string used to verify the list of versions fit the requirements.\n    :param force: Whether the force flag applied to the collection.\n    :param parent: The name of the parent the collection is a dependency of.\n    :param metadata: The galaxy.api.CollectionVersionMetadata that has already been retrieved from the Galaxy\n        server.\n    :param files: The files that exist inside the collection. This is based on the FILES.json file inside the\n        collection artifact.\n    :param skip: Whether to skip installing the collection. Should be set if the collection is already installed\n        and force is not set.\n    \"\"\"\n    self.namespace = namespace\n    self.name = name\n    self.b_path = b_path\n    self.api = api\n    self.versions = set(versions)\n    self.force = force\n    self.skip = skip\n    self.required_by = []\n\n    self._metadata = metadata\n    self._files = files\n\n    self.add_requirement(parent, requirement)",
                "def __str__(self):\n    return to_native(\"%s.%s\" % (self.namespace, self.name))",
                "def __unicode__(self):\n    return u\"%s.%s\" % (self.namespace, self.name)",
                "@property\ndef latest_version(self):\n    try:\n        return max([v for v in self.versions if v != '*'], key=LooseVersion)\n    except ValueError:  # ValueError: max() arg is an empty sequence\n        return '*'",
                "@property\ndef dependencies(self):\n    if self._metadata:\n        return self._metadata.dependencies\n    elif len(self.versions) > 1:\n        return None\n\n    self._get_metadata()\n    return self._metadata.dependencies",
                "def add_requirement(self, parent, requirement):\n    self.required_by.append((parent, requirement))\n    new_versions = set(v for v in self.versions if self._meets_requirements(v, requirement, parent))\n    if len(new_versions) == 0:\n        if self.skip:\n            force_flag = '--force-with-deps' if parent else '--force'\n            version = self.latest_version if self.latest_version != '*' else 'unknown'\n            msg = \"Cannot meet requirement %s:%s as it is already installed at version '%s'. Use %s to overwrite\" \\\n                  % (to_text(self), requirement, version, force_flag)\n            raise AnsibleError(msg)\n        elif parent is None:\n            msg = \"Cannot meet requirement %s for dependency %s\" % (requirement, to_text(self))\n        else:\n            msg = \"Cannot meet dependency requirement '%s:%s' for collection %s\" \\\n                  % (to_text(self), requirement, parent)\n\n        collection_source = to_text(self.b_path, nonstring='passthru') or self.api.api_server\n        req_by = \"\\n\".join(\n            \"\\t%s - '%s:%s'\" % (to_text(p) if p else 'base', to_text(self), r)\n            for p, r in self.required_by\n        )\n\n        versions = \", \".join(sorted(self.versions, key=LooseVersion))\n        raise AnsibleError(\n            \"%s from source '%s'. Available versions before last requirement added: %s\\nRequirements from:\\n%s\"\n            % (msg, collection_source, versions, req_by)\n        )\n\n    self.versions = new_versions",
                "def install(self, path, b_temp_path):\n    if self.skip:\n        display.display(\"Skipping '%s' as it is already installed\" % to_text(self))\n        return\n\n    # Install if it is not\n    collection_path = os.path.join(path, self.namespace, self.name)\n    b_collection_path = to_bytes(collection_path, errors='surrogate_or_strict')\n    display.display(\"Installing '%s:%s' to '%s'\" % (to_text(self), self.latest_version, collection_path))\n\n    if self.b_path is None:\n        download_url = self._metadata.download_url\n        artifact_hash = self._metadata.artifact_sha256\n        headers = {}\n        self.api._add_auth_token(headers, download_url, required=False)\n\n        self.b_path = _download_file(download_url, b_temp_path, artifact_hash, self.api.validate_certs,\n                                     headers=headers)\n\n    if os.path.exists(b_collection_path):\n        shutil.rmtree(b_collection_path)\n    os.makedirs(b_collection_path)\n\n    with tarfile.open(self.b_path, mode='r') as collection_tar:\n        files_member_obj = collection_tar.getmember('FILES.json')\n        with _tarfile_extract(collection_tar, files_member_obj) as files_obj:\n            files = json.loads(to_text(files_obj.read(), errors='surrogate_or_strict'))\n\n        _extract_tar_file(collection_tar, 'MANIFEST.json', b_collection_path, b_temp_path)\n        _extract_tar_file(collection_tar, 'FILES.json', b_collection_path, b_temp_path)\n\n        for file_info in files['files']:\n            file_name = file_info['name']\n            if file_name == '.':\n                continue\n\n            if file_info['ftype'] == 'file':\n                _extract_tar_file(collection_tar, file_name, b_collection_path, b_temp_path,\n                                  expected_hash=file_info['chksum_sha256'])\n            else:\n                os.makedirs(os.path.join(b_collection_path, to_bytes(file_name, errors='surrogate_or_strict')))",
                "def set_latest_version(self):\n    self.versions = set([self.latest_version])\n    self._get_metadata()",
                "def _get_metadata(self):\n    if self._metadata:\n        return\n    self._metadata = self.api.get_collection_version_metadata(self.namespace, self.name, self.latest_version)",
                "def _meets_requirements(self, version, requirements, parent):\n    \"\"\"\n    Supports version identifiers can be '==', '!=', '>', '>=', '<', '<=', '*'. Each requirement is delimited by ','\n    \"\"\"\n    op_map = {\n        '!=': operator.ne,\n        '==': operator.eq,\n        '=': operator.eq,\n        '>=': operator.ge,\n        '>': operator.gt,\n        '<=': operator.le,\n        '<': operator.lt,\n    }\n\n    for req in list(requirements.split(',')):\n        op_pos = 2 if len(req) > 1 and req[1] == '=' else 1\n        op = op_map.get(req[:op_pos])\n\n        requirement = req[op_pos:]\n        if not op:\n            requirement = req\n            op = operator.eq\n\n            # In the case we are checking a new requirement on a base requirement (parent != None) we can't accept\n            # version as '*' (unknown version) unless the requirement is also '*'.\n            if parent and version == '*' and requirement != '*':\n                break\n            elif requirement == '*' or version == '*':\n                continue\n\n        if not op(LooseVersion(version), LooseVersion(requirement)):\n            break\n    else:\n        return True\n\n    # The loop was broken early, it does not meet all the requirements\n    return False",
                "@staticmethod\ndef from_tar(b_path, force, parent=None):\n    if not tarfile.is_tarfile(b_path):\n        raise AnsibleError(\"Collection artifact at '%s' is not a valid tar file.\" % to_native(b_path))\n\n    info = {}\n    with tarfile.open(b_path, mode='r') as collection_tar:\n        for b_member_name, property_name in CollectionRequirement._FILE_MAPPING:\n            n_member_name = to_native(b_member_name)\n            try:\n                member = collection_tar.getmember(n_member_name)\n            except KeyError:\n                raise AnsibleError(\"Collection at '%s' does not contain the required file %s.\"\n                                   % (to_native(b_path), n_member_name))\n\n            with _tarfile_extract(collection_tar, member) as member_obj:\n                try:\n                    info[property_name] = json.loads(to_text(member_obj.read(), errors='surrogate_or_strict'))\n                except ValueError:\n                    raise AnsibleError(\"Collection tar file member %s does not contain a valid json string.\"\n                                       % n_member_name)\n\n    meta = info['manifest_file']['collection_info']\n    files = info['files_file']['files']\n\n    namespace = meta['namespace']\n    name = meta['name']\n    version = meta['version']\n    meta = CollectionVersionMetadata(namespace, name, version, None, None, meta['dependencies'])\n\n    return CollectionRequirement(namespace, name, b_path, None, [version], version, force, parent=parent,\n                                 metadata=meta, files=files)",
                "@staticmethod\ndef from_path(b_path, force, parent=None):\n    info = {}\n    for b_file_name, property_name in CollectionRequirement._FILE_MAPPING:\n        b_file_path = os.path.join(b_path, b_file_name)\n        if not os.path.exists(b_file_path):\n            continue\n\n        with open(b_file_path, 'rb') as file_obj:\n            try:\n                info[property_name] = json.loads(to_text(file_obj.read(), errors='surrogate_or_strict'))\n            except ValueError:\n                raise AnsibleError(\"Collection file at '%s' does not contain a valid json string.\"\n                                   % to_native(b_file_path))\n\n    if 'manifest_file' in info:\n        manifest = info['manifest_file']['collection_info']\n        namespace = manifest['namespace']\n        name = manifest['name']\n        version = manifest['version']\n        dependencies = manifest['dependencies']\n    else:\n        display.warning(\"Collection at '%s' does not have a MANIFEST.json file, cannot detect version.\"\n                        % to_text(b_path))\n        parent_dir, name = os.path.split(to_text(b_path, errors='surrogate_or_strict'))\n        namespace = os.path.split(parent_dir)[1]\n\n        version = '*'\n        dependencies = {}\n\n    meta = CollectionVersionMetadata(namespace, name, version, None, None, dependencies)\n\n    files = info.get('files_file', {}).get('files', {})\n\n    return CollectionRequirement(namespace, name, b_path, None, [version], version, force, parent=parent,\n                                 metadata=meta, files=files, skip=True)",
                "@staticmethod\ndef from_name(collection, apis, requirement, force, parent=None):\n    namespace, name = collection.split('.', 1)\n    galaxy_meta = None\n\n    for api in apis:\n        try:\n            if not (requirement == '*' or requirement.startswith('<') or requirement.startswith('>') or\n                    requirement.startswith('!=')):\n                if requirement.startswith('='):\n                    requirement = requirement.lstrip('=')\n\n                resp = api.get_collection_version_metadata(namespace, name, requirement)\n\n                galaxy_meta = resp\n                versions = [resp.version]\n            else:\n                resp = api.get_collection_versions(namespace, name)\n\n                # Galaxy supports semver but ansible-galaxy does not. We ignore any versions that don't match\n                # StrictVersion (x.y.z) and only support pre-releases if an explicit version was set (done above).\n                versions = [v for v in resp if StrictVersion.version_re.match(v)]\n        except GalaxyError as err:\n            if err.http_code == 404:\n                display.vvv(\"Collection '%s' is not available from server %s %s\"\n                            % (collection, api.name, api.api_server))\n                continue\n            raise\n\n        display.vvv(\"Collection '%s' obtained from server %s %s\" % (collection, api.name, api.api_server))\n        break\n    else:\n        raise AnsibleError(\"Failed to find collection %s:%s\" % (collection, requirement))\n\n    req = CollectionRequirement(namespace, name, None, api, versions, requirement, force, parent=parent,\n                                metadata=galaxy_meta)\n    return req",
                "def progress(display_queue, actual_display):\n    actual_display.debug(\"Starting display_progress display thread\")\n    t = threading.current_thread()\n\n    while True:\n        for c in \"|/-\\\\\":\n            actual_display.display(c + \"\\b\", newline=False)\n            time.sleep(0.1)\n\n            # Display a message from the main thread\n            while True:\n                try:\n                    method, args, kwargs = display_queue.get(block=False, timeout=0.1)\n                except queue.Empty:\n                    break\n                else:\n                    func = getattr(actual_display, method)\n                    func(*args, **kwargs)\n\n            if getattr(t, \"finish\", False):\n                actual_display.debug(\"Received end signal for display_progress display thread\")\n                return",
                "def _walk(b_path, b_top_level_dir):\n    for b_item in os.listdir(b_path):\n        b_abs_path = os.path.join(b_path, b_item)\n        b_rel_base_dir = b'' if b_path == b_top_level_dir else b_path[len(b_top_level_dir) + 1:]\n        b_rel_path = os.path.join(b_rel_base_dir, b_item)\n        rel_path = to_text(b_rel_path, errors='surrogate_or_strict')\n\n        if os.path.isdir(b_abs_path):\n            if any(b_item == b_path for b_path in b_ignore_dirs) or \\\n                    any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                continue\n\n            if os.path.islink(b_abs_path):\n                b_link_target = os.path.realpath(b_abs_path)\n\n                if not b_link_target.startswith(b_top_level_dir):\n                    display.warning(\"Skipping '%s' as it is a symbolic link to a directory outside the collection\"\n                                    % to_text(b_abs_path))\n                    continue\n\n            manifest_entry = entry_template.copy()\n            manifest_entry['name'] = rel_path\n            manifest_entry['ftype'] = 'dir'\n\n            manifest['files'].append(manifest_entry)\n\n            _walk(b_abs_path, b_top_level_dir)\n        else:\n            if any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                continue\n\n            manifest_entry = entry_template.copy()\n            manifest_entry['name'] = rel_path\n            manifest_entry['ftype'] = 'file'\n            manifest_entry['chksum_type'] = 'sha256'\n            manifest_entry['chksum_sha256'] = secure_hash(b_abs_path, hash_func=sha256)\n\n            manifest['files'].append(manifest_entry)",
                "def __init__(self, display_queue):\n    self.display_queue = display_queue",
                "def __getattr__(self, attr):\n    def call_display(*args, **kwargs):\n        self.display_queue.put((attr, args, kwargs))\n\n    return call_display",
                "def call_display(*args, **kwargs):\n    self.display_queue.put((attr, args, kwargs))",
                "def reset_stat(tarinfo):\n    tarinfo.mode = 0o0755 if tarinfo.isdir() else 0o0644\n    tarinfo.uid = tarinfo.gid = 0\n    tarinfo.uname = tarinfo.gname = ''\n    return tarinfo"
            ],
            "inscope_function_signatures": [
                "build_collection(collection_path, output_path, force)",
                "publish_collection(collection_path, api, wait, timeout)",
                "install_collections(collections, output_path, apis, validate_certs, ignore_errors, no_deps, force, force_deps)",
                "validate_collection_name(name)",
                "_tempdir()",
                "_tarfile_extract(tar, member)",
                "_display_progress()",
                "_get_galaxy_yml(b_galaxy_yml_path)",
                "_build_files_manifest(b_collection_path, namespace, name, ignore_patterns)",
                "_build_manifest(namespace, name, version, authors, readme, tags, description, license_ids, license_file, dependencies, repository, documentation, homepage, issues, **kwargs)",
                "_build_collection_tar(b_collection_path, b_tar_path, collection_manifest, file_manifest)",
                "_find_existing_collections(path)",
                "_build_dependency_map(collections, existing_collections, b_temp_path, apis, validate_certs, force, force_deps, no_deps)",
                "_get_collection_info(dep_map, existing_collections, collection, requirement, source, b_temp_path, apis, validate_certs, force, parent=None)",
                "_download_file(url, b_path, expected_hash, validate_certs, headers=None)",
                "_extract_tar_file(tar, filename, b_dest, b_temp_path, expected_hash=None)",
                "__init__(self, namespace, name, b_path, api, versions, requirement, force, parent=None, metadata=None, files=None, skip=False)",
                "__str__(self)",
                "__unicode__(self)",
                "latest_version(self)",
                "dependencies(self)",
                "add_requirement(self, parent, requirement)",
                "install(self, path, b_temp_path)",
                "set_latest_version(self)",
                "_get_metadata(self)",
                "_meets_requirements(self, version, requirements, parent)",
                "from_tar(b_path, force, parent=None)",
                "from_path(b_path, force, parent=None)",
                "from_name(collection, apis, requirement, force, parent=None)",
                "progress(display_queue, actual_display)",
                "_walk(b_path, b_top_level_dir)",
                "__init__(self, display_queue)",
                "__getattr__(self, attr)",
                "call_display(*args, **kwargs)",
                "reset_stat(tarinfo)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    5
                ],
                "type": [
                    5
                ],
                "ImportError": [
                    27
                ],
                "urlparse": [
                    41,
                    830
                ],
                "six.moves.urllib.parse.urlparse": [
                    41
                ],
                "six.moves.urllib.parse": [
                    41
                ],
                "six.moves.urllib": [
                    41,
                    42
                ],
                "six.moves": [
                    41,
                    42
                ],
                "six": [
                    41,
                    42
                ],
                "urllib_error": [
                    42
                ],
                "six.moves.urllib.error": [
                    42
                ],
                "display": [
                    770,
                    648,
                    522,
                    525,
                    655,
                    144,
                    401,
                    404,
                    150,
                    407,
                    539,
                    668,
                    286,
                    428,
                    45,
                    433,
                    440,
                    824,
                    828,
                    831,
                    578,
                    325,
                    330,
                    846,
                    872,
                    754,
                    886
                ],
                "Display": [
                    45
                ],
                "MANIFEST_FORMAT": [
                    709,
                    711,
                    623,
                    47,
                    632,
                    635
                ],
                "_FILE_MAPPING": [
                    52
                ],
                "self.namespace": [
                    75,
                    148,
                    90,
                    93,
                    191
                ],
                "self": [
                    128,
                    512,
                    130,
                    131,
                    516,
                    134,
                    140,
                    143,
                    144,
                    148,
                    150,
                    152,
                    153,
                    154,
                    156,
                    158,
                    165,
                    185,
                    186,
                    189,
                    191,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    84,
                    85,
                    87,
                    90,
                    93,
                    98,
                    104,
                    105,
                    106,
                    109,
                    110,
                    113,
                    114,
                    116,
                    118,
                    120,
                    123,
                    126
                ],
                "namespace": [
                    256,
                    289,
                    259,
                    261,
                    294,
                    313,
                    613,
                    298,
                    75,
                    303,
                    335,
                    689,
                    281,
                    318
                ],
                "self.name": [
                    76,
                    148,
                    90,
                    93,
                    191
                ],
                "name": [
                    257,
                    259,
                    261,
                    782,
                    783,
                    282,
                    288,
                    294,
                    298,
                    303,
                    690,
                    313,
                    318,
                    453,
                    455,
                    76,
                    460,
                    335,
                    727,
                    729,
                    613,
                    870
                ],
                "self.b_path": [
                    128,
                    165,
                    77,
                    152,
                    158
                ],
                "b_path": [
                    640,
                    641,
                    261,
                    646,
                    268,
                    287,
                    288,
                    298,
                    77,
                    870,
                    872,
                    233,
                    234,
                    237,
                    244,
                    760,
                    761,
                    762,
                    639
                ],
                "self.api": [
                    128,
                    78,
                    156,
                    158,
                    191
                ],
                "api": [
                    385,
                    326,
                    330,
                    409,
                    78,
                    335,
                    401,
                    306,
                    403,
                    405,
                    313,
                    318
                ],
                "self.versions": [
                    98,
                    134,
                    106,
                    140,
                    79,
                    114,
                    185
                ],
                "set": [
                    545,
                    546,
                    547,
                    548,
                    810,
                    79,
                    114,
                    786,
                    789,
                    185,
                    570
                ],
                "versions": [
                    322,
                    134,
                    137,
                    79,
                    335,
                    316
                ],
                "self.force": [
                    80
                ],
                "force": [
                    835,
                    261,
                    298,
                    335,
                    80,
                    369,
                    431,
                    784,
                    852
                ],
                "self.skip": [
                    81,
                    116,
                    143
                ],
                "skip": [
                    81
                ],
                "self.required_by": [
                    113,
                    82,
                    131
                ],
                "self._metadata": [
                    104,
                    105,
                    110,
                    84,
                    153,
                    154,
                    189,
                    191
                ],
                "metadata": [
                    84
                ],
                "self._files": [
                    85
                ],
                "files": [
                    262,
                    168,
                    296,
                    299,
                    173,
                    85,
                    254
                ],
                "self.add_requirement": [
                    87
                ],
                "parent": [
                    261,
                    792,
                    793,
                    800,
                    802,
                    298,
                    822,
                    823,
                    835,
                    335,
                    849,
                    852,
                    87,
                    218,
                    113,
                    114,
                    117,
                    122,
                    126
                ],
                "requirement": [
                    308,
                    309,
                    310,
                    311,
                    313,
                    333,
                    335,
                    849,
                    211,
                    852,
                    213,
                    87,
                    857,
                    218,
                    220,
                    223,
                    113,
                    114,
                    120,
                    123,
                    126
                ],
                "to_native": [
                    353,
                    898,
                    740,
                    234,
                    874,
                    239,
                    368,
                    894,
                    371,
                    244,
                    277,
                    916,
                    568,
                    90,
                    574
                ],
                "max": [
                    98
                ],
                "v": [
                    98,
                    322,
                    114
                ],
                "LooseVersion": [
                    98,
                    134,
                    223
                ],
                "ValueError": [
                    275,
                    249,
                    99
                ],
                "property": [
                    102,
                    95
                ],
                "self._metadata.dependencies": [
                    105,
                    110
                ],
                "len": [
                    577,
                    641,
                    106,
                    813,
                    208,
                    115,
                    787,
                    730
                ],
                "self._get_metadata": [
                    186,
                    109
                ],
                "self.required_by.append": [
                    113
                ],
                "new_versions": [
                    114,
                    115,
                    140
                ],
                "self._meets_requirements": [
                    114
                ],
                "force_flag": [
                    120,
                    117
                ],
                "version": [
                    258,
                    259,
                    291,
                    261,
                    294,
                    298,
                    782,
                    783,
                    691,
                    118,
                    120,
                    218,
                    283,
                    220,
                    223
                ],
                "self.latest_version": [
                    185,
                    150,
                    118,
                    191
                ],
                "msg": [
                    137,
                    119,
                    121,
                    123,
                    125
                ],
                "to_text": [
                    128,
                    130,
                    643,
                    770,
                    771,
                    648,
                    144,
                    656,
                    274,
                    786,
                    150,
                    668,
                    287,
                    288,
                    168,
                    824,
                    441,
                    828,
                    579,
                    837,
                    854,
                    857,
                    120,
                    860,
                    867,
                    872,
                    754,
                    248,
                    123,
                    126
                ],
                "AnsibleError": [
                    353,
                    898,
                    135,
                    457,
                    234,
                    333,
                    367,
                    399,
                    370,
                    243,
                    276,
                    915,
                    438,
                    567,
                    888,
                    121,
                    250,
                    573
                ],
                "collection_source": [
                    128,
                    137
                ],
                "self.api.api_server": [
                    128
                ],
                "req_by": [
                    129,
                    137
                ],
                "join": [
                    574,
                    129,
                    579,
                    134
                ],
                "p": [
                    130,
                    131,
                    615
                ],
                "r": [
                    130,
                    131
                ],
                "sorted": [
                    574,
                    134
                ],
                "display.display": [
                    428,
                    144,
                    401,
                    433,
                    754,
                    404,
                    150,
                    407
                ],
                "collection_path": [
                    385,
                    148,
                    149,
                    150,
                    350
                ],
                "os.path.join": [
                    640,
                    642,
                    741,
                    360,
                    268,
                    723,
                    148,
                    767,
                    182,
                    918,
                    762,
                    351
                ],
                "os.path": [
                    640,
                    768,
                    642,
                    645,
                    651,
                    268,
                    269,
                    652,
                    148,
                    918,
                    919,
                    920,
                    288,
                    161,
                    289,
                    182,
                    827,
                    723,
                    351,
                    352,
                    867,
                    741,
                    360,
                    365,
                    366,
                    749,
                    762,
                    763,
                    767
                ],
                "os": [
                    640,
                    768,
                    642,
                    645,
                    651,
                    268,
                    269,
                    652,
                    767,
                    148,
                    918,
                    919,
                    920,
                    923,
                    288,
                    161,
                    289,
                    163,
                    182,
                    827,
                    723,
                    351,
                    352,
                    867,
                    741,
                    360,
                    365,
                    366,
                    749,
                    761,
                    762,
                    763,
                    766,
                    639
                ],
                "path": [
                    760,
                    148
                ],
                "b_collection_path": [
                    768,
                    161,
                    162,
                    163,
                    356,
                    741,
                    769,
                    679,
                    771,
                    170,
                    171,
                    179,
                    767,
                    149,
                    182,
                    373,
                    350,
                    351
                ],
                "to_bytes": [
                    868,
                    613,
                    741,
                    615,
                    869,
                    364,
                    718,
                    925,
                    720,
                    465,
                    149,
                    182,
                    918,
                    760,
                    827,
                    829,
                    350
                ],
                "download_url": [
                    153,
                    156,
                    158
                ],
                "self._metadata.download_url": [
                    153
                ],
                "artifact_hash": [
                    154,
                    158
                ],
                "self._metadata.artifact_sha256": [
                    154
                ],
                "headers": [
                    874,
                    155,
                    156,
                    159
                ],
                "self.api._add_auth_token": [
                    156
                ],
                "_download_file": [
                    832,
                    158
                ],
                "b_temp_path": [
                    832,
                    901,
                    170,
                    427,
                    171,
                    430,
                    783,
                    465,
                    466,
                    179,
                    467,
                    437,
                    722,
                    723,
                    158,
                    799
                ],
                "self.api.validate_certs": [
                    158
                ],
                "os.path.exists": [
                    352,
                    161,
                    365,
                    269,
                    920
                ],
                "shutil.rmtree": [
                    162,
                    467
                ],
                "shutil": [
                    162,
                    467,
                    925,
                    751
                ],
                "os.makedirs": [
                    163,
                    923,
                    182
                ],
                "tarfile.open": [
                    725,
                    237,
                    165
                ],
                "tarfile": [
                    165,
                    233,
                    237,
                    725,
                    729
                ],
                "collection_tar": [
                    165,
                    166,
                    167,
                    170,
                    171,
                    237,
                    241,
                    179,
                    246
                ],
                "files_member_obj": [
                    166,
                    167
                ],
                "collection_tar.getmember": [
                    241,
                    166
                ],
                "_tarfile_extract": [
                    904,
                    246,
                    167
                ],
                "files_obj": [
                    168,
                    167
                ],
                "json.loads": [
                    168,
                    248,
                    274
                ],
                "json": [
                    168,
                    718,
                    720,
                    274,
                    248
                ],
                "files_obj.read": [
                    168
                ],
                "_extract_tar_file": [
                    170,
                    171,
                    179
                ],
                "file_info": [
                    736,
                    740,
                    173,
                    174,
                    178,
                    180,
                    735
                ],
                "file_name": [
                    179,
                    182,
                    174,
                    175
                ],
                "self.api.get_collection_version_metadata": [
                    191
                ],
                "op_map": [
                    209,
                    197
                ],
                "operator.ne": [
                    198
                ],
                "operator": [
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    214
                ],
                "operator.eq": [
                    200,
                    214,
                    199
                ],
                "operator.ge": [
                    201
                ],
                "operator.gt": [
                    202
                ],
                "operator.le": [
                    203
                ],
                "operator.lt": [
                    204
                ],
                "req": [
                    769,
                    770,
                    835,
                    772,
                    837,
                    840,
                    842,
                    207,
                    208,
                    209,
                    335,
                    211,
                    337,
                    213
                ],
                "list": [
                    561,
                    591,
                    207
                ],
                "requirements.split": [
                    207
                ],
                "requirements": [
                    207
                ],
                "op_pos": [
                    208,
                    209,
                    211
                ],
                "op": [
                    209,
                    212,
                    214,
                    223
                ],
                "op_map.get": [
                    209
                ],
                "tarfile.is_tarfile": [
                    233
                ],
                "info": [
                    280,
                    550,
                    551,
                    296,
                    552,
                    266,
                    236,
                    558,
                    559,
                    274,
                    279,
                    248,
                    253,
                    254
                ],
                "b_member_name": [
                    238,
                    239
                ],
                "property_name": [
                    248,
                    274,
                    267,
                    238
                ],
                "CollectionRequirement._FILE_MAPPING": [
                    267,
                    238
                ],
                "CollectionRequirement": [
                    769,
                    835,
                    261,
                    298,
                    267,
                    238,
                    335,
                    852
                ],
                "n_member_name": [
                    241,
                    251,
                    244,
                    239
                ],
                "member": [
                    896,
                    904,
                    241,
                    246,
                    472
                ],
                "KeyError": [
                    897,
                    242
                ],
                "member_obj": [
                    248,
                    246
                ],
                "member_obj.read": [
                    248
                ],
                "meta": [
                    256,
                    257,
                    258,
                    259,
                    262,
                    294,
                    299,
                    253
                ],
                "CollectionVersionMetadata": [
                    259,
                    294
                ],
                "staticmethod": [
                    264,
                    301,
                    231
                ],
                "b_file_name": [
                    868,
                    267,
                    268,
                    870
                ],
                "b_file_path": [
                    870,
                    268,
                    269,
                    877,
                    272,
                    277,
                    890
                ],
                "open": [
                    272,
                    564,
                    877
                ],
                "file_obj": [
                    272,
                    274
                ],
                "file_obj.read": [
                    274
                ],
                "manifest": [
                    677,
                    681,
                    714,
                    687,
                    625,
                    663,
                    280,
                    281,
                    282,
                    283,
                    284
                ],
                "dependencies": [
                    292,
                    294,
                    813,
                    698,
                    284
                ],
                "display.warning": [
                    440,
                    578,
                    286,
                    655
                ],
                "parent_dir": [
                    288,
                    289
                ],
                "os.path.split": [
                    288,
                    289,
                    919
                ],
                "get": [
                    296
                ],
                "info.get": [
                    296,
                    558,
                    551
                ],
                "collection.split": [
                    303
                ],
                "collection": [
                    811,
                    812,
                    813,
                    814,
                    303,
                    435,
                    437,
                    824,
                    441,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    453,
                    326,
                    454,
                    330,
                    844,
                    333,
                    846,
                    847,
                    848,
                    852
                ],
                "galaxy_meta": [
                    304,
                    336,
                    315
                ],
                "apis": [
                    430,
                    783,
                    306,
                    851,
                    852,
                    799
                ],
                "requirement.startswith": [
                    308,
                    309,
                    310
                ],
                "requirement.lstrip": [
                    311
                ],
                "resp": [
                    322,
                    874,
                    878,
                    882,
                    313,
                    315,
                    316,
                    318
                ],
                "api.get_collection_version_metadata": [
                    313
                ],
                "resp.version": [
                    316
                ],
                "api.get_collection_versions": [
                    318
                ],
                "StrictVersion.version_re.match": [
                    322
                ],
                "StrictVersion.version_re": [
                    322
                ],
                "StrictVersion": [
                    322
                ],
                "GalaxyError": [
                    323
                ],
                "err.http_code": [
                    324
                ],
                "err": [
                    568,
                    441,
                    324
                ],
                "display.vvv": [
                    770,
                    325,
                    648,
                    872,
                    330,
                    824,
                    668
                ],
                "api.name": [
                    326,
                    330,
                    401,
                    405,
                    409
                ],
                "api.api_server": [
                    326,
                    330,
                    401,
                    405,
                    409
                ],
                "b_galaxy_path": [
                    352,
                    353,
                    355,
                    351
                ],
                "collection_meta": [
                    355,
                    356,
                    357,
                    358,
                    360,
                    361,
                    362
                ],
                "_get_galaxy_yml": [
                    355
                ],
                "file_manifest": [
                    356,
                    373,
                    718,
                    735
                ],
                "_build_files_manifest": [
                    356
                ],
                "collection_manifest": [
                    358,
                    719,
                    720,
                    752,
                    753,
                    373
                ],
                "_build_manifest": [
                    358
                ],
                "collection_output": [
                    360,
                    371,
                    364,
                    368
                ],
                "output_path": [
                    360,
                    425,
                    437
                ],
                "b_collection_output": [
                    373,
                    364,
                    365,
                    366
                ],
                "os.path.isdir": [
                    768,
                    645,
                    366
                ],
                "_build_collection_tar": [
                    373
                ],
                "import_uri": [
                    385,
                    393,
                    409,
                    399
                ],
                "api.publish_collection": [
                    385
                ],
                "wait": [
                    387
                ],
                "task_id": [
                    392,
                    395,
                    403,
                    398
                ],
                "path_segment": [
                    393,
                    394,
                    395
                ],
                "reversed": [
                    393
                ],
                "import_uri.split": [
                    393
                ],
                "_display_progress": [
                    434,
                    402,
                    429
                ],
                "api.wait_import_task": [
                    403
                ],
                "timeout": [
                    403
                ],
                "existing_collections": [
                    425,
                    430,
                    783,
                    854,
                    798
                ],
                "_find_existing_collections": [
                    425
                ],
                "_tempdir": [
                    722,
                    427
                ],
                "dependency_map": [
                    810,
                    779,
                    812,
                    813,
                    430,
                    783,
                    816,
                    786,
                    435,
                    787,
                    789,
                    793,
                    798
                ],
                "_build_dependency_map": [
                    430
                ],
                "collections": [
                    772,
                    774,
                    782,
                    430,
                    758
                ],
                "validate_certs": [
                    832,
                    874,
                    431,
                    784,
                    799
                ],
                "force_deps": [
                    784,
                    799,
                    431
                ],
                "no_deps": [
                    788,
                    813,
                    431
                ],
                "dependency_map.values": [
                    786,
                    435
                ],
                "collection.install": [
                    437
                ],
                "ignore_errors": [
                    439
                ],
                "dummy": [
                    453
                ],
                "name.partition": [
                    453
                ],
                "AnsibleCollectionRef.is_valid_collection_name": [
                    454
                ],
                "AnsibleCollectionRef": [
                    454
                ],
                "tempfile.mkdtemp": [
                    465
                ],
                "tempfile": [
                    465,
                    901,
                    870
                ],
                "C.DEFAULT_LOCAL_TMP": [
                    465
                ],
                "C": [
                    465,
                    479
                ],
                "contextmanager": [
                    477,
                    470,
                    463
                ],
                "tar_obj": [
                    904,
                    905,
                    910,
                    472,
                    473,
                    474
                ],
                "tar.extractfile": [
                    472
                ],
                "tar": [
                    896,
                    898,
                    904,
                    916,
                    472
                ],
                "tar_obj.close": [
                    474
                ],
                "config_display": [
                    480,
                    479
                ],
                "C.GALAXY_DISPLAY_PROGRESS": [
                    479
                ],
                "display_wheel": [
                    480,
                    482
                ],
                "sys.stdout.isatty": [
                    480
                ],
                "sys.stdout": [
                    480
                ],
                "sys": [
                    480
                ],
                "actual_display.debug": [
                    506,
                    487
                ],
                "actual_display": [
                    506,
                    492,
                    502,
                    487
                ],
                "t": [
                    488,
                    526,
                    527,
                    528,
                    533,
                    534,
                    505
                ],
                "threading.current_thread": [
                    488
                ],
                "threading": [
                    488,
                    526
                ],
                "c": [
                    786,
                    491,
                    492,
                    854
                ],
                "actual_display.display": [
                    492
                ],
                "time.sleep": [
                    493
                ],
                "time": [
                    731,
                    493
                ],
                "method": [
                    498,
                    502
                ],
                "args": [
                    498,
                    516,
                    503
                ],
                "kwargs": [
                    498,
                    516,
                    503
                ],
                "display_queue.get": [
                    498
                ],
                "display_queue": [
                    512,
                    524,
                    525,
                    526,
                    498
                ],
                "queue.Empty": [
                    499
                ],
                "queue": [
                    499,
                    524
                ],
                "func": [
                    502,
                    503
                ],
                "getattr": [
                    505,
                    502
                ],
                "object": [
                    509
                ],
                "self.display_queue": [
                    512,
                    516
                ],
                "self.display_queue.put": [
                    516
                ],
                "attr": [
                    516
                ],
                "call_display": [
                    518
                ],
                "old_display": [
                    522,
                    539,
                    526
                ],
                "queue.Queue": [
                    524
                ],
                "DisplayThread": [
                    525
                ],
                "threading.Thread": [
                    526
                ],
                "progress": [
                    526
                ],
                "t.daemon": [
                    527
                ],
                "t.start": [
                    528
                ],
                "t.finish": [
                    533
                ],
                "t.join": [
                    534
                ],
                "Exception": [
                    535
                ],
                "meta_info": [
                    550,
                    543
                ],
                "get_collections_galaxy_meta_info": [
                    543
                ],
                "mandatory_keys": [
                    552,
                    545,
                    571,
                    561
                ],
                "string_keys": [
                    561,
                    546,
                    555,
                    582
                ],
                "list_keys": [
                    561,
                    586,
                    547,
                    556
                ],
                "dict_keys": [
                    561,
                    594,
                    548,
                    557
                ],
                "mandatory_keys.add": [
                    552
                ],
                "key_list_type": [
                    554,
                    559
                ],
                "key_list_type.add": [
                    559
                ],
                "all_keys": [
                    576,
                    561
                ],
                "frozenset": [
                    616,
                    561
                ],
                "b_galaxy_yml_path": [
                    568,
                    579,
                    564,
                    574
                ],
                "g_yaml": [
                    564,
                    565
                ],
                "galaxy_yml": [
                    583,
                    584,
                    587,
                    590,
                    592,
                    595,
                    596,
                    565,
                    602,
                    599,
                    600,
                    570
                ],
                "yaml.safe_load": [
                    565
                ],
                "yaml": [
                    565
                ],
                "YAMLError": [
                    566
                ],
                "set_keys": [
                    576,
                    570,
                    571
                ],
                "galaxy_yml.keys": [
                    570
                ],
                "missing_keys": [
                    571,
                    572,
                    574
                ],
                "mandatory_keys.difference": [
                    571
                ],
                "extra_keys": [
                    576,
                    577,
                    579
                ],
                "set_keys.difference": [
                    576
                ],
                "optional_string": [
                    584,
                    582,
                    583
                ],
                "optional_list": [
                    592,
                    586,
                    587,
                    590
                ],
                "list_val": [
                    592,
                    587,
                    589,
                    591
                ],
                "galaxy_yml.get": [
                    587
                ],
                "isinstance": [
                    591
                ],
                "optional_dict": [
                    594,
                    595,
                    596
                ],
                "b_ignore_patterns": [
                    608,
                    647,
                    667,
                    615
                ],
                "format": [
                    613
                ],
                "ignore_patterns": [
                    615
                ],
                "b_ignore_dirs": [
                    616,
                    646
                ],
                "entry_template": [
                    618,
                    659,
                    671
                ],
                "b_item": [
                    640,
                    642,
                    646,
                    639
                ],
                "os.listdir": [
                    761,
                    766,
                    639
                ],
                "b_abs_path": [
                    640,
                    675,
                    645,
                    648,
                    651,
                    652,
                    656,
                    665,
                    668
                ],
                "b_rel_base_dir": [
                    641,
                    642
                ],
                "b_top_level_dir": [
                    641,
                    665,
                    654
                ],
                "b_rel_path": [
                    642,
                    643,
                    667,
                    647
                ],
                "rel_path": [
                    672,
                    643,
                    660
                ],
                "any": [
                    667,
                    646,
                    647
                ],
                "fnmatch.fnmatch": [
                    667,
                    647
                ],
                "fnmatch": [
                    667,
                    647
                ],
                "b_pattern": [
                    667,
                    647
                ],
                "os.path.islink": [
                    651
                ],
                "b_link_target": [
                    652,
                    654
                ],
                "os.path.realpath": [
                    652,
                    749
                ],
                "b_link_target.startswith": [
                    654
                ],
                "manifest_entry": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    659,
                    660,
                    661,
                    663,
                    671
                ],
                "entry_template.copy": [
                    659,
                    671
                ],
                "append": [
                    677,
                    663
                ],
                "_walk": [
                    665,
                    679
                ],
                "secure_hash": [
                    675
                ],
                "sha256": [
                    903,
                    865,
                    675,
                    719
                ],
                "authors": [
                    692
                ],
                "readme": [
                    693
                ],
                "tags": [
                    694
                ],
                "description": [
                    695
                ],
                "license_ids": [
                    696
                ],
                "license_file": [
                    697
                ],
                "repository": [
                    699
                ],
                "documentation": [
                    700
                ],
                "homepage": [
                    701
                ],
                "issues": [
                    702
                ],
                "files_manifest_json": [
                    727,
                    718,
                    719
                ],
                "json.dumps": [
                    720,
                    718
                ],
                "secure_hash_s": [
                    719
                ],
                "collection_manifest_json": [
                    720,
                    727
                ],
                "b_tar_filepath": [
                    723,
                    725,
                    751
                ],
                "os.path.basename": [
                    723
                ],
                "b_tar_path": [
                    832,
                    834,
                    835,
                    751,
                    754,
                    723,
                    826,
                    829
                ],
                "tar_file": [
                    733,
                    749,
                    725
                ],
                "b": [
                    728,
                    730,
                    727
                ],
                "b_io": [
                    728,
                    733
                ],
                "BytesIO": [
                    728
                ],
                "tar_info": [
                    729,
                    730,
                    731,
                    732,
                    733
                ],
                "tarfile.TarInfo": [
                    729
                ],
                "tar_info.size": [
                    730
                ],
                "tar_info.mtime": [
                    731
                ],
                "time.time": [
                    731
                ],
                "tar_info.mode": [
                    732
                ],
                "tar_file.addfile": [
                    733
                ],
                "filename": [
                    740,
                    741,
                    749,
                    918,
                    894
                ],
                "b_src_path": [
                    749,
                    741
                ],
                "tarinfo.mode": [
                    744
                ],
                "tarinfo": [
                    744,
                    745,
                    746,
                    747
                ],
                "tarinfo.isdir": [
                    744
                ],
                "tarinfo.uid": [
                    745
                ],
                "tarinfo.gid": [
                    745
                ],
                "tarinfo.uname": [
                    746
                ],
                "tarinfo.gname": [
                    746
                ],
                "tar_file.add": [
                    749
                ],
                "reset_stat": [
                    749
                ],
                "shutil.copy": [
                    751
                ],
                "collection_name": [
                    837,
                    838,
                    839,
                    752,
                    754
                ],
                "b_namespace": [
                    761,
                    762
                ],
                "b_namespace_path": [
                    762,
                    763,
                    766,
                    767
                ],
                "os.path.isfile": [
                    827,
                    763
                ],
                "b_collection": [
                    766,
                    767
                ],
                "CollectionRequirement.from_path": [
                    769
                ],
                "req.latest_version": [
                    840,
                    770
                ],
                "collections.append": [
                    772
                ],
                "source": [
                    851,
                    782,
                    783
                ],
                "_get_collection_info": [
                    798,
                    783
                ],
                "checked_parents": [
                    802,
                    810,
                    814,
                    786,
                    787,
                    789
                ],
                "c.skip": [
                    786
                ],
                "parents_to_check": [
                    792,
                    789
                ],
                "difference": [
                    810,
                    789
                ],
                "dependency_map.keys": [
                    810,
                    789
                ],
                "deps_exhausted": [
                    796,
                    805,
                    791
                ],
                "parent_info": [
                    793,
                    795,
                    797,
                    799
                ],
                "parent_info.dependencies": [
                    795,
                    797
                ],
                "dep_name": [
                    797,
                    798
                ],
                "dep_requirement": [
                    797,
                    798
                ],
                "parent_info.dependencies.items": [
                    797
                ],
                "parent_info.api": [
                    799
                ],
                "checked_parents.add": [
                    802,
                    814
                ],
                "deps_not_checked": [
                    810,
                    811
                ],
                "set_latest_version": [
                    812
                ],
                "dep_msg": [
                    824,
                    821,
                    823
                ],
                "display.vvvv": [
                    886,
                    828,
                    846,
                    831
                ],
                "scheme": [
                    830
                ],
                "CollectionRequirement.from_tar": [
                    835
                ],
                "dep_map": [
                    838,
                    839,
                    847,
                    848,
                    860
                ],
                "collection_info": [
                    839,
                    840,
                    842,
                    848,
                    849,
                    852,
                    854,
                    855,
                    857,
                    858,
                    860
                ],
                "collection_info.add_requirement": [
                    840,
                    849
                ],
                "validate_collection_name": [
                    844
                ],
                "CollectionRequirement.from_name": [
                    852
                ],
                "existing": [
                    857,
                    858,
                    854,
                    855
                ],
                "collection_info.force": [
                    855
                ],
                "add_requirement": [
                    857
                ],
                "bufsize": [
                    864,
                    902,
                    905,
                    878,
                    910,
                    882
                ],
                "digest": [
                    880,
                    865,
                    885
                ],
                "urlsplit": [
                    867,
                    868,
                    869
                ],
                "os.path.splitext": [
                    867
                ],
                "url.rsplit": [
                    867
                ],
                "url": [
                    872,
                    874,
                    867
                ],
                "b_file_ext": [
                    869,
                    870
                ],
                "tempfile.NamedTemporaryFile": [
                    901,
                    870
                ],
                "open_url": [
                    874
                ],
                "download_file": [
                    881,
                    877
                ],
                "data": [
                    905,
                    906,
                    907,
                    909,
                    878,
                    879,
                    880,
                    881,
                    882,
                    910
                ],
                "resp.read": [
                    882,
                    878
                ],
                "digest.update": [
                    880
                ],
                "download_file.write": [
                    881
                ],
                "expected_hash": [
                    914,
                    884,
                    886,
                    887
                ],
                "actual_hash": [
                    912,
                    914,
                    885,
                    886,
                    887
                ],
                "digest.hexdigest": [
                    885
                ],
                "n_filename": [
                    896,
                    899,
                    916,
                    894
                ],
                "tar.getmember": [
                    896
                ],
                "tar.name": [
                    898,
                    916
                ],
                "tmpfile_obj": [
                    907,
                    908,
                    901,
                    925
                ],
                "sha256_digest": [
                    912,
                    909,
                    903
                ],
                "tar_obj.read": [
                    905,
                    910
                ],
                "tmpfile_obj.write": [
                    907
                ],
                "tmpfile_obj.flush": [
                    908
                ],
                "sha256_digest.update": [
                    909
                ],
                "sha256_digest.hexdigest": [
                    912
                ],
                "b_dest_filepath": [
                    925,
                    918,
                    919
                ],
                "b_dest": [
                    918
                ],
                "b_parent_dir": [
                    920,
                    923,
                    919
                ],
                "shutil.move": [
                    925
                ],
                "tmpfile_obj.name": [
                    925
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    5
                ],
                "urlparse": [
                    41,
                    830
                ],
                "six.moves.urllib.parse.urlparse": [
                    41
                ],
                "six.moves.urllib.parse": [
                    41
                ],
                "six.moves.urllib": [
                    41,
                    42
                ],
                "six.moves": [
                    41,
                    42
                ],
                "six": [
                    41,
                    42
                ],
                "urllib_error": [
                    42
                ],
                "six.moves.urllib.error": [
                    42
                ],
                "display": [
                    770,
                    648,
                    522,
                    525,
                    655,
                    144,
                    401,
                    404,
                    150,
                    407,
                    539,
                    668,
                    286,
                    428,
                    45,
                    433,
                    440,
                    824,
                    828,
                    831,
                    578,
                    325,
                    330,
                    846,
                    872,
                    754,
                    886
                ],
                "Display": [
                    45
                ],
                "MANIFEST_FORMAT": [
                    709,
                    711,
                    623,
                    47,
                    632,
                    635
                ],
                "_FILE_MAPPING": [
                    52
                ],
                "self.namespace": [
                    75,
                    148,
                    90,
                    93,
                    191
                ],
                "self": [
                    128,
                    512,
                    130,
                    131,
                    516,
                    134,
                    140,
                    143,
                    144,
                    148,
                    150,
                    152,
                    153,
                    154,
                    156,
                    158,
                    165,
                    185,
                    186,
                    189,
                    191,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    84,
                    85,
                    87,
                    90,
                    93,
                    98,
                    104,
                    105,
                    106,
                    109,
                    110,
                    113,
                    114,
                    116,
                    118,
                    120,
                    123,
                    126
                ],
                "namespace": [
                    256,
                    289,
                    259,
                    261,
                    294,
                    313,
                    613,
                    298,
                    75,
                    303,
                    335,
                    689,
                    281,
                    318
                ],
                "self.name": [
                    76,
                    148,
                    90,
                    93,
                    191
                ],
                "name": [
                    257,
                    259,
                    261,
                    782,
                    783,
                    282,
                    288,
                    294,
                    298,
                    303,
                    690,
                    313,
                    318,
                    453,
                    455,
                    76,
                    460,
                    335,
                    727,
                    729,
                    613,
                    870
                ],
                "self.b_path": [
                    128,
                    165,
                    77,
                    152,
                    158
                ],
                "b_path": [
                    640,
                    641,
                    261,
                    646,
                    268,
                    287,
                    288,
                    298,
                    77,
                    870,
                    872,
                    233,
                    234,
                    237,
                    244,
                    760,
                    761,
                    762,
                    639
                ],
                "self.api": [
                    128,
                    78,
                    156,
                    158,
                    191
                ],
                "api": [
                    385,
                    326,
                    330,
                    409,
                    78,
                    335,
                    401,
                    306,
                    403,
                    405,
                    313,
                    318
                ],
                "self.versions": [
                    98,
                    134,
                    106,
                    140,
                    79,
                    114,
                    185
                ],
                "versions": [
                    322,
                    134,
                    137,
                    79,
                    335,
                    316
                ],
                "self.force": [
                    80
                ],
                "force": [
                    835,
                    261,
                    298,
                    335,
                    80,
                    369,
                    431,
                    784,
                    852
                ],
                "self.skip": [
                    81,
                    116,
                    143
                ],
                "skip": [
                    81
                ],
                "self.required_by": [
                    113,
                    82,
                    131
                ],
                "self._metadata": [
                    104,
                    105,
                    110,
                    84,
                    153,
                    154,
                    189,
                    191
                ],
                "metadata": [
                    84
                ],
                "self._files": [
                    85
                ],
                "files": [
                    262,
                    168,
                    296,
                    299,
                    173,
                    85,
                    254
                ],
                "self.add_requirement": [
                    87
                ],
                "parent": [
                    261,
                    792,
                    793,
                    800,
                    802,
                    298,
                    822,
                    823,
                    835,
                    335,
                    849,
                    852,
                    87,
                    218,
                    113,
                    114,
                    117,
                    122,
                    126
                ],
                "requirement": [
                    308,
                    309,
                    310,
                    311,
                    313,
                    333,
                    335,
                    849,
                    211,
                    852,
                    213,
                    87,
                    857,
                    218,
                    220,
                    223,
                    113,
                    114,
                    120,
                    123,
                    126
                ],
                "to_native": [
                    353,
                    898,
                    740,
                    234,
                    874,
                    239,
                    368,
                    894,
                    371,
                    244,
                    277,
                    916,
                    568,
                    90,
                    574
                ],
                "v": [
                    98,
                    322,
                    114
                ],
                "LooseVersion": [
                    98,
                    134,
                    223
                ],
                "self._metadata.dependencies": [
                    105,
                    110
                ],
                "self._get_metadata": [
                    186,
                    109
                ],
                "self.required_by.append": [
                    113
                ],
                "new_versions": [
                    114,
                    115,
                    140
                ],
                "self._meets_requirements": [
                    114
                ],
                "force_flag": [
                    120,
                    117
                ],
                "version": [
                    258,
                    259,
                    291,
                    261,
                    294,
                    298,
                    782,
                    783,
                    691,
                    118,
                    120,
                    218,
                    283,
                    220,
                    223
                ],
                "self.latest_version": [
                    185,
                    150,
                    118,
                    191
                ],
                "msg": [
                    137,
                    119,
                    121,
                    123,
                    125
                ],
                "to_text": [
                    128,
                    130,
                    643,
                    770,
                    771,
                    648,
                    144,
                    656,
                    274,
                    786,
                    150,
                    668,
                    287,
                    288,
                    168,
                    824,
                    441,
                    828,
                    579,
                    837,
                    854,
                    857,
                    120,
                    860,
                    867,
                    872,
                    754,
                    248,
                    123,
                    126
                ],
                "AnsibleError": [
                    353,
                    898,
                    135,
                    457,
                    234,
                    333,
                    367,
                    399,
                    370,
                    243,
                    276,
                    915,
                    438,
                    567,
                    888,
                    121,
                    250,
                    573
                ],
                "collection_source": [
                    128,
                    137
                ],
                "self.api.api_server": [
                    128
                ],
                "req_by": [
                    129,
                    137
                ],
                "join": [
                    574,
                    129,
                    579,
                    134
                ],
                "p": [
                    130,
                    131,
                    615
                ],
                "r": [
                    130,
                    131
                ],
                "display.display": [
                    428,
                    144,
                    401,
                    433,
                    754,
                    404,
                    150,
                    407
                ],
                "collection_path": [
                    385,
                    148,
                    149,
                    150,
                    350
                ],
                "os.path.join": [
                    640,
                    642,
                    741,
                    360,
                    268,
                    723,
                    148,
                    767,
                    182,
                    918,
                    762,
                    351
                ],
                "os.path": [
                    640,
                    768,
                    642,
                    645,
                    651,
                    268,
                    269,
                    652,
                    148,
                    918,
                    919,
                    920,
                    288,
                    161,
                    289,
                    182,
                    827,
                    723,
                    351,
                    352,
                    867,
                    741,
                    360,
                    365,
                    366,
                    749,
                    762,
                    763,
                    767
                ],
                "os": [
                    640,
                    768,
                    642,
                    645,
                    651,
                    268,
                    269,
                    652,
                    767,
                    148,
                    918,
                    919,
                    920,
                    923,
                    288,
                    161,
                    289,
                    163,
                    182,
                    827,
                    723,
                    351,
                    352,
                    867,
                    741,
                    360,
                    365,
                    366,
                    749,
                    761,
                    762,
                    763,
                    766,
                    639
                ],
                "path": [
                    760,
                    148
                ],
                "b_collection_path": [
                    768,
                    161,
                    162,
                    163,
                    356,
                    741,
                    769,
                    679,
                    771,
                    170,
                    171,
                    179,
                    767,
                    149,
                    182,
                    373,
                    350,
                    351
                ],
                "to_bytes": [
                    868,
                    613,
                    741,
                    615,
                    869,
                    364,
                    718,
                    925,
                    720,
                    465,
                    149,
                    182,
                    918,
                    760,
                    827,
                    829,
                    350
                ],
                "download_url": [
                    153,
                    156,
                    158
                ],
                "self._metadata.download_url": [
                    153
                ],
                "artifact_hash": [
                    154,
                    158
                ],
                "self._metadata.artifact_sha256": [
                    154
                ],
                "headers": [
                    874,
                    155,
                    156,
                    159
                ],
                "self.api._add_auth_token": [
                    156
                ],
                "_download_file": [
                    832,
                    158
                ],
                "b_temp_path": [
                    832,
                    901,
                    170,
                    427,
                    171,
                    430,
                    783,
                    465,
                    466,
                    179,
                    467,
                    437,
                    722,
                    723,
                    158,
                    799
                ],
                "self.api.validate_certs": [
                    158
                ],
                "os.path.exists": [
                    352,
                    161,
                    365,
                    269,
                    920
                ],
                "shutil.rmtree": [
                    162,
                    467
                ],
                "shutil": [
                    162,
                    467,
                    925,
                    751
                ],
                "os.makedirs": [
                    163,
                    923,
                    182
                ],
                "tarfile.open": [
                    725,
                    237,
                    165
                ],
                "tarfile": [
                    165,
                    233,
                    237,
                    725,
                    729
                ],
                "collection_tar": [
                    165,
                    166,
                    167,
                    170,
                    171,
                    237,
                    241,
                    179,
                    246
                ],
                "files_member_obj": [
                    166,
                    167
                ],
                "collection_tar.getmember": [
                    241,
                    166
                ],
                "_tarfile_extract": [
                    904,
                    246,
                    167
                ],
                "files_obj": [
                    168,
                    167
                ],
                "json.loads": [
                    168,
                    248,
                    274
                ],
                "json": [
                    168,
                    718,
                    720,
                    274,
                    248
                ],
                "files_obj.read": [
                    168
                ],
                "_extract_tar_file": [
                    170,
                    171,
                    179
                ],
                "file_info": [
                    736,
                    740,
                    173,
                    174,
                    178,
                    180,
                    735
                ],
                "file_name": [
                    179,
                    182,
                    174,
                    175
                ],
                "self.api.get_collection_version_metadata": [
                    191
                ],
                "op_map": [
                    209,
                    197
                ],
                "operator.ne": [
                    198
                ],
                "operator": [
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    214
                ],
                "operator.eq": [
                    200,
                    214,
                    199
                ],
                "operator.ge": [
                    201
                ],
                "operator.gt": [
                    202
                ],
                "operator.le": [
                    203
                ],
                "operator.lt": [
                    204
                ],
                "req": [
                    769,
                    770,
                    835,
                    772,
                    837,
                    840,
                    842,
                    207,
                    208,
                    209,
                    335,
                    211,
                    337,
                    213
                ],
                "requirements.split": [
                    207
                ],
                "requirements": [
                    207
                ],
                "op_pos": [
                    208,
                    209,
                    211
                ],
                "op": [
                    209,
                    212,
                    214,
                    223
                ],
                "op_map.get": [
                    209
                ],
                "tarfile.is_tarfile": [
                    233
                ],
                "info": [
                    280,
                    550,
                    551,
                    296,
                    552,
                    266,
                    236,
                    558,
                    559,
                    274,
                    279,
                    248,
                    253,
                    254
                ],
                "b_member_name": [
                    238,
                    239
                ],
                "property_name": [
                    248,
                    274,
                    267,
                    238
                ],
                "CollectionRequirement._FILE_MAPPING": [
                    267,
                    238
                ],
                "CollectionRequirement": [
                    769,
                    835,
                    261,
                    298,
                    267,
                    238,
                    335,
                    852
                ],
                "n_member_name": [
                    241,
                    251,
                    244,
                    239
                ],
                "member": [
                    896,
                    904,
                    241,
                    246,
                    472
                ],
                "member_obj": [
                    248,
                    246
                ],
                "member_obj.read": [
                    248
                ],
                "meta": [
                    256,
                    257,
                    258,
                    259,
                    262,
                    294,
                    299,
                    253
                ],
                "CollectionVersionMetadata": [
                    259,
                    294
                ],
                "b_file_name": [
                    868,
                    267,
                    268,
                    870
                ],
                "b_file_path": [
                    870,
                    268,
                    269,
                    877,
                    272,
                    277,
                    890
                ],
                "file_obj": [
                    272,
                    274
                ],
                "file_obj.read": [
                    274
                ],
                "manifest": [
                    677,
                    681,
                    714,
                    687,
                    625,
                    663,
                    280,
                    281,
                    282,
                    283,
                    284
                ],
                "dependencies": [
                    292,
                    294,
                    813,
                    698,
                    284
                ],
                "display.warning": [
                    440,
                    578,
                    286,
                    655
                ],
                "parent_dir": [
                    288,
                    289
                ],
                "os.path.split": [
                    288,
                    289,
                    919
                ],
                "get": [
                    296
                ],
                "info.get": [
                    296,
                    558,
                    551
                ],
                "collection.split": [
                    303
                ],
                "collection": [
                    811,
                    812,
                    813,
                    814,
                    303,
                    435,
                    437,
                    824,
                    441,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    453,
                    326,
                    454,
                    330,
                    844,
                    333,
                    846,
                    847,
                    848,
                    852
                ],
                "galaxy_meta": [
                    304,
                    336,
                    315
                ],
                "apis": [
                    430,
                    783,
                    306,
                    851,
                    852,
                    799
                ],
                "requirement.startswith": [
                    308,
                    309,
                    310
                ],
                "requirement.lstrip": [
                    311
                ],
                "resp": [
                    322,
                    874,
                    878,
                    882,
                    313,
                    315,
                    316,
                    318
                ],
                "api.get_collection_version_metadata": [
                    313
                ],
                "resp.version": [
                    316
                ],
                "api.get_collection_versions": [
                    318
                ],
                "StrictVersion.version_re.match": [
                    322
                ],
                "StrictVersion.version_re": [
                    322
                ],
                "StrictVersion": [
                    322
                ],
                "GalaxyError": [
                    323
                ],
                "err.http_code": [
                    324
                ],
                "err": [
                    568,
                    441,
                    324
                ],
                "display.vvv": [
                    770,
                    325,
                    648,
                    872,
                    330,
                    824,
                    668
                ],
                "api.name": [
                    326,
                    330,
                    401,
                    405,
                    409
                ],
                "api.api_server": [
                    326,
                    330,
                    401,
                    405,
                    409
                ],
                "b_galaxy_path": [
                    352,
                    353,
                    355,
                    351
                ],
                "collection_meta": [
                    355,
                    356,
                    357,
                    358,
                    360,
                    361,
                    362
                ],
                "_get_galaxy_yml": [
                    355
                ],
                "file_manifest": [
                    356,
                    373,
                    718,
                    735
                ],
                "_build_files_manifest": [
                    356
                ],
                "collection_manifest": [
                    358,
                    719,
                    720,
                    752,
                    753,
                    373
                ],
                "_build_manifest": [
                    358
                ],
                "collection_output": [
                    360,
                    371,
                    364,
                    368
                ],
                "output_path": [
                    360,
                    425,
                    437
                ],
                "b_collection_output": [
                    373,
                    364,
                    365,
                    366
                ],
                "os.path.isdir": [
                    768,
                    645,
                    366
                ],
                "_build_collection_tar": [
                    373
                ],
                "import_uri": [
                    385,
                    393,
                    409,
                    399
                ],
                "api.publish_collection": [
                    385
                ],
                "wait": [
                    387
                ],
                "task_id": [
                    392,
                    395,
                    403,
                    398
                ],
                "path_segment": [
                    393,
                    394,
                    395
                ],
                "import_uri.split": [
                    393
                ],
                "_display_progress": [
                    434,
                    402,
                    429
                ],
                "api.wait_import_task": [
                    403
                ],
                "timeout": [
                    403
                ],
                "existing_collections": [
                    425,
                    430,
                    783,
                    854,
                    798
                ],
                "_find_existing_collections": [
                    425
                ],
                "_tempdir": [
                    722,
                    427
                ],
                "dependency_map": [
                    810,
                    779,
                    812,
                    813,
                    430,
                    783,
                    816,
                    786,
                    435,
                    787,
                    789,
                    793,
                    798
                ],
                "_build_dependency_map": [
                    430
                ],
                "collections": [
                    772,
                    774,
                    782,
                    430,
                    758
                ],
                "validate_certs": [
                    832,
                    874,
                    431,
                    784,
                    799
                ],
                "force_deps": [
                    784,
                    799,
                    431
                ],
                "no_deps": [
                    788,
                    813,
                    431
                ],
                "dependency_map.values": [
                    786,
                    435
                ],
                "collection.install": [
                    437
                ],
                "ignore_errors": [
                    439
                ],
                "dummy": [
                    453
                ],
                "name.partition": [
                    453
                ],
                "AnsibleCollectionRef.is_valid_collection_name": [
                    454
                ],
                "AnsibleCollectionRef": [
                    454
                ],
                "tempfile.mkdtemp": [
                    465
                ],
                "tempfile": [
                    465,
                    901,
                    870
                ],
                "C.DEFAULT_LOCAL_TMP": [
                    465
                ],
                "C": [
                    465,
                    479
                ],
                "contextmanager": [
                    477,
                    470,
                    463
                ],
                "tar_obj": [
                    904,
                    905,
                    910,
                    472,
                    473,
                    474
                ],
                "tar.extractfile": [
                    472
                ],
                "tar": [
                    896,
                    898,
                    904,
                    916,
                    472
                ],
                "tar_obj.close": [
                    474
                ],
                "config_display": [
                    480,
                    479
                ],
                "C.GALAXY_DISPLAY_PROGRESS": [
                    479
                ],
                "display_wheel": [
                    480,
                    482
                ],
                "sys.stdout.isatty": [
                    480
                ],
                "sys.stdout": [
                    480
                ],
                "sys": [
                    480
                ],
                "actual_display.debug": [
                    506,
                    487
                ],
                "actual_display": [
                    506,
                    492,
                    502,
                    487
                ],
                "t": [
                    488,
                    526,
                    527,
                    528,
                    533,
                    534,
                    505
                ],
                "threading.current_thread": [
                    488
                ],
                "threading": [
                    488,
                    526
                ],
                "c": [
                    786,
                    491,
                    492,
                    854
                ],
                "actual_display.display": [
                    492
                ],
                "time.sleep": [
                    493
                ],
                "time": [
                    731,
                    493
                ],
                "method": [
                    498,
                    502
                ],
                "args": [
                    498,
                    516,
                    503
                ],
                "kwargs": [
                    498,
                    516,
                    503
                ],
                "display_queue.get": [
                    498
                ],
                "display_queue": [
                    512,
                    524,
                    525,
                    526,
                    498
                ],
                "queue.Empty": [
                    499
                ],
                "queue": [
                    499,
                    524
                ],
                "func": [
                    502,
                    503
                ],
                "self.display_queue": [
                    512,
                    516
                ],
                "self.display_queue.put": [
                    516
                ],
                "attr": [
                    516
                ],
                "call_display": [
                    518
                ],
                "old_display": [
                    522,
                    539,
                    526
                ],
                "queue.Queue": [
                    524
                ],
                "DisplayThread": [
                    525
                ],
                "threading.Thread": [
                    526
                ],
                "progress": [
                    526
                ],
                "t.daemon": [
                    527
                ],
                "t.start": [
                    528
                ],
                "t.finish": [
                    533
                ],
                "t.join": [
                    534
                ],
                "meta_info": [
                    550,
                    543
                ],
                "get_collections_galaxy_meta_info": [
                    543
                ],
                "mandatory_keys": [
                    552,
                    545,
                    571,
                    561
                ],
                "string_keys": [
                    561,
                    546,
                    555,
                    582
                ],
                "list_keys": [
                    561,
                    586,
                    547,
                    556
                ],
                "dict_keys": [
                    561,
                    594,
                    548,
                    557
                ],
                "mandatory_keys.add": [
                    552
                ],
                "key_list_type": [
                    554,
                    559
                ],
                "key_list_type.add": [
                    559
                ],
                "all_keys": [
                    576,
                    561
                ],
                "b_galaxy_yml_path": [
                    568,
                    579,
                    564,
                    574
                ],
                "g_yaml": [
                    564,
                    565
                ],
                "galaxy_yml": [
                    583,
                    584,
                    587,
                    590,
                    592,
                    595,
                    596,
                    565,
                    602,
                    599,
                    600,
                    570
                ],
                "yaml.safe_load": [
                    565
                ],
                "yaml": [
                    565
                ],
                "YAMLError": [
                    566
                ],
                "set_keys": [
                    576,
                    570,
                    571
                ],
                "galaxy_yml.keys": [
                    570
                ],
                "missing_keys": [
                    571,
                    572,
                    574
                ],
                "mandatory_keys.difference": [
                    571
                ],
                "extra_keys": [
                    576,
                    577,
                    579
                ],
                "set_keys.difference": [
                    576
                ],
                "optional_string": [
                    584,
                    582,
                    583
                ],
                "optional_list": [
                    592,
                    586,
                    587,
                    590
                ],
                "list_val": [
                    592,
                    587,
                    589,
                    591
                ],
                "galaxy_yml.get": [
                    587
                ],
                "optional_dict": [
                    594,
                    595,
                    596
                ],
                "b_ignore_patterns": [
                    608,
                    647,
                    667,
                    615
                ],
                "ignore_patterns": [
                    615
                ],
                "b_ignore_dirs": [
                    616,
                    646
                ],
                "entry_template": [
                    618,
                    659,
                    671
                ],
                "b_item": [
                    640,
                    642,
                    646,
                    639
                ],
                "os.listdir": [
                    761,
                    766,
                    639
                ],
                "b_abs_path": [
                    640,
                    675,
                    645,
                    648,
                    651,
                    652,
                    656,
                    665,
                    668
                ],
                "b_rel_base_dir": [
                    641,
                    642
                ],
                "b_top_level_dir": [
                    641,
                    665,
                    654
                ],
                "b_rel_path": [
                    642,
                    643,
                    667,
                    647
                ],
                "rel_path": [
                    672,
                    643,
                    660
                ],
                "fnmatch.fnmatch": [
                    667,
                    647
                ],
                "fnmatch": [
                    667,
                    647
                ],
                "b_pattern": [
                    667,
                    647
                ],
                "os.path.islink": [
                    651
                ],
                "b_link_target": [
                    652,
                    654
                ],
                "os.path.realpath": [
                    652,
                    749
                ],
                "b_link_target.startswith": [
                    654
                ],
                "manifest_entry": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    659,
                    660,
                    661,
                    663,
                    671
                ],
                "entry_template.copy": [
                    659,
                    671
                ],
                "append": [
                    677,
                    663
                ],
                "_walk": [
                    665,
                    679
                ],
                "secure_hash": [
                    675
                ],
                "sha256": [
                    903,
                    865,
                    675,
                    719
                ],
                "authors": [
                    692
                ],
                "readme": [
                    693
                ],
                "tags": [
                    694
                ],
                "description": [
                    695
                ],
                "license_ids": [
                    696
                ],
                "license_file": [
                    697
                ],
                "repository": [
                    699
                ],
                "documentation": [
                    700
                ],
                "homepage": [
                    701
                ],
                "issues": [
                    702
                ],
                "files_manifest_json": [
                    727,
                    718,
                    719
                ],
                "json.dumps": [
                    720,
                    718
                ],
                "secure_hash_s": [
                    719
                ],
                "collection_manifest_json": [
                    720,
                    727
                ],
                "b_tar_filepath": [
                    723,
                    725,
                    751
                ],
                "os.path.basename": [
                    723
                ],
                "b_tar_path": [
                    832,
                    834,
                    835,
                    751,
                    754,
                    723,
                    826,
                    829
                ],
                "tar_file": [
                    733,
                    749,
                    725
                ],
                "b": [
                    728,
                    730,
                    727
                ],
                "b_io": [
                    728,
                    733
                ],
                "BytesIO": [
                    728
                ],
                "tar_info": [
                    729,
                    730,
                    731,
                    732,
                    733
                ],
                "tarfile.TarInfo": [
                    729
                ],
                "tar_info.size": [
                    730
                ],
                "tar_info.mtime": [
                    731
                ],
                "time.time": [
                    731
                ],
                "tar_info.mode": [
                    732
                ],
                "tar_file.addfile": [
                    733
                ],
                "filename": [
                    740,
                    741,
                    749,
                    918,
                    894
                ],
                "b_src_path": [
                    749,
                    741
                ],
                "tarinfo.mode": [
                    744
                ],
                "tarinfo": [
                    744,
                    745,
                    746,
                    747
                ],
                "tarinfo.isdir": [
                    744
                ],
                "tarinfo.uid": [
                    745
                ],
                "tarinfo.gid": [
                    745
                ],
                "tarinfo.uname": [
                    746
                ],
                "tarinfo.gname": [
                    746
                ],
                "tar_file.add": [
                    749
                ],
                "reset_stat": [
                    749
                ],
                "shutil.copy": [
                    751
                ],
                "collection_name": [
                    837,
                    838,
                    839,
                    752,
                    754
                ],
                "b_namespace": [
                    761,
                    762
                ],
                "b_namespace_path": [
                    762,
                    763,
                    766,
                    767
                ],
                "os.path.isfile": [
                    827,
                    763
                ],
                "b_collection": [
                    766,
                    767
                ],
                "CollectionRequirement.from_path": [
                    769
                ],
                "req.latest_version": [
                    840,
                    770
                ],
                "collections.append": [
                    772
                ],
                "source": [
                    851,
                    782,
                    783
                ],
                "_get_collection_info": [
                    798,
                    783
                ],
                "checked_parents": [
                    802,
                    810,
                    814,
                    786,
                    787,
                    789
                ],
                "c.skip": [
                    786
                ],
                "parents_to_check": [
                    792,
                    789
                ],
                "difference": [
                    810,
                    789
                ],
                "dependency_map.keys": [
                    810,
                    789
                ],
                "deps_exhausted": [
                    796,
                    805,
                    791
                ],
                "parent_info": [
                    793,
                    795,
                    797,
                    799
                ],
                "parent_info.dependencies": [
                    795,
                    797
                ],
                "dep_name": [
                    797,
                    798
                ],
                "dep_requirement": [
                    797,
                    798
                ],
                "parent_info.dependencies.items": [
                    797
                ],
                "parent_info.api": [
                    799
                ],
                "checked_parents.add": [
                    802,
                    814
                ],
                "deps_not_checked": [
                    810,
                    811
                ],
                "set_latest_version": [
                    812
                ],
                "dep_msg": [
                    824,
                    821,
                    823
                ],
                "display.vvvv": [
                    886,
                    828,
                    846,
                    831
                ],
                "scheme": [
                    830
                ],
                "CollectionRequirement.from_tar": [
                    835
                ],
                "dep_map": [
                    838,
                    839,
                    847,
                    848,
                    860
                ],
                "collection_info": [
                    839,
                    840,
                    842,
                    848,
                    849,
                    852,
                    854,
                    855,
                    857,
                    858,
                    860
                ],
                "collection_info.add_requirement": [
                    840,
                    849
                ],
                "validate_collection_name": [
                    844
                ],
                "CollectionRequirement.from_name": [
                    852
                ],
                "existing": [
                    857,
                    858,
                    854,
                    855
                ],
                "collection_info.force": [
                    855
                ],
                "add_requirement": [
                    857
                ],
                "bufsize": [
                    864,
                    902,
                    905,
                    878,
                    910,
                    882
                ],
                "digest": [
                    880,
                    865,
                    885
                ],
                "urlsplit": [
                    867,
                    868,
                    869
                ],
                "os.path.splitext": [
                    867
                ],
                "url.rsplit": [
                    867
                ],
                "url": [
                    872,
                    874,
                    867
                ],
                "b_file_ext": [
                    869,
                    870
                ],
                "tempfile.NamedTemporaryFile": [
                    901,
                    870
                ],
                "open_url": [
                    874
                ],
                "download_file": [
                    881,
                    877
                ],
                "data": [
                    905,
                    906,
                    907,
                    909,
                    878,
                    879,
                    880,
                    881,
                    882,
                    910
                ],
                "resp.read": [
                    882,
                    878
                ],
                "digest.update": [
                    880
                ],
                "download_file.write": [
                    881
                ],
                "expected_hash": [
                    914,
                    884,
                    886,
                    887
                ],
                "actual_hash": [
                    912,
                    914,
                    885,
                    886,
                    887
                ],
                "digest.hexdigest": [
                    885
                ],
                "n_filename": [
                    896,
                    899,
                    916,
                    894
                ],
                "tar.getmember": [
                    896
                ],
                "tar.name": [
                    898,
                    916
                ],
                "tmpfile_obj": [
                    907,
                    908,
                    901,
                    925
                ],
                "sha256_digest": [
                    912,
                    909,
                    903
                ],
                "tar_obj.read": [
                    905,
                    910
                ],
                "tmpfile_obj.write": [
                    907
                ],
                "tmpfile_obj.flush": [
                    908
                ],
                "sha256_digest.update": [
                    909
                ],
                "sha256_digest.hexdigest": [
                    912
                ],
                "b_dest_filepath": [
                    925,
                    918,
                    919
                ],
                "b_dest": [
                    918
                ],
                "b_parent_dir": [
                    920,
                    923,
                    919
                ],
                "shutil.move": [
                    925
                ],
                "tmpfile_obj.name": [
                    925
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_13/test/units/cli/test_galaxy.py",
                "test_function": "test_collection_install_with_url",
                "test_function_code": "def test_collection_install_with_url(collection_install):\n    mock_install, dummy, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'https://foo/bar/foo-bar-v1.0.0.tar.gz',\n                   '--collections-path', output_dir]\n    GalaxyCLI(args=galaxy_args).run()\n\n    collection_path = os.path.join(output_dir, 'ansible_collections')\n    assert os.path.isdir(collection_path)\n\n    assert mock_install.call_count == 1\n    assert mock_install.call_args[0][0] == [('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]\n    assert mock_install.call_args[0][1] == collection_path\n    assert len(mock_install.call_args[0][2]) == 1\n    assert mock_install.call_args[0][2][0].api_server == 'https://galaxy.ansible.com'\n    assert mock_install.call_args[0][2][0].validate_certs is True\n    assert mock_install.call_args[0][3] is True\n    assert mock_install.call_args[0][4] is False\n    assert mock_install.call_args[0][5] is False\n    assert mock_install.call_args[0][6] is False\n    assert mock_install.call_args[0][7] is False",
                "test_error": "AssertionError: assert [('https', '//foo/bar/foo-bar-v1.0.0.tar.gz', None)] == [('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]\n  At index 0 diff: ('https', '//foo/bar/foo-bar-v1.0.0.tar.gz', None) != ('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)\n  Full diff:\n  - [('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]\n  ?         ^                                  -----\n  + [('https', '//foo/bar/foo-bar-v1.0.0.tar.gz', None)]\n  ?         ^^^^",
                "full_test_error": "collection_install = (<MagicMock id='4426681296'>, <MagicMock id='4426818000'>, '/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-289/test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Output0')\n\n    def test_collection_install_with_url(collection_install):\n        mock_install, dummy, output_dir = collection_install\n    \n        galaxy_args = ['ansible-galaxy', 'collection', 'install', 'https://foo/bar/foo-bar-v1.0.0.tar.gz',\n                       '--collections-path', output_dir]\n        GalaxyCLI(args=galaxy_args).run()\n    \n        collection_path = os.path.join(output_dir, 'ansible_collections')\n        assert os.path.isdir(collection_path)\n    \n        assert mock_install.call_count == 1\n>       assert mock_install.call_args[0][0] == [('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]\nE       AssertionError: assert [('https', '//foo/bar/foo-bar-v1.0.0.tar.gz', None)] == [('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]\nE         At index 0 diff: ('https', '//foo/bar/foo-bar-v1.0.0.tar.gz', None) != ('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)\nE         Full diff:\nE         - [('https://foo/bar/foo-bar-v1.0.0.tar.gz', '*', None)]\nE         ?         ^                                  -----\nE         + [('https', '//foo/bar/foo-bar-v1.0.0.tar.gz', None)]\nE         ?         ^^^^\n\ntest/units/cli/test_galaxy.py:904: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}