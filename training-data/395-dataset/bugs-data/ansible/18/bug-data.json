{
    "ansible:18": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_18/lib/ansible/cli/galaxy.py": {
            "buggy_functions": [
                {
                    "function_name": "init_parser",
                    "function_code": "def init_parser(self):\n    ''' create an options parser for bin/ansible '''\n\n    super(GalaxyCLI, self).init_parser(\n        desc=\"Perform various Role related operations.\",\n    )\n\n    # common\n    common = opt_help.argparse.ArgumentParser(add_help=False)\n    common.add_argument('-s', '--server', dest='api_server', default=C.GALAXY_SERVER, help='The API server destination')\n    common.add_argument('-c', '--ignore-certs', action='store_true', dest='ignore_certs', default=C.GALAXY_IGNORE_CERTS,\n                        help='Ignore SSL certificate validation errors.')\n    opt_help.add_verbosity_options(common)\n\n    # options that apply to more than one action\n    user_repo = opt_help.argparse.ArgumentParser(add_help=False)\n    user_repo.add_argument('github_user', help='GitHub username')\n    user_repo.add_argument('github_repo', help='GitHub repository')\n\n    offline = opt_help.argparse.ArgumentParser(add_help=False)\n    offline.add_argument('--offline', dest='offline', default=False, action='store_true',\n                         help=\"Don't query the galaxy API when creating roles\")\n\n    default_roles_path = C.config.get_configuration_definition('DEFAULT_ROLES_PATH').get('default', '')\n    roles_path = opt_help.argparse.ArgumentParser(add_help=False)\n    roles_path.add_argument('-p', '--roles-path', dest='roles_path', type=opt_help.unfrack_path(pathsep=True),\n                            default=C.DEFAULT_ROLES_PATH, action=opt_help.PrependListAction,\n                            help='The path to the directory containing your roles. The default is the first writable one'\n                                 'configured via DEFAULT_ROLES_PATH: %s ' % default_roles_path)\n\n    force = opt_help.argparse.ArgumentParser(add_help=False)\n    force.add_argument('-f', '--force', dest='force', action='store_true', default=False,\n                       help='Force overwriting an existing role or collection')\n\n    # Add sub parser for the Galaxy role type (role or collection)\n    type_parser = self.parser.add_subparsers(metavar='TYPE', dest='type')\n    type_parser.required = True\n\n    # Define the actions for the collection object type\n    collection = type_parser.add_parser('collection',\n                                        parents=[common],\n                                        help='Manage an Ansible Galaxy collection.')\n\n    collection_parser = collection.add_subparsers(metavar='ACTION', dest='collection')\n    collection_parser.required = True\n\n    build_parser = collection_parser.add_parser(\n        'build', help='Build an Ansible collection artifact that can be published to Ansible Galaxy.',\n        parents=[common, force])\n    build_parser.set_defaults(func=self.execute_build)\n    build_parser.add_argument(\n        'args', metavar='collection', nargs='*', default=('./',),\n        help='Path to the collection(s) directory to build. This should be the directory that contains the '\n             'galaxy.yml file. The default is the current working directory.')\n\n    build_parser.add_argument(\n        '--output-path', dest='output_path', default='./',\n        help='The path in which the collection is built to. The default is the current working directory.')\n\n    self.add_init_parser(collection_parser, [common, force])\n\n    cinstall_parser = collection_parser.add_parser('install', help='Install collection from Ansible Galaxy',\n                                                   parents=[force, common])\n    cinstall_parser.set_defaults(func=self.execute_install)\n    cinstall_parser.add_argument('args', metavar='collection_name', nargs='*',\n                                 help='The collection(s) name or path/url to a tar.gz collection artifact. This '\n                                      'is mutually exclusive with --requirements-file.')\n    cinstall_parser.add_argument('-p', '--collections-path', dest='collections_path', required=True,\n                                 help='The path to the directory containing your collections.')\n    cinstall_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False,\n                                 help='Ignore errors during installation and continue with the next specified '\n                                      'collection. This will not ignore dependency conflict errors.')\n    cinstall_parser.add_argument('-r', '--requirements-file', dest='requirements',\n                                 help='A file containing a list of collections to be installed.')\n\n    cinstall_exclusive = cinstall_parser.add_mutually_exclusive_group()\n    cinstall_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False,\n                                    help=\"Don't download collections listed as dependencies\")\n    cinstall_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False,\n                                    help=\"Force overwriting an existing collection and its dependencies\")\n\n    publish_parser = collection_parser.add_parser(\n        'publish', help='Publish a collection artifact to Ansible Galaxy.',\n        parents=[common])\n    publish_parser.set_defaults(func=self.execute_publish)\n    publish_parser.add_argument(\n        'args', metavar='collection_path', help='The path to the collection tarball to publish.')\n    publish_parser.add_argument(\n        '--api-key', dest='api_key',\n        help='The Ansible Galaxy API key which can be found at https://galaxy.ansible.com/me/preferences. '\n             'You can also use ansible-galaxy login to retrieve this key.')\n    publish_parser.add_argument(\n        '--no-wait', dest='wait', action='store_false', default=True,\n        help=\"Don't wait for import validation results.\")\n\n    # Define the actions for the role object type\n    role = type_parser.add_parser('role',\n                                  parents=[common],\n                                  help='Manage an Ansible Galaxy role.')\n    role_parser = role.add_subparsers(metavar='ACTION', dest='role')\n    role_parser.required = True\n\n    delete_parser = role_parser.add_parser('delete', parents=[user_repo, common],\n                                           help='Removes the role from Galaxy. It does not remove or alter the actual GitHub repository.')\n    delete_parser.set_defaults(func=self.execute_delete)\n\n    import_parser = role_parser.add_parser('import', help='Import a role', parents=[user_repo, common])\n    import_parser.set_defaults(func=self.execute_import)\n    import_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import results.\")\n    import_parser.add_argument('--branch', dest='reference',\n                               help='The name of a branch to import. Defaults to the repository\\'s default branch (usually master)')\n    import_parser.add_argument('--role-name', dest='role_name', help='The name the role should have, if different than the repo name')\n    import_parser.add_argument('--status', dest='check_status', action='store_true', default=False,\n                               help='Check the status of the most recent import request for given github_user/github_repo.')\n\n    info_parser = role_parser.add_parser('info', help='View more details about a specific role.',\n                                         parents=[offline, common, roles_path])\n    info_parser.set_defaults(func=self.execute_info)\n    info_parser.add_argument('args', nargs='+', help='role', metavar='role_name[,version]')\n\n    rinit_parser = self.add_init_parser(role_parser, [offline, force, common])\n    rinit_parser.add_argument('--type',\n                              dest='role_type',\n                              action='store',\n                              default='default',\n                              help=\"Initialize using an alternate role type. Valid types include: 'container', 'apb' and 'network'.\")\n\n    install_parser = role_parser.add_parser('install', help='Install Roles from file(s), URL(s) or tar file(s)',\n                                            parents=[force, common, roles_path])\n    install_parser.set_defaults(func=self.execute_install)\n    install_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False,\n                                help='Ignore errors and continue with the next specified role.')\n    install_parser.add_argument('-r', '--role-file', dest='role_file', help='A file containing a list of roles to be imported')\n    install_parser.add_argument('-g', '--keep-scm-meta', dest='keep_scm_meta', action='store_true',\n                                default=False, help='Use tar instead of the scm archive option when packaging the role')\n    install_parser.add_argument('args', help='Role name, URL or tar file', metavar='role', nargs='*')\n    install_exclusive = install_parser.add_mutually_exclusive_group()\n    install_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False,\n                                   help=\"Don't download roles listed as dependencies\")\n    install_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False,\n                                   help=\"Force overwriting an existing role and it's dependencies\")\n\n    remove_parser = role_parser.add_parser('remove', help='Delete roles from roles_path.', parents=[common, roles_path])\n    remove_parser.set_defaults(func=self.execute_remove)\n    remove_parser.add_argument('args', help='Role(s)', metavar='role', nargs='+')\n\n    list_parser = role_parser.add_parser('list', help='Show the name and version of each role installed in the roles_path.',\n                                         parents=[common, roles_path])\n    list_parser.set_defaults(func=self.execute_list)\n    list_parser.add_argument('role', help='Role', nargs='?', metavar='role')\n\n    login_parser = role_parser.add_parser('login', parents=[common],\n                                          help=\"Login to api.github.com server in order to use ansible-galaxy role \"\n                                               \"sub command such as 'import', 'delete', 'publish', and 'setup'\")\n    login_parser.set_defaults(func=self.execute_login)\n    login_parser.add_argument('--github-token', dest='token', default=None,\n                              help='Identify with github token rather than username and password.')\n\n    search_parser = role_parser.add_parser('search', help='Search the Galaxy database by tags, platforms, author and multiple keywords.',\n                                           parents=[common])\n    search_parser.set_defaults(func=self.execute_search)\n    search_parser.add_argument('--platforms', dest='platforms', help='list of OS platforms to filter by')\n    search_parser.add_argument('--galaxy-tags', dest='galaxy_tags', help='list of galaxy tags to filter by')\n    search_parser.add_argument('--author', dest='author', help='GitHub username')\n    search_parser.add_argument('args', help='Search terms', metavar='searchterm', nargs='*')\n\n    setup_parser = role_parser.add_parser('setup', help='Manage the integration between Galaxy and the given source.',\n                                          parents=[roles_path, common])\n    setup_parser.set_defaults(func=self.execute_setup)\n    setup_parser.add_argument('--remove', dest='remove_id', default=None,\n                              help='Remove the integration matching the provided ID value. Use --list to see ID values.')\n    setup_parser.add_argument('--list', dest=\"setup_list\", action='store_true', default=False, help='List all of your integrations.')\n    setup_parser.add_argument('source', help='Source')\n    setup_parser.add_argument('github_user', help='GitHub username')\n    setup_parser.add_argument('github_repo', help='GitHub repository')\n    setup_parser.add_argument('secret', help='Secret')\n",
                    "decorators": [],
                    "docstring": "create an options parser for bin/ansible ",
                    "start_line": 54,
                    "end_line": 229,
                    "variables": {
                        "init_parser": [
                            57
                        ],
                        "super": [
                            57
                        ],
                        "GalaxyCLI": [
                            57
                        ],
                        "self": [
                            161,
                            197,
                            103,
                            138,
                            171,
                            202,
                            174,
                            208,
                            113,
                            117,
                            214,
                            183,
                            89,
                            222,
                            158,
                            57
                        ],
                        "common": [
                            137,
                            151,
                            156,
                            160,
                            170,
                            174,
                            182,
                            62,
                            63,
                            64,
                            66,
                            196,
                            201,
                            205,
                            213,
                            221,
                            94,
                            102,
                            113,
                            116
                        ],
                        "opt_help.argparse.ArgumentParser": [
                            69,
                            73,
                            78,
                            84,
                            62
                        ],
                        "opt_help.argparse": [
                            69,
                            73,
                            78,
                            84,
                            62
                        ],
                        "opt_help": [
                            66,
                            69,
                            73,
                            78,
                            79,
                            80,
                            84,
                            62
                        ],
                        "common.add_argument": [
                            64,
                            63
                        ],
                        "C.GALAXY_SERVER": [
                            63
                        ],
                        "C": [
                            64,
                            80,
                            77,
                            63
                        ],
                        "C.GALAXY_IGNORE_CERTS": [
                            64
                        ],
                        "opt_help.add_verbosity_options": [
                            66
                        ],
                        "user_repo": [
                            160,
                            69,
                            70,
                            71,
                            156
                        ],
                        "user_repo.add_argument": [
                            70,
                            71
                        ],
                        "offline": [
                            170,
                            73,
                            74,
                            174
                        ],
                        "offline.add_argument": [
                            74
                        ],
                        "default_roles_path": [
                            82,
                            77
                        ],
                        "get": [
                            77
                        ],
                        "C.config.get_configuration_definition": [
                            77
                        ],
                        "C.config": [
                            77
                        ],
                        "roles_path": [
                            196,
                            201,
                            170,
                            78,
                            79,
                            182,
                            221
                        ],
                        "roles_path.add_argument": [
                            79
                        ],
                        "opt_help.unfrack_path": [
                            79
                        ],
                        "C.DEFAULT_ROLES_PATH": [
                            80
                        ],
                        "opt_help.PrependListAction": [
                            80
                        ],
                        "force": [
                            102,
                            174,
                            113,
                            116,
                            84,
                            85,
                            182
                        ],
                        "force.add_argument": [
                            85
                        ],
                        "type_parser": [
                            89,
                            90,
                            93,
                            150
                        ],
                        "self.parser.add_subparsers": [
                            89
                        ],
                        "self.parser": [
                            89
                        ],
                        "type_parser.required": [
                            90
                        ],
                        "collection": [
                            97,
                            93
                        ],
                        "type_parser.add_parser": [
                            93,
                            150
                        ],
                        "collection_parser": [
                            97,
                            98,
                            100,
                            135,
                            113,
                            115
                        ],
                        "collection.add_subparsers": [
                            97
                        ],
                        "collection_parser.required": [
                            98
                        ],
                        "build_parser": [
                            104,
                            100,
                            109,
                            103
                        ],
                        "collection_parser.add_parser": [
                            115,
                            100,
                            135
                        ],
                        "build_parser.set_defaults": [
                            103
                        ],
                        "self.execute_build": [
                            103
                        ],
                        "build_parser.add_argument": [
                            104,
                            109
                        ],
                        "self.add_init_parser": [
                            113,
                            174
                        ],
                        "cinstall_parser": [
                            129,
                            115,
                            117,
                            118,
                            121,
                            123,
                            126
                        ],
                        "cinstall_parser.set_defaults": [
                            117
                        ],
                        "self.execute_install": [
                            117,
                            183
                        ],
                        "cinstall_parser.add_argument": [
                            121,
                            126,
                            123,
                            118
                        ],
                        "cinstall_exclusive": [
                            129,
                            130,
                            132
                        ],
                        "cinstall_parser.add_mutually_exclusive_group": [
                            129
                        ],
                        "cinstall_exclusive.add_argument": [
                            130,
                            132
                        ],
                        "publish_parser": [
                            135,
                            138,
                            139,
                            141,
                            145
                        ],
                        "publish_parser.set_defaults": [
                            138
                        ],
                        "self.execute_publish": [
                            138
                        ],
                        "publish_parser.add_argument": [
                            145,
                            139,
                            141
                        ],
                        "role": [
                            153,
                            150
                        ],
                        "role_parser": [
                            160,
                            196,
                            200,
                            169,
                            205,
                            174,
                            220,
                            212,
                            181,
                            153,
                            154,
                            156
                        ],
                        "role.add_subparsers": [
                            153
                        ],
                        "role_parser.required": [
                            154
                        ],
                        "delete_parser": [
                            156,
                            158
                        ],
                        "role_parser.add_parser": [
                            160,
                            196,
                            200,
                            169,
                            205,
                            220,
                            212,
                            181,
                            156
                        ],
                        "delete_parser.set_defaults": [
                            158
                        ],
                        "self.execute_delete": [
                            158
                        ],
                        "import_parser": [
                            160,
                            161,
                            162,
                            163,
                            165,
                            166
                        ],
                        "import_parser.set_defaults": [
                            161
                        ],
                        "self.execute_import": [
                            161
                        ],
                        "import_parser.add_argument": [
                            162,
                            163,
                            165,
                            166
                        ],
                        "info_parser": [
                            169,
                            171,
                            172
                        ],
                        "info_parser.set_defaults": [
                            171
                        ],
                        "self.execute_info": [
                            171
                        ],
                        "info_parser.add_argument": [
                            172
                        ],
                        "rinit_parser": [
                            174,
                            175
                        ],
                        "rinit_parser.add_argument": [
                            175
                        ],
                        "install_parser": [
                            181,
                            183,
                            184,
                            186,
                            187,
                            189,
                            190
                        ],
                        "install_parser.set_defaults": [
                            183
                        ],
                        "install_parser.add_argument": [
                            184,
                            186,
                            187,
                            189
                        ],
                        "install_exclusive": [
                            193,
                            190,
                            191
                        ],
                        "install_parser.add_mutually_exclusive_group": [
                            190
                        ],
                        "install_exclusive.add_argument": [
                            193,
                            191
                        ],
                        "remove_parser": [
                            196,
                            197,
                            198
                        ],
                        "remove_parser.set_defaults": [
                            197
                        ],
                        "self.execute_remove": [
                            197
                        ],
                        "remove_parser.add_argument": [
                            198
                        ],
                        "list_parser": [
                            200,
                            202,
                            203
                        ],
                        "list_parser.set_defaults": [
                            202
                        ],
                        "self.execute_list": [
                            202
                        ],
                        "list_parser.add_argument": [
                            203
                        ],
                        "login_parser": [
                            208,
                            209,
                            205
                        ],
                        "login_parser.set_defaults": [
                            208
                        ],
                        "self.execute_login": [
                            208
                        ],
                        "login_parser.add_argument": [
                            209
                        ],
                        "search_parser": [
                            212,
                            214,
                            215,
                            216,
                            217,
                            218
                        ],
                        "search_parser.set_defaults": [
                            214
                        ],
                        "self.execute_search": [
                            214
                        ],
                        "search_parser.add_argument": [
                            216,
                            217,
                            218,
                            215
                        ],
                        "setup_parser": [
                            225,
                            226,
                            227,
                            228,
                            229,
                            220,
                            222,
                            223
                        ],
                        "setup_parser.set_defaults": [
                            222
                        ],
                        "self.execute_setup": [
                            222
                        ],
                        "setup_parser.add_argument": [
                            225,
                            226,
                            227,
                            228,
                            229,
                            223
                        ]
                    },
                    "filtered_variables": {
                        "init_parser": [
                            57
                        ],
                        "GalaxyCLI": [
                            57
                        ],
                        "self": [
                            161,
                            197,
                            103,
                            138,
                            171,
                            202,
                            174,
                            208,
                            113,
                            117,
                            214,
                            183,
                            89,
                            222,
                            158,
                            57
                        ],
                        "common": [
                            137,
                            151,
                            156,
                            160,
                            170,
                            174,
                            182,
                            62,
                            63,
                            64,
                            66,
                            196,
                            201,
                            205,
                            213,
                            221,
                            94,
                            102,
                            113,
                            116
                        ],
                        "opt_help.argparse.ArgumentParser": [
                            69,
                            73,
                            78,
                            84,
                            62
                        ],
                        "opt_help.argparse": [
                            69,
                            73,
                            78,
                            84,
                            62
                        ],
                        "opt_help": [
                            66,
                            69,
                            73,
                            78,
                            79,
                            80,
                            84,
                            62
                        ],
                        "common.add_argument": [
                            64,
                            63
                        ],
                        "C.GALAXY_SERVER": [
                            63
                        ],
                        "C": [
                            64,
                            80,
                            77,
                            63
                        ],
                        "C.GALAXY_IGNORE_CERTS": [
                            64
                        ],
                        "opt_help.add_verbosity_options": [
                            66
                        ],
                        "user_repo": [
                            160,
                            69,
                            70,
                            71,
                            156
                        ],
                        "user_repo.add_argument": [
                            70,
                            71
                        ],
                        "offline": [
                            170,
                            73,
                            74,
                            174
                        ],
                        "offline.add_argument": [
                            74
                        ],
                        "default_roles_path": [
                            82,
                            77
                        ],
                        "get": [
                            77
                        ],
                        "C.config.get_configuration_definition": [
                            77
                        ],
                        "C.config": [
                            77
                        ],
                        "roles_path": [
                            196,
                            201,
                            170,
                            78,
                            79,
                            182,
                            221
                        ],
                        "roles_path.add_argument": [
                            79
                        ],
                        "opt_help.unfrack_path": [
                            79
                        ],
                        "C.DEFAULT_ROLES_PATH": [
                            80
                        ],
                        "opt_help.PrependListAction": [
                            80
                        ],
                        "force": [
                            102,
                            174,
                            113,
                            116,
                            84,
                            85,
                            182
                        ],
                        "force.add_argument": [
                            85
                        ],
                        "type_parser": [
                            89,
                            90,
                            93,
                            150
                        ],
                        "self.parser.add_subparsers": [
                            89
                        ],
                        "self.parser": [
                            89
                        ],
                        "type_parser.required": [
                            90
                        ],
                        "collection": [
                            97,
                            93
                        ],
                        "type_parser.add_parser": [
                            93,
                            150
                        ],
                        "collection_parser": [
                            97,
                            98,
                            100,
                            135,
                            113,
                            115
                        ],
                        "collection.add_subparsers": [
                            97
                        ],
                        "collection_parser.required": [
                            98
                        ],
                        "build_parser": [
                            104,
                            100,
                            109,
                            103
                        ],
                        "collection_parser.add_parser": [
                            115,
                            100,
                            135
                        ],
                        "build_parser.set_defaults": [
                            103
                        ],
                        "self.execute_build": [
                            103
                        ],
                        "build_parser.add_argument": [
                            104,
                            109
                        ],
                        "self.add_init_parser": [
                            113,
                            174
                        ],
                        "cinstall_parser": [
                            129,
                            115,
                            117,
                            118,
                            121,
                            123,
                            126
                        ],
                        "cinstall_parser.set_defaults": [
                            117
                        ],
                        "self.execute_install": [
                            117,
                            183
                        ],
                        "cinstall_parser.add_argument": [
                            121,
                            126,
                            123,
                            118
                        ],
                        "cinstall_exclusive": [
                            129,
                            130,
                            132
                        ],
                        "cinstall_parser.add_mutually_exclusive_group": [
                            129
                        ],
                        "cinstall_exclusive.add_argument": [
                            130,
                            132
                        ],
                        "publish_parser": [
                            135,
                            138,
                            139,
                            141,
                            145
                        ],
                        "publish_parser.set_defaults": [
                            138
                        ],
                        "self.execute_publish": [
                            138
                        ],
                        "publish_parser.add_argument": [
                            145,
                            139,
                            141
                        ],
                        "role": [
                            153,
                            150
                        ],
                        "role_parser": [
                            160,
                            196,
                            200,
                            169,
                            205,
                            174,
                            220,
                            212,
                            181,
                            153,
                            154,
                            156
                        ],
                        "role.add_subparsers": [
                            153
                        ],
                        "role_parser.required": [
                            154
                        ],
                        "delete_parser": [
                            156,
                            158
                        ],
                        "role_parser.add_parser": [
                            160,
                            196,
                            200,
                            169,
                            205,
                            220,
                            212,
                            181,
                            156
                        ],
                        "delete_parser.set_defaults": [
                            158
                        ],
                        "self.execute_delete": [
                            158
                        ],
                        "import_parser": [
                            160,
                            161,
                            162,
                            163,
                            165,
                            166
                        ],
                        "import_parser.set_defaults": [
                            161
                        ],
                        "self.execute_import": [
                            161
                        ],
                        "import_parser.add_argument": [
                            162,
                            163,
                            165,
                            166
                        ],
                        "info_parser": [
                            169,
                            171,
                            172
                        ],
                        "info_parser.set_defaults": [
                            171
                        ],
                        "self.execute_info": [
                            171
                        ],
                        "info_parser.add_argument": [
                            172
                        ],
                        "rinit_parser": [
                            174,
                            175
                        ],
                        "rinit_parser.add_argument": [
                            175
                        ],
                        "install_parser": [
                            181,
                            183,
                            184,
                            186,
                            187,
                            189,
                            190
                        ],
                        "install_parser.set_defaults": [
                            183
                        ],
                        "install_parser.add_argument": [
                            184,
                            186,
                            187,
                            189
                        ],
                        "install_exclusive": [
                            193,
                            190,
                            191
                        ],
                        "install_parser.add_mutually_exclusive_group": [
                            190
                        ],
                        "install_exclusive.add_argument": [
                            193,
                            191
                        ],
                        "remove_parser": [
                            196,
                            197,
                            198
                        ],
                        "remove_parser.set_defaults": [
                            197
                        ],
                        "self.execute_remove": [
                            197
                        ],
                        "remove_parser.add_argument": [
                            198
                        ],
                        "list_parser": [
                            200,
                            202,
                            203
                        ],
                        "list_parser.set_defaults": [
                            202
                        ],
                        "self.execute_list": [
                            202
                        ],
                        "list_parser.add_argument": [
                            203
                        ],
                        "login_parser": [
                            208,
                            209,
                            205
                        ],
                        "login_parser.set_defaults": [
                            208
                        ],
                        "self.execute_login": [
                            208
                        ],
                        "login_parser.add_argument": [
                            209
                        ],
                        "search_parser": [
                            212,
                            214,
                            215,
                            216,
                            217,
                            218
                        ],
                        "search_parser.set_defaults": [
                            214
                        ],
                        "self.execute_search": [
                            214
                        ],
                        "search_parser.add_argument": [
                            216,
                            217,
                            218,
                            215
                        ],
                        "setup_parser": [
                            225,
                            226,
                            227,
                            228,
                            229,
                            220,
                            222,
                            223
                        ],
                        "setup_parser.set_defaults": [
                            222
                        ],
                        "self.execute_setup": [
                            222
                        ],
                        "setup_parser.add_argument": [
                            225,
                            226,
                            227,
                            228,
                            229,
                            223
                        ]
                    },
                    "diff_line_number": 58,
                    "class_data": {
                        "signature": "class GalaxyCLI(CLI)",
                        "docstring": "command to manage Ansible roles in shared repositories, the default of which is Ansible Galaxy *https://galaxy.ansible.com*.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, args):\n    if len(args) > 1 and args[1] not in ['-h', '--help'] and ('role' not in args) and ('collection' not in args):\n        args.insert(1, 'role')\n    self.api = None\n    self.galaxy = None\n    super(GalaxyCLI, self).__init__(args)",
                            "def init_parser(self):\n    \"\"\" create an options parser for bin/ansible \"\"\"\n    super(GalaxyCLI, self).init_parser(desc='Perform various Role related operations.')\n    common = opt_help.argparse.ArgumentParser(add_help=False)\n    common.add_argument('-s', '--server', dest='api_server', default=C.GALAXY_SERVER, help='The API server destination')\n    common.add_argument('-c', '--ignore-certs', action='store_true', dest='ignore_certs', default=C.GALAXY_IGNORE_CERTS, help='Ignore SSL certificate validation errors.')\n    opt_help.add_verbosity_options(common)\n    user_repo = opt_help.argparse.ArgumentParser(add_help=False)\n    user_repo.add_argument('github_user', help='GitHub username')\n    user_repo.add_argument('github_repo', help='GitHub repository')\n    offline = opt_help.argparse.ArgumentParser(add_help=False)\n    offline.add_argument('--offline', dest='offline', default=False, action='store_true', help=\"Don't query the galaxy API when creating roles\")\n    default_roles_path = C.config.get_configuration_definition('DEFAULT_ROLES_PATH').get('default', '')\n    roles_path = opt_help.argparse.ArgumentParser(add_help=False)\n    roles_path.add_argument('-p', '--roles-path', dest='roles_path', type=opt_help.unfrack_path(pathsep=True), default=C.DEFAULT_ROLES_PATH, action=opt_help.PrependListAction, help='The path to the directory containing your roles. The default is the first writable oneconfigured via DEFAULT_ROLES_PATH: %s ' % default_roles_path)\n    force = opt_help.argparse.ArgumentParser(add_help=False)\n    force.add_argument('-f', '--force', dest='force', action='store_true', default=False, help='Force overwriting an existing role or collection')\n    type_parser = self.parser.add_subparsers(metavar='TYPE', dest='type')\n    type_parser.required = True\n    collection = type_parser.add_parser('collection', parents=[common], help='Manage an Ansible Galaxy collection.')\n    collection_parser = collection.add_subparsers(metavar='ACTION', dest='collection')\n    collection_parser.required = True\n    build_parser = collection_parser.add_parser('build', help='Build an Ansible collection artifact that can be published to Ansible Galaxy.', parents=[common, force])\n    build_parser.set_defaults(func=self.execute_build)\n    build_parser.add_argument('args', metavar='collection', nargs='*', default=('./',), help='Path to the collection(s) directory to build. This should be the directory that contains the galaxy.yml file. The default is the current working directory.')\n    build_parser.add_argument('--output-path', dest='output_path', default='./', help='The path in which the collection is built to. The default is the current working directory.')\n    self.add_init_parser(collection_parser, [common, force])\n    cinstall_parser = collection_parser.add_parser('install', help='Install collection from Ansible Galaxy', parents=[force, common])\n    cinstall_parser.set_defaults(func=self.execute_install)\n    cinstall_parser.add_argument('args', metavar='collection_name', nargs='*', help='The collection(s) name or path/url to a tar.gz collection artifact. This is mutually exclusive with --requirements-file.')\n    cinstall_parser.add_argument('-p', '--collections-path', dest='collections_path', required=True, help='The path to the directory containing your collections.')\n    cinstall_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False, help='Ignore errors during installation and continue with the next specified collection. This will not ignore dependency conflict errors.')\n    cinstall_parser.add_argument('-r', '--requirements-file', dest='requirements', help='A file containing a list of collections to be installed.')\n    cinstall_exclusive = cinstall_parser.add_mutually_exclusive_group()\n    cinstall_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False, help=\"Don't download collections listed as dependencies\")\n    cinstall_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False, help='Force overwriting an existing collection and its dependencies')\n    publish_parser = collection_parser.add_parser('publish', help='Publish a collection artifact to Ansible Galaxy.', parents=[common])\n    publish_parser.set_defaults(func=self.execute_publish)\n    publish_parser.add_argument('args', metavar='collection_path', help='The path to the collection tarball to publish.')\n    publish_parser.add_argument('--api-key', dest='api_key', help='The Ansible Galaxy API key which can be found at https://galaxy.ansible.com/me/preferences. You can also use ansible-galaxy login to retrieve this key.')\n    publish_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import validation results.\")\n    role = type_parser.add_parser('role', parents=[common], help='Manage an Ansible Galaxy role.')\n    role_parser = role.add_subparsers(metavar='ACTION', dest='role')\n    role_parser.required = True\n    delete_parser = role_parser.add_parser('delete', parents=[user_repo, common], help='Removes the role from Galaxy. It does not remove or alter the actual GitHub repository.')\n    delete_parser.set_defaults(func=self.execute_delete)\n    import_parser = role_parser.add_parser('import', help='Import a role', parents=[user_repo, common])\n    import_parser.set_defaults(func=self.execute_import)\n    import_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import results.\")\n    import_parser.add_argument('--branch', dest='reference', help=\"The name of a branch to import. Defaults to the repository's default branch (usually master)\")\n    import_parser.add_argument('--role-name', dest='role_name', help='The name the role should have, if different than the repo name')\n    import_parser.add_argument('--status', dest='check_status', action='store_true', default=False, help='Check the status of the most recent import request for given github_user/github_repo.')\n    info_parser = role_parser.add_parser('info', help='View more details about a specific role.', parents=[offline, common, roles_path])\n    info_parser.set_defaults(func=self.execute_info)\n    info_parser.add_argument('args', nargs='+', help='role', metavar='role_name[,version]')\n    rinit_parser = self.add_init_parser(role_parser, [offline, force, common])\n    rinit_parser.add_argument('--type', dest='role_type', action='store', default='default', help=\"Initialize using an alternate role type. Valid types include: 'container', 'apb' and 'network'.\")\n    install_parser = role_parser.add_parser('install', help='Install Roles from file(s), URL(s) or tar file(s)', parents=[force, common, roles_path])\n    install_parser.set_defaults(func=self.execute_install)\n    install_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False, help='Ignore errors and continue with the next specified role.')\n    install_parser.add_argument('-r', '--role-file', dest='role_file', help='A file containing a list of roles to be imported')\n    install_parser.add_argument('-g', '--keep-scm-meta', dest='keep_scm_meta', action='store_true', default=False, help='Use tar instead of the scm archive option when packaging the role')\n    install_parser.add_argument('args', help='Role name, URL or tar file', metavar='role', nargs='*')\n    install_exclusive = install_parser.add_mutually_exclusive_group()\n    install_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False, help=\"Don't download roles listed as dependencies\")\n    install_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False, help=\"Force overwriting an existing role and it's dependencies\")\n    remove_parser = role_parser.add_parser('remove', help='Delete roles from roles_path.', parents=[common, roles_path])\n    remove_parser.set_defaults(func=self.execute_remove)\n    remove_parser.add_argument('args', help='Role(s)', metavar='role', nargs='+')\n    list_parser = role_parser.add_parser('list', help='Show the name and version of each role installed in the roles_path.', parents=[common, roles_path])\n    list_parser.set_defaults(func=self.execute_list)\n    list_parser.add_argument('role', help='Role', nargs='?', metavar='role')\n    login_parser = role_parser.add_parser('login', parents=[common], help=\"Login to api.github.com server in order to use ansible-galaxy role sub command such as 'import', 'delete', 'publish', and 'setup'\")\n    login_parser.set_defaults(func=self.execute_login)\n    login_parser.add_argument('--github-token', dest='token', default=None, help='Identify with github token rather than username and password.')\n    search_parser = role_parser.add_parser('search', help='Search the Galaxy database by tags, platforms, author and multiple keywords.', parents=[common])\n    search_parser.set_defaults(func=self.execute_search)\n    search_parser.add_argument('--platforms', dest='platforms', help='list of OS platforms to filter by')\n    search_parser.add_argument('--galaxy-tags', dest='galaxy_tags', help='list of galaxy tags to filter by')\n    search_parser.add_argument('--author', dest='author', help='GitHub username')\n    search_parser.add_argument('args', help='Search terms', metavar='searchterm', nargs='*')\n    setup_parser = role_parser.add_parser('setup', help='Manage the integration between Galaxy and the given source.', parents=[roles_path, common])\n    setup_parser.set_defaults(func=self.execute_setup)\n    setup_parser.add_argument('--remove', dest='remove_id', default=None, help='Remove the integration matching the provided ID value. Use --list to see ID values.')\n    setup_parser.add_argument('--list', dest='setup_list', action='store_true', default=False, help='List all of your integrations.')\n    setup_parser.add_argument('source', help='Source')\n    setup_parser.add_argument('github_user', help='GitHub username')\n    setup_parser.add_argument('github_repo', help='GitHub repository')\n    setup_parser.add_argument('secret', help='Secret')",
                            "def add_init_parser(self, parser, parents):\n    galaxy_type = parser.dest\n    obj_name_kwargs = {}\n    if galaxy_type == 'collection':\n        obj_name_kwargs['type'] = GalaxyCLI._validate_collection_name\n    init_parser = parser.add_parser('init', help='Initialize new {0} with the base structure of a {0}.'.format(galaxy_type), parents=parents)\n    init_parser.set_defaults(func=self.execute_init)\n    init_parser.add_argument('--init-path', dest='init_path', default='./', help='The path in which the skeleton {0} will be created. The default is the current working directory.'.format(galaxy_type))\n    init_parser.add_argument('--{0}-skeleton'.format(galaxy_type), dest='{0}_skeleton'.format(galaxy_type), default=C.GALAXY_ROLE_SKELETON, help='The path to a {0} skeleton that the new {0} should be based upon.'.format(galaxy_type))\n    init_parser.add_argument('{0}_name'.format(galaxy_type), help='{0} name'.format(galaxy_type.capitalize()), **obj_name_kwargs)\n    return init_parser",
                            "def post_process_args(self, options):\n    options = super(GalaxyCLI, self).post_process_args(options)\n    display.verbosity = options.verbosity\n    return options",
                            "def run(self):\n    super(GalaxyCLI, self).run()\n    self.galaxy = Galaxy()\n    self.api = GalaxyAPI(self.galaxy)\n    context.CLIARGS['func']()",
                            "@staticmethod\ndef exit_without_ignore(rc=1):\n    \"\"\"\n    Exits with the specified return code unless the\n    option --ignore-errors was specified\n    \"\"\"\n    if not context.CLIARGS['ignore_errors']:\n        raise AnsibleError('- you can use --ignore-errors to skip failed roles and finish processing the list.')",
                            "@staticmethod\ndef _display_role_info(role_info):\n    text = [u'', u'Role: %s' % to_text(role_info['name'])]\n    text.append(u'\\tdescription: %s' % role_info.get('description', ''))\n    for k in sorted(role_info.keys()):\n        if k in GalaxyCLI.SKIP_INFO_KEYS:\n            continue\n        if isinstance(role_info[k], dict):\n            text.append(u'\\t%s:' % k)\n            for key in sorted(role_info[k].keys()):\n                if key in GalaxyCLI.SKIP_INFO_KEYS:\n                    continue\n                text.append(u'\\t\\t%s: %s' % (key, role_info[k][key]))\n        else:\n            text.append(u'\\t%s: %s' % (k, role_info[k]))\n    return u'\\n'.join(text)",
                            "@staticmethod\ndef _resolve_path(path):\n    return os.path.abspath(os.path.expanduser(os.path.expandvars(path)))",
                            "@staticmethod\ndef _validate_collection_name(name):\n    if is_collection_ref('ansible_collections.{0}'.format(name)):\n        return name\n    raise AnsibleError('Invalid collection name, must be in the format <namespace>.<collection>')",
                            "@staticmethod\ndef _get_skeleton_galaxy_yml(template_path, inject_data):\n    with open(to_bytes(template_path, errors='surrogate_or_strict'), 'rb') as template_obj:\n        meta_template = to_text(template_obj.read(), errors='surrogate_or_strict')\n    galaxy_meta = get_collections_galaxy_meta_info()\n    required_config = []\n    optional_config = []\n    for meta_entry in galaxy_meta:\n        config_list = required_config if meta_entry.get('required', False) else optional_config\n        value = inject_data.get(meta_entry['key'], None)\n        if not value:\n            meta_type = meta_entry.get('type', 'str')\n            if meta_type == 'str':\n                value = ''\n            elif meta_type == 'list':\n                value = []\n            elif meta_type == 'dict':\n                value = {}\n        meta_entry['value'] = value\n        config_list.append(meta_entry)\n    link_pattern = re.compile('L\\\\(([^)]+),\\\\s+([^)]+)\\\\)')\n    const_pattern = re.compile('C\\\\(([^)]+)\\\\)')\n\n    def comment_ify(v):\n        if isinstance(v, list):\n            v = '. '.join([l.rstrip('.') for l in v])\n        v = link_pattern.sub('\\\\1 <\\\\2>', v)\n        v = const_pattern.sub(\"'\\\\1'\", v)\n        return textwrap.fill(v, width=117, initial_indent='# ', subsequent_indent='# ', break_on_hyphens=False)\n\n    def to_yaml(v):\n        return yaml.safe_dump(v, default_flow_style=False).rstrip()\n    env = Environment(loader=BaseLoader)\n    env.filters['comment_ify'] = comment_ify\n    env.filters['to_yaml'] = to_yaml\n    template = env.from_string(meta_template)\n    meta_value = template.render({'required_config': required_config, 'optional_config': optional_config})\n    return meta_value",
                            "def execute_role(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy role. Must be combined with a further action like delete/install/init\n    as listed below.\n    \"\"\"\n    pass",
                            "def execute_collection(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy collection. Must be combined with a further action like init/install as\n    listed below.\n    \"\"\"\n    pass",
                            "def execute_build(self):\n    \"\"\"\n    Build an Ansible Galaxy collection artifact that can be stored in a central repository like Ansible Galaxy.\n    By default, this command builds from the current working directory. You can optionally pass in the\n    collection input path (where the ``galaxy.yml`` file is).\n    \"\"\"\n    force = context.CLIARGS['force']\n    output_path = GalaxyCLI._resolve_path(context.CLIARGS['output_path'])\n    b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n    if not os.path.exists(b_output_path):\n        os.makedirs(b_output_path)\n    elif os.path.isfile(b_output_path):\n        raise AnsibleError('- the output collection directory %s is a file - aborting' % to_native(output_path))\n    for collection_path in context.CLIARGS['args']:\n        collection_path = GalaxyCLI._resolve_path(collection_path)\n        build_collection(collection_path, output_path, force)",
                            "def execute_init(self):\n    \"\"\"\n    Creates the skeleton framework of a role or collection that complies with the Galaxy metadata format.\n    Requires a role or collection name. The collection name must be in the format ``<namespace>.<collection>``.\n    \"\"\"\n    galaxy_type = context.CLIARGS['type']\n    init_path = context.CLIARGS['init_path']\n    force = context.CLIARGS['force']\n    obj_skeleton = context.CLIARGS['{0}_skeleton'.format(galaxy_type)]\n    obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]\n    inject_data = dict(description='your description', ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'))\n    if galaxy_type == 'role':\n        inject_data.update(dict(author='your name', company='your company (optional)', license='license (GPL-2.0-or-later, MIT, etc)', role_name=obj_name, role_type=context.CLIARGS['role_type'], issue_tracker_url='http://example.com/issue/tracker', repository_url='http://example.com/repository', documentation_url='http://docs.example.com', homepage_url='http://example.com', min_ansible_version=ansible_version[:3]))\n        obj_path = os.path.join(init_path, obj_name)\n    elif galaxy_type == 'collection':\n        namespace, collection_name = obj_name.split('.', 1)\n        inject_data.update(dict(namespace=namespace, collection_name=collection_name, version='1.0.0', readme='README.md', authors=['your name <example@domain.com>'], license=['GPL-2.0-or-later'], repository='http://example.com/repository', documentation='http://docs.example.com', homepage='http://example.com', issues='http://example.com/issue/tracker'))\n        obj_path = os.path.join(init_path, namespace, collection_name)\n    b_obj_path = to_bytes(obj_path, errors='surrogate_or_strict')\n    if os.path.exists(b_obj_path):\n        if os.path.isfile(obj_path):\n            raise AnsibleError('- the path %s already exists, but is a file - aborting' % to_native(obj_path))\n        elif not force:\n            raise AnsibleError('- the directory %s already exists. You can use --force to re-initialize this directory,\\nhowever it will reset any main.yml files that may have\\nbeen modified there already.' % to_native(obj_path))\n    if obj_skeleton is not None:\n        own_skeleton = False\n        skeleton_ignore_expressions = C.GALAXY_ROLE_SKELETON_IGNORE\n    else:\n        own_skeleton = True\n        obj_skeleton = self.galaxy.default_role_skeleton_path\n        skeleton_ignore_expressions = ['^.*/.git_keep$']\n    obj_skeleton = os.path.expanduser(obj_skeleton)\n    skeleton_ignore_re = [re.compile(x) for x in skeleton_ignore_expressions]\n    if not os.path.exists(obj_skeleton):\n        raise AnsibleError(\"- the skeleton path '{0}' does not exist, cannot init {1}\".format(to_native(obj_skeleton), galaxy_type))\n    template_env = Environment(loader=FileSystemLoader(obj_skeleton))\n    if not os.path.exists(b_obj_path):\n        os.makedirs(b_obj_path)\n    for root, dirs, files in os.walk(obj_skeleton, topdown=True):\n        rel_root = os.path.relpath(root, obj_skeleton)\n        rel_dirs = rel_root.split(os.sep)\n        rel_root_dir = rel_dirs[0]\n        if galaxy_type == 'collection':\n            in_templates_dir = rel_root_dir in ['playbooks', 'roles'] and 'templates' in rel_dirs\n        else:\n            in_templates_dir = rel_root_dir == 'templates'\n        dirs[:] = [d for d in dirs if not any((r.match(d) for r in skeleton_ignore_re))]\n        for f in files:\n            filename, ext = os.path.splitext(f)\n            if any((r.match(os.path.join(rel_root, f)) for r in skeleton_ignore_re)):\n                continue\n            elif galaxy_type == 'collection' and own_skeleton and (rel_root == '.') and (f == 'galaxy.yml.j2'):\n                template_data = inject_data.copy()\n                template_data['name'] = template_data.pop('collection_name')\n                meta_value = GalaxyCLI._get_skeleton_galaxy_yml(os.path.join(root, rel_root, f), template_data)\n                b_dest_file = to_bytes(os.path.join(obj_path, rel_root, filename), errors='surrogate_or_strict')\n                with open(b_dest_file, 'wb') as galaxy_obj:\n                    galaxy_obj.write(to_bytes(meta_value, errors='surrogate_or_strict'))\n            elif ext == '.j2' and (not in_templates_dir):\n                src_template = os.path.join(rel_root, f)\n                dest_file = os.path.join(obj_path, rel_root, filename)\n                template_env.get_template(src_template).stream(inject_data).dump(dest_file, encoding='utf-8')\n            else:\n                f_rel_path = os.path.relpath(os.path.join(root, f), obj_skeleton)\n                shutil.copyfile(os.path.join(root, f), os.path.join(obj_path, f_rel_path))\n        for d in dirs:\n            b_dir_path = to_bytes(os.path.join(obj_path, rel_root, d), errors='surrogate_or_strict')\n            if not os.path.exists(b_dir_path):\n                os.makedirs(b_dir_path)\n    display.display('- %s was created successfully' % obj_name)",
                            "def execute_info(self):\n    \"\"\"\n    prints out detailed information about an installed role as well as info available from the galaxy API.\n    \"\"\"\n    roles_path = context.CLIARGS['roles_path']\n    data = ''\n    for role in context.CLIARGS['args']:\n        role_info = {'path': roles_path}\n        gr = GalaxyRole(self.galaxy, role)\n        install_info = gr.install_info\n        if install_info:\n            if 'version' in install_info:\n                install_info['installed_version'] = install_info['version']\n                del install_info['version']\n            role_info.update(install_info)\n        remote_data = False\n        if not context.CLIARGS['offline']:\n            remote_data = self.api.lookup_role_by_name(role, False)\n        if remote_data:\n            role_info.update(remote_data)\n        if gr.metadata:\n            role_info.update(gr.metadata)\n        req = RoleRequirement()\n        role_spec = req.role_yaml_parse({'role': role})\n        if role_spec:\n            role_info.update(role_spec)\n        data = self._display_role_info(role_info)\n        if not data:\n            data = u'\\n- the role %s was not found' % role\n    self.pager(data)",
                            "def execute_install(self):\n    \"\"\"\n    Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n    You can pass in a list (roles or collections) or use the file\n    option listed below (these are mutually exclusive). If you pass in a list, it\n    can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n    \"\"\"\n    if context.CLIARGS['type'] == 'collection':\n        collections = context.CLIARGS['args']\n        force = context.CLIARGS['force']\n        output_path = context.CLIARGS['collections_path']\n        servers = [context.CLIARGS['api_server']]\n        ignore_certs = context.CLIARGS['ignore_certs']\n        ignore_errors = context.CLIARGS['ignore_errors']\n        requirements_file = context.CLIARGS['requirements']\n        no_deps = context.CLIARGS['no_deps']\n        force_deps = context.CLIARGS['force_with_deps']\n        if collections and requirements_file:\n            raise AnsibleError('The positional collection_name arg and --requirements-file are mutually exclusive.')\n        elif not collections and (not requirements_file):\n            raise AnsibleError('You must specify a collection name or a requirements file.')\n        if requirements_file:\n            requirements_file = GalaxyCLI._resolve_path(requirements_file)\n            collection_requirements = parse_collections_requirements_file(requirements_file)\n        else:\n            collection_requirements = []\n            for collection_input in collections:\n                name, dummy, requirement = collection_input.partition(':')\n                collection_requirements.append((name, requirement or '*', None))\n        output_path = GalaxyCLI._resolve_path(output_path)\n        collections_path = C.COLLECTIONS_PATHS\n        if len([p for p in collections_path if p.startswith(output_path)]) == 0:\n            display.warning(\"The specified collections path '%s' is not part of the configured Ansible collections paths '%s'. The installed collection won't be picked up in an Ansible run.\" % (to_text(output_path), to_text(':'.join(collections_path))))\n        if os.path.split(output_path)[1] != 'ansible_collections':\n            output_path = os.path.join(output_path, 'ansible_collections')\n        b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n        if not os.path.exists(b_output_path):\n            os.makedirs(b_output_path)\n        install_collections(collection_requirements, output_path, servers, not ignore_certs, ignore_errors, no_deps, force, force_deps)\n        return 0\n    role_file = context.CLIARGS['role_file']\n    if not context.CLIARGS['args'] and role_file is None:\n        raise AnsibleOptionsError('- you must specify a user/role name or a roles file')\n    no_deps = context.CLIARGS['no_deps']\n    force_deps = context.CLIARGS['force_with_deps']\n    force = context.CLIARGS['force'] or force_deps\n    roles_left = []\n    if role_file:\n        try:\n            f = open(role_file, 'r')\n            if role_file.endswith('.yaml') or role_file.endswith('.yml'):\n                try:\n                    required_roles = yaml.safe_load(f.read())\n                except Exception as e:\n                    raise AnsibleError('Unable to load data from the requirements file (%s): %s' % (role_file, to_native(e)))\n                if required_roles is None:\n                    raise AnsibleError('No roles found in file: %s' % role_file)\n                for role in required_roles:\n                    if 'include' not in role:\n                        role = RoleRequirement.role_yaml_parse(role)\n                        display.vvv('found role %s in yaml file' % str(role))\n                        if 'name' not in role and 'scm' not in role:\n                            raise AnsibleError('Must specify name or src for role')\n                        roles_left.append(GalaxyRole(self.galaxy, **role))\n                    else:\n                        with open(role['include']) as f_include:\n                            try:\n                                roles_left += [GalaxyRole(self.galaxy, **r) for r in (RoleRequirement.role_yaml_parse(i) for i in yaml.safe_load(f_include))]\n                            except Exception as e:\n                                msg = 'Unable to load data from the include requirements file: %s %s'\n                                raise AnsibleError(msg % (role_file, e))\n            else:\n                raise AnsibleError('Invalid role requirements file')\n            f.close()\n        except (IOError, OSError) as e:\n            raise AnsibleError('Unable to open %s: %s' % (role_file, to_native(e)))\n    else:\n        for rname in context.CLIARGS['args']:\n            role = RoleRequirement.role_yaml_parse(rname.strip())\n            roles_left.append(GalaxyRole(self.galaxy, **role))\n    for role in roles_left:\n        if role_file and context.CLIARGS['args'] and (role.name not in context.CLIARGS['args']):\n            display.vvv('Skipping role %s' % role.name)\n            continue\n        display.vvv('Processing role %s ' % role.name)\n        if role.install_info is not None:\n            if role.install_info['version'] != role.version or force:\n                if force:\n                    display.display('- changing role %s from %s to %s' % (role.name, role.install_info['version'], role.version or 'unspecified'))\n                    role.remove()\n                else:\n                    display.warning('- %s (%s) is already installed - use --force to change version to %s' % (role.name, role.install_info['version'], role.version or 'unspecified'))\n                    continue\n            elif not force:\n                display.display('- %s is already installed, skipping.' % str(role))\n                continue\n        try:\n            installed = role.install()\n        except AnsibleError as e:\n            display.warning(u'- %s was NOT installed successfully: %s ' % (role.name, to_text(e)))\n            self.exit_without_ignore()\n            continue\n        if not no_deps and installed:\n            if not role.metadata:\n                display.warning('Meta file %s is empty. Skipping dependencies.' % role.path)\n            else:\n                role_dependencies = role.metadata.get('dependencies') or []\n                for dep in role_dependencies:\n                    display.debug('Installing dep %s' % dep)\n                    dep_req = RoleRequirement()\n                    dep_info = dep_req.role_yaml_parse(dep)\n                    dep_role = GalaxyRole(self.galaxy, **dep_info)\n                    if '.' not in dep_role.name and '.' not in dep_role.src and (dep_role.scm is None):\n                        continue\n                    if dep_role.install_info is None:\n                        if dep_role not in roles_left:\n                            display.display('- adding dependency: %s' % to_text(dep_role))\n                            roles_left.append(dep_role)\n                        else:\n                            display.display('- dependency %s already pending installation.' % dep_role.name)\n                    elif dep_role.install_info['version'] != dep_role.version:\n                        if force_deps:\n                            display.display('- changing dependant role %s from %s to %s' % (dep_role.name, dep_role.install_info['version'], dep_role.version or 'unspecified'))\n                            dep_role.remove()\n                            roles_left.append(dep_role)\n                        else:\n                            display.warning('- dependency %s (%s) from role %s differs from already installed version (%s), skipping' % (to_text(dep_role), dep_role.version, role.name, dep_role.install_info['version']))\n                    elif force_deps:\n                        roles_left.append(dep_role)\n                    else:\n                        display.display('- dependency %s is already installed, skipping.' % dep_role.name)\n        if not installed:\n            display.warning('- %s was NOT installed successfully.' % role.name)\n            self.exit_without_ignore()\n    return 0",
                            "def execute_remove(self):\n    \"\"\"\n    removes the list of roles passed as arguments from the local system.\n    \"\"\"\n    if not context.CLIARGS['args']:\n        raise AnsibleOptionsError('- you must specify at least one role to remove.')\n    for role_name in context.CLIARGS['args']:\n        role = GalaxyRole(self.galaxy, role_name)\n        try:\n            if role.remove():\n                display.display('- successfully removed %s' % role_name)\n            else:\n                display.display('- %s is not installed, skipping.' % role_name)\n        except Exception as e:\n            raise AnsibleError('Failed to remove role %s: %s' % (role_name, to_native(e)))\n    return 0",
                            "def execute_list(self):\n    \"\"\"\n    lists the roles installed on the local system or matches a single role passed as an argument.\n    \"\"\"\n\n    def _display_role(gr):\n        install_info = gr.install_info\n        version = None\n        if install_info:\n            version = install_info.get('version', None)\n        if not version:\n            version = '(unknown version)'\n        display.display('- %s, %s' % (gr.name, version))\n    if context.CLIARGS['role']:\n        name = context.CLIARGS['role']\n        gr = GalaxyRole(self.galaxy, name)\n        if gr.metadata:\n            display.display('# %s' % os.path.dirname(gr.path))\n            _display_role(gr)\n        else:\n            display.display('- the role %s was not found' % name)\n    else:\n        roles_path = context.CLIARGS['roles_path']\n        path_found = False\n        warnings = []\n        for path in roles_path:\n            role_path = os.path.expanduser(path)\n            if not os.path.exists(role_path):\n                warnings.append('- the configured path %s does not exist.' % role_path)\n                continue\n            elif not os.path.isdir(role_path):\n                warnings.append('- the configured path %s, exists, but it is not a directory.' % role_path)\n                continue\n            display.display('# %s' % role_path)\n            path_files = os.listdir(role_path)\n            path_found = True\n            for path_file in path_files:\n                gr = GalaxyRole(self.galaxy, path_file, path=path)\n                if gr.metadata:\n                    _display_role(gr)\n        for w in warnings:\n            display.warning(w)\n        if not path_found:\n            raise AnsibleOptionsError('- None of the provided paths was usable. Please specify a valid path with --roles-path')\n    return 0",
                            "def execute_publish(self):\n    \"\"\"\n    Publish a collection into Ansible Galaxy. Requires the path to the collection tarball to publish.\n    \"\"\"\n    api_key = context.CLIARGS['api_key'] or GalaxyToken().get()\n    api_server = context.CLIARGS['api_server']\n    collection_path = GalaxyCLI._resolve_path(context.CLIARGS['args'])\n    ignore_certs = context.CLIARGS['ignore_certs']\n    wait = context.CLIARGS['wait']\n    publish_collection(collection_path, api_server, api_key, ignore_certs, wait)",
                            "def execute_search(self):\n    \"\"\" searches for roles on the Ansible Galaxy server\"\"\"\n    page_size = 1000\n    search = None\n    if context.CLIARGS['args']:\n        search = '+'.join(context.CLIARGS['args'])\n    if not search and (not context.CLIARGS['platforms']) and (not context.CLIARGS['galaxy_tags']) and (not context.CLIARGS['author']):\n        raise AnsibleError('Invalid query. At least one search term, platform, galaxy tag or author must be provided.')\n    response = self.api.search_roles(search, platforms=context.CLIARGS['platforms'], tags=context.CLIARGS['galaxy_tags'], author=context.CLIARGS['author'], page_size=page_size)\n    if response['count'] == 0:\n        display.display('No roles match your search.', color=C.COLOR_ERROR)\n        return True\n    data = [u'']\n    if response['count'] > page_size:\n        data.append(u'Found %d roles matching your search. Showing first %s.' % (response['count'], page_size))\n    else:\n        data.append(u'Found %d roles matching your search:' % response['count'])\n    max_len = []\n    for role in response['results']:\n        max_len.append(len(role['username'] + '.' + role['name']))\n    name_len = max(max_len)\n    format_str = u' %%-%ds %%s' % name_len\n    data.append(u'')\n    data.append(format_str % (u'Name', u'Description'))\n    data.append(format_str % (u'----', u'-----------'))\n    for role in response['results']:\n        data.append(format_str % (u'%s.%s' % (role['username'], role['name']), role['description']))\n    data = u'\\n'.join(data)\n    self.pager(data)\n    return True",
                            "def execute_login(self):\n    \"\"\"\n    verify user's identify via Github and retrieve an auth token from Ansible Galaxy.\n    \"\"\"\n    if context.CLIARGS['token'] is None:\n        if C.GALAXY_TOKEN:\n            github_token = C.GALAXY_TOKEN\n        else:\n            login = GalaxyLogin(self.galaxy)\n            github_token = login.create_github_token()\n    else:\n        github_token = context.CLIARGS['token']\n    galaxy_response = self.api.authenticate(github_token)\n    if context.CLIARGS['token'] is None and C.GALAXY_TOKEN is None:\n        login.remove_github_token()\n    token = GalaxyToken()\n    token.set(galaxy_response['token'])\n    display.display('Successfully logged into Galaxy as %s' % galaxy_response['username'])\n    return 0",
                            "def execute_import(self):\n    \"\"\" used to import a role into Ansible Galaxy \"\"\"\n    colors = {'INFO': 'normal', 'WARNING': C.COLOR_WARN, 'ERROR': C.COLOR_ERROR, 'SUCCESS': C.COLOR_OK, 'FAILED': C.COLOR_ERROR}\n    github_user = to_text(context.CLIARGS['github_user'], errors='surrogate_or_strict')\n    github_repo = to_text(context.CLIARGS['github_repo'], errors='surrogate_or_strict')\n    if context.CLIARGS['check_status']:\n        task = self.api.get_import_task(github_user=github_user, github_repo=github_repo)\n    else:\n        task = self.api.create_import_task(github_user, github_repo, reference=context.CLIARGS['reference'], role_name=context.CLIARGS['role_name'])\n        if len(task) > 1:\n            display.display('WARNING: More than one Galaxy role associated with Github repo %s/%s.' % (github_user, github_repo), color='yellow')\n            display.display('The following Galaxy roles are being updated:' + u'\\n', color=C.COLOR_CHANGED)\n            for t in task:\n                display.display('%s.%s' % (t['summary_fields']['role']['namespace'], t['summary_fields']['role']['name']), color=C.COLOR_CHANGED)\n            display.display(u'\\nTo properly namespace this role, remove each of the above and re-import %s/%s from scratch' % (github_user, github_repo), color=C.COLOR_CHANGED)\n            return 0\n        display.display('Successfully submitted import request %d' % task[0]['id'])\n        if not context.CLIARGS['wait']:\n            display.display('Role name: %s' % task[0]['summary_fields']['role']['name'])\n            display.display('Repo: %s/%s' % (task[0]['github_user'], task[0]['github_repo']))\n    if context.CLIARGS['check_status'] or context.CLIARGS['wait']:\n        msg_list = []\n        finished = False\n        while not finished:\n            task = self.api.get_import_task(task_id=task[0]['id'])\n            for msg in task[0]['summary_fields']['task_messages']:\n                if msg['id'] not in msg_list:\n                    display.display(msg['message_text'], color=colors[msg['message_type']])\n                    msg_list.append(msg['id'])\n            if task[0]['state'] in ['SUCCESS', 'FAILED']:\n                finished = True\n            else:\n                time.sleep(10)\n    return 0",
                            "def execute_setup(self):\n    \"\"\" Setup an integration from Github or Travis for Ansible Galaxy roles\"\"\"\n    if context.CLIARGS['setup_list']:\n        secrets = self.api.list_secrets()\n        if len(secrets) == 0:\n            display.display('No integrations found.')\n            return 0\n        display.display(u'\\n' + 'ID         Source     Repo', color=C.COLOR_OK)\n        display.display('---------- ---------- ----------', color=C.COLOR_OK)\n        for secret in secrets:\n            display.display('%-10s %-10s %s/%s' % (secret['id'], secret['source'], secret['github_user'], secret['github_repo']), color=C.COLOR_OK)\n        return 0\n    if context.CLIARGS['remove_id']:\n        self.api.remove_secret(context.CLIARGS['remove_id'])\n        display.display('Secret removed. Integrations using this secret will not longer work.', color=C.COLOR_OK)\n        return 0\n    source = context.CLIARGS['source']\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    secret = context.CLIARGS['secret']\n    resp = self.api.add_secret(source, github_user, github_repo, secret)\n    display.display('Added integration for %s %s/%s' % (resp['source'], resp['github_user'], resp['github_repo']))\n    return 0",
                            "def execute_delete(self):\n    \"\"\" Delete a role from Ansible Galaxy. \"\"\"\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    resp = self.api.delete_role(github_user, github_repo)\n    if len(resp['deleted_roles']) > 1:\n        display.display('Deleted the following roles:')\n        display.display('ID     User            Name')\n        display.display('------ --------------- ----------')\n        for role in resp['deleted_roles']:\n            display.display('%-8s %-15s %s' % (role.id, role.namespace, role.name))\n    display.display(resp['status'])\n    return True",
                            "def comment_ify(v):\n    if isinstance(v, list):\n        v = '. '.join([l.rstrip('.') for l in v])\n    v = link_pattern.sub('\\\\1 <\\\\2>', v)\n    v = const_pattern.sub(\"'\\\\1'\", v)\n    return textwrap.fill(v, width=117, initial_indent='# ', subsequent_indent='# ', break_on_hyphens=False)",
                            "def to_yaml(v):\n    return yaml.safe_dump(v, default_flow_style=False).rstrip()",
                            "def _display_role(gr):\n    install_info = gr.install_info\n    version = None\n    if install_info:\n        version = install_info.get('version', None)\n    if not version:\n        version = '(unknown version)'\n    display.display('- %s, %s' % (gr.name, version))"
                        ],
                        "constructor_variables": [
                            "galaxy",
                            "api"
                        ],
                        "class_level_variables": [
                            "SKIP_INFO_KEYS"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, args)",
                            "init_parser(self)",
                            "add_init_parser(self, parser, parents)",
                            "post_process_args(self, options)",
                            "run(self)",
                            "exit_without_ignore(rc=1)",
                            "_display_role_info(role_info)",
                            "_resolve_path(path)",
                            "_validate_collection_name(name)",
                            "_get_skeleton_galaxy_yml(template_path, inject_data)",
                            "execute_role(self)",
                            "execute_collection(self)",
                            "execute_build(self)",
                            "execute_init(self)",
                            "execute_info(self)",
                            "execute_install(self)",
                            "execute_remove(self)",
                            "execute_list(self)",
                            "execute_publish(self)",
                            "execute_search(self)",
                            "execute_login(self)",
                            "execute_import(self)",
                            "execute_setup(self)",
                            "execute_delete(self)",
                            "comment_ify(v)",
                            "to_yaml(v)",
                            "_display_role(gr)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "init_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "common": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.argparse.ArgumentParser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.argparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "common.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.GALAXY_SERVER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.GALAXY_IGNORE_CERTS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.add_verbosity_options": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "user_repo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "user_repo.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offline.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "default_roles_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.config.get_configuration_definition": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_path.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.unfrack_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.DEFAULT_ROLES_PATH": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.PrependListAction": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "type_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser.add_subparsers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.parser": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "type_parser.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "type_parser.add_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection.add_subparsers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_parser.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "build_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_parser.add_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "build_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_build": {
                                    "variable_value": "<bound method GalaxyCLI.execute_build of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "build_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_init_parser": {
                                    "variable_value": "<bound method GalaxyCLI.add_init_parser of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cinstall_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_install": {
                                    "variable_value": "<bound method GalaxyCLI.execute_install of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cinstall_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_exclusive": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_parser.add_mutually_exclusive_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_exclusive.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "publish_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "publish_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_publish": {
                                    "variable_value": "<bound method GalaxyCLI.execute_publish of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "publish_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.add_subparsers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_parser.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "delete_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_parser.add_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "delete_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_delete": {
                                    "variable_value": "<bound method GalaxyCLI.execute_delete of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "import_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "import_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_import": {
                                    "variable_value": "<bound method GalaxyCLI.execute_import of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "import_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "info_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "info_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_info": {
                                    "variable_value": "<bound method GalaxyCLI.execute_info of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "info_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rinit_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rinit_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_exclusive": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser.add_mutually_exclusive_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_exclusive.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remove_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remove_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_remove": {
                                    "variable_value": "<bound method GalaxyCLI.execute_remove of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "remove_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "list_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "list_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_list": {
                                    "variable_value": "<bound method GalaxyCLI.execute_list of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "list_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "login_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "login_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_login": {
                                    "variable_value": "<bound method GalaxyCLI.execute_login of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "login_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_search": {
                                    "variable_value": "<bound method GalaxyCLI.execute_search of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "search_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "setup_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "setup_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_setup": {
                                    "variable_value": "<bound method GalaxyCLI.execute_setup of <ansible.cli.galaxy.GalaxyCLI object at 0x102b63a90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "setup_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "init_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "common": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.argparse.ArgumentParser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.argparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "common.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.GALAXY_SERVER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.GALAXY_IGNORE_CERTS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.add_verbosity_options": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "user_repo": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "user_repo.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "offline.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "default_roles_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.config.get_configuration_definition": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "roles_path.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.unfrack_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.DEFAULT_ROLES_PATH": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "opt_help.PrependListAction": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "type_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.parser.add_subparsers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.parser": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "type_parser.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "type_parser.add_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection.add_subparsers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_parser.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "build_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_parser.add_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "build_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_build": {
                                    "variable_value": "<bound method GalaxyCLI.execute_build of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "build_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_init_parser": {
                                    "variable_value": "<bound method GalaxyCLI.add_init_parser of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cinstall_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_install": {
                                    "variable_value": "<bound method GalaxyCLI.execute_install of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cinstall_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_exclusive": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_parser.add_mutually_exclusive_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cinstall_exclusive.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "publish_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "publish_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_publish": {
                                    "variable_value": "<bound method GalaxyCLI.execute_publish of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "publish_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role.add_subparsers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_parser.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "delete_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "role_parser.add_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "delete_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_delete": {
                                    "variable_value": "<bound method GalaxyCLI.execute_delete of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "import_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "import_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_import": {
                                    "variable_value": "<bound method GalaxyCLI.execute_import of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "import_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "info_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "info_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_info": {
                                    "variable_value": "<bound method GalaxyCLI.execute_info of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "info_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rinit_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rinit_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_exclusive": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_parser.add_mutually_exclusive_group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "install_exclusive.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remove_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remove_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_remove": {
                                    "variable_value": "<bound method GalaxyCLI.execute_remove of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "remove_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "list_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "list_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_list": {
                                    "variable_value": "<bound method GalaxyCLI.execute_list of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "list_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "login_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "login_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_login": {
                                    "variable_value": "<bound method GalaxyCLI.execute_login of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "login_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_search": {
                                    "variable_value": "<bound method GalaxyCLI.execute_search of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "search_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "setup_parser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "setup_parser.set_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.execute_setup": {
                                    "variable_value": "<bound method GalaxyCLI.execute_setup of <ansible.cli.galaxy.GalaxyCLI object at 0x10aa1ead0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "setup_parser.add_argument": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "execute_init",
                    "function_code": "def execute_init(self):\n    \"\"\"\n    Creates the skeleton framework of a role or collection that complies with the Galaxy metadata format.\n    Requires a role or collection name. The collection name must be in the format ``<namespace>.<collection>``.\n    \"\"\"\n\n    galaxy_type = context.CLIARGS['type']\n    init_path = context.CLIARGS['init_path']\n    force = context.CLIARGS['force']\n    obj_skeleton = context.CLIARGS['{0}_skeleton'.format(galaxy_type)]\n\n    obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]\n\n    inject_data = dict(\n        description='your description',\n        ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),\n    )\n    if galaxy_type == 'role':\n        inject_data.update(dict(\n            author='your name',\n            company='your company (optional)',\n            license='license (GPL-2.0-or-later, MIT, etc)',\n            role_name=obj_name,\n            role_type=context.CLIARGS['role_type'],\n            issue_tracker_url='http://example.com/issue/tracker',\n            repository_url='http://example.com/repository',\n            documentation_url='http://docs.example.com',\n            homepage_url='http://example.com',\n            min_ansible_version=ansible_version[:3],  # x.y\n        ))\n\n        obj_path = os.path.join(init_path, obj_name)\n    elif galaxy_type == 'collection':\n        namespace, collection_name = obj_name.split('.', 1)\n\n        inject_data.update(dict(\n            namespace=namespace,\n            collection_name=collection_name,\n            version='1.0.0',\n            readme='README.md',\n            authors=['your name <example@domain.com>'],\n            license=['GPL-2.0-or-later'],\n            repository='http://example.com/repository',\n            documentation='http://docs.example.com',\n            homepage='http://example.com',\n            issues='http://example.com/issue/tracker',\n        ))\n\n        obj_path = os.path.join(init_path, namespace, collection_name)\n\n    b_obj_path = to_bytes(obj_path, errors='surrogate_or_strict')\n\n    if os.path.exists(b_obj_path):\n        if os.path.isfile(obj_path):\n            raise AnsibleError(\"- the path %s already exists, but is a file - aborting\" % to_native(obj_path))\n        elif not force:\n            raise AnsibleError(\"- the directory %s already exists. \"\n                               \"You can use --force to re-initialize this directory,\\n\"\n                               \"however it will reset any main.yml files that may have\\n\"\n                               \"been modified there already.\" % to_native(obj_path))\n\n    if obj_skeleton is not None:\n        own_skeleton = False\n        skeleton_ignore_expressions = C.GALAXY_ROLE_SKELETON_IGNORE\n    else:\n        own_skeleton = True\n        obj_skeleton = self.galaxy.default_role_skeleton_path\n        skeleton_ignore_expressions = ['^.*/.git_keep$']\n\n    obj_skeleton = os.path.expanduser(obj_skeleton)\n    skeleton_ignore_re = [re.compile(x) for x in skeleton_ignore_expressions]\n\n    if not os.path.exists(obj_skeleton):\n        raise AnsibleError(\"- the skeleton path '{0}' does not exist, cannot init {1}\".format(\n            to_native(obj_skeleton), galaxy_type)\n        )\n\n    template_env = Environment(loader=FileSystemLoader(obj_skeleton))\n\n    # create role directory\n    if not os.path.exists(b_obj_path):\n        os.makedirs(b_obj_path)\n\n    for root, dirs, files in os.walk(obj_skeleton, topdown=True):\n        rel_root = os.path.relpath(root, obj_skeleton)\n        rel_dirs = rel_root.split(os.sep)\n        rel_root_dir = rel_dirs[0]\n        if galaxy_type == 'collection':\n            # A collection can contain templates in playbooks/*/templates and roles/*/templates\n            in_templates_dir = rel_root_dir in ['playbooks', 'roles'] and 'templates' in rel_dirs\n        else:\n            in_templates_dir = rel_root_dir == 'templates'\n\n        dirs[:] = [d for d in dirs if not any(r.match(d) for r in skeleton_ignore_re)]\n\n        for f in files:\n            filename, ext = os.path.splitext(f)\n\n            if any(r.match(os.path.join(rel_root, f)) for r in skeleton_ignore_re):\n                continue\n            elif galaxy_type == 'collection' and own_skeleton and rel_root == '.' and f == 'galaxy.yml.j2':\n                # Special use case for galaxy.yml.j2 in our own default collection skeleton. We build the options\n                # dynamically which requires special options to be set.\n\n                # The templated data's keys must match the key name but the inject data contains collection_name\n                # instead of name. We just make a copy and change the key back to name for this file.\n                template_data = inject_data.copy()\n                template_data['name'] = template_data.pop('collection_name')\n\n                meta_value = GalaxyCLI._get_skeleton_galaxy_yml(os.path.join(root, rel_root, f), template_data)\n                b_dest_file = to_bytes(os.path.join(obj_path, rel_root, filename), errors='surrogate_or_strict')\n                with open(b_dest_file, 'wb') as galaxy_obj:\n                    galaxy_obj.write(to_bytes(meta_value, errors='surrogate_or_strict'))\n            elif ext == \".j2\" and not in_templates_dir:\n                src_template = os.path.join(rel_root, f)\n                dest_file = os.path.join(obj_path, rel_root, filename)\n                template_env.get_template(src_template).stream(inject_data).dump(dest_file, encoding='utf-8')\n            else:\n                f_rel_path = os.path.relpath(os.path.join(root, f), obj_skeleton)\n                shutil.copyfile(os.path.join(root, f), os.path.join(obj_path, f_rel_path))\n\n        for d in dirs:\n            b_dir_path = to_bytes(os.path.join(obj_path, rel_root, d), errors='surrogate_or_strict')\n            if not os.path.exists(b_dir_path):\n                os.makedirs(b_dir_path)\n\n    display.display(\"- %s was created successfully\" % obj_name)\n",
                    "decorators": [],
                    "docstring": "Creates the skeleton framework of a role or collection that complies with the Galaxy metadata format.\nRequires a role or collection name. The collection name must be in the format ``<namespace>.<collection>``.",
                    "start_line": 402,
                    "end_line": 528,
                    "variables": {
                        "galaxy_type": [
                            419,
                            489,
                            434,
                            502,
                            408,
                            411,
                            476,
                            413
                        ],
                        "context.CLIARGS": [
                            425,
                            408,
                            409,
                            410,
                            411,
                            413
                        ],
                        "context": [
                            425,
                            408,
                            409,
                            410,
                            411,
                            413
                        ],
                        "init_path": [
                            409,
                            450,
                            433
                        ],
                        "force": [
                            457,
                            410
                        ],
                        "obj_skeleton": [
                            485,
                            486,
                            520,
                            463,
                            468,
                            471,
                            474,
                            411,
                            476,
                            479
                        ],
                        "format": [
                            411,
                            413,
                            475
                        ],
                        "obj_name": [
                            424,
                            528,
                            433,
                            435,
                            413
                        ],
                        "inject_data": [
                            420,
                            518,
                            437,
                            508,
                            415
                        ],
                        "dict": [
                            420,
                            437,
                            415
                        ],
                        "get_versioned_doclink": [
                            417
                        ],
                        "inject_data.update": [
                            420,
                            437
                        ],
                        "ansible_version": [
                            430
                        ],
                        "obj_path": [
                            512,
                            450,
                            452,
                            517,
                            455,
                            456,
                            521,
                            524,
                            461,
                            433
                        ],
                        "os.path.join": [
                            512,
                            450,
                            516,
                            517,
                            520,
                            521,
                            524,
                            433,
                            500,
                            511
                        ],
                        "os.path": [
                            512,
                            450,
                            482,
                            516,
                            517,
                            454,
                            455,
                            486,
                            520,
                            521,
                            524,
                            525,
                            433,
                            498,
                            500,
                            471,
                            474,
                            511
                        ],
                        "os": [
                            512,
                            516,
                            517,
                            520,
                            521,
                            524,
                            525,
                            526,
                            433,
                            450,
                            454,
                            455,
                            471,
                            474,
                            482,
                            483,
                            485,
                            486,
                            487,
                            498,
                            500,
                            511
                        ],
                        "namespace": [
                            450,
                            435,
                            438
                        ],
                        "collection_name": [
                            450,
                            435,
                            439
                        ],
                        "obj_name.split": [
                            435
                        ],
                        "b_obj_path": [
                            482,
                            483,
                            452,
                            454
                        ],
                        "to_bytes": [
                            512,
                            514,
                            452,
                            524
                        ],
                        "os.path.exists": [
                            474,
                            482,
                            525,
                            454
                        ],
                        "os.path.isfile": [
                            455
                        ],
                        "AnsibleError": [
                            456,
                            458,
                            475
                        ],
                        "to_native": [
                            456,
                            476,
                            461
                        ],
                        "own_skeleton": [
                            464,
                            467,
                            502
                        ],
                        "skeleton_ignore_expressions": [
                            472,
                            465,
                            469
                        ],
                        "C.GALAXY_ROLE_SKELETON_IGNORE": [
                            465
                        ],
                        "C": [
                            465
                        ],
                        "self.galaxy.default_role_skeleton_path": [
                            468
                        ],
                        "self.galaxy": [
                            468
                        ],
                        "self": [
                            468
                        ],
                        "os.path.expanduser": [
                            471
                        ],
                        "skeleton_ignore_re": [
                            472,
                            500,
                            495
                        ],
                        "re.compile": [
                            472
                        ],
                        "re": [
                            472
                        ],
                        "x": [
                            472
                        ],
                        "template_env": [
                            518,
                            479
                        ],
                        "Environment": [
                            479
                        ],
                        "FileSystemLoader": [
                            479
                        ],
                        "os.makedirs": [
                            483,
                            526
                        ],
                        "root": [
                            485,
                            486,
                            520,
                            521,
                            511
                        ],
                        "dirs": [
                            523,
                            485,
                            495
                        ],
                        "files": [
                            497,
                            485
                        ],
                        "os.walk": [
                            485
                        ],
                        "rel_root": [
                            512,
                            516,
                            517,
                            486,
                            487,
                            524,
                            500,
                            502,
                            511
                        ],
                        "os.path.relpath": [
                            520,
                            486
                        ],
                        "rel_dirs": [
                            488,
                            491,
                            487
                        ],
                        "rel_root.split": [
                            487
                        ],
                        "os.sep": [
                            487
                        ],
                        "rel_root_dir": [
                            488,
                            491,
                            493
                        ],
                        "in_templates_dir": [
                            515,
                            491,
                            493
                        ],
                        "d": [
                            523,
                            524,
                            495
                        ],
                        "any": [
                            500,
                            495
                        ],
                        "r.match": [
                            500,
                            495
                        ],
                        "r": [
                            500,
                            495
                        ],
                        "f": [
                            516,
                            520,
                            521,
                            497,
                            498,
                            500,
                            502,
                            511
                        ],
                        "filename": [
                            512,
                            498,
                            517
                        ],
                        "ext": [
                            498,
                            515
                        ],
                        "os.path.splitext": [
                            498
                        ],
                        "template_data": [
                            508,
                            509,
                            511
                        ],
                        "inject_data.copy": [
                            508
                        ],
                        "template_data.pop": [
                            509
                        ],
                        "meta_value": [
                            514,
                            511
                        ],
                        "GalaxyCLI._get_skeleton_galaxy_yml": [
                            511
                        ],
                        "GalaxyCLI": [
                            511
                        ],
                        "b_dest_file": [
                            512,
                            513
                        ],
                        "open": [
                            513
                        ],
                        "galaxy_obj": [
                            513,
                            514
                        ],
                        "galaxy_obj.write": [
                            514
                        ],
                        "src_template": [
                            516,
                            518
                        ],
                        "dest_file": [
                            517,
                            518
                        ],
                        "dump": [
                            518
                        ],
                        "stream": [
                            518
                        ],
                        "template_env.get_template": [
                            518
                        ],
                        "f_rel_path": [
                            520,
                            521
                        ],
                        "shutil.copyfile": [
                            521
                        ],
                        "shutil": [
                            521
                        ],
                        "b_dir_path": [
                            524,
                            525,
                            526
                        ],
                        "display.display": [
                            528
                        ],
                        "display": [
                            528
                        ]
                    },
                    "filtered_variables": {
                        "galaxy_type": [
                            419,
                            489,
                            434,
                            502,
                            408,
                            411,
                            476,
                            413
                        ],
                        "context.CLIARGS": [
                            425,
                            408,
                            409,
                            410,
                            411,
                            413
                        ],
                        "context": [
                            425,
                            408,
                            409,
                            410,
                            411,
                            413
                        ],
                        "init_path": [
                            409,
                            450,
                            433
                        ],
                        "force": [
                            457,
                            410
                        ],
                        "obj_skeleton": [
                            485,
                            486,
                            520,
                            463,
                            468,
                            471,
                            474,
                            411,
                            476,
                            479
                        ],
                        "obj_name": [
                            424,
                            528,
                            433,
                            435,
                            413
                        ],
                        "inject_data": [
                            420,
                            518,
                            437,
                            508,
                            415
                        ],
                        "get_versioned_doclink": [
                            417
                        ],
                        "inject_data.update": [
                            420,
                            437
                        ],
                        "ansible_version": [
                            430
                        ],
                        "obj_path": [
                            512,
                            450,
                            452,
                            517,
                            455,
                            456,
                            521,
                            524,
                            461,
                            433
                        ],
                        "os.path.join": [
                            512,
                            450,
                            516,
                            517,
                            520,
                            521,
                            524,
                            433,
                            500,
                            511
                        ],
                        "os.path": [
                            512,
                            450,
                            482,
                            516,
                            517,
                            454,
                            455,
                            486,
                            520,
                            521,
                            524,
                            525,
                            433,
                            498,
                            500,
                            471,
                            474,
                            511
                        ],
                        "os": [
                            512,
                            516,
                            517,
                            520,
                            521,
                            524,
                            525,
                            526,
                            433,
                            450,
                            454,
                            455,
                            471,
                            474,
                            482,
                            483,
                            485,
                            486,
                            487,
                            498,
                            500,
                            511
                        ],
                        "namespace": [
                            450,
                            435,
                            438
                        ],
                        "collection_name": [
                            450,
                            435,
                            439
                        ],
                        "obj_name.split": [
                            435
                        ],
                        "b_obj_path": [
                            482,
                            483,
                            452,
                            454
                        ],
                        "to_bytes": [
                            512,
                            514,
                            452,
                            524
                        ],
                        "os.path.exists": [
                            474,
                            482,
                            525,
                            454
                        ],
                        "os.path.isfile": [
                            455
                        ],
                        "AnsibleError": [
                            456,
                            458,
                            475
                        ],
                        "to_native": [
                            456,
                            476,
                            461
                        ],
                        "own_skeleton": [
                            464,
                            467,
                            502
                        ],
                        "skeleton_ignore_expressions": [
                            472,
                            465,
                            469
                        ],
                        "C.GALAXY_ROLE_SKELETON_IGNORE": [
                            465
                        ],
                        "C": [
                            465
                        ],
                        "self.galaxy.default_role_skeleton_path": [
                            468
                        ],
                        "self.galaxy": [
                            468
                        ],
                        "self": [
                            468
                        ],
                        "os.path.expanduser": [
                            471
                        ],
                        "skeleton_ignore_re": [
                            472,
                            500,
                            495
                        ],
                        "re.compile": [
                            472
                        ],
                        "re": [
                            472
                        ],
                        "x": [
                            472
                        ],
                        "template_env": [
                            518,
                            479
                        ],
                        "Environment": [
                            479
                        ],
                        "FileSystemLoader": [
                            479
                        ],
                        "os.makedirs": [
                            483,
                            526
                        ],
                        "root": [
                            485,
                            486,
                            520,
                            521,
                            511
                        ],
                        "dirs": [
                            523,
                            485,
                            495
                        ],
                        "files": [
                            497,
                            485
                        ],
                        "os.walk": [
                            485
                        ],
                        "rel_root": [
                            512,
                            516,
                            517,
                            486,
                            487,
                            524,
                            500,
                            502,
                            511
                        ],
                        "os.path.relpath": [
                            520,
                            486
                        ],
                        "rel_dirs": [
                            488,
                            491,
                            487
                        ],
                        "rel_root.split": [
                            487
                        ],
                        "os.sep": [
                            487
                        ],
                        "rel_root_dir": [
                            488,
                            491,
                            493
                        ],
                        "in_templates_dir": [
                            515,
                            491,
                            493
                        ],
                        "d": [
                            523,
                            524,
                            495
                        ],
                        "r.match": [
                            500,
                            495
                        ],
                        "r": [
                            500,
                            495
                        ],
                        "f": [
                            516,
                            520,
                            521,
                            497,
                            498,
                            500,
                            502,
                            511
                        ],
                        "filename": [
                            512,
                            498,
                            517
                        ],
                        "ext": [
                            498,
                            515
                        ],
                        "os.path.splitext": [
                            498
                        ],
                        "template_data": [
                            508,
                            509,
                            511
                        ],
                        "inject_data.copy": [
                            508
                        ],
                        "template_data.pop": [
                            509
                        ],
                        "meta_value": [
                            514,
                            511
                        ],
                        "GalaxyCLI._get_skeleton_galaxy_yml": [
                            511
                        ],
                        "GalaxyCLI": [
                            511
                        ],
                        "b_dest_file": [
                            512,
                            513
                        ],
                        "galaxy_obj": [
                            513,
                            514
                        ],
                        "galaxy_obj.write": [
                            514
                        ],
                        "src_template": [
                            516,
                            518
                        ],
                        "dest_file": [
                            517,
                            518
                        ],
                        "dump": [
                            518
                        ],
                        "stream": [
                            518
                        ],
                        "template_env.get_template": [
                            518
                        ],
                        "f_rel_path": [
                            520,
                            521
                        ],
                        "shutil.copyfile": [
                            521
                        ],
                        "shutil": [
                            521
                        ],
                        "b_dir_path": [
                            524,
                            525,
                            526
                        ],
                        "display.display": [
                            528
                        ],
                        "display": [
                            528
                        ]
                    },
                    "diff_line_number": 416,
                    "class_data": {
                        "signature": "class GalaxyCLI(CLI)",
                        "docstring": "command to manage Ansible roles in shared repositories, the default of which is Ansible Galaxy *https://galaxy.ansible.com*.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, args):\n    if len(args) > 1 and args[1] not in ['-h', '--help'] and ('role' not in args) and ('collection' not in args):\n        args.insert(1, 'role')\n    self.api = None\n    self.galaxy = None\n    super(GalaxyCLI, self).__init__(args)",
                            "def init_parser(self):\n    \"\"\" create an options parser for bin/ansible \"\"\"\n    super(GalaxyCLI, self).init_parser(desc='Perform various Role related operations.')\n    common = opt_help.argparse.ArgumentParser(add_help=False)\n    common.add_argument('-s', '--server', dest='api_server', default=C.GALAXY_SERVER, help='The API server destination')\n    common.add_argument('-c', '--ignore-certs', action='store_true', dest='ignore_certs', default=C.GALAXY_IGNORE_CERTS, help='Ignore SSL certificate validation errors.')\n    opt_help.add_verbosity_options(common)\n    user_repo = opt_help.argparse.ArgumentParser(add_help=False)\n    user_repo.add_argument('github_user', help='GitHub username')\n    user_repo.add_argument('github_repo', help='GitHub repository')\n    offline = opt_help.argparse.ArgumentParser(add_help=False)\n    offline.add_argument('--offline', dest='offline', default=False, action='store_true', help=\"Don't query the galaxy API when creating roles\")\n    default_roles_path = C.config.get_configuration_definition('DEFAULT_ROLES_PATH').get('default', '')\n    roles_path = opt_help.argparse.ArgumentParser(add_help=False)\n    roles_path.add_argument('-p', '--roles-path', dest='roles_path', type=opt_help.unfrack_path(pathsep=True), default=C.DEFAULT_ROLES_PATH, action=opt_help.PrependListAction, help='The path to the directory containing your roles. The default is the first writable oneconfigured via DEFAULT_ROLES_PATH: %s ' % default_roles_path)\n    force = opt_help.argparse.ArgumentParser(add_help=False)\n    force.add_argument('-f', '--force', dest='force', action='store_true', default=False, help='Force overwriting an existing role or collection')\n    type_parser = self.parser.add_subparsers(metavar='TYPE', dest='type')\n    type_parser.required = True\n    collection = type_parser.add_parser('collection', parents=[common], help='Manage an Ansible Galaxy collection.')\n    collection_parser = collection.add_subparsers(metavar='ACTION', dest='collection')\n    collection_parser.required = True\n    build_parser = collection_parser.add_parser('build', help='Build an Ansible collection artifact that can be published to Ansible Galaxy.', parents=[common, force])\n    build_parser.set_defaults(func=self.execute_build)\n    build_parser.add_argument('args', metavar='collection', nargs='*', default=('./',), help='Path to the collection(s) directory to build. This should be the directory that contains the galaxy.yml file. The default is the current working directory.')\n    build_parser.add_argument('--output-path', dest='output_path', default='./', help='The path in which the collection is built to. The default is the current working directory.')\n    self.add_init_parser(collection_parser, [common, force])\n    cinstall_parser = collection_parser.add_parser('install', help='Install collection from Ansible Galaxy', parents=[force, common])\n    cinstall_parser.set_defaults(func=self.execute_install)\n    cinstall_parser.add_argument('args', metavar='collection_name', nargs='*', help='The collection(s) name or path/url to a tar.gz collection artifact. This is mutually exclusive with --requirements-file.')\n    cinstall_parser.add_argument('-p', '--collections-path', dest='collections_path', required=True, help='The path to the directory containing your collections.')\n    cinstall_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False, help='Ignore errors during installation and continue with the next specified collection. This will not ignore dependency conflict errors.')\n    cinstall_parser.add_argument('-r', '--requirements-file', dest='requirements', help='A file containing a list of collections to be installed.')\n    cinstall_exclusive = cinstall_parser.add_mutually_exclusive_group()\n    cinstall_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False, help=\"Don't download collections listed as dependencies\")\n    cinstall_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False, help='Force overwriting an existing collection and its dependencies')\n    publish_parser = collection_parser.add_parser('publish', help='Publish a collection artifact to Ansible Galaxy.', parents=[common])\n    publish_parser.set_defaults(func=self.execute_publish)\n    publish_parser.add_argument('args', metavar='collection_path', help='The path to the collection tarball to publish.')\n    publish_parser.add_argument('--api-key', dest='api_key', help='The Ansible Galaxy API key which can be found at https://galaxy.ansible.com/me/preferences. You can also use ansible-galaxy login to retrieve this key.')\n    publish_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import validation results.\")\n    role = type_parser.add_parser('role', parents=[common], help='Manage an Ansible Galaxy role.')\n    role_parser = role.add_subparsers(metavar='ACTION', dest='role')\n    role_parser.required = True\n    delete_parser = role_parser.add_parser('delete', parents=[user_repo, common], help='Removes the role from Galaxy. It does not remove or alter the actual GitHub repository.')\n    delete_parser.set_defaults(func=self.execute_delete)\n    import_parser = role_parser.add_parser('import', help='Import a role', parents=[user_repo, common])\n    import_parser.set_defaults(func=self.execute_import)\n    import_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import results.\")\n    import_parser.add_argument('--branch', dest='reference', help=\"The name of a branch to import. Defaults to the repository's default branch (usually master)\")\n    import_parser.add_argument('--role-name', dest='role_name', help='The name the role should have, if different than the repo name')\n    import_parser.add_argument('--status', dest='check_status', action='store_true', default=False, help='Check the status of the most recent import request for given github_user/github_repo.')\n    info_parser = role_parser.add_parser('info', help='View more details about a specific role.', parents=[offline, common, roles_path])\n    info_parser.set_defaults(func=self.execute_info)\n    info_parser.add_argument('args', nargs='+', help='role', metavar='role_name[,version]')\n    rinit_parser = self.add_init_parser(role_parser, [offline, force, common])\n    rinit_parser.add_argument('--type', dest='role_type', action='store', default='default', help=\"Initialize using an alternate role type. Valid types include: 'container', 'apb' and 'network'.\")\n    install_parser = role_parser.add_parser('install', help='Install Roles from file(s), URL(s) or tar file(s)', parents=[force, common, roles_path])\n    install_parser.set_defaults(func=self.execute_install)\n    install_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False, help='Ignore errors and continue with the next specified role.')\n    install_parser.add_argument('-r', '--role-file', dest='role_file', help='A file containing a list of roles to be imported')\n    install_parser.add_argument('-g', '--keep-scm-meta', dest='keep_scm_meta', action='store_true', default=False, help='Use tar instead of the scm archive option when packaging the role')\n    install_parser.add_argument('args', help='Role name, URL or tar file', metavar='role', nargs='*')\n    install_exclusive = install_parser.add_mutually_exclusive_group()\n    install_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False, help=\"Don't download roles listed as dependencies\")\n    install_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False, help=\"Force overwriting an existing role and it's dependencies\")\n    remove_parser = role_parser.add_parser('remove', help='Delete roles from roles_path.', parents=[common, roles_path])\n    remove_parser.set_defaults(func=self.execute_remove)\n    remove_parser.add_argument('args', help='Role(s)', metavar='role', nargs='+')\n    list_parser = role_parser.add_parser('list', help='Show the name and version of each role installed in the roles_path.', parents=[common, roles_path])\n    list_parser.set_defaults(func=self.execute_list)\n    list_parser.add_argument('role', help='Role', nargs='?', metavar='role')\n    login_parser = role_parser.add_parser('login', parents=[common], help=\"Login to api.github.com server in order to use ansible-galaxy role sub command such as 'import', 'delete', 'publish', and 'setup'\")\n    login_parser.set_defaults(func=self.execute_login)\n    login_parser.add_argument('--github-token', dest='token', default=None, help='Identify with github token rather than username and password.')\n    search_parser = role_parser.add_parser('search', help='Search the Galaxy database by tags, platforms, author and multiple keywords.', parents=[common])\n    search_parser.set_defaults(func=self.execute_search)\n    search_parser.add_argument('--platforms', dest='platforms', help='list of OS platforms to filter by')\n    search_parser.add_argument('--galaxy-tags', dest='galaxy_tags', help='list of galaxy tags to filter by')\n    search_parser.add_argument('--author', dest='author', help='GitHub username')\n    search_parser.add_argument('args', help='Search terms', metavar='searchterm', nargs='*')\n    setup_parser = role_parser.add_parser('setup', help='Manage the integration between Galaxy and the given source.', parents=[roles_path, common])\n    setup_parser.set_defaults(func=self.execute_setup)\n    setup_parser.add_argument('--remove', dest='remove_id', default=None, help='Remove the integration matching the provided ID value. Use --list to see ID values.')\n    setup_parser.add_argument('--list', dest='setup_list', action='store_true', default=False, help='List all of your integrations.')\n    setup_parser.add_argument('source', help='Source')\n    setup_parser.add_argument('github_user', help='GitHub username')\n    setup_parser.add_argument('github_repo', help='GitHub repository')\n    setup_parser.add_argument('secret', help='Secret')",
                            "def add_init_parser(self, parser, parents):\n    galaxy_type = parser.dest\n    obj_name_kwargs = {}\n    if galaxy_type == 'collection':\n        obj_name_kwargs['type'] = GalaxyCLI._validate_collection_name\n    init_parser = parser.add_parser('init', help='Initialize new {0} with the base structure of a {0}.'.format(galaxy_type), parents=parents)\n    init_parser.set_defaults(func=self.execute_init)\n    init_parser.add_argument('--init-path', dest='init_path', default='./', help='The path in which the skeleton {0} will be created. The default is the current working directory.'.format(galaxy_type))\n    init_parser.add_argument('--{0}-skeleton'.format(galaxy_type), dest='{0}_skeleton'.format(galaxy_type), default=C.GALAXY_ROLE_SKELETON, help='The path to a {0} skeleton that the new {0} should be based upon.'.format(galaxy_type))\n    init_parser.add_argument('{0}_name'.format(galaxy_type), help='{0} name'.format(galaxy_type.capitalize()), **obj_name_kwargs)\n    return init_parser",
                            "def post_process_args(self, options):\n    options = super(GalaxyCLI, self).post_process_args(options)\n    display.verbosity = options.verbosity\n    return options",
                            "def run(self):\n    super(GalaxyCLI, self).run()\n    self.galaxy = Galaxy()\n    self.api = GalaxyAPI(self.galaxy)\n    context.CLIARGS['func']()",
                            "@staticmethod\ndef exit_without_ignore(rc=1):\n    \"\"\"\n    Exits with the specified return code unless the\n    option --ignore-errors was specified\n    \"\"\"\n    if not context.CLIARGS['ignore_errors']:\n        raise AnsibleError('- you can use --ignore-errors to skip failed roles and finish processing the list.')",
                            "@staticmethod\ndef _display_role_info(role_info):\n    text = [u'', u'Role: %s' % to_text(role_info['name'])]\n    text.append(u'\\tdescription: %s' % role_info.get('description', ''))\n    for k in sorted(role_info.keys()):\n        if k in GalaxyCLI.SKIP_INFO_KEYS:\n            continue\n        if isinstance(role_info[k], dict):\n            text.append(u'\\t%s:' % k)\n            for key in sorted(role_info[k].keys()):\n                if key in GalaxyCLI.SKIP_INFO_KEYS:\n                    continue\n                text.append(u'\\t\\t%s: %s' % (key, role_info[k][key]))\n        else:\n            text.append(u'\\t%s: %s' % (k, role_info[k]))\n    return u'\\n'.join(text)",
                            "@staticmethod\ndef _resolve_path(path):\n    return os.path.abspath(os.path.expanduser(os.path.expandvars(path)))",
                            "@staticmethod\ndef _validate_collection_name(name):\n    if is_collection_ref('ansible_collections.{0}'.format(name)):\n        return name\n    raise AnsibleError('Invalid collection name, must be in the format <namespace>.<collection>')",
                            "@staticmethod\ndef _get_skeleton_galaxy_yml(template_path, inject_data):\n    with open(to_bytes(template_path, errors='surrogate_or_strict'), 'rb') as template_obj:\n        meta_template = to_text(template_obj.read(), errors='surrogate_or_strict')\n    galaxy_meta = get_collections_galaxy_meta_info()\n    required_config = []\n    optional_config = []\n    for meta_entry in galaxy_meta:\n        config_list = required_config if meta_entry.get('required', False) else optional_config\n        value = inject_data.get(meta_entry['key'], None)\n        if not value:\n            meta_type = meta_entry.get('type', 'str')\n            if meta_type == 'str':\n                value = ''\n            elif meta_type == 'list':\n                value = []\n            elif meta_type == 'dict':\n                value = {}\n        meta_entry['value'] = value\n        config_list.append(meta_entry)\n    link_pattern = re.compile('L\\\\(([^)]+),\\\\s+([^)]+)\\\\)')\n    const_pattern = re.compile('C\\\\(([^)]+)\\\\)')\n\n    def comment_ify(v):\n        if isinstance(v, list):\n            v = '. '.join([l.rstrip('.') for l in v])\n        v = link_pattern.sub('\\\\1 <\\\\2>', v)\n        v = const_pattern.sub(\"'\\\\1'\", v)\n        return textwrap.fill(v, width=117, initial_indent='# ', subsequent_indent='# ', break_on_hyphens=False)\n\n    def to_yaml(v):\n        return yaml.safe_dump(v, default_flow_style=False).rstrip()\n    env = Environment(loader=BaseLoader)\n    env.filters['comment_ify'] = comment_ify\n    env.filters['to_yaml'] = to_yaml\n    template = env.from_string(meta_template)\n    meta_value = template.render({'required_config': required_config, 'optional_config': optional_config})\n    return meta_value",
                            "def execute_role(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy role. Must be combined with a further action like delete/install/init\n    as listed below.\n    \"\"\"\n    pass",
                            "def execute_collection(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy collection. Must be combined with a further action like init/install as\n    listed below.\n    \"\"\"\n    pass",
                            "def execute_build(self):\n    \"\"\"\n    Build an Ansible Galaxy collection artifact that can be stored in a central repository like Ansible Galaxy.\n    By default, this command builds from the current working directory. You can optionally pass in the\n    collection input path (where the ``galaxy.yml`` file is).\n    \"\"\"\n    force = context.CLIARGS['force']\n    output_path = GalaxyCLI._resolve_path(context.CLIARGS['output_path'])\n    b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n    if not os.path.exists(b_output_path):\n        os.makedirs(b_output_path)\n    elif os.path.isfile(b_output_path):\n        raise AnsibleError('- the output collection directory %s is a file - aborting' % to_native(output_path))\n    for collection_path in context.CLIARGS['args']:\n        collection_path = GalaxyCLI._resolve_path(collection_path)\n        build_collection(collection_path, output_path, force)",
                            "def execute_init(self):\n    \"\"\"\n    Creates the skeleton framework of a role or collection that complies with the Galaxy metadata format.\n    Requires a role or collection name. The collection name must be in the format ``<namespace>.<collection>``.\n    \"\"\"\n    galaxy_type = context.CLIARGS['type']\n    init_path = context.CLIARGS['init_path']\n    force = context.CLIARGS['force']\n    obj_skeleton = context.CLIARGS['{0}_skeleton'.format(galaxy_type)]\n    obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]\n    inject_data = dict(description='your description', ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'))\n    if galaxy_type == 'role':\n        inject_data.update(dict(author='your name', company='your company (optional)', license='license (GPL-2.0-or-later, MIT, etc)', role_name=obj_name, role_type=context.CLIARGS['role_type'], issue_tracker_url='http://example.com/issue/tracker', repository_url='http://example.com/repository', documentation_url='http://docs.example.com', homepage_url='http://example.com', min_ansible_version=ansible_version[:3]))\n        obj_path = os.path.join(init_path, obj_name)\n    elif galaxy_type == 'collection':\n        namespace, collection_name = obj_name.split('.', 1)\n        inject_data.update(dict(namespace=namespace, collection_name=collection_name, version='1.0.0', readme='README.md', authors=['your name <example@domain.com>'], license=['GPL-2.0-or-later'], repository='http://example.com/repository', documentation='http://docs.example.com', homepage='http://example.com', issues='http://example.com/issue/tracker'))\n        obj_path = os.path.join(init_path, namespace, collection_name)\n    b_obj_path = to_bytes(obj_path, errors='surrogate_or_strict')\n    if os.path.exists(b_obj_path):\n        if os.path.isfile(obj_path):\n            raise AnsibleError('- the path %s already exists, but is a file - aborting' % to_native(obj_path))\n        elif not force:\n            raise AnsibleError('- the directory %s already exists. You can use --force to re-initialize this directory,\\nhowever it will reset any main.yml files that may have\\nbeen modified there already.' % to_native(obj_path))\n    if obj_skeleton is not None:\n        own_skeleton = False\n        skeleton_ignore_expressions = C.GALAXY_ROLE_SKELETON_IGNORE\n    else:\n        own_skeleton = True\n        obj_skeleton = self.galaxy.default_role_skeleton_path\n        skeleton_ignore_expressions = ['^.*/.git_keep$']\n    obj_skeleton = os.path.expanduser(obj_skeleton)\n    skeleton_ignore_re = [re.compile(x) for x in skeleton_ignore_expressions]\n    if not os.path.exists(obj_skeleton):\n        raise AnsibleError(\"- the skeleton path '{0}' does not exist, cannot init {1}\".format(to_native(obj_skeleton), galaxy_type))\n    template_env = Environment(loader=FileSystemLoader(obj_skeleton))\n    if not os.path.exists(b_obj_path):\n        os.makedirs(b_obj_path)\n    for root, dirs, files in os.walk(obj_skeleton, topdown=True):\n        rel_root = os.path.relpath(root, obj_skeleton)\n        rel_dirs = rel_root.split(os.sep)\n        rel_root_dir = rel_dirs[0]\n        if galaxy_type == 'collection':\n            in_templates_dir = rel_root_dir in ['playbooks', 'roles'] and 'templates' in rel_dirs\n        else:\n            in_templates_dir = rel_root_dir == 'templates'\n        dirs[:] = [d for d in dirs if not any((r.match(d) for r in skeleton_ignore_re))]\n        for f in files:\n            filename, ext = os.path.splitext(f)\n            if any((r.match(os.path.join(rel_root, f)) for r in skeleton_ignore_re)):\n                continue\n            elif galaxy_type == 'collection' and own_skeleton and (rel_root == '.') and (f == 'galaxy.yml.j2'):\n                template_data = inject_data.copy()\n                template_data['name'] = template_data.pop('collection_name')\n                meta_value = GalaxyCLI._get_skeleton_galaxy_yml(os.path.join(root, rel_root, f), template_data)\n                b_dest_file = to_bytes(os.path.join(obj_path, rel_root, filename), errors='surrogate_or_strict')\n                with open(b_dest_file, 'wb') as galaxy_obj:\n                    galaxy_obj.write(to_bytes(meta_value, errors='surrogate_or_strict'))\n            elif ext == '.j2' and (not in_templates_dir):\n                src_template = os.path.join(rel_root, f)\n                dest_file = os.path.join(obj_path, rel_root, filename)\n                template_env.get_template(src_template).stream(inject_data).dump(dest_file, encoding='utf-8')\n            else:\n                f_rel_path = os.path.relpath(os.path.join(root, f), obj_skeleton)\n                shutil.copyfile(os.path.join(root, f), os.path.join(obj_path, f_rel_path))\n        for d in dirs:\n            b_dir_path = to_bytes(os.path.join(obj_path, rel_root, d), errors='surrogate_or_strict')\n            if not os.path.exists(b_dir_path):\n                os.makedirs(b_dir_path)\n    display.display('- %s was created successfully' % obj_name)",
                            "def execute_info(self):\n    \"\"\"\n    prints out detailed information about an installed role as well as info available from the galaxy API.\n    \"\"\"\n    roles_path = context.CLIARGS['roles_path']\n    data = ''\n    for role in context.CLIARGS['args']:\n        role_info = {'path': roles_path}\n        gr = GalaxyRole(self.galaxy, role)\n        install_info = gr.install_info\n        if install_info:\n            if 'version' in install_info:\n                install_info['installed_version'] = install_info['version']\n                del install_info['version']\n            role_info.update(install_info)\n        remote_data = False\n        if not context.CLIARGS['offline']:\n            remote_data = self.api.lookup_role_by_name(role, False)\n        if remote_data:\n            role_info.update(remote_data)\n        if gr.metadata:\n            role_info.update(gr.metadata)\n        req = RoleRequirement()\n        role_spec = req.role_yaml_parse({'role': role})\n        if role_spec:\n            role_info.update(role_spec)\n        data = self._display_role_info(role_info)\n        if not data:\n            data = u'\\n- the role %s was not found' % role\n    self.pager(data)",
                            "def execute_install(self):\n    \"\"\"\n    Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n    You can pass in a list (roles or collections) or use the file\n    option listed below (these are mutually exclusive). If you pass in a list, it\n    can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n    \"\"\"\n    if context.CLIARGS['type'] == 'collection':\n        collections = context.CLIARGS['args']\n        force = context.CLIARGS['force']\n        output_path = context.CLIARGS['collections_path']\n        servers = [context.CLIARGS['api_server']]\n        ignore_certs = context.CLIARGS['ignore_certs']\n        ignore_errors = context.CLIARGS['ignore_errors']\n        requirements_file = context.CLIARGS['requirements']\n        no_deps = context.CLIARGS['no_deps']\n        force_deps = context.CLIARGS['force_with_deps']\n        if collections and requirements_file:\n            raise AnsibleError('The positional collection_name arg and --requirements-file are mutually exclusive.')\n        elif not collections and (not requirements_file):\n            raise AnsibleError('You must specify a collection name or a requirements file.')\n        if requirements_file:\n            requirements_file = GalaxyCLI._resolve_path(requirements_file)\n            collection_requirements = parse_collections_requirements_file(requirements_file)\n        else:\n            collection_requirements = []\n            for collection_input in collections:\n                name, dummy, requirement = collection_input.partition(':')\n                collection_requirements.append((name, requirement or '*', None))\n        output_path = GalaxyCLI._resolve_path(output_path)\n        collections_path = C.COLLECTIONS_PATHS\n        if len([p for p in collections_path if p.startswith(output_path)]) == 0:\n            display.warning(\"The specified collections path '%s' is not part of the configured Ansible collections paths '%s'. The installed collection won't be picked up in an Ansible run.\" % (to_text(output_path), to_text(':'.join(collections_path))))\n        if os.path.split(output_path)[1] != 'ansible_collections':\n            output_path = os.path.join(output_path, 'ansible_collections')\n        b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n        if not os.path.exists(b_output_path):\n            os.makedirs(b_output_path)\n        install_collections(collection_requirements, output_path, servers, not ignore_certs, ignore_errors, no_deps, force, force_deps)\n        return 0\n    role_file = context.CLIARGS['role_file']\n    if not context.CLIARGS['args'] and role_file is None:\n        raise AnsibleOptionsError('- you must specify a user/role name or a roles file')\n    no_deps = context.CLIARGS['no_deps']\n    force_deps = context.CLIARGS['force_with_deps']\n    force = context.CLIARGS['force'] or force_deps\n    roles_left = []\n    if role_file:\n        try:\n            f = open(role_file, 'r')\n            if role_file.endswith('.yaml') or role_file.endswith('.yml'):\n                try:\n                    required_roles = yaml.safe_load(f.read())\n                except Exception as e:\n                    raise AnsibleError('Unable to load data from the requirements file (%s): %s' % (role_file, to_native(e)))\n                if required_roles is None:\n                    raise AnsibleError('No roles found in file: %s' % role_file)\n                for role in required_roles:\n                    if 'include' not in role:\n                        role = RoleRequirement.role_yaml_parse(role)\n                        display.vvv('found role %s in yaml file' % str(role))\n                        if 'name' not in role and 'scm' not in role:\n                            raise AnsibleError('Must specify name or src for role')\n                        roles_left.append(GalaxyRole(self.galaxy, **role))\n                    else:\n                        with open(role['include']) as f_include:\n                            try:\n                                roles_left += [GalaxyRole(self.galaxy, **r) for r in (RoleRequirement.role_yaml_parse(i) for i in yaml.safe_load(f_include))]\n                            except Exception as e:\n                                msg = 'Unable to load data from the include requirements file: %s %s'\n                                raise AnsibleError(msg % (role_file, e))\n            else:\n                raise AnsibleError('Invalid role requirements file')\n            f.close()\n        except (IOError, OSError) as e:\n            raise AnsibleError('Unable to open %s: %s' % (role_file, to_native(e)))\n    else:\n        for rname in context.CLIARGS['args']:\n            role = RoleRequirement.role_yaml_parse(rname.strip())\n            roles_left.append(GalaxyRole(self.galaxy, **role))\n    for role in roles_left:\n        if role_file and context.CLIARGS['args'] and (role.name not in context.CLIARGS['args']):\n            display.vvv('Skipping role %s' % role.name)\n            continue\n        display.vvv('Processing role %s ' % role.name)\n        if role.install_info is not None:\n            if role.install_info['version'] != role.version or force:\n                if force:\n                    display.display('- changing role %s from %s to %s' % (role.name, role.install_info['version'], role.version or 'unspecified'))\n                    role.remove()\n                else:\n                    display.warning('- %s (%s) is already installed - use --force to change version to %s' % (role.name, role.install_info['version'], role.version or 'unspecified'))\n                    continue\n            elif not force:\n                display.display('- %s is already installed, skipping.' % str(role))\n                continue\n        try:\n            installed = role.install()\n        except AnsibleError as e:\n            display.warning(u'- %s was NOT installed successfully: %s ' % (role.name, to_text(e)))\n            self.exit_without_ignore()\n            continue\n        if not no_deps and installed:\n            if not role.metadata:\n                display.warning('Meta file %s is empty. Skipping dependencies.' % role.path)\n            else:\n                role_dependencies = role.metadata.get('dependencies') or []\n                for dep in role_dependencies:\n                    display.debug('Installing dep %s' % dep)\n                    dep_req = RoleRequirement()\n                    dep_info = dep_req.role_yaml_parse(dep)\n                    dep_role = GalaxyRole(self.galaxy, **dep_info)\n                    if '.' not in dep_role.name and '.' not in dep_role.src and (dep_role.scm is None):\n                        continue\n                    if dep_role.install_info is None:\n                        if dep_role not in roles_left:\n                            display.display('- adding dependency: %s' % to_text(dep_role))\n                            roles_left.append(dep_role)\n                        else:\n                            display.display('- dependency %s already pending installation.' % dep_role.name)\n                    elif dep_role.install_info['version'] != dep_role.version:\n                        if force_deps:\n                            display.display('- changing dependant role %s from %s to %s' % (dep_role.name, dep_role.install_info['version'], dep_role.version or 'unspecified'))\n                            dep_role.remove()\n                            roles_left.append(dep_role)\n                        else:\n                            display.warning('- dependency %s (%s) from role %s differs from already installed version (%s), skipping' % (to_text(dep_role), dep_role.version, role.name, dep_role.install_info['version']))\n                    elif force_deps:\n                        roles_left.append(dep_role)\n                    else:\n                        display.display('- dependency %s is already installed, skipping.' % dep_role.name)\n        if not installed:\n            display.warning('- %s was NOT installed successfully.' % role.name)\n            self.exit_without_ignore()\n    return 0",
                            "def execute_remove(self):\n    \"\"\"\n    removes the list of roles passed as arguments from the local system.\n    \"\"\"\n    if not context.CLIARGS['args']:\n        raise AnsibleOptionsError('- you must specify at least one role to remove.')\n    for role_name in context.CLIARGS['args']:\n        role = GalaxyRole(self.galaxy, role_name)\n        try:\n            if role.remove():\n                display.display('- successfully removed %s' % role_name)\n            else:\n                display.display('- %s is not installed, skipping.' % role_name)\n        except Exception as e:\n            raise AnsibleError('Failed to remove role %s: %s' % (role_name, to_native(e)))\n    return 0",
                            "def execute_list(self):\n    \"\"\"\n    lists the roles installed on the local system or matches a single role passed as an argument.\n    \"\"\"\n\n    def _display_role(gr):\n        install_info = gr.install_info\n        version = None\n        if install_info:\n            version = install_info.get('version', None)\n        if not version:\n            version = '(unknown version)'\n        display.display('- %s, %s' % (gr.name, version))\n    if context.CLIARGS['role']:\n        name = context.CLIARGS['role']\n        gr = GalaxyRole(self.galaxy, name)\n        if gr.metadata:\n            display.display('# %s' % os.path.dirname(gr.path))\n            _display_role(gr)\n        else:\n            display.display('- the role %s was not found' % name)\n    else:\n        roles_path = context.CLIARGS['roles_path']\n        path_found = False\n        warnings = []\n        for path in roles_path:\n            role_path = os.path.expanduser(path)\n            if not os.path.exists(role_path):\n                warnings.append('- the configured path %s does not exist.' % role_path)\n                continue\n            elif not os.path.isdir(role_path):\n                warnings.append('- the configured path %s, exists, but it is not a directory.' % role_path)\n                continue\n            display.display('# %s' % role_path)\n            path_files = os.listdir(role_path)\n            path_found = True\n            for path_file in path_files:\n                gr = GalaxyRole(self.galaxy, path_file, path=path)\n                if gr.metadata:\n                    _display_role(gr)\n        for w in warnings:\n            display.warning(w)\n        if not path_found:\n            raise AnsibleOptionsError('- None of the provided paths was usable. Please specify a valid path with --roles-path')\n    return 0",
                            "def execute_publish(self):\n    \"\"\"\n    Publish a collection into Ansible Galaxy. Requires the path to the collection tarball to publish.\n    \"\"\"\n    api_key = context.CLIARGS['api_key'] or GalaxyToken().get()\n    api_server = context.CLIARGS['api_server']\n    collection_path = GalaxyCLI._resolve_path(context.CLIARGS['args'])\n    ignore_certs = context.CLIARGS['ignore_certs']\n    wait = context.CLIARGS['wait']\n    publish_collection(collection_path, api_server, api_key, ignore_certs, wait)",
                            "def execute_search(self):\n    \"\"\" searches for roles on the Ansible Galaxy server\"\"\"\n    page_size = 1000\n    search = None\n    if context.CLIARGS['args']:\n        search = '+'.join(context.CLIARGS['args'])\n    if not search and (not context.CLIARGS['platforms']) and (not context.CLIARGS['galaxy_tags']) and (not context.CLIARGS['author']):\n        raise AnsibleError('Invalid query. At least one search term, platform, galaxy tag or author must be provided.')\n    response = self.api.search_roles(search, platforms=context.CLIARGS['platforms'], tags=context.CLIARGS['galaxy_tags'], author=context.CLIARGS['author'], page_size=page_size)\n    if response['count'] == 0:\n        display.display('No roles match your search.', color=C.COLOR_ERROR)\n        return True\n    data = [u'']\n    if response['count'] > page_size:\n        data.append(u'Found %d roles matching your search. Showing first %s.' % (response['count'], page_size))\n    else:\n        data.append(u'Found %d roles matching your search:' % response['count'])\n    max_len = []\n    for role in response['results']:\n        max_len.append(len(role['username'] + '.' + role['name']))\n    name_len = max(max_len)\n    format_str = u' %%-%ds %%s' % name_len\n    data.append(u'')\n    data.append(format_str % (u'Name', u'Description'))\n    data.append(format_str % (u'----', u'-----------'))\n    for role in response['results']:\n        data.append(format_str % (u'%s.%s' % (role['username'], role['name']), role['description']))\n    data = u'\\n'.join(data)\n    self.pager(data)\n    return True",
                            "def execute_login(self):\n    \"\"\"\n    verify user's identify via Github and retrieve an auth token from Ansible Galaxy.\n    \"\"\"\n    if context.CLIARGS['token'] is None:\n        if C.GALAXY_TOKEN:\n            github_token = C.GALAXY_TOKEN\n        else:\n            login = GalaxyLogin(self.galaxy)\n            github_token = login.create_github_token()\n    else:\n        github_token = context.CLIARGS['token']\n    galaxy_response = self.api.authenticate(github_token)\n    if context.CLIARGS['token'] is None and C.GALAXY_TOKEN is None:\n        login.remove_github_token()\n    token = GalaxyToken()\n    token.set(galaxy_response['token'])\n    display.display('Successfully logged into Galaxy as %s' % galaxy_response['username'])\n    return 0",
                            "def execute_import(self):\n    \"\"\" used to import a role into Ansible Galaxy \"\"\"\n    colors = {'INFO': 'normal', 'WARNING': C.COLOR_WARN, 'ERROR': C.COLOR_ERROR, 'SUCCESS': C.COLOR_OK, 'FAILED': C.COLOR_ERROR}\n    github_user = to_text(context.CLIARGS['github_user'], errors='surrogate_or_strict')\n    github_repo = to_text(context.CLIARGS['github_repo'], errors='surrogate_or_strict')\n    if context.CLIARGS['check_status']:\n        task = self.api.get_import_task(github_user=github_user, github_repo=github_repo)\n    else:\n        task = self.api.create_import_task(github_user, github_repo, reference=context.CLIARGS['reference'], role_name=context.CLIARGS['role_name'])\n        if len(task) > 1:\n            display.display('WARNING: More than one Galaxy role associated with Github repo %s/%s.' % (github_user, github_repo), color='yellow')\n            display.display('The following Galaxy roles are being updated:' + u'\\n', color=C.COLOR_CHANGED)\n            for t in task:\n                display.display('%s.%s' % (t['summary_fields']['role']['namespace'], t['summary_fields']['role']['name']), color=C.COLOR_CHANGED)\n            display.display(u'\\nTo properly namespace this role, remove each of the above and re-import %s/%s from scratch' % (github_user, github_repo), color=C.COLOR_CHANGED)\n            return 0\n        display.display('Successfully submitted import request %d' % task[0]['id'])\n        if not context.CLIARGS['wait']:\n            display.display('Role name: %s' % task[0]['summary_fields']['role']['name'])\n            display.display('Repo: %s/%s' % (task[0]['github_user'], task[0]['github_repo']))\n    if context.CLIARGS['check_status'] or context.CLIARGS['wait']:\n        msg_list = []\n        finished = False\n        while not finished:\n            task = self.api.get_import_task(task_id=task[0]['id'])\n            for msg in task[0]['summary_fields']['task_messages']:\n                if msg['id'] not in msg_list:\n                    display.display(msg['message_text'], color=colors[msg['message_type']])\n                    msg_list.append(msg['id'])\n            if task[0]['state'] in ['SUCCESS', 'FAILED']:\n                finished = True\n            else:\n                time.sleep(10)\n    return 0",
                            "def execute_setup(self):\n    \"\"\" Setup an integration from Github or Travis for Ansible Galaxy roles\"\"\"\n    if context.CLIARGS['setup_list']:\n        secrets = self.api.list_secrets()\n        if len(secrets) == 0:\n            display.display('No integrations found.')\n            return 0\n        display.display(u'\\n' + 'ID         Source     Repo', color=C.COLOR_OK)\n        display.display('---------- ---------- ----------', color=C.COLOR_OK)\n        for secret in secrets:\n            display.display('%-10s %-10s %s/%s' % (secret['id'], secret['source'], secret['github_user'], secret['github_repo']), color=C.COLOR_OK)\n        return 0\n    if context.CLIARGS['remove_id']:\n        self.api.remove_secret(context.CLIARGS['remove_id'])\n        display.display('Secret removed. Integrations using this secret will not longer work.', color=C.COLOR_OK)\n        return 0\n    source = context.CLIARGS['source']\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    secret = context.CLIARGS['secret']\n    resp = self.api.add_secret(source, github_user, github_repo, secret)\n    display.display('Added integration for %s %s/%s' % (resp['source'], resp['github_user'], resp['github_repo']))\n    return 0",
                            "def execute_delete(self):\n    \"\"\" Delete a role from Ansible Galaxy. \"\"\"\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    resp = self.api.delete_role(github_user, github_repo)\n    if len(resp['deleted_roles']) > 1:\n        display.display('Deleted the following roles:')\n        display.display('ID     User            Name')\n        display.display('------ --------------- ----------')\n        for role in resp['deleted_roles']:\n            display.display('%-8s %-15s %s' % (role.id, role.namespace, role.name))\n    display.display(resp['status'])\n    return True",
                            "def comment_ify(v):\n    if isinstance(v, list):\n        v = '. '.join([l.rstrip('.') for l in v])\n    v = link_pattern.sub('\\\\1 <\\\\2>', v)\n    v = const_pattern.sub(\"'\\\\1'\", v)\n    return textwrap.fill(v, width=117, initial_indent='# ', subsequent_indent='# ', break_on_hyphens=False)",
                            "def to_yaml(v):\n    return yaml.safe_dump(v, default_flow_style=False).rstrip()",
                            "def _display_role(gr):\n    install_info = gr.install_info\n    version = None\n    if install_info:\n        version = install_info.get('version', None)\n    if not version:\n        version = '(unknown version)'\n    display.display('- %s, %s' % (gr.name, version))"
                        ],
                        "constructor_variables": [
                            "galaxy",
                            "api"
                        ],
                        "class_level_variables": [
                            "SKIP_INFO_KEYS"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, args)",
                            "init_parser(self)",
                            "add_init_parser(self, parser, parents)",
                            "post_process_args(self, options)",
                            "run(self)",
                            "exit_without_ignore(rc=1)",
                            "_display_role_info(role_info)",
                            "_resolve_path(path)",
                            "_validate_collection_name(name)",
                            "_get_skeleton_galaxy_yml(template_path, inject_data)",
                            "execute_role(self)",
                            "execute_collection(self)",
                            "execute_build(self)",
                            "execute_init(self)",
                            "execute_info(self)",
                            "execute_install(self)",
                            "execute_remove(self)",
                            "execute_list(self)",
                            "execute_publish(self)",
                            "execute_search(self)",
                            "execute_login(self)",
                            "execute_import(self)",
                            "execute_setup(self)",
                            "execute_delete(self)",
                            "comment_ify(v)",
                            "to_yaml(v)",
                            "_display_role(gr)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "galaxy_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context.CLIARGS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "init_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_skeleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inject_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_versioned_doclink": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inject_data.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ansible_version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "namespace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_name.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_obj_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "own_skeleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skeleton_ignore_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.GALAXY_ROLE_SKELETON_IGNORE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.galaxy.default_role_skeleton_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.galaxy": {
                                    "variable_value": "<ansible.galaxy.Galaxy object at 0x10417f690>",
                                    "variable_type": "Galaxy",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x10478f0d0>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "os.path.expanduser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skeleton_ignore_re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_env": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Environment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileSystemLoader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.makedirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "root": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "files": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.walk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_root": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.relpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_dirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_root.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.sep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_root_dir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_templates_dir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "r.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "r": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.splitext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inject_data.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_data.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "meta_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI._get_skeleton_galaxy_yml": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_dest_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "galaxy_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "galaxy_obj.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_template": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dump": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_env.get_template": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f_rel_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shutil.copyfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shutil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_dir_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "galaxy_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context.CLIARGS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "init_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "force": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_skeleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inject_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_versioned_doclink": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inject_data.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ansible_version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "namespace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_name.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_obj_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "own_skeleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skeleton_ignore_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C.GALAXY_ROLE_SKELETON_IGNORE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "C": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.galaxy.default_role_skeleton_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.galaxy": {
                                    "variable_value": "<ansible.galaxy.Galaxy object at 0x104445d50>",
                                    "variable_type": "Galaxy",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.cli.galaxy.GalaxyCLI object at 0x104a36d10>",
                                    "variable_type": "GalaxyCLI",
                                    "variable_shape": null
                                },
                                "os.path.expanduser": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skeleton_ignore_re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.compile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_env": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Environment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FileSystemLoader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.makedirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "root": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "files": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.walk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_root": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.relpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_dirs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_root.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.sep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rel_root_dir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "in_templates_dir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "r.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "r": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "filename": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.splitext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inject_data.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_data.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "meta_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI._get_skeleton_galaxy_yml": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GalaxyCLI": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_dest_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "galaxy_obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "galaxy_obj.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_template": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dump": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stream": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template_env.get_template": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f_rel_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shutil.copyfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shutil": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_dir_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display.display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "galaxy_type.title": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, args):\n    # Inject role into sys.argv[1] as a backwards compatibility step\n    if len(args) > 1 and args[1] not in ['-h', '--help'] and 'role' not in args and 'collection' not in args:\n        # TODO: Should we add a warning here and eventually deprecate the implicit role subcommand choice\n        args.insert(1, 'role')\n\n    self.api = None\n    self.galaxy = None\n    super(GalaxyCLI, self).__init__(args)",
                "def init_parser(self):\n    ''' create an options parser for bin/ansible '''\n\n    super(GalaxyCLI, self).init_parser(\n        desc=\"Perform various Role related operations.\",\n    )\n\n    # common\n    common = opt_help.argparse.ArgumentParser(add_help=False)\n    common.add_argument('-s', '--server', dest='api_server', default=C.GALAXY_SERVER, help='The API server destination')\n    common.add_argument('-c', '--ignore-certs', action='store_true', dest='ignore_certs', default=C.GALAXY_IGNORE_CERTS,\n                        help='Ignore SSL certificate validation errors.')\n    opt_help.add_verbosity_options(common)\n\n    # options that apply to more than one action\n    user_repo = opt_help.argparse.ArgumentParser(add_help=False)\n    user_repo.add_argument('github_user', help='GitHub username')\n    user_repo.add_argument('github_repo', help='GitHub repository')\n\n    offline = opt_help.argparse.ArgumentParser(add_help=False)\n    offline.add_argument('--offline', dest='offline', default=False, action='store_true',\n                         help=\"Don't query the galaxy API when creating roles\")\n\n    default_roles_path = C.config.get_configuration_definition('DEFAULT_ROLES_PATH').get('default', '')\n    roles_path = opt_help.argparse.ArgumentParser(add_help=False)\n    roles_path.add_argument('-p', '--roles-path', dest='roles_path', type=opt_help.unfrack_path(pathsep=True),\n                            default=C.DEFAULT_ROLES_PATH, action=opt_help.PrependListAction,\n                            help='The path to the directory containing your roles. The default is the first writable one'\n                                 'configured via DEFAULT_ROLES_PATH: %s ' % default_roles_path)\n\n    force = opt_help.argparse.ArgumentParser(add_help=False)\n    force.add_argument('-f', '--force', dest='force', action='store_true', default=False,\n                       help='Force overwriting an existing role or collection')\n\n    # Add sub parser for the Galaxy role type (role or collection)\n    type_parser = self.parser.add_subparsers(metavar='TYPE', dest='type')\n    type_parser.required = True\n\n    # Define the actions for the collection object type\n    collection = type_parser.add_parser('collection',\n                                        parents=[common],\n                                        help='Manage an Ansible Galaxy collection.')\n\n    collection_parser = collection.add_subparsers(metavar='ACTION', dest='collection')\n    collection_parser.required = True\n\n    build_parser = collection_parser.add_parser(\n        'build', help='Build an Ansible collection artifact that can be published to Ansible Galaxy.',\n        parents=[common, force])\n    build_parser.set_defaults(func=self.execute_build)\n    build_parser.add_argument(\n        'args', metavar='collection', nargs='*', default=('./',),\n        help='Path to the collection(s) directory to build. This should be the directory that contains the '\n             'galaxy.yml file. The default is the current working directory.')\n\n    build_parser.add_argument(\n        '--output-path', dest='output_path', default='./',\n        help='The path in which the collection is built to. The default is the current working directory.')\n\n    self.add_init_parser(collection_parser, [common, force])\n\n    cinstall_parser = collection_parser.add_parser('install', help='Install collection from Ansible Galaxy',\n                                                   parents=[force, common])\n    cinstall_parser.set_defaults(func=self.execute_install)\n    cinstall_parser.add_argument('args', metavar='collection_name', nargs='*',\n                                 help='The collection(s) name or path/url to a tar.gz collection artifact. This '\n                                      'is mutually exclusive with --requirements-file.')\n    cinstall_parser.add_argument('-p', '--collections-path', dest='collections_path', required=True,\n                                 help='The path to the directory containing your collections.')\n    cinstall_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False,\n                                 help='Ignore errors during installation and continue with the next specified '\n                                      'collection. This will not ignore dependency conflict errors.')\n    cinstall_parser.add_argument('-r', '--requirements-file', dest='requirements',\n                                 help='A file containing a list of collections to be installed.')\n\n    cinstall_exclusive = cinstall_parser.add_mutually_exclusive_group()\n    cinstall_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False,\n                                    help=\"Don't download collections listed as dependencies\")\n    cinstall_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False,\n                                    help=\"Force overwriting an existing collection and its dependencies\")\n\n    publish_parser = collection_parser.add_parser(\n        'publish', help='Publish a collection artifact to Ansible Galaxy.',\n        parents=[common])\n    publish_parser.set_defaults(func=self.execute_publish)\n    publish_parser.add_argument(\n        'args', metavar='collection_path', help='The path to the collection tarball to publish.')\n    publish_parser.add_argument(\n        '--api-key', dest='api_key',\n        help='The Ansible Galaxy API key which can be found at https://galaxy.ansible.com/me/preferences. '\n             'You can also use ansible-galaxy login to retrieve this key.')\n    publish_parser.add_argument(\n        '--no-wait', dest='wait', action='store_false', default=True,\n        help=\"Don't wait for import validation results.\")\n\n    # Define the actions for the role object type\n    role = type_parser.add_parser('role',\n                                  parents=[common],\n                                  help='Manage an Ansible Galaxy role.')\n    role_parser = role.add_subparsers(metavar='ACTION', dest='role')\n    role_parser.required = True\n\n    delete_parser = role_parser.add_parser('delete', parents=[user_repo, common],\n                                           help='Removes the role from Galaxy. It does not remove or alter the actual GitHub repository.')\n    delete_parser.set_defaults(func=self.execute_delete)\n\n    import_parser = role_parser.add_parser('import', help='Import a role', parents=[user_repo, common])\n    import_parser.set_defaults(func=self.execute_import)\n    import_parser.add_argument('--no-wait', dest='wait', action='store_false', default=True, help=\"Don't wait for import results.\")\n    import_parser.add_argument('--branch', dest='reference',\n                               help='The name of a branch to import. Defaults to the repository\\'s default branch (usually master)')\n    import_parser.add_argument('--role-name', dest='role_name', help='The name the role should have, if different than the repo name')\n    import_parser.add_argument('--status', dest='check_status', action='store_true', default=False,\n                               help='Check the status of the most recent import request for given github_user/github_repo.')\n\n    info_parser = role_parser.add_parser('info', help='View more details about a specific role.',\n                                         parents=[offline, common, roles_path])\n    info_parser.set_defaults(func=self.execute_info)\n    info_parser.add_argument('args', nargs='+', help='role', metavar='role_name[,version]')\n\n    rinit_parser = self.add_init_parser(role_parser, [offline, force, common])\n    rinit_parser.add_argument('--type',\n                              dest='role_type',\n                              action='store',\n                              default='default',\n                              help=\"Initialize using an alternate role type. Valid types include: 'container', 'apb' and 'network'.\")\n\n    install_parser = role_parser.add_parser('install', help='Install Roles from file(s), URL(s) or tar file(s)',\n                                            parents=[force, common, roles_path])\n    install_parser.set_defaults(func=self.execute_install)\n    install_parser.add_argument('-i', '--ignore-errors', dest='ignore_errors', action='store_true', default=False,\n                                help='Ignore errors and continue with the next specified role.')\n    install_parser.add_argument('-r', '--role-file', dest='role_file', help='A file containing a list of roles to be imported')\n    install_parser.add_argument('-g', '--keep-scm-meta', dest='keep_scm_meta', action='store_true',\n                                default=False, help='Use tar instead of the scm archive option when packaging the role')\n    install_parser.add_argument('args', help='Role name, URL or tar file', metavar='role', nargs='*')\n    install_exclusive = install_parser.add_mutually_exclusive_group()\n    install_exclusive.add_argument('-n', '--no-deps', dest='no_deps', action='store_true', default=False,\n                                   help=\"Don't download roles listed as dependencies\")\n    install_exclusive.add_argument('--force-with-deps', dest='force_with_deps', action='store_true', default=False,\n                                   help=\"Force overwriting an existing role and it's dependencies\")\n\n    remove_parser = role_parser.add_parser('remove', help='Delete roles from roles_path.', parents=[common, roles_path])\n    remove_parser.set_defaults(func=self.execute_remove)\n    remove_parser.add_argument('args', help='Role(s)', metavar='role', nargs='+')\n\n    list_parser = role_parser.add_parser('list', help='Show the name and version of each role installed in the roles_path.',\n                                         parents=[common, roles_path])\n    list_parser.set_defaults(func=self.execute_list)\n    list_parser.add_argument('role', help='Role', nargs='?', metavar='role')\n\n    login_parser = role_parser.add_parser('login', parents=[common],\n                                          help=\"Login to api.github.com server in order to use ansible-galaxy role \"\n                                               \"sub command such as 'import', 'delete', 'publish', and 'setup'\")\n    login_parser.set_defaults(func=self.execute_login)\n    login_parser.add_argument('--github-token', dest='token', default=None,\n                              help='Identify with github token rather than username and password.')\n\n    search_parser = role_parser.add_parser('search', help='Search the Galaxy database by tags, platforms, author and multiple keywords.',\n                                           parents=[common])\n    search_parser.set_defaults(func=self.execute_search)\n    search_parser.add_argument('--platforms', dest='platforms', help='list of OS platforms to filter by')\n    search_parser.add_argument('--galaxy-tags', dest='galaxy_tags', help='list of galaxy tags to filter by')\n    search_parser.add_argument('--author', dest='author', help='GitHub username')\n    search_parser.add_argument('args', help='Search terms', metavar='searchterm', nargs='*')\n\n    setup_parser = role_parser.add_parser('setup', help='Manage the integration between Galaxy and the given source.',\n                                          parents=[roles_path, common])\n    setup_parser.set_defaults(func=self.execute_setup)\n    setup_parser.add_argument('--remove', dest='remove_id', default=None,\n                              help='Remove the integration matching the provided ID value. Use --list to see ID values.')\n    setup_parser.add_argument('--list', dest=\"setup_list\", action='store_true', default=False, help='List all of your integrations.')\n    setup_parser.add_argument('source', help='Source')\n    setup_parser.add_argument('github_user', help='GitHub username')\n    setup_parser.add_argument('github_repo', help='GitHub repository')\n    setup_parser.add_argument('secret', help='Secret')",
                "def add_init_parser(self, parser, parents):\n    galaxy_type = parser.dest\n\n    obj_name_kwargs = {}\n    if galaxy_type == 'collection':\n        obj_name_kwargs['type'] = GalaxyCLI._validate_collection_name\n\n    init_parser = parser.add_parser('init',\n                                    help='Initialize new {0} with the base structure of a {0}.'.format(galaxy_type),\n                                    parents=parents)\n    init_parser.set_defaults(func=self.execute_init)\n\n    init_parser.add_argument('--init-path',\n                             dest='init_path',\n                             default='./',\n                             help='The path in which the skeleton {0} will be created. The default is the current working directory.'.format(galaxy_type))\n    init_parser.add_argument('--{0}-skeleton'.format(galaxy_type),\n                             dest='{0}_skeleton'.format(galaxy_type),\n                             default=C.GALAXY_ROLE_SKELETON,\n                             help='The path to a {0} skeleton that the new {0} should be based upon.'.format(galaxy_type))\n    init_parser.add_argument('{0}_name'.format(galaxy_type),\n                             help='{0} name'.format(galaxy_type.capitalize()),\n                             **obj_name_kwargs)\n\n    return init_parser",
                "def post_process_args(self, options):\n    options = super(GalaxyCLI, self).post_process_args(options)\n    display.verbosity = options.verbosity\n    return options",
                "def run(self):\n\n    super(GalaxyCLI, self).run()\n\n    self.galaxy = Galaxy()\n\n    self.api = GalaxyAPI(self.galaxy)\n    context.CLIARGS['func']()",
                "@staticmethod\ndef exit_without_ignore(rc=1):\n    \"\"\"\n    Exits with the specified return code unless the\n    option --ignore-errors was specified\n    \"\"\"\n    if not context.CLIARGS['ignore_errors']:\n        raise AnsibleError('- you can use --ignore-errors to skip failed roles and finish processing the list.')",
                "@staticmethod\ndef _display_role_info(role_info):\n\n    text = [u\"\", u\"Role: %s\" % to_text(role_info['name'])]\n    text.append(u\"\\tdescription: %s\" % role_info.get('description', ''))\n\n    for k in sorted(role_info.keys()):\n\n        if k in GalaxyCLI.SKIP_INFO_KEYS:\n            continue\n\n        if isinstance(role_info[k], dict):\n            text.append(u\"\\t%s:\" % (k))\n            for key in sorted(role_info[k].keys()):\n                if key in GalaxyCLI.SKIP_INFO_KEYS:\n                    continue\n                text.append(u\"\\t\\t%s: %s\" % (key, role_info[k][key]))\n        else:\n            text.append(u\"\\t%s: %s\" % (k, role_info[k]))\n\n    return u'\\n'.join(text)",
                "@staticmethod\ndef _resolve_path(path):\n    return os.path.abspath(os.path.expanduser(os.path.expandvars(path)))",
                "@staticmethod\ndef _validate_collection_name(name):\n    if is_collection_ref('ansible_collections.{0}'.format(name)):\n        return name\n\n    raise AnsibleError(\"Invalid collection name, must be in the format <namespace>.<collection>\")",
                "@staticmethod\ndef _get_skeleton_galaxy_yml(template_path, inject_data):\n    with open(to_bytes(template_path, errors='surrogate_or_strict'), 'rb') as template_obj:\n        meta_template = to_text(template_obj.read(), errors='surrogate_or_strict')\n\n    galaxy_meta = get_collections_galaxy_meta_info()\n\n    required_config = []\n    optional_config = []\n    for meta_entry in galaxy_meta:\n        config_list = required_config if meta_entry.get('required', False) else optional_config\n\n        value = inject_data.get(meta_entry['key'], None)\n        if not value:\n            meta_type = meta_entry.get('type', 'str')\n\n            if meta_type == 'str':\n                value = ''\n            elif meta_type == 'list':\n                value = []\n            elif meta_type == 'dict':\n                value = {}\n\n        meta_entry['value'] = value\n        config_list.append(meta_entry)\n\n    link_pattern = re.compile(r\"L\\(([^)]+),\\s+([^)]+)\\)\")\n    const_pattern = re.compile(r\"C\\(([^)]+)\\)\")\n\n    def comment_ify(v):\n        if isinstance(v, list):\n            v = \". \".join([l.rstrip('.') for l in v])\n\n        v = link_pattern.sub(r\"\\1 <\\2>\", v)\n        v = const_pattern.sub(r\"'\\1'\", v)\n\n        return textwrap.fill(v, width=117, initial_indent=\"# \", subsequent_indent=\"# \", break_on_hyphens=False)\n\n    def to_yaml(v):\n        return yaml.safe_dump(v, default_flow_style=False).rstrip()\n\n    env = Environment(loader=BaseLoader)\n    env.filters['comment_ify'] = comment_ify\n    env.filters['to_yaml'] = to_yaml\n\n    template = env.from_string(meta_template)\n    meta_value = template.render({'required_config': required_config, 'optional_config': optional_config})\n\n    return meta_value",
                "def execute_role(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy role. Must be combined with a further action like delete/install/init\n    as listed below.\n    \"\"\"\n    # To satisfy doc build\n    pass",
                "def execute_collection(self):\n    \"\"\"\n    Perform the action on an Ansible Galaxy collection. Must be combined with a further action like init/install as\n    listed below.\n    \"\"\"\n    # To satisfy doc build\n    pass",
                "def execute_build(self):\n    \"\"\"\n    Build an Ansible Galaxy collection artifact that can be stored in a central repository like Ansible Galaxy.\n    By default, this command builds from the current working directory. You can optionally pass in the\n    collection input path (where the ``galaxy.yml`` file is).\n    \"\"\"\n    force = context.CLIARGS['force']\n    output_path = GalaxyCLI._resolve_path(context.CLIARGS['output_path'])\n    b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n\n    if not os.path.exists(b_output_path):\n        os.makedirs(b_output_path)\n    elif os.path.isfile(b_output_path):\n        raise AnsibleError(\"- the output collection directory %s is a file - aborting\" % to_native(output_path))\n\n    for collection_path in context.CLIARGS['args']:\n        collection_path = GalaxyCLI._resolve_path(collection_path)\n        build_collection(collection_path, output_path, force)",
                "def execute_init(self):\n    \"\"\"\n    Creates the skeleton framework of a role or collection that complies with the Galaxy metadata format.\n    Requires a role or collection name. The collection name must be in the format ``<namespace>.<collection>``.\n    \"\"\"\n\n    galaxy_type = context.CLIARGS['type']\n    init_path = context.CLIARGS['init_path']\n    force = context.CLIARGS['force']\n    obj_skeleton = context.CLIARGS['{0}_skeleton'.format(galaxy_type)]\n\n    obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]\n\n    inject_data = dict(\n        description='your description',\n        ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),\n    )\n    if galaxy_type == 'role':\n        inject_data.update(dict(\n            author='your name',\n            company='your company (optional)',\n            license='license (GPL-2.0-or-later, MIT, etc)',\n            role_name=obj_name,\n            role_type=context.CLIARGS['role_type'],\n            issue_tracker_url='http://example.com/issue/tracker',\n            repository_url='http://example.com/repository',\n            documentation_url='http://docs.example.com',\n            homepage_url='http://example.com',\n            min_ansible_version=ansible_version[:3],  # x.y\n        ))\n\n        obj_path = os.path.join(init_path, obj_name)\n    elif galaxy_type == 'collection':\n        namespace, collection_name = obj_name.split('.', 1)\n\n        inject_data.update(dict(\n            namespace=namespace,\n            collection_name=collection_name,\n            version='1.0.0',\n            readme='README.md',\n            authors=['your name <example@domain.com>'],\n            license=['GPL-2.0-or-later'],\n            repository='http://example.com/repository',\n            documentation='http://docs.example.com',\n            homepage='http://example.com',\n            issues='http://example.com/issue/tracker',\n        ))\n\n        obj_path = os.path.join(init_path, namespace, collection_name)\n\n    b_obj_path = to_bytes(obj_path, errors='surrogate_or_strict')\n\n    if os.path.exists(b_obj_path):\n        if os.path.isfile(obj_path):\n            raise AnsibleError(\"- the path %s already exists, but is a file - aborting\" % to_native(obj_path))\n        elif not force:\n            raise AnsibleError(\"- the directory %s already exists. \"\n                               \"You can use --force to re-initialize this directory,\\n\"\n                               \"however it will reset any main.yml files that may have\\n\"\n                               \"been modified there already.\" % to_native(obj_path))\n\n    if obj_skeleton is not None:\n        own_skeleton = False\n        skeleton_ignore_expressions = C.GALAXY_ROLE_SKELETON_IGNORE\n    else:\n        own_skeleton = True\n        obj_skeleton = self.galaxy.default_role_skeleton_path\n        skeleton_ignore_expressions = ['^.*/.git_keep$']\n\n    obj_skeleton = os.path.expanduser(obj_skeleton)\n    skeleton_ignore_re = [re.compile(x) for x in skeleton_ignore_expressions]\n\n    if not os.path.exists(obj_skeleton):\n        raise AnsibleError(\"- the skeleton path '{0}' does not exist, cannot init {1}\".format(\n            to_native(obj_skeleton), galaxy_type)\n        )\n\n    template_env = Environment(loader=FileSystemLoader(obj_skeleton))\n\n    # create role directory\n    if not os.path.exists(b_obj_path):\n        os.makedirs(b_obj_path)\n\n    for root, dirs, files in os.walk(obj_skeleton, topdown=True):\n        rel_root = os.path.relpath(root, obj_skeleton)\n        rel_dirs = rel_root.split(os.sep)\n        rel_root_dir = rel_dirs[0]\n        if galaxy_type == 'collection':\n            # A collection can contain templates in playbooks/*/templates and roles/*/templates\n            in_templates_dir = rel_root_dir in ['playbooks', 'roles'] and 'templates' in rel_dirs\n        else:\n            in_templates_dir = rel_root_dir == 'templates'\n\n        dirs[:] = [d for d in dirs if not any(r.match(d) for r in skeleton_ignore_re)]\n\n        for f in files:\n            filename, ext = os.path.splitext(f)\n\n            if any(r.match(os.path.join(rel_root, f)) for r in skeleton_ignore_re):\n                continue\n            elif galaxy_type == 'collection' and own_skeleton and rel_root == '.' and f == 'galaxy.yml.j2':\n                # Special use case for galaxy.yml.j2 in our own default collection skeleton. We build the options\n                # dynamically which requires special options to be set.\n\n                # The templated data's keys must match the key name but the inject data contains collection_name\n                # instead of name. We just make a copy and change the key back to name for this file.\n                template_data = inject_data.copy()\n                template_data['name'] = template_data.pop('collection_name')\n\n                meta_value = GalaxyCLI._get_skeleton_galaxy_yml(os.path.join(root, rel_root, f), template_data)\n                b_dest_file = to_bytes(os.path.join(obj_path, rel_root, filename), errors='surrogate_or_strict')\n                with open(b_dest_file, 'wb') as galaxy_obj:\n                    galaxy_obj.write(to_bytes(meta_value, errors='surrogate_or_strict'))\n            elif ext == \".j2\" and not in_templates_dir:\n                src_template = os.path.join(rel_root, f)\n                dest_file = os.path.join(obj_path, rel_root, filename)\n                template_env.get_template(src_template).stream(inject_data).dump(dest_file, encoding='utf-8')\n            else:\n                f_rel_path = os.path.relpath(os.path.join(root, f), obj_skeleton)\n                shutil.copyfile(os.path.join(root, f), os.path.join(obj_path, f_rel_path))\n\n        for d in dirs:\n            b_dir_path = to_bytes(os.path.join(obj_path, rel_root, d), errors='surrogate_or_strict')\n            if not os.path.exists(b_dir_path):\n                os.makedirs(b_dir_path)\n\n    display.display(\"- %s was created successfully\" % obj_name)",
                "def execute_info(self):\n    \"\"\"\n    prints out detailed information about an installed role as well as info available from the galaxy API.\n    \"\"\"\n\n    roles_path = context.CLIARGS['roles_path']\n\n    data = ''\n    for role in context.CLIARGS['args']:\n\n        role_info = {'path': roles_path}\n        gr = GalaxyRole(self.galaxy, role)\n\n        install_info = gr.install_info\n        if install_info:\n            if 'version' in install_info:\n                install_info['installed_version'] = install_info['version']\n                del install_info['version']\n            role_info.update(install_info)\n\n        remote_data = False\n        if not context.CLIARGS['offline']:\n            remote_data = self.api.lookup_role_by_name(role, False)\n\n        if remote_data:\n            role_info.update(remote_data)\n\n        if gr.metadata:\n            role_info.update(gr.metadata)\n\n        req = RoleRequirement()\n        role_spec = req.role_yaml_parse({'role': role})\n        if role_spec:\n            role_info.update(role_spec)\n\n        data = self._display_role_info(role_info)\n        # FIXME: This is broken in both 1.9 and 2.0 as\n        # _display_role_info() always returns something\n        if not data:\n            data = u\"\\n- the role %s was not found\" % role\n\n    self.pager(data)",
                "def execute_install(self):\n    \"\"\"\n    Install one or more roles(``ansible-galaxy role install``), or one or more collections(``ansible-galaxy collection install``).\n    You can pass in a list (roles or collections) or use the file\n    option listed below (these are mutually exclusive). If you pass in a list, it\n    can be a name (which will be downloaded via the galaxy API and github), or it can be a local tar archive file.\n    \"\"\"\n    if context.CLIARGS['type'] == 'collection':\n        collections = context.CLIARGS['args']\n        force = context.CLIARGS['force']\n        output_path = context.CLIARGS['collections_path']\n        # TODO: use a list of server that have been configured in ~/.ansible_galaxy\n        servers = [context.CLIARGS['api_server']]\n        ignore_certs = context.CLIARGS['ignore_certs']\n        ignore_errors = context.CLIARGS['ignore_errors']\n        requirements_file = context.CLIARGS['requirements']\n        no_deps = context.CLIARGS['no_deps']\n        force_deps = context.CLIARGS['force_with_deps']\n\n        if collections and requirements_file:\n            raise AnsibleError(\"The positional collection_name arg and --requirements-file are mutually exclusive.\")\n        elif not collections and not requirements_file:\n            raise AnsibleError(\"You must specify a collection name or a requirements file.\")\n\n        if requirements_file:\n            requirements_file = GalaxyCLI._resolve_path(requirements_file)\n            collection_requirements = parse_collections_requirements_file(requirements_file)\n        else:\n            collection_requirements = []\n            for collection_input in collections:\n                name, dummy, requirement = collection_input.partition(':')\n                collection_requirements.append((name, requirement or '*', None))\n\n        output_path = GalaxyCLI._resolve_path(output_path)\n        collections_path = C.COLLECTIONS_PATHS\n\n        if len([p for p in collections_path if p.startswith(output_path)]) == 0:\n            display.warning(\"The specified collections path '%s' is not part of the configured Ansible \"\n                            \"collections paths '%s'. The installed collection won't be picked up in an Ansible \"\n                            \"run.\" % (to_text(output_path), to_text(\":\".join(collections_path))))\n\n        if os.path.split(output_path)[1] != 'ansible_collections':\n            output_path = os.path.join(output_path, 'ansible_collections')\n\n        b_output_path = to_bytes(output_path, errors='surrogate_or_strict')\n        if not os.path.exists(b_output_path):\n            os.makedirs(b_output_path)\n\n        install_collections(collection_requirements, output_path, servers, (not ignore_certs), ignore_errors,\n                            no_deps, force, force_deps)\n\n        return 0\n\n    role_file = context.CLIARGS['role_file']\n\n    if not context.CLIARGS['args'] and role_file is None:\n        # the user needs to specify one of either --role-file or specify a single user/role name\n        raise AnsibleOptionsError(\"- you must specify a user/role name or a roles file\")\n\n    no_deps = context.CLIARGS['no_deps']\n    force_deps = context.CLIARGS['force_with_deps']\n\n    force = context.CLIARGS['force'] or force_deps\n\n    roles_left = []\n    if role_file:\n        try:\n            f = open(role_file, 'r')\n            if role_file.endswith('.yaml') or role_file.endswith('.yml'):\n                try:\n                    required_roles = yaml.safe_load(f.read())\n                except Exception as e:\n                    raise AnsibleError(\n                        \"Unable to load data from the requirements file (%s): %s\" % (role_file, to_native(e))\n                    )\n\n                if required_roles is None:\n                    raise AnsibleError(\"No roles found in file: %s\" % role_file)\n\n                for role in required_roles:\n                    if \"include\" not in role:\n                        role = RoleRequirement.role_yaml_parse(role)\n                        display.vvv(\"found role %s in yaml file\" % str(role))\n                        if \"name\" not in role and \"scm\" not in role:\n                            raise AnsibleError(\"Must specify name or src for role\")\n                        roles_left.append(GalaxyRole(self.galaxy, **role))\n                    else:\n                        with open(role[\"include\"]) as f_include:\n                            try:\n                                roles_left += [\n                                    GalaxyRole(self.galaxy, **r) for r in\n                                    (RoleRequirement.role_yaml_parse(i) for i in yaml.safe_load(f_include))\n                                ]\n                            except Exception as e:\n                                msg = \"Unable to load data from the include requirements file: %s %s\"\n                                raise AnsibleError(msg % (role_file, e))\n            else:\n                raise AnsibleError(\"Invalid role requirements file\")\n            f.close()\n        except (IOError, OSError) as e:\n            raise AnsibleError('Unable to open %s: %s' % (role_file, to_native(e)))\n    else:\n        # roles were specified directly, so we'll just go out grab them\n        # (and their dependencies, unless the user doesn't want us to).\n        for rname in context.CLIARGS['args']:\n            role = RoleRequirement.role_yaml_parse(rname.strip())\n            roles_left.append(GalaxyRole(self.galaxy, **role))\n\n    for role in roles_left:\n        # only process roles in roles files when names matches if given\n        if role_file and context.CLIARGS['args'] and role.name not in context.CLIARGS['args']:\n            display.vvv('Skipping role %s' % role.name)\n            continue\n\n        display.vvv('Processing role %s ' % role.name)\n\n        # query the galaxy API for the role data\n\n        if role.install_info is not None:\n            if role.install_info['version'] != role.version or force:\n                if force:\n                    display.display('- changing role %s from %s to %s' %\n                                    (role.name, role.install_info['version'], role.version or \"unspecified\"))\n                    role.remove()\n                else:\n                    display.warning('- %s (%s) is already installed - use --force to change version to %s' %\n                                    (role.name, role.install_info['version'], role.version or \"unspecified\"))\n                    continue\n            else:\n                if not force:\n                    display.display('- %s is already installed, skipping.' % str(role))\n                    continue\n\n        try:\n            installed = role.install()\n        except AnsibleError as e:\n            display.warning(u\"- %s was NOT installed successfully: %s \" % (role.name, to_text(e)))\n            self.exit_without_ignore()\n            continue\n\n        # install dependencies, if we want them\n        if not no_deps and installed:\n            if not role.metadata:\n                display.warning(\"Meta file %s is empty. Skipping dependencies.\" % role.path)\n            else:\n                role_dependencies = role.metadata.get('dependencies') or []\n                for dep in role_dependencies:\n                    display.debug('Installing dep %s' % dep)\n                    dep_req = RoleRequirement()\n                    dep_info = dep_req.role_yaml_parse(dep)\n                    dep_role = GalaxyRole(self.galaxy, **dep_info)\n                    if '.' not in dep_role.name and '.' not in dep_role.src and dep_role.scm is None:\n                        # we know we can skip this, as it's not going to\n                        # be found on galaxy.ansible.com\n                        continue\n                    if dep_role.install_info is None:\n                        if dep_role not in roles_left:\n                            display.display('- adding dependency: %s' % to_text(dep_role))\n                            roles_left.append(dep_role)\n                        else:\n                            display.display('- dependency %s already pending installation.' % dep_role.name)\n                    else:\n                        if dep_role.install_info['version'] != dep_role.version:\n                            if force_deps:\n                                display.display('- changing dependant role %s from %s to %s' %\n                                                (dep_role.name, dep_role.install_info['version'], dep_role.version or \"unspecified\"))\n                                dep_role.remove()\n                                roles_left.append(dep_role)\n                            else:\n                                display.warning('- dependency %s (%s) from role %s differs from already installed version (%s), skipping' %\n                                                (to_text(dep_role), dep_role.version, role.name, dep_role.install_info['version']))\n                        else:\n                            if force_deps:\n                                roles_left.append(dep_role)\n                            else:\n                                display.display('- dependency %s is already installed, skipping.' % dep_role.name)\n\n        if not installed:\n            display.warning(\"- %s was NOT installed successfully.\" % role.name)\n            self.exit_without_ignore()\n\n    return 0",
                "def execute_remove(self):\n    \"\"\"\n    removes the list of roles passed as arguments from the local system.\n    \"\"\"\n\n    if not context.CLIARGS['args']:\n        raise AnsibleOptionsError('- you must specify at least one role to remove.')\n\n    for role_name in context.CLIARGS['args']:\n        role = GalaxyRole(self.galaxy, role_name)\n        try:\n            if role.remove():\n                display.display('- successfully removed %s' % role_name)\n            else:\n                display.display('- %s is not installed, skipping.' % role_name)\n        except Exception as e:\n            raise AnsibleError(\"Failed to remove role %s: %s\" % (role_name, to_native(e)))\n\n    return 0",
                "def execute_list(self):\n    \"\"\"\n    lists the roles installed on the local system or matches a single role passed as an argument.\n    \"\"\"\n\n    def _display_role(gr):\n        install_info = gr.install_info\n        version = None\n        if install_info:\n            version = install_info.get(\"version\", None)\n        if not version:\n            version = \"(unknown version)\"\n        display.display(\"- %s, %s\" % (gr.name, version))\n\n    if context.CLIARGS['role']:\n        # show the requested role, if it exists\n        name = context.CLIARGS['role']\n        gr = GalaxyRole(self.galaxy, name)\n        if gr.metadata:\n            display.display('# %s' % os.path.dirname(gr.path))\n            _display_role(gr)\n        else:\n            display.display(\"- the role %s was not found\" % name)\n    else:\n        # show all valid roles in the roles_path directory\n        roles_path = context.CLIARGS['roles_path']\n        path_found = False\n        warnings = []\n        for path in roles_path:\n            role_path = os.path.expanduser(path)\n            if not os.path.exists(role_path):\n                warnings.append(\"- the configured path %s does not exist.\" % role_path)\n                continue\n            elif not os.path.isdir(role_path):\n                warnings.append(\"- the configured path %s, exists, but it is not a directory.\" % role_path)\n                continue\n            display.display('# %s' % role_path)\n            path_files = os.listdir(role_path)\n            path_found = True\n            for path_file in path_files:\n                gr = GalaxyRole(self.galaxy, path_file, path=path)\n                if gr.metadata:\n                    _display_role(gr)\n        for w in warnings:\n            display.warning(w)\n        if not path_found:\n            raise AnsibleOptionsError(\"- None of the provided paths was usable. Please specify a valid path with --roles-path\")\n    return 0",
                "def execute_publish(self):\n    \"\"\"\n    Publish a collection into Ansible Galaxy. Requires the path to the collection tarball to publish.\n    \"\"\"\n    api_key = context.CLIARGS['api_key'] or GalaxyToken().get()\n    api_server = context.CLIARGS['api_server']\n    collection_path = GalaxyCLI._resolve_path(context.CLIARGS['args'])\n    ignore_certs = context.CLIARGS['ignore_certs']\n    wait = context.CLIARGS['wait']\n\n    publish_collection(collection_path, api_server, api_key, ignore_certs, wait)",
                "def execute_search(self):\n    ''' searches for roles on the Ansible Galaxy server'''\n    page_size = 1000\n    search = None\n\n    if context.CLIARGS['args']:\n        search = '+'.join(context.CLIARGS['args'])\n\n    if not search and not context.CLIARGS['platforms'] and not context.CLIARGS['galaxy_tags'] and not context.CLIARGS['author']:\n        raise AnsibleError(\"Invalid query. At least one search term, platform, galaxy tag or author must be provided.\")\n\n    response = self.api.search_roles(search, platforms=context.CLIARGS['platforms'],\n                                     tags=context.CLIARGS['galaxy_tags'], author=context.CLIARGS['author'], page_size=page_size)\n\n    if response['count'] == 0:\n        display.display(\"No roles match your search.\", color=C.COLOR_ERROR)\n        return True\n\n    data = [u'']\n\n    if response['count'] > page_size:\n        data.append(u\"Found %d roles matching your search. Showing first %s.\" % (response['count'], page_size))\n    else:\n        data.append(u\"Found %d roles matching your search:\" % response['count'])\n\n    max_len = []\n    for role in response['results']:\n        max_len.append(len(role['username'] + '.' + role['name']))\n    name_len = max(max_len)\n    format_str = u\" %%-%ds %%s\" % name_len\n    data.append(u'')\n    data.append(format_str % (u\"Name\", u\"Description\"))\n    data.append(format_str % (u\"----\", u\"-----------\"))\n    for role in response['results']:\n        data.append(format_str % (u'%s.%s' % (role['username'], role['name']), role['description']))\n\n    data = u'\\n'.join(data)\n    self.pager(data)\n\n    return True",
                "def execute_login(self):\n    \"\"\"\n    verify user's identify via Github and retrieve an auth token from Ansible Galaxy.\n    \"\"\"\n    # Authenticate with github and retrieve a token\n    if context.CLIARGS['token'] is None:\n        if C.GALAXY_TOKEN:\n            github_token = C.GALAXY_TOKEN\n        else:\n            login = GalaxyLogin(self.galaxy)\n            github_token = login.create_github_token()\n    else:\n        github_token = context.CLIARGS['token']\n\n    galaxy_response = self.api.authenticate(github_token)\n\n    if context.CLIARGS['token'] is None and C.GALAXY_TOKEN is None:\n        # Remove the token we created\n        login.remove_github_token()\n\n    # Store the Galaxy token\n    token = GalaxyToken()\n    token.set(galaxy_response['token'])\n\n    display.display(\"Successfully logged into Galaxy as %s\" % galaxy_response['username'])\n    return 0",
                "def execute_import(self):\n    \"\"\" used to import a role into Ansible Galaxy \"\"\"\n\n    colors = {\n        'INFO': 'normal',\n        'WARNING': C.COLOR_WARN,\n        'ERROR': C.COLOR_ERROR,\n        'SUCCESS': C.COLOR_OK,\n        'FAILED': C.COLOR_ERROR,\n    }\n\n    github_user = to_text(context.CLIARGS['github_user'], errors='surrogate_or_strict')\n    github_repo = to_text(context.CLIARGS['github_repo'], errors='surrogate_or_strict')\n\n    if context.CLIARGS['check_status']:\n        task = self.api.get_import_task(github_user=github_user, github_repo=github_repo)\n    else:\n        # Submit an import request\n        task = self.api.create_import_task(github_user, github_repo,\n                                           reference=context.CLIARGS['reference'],\n                                           role_name=context.CLIARGS['role_name'])\n\n        if len(task) > 1:\n            # found multiple roles associated with github_user/github_repo\n            display.display(\"WARNING: More than one Galaxy role associated with Github repo %s/%s.\" % (github_user, github_repo),\n                            color='yellow')\n            display.display(\"The following Galaxy roles are being updated:\" + u'\\n', color=C.COLOR_CHANGED)\n            for t in task:\n                display.display('%s.%s' % (t['summary_fields']['role']['namespace'], t['summary_fields']['role']['name']), color=C.COLOR_CHANGED)\n            display.display(u'\\nTo properly namespace this role, remove each of the above and re-import %s/%s from scratch' % (github_user, github_repo),\n                            color=C.COLOR_CHANGED)\n            return 0\n        # found a single role as expected\n        display.display(\"Successfully submitted import request %d\" % task[0]['id'])\n        if not context.CLIARGS['wait']:\n            display.display(\"Role name: %s\" % task[0]['summary_fields']['role']['name'])\n            display.display(\"Repo: %s/%s\" % (task[0]['github_user'], task[0]['github_repo']))\n\n    if context.CLIARGS['check_status'] or context.CLIARGS['wait']:\n        # Get the status of the import\n        msg_list = []\n        finished = False\n        while not finished:\n            task = self.api.get_import_task(task_id=task[0]['id'])\n            for msg in task[0]['summary_fields']['task_messages']:\n                if msg['id'] not in msg_list:\n                    display.display(msg['message_text'], color=colors[msg['message_type']])\n                    msg_list.append(msg['id'])\n            if task[0]['state'] in ['SUCCESS', 'FAILED']:\n                finished = True\n            else:\n                time.sleep(10)\n\n    return 0",
                "def execute_setup(self):\n    \"\"\" Setup an integration from Github or Travis for Ansible Galaxy roles\"\"\"\n\n    if context.CLIARGS['setup_list']:\n        # List existing integration secrets\n        secrets = self.api.list_secrets()\n        if len(secrets) == 0:\n            # None found\n            display.display(\"No integrations found.\")\n            return 0\n        display.display(u'\\n' + \"ID         Source     Repo\", color=C.COLOR_OK)\n        display.display(\"---------- ---------- ----------\", color=C.COLOR_OK)\n        for secret in secrets:\n            display.display(\"%-10s %-10s %s/%s\" % (secret['id'], secret['source'], secret['github_user'],\n                                                   secret['github_repo']), color=C.COLOR_OK)\n        return 0\n\n    if context.CLIARGS['remove_id']:\n        # Remove a secret\n        self.api.remove_secret(context.CLIARGS['remove_id'])\n        display.display(\"Secret removed. Integrations using this secret will not longer work.\", color=C.COLOR_OK)\n        return 0\n\n    source = context.CLIARGS['source']\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    secret = context.CLIARGS['secret']\n\n    resp = self.api.add_secret(source, github_user, github_repo, secret)\n    display.display(\"Added integration for %s %s/%s\" % (resp['source'], resp['github_user'], resp['github_repo']))\n\n    return 0",
                "def execute_delete(self):\n    \"\"\" Delete a role from Ansible Galaxy. \"\"\"\n\n    github_user = context.CLIARGS['github_user']\n    github_repo = context.CLIARGS['github_repo']\n    resp = self.api.delete_role(github_user, github_repo)\n\n    if len(resp['deleted_roles']) > 1:\n        display.display(\"Deleted the following roles:\")\n        display.display(\"ID     User            Name\")\n        display.display(\"------ --------------- ----------\")\n        for role in resp['deleted_roles']:\n            display.display(\"%-8s %-15s %s\" % (role.id, role.namespace, role.name))\n\n    display.display(resp['status'])\n\n    return True",
                "def comment_ify(v):\n    if isinstance(v, list):\n        v = \". \".join([l.rstrip('.') for l in v])\n\n    v = link_pattern.sub(r\"\\1 <\\2>\", v)\n    v = const_pattern.sub(r\"'\\1'\", v)\n\n    return textwrap.fill(v, width=117, initial_indent=\"# \", subsequent_indent=\"# \", break_on_hyphens=False)",
                "def to_yaml(v):\n    return yaml.safe_dump(v, default_flow_style=False).rstrip()",
                "def _display_role(gr):\n    install_info = gr.install_info\n    version = None\n    if install_info:\n        version = install_info.get(\"version\", None)\n    if not version:\n        version = \"(unknown version)\"\n    display.display(\"- %s, %s\" % (gr.name, version))"
            ],
            "inscope_function_signatures": [
                "__init__(self, args)",
                "init_parser(self)",
                "add_init_parser(self, parser, parents)",
                "post_process_args(self, options)",
                "run(self)",
                "exit_without_ignore(rc=1)",
                "_display_role_info(role_info)",
                "_resolve_path(path)",
                "_validate_collection_name(name)",
                "_get_skeleton_galaxy_yml(template_path, inject_data)",
                "execute_role(self)",
                "execute_collection(self)",
                "execute_build(self)",
                "execute_init(self)",
                "execute_info(self)",
                "execute_install(self)",
                "execute_remove(self)",
                "execute_list(self)",
                "execute_publish(self)",
                "execute_search(self)",
                "execute_login(self)",
                "execute_import(self)",
                "execute_setup(self)",
                "execute_delete(self)",
                "comment_ify(v)",
                "to_yaml(v)",
                "_display_role(gr)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "type": [
                    6
                ],
                "display": [
                    768,
                    770,
                    259,
                    902,
                    655,
                    528,
                    788,
                    795,
                    798,
                    929,
                    931,
                    36,
                    933,
                    934,
                    938,
                    684,
                    812,
                    940,
                    687,
                    941,
                    820,
                    694,
                    951,
                    698,
                    703,
                    709,
                    968,
                    970,
                    971,
                    716,
                    973,
                    720,
                    852,
                    980,
                    730,
                    733,
                    989,
                    737,
                    610,
                    742,
                    1001,
                    1002,
                    1003,
                    748,
                    1005,
                    751,
                    1007
                ],
                "Display": [
                    36
                ],
                "CLI": [
                    39
                ],
                "SKIP_INFO_KEYS": [
                    42
                ],
                "len": [
                    864,
                    609,
                    966,
                    1000,
                    46,
                    927
                ],
                "args": [
                    48,
                    52,
                    46
                ],
                "args.insert": [
                    48
                ],
                "self.api": [
                    965,
                    998,
                    552,
                    988,
                    268,
                    848,
                    50,
                    979,
                    948,
                    920,
                    923,
                    892
                ],
                "self": [
                    258,
                    264,
                    138,
                    266,
                    268,
                    658,
                    663,
                    920,
                    793,
                    923,
                    541,
                    158,
                    161,
                    679,
                    552,
                    171,
                    174,
                    816,
                    50,
                    51,
                    52,
                    565,
                    948,
                    183,
                    57,
                    571,
                    197,
                    710,
                    965,
                    202,
                    208,
                    848,
                    723,
                    468,
                    979,
                    214,
                    89,
                    988,
                    222,
                    998,
                    103,
                    874,
                    752,
                    113,
                    241,
                    117,
                    887,
                    892,
                    765
                ],
                "self.galaxy": [
                    679,
                    765,
                    266,
                    268,
                    887,
                    816,
                    658,
                    51,
                    468,
                    723,
                    663,
                    793,
                    541
                ],
                "__init__": [
                    52
                ],
                "super": [
                    264,
                    57,
                    258,
                    52
                ],
                "GalaxyCLI": [
                    288,
                    258,
                    294,
                    390,
                    264,
                    236,
                    399,
                    52,
                    831,
                    598,
                    57,
                    606,
                    511
                ],
                "init_parser": [
                    238,
                    241,
                    243,
                    247,
                    57,
                    251,
                    255
                ],
                "common": [
                    137,
                    151,
                    156,
                    160,
                    170,
                    174,
                    182,
                    62,
                    63,
                    64,
                    66,
                    196,
                    201,
                    205,
                    213,
                    221,
                    94,
                    102,
                    113,
                    116
                ],
                "opt_help.argparse.ArgumentParser": [
                    69,
                    73,
                    78,
                    84,
                    62
                ],
                "opt_help.argparse": [
                    69,
                    73,
                    78,
                    84,
                    62
                ],
                "opt_help": [
                    66,
                    69,
                    73,
                    78,
                    79,
                    80,
                    84,
                    62
                ],
                "common.add_argument": [
                    64,
                    63
                ],
                "C.GALAXY_SERVER": [
                    63
                ],
                "C": [
                    910,
                    911,
                    912,
                    913,
                    931,
                    933,
                    935,
                    63,
                    64,
                    970,
                    971,
                    77,
                    974,
                    80,
                    465,
                    852,
                    980,
                    607,
                    884,
                    885,
                    249,
                    894
                ],
                "C.GALAXY_IGNORE_CERTS": [
                    64
                ],
                "opt_help.add_verbosity_options": [
                    66
                ],
                "user_repo": [
                    160,
                    69,
                    70,
                    71,
                    156
                ],
                "user_repo.add_argument": [
                    70,
                    71
                ],
                "offline": [
                    170,
                    73,
                    74,
                    174
                ],
                "offline.add_argument": [
                    74
                ],
                "default_roles_path": [
                    82,
                    77
                ],
                "get": [
                    829,
                    77
                ],
                "C.config.get_configuration_definition": [
                    77
                ],
                "C.config": [
                    77
                ],
                "roles_path": [
                    801,
                    196,
                    804,
                    201,
                    170,
                    78,
                    79,
                    182,
                    535,
                    540,
                    221
                ],
                "roles_path.add_argument": [
                    79
                ],
                "opt_help.unfrack_path": [
                    79
                ],
                "C.DEFAULT_ROLES_PATH": [
                    80
                ],
                "opt_help.PrependListAction": [
                    80
                ],
                "force": [
                    389,
                    102,
                    582,
                    457,
                    174,
                    622,
                    400,
                    113,
                    116,
                    84,
                    85,
                    182,
                    692,
                    693,
                    410,
                    635,
                    702
                ],
                "force.add_argument": [
                    85
                ],
                "type_parser": [
                    89,
                    90,
                    93,
                    150
                ],
                "self.parser.add_subparsers": [
                    89
                ],
                "self.parser": [
                    89
                ],
                "type_parser.required": [
                    90
                ],
                "collection": [
                    97,
                    93
                ],
                "type_parser.add_parser": [
                    93,
                    150
                ],
                "collection_parser": [
                    97,
                    98,
                    100,
                    135,
                    113,
                    115
                ],
                "collection.add_subparsers": [
                    97
                ],
                "collection_parser.required": [
                    98
                ],
                "build_parser": [
                    104,
                    100,
                    109,
                    103
                ],
                "collection_parser.add_parser": [
                    115,
                    100,
                    135
                ],
                "build_parser.set_defaults": [
                    103
                ],
                "self.execute_build": [
                    103
                ],
                "build_parser.add_argument": [
                    104,
                    109
                ],
                "self.add_init_parser": [
                    113,
                    174
                ],
                "cinstall_parser": [
                    129,
                    115,
                    117,
                    118,
                    121,
                    123,
                    126
                ],
                "cinstall_parser.set_defaults": [
                    117
                ],
                "self.execute_install": [
                    117,
                    183
                ],
                "cinstall_parser.add_argument": [
                    121,
                    126,
                    123,
                    118
                ],
                "cinstall_exclusive": [
                    129,
                    130,
                    132
                ],
                "cinstall_parser.add_mutually_exclusive_group": [
                    129
                ],
                "cinstall_exclusive.add_argument": [
                    130,
                    132
                ],
                "publish_parser": [
                    135,
                    138,
                    139,
                    141,
                    145
                ],
                "publish_parser.set_defaults": [
                    138
                ],
                "self.execute_publish": [
                    138
                ],
                "publish_parser.add_argument": [
                    145,
                    139,
                    141
                ],
                "role": [
                    652,
                    653,
                    654,
                    655,
                    656,
                    658,
                    660,
                    150,
                    153,
                    538,
                    541,
                    678,
                    679,
                    552,
                    681,
                    683,
                    684,
                    687,
                    561,
                    691,
                    692,
                    695,
                    696,
                    569,
                    699,
                    703,
                    707,
                    709,
                    715,
                    716,
                    718,
                    863,
                    864,
                    870,
                    743,
                    871,
                    1004,
                    1005,
                    751,
                    765,
                    767
                ],
                "role_parser": [
                    160,
                    196,
                    200,
                    169,
                    205,
                    174,
                    220,
                    212,
                    181,
                    153,
                    154,
                    156
                ],
                "role.add_subparsers": [
                    153
                ],
                "role_parser.required": [
                    154
                ],
                "delete_parser": [
                    156,
                    158
                ],
                "role_parser.add_parser": [
                    160,
                    196,
                    200,
                    169,
                    205,
                    220,
                    212,
                    181,
                    156
                ],
                "delete_parser.set_defaults": [
                    158
                ],
                "self.execute_delete": [
                    158
                ],
                "import_parser": [
                    160,
                    161,
                    162,
                    163,
                    165,
                    166
                ],
                "import_parser.set_defaults": [
                    161
                ],
                "self.execute_import": [
                    161
                ],
                "import_parser.add_argument": [
                    162,
                    163,
                    165,
                    166
                ],
                "info_parser": [
                    169,
                    171,
                    172
                ],
                "info_parser.set_defaults": [
                    171
                ],
                "self.execute_info": [
                    171
                ],
                "info_parser.add_argument": [
                    172
                ],
                "rinit_parser": [
                    174,
                    175
                ],
                "rinit_parser.add_argument": [
                    175
                ],
                "install_parser": [
                    181,
                    183,
                    184,
                    186,
                    187,
                    189,
                    190
                ],
                "install_parser.set_defaults": [
                    183
                ],
                "install_parser.add_argument": [
                    184,
                    186,
                    187,
                    189
                ],
                "install_exclusive": [
                    193,
                    190,
                    191
                ],
                "install_parser.add_mutually_exclusive_group": [
                    190
                ],
                "install_exclusive.add_argument": [
                    193,
                    191
                ],
                "remove_parser": [
                    196,
                    197,
                    198
                ],
                "remove_parser.set_defaults": [
                    197
                ],
                "self.execute_remove": [
                    197
                ],
                "remove_parser.add_argument": [
                    198
                ],
                "list_parser": [
                    200,
                    202,
                    203
                ],
                "list_parser.set_defaults": [
                    202
                ],
                "self.execute_list": [
                    202
                ],
                "list_parser.add_argument": [
                    203
                ],
                "login_parser": [
                    208,
                    209,
                    205
                ],
                "login_parser.set_defaults": [
                    208
                ],
                "self.execute_login": [
                    208
                ],
                "login_parser.add_argument": [
                    209
                ],
                "search_parser": [
                    212,
                    214,
                    215,
                    216,
                    217,
                    218
                ],
                "search_parser.set_defaults": [
                    214
                ],
                "self.execute_search": [
                    214
                ],
                "search_parser.add_argument": [
                    216,
                    217,
                    218,
                    215
                ],
                "setup_parser": [
                    225,
                    226,
                    227,
                    228,
                    229,
                    220,
                    222,
                    223
                ],
                "setup_parser.set_defaults": [
                    222
                ],
                "self.execute_setup": [
                    222
                ],
                "setup_parser.add_argument": [
                    225,
                    226,
                    227,
                    228,
                    229,
                    223
                ],
                "galaxy_type": [
                    419,
                    408,
                    232,
                    476,
                    489,
                    235,
                    239,
                    434,
                    411,
                    246,
                    247,
                    248,
                    502,
                    250,
                    251,
                    252,
                    413
                ],
                "parser.dest": [
                    232
                ],
                "parser": [
                    232,
                    238
                ],
                "obj_name_kwargs": [
                    234,
                    236,
                    253
                ],
                "GalaxyCLI._validate_collection_name": [
                    236
                ],
                "parser.add_parser": [
                    238
                ],
                "format": [
                    239,
                    308,
                    411,
                    246,
                    247,
                    248,
                    475,
                    250,
                    251,
                    252,
                    413
                ],
                "parents": [
                    240
                ],
                "init_parser.set_defaults": [
                    241
                ],
                "self.execute_init": [
                    241
                ],
                "init_parser.add_argument": [
                    243,
                    251,
                    247
                ],
                "C.GALAXY_ROLE_SKELETON": [
                    249
                ],
                "galaxy_type.capitalize": [
                    252
                ],
                "options": [
                    258,
                    259,
                    260
                ],
                "post_process_args": [
                    258
                ],
                "display.verbosity": [
                    259
                ],
                "options.verbosity": [
                    259
                ],
                "run": [
                    264
                ],
                "Galaxy": [
                    266
                ],
                "GalaxyAPI": [
                    268
                ],
                "context.CLIARGS": [
                    389,
                    390,
                    917,
                    269,
                    398,
                    916,
                    277,
                    790,
                    535,
                    408,
                    409,
                    538,
                    410,
                    411,
                    413,
                    792,
                    919,
                    924,
                    801,
                    925,
                    677,
                    551,
                    425,
                    683,
                    939,
                    943,
                    829,
                    830,
                    831,
                    832,
                    833,
                    963,
                    580,
                    581,
                    582,
                    583,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    842,
                    843,
                    845,
                    848,
                    849,
                    977,
                    979,
                    983,
                    984,
                    985,
                    986,
                    996,
                    997,
                    626,
                    883,
                    628,
                    761,
                    632,
                    633,
                    890,
                    635,
                    764,
                    894
                ],
                "context": [
                    389,
                    390,
                    917,
                    269,
                    398,
                    916,
                    277,
                    790,
                    535,
                    408,
                    409,
                    538,
                    410,
                    411,
                    413,
                    792,
                    919,
                    924,
                    801,
                    925,
                    677,
                    551,
                    425,
                    683,
                    939,
                    943,
                    829,
                    830,
                    831,
                    832,
                    833,
                    963,
                    580,
                    581,
                    582,
                    583,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    842,
                    843,
                    845,
                    848,
                    849,
                    977,
                    979,
                    983,
                    984,
                    985,
                    986,
                    996,
                    997,
                    626,
                    883,
                    628,
                    761,
                    632,
                    633,
                    890,
                    635,
                    764,
                    894
                ],
                "AnsibleError": [
                    673,
                    708,
                    645,
                    772,
                    456,
                    458,
                    650,
                    396,
                    846,
                    593,
                    657,
                    595,
                    278,
                    311,
                    475,
                    668,
                    670
                ],
                "staticmethod": [
                    302,
                    271,
                    306,
                    280,
                    313
                ],
                "text": [
                    292,
                    296,
                    298,
                    300,
                    283,
                    284
                ],
                "to_text": [
                    612,
                    709,
                    743,
                    916,
                    917,
                    730,
                    283,
                    316
                ],
                "role_info": [
                    291,
                    548,
                    293,
                    296,
                    298,
                    555,
                    558,
                    563,
                    565,
                    283,
                    284,
                    540,
                    286
                ],
                "text.append": [
                    296,
                    298,
                    284,
                    292
                ],
                "role_info.get": [
                    284
                ],
                "k": [
                    288,
                    291,
                    292,
                    293,
                    296,
                    298,
                    286
                ],
                "sorted": [
                    293,
                    286
                ],
                "role_info.keys": [
                    286
                ],
                "GalaxyCLI.SKIP_INFO_KEYS": [
                    288,
                    294
                ],
                "isinstance": [
                    291,
                    343
                ],
                "dict": [
                    291,
                    420,
                    437,
                    415
                ],
                "key": [
                    296,
                    293,
                    294
                ],
                "keys": [
                    293
                ],
                "join": [
                    612,
                    873,
                    843,
                    300,
                    344
                ],
                "os.path.abspath": [
                    304
                ],
                "os.path": [
                    512,
                    516,
                    517,
                    520,
                    393,
                    521,
                    395,
                    524,
                    525,
                    795,
                    805,
                    806,
                    809,
                    304,
                    433,
                    450,
                    454,
                    455,
                    471,
                    474,
                    482,
                    486,
                    614,
                    615,
                    618,
                    498,
                    500,
                    511
                ],
                "os": [
                    512,
                    516,
                    517,
                    520,
                    393,
                    394,
                    395,
                    521,
                    524,
                    525,
                    526,
                    795,
                    805,
                    806,
                    809,
                    813,
                    304,
                    433,
                    450,
                    454,
                    455,
                    471,
                    474,
                    482,
                    483,
                    485,
                    486,
                    487,
                    614,
                    615,
                    618,
                    619,
                    498,
                    500,
                    511
                ],
                "os.path.expanduser": [
                    304,
                    805,
                    471
                ],
                "os.path.expandvars": [
                    304
                ],
                "path": [
                    304,
                    816,
                    804,
                    805
                ],
                "is_collection_ref": [
                    308
                ],
                "name": [
                    308,
                    309,
                    792,
                    793,
                    603,
                    604,
                    798
                ],
                "open": [
                    640,
                    513,
                    315,
                    660
                ],
                "to_bytes": [
                    512,
                    514,
                    452,
                    391,
                    617,
                    524,
                    315
                ],
                "template_path": [
                    315
                ],
                "template_obj": [
                    315,
                    316
                ],
                "meta_template": [
                    316,
                    358
                ],
                "template_obj.read": [
                    316
                ],
                "galaxy_meta": [
                    322,
                    318
                ],
                "get_collections_galaxy_meta_info": [
                    318
                ],
                "required_config": [
                    320,
                    323,
                    359
                ],
                "optional_config": [
                    321,
                    323,
                    359
                ],
                "meta_entry": [
                    322,
                    323,
                    325,
                    327,
                    336,
                    337
                ],
                "config_list": [
                    337,
                    323
                ],
                "meta_entry.get": [
                    323,
                    327
                ],
                "value": [
                    325,
                    326,
                    330,
                    332,
                    334,
                    336
                ],
                "inject_data.get": [
                    325
                ],
                "inject_data": [
                    420,
                    325,
                    518,
                    437,
                    508,
                    415
                ],
                "meta_type": [
                    329,
                    331,
                    333,
                    327
                ],
                "config_list.append": [
                    337
                ],
                "link_pattern": [
                    346,
                    339
                ],
                "re.compile": [
                    472,
                    339,
                    340
                ],
                "re": [
                    472,
                    339,
                    340
                ],
                "const_pattern": [
                    347,
                    340
                ],
                "v": [
                    352,
                    343,
                    344,
                    346,
                    347,
                    349
                ],
                "list": [
                    343
                ],
                "l.rstrip": [
                    344
                ],
                "l": [
                    344
                ],
                "link_pattern.sub": [
                    346
                ],
                "const_pattern.sub": [
                    347
                ],
                "textwrap.fill": [
                    349
                ],
                "textwrap": [
                    349
                ],
                "rstrip": [
                    352
                ],
                "yaml.safe_dump": [
                    352
                ],
                "yaml": [
                    352,
                    643,
                    664
                ],
                "env": [
                    354,
                    355,
                    356,
                    358
                ],
                "Environment": [
                    354,
                    479
                ],
                "BaseLoader": [
                    354
                ],
                "env.filters": [
                    355,
                    356
                ],
                "comment_ify": [
                    355
                ],
                "to_yaml": [
                    356
                ],
                "template": [
                    358,
                    359
                ],
                "env.from_string": [
                    358
                ],
                "meta_value": [
                    361,
                    514,
                    511,
                    359
                ],
                "template.render": [
                    359
                ],
                "output_path": [
                    609,
                    612,
                    390,
                    583,
                    391,
                    614,
                    615,
                    617,
                    396,
                    621,
                    400,
                    606
                ],
                "GalaxyCLI._resolve_path": [
                    390,
                    399,
                    598,
                    606,
                    831
                ],
                "b_output_path": [
                    391,
                    393,
                    394,
                    395,
                    617,
                    618,
                    619
                ],
                "os.path.exists": [
                    482,
                    454,
                    806,
                    393,
                    618,
                    525,
                    474
                ],
                "os.makedirs": [
                    619,
                    394,
                    483,
                    526
                ],
                "os.path.isfile": [
                    395,
                    455
                ],
                "to_native": [
                    673,
                    772,
                    646,
                    456,
                    396,
                    461,
                    476
                ],
                "collection_path": [
                    835,
                    398,
                    399,
                    400,
                    831
                ],
                "build_collection": [
                    400
                ],
                "init_path": [
                    409,
                    450,
                    433
                ],
                "obj_skeleton": [
                    485,
                    486,
                    520,
                    463,
                    468,
                    471,
                    474,
                    411,
                    476,
                    479
                ],
                "obj_name": [
                    424,
                    528,
                    433,
                    435,
                    413
                ],
                "get_versioned_doclink": [
                    417
                ],
                "inject_data.update": [
                    420,
                    437
                ],
                "ansible_version": [
                    430
                ],
                "obj_path": [
                    512,
                    450,
                    452,
                    517,
                    455,
                    456,
                    521,
                    524,
                    461,
                    433
                ],
                "os.path.join": [
                    512,
                    450,
                    516,
                    517,
                    615,
                    520,
                    521,
                    524,
                    433,
                    500,
                    511
                ],
                "namespace": [
                    450,
                    435,
                    438
                ],
                "collection_name": [
                    450,
                    435,
                    439
                ],
                "obj_name.split": [
                    435
                ],
                "b_obj_path": [
                    482,
                    483,
                    452,
                    454
                ],
                "own_skeleton": [
                    464,
                    467,
                    502
                ],
                "skeleton_ignore_expressions": [
                    472,
                    465,
                    469
                ],
                "C.GALAXY_ROLE_SKELETON_IGNORE": [
                    465
                ],
                "self.galaxy.default_role_skeleton_path": [
                    468
                ],
                "skeleton_ignore_re": [
                    472,
                    500,
                    495
                ],
                "x": [
                    472
                ],
                "template_env": [
                    518,
                    479
                ],
                "FileSystemLoader": [
                    479
                ],
                "root": [
                    485,
                    486,
                    520,
                    521,
                    511
                ],
                "dirs": [
                    523,
                    485,
                    495
                ],
                "files": [
                    497,
                    485
                ],
                "os.walk": [
                    485
                ],
                "rel_root": [
                    512,
                    516,
                    517,
                    486,
                    487,
                    524,
                    500,
                    502,
                    511
                ],
                "os.path.relpath": [
                    520,
                    486
                ],
                "rel_dirs": [
                    488,
                    491,
                    487
                ],
                "rel_root.split": [
                    487
                ],
                "os.sep": [
                    487
                ],
                "rel_root_dir": [
                    488,
                    491,
                    493
                ],
                "in_templates_dir": [
                    515,
                    491,
                    493
                ],
                "d": [
                    523,
                    524,
                    495
                ],
                "any": [
                    500,
                    495
                ],
                "r.match": [
                    500,
                    495
                ],
                "r": [
                    663,
                    500,
                    495
                ],
                "f": [
                    640,
                    643,
                    516,
                    520,
                    521,
                    671,
                    497,
                    498,
                    500,
                    502,
                    511
                ],
                "filename": [
                    512,
                    498,
                    517
                ],
                "ext": [
                    498,
                    515
                ],
                "os.path.splitext": [
                    498
                ],
                "template_data": [
                    508,
                    509,
                    511
                ],
                "inject_data.copy": [
                    508
                ],
                "template_data.pop": [
                    509
                ],
                "GalaxyCLI._get_skeleton_galaxy_yml": [
                    511
                ],
                "b_dest_file": [
                    512,
                    513
                ],
                "galaxy_obj": [
                    513,
                    514
                ],
                "galaxy_obj.write": [
                    514
                ],
                "src_template": [
                    516,
                    518
                ],
                "dest_file": [
                    517,
                    518
                ],
                "dump": [
                    518
                ],
                "stream": [
                    518
                ],
                "template_env.get_template": [
                    518
                ],
                "f_rel_path": [
                    520,
                    521
                ],
                "shutil.copyfile": [
                    521
                ],
                "shutil": [
                    521
                ],
                "b_dir_path": [
                    524,
                    525,
                    526
                ],
                "display.display": [
                    768,
                    770,
                    902,
                    528,
                    788,
                    795,
                    798,
                    929,
                    931,
                    933,
                    934,
                    938,
                    812,
                    940,
                    941,
                    694,
                    951,
                    703,
                    968,
                    970,
                    971,
                    973,
                    852,
                    980,
                    730,
                    733,
                    989,
                    737,
                    1001,
                    1002,
                    1003,
                    748,
                    1005,
                    1007
                ],
                "data": [
                    867,
                    868,
                    869,
                    871,
                    873,
                    874,
                    569,
                    565,
                    855,
                    568,
                    537,
                    858,
                    571,
                    860
                ],
                "gr": [
                    557,
                    782,
                    558,
                    816,
                    817,
                    818,
                    788,
                    793,
                    794,
                    795,
                    796,
                    541,
                    543
                ],
                "GalaxyRole": [
                    679,
                    765,
                    816,
                    658,
                    723,
                    663,
                    793,
                    541
                ],
                "install_info": [
                    544,
                    545,
                    546,
                    547,
                    548,
                    782,
                    784,
                    785,
                    543
                ],
                "gr.install_info": [
                    782,
                    543
                ],
                "role_info.update": [
                    563,
                    555,
                    548,
                    558
                ],
                "remote_data": [
                    552,
                    554,
                    555,
                    550
                ],
                "self.api.lookup_role_by_name": [
                    552
                ],
                "gr.metadata": [
                    817,
                    794,
                    557,
                    558
                ],
                "req": [
                    560,
                    561
                ],
                "RoleRequirement": [
                    678,
                    654,
                    560,
                    721,
                    664
                ],
                "role_spec": [
                    561,
                    562,
                    563
                ],
                "req.role_yaml_parse": [
                    561
                ],
                "self._display_role_info": [
                    565
                ],
                "self.pager": [
                    874,
                    571
                ],
                "collections": [
                    592,
                    594,
                    602,
                    581
                ],
                "servers": [
                    585,
                    621
                ],
                "ignore_certs": [
                    832,
                    586,
                    835,
                    621
                ],
                "ignore_errors": [
                    587,
                    621
                ],
                "requirements_file": [
                    588,
                    592,
                    594,
                    597,
                    598,
                    599
                ],
                "no_deps": [
                    632,
                    714,
                    589,
                    622
                ],
                "force_deps": [
                    736,
                    745,
                    622,
                    590,
                    633,
                    635
                ],
                "collection_requirements": [
                    601,
                    604,
                    621,
                    599
                ],
                "parse_collections_requirements_file": [
                    599
                ],
                "collection_input": [
                    602,
                    603
                ],
                "dummy": [
                    603
                ],
                "requirement": [
                    603,
                    604
                ],
                "collection_input.partition": [
                    603
                ],
                "collection_requirements.append": [
                    604
                ],
                "collections_path": [
                    609,
                    612,
                    607
                ],
                "C.COLLECTIONS_PATHS": [
                    607
                ],
                "p": [
                    609
                ],
                "p.startswith": [
                    609
                ],
                "display.warning": [
                    610,
                    709,
                    742,
                    716,
                    751,
                    820,
                    698
                ],
                "os.path.split": [
                    614
                ],
                "install_collections": [
                    621
                ],
                "role_file": [
                    640,
                    641,
                    673,
                    646,
                    650,
                    683,
                    626,
                    628,
                    668,
                    638
                ],
                "AnsibleOptionsError": [
                    822,
                    762,
                    630
                ],
                "roles_left": [
                    740,
                    679,
                    681,
                    746,
                    658,
                    662,
                    729,
                    731,
                    637
                ],
                "role_file.endswith": [
                    641
                ],
                "required_roles": [
                    649,
                    643,
                    652
                ],
                "yaml.safe_load": [
                    664,
                    643
                ],
                "f.read": [
                    643
                ],
                "Exception": [
                    666,
                    771,
                    644
                ],
                "e": [
                    673,
                    772,
                    709,
                    646,
                    668
                ],
                "RoleRequirement.role_yaml_parse": [
                    664,
                    678,
                    654
                ],
                "display.vvv": [
                    687,
                    684,
                    655
                ],
                "str": [
                    703,
                    655
                ],
                "roles_left.append": [
                    740,
                    679,
                    746,
                    658,
                    731
                ],
                "f_include": [
                    664,
                    660
                ],
                "i": [
                    664
                ],
                "msg": [
                    949,
                    950,
                    951,
                    952,
                    667,
                    668
                ],
                "f.close": [
                    671
                ],
                "IOError": [
                    672
                ],
                "OSError": [
                    672
                ],
                "rname": [
                    677,
                    678
                ],
                "rname.strip": [
                    678
                ],
                "role.name": [
                    709,
                    743,
                    683,
                    684,
                    1005,
                    687,
                    751,
                    695,
                    699
                ],
                "role.install_info": [
                    691,
                    692,
                    699,
                    695
                ],
                "role.version": [
                    699,
                    692,
                    695
                ],
                "role.remove": [
                    696,
                    767
                ],
                "installed": [
                    714,
                    707,
                    750
                ],
                "role.install": [
                    707
                ],
                "self.exit_without_ignore": [
                    752,
                    710
                ],
                "role.metadata": [
                    715,
                    718
                ],
                "role.path": [
                    716
                ],
                "role_dependencies": [
                    718,
                    719
                ],
                "role.metadata.get": [
                    718
                ],
                "dep": [
                    720,
                    722,
                    719
                ],
                "display.debug": [
                    720
                ],
                "dep_req": [
                    721,
                    722
                ],
                "dep_info": [
                    722,
                    723
                ],
                "dep_req.role_yaml_parse": [
                    722
                ],
                "dep_role": [
                    738,
                    739,
                    740,
                    743,
                    746,
                    748,
                    723,
                    724,
                    728,
                    729,
                    730,
                    731,
                    733,
                    735
                ],
                "dep_role.name": [
                    738,
                    748,
                    724,
                    733
                ],
                "dep_role.src": [
                    724
                ],
                "dep_role.scm": [
                    724
                ],
                "dep_role.install_info": [
                    728,
                    738,
                    743,
                    735
                ],
                "dep_role.version": [
                    738,
                    743,
                    735
                ],
                "dep_role.remove": [
                    739
                ],
                "role_name": [
                    768,
                    770,
                    772,
                    764,
                    765
                ],
                "version": [
                    783,
                    785,
                    786,
                    787,
                    788
                ],
                "install_info.get": [
                    785
                ],
                "gr.name": [
                    788
                ],
                "os.path.dirname": [
                    795
                ],
                "gr.path": [
                    795
                ],
                "_display_role": [
                    818,
                    796
                ],
                "path_found": [
                    802,
                    821,
                    814
                ],
                "warnings": [
                    819,
                    810,
                    803,
                    807
                ],
                "role_path": [
                    805,
                    806,
                    807,
                    809,
                    810,
                    812,
                    813
                ],
                "warnings.append": [
                    810,
                    807
                ],
                "os.path.isdir": [
                    809
                ],
                "path_files": [
                    813,
                    815
                ],
                "os.listdir": [
                    813
                ],
                "path_file": [
                    816,
                    815
                ],
                "w": [
                    819,
                    820
                ],
                "api_key": [
                    835,
                    829
                ],
                "GalaxyToken": [
                    899,
                    829
                ],
                "api_server": [
                    835,
                    830
                ],
                "wait": [
                    833,
                    835
                ],
                "publish_collection": [
                    835
                ],
                "page_size": [
                    857,
                    849,
                    858,
                    839
                ],
                "search": [
                    840,
                    848,
                    843,
                    845
                ],
                "response": [
                    870,
                    848,
                    851,
                    857,
                    858,
                    860,
                    863
                ],
                "self.api.search_roles": [
                    848
                ],
                "C.COLOR_ERROR": [
                    913,
                    852,
                    911
                ],
                "data.append": [
                    867,
                    868,
                    869,
                    871,
                    858,
                    860
                ],
                "max_len": [
                    864,
                    865,
                    862
                ],
                "max_len.append": [
                    864
                ],
                "name_len": [
                    865,
                    866
                ],
                "max": [
                    865
                ],
                "format_str": [
                    866,
                    868,
                    869,
                    871
                ],
                "C.GALAXY_TOKEN": [
                    884,
                    885,
                    894
                ],
                "github_token": [
                    888,
                    890,
                    892,
                    885
                ],
                "login": [
                    888,
                    896,
                    887
                ],
                "GalaxyLogin": [
                    887
                ],
                "login.create_github_token": [
                    888
                ],
                "galaxy_response": [
                    900,
                    892,
                    902
                ],
                "self.api.authenticate": [
                    892
                ],
                "login.remove_github_token": [
                    896
                ],
                "token": [
                    899,
                    900
                ],
                "token.set": [
                    900
                ],
                "colors": [
                    908,
                    951
                ],
                "C.COLOR_WARN": [
                    910
                ],
                "C.COLOR_OK": [
                    970,
                    971,
                    974,
                    912,
                    980
                ],
                "github_user": [
                    929,
                    996,
                    934,
                    998,
                    916,
                    984,
                    920,
                    923,
                    988
                ],
                "github_repo": [
                    929,
                    997,
                    934,
                    998,
                    917,
                    920,
                    985,
                    923,
                    988
                ],
                "task": [
                    932,
                    938,
                    940,
                    941,
                    948,
                    949,
                    920,
                    953,
                    923,
                    927
                ],
                "self.api.get_import_task": [
                    920,
                    948
                ],
                "self.api.create_import_task": [
                    923
                ],
                "C.COLOR_CHANGED": [
                    931,
                    933,
                    935
                ],
                "t": [
                    932,
                    933
                ],
                "msg_list": [
                    952,
                    945,
                    950
                ],
                "finished": [
                    954,
                    946,
                    947
                ],
                "msg_list.append": [
                    952
                ],
                "time.sleep": [
                    956
                ],
                "time": [
                    956
                ],
                "secrets": [
                    972,
                    965,
                    966
                ],
                "self.api.list_secrets": [
                    965
                ],
                "secret": [
                    972,
                    973,
                    974,
                    986,
                    988
                ],
                "self.api.remove_secret": [
                    979
                ],
                "source": [
                    988,
                    983
                ],
                "resp": [
                    998,
                    1000,
                    1004,
                    1007,
                    988,
                    989
                ],
                "self.api.add_secret": [
                    988
                ],
                "self.api.delete_role": [
                    998
                ],
                "role.id": [
                    1005
                ],
                "role.namespace": [
                    1005
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    6
                ],
                "display": [
                    768,
                    770,
                    259,
                    902,
                    655,
                    528,
                    788,
                    795,
                    798,
                    929,
                    931,
                    36,
                    933,
                    934,
                    938,
                    684,
                    812,
                    940,
                    687,
                    941,
                    820,
                    694,
                    951,
                    698,
                    703,
                    709,
                    968,
                    970,
                    971,
                    716,
                    973,
                    720,
                    852,
                    980,
                    730,
                    733,
                    989,
                    737,
                    610,
                    742,
                    1001,
                    1002,
                    1003,
                    748,
                    1005,
                    751,
                    1007
                ],
                "Display": [
                    36
                ],
                "CLI": [
                    39
                ],
                "SKIP_INFO_KEYS": [
                    42
                ],
                "args": [
                    48,
                    52,
                    46
                ],
                "args.insert": [
                    48
                ],
                "self.api": [
                    965,
                    998,
                    552,
                    988,
                    268,
                    848,
                    50,
                    979,
                    948,
                    920,
                    923,
                    892
                ],
                "self": [
                    258,
                    264,
                    138,
                    266,
                    268,
                    658,
                    663,
                    920,
                    793,
                    923,
                    541,
                    158,
                    161,
                    679,
                    552,
                    171,
                    174,
                    816,
                    50,
                    51,
                    52,
                    565,
                    948,
                    183,
                    57,
                    571,
                    197,
                    710,
                    965,
                    202,
                    208,
                    848,
                    723,
                    468,
                    979,
                    214,
                    89,
                    988,
                    222,
                    998,
                    103,
                    874,
                    752,
                    113,
                    241,
                    117,
                    887,
                    892,
                    765
                ],
                "self.galaxy": [
                    679,
                    765,
                    266,
                    268,
                    887,
                    816,
                    658,
                    51,
                    468,
                    723,
                    663,
                    793,
                    541
                ],
                "__init__": [
                    52
                ],
                "GalaxyCLI": [
                    288,
                    258,
                    294,
                    390,
                    264,
                    236,
                    399,
                    52,
                    831,
                    598,
                    57,
                    606,
                    511
                ],
                "init_parser": [
                    238,
                    241,
                    243,
                    247,
                    57,
                    251,
                    255
                ],
                "common": [
                    137,
                    151,
                    156,
                    160,
                    170,
                    174,
                    182,
                    62,
                    63,
                    64,
                    66,
                    196,
                    201,
                    205,
                    213,
                    221,
                    94,
                    102,
                    113,
                    116
                ],
                "opt_help.argparse.ArgumentParser": [
                    69,
                    73,
                    78,
                    84,
                    62
                ],
                "opt_help.argparse": [
                    69,
                    73,
                    78,
                    84,
                    62
                ],
                "opt_help": [
                    66,
                    69,
                    73,
                    78,
                    79,
                    80,
                    84,
                    62
                ],
                "common.add_argument": [
                    64,
                    63
                ],
                "C.GALAXY_SERVER": [
                    63
                ],
                "C": [
                    910,
                    911,
                    912,
                    913,
                    931,
                    933,
                    935,
                    63,
                    64,
                    970,
                    971,
                    77,
                    974,
                    80,
                    465,
                    852,
                    980,
                    607,
                    884,
                    885,
                    249,
                    894
                ],
                "C.GALAXY_IGNORE_CERTS": [
                    64
                ],
                "opt_help.add_verbosity_options": [
                    66
                ],
                "user_repo": [
                    160,
                    69,
                    70,
                    71,
                    156
                ],
                "user_repo.add_argument": [
                    70,
                    71
                ],
                "offline": [
                    170,
                    73,
                    74,
                    174
                ],
                "offline.add_argument": [
                    74
                ],
                "default_roles_path": [
                    82,
                    77
                ],
                "get": [
                    829,
                    77
                ],
                "C.config.get_configuration_definition": [
                    77
                ],
                "C.config": [
                    77
                ],
                "roles_path": [
                    801,
                    196,
                    804,
                    201,
                    170,
                    78,
                    79,
                    182,
                    535,
                    540,
                    221
                ],
                "roles_path.add_argument": [
                    79
                ],
                "opt_help.unfrack_path": [
                    79
                ],
                "C.DEFAULT_ROLES_PATH": [
                    80
                ],
                "opt_help.PrependListAction": [
                    80
                ],
                "force": [
                    389,
                    102,
                    582,
                    457,
                    174,
                    622,
                    400,
                    113,
                    116,
                    84,
                    85,
                    182,
                    692,
                    693,
                    410,
                    635,
                    702
                ],
                "force.add_argument": [
                    85
                ],
                "type_parser": [
                    89,
                    90,
                    93,
                    150
                ],
                "self.parser.add_subparsers": [
                    89
                ],
                "self.parser": [
                    89
                ],
                "type_parser.required": [
                    90
                ],
                "collection": [
                    97,
                    93
                ],
                "type_parser.add_parser": [
                    93,
                    150
                ],
                "collection_parser": [
                    97,
                    98,
                    100,
                    135,
                    113,
                    115
                ],
                "collection.add_subparsers": [
                    97
                ],
                "collection_parser.required": [
                    98
                ],
                "build_parser": [
                    104,
                    100,
                    109,
                    103
                ],
                "collection_parser.add_parser": [
                    115,
                    100,
                    135
                ],
                "build_parser.set_defaults": [
                    103
                ],
                "self.execute_build": [
                    103
                ],
                "build_parser.add_argument": [
                    104,
                    109
                ],
                "self.add_init_parser": [
                    113,
                    174
                ],
                "cinstall_parser": [
                    129,
                    115,
                    117,
                    118,
                    121,
                    123,
                    126
                ],
                "cinstall_parser.set_defaults": [
                    117
                ],
                "self.execute_install": [
                    117,
                    183
                ],
                "cinstall_parser.add_argument": [
                    121,
                    126,
                    123,
                    118
                ],
                "cinstall_exclusive": [
                    129,
                    130,
                    132
                ],
                "cinstall_parser.add_mutually_exclusive_group": [
                    129
                ],
                "cinstall_exclusive.add_argument": [
                    130,
                    132
                ],
                "publish_parser": [
                    135,
                    138,
                    139,
                    141,
                    145
                ],
                "publish_parser.set_defaults": [
                    138
                ],
                "self.execute_publish": [
                    138
                ],
                "publish_parser.add_argument": [
                    145,
                    139,
                    141
                ],
                "role": [
                    652,
                    653,
                    654,
                    655,
                    656,
                    658,
                    660,
                    150,
                    153,
                    538,
                    541,
                    678,
                    679,
                    552,
                    681,
                    683,
                    684,
                    687,
                    561,
                    691,
                    692,
                    695,
                    696,
                    569,
                    699,
                    703,
                    707,
                    709,
                    715,
                    716,
                    718,
                    863,
                    864,
                    870,
                    743,
                    871,
                    1004,
                    1005,
                    751,
                    765,
                    767
                ],
                "role_parser": [
                    160,
                    196,
                    200,
                    169,
                    205,
                    174,
                    220,
                    212,
                    181,
                    153,
                    154,
                    156
                ],
                "role.add_subparsers": [
                    153
                ],
                "role_parser.required": [
                    154
                ],
                "delete_parser": [
                    156,
                    158
                ],
                "role_parser.add_parser": [
                    160,
                    196,
                    200,
                    169,
                    205,
                    220,
                    212,
                    181,
                    156
                ],
                "delete_parser.set_defaults": [
                    158
                ],
                "self.execute_delete": [
                    158
                ],
                "import_parser": [
                    160,
                    161,
                    162,
                    163,
                    165,
                    166
                ],
                "import_parser.set_defaults": [
                    161
                ],
                "self.execute_import": [
                    161
                ],
                "import_parser.add_argument": [
                    162,
                    163,
                    165,
                    166
                ],
                "info_parser": [
                    169,
                    171,
                    172
                ],
                "info_parser.set_defaults": [
                    171
                ],
                "self.execute_info": [
                    171
                ],
                "info_parser.add_argument": [
                    172
                ],
                "rinit_parser": [
                    174,
                    175
                ],
                "rinit_parser.add_argument": [
                    175
                ],
                "install_parser": [
                    181,
                    183,
                    184,
                    186,
                    187,
                    189,
                    190
                ],
                "install_parser.set_defaults": [
                    183
                ],
                "install_parser.add_argument": [
                    184,
                    186,
                    187,
                    189
                ],
                "install_exclusive": [
                    193,
                    190,
                    191
                ],
                "install_parser.add_mutually_exclusive_group": [
                    190
                ],
                "install_exclusive.add_argument": [
                    193,
                    191
                ],
                "remove_parser": [
                    196,
                    197,
                    198
                ],
                "remove_parser.set_defaults": [
                    197
                ],
                "self.execute_remove": [
                    197
                ],
                "remove_parser.add_argument": [
                    198
                ],
                "list_parser": [
                    200,
                    202,
                    203
                ],
                "list_parser.set_defaults": [
                    202
                ],
                "self.execute_list": [
                    202
                ],
                "list_parser.add_argument": [
                    203
                ],
                "login_parser": [
                    208,
                    209,
                    205
                ],
                "login_parser.set_defaults": [
                    208
                ],
                "self.execute_login": [
                    208
                ],
                "login_parser.add_argument": [
                    209
                ],
                "search_parser": [
                    212,
                    214,
                    215,
                    216,
                    217,
                    218
                ],
                "search_parser.set_defaults": [
                    214
                ],
                "self.execute_search": [
                    214
                ],
                "search_parser.add_argument": [
                    216,
                    217,
                    218,
                    215
                ],
                "setup_parser": [
                    225,
                    226,
                    227,
                    228,
                    229,
                    220,
                    222,
                    223
                ],
                "setup_parser.set_defaults": [
                    222
                ],
                "self.execute_setup": [
                    222
                ],
                "setup_parser.add_argument": [
                    225,
                    226,
                    227,
                    228,
                    229,
                    223
                ],
                "galaxy_type": [
                    419,
                    408,
                    232,
                    476,
                    489,
                    235,
                    239,
                    434,
                    411,
                    246,
                    247,
                    248,
                    502,
                    250,
                    251,
                    252,
                    413
                ],
                "parser.dest": [
                    232
                ],
                "parser": [
                    232,
                    238
                ],
                "obj_name_kwargs": [
                    234,
                    236,
                    253
                ],
                "GalaxyCLI._validate_collection_name": [
                    236
                ],
                "parser.add_parser": [
                    238
                ],
                "parents": [
                    240
                ],
                "init_parser.set_defaults": [
                    241
                ],
                "self.execute_init": [
                    241
                ],
                "init_parser.add_argument": [
                    243,
                    251,
                    247
                ],
                "C.GALAXY_ROLE_SKELETON": [
                    249
                ],
                "galaxy_type.capitalize": [
                    252
                ],
                "options": [
                    258,
                    259,
                    260
                ],
                "post_process_args": [
                    258
                ],
                "display.verbosity": [
                    259
                ],
                "options.verbosity": [
                    259
                ],
                "run": [
                    264
                ],
                "Galaxy": [
                    266
                ],
                "GalaxyAPI": [
                    268
                ],
                "context.CLIARGS": [
                    389,
                    390,
                    917,
                    269,
                    398,
                    916,
                    277,
                    790,
                    535,
                    408,
                    409,
                    538,
                    410,
                    411,
                    413,
                    792,
                    919,
                    924,
                    801,
                    925,
                    677,
                    551,
                    425,
                    683,
                    939,
                    943,
                    829,
                    830,
                    831,
                    832,
                    833,
                    963,
                    580,
                    581,
                    582,
                    583,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    842,
                    843,
                    845,
                    848,
                    849,
                    977,
                    979,
                    983,
                    984,
                    985,
                    986,
                    996,
                    997,
                    626,
                    883,
                    628,
                    761,
                    632,
                    633,
                    890,
                    635,
                    764,
                    894
                ],
                "context": [
                    389,
                    390,
                    917,
                    269,
                    398,
                    916,
                    277,
                    790,
                    535,
                    408,
                    409,
                    538,
                    410,
                    411,
                    413,
                    792,
                    919,
                    924,
                    801,
                    925,
                    677,
                    551,
                    425,
                    683,
                    939,
                    943,
                    829,
                    830,
                    831,
                    832,
                    833,
                    963,
                    580,
                    581,
                    582,
                    583,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    842,
                    843,
                    845,
                    848,
                    849,
                    977,
                    979,
                    983,
                    984,
                    985,
                    986,
                    996,
                    997,
                    626,
                    883,
                    628,
                    761,
                    632,
                    633,
                    890,
                    635,
                    764,
                    894
                ],
                "AnsibleError": [
                    673,
                    708,
                    645,
                    772,
                    456,
                    458,
                    650,
                    396,
                    846,
                    593,
                    657,
                    595,
                    278,
                    311,
                    475,
                    668,
                    670
                ],
                "text": [
                    292,
                    296,
                    298,
                    300,
                    283,
                    284
                ],
                "to_text": [
                    612,
                    709,
                    743,
                    916,
                    917,
                    730,
                    283,
                    316
                ],
                "role_info": [
                    291,
                    548,
                    293,
                    296,
                    298,
                    555,
                    558,
                    563,
                    565,
                    283,
                    284,
                    540,
                    286
                ],
                "text.append": [
                    296,
                    298,
                    284,
                    292
                ],
                "role_info.get": [
                    284
                ],
                "k": [
                    288,
                    291,
                    292,
                    293,
                    296,
                    298,
                    286
                ],
                "role_info.keys": [
                    286
                ],
                "GalaxyCLI.SKIP_INFO_KEYS": [
                    288,
                    294
                ],
                "key": [
                    296,
                    293,
                    294
                ],
                "keys": [
                    293
                ],
                "join": [
                    612,
                    873,
                    843,
                    300,
                    344
                ],
                "os.path.abspath": [
                    304
                ],
                "os.path": [
                    512,
                    516,
                    517,
                    520,
                    393,
                    521,
                    395,
                    524,
                    525,
                    795,
                    805,
                    806,
                    809,
                    304,
                    433,
                    450,
                    454,
                    455,
                    471,
                    474,
                    482,
                    486,
                    614,
                    615,
                    618,
                    498,
                    500,
                    511
                ],
                "os": [
                    512,
                    516,
                    517,
                    520,
                    393,
                    394,
                    395,
                    521,
                    524,
                    525,
                    526,
                    795,
                    805,
                    806,
                    809,
                    813,
                    304,
                    433,
                    450,
                    454,
                    455,
                    471,
                    474,
                    482,
                    483,
                    485,
                    486,
                    487,
                    614,
                    615,
                    618,
                    619,
                    498,
                    500,
                    511
                ],
                "os.path.expanduser": [
                    304,
                    805,
                    471
                ],
                "os.path.expandvars": [
                    304
                ],
                "path": [
                    304,
                    816,
                    804,
                    805
                ],
                "is_collection_ref": [
                    308
                ],
                "name": [
                    308,
                    309,
                    792,
                    793,
                    603,
                    604,
                    798
                ],
                "to_bytes": [
                    512,
                    514,
                    452,
                    391,
                    617,
                    524,
                    315
                ],
                "template_path": [
                    315
                ],
                "template_obj": [
                    315,
                    316
                ],
                "meta_template": [
                    316,
                    358
                ],
                "template_obj.read": [
                    316
                ],
                "galaxy_meta": [
                    322,
                    318
                ],
                "get_collections_galaxy_meta_info": [
                    318
                ],
                "required_config": [
                    320,
                    323,
                    359
                ],
                "optional_config": [
                    321,
                    323,
                    359
                ],
                "meta_entry": [
                    322,
                    323,
                    325,
                    327,
                    336,
                    337
                ],
                "config_list": [
                    337,
                    323
                ],
                "meta_entry.get": [
                    323,
                    327
                ],
                "value": [
                    325,
                    326,
                    330,
                    332,
                    334,
                    336
                ],
                "inject_data.get": [
                    325
                ],
                "inject_data": [
                    420,
                    325,
                    518,
                    437,
                    508,
                    415
                ],
                "meta_type": [
                    329,
                    331,
                    333,
                    327
                ],
                "config_list.append": [
                    337
                ],
                "link_pattern": [
                    346,
                    339
                ],
                "re.compile": [
                    472,
                    339,
                    340
                ],
                "re": [
                    472,
                    339,
                    340
                ],
                "const_pattern": [
                    347,
                    340
                ],
                "v": [
                    352,
                    343,
                    344,
                    346,
                    347,
                    349
                ],
                "l.rstrip": [
                    344
                ],
                "l": [
                    344
                ],
                "link_pattern.sub": [
                    346
                ],
                "const_pattern.sub": [
                    347
                ],
                "textwrap.fill": [
                    349
                ],
                "textwrap": [
                    349
                ],
                "rstrip": [
                    352
                ],
                "yaml.safe_dump": [
                    352
                ],
                "yaml": [
                    352,
                    643,
                    664
                ],
                "env": [
                    354,
                    355,
                    356,
                    358
                ],
                "Environment": [
                    354,
                    479
                ],
                "BaseLoader": [
                    354
                ],
                "env.filters": [
                    355,
                    356
                ],
                "comment_ify": [
                    355
                ],
                "to_yaml": [
                    356
                ],
                "template": [
                    358,
                    359
                ],
                "env.from_string": [
                    358
                ],
                "meta_value": [
                    361,
                    514,
                    511,
                    359
                ],
                "template.render": [
                    359
                ],
                "output_path": [
                    609,
                    612,
                    390,
                    583,
                    391,
                    614,
                    615,
                    617,
                    396,
                    621,
                    400,
                    606
                ],
                "GalaxyCLI._resolve_path": [
                    390,
                    399,
                    598,
                    606,
                    831
                ],
                "b_output_path": [
                    391,
                    393,
                    394,
                    395,
                    617,
                    618,
                    619
                ],
                "os.path.exists": [
                    482,
                    454,
                    806,
                    393,
                    618,
                    525,
                    474
                ],
                "os.makedirs": [
                    619,
                    394,
                    483,
                    526
                ],
                "os.path.isfile": [
                    395,
                    455
                ],
                "to_native": [
                    673,
                    772,
                    646,
                    456,
                    396,
                    461,
                    476
                ],
                "collection_path": [
                    835,
                    398,
                    399,
                    400,
                    831
                ],
                "build_collection": [
                    400
                ],
                "init_path": [
                    409,
                    450,
                    433
                ],
                "obj_skeleton": [
                    485,
                    486,
                    520,
                    463,
                    468,
                    471,
                    474,
                    411,
                    476,
                    479
                ],
                "obj_name": [
                    424,
                    528,
                    433,
                    435,
                    413
                ],
                "get_versioned_doclink": [
                    417
                ],
                "inject_data.update": [
                    420,
                    437
                ],
                "ansible_version": [
                    430
                ],
                "obj_path": [
                    512,
                    450,
                    452,
                    517,
                    455,
                    456,
                    521,
                    524,
                    461,
                    433
                ],
                "os.path.join": [
                    512,
                    450,
                    516,
                    517,
                    615,
                    520,
                    521,
                    524,
                    433,
                    500,
                    511
                ],
                "namespace": [
                    450,
                    435,
                    438
                ],
                "collection_name": [
                    450,
                    435,
                    439
                ],
                "obj_name.split": [
                    435
                ],
                "b_obj_path": [
                    482,
                    483,
                    452,
                    454
                ],
                "own_skeleton": [
                    464,
                    467,
                    502
                ],
                "skeleton_ignore_expressions": [
                    472,
                    465,
                    469
                ],
                "C.GALAXY_ROLE_SKELETON_IGNORE": [
                    465
                ],
                "self.galaxy.default_role_skeleton_path": [
                    468
                ],
                "skeleton_ignore_re": [
                    472,
                    500,
                    495
                ],
                "x": [
                    472
                ],
                "template_env": [
                    518,
                    479
                ],
                "FileSystemLoader": [
                    479
                ],
                "root": [
                    485,
                    486,
                    520,
                    521,
                    511
                ],
                "dirs": [
                    523,
                    485,
                    495
                ],
                "files": [
                    497,
                    485
                ],
                "os.walk": [
                    485
                ],
                "rel_root": [
                    512,
                    516,
                    517,
                    486,
                    487,
                    524,
                    500,
                    502,
                    511
                ],
                "os.path.relpath": [
                    520,
                    486
                ],
                "rel_dirs": [
                    488,
                    491,
                    487
                ],
                "rel_root.split": [
                    487
                ],
                "os.sep": [
                    487
                ],
                "rel_root_dir": [
                    488,
                    491,
                    493
                ],
                "in_templates_dir": [
                    515,
                    491,
                    493
                ],
                "d": [
                    523,
                    524,
                    495
                ],
                "r.match": [
                    500,
                    495
                ],
                "r": [
                    663,
                    500,
                    495
                ],
                "f": [
                    640,
                    643,
                    516,
                    520,
                    521,
                    671,
                    497,
                    498,
                    500,
                    502,
                    511
                ],
                "filename": [
                    512,
                    498,
                    517
                ],
                "ext": [
                    498,
                    515
                ],
                "os.path.splitext": [
                    498
                ],
                "template_data": [
                    508,
                    509,
                    511
                ],
                "inject_data.copy": [
                    508
                ],
                "template_data.pop": [
                    509
                ],
                "GalaxyCLI._get_skeleton_galaxy_yml": [
                    511
                ],
                "b_dest_file": [
                    512,
                    513
                ],
                "galaxy_obj": [
                    513,
                    514
                ],
                "galaxy_obj.write": [
                    514
                ],
                "src_template": [
                    516,
                    518
                ],
                "dest_file": [
                    517,
                    518
                ],
                "dump": [
                    518
                ],
                "stream": [
                    518
                ],
                "template_env.get_template": [
                    518
                ],
                "f_rel_path": [
                    520,
                    521
                ],
                "shutil.copyfile": [
                    521
                ],
                "shutil": [
                    521
                ],
                "b_dir_path": [
                    524,
                    525,
                    526
                ],
                "display.display": [
                    768,
                    770,
                    902,
                    528,
                    788,
                    795,
                    798,
                    929,
                    931,
                    933,
                    934,
                    938,
                    812,
                    940,
                    941,
                    694,
                    951,
                    703,
                    968,
                    970,
                    971,
                    973,
                    852,
                    980,
                    730,
                    733,
                    989,
                    737,
                    1001,
                    1002,
                    1003,
                    748,
                    1005,
                    1007
                ],
                "data": [
                    867,
                    868,
                    869,
                    871,
                    873,
                    874,
                    569,
                    565,
                    855,
                    568,
                    537,
                    858,
                    571,
                    860
                ],
                "gr": [
                    557,
                    782,
                    558,
                    816,
                    817,
                    818,
                    788,
                    793,
                    794,
                    795,
                    796,
                    541,
                    543
                ],
                "GalaxyRole": [
                    679,
                    765,
                    816,
                    658,
                    723,
                    663,
                    793,
                    541
                ],
                "install_info": [
                    544,
                    545,
                    546,
                    547,
                    548,
                    782,
                    784,
                    785,
                    543
                ],
                "gr.install_info": [
                    782,
                    543
                ],
                "role_info.update": [
                    563,
                    555,
                    548,
                    558
                ],
                "remote_data": [
                    552,
                    554,
                    555,
                    550
                ],
                "self.api.lookup_role_by_name": [
                    552
                ],
                "gr.metadata": [
                    817,
                    794,
                    557,
                    558
                ],
                "req": [
                    560,
                    561
                ],
                "RoleRequirement": [
                    678,
                    654,
                    560,
                    721,
                    664
                ],
                "role_spec": [
                    561,
                    562,
                    563
                ],
                "req.role_yaml_parse": [
                    561
                ],
                "self._display_role_info": [
                    565
                ],
                "self.pager": [
                    874,
                    571
                ],
                "collections": [
                    592,
                    594,
                    602,
                    581
                ],
                "servers": [
                    585,
                    621
                ],
                "ignore_certs": [
                    832,
                    586,
                    835,
                    621
                ],
                "ignore_errors": [
                    587,
                    621
                ],
                "requirements_file": [
                    588,
                    592,
                    594,
                    597,
                    598,
                    599
                ],
                "no_deps": [
                    632,
                    714,
                    589,
                    622
                ],
                "force_deps": [
                    736,
                    745,
                    622,
                    590,
                    633,
                    635
                ],
                "collection_requirements": [
                    601,
                    604,
                    621,
                    599
                ],
                "parse_collections_requirements_file": [
                    599
                ],
                "collection_input": [
                    602,
                    603
                ],
                "dummy": [
                    603
                ],
                "requirement": [
                    603,
                    604
                ],
                "collection_input.partition": [
                    603
                ],
                "collection_requirements.append": [
                    604
                ],
                "collections_path": [
                    609,
                    612,
                    607
                ],
                "C.COLLECTIONS_PATHS": [
                    607
                ],
                "p": [
                    609
                ],
                "p.startswith": [
                    609
                ],
                "display.warning": [
                    610,
                    709,
                    742,
                    716,
                    751,
                    820,
                    698
                ],
                "os.path.split": [
                    614
                ],
                "install_collections": [
                    621
                ],
                "role_file": [
                    640,
                    641,
                    673,
                    646,
                    650,
                    683,
                    626,
                    628,
                    668,
                    638
                ],
                "AnsibleOptionsError": [
                    822,
                    762,
                    630
                ],
                "roles_left": [
                    740,
                    679,
                    681,
                    746,
                    658,
                    662,
                    729,
                    731,
                    637
                ],
                "role_file.endswith": [
                    641
                ],
                "required_roles": [
                    649,
                    643,
                    652
                ],
                "yaml.safe_load": [
                    664,
                    643
                ],
                "f.read": [
                    643
                ],
                "e": [
                    673,
                    772,
                    709,
                    646,
                    668
                ],
                "RoleRequirement.role_yaml_parse": [
                    664,
                    678,
                    654
                ],
                "display.vvv": [
                    687,
                    684,
                    655
                ],
                "roles_left.append": [
                    740,
                    679,
                    746,
                    658,
                    731
                ],
                "f_include": [
                    664,
                    660
                ],
                "i": [
                    664
                ],
                "msg": [
                    949,
                    950,
                    951,
                    952,
                    667,
                    668
                ],
                "f.close": [
                    671
                ],
                "rname": [
                    677,
                    678
                ],
                "rname.strip": [
                    678
                ],
                "role.name": [
                    709,
                    743,
                    683,
                    684,
                    1005,
                    687,
                    751,
                    695,
                    699
                ],
                "role.install_info": [
                    691,
                    692,
                    699,
                    695
                ],
                "role.version": [
                    699,
                    692,
                    695
                ],
                "role.remove": [
                    696,
                    767
                ],
                "installed": [
                    714,
                    707,
                    750
                ],
                "role.install": [
                    707
                ],
                "self.exit_without_ignore": [
                    752,
                    710
                ],
                "role.metadata": [
                    715,
                    718
                ],
                "role.path": [
                    716
                ],
                "role_dependencies": [
                    718,
                    719
                ],
                "role.metadata.get": [
                    718
                ],
                "dep": [
                    720,
                    722,
                    719
                ],
                "display.debug": [
                    720
                ],
                "dep_req": [
                    721,
                    722
                ],
                "dep_info": [
                    722,
                    723
                ],
                "dep_req.role_yaml_parse": [
                    722
                ],
                "dep_role": [
                    738,
                    739,
                    740,
                    743,
                    746,
                    748,
                    723,
                    724,
                    728,
                    729,
                    730,
                    731,
                    733,
                    735
                ],
                "dep_role.name": [
                    738,
                    748,
                    724,
                    733
                ],
                "dep_role.src": [
                    724
                ],
                "dep_role.scm": [
                    724
                ],
                "dep_role.install_info": [
                    728,
                    738,
                    743,
                    735
                ],
                "dep_role.version": [
                    738,
                    743,
                    735
                ],
                "dep_role.remove": [
                    739
                ],
                "role_name": [
                    768,
                    770,
                    772,
                    764,
                    765
                ],
                "version": [
                    783,
                    785,
                    786,
                    787,
                    788
                ],
                "install_info.get": [
                    785
                ],
                "gr.name": [
                    788
                ],
                "os.path.dirname": [
                    795
                ],
                "gr.path": [
                    795
                ],
                "_display_role": [
                    818,
                    796
                ],
                "path_found": [
                    802,
                    821,
                    814
                ],
                "warnings": [
                    819,
                    810,
                    803,
                    807
                ],
                "role_path": [
                    805,
                    806,
                    807,
                    809,
                    810,
                    812,
                    813
                ],
                "warnings.append": [
                    810,
                    807
                ],
                "os.path.isdir": [
                    809
                ],
                "path_files": [
                    813,
                    815
                ],
                "os.listdir": [
                    813
                ],
                "path_file": [
                    816,
                    815
                ],
                "w": [
                    819,
                    820
                ],
                "api_key": [
                    835,
                    829
                ],
                "GalaxyToken": [
                    899,
                    829
                ],
                "api_server": [
                    835,
                    830
                ],
                "wait": [
                    833,
                    835
                ],
                "publish_collection": [
                    835
                ],
                "page_size": [
                    857,
                    849,
                    858,
                    839
                ],
                "search": [
                    840,
                    848,
                    843,
                    845
                ],
                "response": [
                    870,
                    848,
                    851,
                    857,
                    858,
                    860,
                    863
                ],
                "self.api.search_roles": [
                    848
                ],
                "C.COLOR_ERROR": [
                    913,
                    852,
                    911
                ],
                "data.append": [
                    867,
                    868,
                    869,
                    871,
                    858,
                    860
                ],
                "max_len": [
                    864,
                    865,
                    862
                ],
                "max_len.append": [
                    864
                ],
                "name_len": [
                    865,
                    866
                ],
                "format_str": [
                    866,
                    868,
                    869,
                    871
                ],
                "C.GALAXY_TOKEN": [
                    884,
                    885,
                    894
                ],
                "github_token": [
                    888,
                    890,
                    892,
                    885
                ],
                "login": [
                    888,
                    896,
                    887
                ],
                "GalaxyLogin": [
                    887
                ],
                "login.create_github_token": [
                    888
                ],
                "galaxy_response": [
                    900,
                    892,
                    902
                ],
                "self.api.authenticate": [
                    892
                ],
                "login.remove_github_token": [
                    896
                ],
                "token": [
                    899,
                    900
                ],
                "token.set": [
                    900
                ],
                "colors": [
                    908,
                    951
                ],
                "C.COLOR_WARN": [
                    910
                ],
                "C.COLOR_OK": [
                    970,
                    971,
                    974,
                    912,
                    980
                ],
                "github_user": [
                    929,
                    996,
                    934,
                    998,
                    916,
                    984,
                    920,
                    923,
                    988
                ],
                "github_repo": [
                    929,
                    997,
                    934,
                    998,
                    917,
                    920,
                    985,
                    923,
                    988
                ],
                "task": [
                    932,
                    938,
                    940,
                    941,
                    948,
                    949,
                    920,
                    953,
                    923,
                    927
                ],
                "self.api.get_import_task": [
                    920,
                    948
                ],
                "self.api.create_import_task": [
                    923
                ],
                "C.COLOR_CHANGED": [
                    931,
                    933,
                    935
                ],
                "t": [
                    932,
                    933
                ],
                "msg_list": [
                    952,
                    945,
                    950
                ],
                "finished": [
                    954,
                    946,
                    947
                ],
                "msg_list.append": [
                    952
                ],
                "time.sleep": [
                    956
                ],
                "time": [
                    956
                ],
                "secrets": [
                    972,
                    965,
                    966
                ],
                "self.api.list_secrets": [
                    965
                ],
                "secret": [
                    972,
                    973,
                    974,
                    986,
                    988
                ],
                "self.api.remove_secret": [
                    979
                ],
                "source": [
                    988,
                    983
                ],
                "resp": [
                    998,
                    1000,
                    1004,
                    1007,
                    988,
                    989
                ],
                "self.api.add_secret": [
                    988
                ],
                "self.api.delete_role": [
                    998
                ],
                "role.id": [
                    1005
                ],
                "role.namespace": [
                    1005
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_18/test/units/cli/test_galaxy.py",
                "test_function": "test_collection_default",
                "test_function_code": "@pytest.mark.parametrize('collection_skeleton', [\n    ('ansible_test.my_collection', None),\n], indirect=True)\ndef test_collection_default(collection_skeleton):\n    meta_path = os.path.join(collection_skeleton, 'galaxy.yml')\n\n    with open(meta_path, 'r') as galaxy_meta:\n        metadata = yaml.safe_load(galaxy_meta)\n\n    assert metadata['namespace'] == 'ansible_test'\n    assert metadata['name'] == 'my_collection'\n    assert metadata['authors'] == ['your name <example@domain.com>']\n    assert metadata['readme'] == 'README.md'\n    assert metadata['version'] == '1.0.0'\n    assert metadata['description'] == 'your collection description'\n    assert metadata['license'] == ['GPL-2.0-or-later']\n    assert metadata['tags'] == []\n    assert metadata['dependencies'] == {}\n    assert metadata['documentation'] == 'http://docs.example.com'\n    assert metadata['repository'] == 'http://example.com/repository'\n    assert metadata['homepage'] == 'http://example.com'\n    assert metadata['issues'] == 'http://example.com/issue/tracker'\n\n    for d in ['docs', 'plugins', 'roles']:\n        assert os.path.isdir(os.path.join(collection_skeleton, d)), \\\n            \"Expected collection subdirectory {0} doesn't exist\".format(d)",
                "test_error": "AssertionError: assert 'your description' == 'your collection description'\n  - your collection description\n  + your description",
                "full_test_error": "collection_skeleton = '/private/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pytest-of-jerry/pytest-281/test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Collections0/ansible_test/my_collection'\n\n    @pytest.mark.parametrize('collection_skeleton', [\n        ('ansible_test.my_collection', None),\n    ], indirect=True)\n    def test_collection_default(collection_skeleton):\n        meta_path = os.path.join(collection_skeleton, 'galaxy.yml')\n    \n        with open(meta_path, 'r') as galaxy_meta:\n            metadata = yaml.safe_load(galaxy_meta)\n    \n        assert metadata['namespace'] == 'ansible_test'\n        assert metadata['name'] == 'my_collection'\n        assert metadata['authors'] == ['your name <example@domain.com>']\n        assert metadata['readme'] == 'README.md'\n        assert metadata['version'] == '1.0.0'\n>       assert metadata['description'] == 'your collection description'\nE       AssertionError: assert 'your description' == 'your collection description'\nE         - your collection description\nE         + your description\n\ntest/units/cli/test_galaxy.py:497: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('collection_skeleton', [('ansible_test.my_collection', None)], indirect=True)"
                ]
            }
        ]
    }
}