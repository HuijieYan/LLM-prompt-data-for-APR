{
    "ansible:1": {
        "/Volumes/SSD2T/bgp_envs/repos/ansible_1/lib/ansible/galaxy/collection.py": {
            "buggy_functions": [
                {
                    "function_name": "verify_collections",
                    "function_code": "def verify_collections(collections, search_paths, apis, validate_certs, ignore_errors, allow_pre_release=False):\n\n    with _display_progress():\n        with _tempdir() as b_temp_path:\n            for collection in collections:\n                try:\n\n                    local_collection = None\n                    b_collection = to_bytes(collection[0], errors='surrogate_or_strict')\n\n                    if os.path.isfile(b_collection) or urlparse(collection[0]).scheme.lower() in ['http', 'https'] or len(collection[0].split('.')) != 2:\n                        raise AnsibleError(message=\"'%s' is not a valid collection name. The format namespace.name is expected.\" % collection[0])\n\n                    collection_name = collection[0]\n                    namespace, name = collection_name.split('.')\n                    collection_version = collection[1]\n\n                    # Verify local collection exists before downloading it from a galaxy server\n                    for search_path in search_paths:\n                        b_search_path = to_bytes(os.path.join(search_path, namespace, name), errors='surrogate_or_strict')\n                        if os.path.isdir(b_search_path):\n                            local_collection = CollectionRequirement.from_path(b_search_path, False)\n                            break\n                    if local_collection is None:\n                        raise AnsibleError(message='Collection %s is not installed in any of the collection paths.' % collection_name)\n\n                    # Download collection on a galaxy server for comparison\n                    try:\n                        remote_collection = CollectionRequirement.from_name(collection_name, apis, collection_version, False, parent=None,\n                                                                            allow_pre_release=allow_pre_release)\n                    except AnsibleError as e:\n                        if e.message == 'Failed to find collection %s:%s' % (collection[0], collection[1]):\n                            raise AnsibleError('Failed to find remote collection %s:%s on any of the galaxy servers' % (collection[0], collection[1]))\n                        raise\n\n                    download_url = remote_collection.metadata.download_url\n                    headers = {}\n                    remote_collection.api._add_auth_token(headers, download_url, required=False)\n                    b_temp_tar_path = _download_file(download_url, b_temp_path, None, validate_certs, headers=headers)\n\n                    local_collection.verify(remote_collection, search_path, b_temp_tar_path)\n\n                except AnsibleError as err:\n                    if ignore_errors:\n                        display.warning(\"Failed to verify collection %s but skipping due to --ignore-errors being set. \"\n                                        \"Error: %s\" % (collection[0], to_text(err)))\n                    else:\n                        raise\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 650,
                    "end_line": 697,
                    "variables": {
                        "_display_progress": [
                            652
                        ],
                        "_tempdir": [
                            653
                        ],
                        "b_temp_path": [
                            688,
                            653
                        ],
                        "collection": [
                            681,
                            682,
                            695,
                            654,
                            658,
                            660,
                            661,
                            663,
                            665
                        ],
                        "collections": [
                            654
                        ],
                        "local_collection": [
                            657,
                            690,
                            673,
                            671
                        ],
                        "b_collection": [
                            658,
                            660
                        ],
                        "to_bytes": [
                            658,
                            669
                        ],
                        "os.path.isfile": [
                            660
                        ],
                        "os.path": [
                            660,
                            669,
                            670
                        ],
                        "os": [
                            660,
                            669,
                            670
                        ],
                        "scheme.lower": [
                            660
                        ],
                        "scheme": [
                            660
                        ],
                        "urlparse": [
                            660
                        ],
                        "len": [
                            660
                        ],
                        "split": [
                            660
                        ],
                        "AnsibleError": [
                            674,
                            680,
                            682,
                            692,
                            661
                        ],
                        "collection_name": [
                            664,
                            674,
                            678,
                            663
                        ],
                        "namespace": [
                            664,
                            669
                        ],
                        "name": [
                            664,
                            669
                        ],
                        "collection_name.split": [
                            664
                        ],
                        "collection_version": [
                            665,
                            678
                        ],
                        "search_path": [
                            690,
                            668,
                            669
                        ],
                        "search_paths": [
                            668
                        ],
                        "b_search_path": [
                            669,
                            670,
                            671
                        ],
                        "os.path.join": [
                            669
                        ],
                        "os.path.isdir": [
                            670
                        ],
                        "CollectionRequirement.from_path": [
                            671
                        ],
                        "CollectionRequirement": [
                            678,
                            671
                        ],
                        "remote_collection": [
                            690,
                            685,
                            678,
                            687
                        ],
                        "CollectionRequirement.from_name": [
                            678
                        ],
                        "apis": [
                            678
                        ],
                        "allow_pre_release": [
                            679
                        ],
                        "e.message": [
                            681
                        ],
                        "e": [
                            681
                        ],
                        "download_url": [
                            688,
                            685,
                            687
                        ],
                        "remote_collection.metadata.download_url": [
                            685
                        ],
                        "remote_collection.metadata": [
                            685
                        ],
                        "headers": [
                            688,
                            686,
                            687
                        ],
                        "remote_collection.api._add_auth_token": [
                            687
                        ],
                        "remote_collection.api": [
                            687
                        ],
                        "b_temp_tar_path": [
                            688,
                            690
                        ],
                        "_download_file": [
                            688
                        ],
                        "validate_certs": [
                            688
                        ],
                        "local_collection.verify": [
                            690
                        ],
                        "ignore_errors": [
                            693
                        ],
                        "display.warning": [
                            694
                        ],
                        "display": [
                            694
                        ],
                        "to_text": [
                            695
                        ],
                        "err": [
                            695
                        ]
                    },
                    "filtered_variables": {
                        "_display_progress": [
                            652
                        ],
                        "_tempdir": [
                            653
                        ],
                        "b_temp_path": [
                            688,
                            653
                        ],
                        "collection": [
                            681,
                            682,
                            695,
                            654,
                            658,
                            660,
                            661,
                            663,
                            665
                        ],
                        "collections": [
                            654
                        ],
                        "local_collection": [
                            657,
                            690,
                            673,
                            671
                        ],
                        "b_collection": [
                            658,
                            660
                        ],
                        "to_bytes": [
                            658,
                            669
                        ],
                        "os.path.isfile": [
                            660
                        ],
                        "os.path": [
                            660,
                            669,
                            670
                        ],
                        "os": [
                            660,
                            669,
                            670
                        ],
                        "scheme.lower": [
                            660
                        ],
                        "scheme": [
                            660
                        ],
                        "urlparse": [
                            660
                        ],
                        "split": [
                            660
                        ],
                        "AnsibleError": [
                            674,
                            680,
                            682,
                            692,
                            661
                        ],
                        "collection_name": [
                            664,
                            674,
                            678,
                            663
                        ],
                        "namespace": [
                            664,
                            669
                        ],
                        "name": [
                            664,
                            669
                        ],
                        "collection_name.split": [
                            664
                        ],
                        "collection_version": [
                            665,
                            678
                        ],
                        "search_path": [
                            690,
                            668,
                            669
                        ],
                        "search_paths": [
                            668
                        ],
                        "b_search_path": [
                            669,
                            670,
                            671
                        ],
                        "os.path.join": [
                            669
                        ],
                        "os.path.isdir": [
                            670
                        ],
                        "CollectionRequirement.from_path": [
                            671
                        ],
                        "CollectionRequirement": [
                            678,
                            671
                        ],
                        "remote_collection": [
                            690,
                            685,
                            678,
                            687
                        ],
                        "CollectionRequirement.from_name": [
                            678
                        ],
                        "apis": [
                            678
                        ],
                        "allow_pre_release": [
                            679
                        ],
                        "e.message": [
                            681
                        ],
                        "e": [
                            681
                        ],
                        "download_url": [
                            688,
                            685,
                            687
                        ],
                        "remote_collection.metadata.download_url": [
                            685
                        ],
                        "remote_collection.metadata": [
                            685
                        ],
                        "headers": [
                            688,
                            686,
                            687
                        ],
                        "remote_collection.api._add_auth_token": [
                            687
                        ],
                        "remote_collection.api": [
                            687
                        ],
                        "b_temp_tar_path": [
                            688,
                            690
                        ],
                        "_download_file": [
                            688
                        ],
                        "validate_certs": [
                            688
                        ],
                        "local_collection.verify": [
                            690
                        ],
                        "ignore_errors": [
                            693
                        ],
                        "display.warning": [
                            694
                        ],
                        "display": [
                            694
                        ],
                        "to_text": [
                            695
                        ],
                        "err": [
                            695
                        ]
                    },
                    "diff_line_number": 670,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "_display_progress": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_tempdir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_temp_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": "[('ansible_namespace.collection', '*', None)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "local_collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "namespace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_name.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_paths": {
                                    "variable_value": "'./'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "b_search_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isdir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CollectionRequirement.from_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CollectionRequirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CollectionRequirement.from_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "apis": {
                                    "variable_value": "<ansible.galaxy.api.GalaxyAPI object at 0x109ffba10>",
                                    "variable_type": "GalaxyAPI",
                                    "variable_shape": null
                                },
                                "allow_pre_release": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "e.message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "download_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.metadata.download_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.api._add_auth_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_temp_tar_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_download_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validate_certs": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "local_collection.verify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ignore_errors": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "display.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_text": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "_display_progress": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_tempdir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_temp_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collections": {
                                    "variable_value": "[('ansible_namespace.collection', '*', None)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "local_collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_bytes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AnsibleError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "namespace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_name.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "collection_version": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "search_paths": {
                                    "variable_value": "'./'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "b_search_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isdir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_text": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CollectionRequirement.from_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CollectionRequirement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "CollectionRequirement.from_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "apis": {
                                    "variable_value": "<ansible.galaxy.api.GalaxyAPI object at 0x106f99990>",
                                    "variable_type": "GalaxyAPI",
                                    "variable_shape": null
                                },
                                "allow_pre_release": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "e.message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "download_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.metadata.download_url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.api._add_auth_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "remote_collection.api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b_temp_tar_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_download_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validate_certs": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "local_collection.verify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ignore_errors": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "display.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "display": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def build_collection(collection_path, output_path, force):\n    \"\"\"\n    Creates the Ansible collection artifact in a .tar.gz file.\n\n    :param collection_path: The path to the collection to build. This should be the directory that contains the\n        galaxy.yml file.\n    :param output_path: The path to create the collection build artifact. This should be a directory.\n    :param force: Whether to overwrite an existing collection build artifact or fail.\n    :return: The path to the collection build artifact.\n    \"\"\"\n    b_collection_path = to_bytes(collection_path, errors='surrogate_or_strict')\n    b_galaxy_path = os.path.join(b_collection_path, b'galaxy.yml')\n    if not os.path.exists(b_galaxy_path):\n        raise AnsibleError(\"The collection galaxy.yml path '%s' does not exist.\" % to_native(b_galaxy_path))\n\n    collection_meta = _get_galaxy_yml(b_galaxy_path)\n    file_manifest = _build_files_manifest(b_collection_path, collection_meta['namespace'], collection_meta['name'],\n                                          collection_meta['build_ignore'])\n    collection_manifest = _build_manifest(**collection_meta)\n\n    collection_output = os.path.join(output_path, \"%s-%s-%s.tar.gz\" % (collection_meta['namespace'],\n                                                                       collection_meta['name'],\n                                                                       collection_meta['version']))\n\n    b_collection_output = to_bytes(collection_output, errors='surrogate_or_strict')\n    if os.path.exists(b_collection_output):\n        if os.path.isdir(b_collection_output):\n            raise AnsibleError(\"The output collection artifact '%s' already exists, \"\n                               \"but is a directory - aborting\" % to_native(collection_output))\n        elif not force:\n            raise AnsibleError(\"The file '%s' already exists. You can use --force to re-create \"\n                               \"the collection artifact.\" % to_native(collection_output))\n\n    _build_collection_tar(b_collection_path, b_collection_output, collection_manifest, file_manifest)",
                "def download_collections(collections, output_path, apis, validate_certs, no_deps, allow_pre_release):\n    \"\"\"\n    Download Ansible collections as their tarball from a Galaxy server to the path specified and creates a requirements\n    file of the downloaded requirements to be used for an install.\n\n    :param collections: The collections to download, should be a list of tuples with (name, requirement, Galaxy Server).\n    :param output_path: The path to download the collections to.\n    :param apis: A list of GalaxyAPIs to query when search for a collection.\n    :param validate_certs: Whether to validate the certificate if downloading a tarball from a non-Galaxy host.\n    :param no_deps: Ignore any collection dependencies and only download the base requirements.\n    :param allow_pre_release: Do not ignore pre-release versions when selecting the latest.\n    \"\"\"\n    with _tempdir() as b_temp_path:\n        display.display(\"Process install dependency map\")\n        with _display_progress():\n            dep_map = _build_dependency_map(collections, [], b_temp_path, apis, validate_certs, True, True, no_deps,\n                                            allow_pre_release=allow_pre_release)\n\n        requirements = []\n        display.display(\"Starting collection download process to '%s'\" % output_path)\n        with _display_progress():\n            for name, requirement in dep_map.items():\n                collection_filename = \"%s-%s-%s.tar.gz\" % (requirement.namespace, requirement.name,\n                                                           requirement.latest_version)\n                dest_path = os.path.join(output_path, collection_filename)\n                requirements.append({'name': collection_filename, 'version': requirement.latest_version})\n\n                display.display(\"Downloading collection '%s' to '%s'\" % (name, dest_path))\n                b_temp_download_path = requirement.download(b_temp_path)\n                shutil.move(b_temp_download_path, to_bytes(dest_path, errors='surrogate_or_strict'))\n\n            requirements_path = os.path.join(output_path, 'requirements.yml')\n            display.display(\"Writing requirements.yml file of downloaded collections to '%s'\" % requirements_path)\n            with open(to_bytes(requirements_path, errors='surrogate_or_strict'), mode='wb') as req_fd:\n                req_fd.write(to_bytes(yaml.safe_dump({'collections': requirements}), errors='surrogate_or_strict'))",
                "def publish_collection(collection_path, api, wait, timeout):\n    \"\"\"\n    Publish an Ansible collection tarball into an Ansible Galaxy server.\n\n    :param collection_path: The path to the collection tarball to publish.\n    :param api: A GalaxyAPI to publish the collection to.\n    :param wait: Whether to wait until the import process is complete.\n    :param timeout: The time in seconds to wait for the import process to finish, 0 is indefinite.\n    \"\"\"\n    import_uri = api.publish_collection(collection_path)\n\n    if wait:\n        # Galaxy returns a url fragment which differs between v2 and v3.  The second to last entry is\n        # always the task_id, though.\n        # v2: {\"task\": \"https://galaxy-dev.ansible.com/api/v2/collection-imports/35573/\"}\n        # v3: {\"task\": \"/api/automation-hub/v3/imports/collections/838d1308-a8f4-402c-95cb-7823f3806cd8/\"}\n        task_id = None\n        for path_segment in reversed(import_uri.split('/')):\n            if path_segment:\n                task_id = path_segment\n                break\n\n        if not task_id:\n            raise AnsibleError(\"Publishing the collection did not return valid task info. Cannot wait for task status. Returned task info: '%s'\" % import_uri)\n\n        display.display(\"Collection has been published to the Galaxy server %s %s\" % (api.name, api.api_server))\n        with _display_progress():\n            api.wait_import_task(task_id, timeout)\n        display.display(\"Collection has been successfully published and imported to the Galaxy server %s %s\"\n                        % (api.name, api.api_server))\n    else:\n        display.display(\"Collection has been pushed to the Galaxy server %s %s, not waiting until import has \"\n                        \"completed due to --no-wait being set. Import task results can be found at %s\"\n                        % (api.name, api.api_server, import_uri))",
                "def install_collections(collections, output_path, apis, validate_certs, ignore_errors, no_deps, force, force_deps,\n                        allow_pre_release=False):\n    \"\"\"\n    Install Ansible collections to the path specified.\n\n    :param collections: The collections to install, should be a list of tuples with (name, requirement, Galaxy server).\n    :param output_path: The path to install the collections to.\n    :param apis: A list of GalaxyAPIs to query when searching for a collection.\n    :param validate_certs: Whether to validate the certificates if downloading a tarball.\n    :param ignore_errors: Whether to ignore any errors when installing the collection.\n    :param no_deps: Ignore any collection dependencies and only install the base requirements.\n    :param force: Re-install a collection if it has already been installed.\n    :param force_deps: Re-install a collection as well as its dependencies if they have already been installed.\n    \"\"\"\n    existing_collections = find_existing_collections(output_path)\n\n    with _tempdir() as b_temp_path:\n        display.display(\"Process install dependency map\")\n        with _display_progress():\n            dependency_map = _build_dependency_map(collections, existing_collections, b_temp_path, apis,\n                                                   validate_certs, force, force_deps, no_deps,\n                                                   allow_pre_release=allow_pre_release)\n\n        display.display(\"Starting collection install process\")\n        with _display_progress():\n            for collection in dependency_map.values():\n                try:\n                    collection.install(output_path, b_temp_path)\n                except AnsibleError as err:\n                    if ignore_errors:\n                        display.warning(\"Failed to install collection %s but skipping due to --ignore-errors being set. \"\n                                        \"Error: %s\" % (to_text(collection), to_text(err)))\n                    else:\n                        raise",
                "def validate_collection_name(name):\n    \"\"\"\n    Validates the collection name as an input from the user or a requirements file fit the requirements.\n\n    :param name: The input name with optional range specifier split by ':'.\n    :return: The input value, required for argparse validation.\n    \"\"\"\n    collection, dummy, dummy = name.partition(':')\n    if AnsibleCollectionRef.is_valid_collection_name(collection):\n        return name\n\n    raise AnsibleError(\"Invalid collection name '%s', \"\n                       \"name must be in the format <namespace>.<collection>. \\n\"\n                       \"Please make sure namespace and collection name contains \"\n                       \"characters from [a-zA-Z0-9_] only.\" % name)",
                "def validate_collection_path(collection_path):\n    \"\"\" Ensure a given path ends with 'ansible_collections'\n\n    :param collection_path: The path that should end in 'ansible_collections'\n    :return: collection_path ending in 'ansible_collections' if it does not already.\n    \"\"\"\n\n    if os.path.split(collection_path)[1] != 'ansible_collections':\n        return os.path.join(collection_path, 'ansible_collections')\n\n    return collection_path",
                "def verify_collections(collections, search_paths, apis, validate_certs, ignore_errors, allow_pre_release=False):\n\n    with _display_progress():\n        with _tempdir() as b_temp_path:\n            for collection in collections:\n                try:\n\n                    local_collection = None\n                    b_collection = to_bytes(collection[0], errors='surrogate_or_strict')\n\n                    if os.path.isfile(b_collection) or urlparse(collection[0]).scheme.lower() in ['http', 'https'] or len(collection[0].split('.')) != 2:\n                        raise AnsibleError(message=\"'%s' is not a valid collection name. The format namespace.name is expected.\" % collection[0])\n\n                    collection_name = collection[0]\n                    namespace, name = collection_name.split('.')\n                    collection_version = collection[1]\n\n                    # Verify local collection exists before downloading it from a galaxy server\n                    for search_path in search_paths:\n                        b_search_path = to_bytes(os.path.join(search_path, namespace, name), errors='surrogate_or_strict')\n                        if os.path.isdir(b_search_path):\n                            local_collection = CollectionRequirement.from_path(b_search_path, False)\n                            break\n                    if local_collection is None:\n                        raise AnsibleError(message='Collection %s is not installed in any of the collection paths.' % collection_name)\n\n                    # Download collection on a galaxy server for comparison\n                    try:\n                        remote_collection = CollectionRequirement.from_name(collection_name, apis, collection_version, False, parent=None,\n                                                                            allow_pre_release=allow_pre_release)\n                    except AnsibleError as e:\n                        if e.message == 'Failed to find collection %s:%s' % (collection[0], collection[1]):\n                            raise AnsibleError('Failed to find remote collection %s:%s on any of the galaxy servers' % (collection[0], collection[1]))\n                        raise\n\n                    download_url = remote_collection.metadata.download_url\n                    headers = {}\n                    remote_collection.api._add_auth_token(headers, download_url, required=False)\n                    b_temp_tar_path = _download_file(download_url, b_temp_path, None, validate_certs, headers=headers)\n\n                    local_collection.verify(remote_collection, search_path, b_temp_tar_path)\n\n                except AnsibleError as err:\n                    if ignore_errors:\n                        display.warning(\"Failed to verify collection %s but skipping due to --ignore-errors being set. \"\n                                        \"Error: %s\" % (collection[0], to_text(err)))\n                    else:\n                        raise",
                "@contextmanager\ndef _tempdir():\n    b_temp_path = tempfile.mkdtemp(dir=to_bytes(C.DEFAULT_LOCAL_TMP, errors='surrogate_or_strict'))\n    yield b_temp_path\n    shutil.rmtree(b_temp_path)",
                "@contextmanager\ndef _tarfile_extract(tar, member):\n    tar_obj = tar.extractfile(member)\n    yield tar_obj\n    tar_obj.close()",
                "@contextmanager\ndef _display_progress():\n    config_display = C.GALAXY_DISPLAY_PROGRESS\n    display_wheel = sys.stdout.isatty() if config_display is None else config_display\n\n    if not display_wheel:\n        yield\n        return\n\n    def progress(display_queue, actual_display):\n        actual_display.debug(\"Starting display_progress display thread\")\n        t = threading.current_thread()\n\n        while True:\n            for c in \"|/-\\\\\":\n                actual_display.display(c + \"\\b\", newline=False)\n                time.sleep(0.1)\n\n                # Display a message from the main thread\n                while True:\n                    try:\n                        method, args, kwargs = display_queue.get(block=False, timeout=0.1)\n                    except queue.Empty:\n                        break\n                    else:\n                        func = getattr(actual_display, method)\n                        func(*args, **kwargs)\n\n                if getattr(t, \"finish\", False):\n                    actual_display.debug(\"Received end signal for display_progress display thread\")\n                    return\n\n    class DisplayThread(object):\n\n        def __init__(self, display_queue):\n            self.display_queue = display_queue\n\n        def __getattr__(self, attr):\n            def call_display(*args, **kwargs):\n                self.display_queue.put((attr, args, kwargs))\n\n            return call_display\n\n    # Temporary override the global display class with our own which add the calls to a queue for the thread to call.\n    global display\n    old_display = display\n    try:\n        display_queue = queue.Queue()\n        display = DisplayThread(display_queue)\n        t = threading.Thread(target=progress, args=(display_queue, old_display))\n        t.daemon = True\n        t.start()\n\n        try:\n            yield\n        finally:\n            t.finish = True\n            t.join()\n    except Exception:\n        # The exception is re-raised so we can sure the thread is finished and not using the display anymore\n        raise\n    finally:\n        display = old_display",
                "def _get_galaxy_yml(b_galaxy_yml_path):\n    meta_info = get_collections_galaxy_meta_info()\n\n    mandatory_keys = set()\n    string_keys = set()\n    list_keys = set()\n    dict_keys = set()\n\n    for info in meta_info:\n        if info.get('required', False):\n            mandatory_keys.add(info['key'])\n\n        key_list_type = {\n            'str': string_keys,\n            'list': list_keys,\n            'dict': dict_keys,\n        }[info.get('type', 'str')]\n        key_list_type.add(info['key'])\n\n    all_keys = frozenset(list(mandatory_keys) + list(string_keys) + list(list_keys) + list(dict_keys))\n\n    try:\n        with open(b_galaxy_yml_path, 'rb') as g_yaml:\n            galaxy_yml = yaml.safe_load(g_yaml)\n    except YAMLError as err:\n        raise AnsibleError(\"Failed to parse the galaxy.yml at '%s' with the following error:\\n%s\"\n                           % (to_native(b_galaxy_yml_path), to_native(err)))\n\n    set_keys = set(galaxy_yml.keys())\n    missing_keys = mandatory_keys.difference(set_keys)\n    if missing_keys:\n        raise AnsibleError(\"The collection galaxy.yml at '%s' is missing the following mandatory keys: %s\"\n                           % (to_native(b_galaxy_yml_path), \", \".join(sorted(missing_keys))))\n\n    extra_keys = set_keys.difference(all_keys)\n    if len(extra_keys) > 0:\n        display.warning(\"Found unknown keys in collection galaxy.yml at '%s': %s\"\n                        % (to_text(b_galaxy_yml_path), \", \".join(extra_keys)))\n\n    # Add the defaults if they have not been set\n    for optional_string in string_keys:\n        if optional_string not in galaxy_yml:\n            galaxy_yml[optional_string] = None\n\n    for optional_list in list_keys:\n        list_val = galaxy_yml.get(optional_list, None)\n\n        if list_val is None:\n            galaxy_yml[optional_list] = []\n        elif not isinstance(list_val, list):\n            galaxy_yml[optional_list] = [list_val]\n\n    for optional_dict in dict_keys:\n        if optional_dict not in galaxy_yml:\n            galaxy_yml[optional_dict] = {}\n\n    # license is a builtin var in Python, to avoid confusion we just rename it to license_ids\n    galaxy_yml['license_ids'] = galaxy_yml['license']\n    del galaxy_yml['license']\n\n    return galaxy_yml",
                "def _build_files_manifest(b_collection_path, namespace, name, ignore_patterns):\n    # We always ignore .pyc and .retry files as well as some well known version control directories. The ignore\n    # patterns can be extended by the build_ignore key in galaxy.yml\n    b_ignore_patterns = [\n        b'galaxy.yml',\n        b'.git',\n        b'*.pyc',\n        b'*.retry',\n        b'tests/output',  # Ignore ansible-test result output directory.\n        to_bytes('{0}-{1}-*.tar.gz'.format(namespace, name)),  # Ignores previously built artifacts in the root dir.\n    ]\n    b_ignore_patterns += [to_bytes(p) for p in ignore_patterns]\n    b_ignore_dirs = frozenset([b'CVS', b'.bzr', b'.hg', b'.git', b'.svn', b'__pycache__', b'.tox'])\n\n    entry_template = {\n        'name': None,\n        'ftype': None,\n        'chksum_type': None,\n        'chksum_sha256': None,\n        'format': MANIFEST_FORMAT\n    }\n    manifest = {\n        'files': [\n            {\n                'name': '.',\n                'ftype': 'dir',\n                'chksum_type': None,\n                'chksum_sha256': None,\n                'format': MANIFEST_FORMAT,\n            },\n        ],\n        'format': MANIFEST_FORMAT,\n    }\n\n    def _walk(b_path, b_top_level_dir):\n        for b_item in os.listdir(b_path):\n            b_abs_path = os.path.join(b_path, b_item)\n            b_rel_base_dir = b'' if b_path == b_top_level_dir else b_path[len(b_top_level_dir) + 1:]\n            b_rel_path = os.path.join(b_rel_base_dir, b_item)\n            rel_path = to_text(b_rel_path, errors='surrogate_or_strict')\n\n            if os.path.isdir(b_abs_path):\n                if any(b_item == b_path for b_path in b_ignore_dirs) or \\\n                        any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                    display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                    continue\n\n                if os.path.islink(b_abs_path):\n                    b_link_target = os.path.realpath(b_abs_path)\n\n                    if not b_link_target.startswith(b_top_level_dir):\n                        display.warning(\"Skipping '%s' as it is a symbolic link to a directory outside the collection\"\n                                        % to_text(b_abs_path))\n                        continue\n\n                manifest_entry = entry_template.copy()\n                manifest_entry['name'] = rel_path\n                manifest_entry['ftype'] = 'dir'\n\n                manifest['files'].append(manifest_entry)\n\n                _walk(b_abs_path, b_top_level_dir)\n            else:\n                if any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                    display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                    continue\n\n                manifest_entry = entry_template.copy()\n                manifest_entry['name'] = rel_path\n                manifest_entry['ftype'] = 'file'\n                manifest_entry['chksum_type'] = 'sha256'\n                manifest_entry['chksum_sha256'] = secure_hash(b_abs_path, hash_func=sha256)\n\n                manifest['files'].append(manifest_entry)\n\n    _walk(b_collection_path, b_collection_path)\n\n    return manifest",
                "def _build_manifest(namespace, name, version, authors, readme, tags, description, license_ids, license_file,\n                    dependencies, repository, documentation, homepage, issues, **kwargs):\n\n    manifest = {\n        'collection_info': {\n            'namespace': namespace,\n            'name': name,\n            'version': version,\n            'authors': authors,\n            'readme': readme,\n            'tags': tags,\n            'description': description,\n            'license': license_ids,\n            'license_file': license_file if license_file else None,  # Handle galaxy.yml having an empty string (None)\n            'dependencies': dependencies,\n            'repository': repository,\n            'documentation': documentation,\n            'homepage': homepage,\n            'issues': issues,\n        },\n        'file_manifest_file': {\n            'name': 'FILES.json',\n            'ftype': 'file',\n            'chksum_type': 'sha256',\n            'chksum_sha256': None,  # Filled out in _build_collection_tar\n            'format': MANIFEST_FORMAT\n        },\n        'format': MANIFEST_FORMAT,\n    }\n\n    return manifest",
                "def _build_collection_tar(b_collection_path, b_tar_path, collection_manifest, file_manifest):\n    files_manifest_json = to_bytes(json.dumps(file_manifest, indent=True), errors='surrogate_or_strict')\n    collection_manifest['file_manifest_file']['chksum_sha256'] = secure_hash_s(files_manifest_json, hash_func=sha256)\n    collection_manifest_json = to_bytes(json.dumps(collection_manifest, indent=True), errors='surrogate_or_strict')\n\n    with _tempdir() as b_temp_path:\n        b_tar_filepath = os.path.join(b_temp_path, os.path.basename(b_tar_path))\n\n        with tarfile.open(b_tar_filepath, mode='w:gz') as tar_file:\n            # Add the MANIFEST.json and FILES.json file to the archive\n            for name, b in [('MANIFEST.json', collection_manifest_json), ('FILES.json', files_manifest_json)]:\n                b_io = BytesIO(b)\n                tar_info = tarfile.TarInfo(name)\n                tar_info.size = len(b)\n                tar_info.mtime = time.time()\n                tar_info.mode = 0o0644\n                tar_file.addfile(tarinfo=tar_info, fileobj=b_io)\n\n            for file_info in file_manifest['files']:\n                if file_info['name'] == '.':\n                    continue\n\n                # arcname expects a native string, cannot be bytes\n                filename = to_native(file_info['name'], errors='surrogate_or_strict')\n                b_src_path = os.path.join(b_collection_path, to_bytes(filename, errors='surrogate_or_strict'))\n\n                def reset_stat(tarinfo):\n                    existing_is_exec = tarinfo.mode & stat.S_IXUSR\n                    tarinfo.mode = 0o0755 if existing_is_exec or tarinfo.isdir() else 0o0644\n                    tarinfo.uid = tarinfo.gid = 0\n                    tarinfo.uname = tarinfo.gname = ''\n                    return tarinfo\n\n                tar_file.add(os.path.realpath(b_src_path), arcname=filename, recursive=False, filter=reset_stat)\n\n        shutil.copy(b_tar_filepath, b_tar_path)\n        collection_name = \"%s.%s\" % (collection_manifest['collection_info']['namespace'],\n                                     collection_manifest['collection_info']['name'])\n        display.display('Created collection for %s at %s' % (collection_name, to_text(b_tar_path)))",
                "def find_existing_collections(path):\n    collections = []\n\n    b_path = to_bytes(path, errors='surrogate_or_strict')\n    for b_namespace in os.listdir(b_path):\n        b_namespace_path = os.path.join(b_path, b_namespace)\n        if os.path.isfile(b_namespace_path):\n            continue\n\n        for b_collection in os.listdir(b_namespace_path):\n            b_collection_path = os.path.join(b_namespace_path, b_collection)\n            if os.path.isdir(b_collection_path):\n                req = CollectionRequirement.from_path(b_collection_path, False)\n                display.vvv(\"Found installed collection %s:%s at '%s'\" % (to_text(req), req.latest_version,\n                                                                          to_text(b_collection_path)))\n                collections.append(req)\n\n    return collections",
                "def _build_dependency_map(collections, existing_collections, b_temp_path, apis, validate_certs, force, force_deps,\n                          no_deps, allow_pre_release=False):\n    dependency_map = {}\n\n    # First build the dependency map on the actual requirements\n    for name, version, source in collections:\n        _get_collection_info(dependency_map, existing_collections, name, version, source, b_temp_path, apis,\n                             validate_certs, (force or force_deps), allow_pre_release=allow_pre_release)\n\n    checked_parents = set([to_text(c) for c in dependency_map.values() if c.skip])\n    while len(dependency_map) != len(checked_parents):\n        while not no_deps:  # Only parse dependencies if no_deps was not set\n            parents_to_check = set(dependency_map.keys()).difference(checked_parents)\n\n            deps_exhausted = True\n            for parent in parents_to_check:\n                parent_info = dependency_map[parent]\n\n                if parent_info.dependencies:\n                    deps_exhausted = False\n                    for dep_name, dep_requirement in parent_info.dependencies.items():\n                        _get_collection_info(dependency_map, existing_collections, dep_name, dep_requirement,\n                                             parent_info.api, b_temp_path, apis, validate_certs, force_deps,\n                                             parent=parent, allow_pre_release=allow_pre_release)\n\n                    checked_parents.add(parent)\n\n            # No extra dependencies were resolved, exit loop\n            if deps_exhausted:\n                break\n\n        # Now we have resolved the deps to our best extent, now select the latest version for collections with\n        # multiple versions found and go from there\n        deps_not_checked = set(dependency_map.keys()).difference(checked_parents)\n        for collection in deps_not_checked:\n            dependency_map[collection].set_latest_version()\n            if no_deps or len(dependency_map[collection].dependencies) == 0:\n                checked_parents.add(collection)\n\n    return dependency_map",
                "def _get_collection_info(dep_map, existing_collections, collection, requirement, source, b_temp_path, apis,\n                         validate_certs, force, parent=None, allow_pre_release=False):\n    dep_msg = \"\"\n    if parent:\n        dep_msg = \" - as dependency of %s\" % parent\n    display.vvv(\"Processing requirement collection '%s'%s\" % (to_text(collection), dep_msg))\n\n    b_tar_path = None\n    if os.path.isfile(to_bytes(collection, errors='surrogate_or_strict')):\n        display.vvvv(\"Collection requirement '%s' is a tar artifact\" % to_text(collection))\n        b_tar_path = to_bytes(collection, errors='surrogate_or_strict')\n    elif urlparse(collection).scheme.lower() in ['http', 'https']:\n        display.vvvv(\"Collection requirement '%s' is a URL to a tar artifact\" % collection)\n        try:\n            b_tar_path = _download_file(collection, b_temp_path, None, validate_certs)\n        except urllib_error.URLError as err:\n            raise AnsibleError(\"Failed to download collection tar from '%s': %s\"\n                               % (to_native(collection), to_native(err)))\n\n    if b_tar_path:\n        req = CollectionRequirement.from_tar(b_tar_path, force, parent=parent)\n\n        collection_name = to_text(req)\n        if collection_name in dep_map:\n            collection_info = dep_map[collection_name]\n            collection_info.add_requirement(None, req.latest_version)\n        else:\n            collection_info = req\n    else:\n        validate_collection_name(collection)\n\n        display.vvvv(\"Collection requirement '%s' is the name of a collection\" % collection)\n        if collection in dep_map:\n            collection_info = dep_map[collection]\n            collection_info.add_requirement(parent, requirement)\n        else:\n            apis = [source] if source else apis\n            collection_info = CollectionRequirement.from_name(collection, apis, requirement, force, parent=parent,\n                                                              allow_pre_release=allow_pre_release)\n\n    existing = [c for c in existing_collections if to_text(c) == to_text(collection_info)]\n    if existing and not collection_info.force:\n        # Test that the installed collection fits the requirement\n        existing[0].add_requirement(parent, requirement)\n        collection_info = existing[0]\n\n    dep_map[to_text(collection_info)] = collection_info",
                "def _download_file(url, b_path, expected_hash, validate_certs, headers=None):\n    urlsplit = os.path.splitext(to_text(url.rsplit('/', 1)[1]))\n    b_file_name = to_bytes(urlsplit[0], errors='surrogate_or_strict')\n    b_file_ext = to_bytes(urlsplit[1], errors='surrogate_or_strict')\n    b_file_path = tempfile.NamedTemporaryFile(dir=b_path, prefix=b_file_name, suffix=b_file_ext, delete=False).name\n\n    display.vvv(\"Downloading %s to %s\" % (url, to_text(b_path)))\n    # Galaxy redirs downloads to S3 which reject the request if an Authorization header is attached so don't redir that\n    resp = open_url(to_native(url, errors='surrogate_or_strict'), validate_certs=validate_certs, headers=headers,\n                    unredirected_headers=['Authorization'], http_agent=user_agent())\n\n    with open(b_file_path, 'wb') as download_file:\n        actual_hash = _consume_file(resp, download_file)\n\n    if expected_hash:\n        display.vvvv(\"Validating downloaded file hash %s with expected hash %s\" % (actual_hash, expected_hash))\n        if expected_hash != actual_hash:\n            raise AnsibleError(\"Mismatch artifact hash with downloaded file\")\n\n    return b_file_path",
                "def _extract_tar_file(tar, filename, b_dest, b_temp_path, expected_hash=None):\n    with _get_tar_file_member(tar, filename) as tar_obj:\n        with tempfile.NamedTemporaryFile(dir=b_temp_path, delete=False) as tmpfile_obj:\n            actual_hash = _consume_file(tar_obj, tmpfile_obj)\n\n        if expected_hash and actual_hash != expected_hash:\n            raise AnsibleError(\"Checksum mismatch for '%s' inside collection at '%s'\"\n                               % (to_native(filename, errors='surrogate_or_strict'), to_native(tar.name)))\n\n        b_dest_filepath = os.path.abspath(os.path.join(b_dest, to_bytes(filename, errors='surrogate_or_strict')))\n        b_parent_dir = os.path.dirname(b_dest_filepath)\n        if b_parent_dir != b_dest and not b_parent_dir.startswith(b_dest + to_bytes(os.path.sep)):\n            raise AnsibleError(\"Cannot extract tar entry '%s' as it will be placed outside the collection directory\"\n                               % to_native(filename, errors='surrogate_or_strict'))\n\n        if not os.path.exists(b_parent_dir):\n            # Seems like Galaxy does not validate if all file entries have a corresponding dir ftype entry. This check\n            # makes sure we create the parent directory even if it wasn't set in the metadata.\n            os.makedirs(b_parent_dir, mode=0o0755)\n\n        shutil.move(to_bytes(tmpfile_obj.name, errors='surrogate_or_strict'), b_dest_filepath)\n\n        # Default to rw-r--r-- and only add execute if the tar file has execute.\n        tar_member = tar.getmember(to_native(filename, errors='surrogate_or_strict'))\n        new_mode = 0o644\n        if stat.S_IMODE(tar_member.mode) & stat.S_IXUSR:\n            new_mode |= 0o0111\n\n        os.chmod(b_dest_filepath, new_mode)",
                "def _get_tar_file_member(tar, filename):\n    n_filename = to_native(filename, errors='surrogate_or_strict')\n    try:\n        member = tar.getmember(n_filename)\n    except KeyError:\n        raise AnsibleError(\"Collection tar at '%s' does not contain the expected file '%s'.\" % (\n            to_native(tar.name),\n            n_filename))\n\n    return _tarfile_extract(tar, member)",
                "def _get_json_from_tar_file(b_path, filename):\n    file_contents = ''\n\n    with tarfile.open(b_path, mode='r') as collection_tar:\n        with _get_tar_file_member(collection_tar, filename) as tar_obj:\n            bufsize = 65536\n            data = tar_obj.read(bufsize)\n            while data:\n                file_contents += to_text(data)\n                data = tar_obj.read(bufsize)\n\n    return json.loads(file_contents)",
                "def _get_tar_file_hash(b_path, filename):\n    with tarfile.open(b_path, mode='r') as collection_tar:\n        with _get_tar_file_member(collection_tar, filename) as tar_obj:\n            return _consume_file(tar_obj)",
                "def _consume_file(read_from, write_to=None):\n    bufsize = 65536\n    sha256_digest = sha256()\n    data = read_from.read(bufsize)\n    while data:\n        if write_to is not None:\n            write_to.write(data)\n            write_to.flush()\n        sha256_digest.update(data)\n        data = read_from.read(bufsize)\n\n    return sha256_digest.hexdigest()",
                "def __init__(self, namespace, name, b_path, api, versions, requirement, force, parent=None, metadata=None,\n             files=None, skip=False, allow_pre_releases=False):\n    \"\"\"\n    Represents a collection requirement, the versions that are available to be installed as well as any\n    dependencies the collection has.\n\n    :param namespace: The collection namespace.\n    :param name: The collection name.\n    :param b_path: Byte str of the path to the collection tarball if it has already been downloaded.\n    :param api: The GalaxyAPI to use if the collection is from Galaxy.\n    :param versions: A list of versions of the collection that are available.\n    :param requirement: The version requirement string used to verify the list of versions fit the requirements.\n    :param force: Whether the force flag applied to the collection.\n    :param parent: The name of the parent the collection is a dependency of.\n    :param metadata: The galaxy.api.CollectionVersionMetadata that has already been retrieved from the Galaxy\n        server.\n    :param files: The files that exist inside the collection. This is based on the FILES.json file inside the\n        collection artifact.\n    :param skip: Whether to skip installing the collection. Should be set if the collection is already installed\n        and force is not set.\n    :param allow_pre_releases: Whether to skip pre-release versions of collections.\n    \"\"\"\n    self.namespace = namespace\n    self.name = name\n    self.b_path = b_path\n    self.api = api\n    self._versions = set(versions)\n    self.force = force\n    self.skip = skip\n    self.required_by = []\n    self.allow_pre_releases = allow_pre_releases\n\n    self._metadata = metadata\n    self._files = files\n\n    self.add_requirement(parent, requirement)",
                "def __str__(self):\n    return to_native(\"%s.%s\" % (self.namespace, self.name))",
                "def __unicode__(self):\n    return u\"%s.%s\" % (self.namespace, self.name)",
                "@property\ndef metadata(self):\n    self._get_metadata()\n    return self._metadata",
                "@property\ndef versions(self):\n    if self.allow_pre_releases:\n        return self._versions\n    return set(v for v in self._versions if v == '*' or not SemanticVersion(v).is_prerelease)",
                "@versions.setter\ndef versions(self, value):\n    self._versions = set(value)",
                "@property\ndef pre_releases(self):\n    return set(v for v in self._versions if SemanticVersion(v).is_prerelease)",
                "@property\ndef latest_version(self):\n    try:\n        return max([v for v in self.versions if v != '*'], key=SemanticVersion)\n    except ValueError:  # ValueError: max() arg is an empty sequence\n        return '*'",
                "@property\ndef dependencies(self):\n    if not self._metadata:\n        if len(self.versions) > 1:\n            return {}\n        self._get_metadata()\n\n    dependencies = self._metadata.dependencies\n\n    if dependencies is None:\n        return {}\n\n    return dependencies",
                "def add_requirement(self, parent, requirement):\n    self.required_by.append((parent, requirement))\n    new_versions = set(v for v in self.versions if self._meets_requirements(v, requirement, parent))\n    if len(new_versions) == 0:\n        if self.skip:\n            force_flag = '--force-with-deps' if parent else '--force'\n            version = self.latest_version if self.latest_version != '*' else 'unknown'\n            msg = \"Cannot meet requirement %s:%s as it is already installed at version '%s'. Use %s to overwrite\" \\\n                  % (to_text(self), requirement, version, force_flag)\n            raise AnsibleError(msg)\n        elif parent is None:\n            msg = \"Cannot meet requirement %s for dependency %s\" % (requirement, to_text(self))\n        else:\n            msg = \"Cannot meet dependency requirement '%s:%s' for collection %s\" \\\n                  % (to_text(self), requirement, parent)\n\n        collection_source = to_text(self.b_path, nonstring='passthru') or self.api.api_server\n        req_by = \"\\n\".join(\n            \"\\t%s - '%s:%s'\" % (to_text(p) if p else 'base', to_text(self), r)\n            for p, r in self.required_by\n        )\n\n        versions = \", \".join(sorted(self.versions, key=SemanticVersion))\n        if not self.versions and self.pre_releases:\n            pre_release_msg = (\n                '\\nThis collection only contains pre-releases. Utilize `--pre` to install pre-releases, or '\n                'explicitly provide the pre-release version.'\n            )\n        else:\n            pre_release_msg = ''\n\n        raise AnsibleError(\n            \"%s from source '%s'. Available versions before last requirement added: %s\\nRequirements from:\\n%s%s\"\n            % (msg, collection_source, versions, req_by, pre_release_msg)\n        )\n\n    self.versions = new_versions",
                "def download(self, b_path):\n    download_url = self._metadata.download_url\n    artifact_hash = self._metadata.artifact_sha256\n    headers = {}\n    self.api._add_auth_token(headers, download_url, required=False)\n\n    b_collection_path = _download_file(download_url, b_path, artifact_hash, self.api.validate_certs,\n                                       headers=headers)\n\n    return to_text(b_collection_path, errors='surrogate_or_strict')",
                "def install(self, path, b_temp_path):\n    if self.skip:\n        display.display(\"Skipping '%s' as it is already installed\" % to_text(self))\n        return\n\n    # Install if it is not\n    collection_path = os.path.join(path, self.namespace, self.name)\n    b_collection_path = to_bytes(collection_path, errors='surrogate_or_strict')\n    display.display(\"Installing '%s:%s' to '%s'\" % (to_text(self), self.latest_version, collection_path))\n\n    if self.b_path is None:\n        self.b_path = self.download(b_temp_path)\n\n    if os.path.exists(b_collection_path):\n        shutil.rmtree(b_collection_path)\n    os.makedirs(b_collection_path)\n\n    try:\n        with tarfile.open(self.b_path, mode='r') as collection_tar:\n            files_member_obj = collection_tar.getmember('FILES.json')\n            with _tarfile_extract(collection_tar, files_member_obj) as files_obj:\n                files = json.loads(to_text(files_obj.read(), errors='surrogate_or_strict'))\n\n            _extract_tar_file(collection_tar, 'MANIFEST.json', b_collection_path, b_temp_path)\n            _extract_tar_file(collection_tar, 'FILES.json', b_collection_path, b_temp_path)\n\n            for file_info in files['files']:\n                file_name = file_info['name']\n                if file_name == '.':\n                    continue\n\n                if file_info['ftype'] == 'file':\n                    _extract_tar_file(collection_tar, file_name, b_collection_path, b_temp_path,\n                                      expected_hash=file_info['chksum_sha256'])\n                else:\n                    os.makedirs(os.path.join(b_collection_path, to_bytes(file_name, errors='surrogate_or_strict')))\n    except Exception:\n        # Ensure we don't leave the dir behind in case of a failure.\n        shutil.rmtree(b_collection_path)\n\n        b_namespace_path = os.path.dirname(b_collection_path)\n        if not os.listdir(b_namespace_path):\n            os.rmdir(b_namespace_path)\n\n        raise",
                "def set_latest_version(self):\n    self.versions = set([self.latest_version])\n    self._get_metadata()",
                "def verify(self, remote_collection, path, b_temp_tar_path):\n    if not self.skip:\n        display.display(\"'%s' has not been installed, nothing to verify\" % (to_text(self)))\n        return\n\n    collection_path = os.path.join(path, self.namespace, self.name)\n    b_collection_path = to_bytes(collection_path, errors='surrogate_or_strict')\n\n    display.vvv(\"Verifying '%s:%s'.\" % (to_text(self), self.latest_version))\n    display.vvv(\"Installed collection found at '%s'\" % collection_path)\n    display.vvv(\"Remote collection found at '%s'\" % remote_collection.metadata.download_url)\n\n    # Compare installed version versus requirement version\n    if self.latest_version != remote_collection.latest_version:\n        err = \"%s has the version '%s' but is being compared to '%s'\" % (to_text(self), self.latest_version, remote_collection.latest_version)\n        display.display(err)\n        return\n\n    modified_content = []\n\n    # Verify the manifest hash matches before verifying the file manifest\n    expected_hash = _get_tar_file_hash(b_temp_tar_path, 'MANIFEST.json')\n    self._verify_file_hash(b_collection_path, 'MANIFEST.json', expected_hash, modified_content)\n    manifest = _get_json_from_tar_file(b_temp_tar_path, 'MANIFEST.json')\n\n    # Use the manifest to verify the file manifest checksum\n    file_manifest_data = manifest['file_manifest_file']\n    file_manifest_filename = file_manifest_data['name']\n    expected_hash = file_manifest_data['chksum_%s' % file_manifest_data['chksum_type']]\n\n    # Verify the file manifest before using it to verify individual files\n    self._verify_file_hash(b_collection_path, file_manifest_filename, expected_hash, modified_content)\n    file_manifest = _get_json_from_tar_file(b_temp_tar_path, file_manifest_filename)\n\n    # Use the file manifest to verify individual file checksums\n    for manifest_data in file_manifest['files']:\n        if manifest_data['ftype'] == 'file':\n            expected_hash = manifest_data['chksum_%s' % manifest_data['chksum_type']]\n            self._verify_file_hash(b_collection_path, manifest_data['name'], expected_hash, modified_content)\n\n    if modified_content:\n        display.display(\"Collection %s contains modified content in the following files:\" % to_text(self))\n        display.display(to_text(self))\n        display.vvv(to_text(self.b_path))\n        for content_change in modified_content:\n            display.display('    %s' % content_change.filename)\n            display.vvv(\"    Expected: %s\\n    Found: %s\" % (content_change.expected, content_change.installed))\n    else:\n        display.vvv(\"Successfully verified that checksums for '%s:%s' match the remote collection\" % (to_text(self), self.latest_version))",
                "def _verify_file_hash(self, b_path, filename, expected_hash, error_queue):\n    b_file_path = to_bytes(os.path.join(to_text(b_path), filename), errors='surrogate_or_strict')\n\n    if not os.path.isfile(b_file_path):\n        actual_hash = None\n    else:\n        with open(b_file_path, mode='rb') as file_object:\n            actual_hash = _consume_file(file_object)\n\n    if expected_hash != actual_hash:\n        error_queue.append(ModifiedContent(filename=filename, expected=expected_hash, installed=actual_hash))",
                "def _get_metadata(self):\n    if self._metadata:\n        return\n    self._metadata = self.api.get_collection_version_metadata(self.namespace, self.name, self.latest_version)",
                "def _meets_requirements(self, version, requirements, parent):\n    \"\"\"\n    Supports version identifiers can be '==', '!=', '>', '>=', '<', '<=', '*'. Each requirement is delimited by ','\n    \"\"\"\n    op_map = {\n        '!=': operator.ne,\n        '==': operator.eq,\n        '=': operator.eq,\n        '>=': operator.ge,\n        '>': operator.gt,\n        '<=': operator.le,\n        '<': operator.lt,\n    }\n\n    for req in list(requirements.split(',')):\n        op_pos = 2 if len(req) > 1 and req[1] == '=' else 1\n        op = op_map.get(req[:op_pos])\n\n        requirement = req[op_pos:]\n        if not op:\n            requirement = req\n            op = operator.eq\n\n        # In the case we are checking a new requirement on a base requirement (parent != None) we can't accept\n        # version as '*' (unknown version) unless the requirement is also '*'.\n        if parent and version == '*' and requirement != '*':\n            display.warning(\"Failed to validate the collection requirement '%s:%s' for %s when the existing \"\n                            \"install does not have a version set, the collection may not work.\"\n                            % (to_text(self), req, parent))\n            continue\n        elif requirement == '*' or version == '*':\n            continue\n\n        if not op(SemanticVersion(version), SemanticVersion.from_loose_version(LooseVersion(requirement))):\n            break\n    else:\n        return True\n\n    # The loop was broken early, it does not meet all the requirements\n    return False",
                "@staticmethod\ndef from_tar(b_path, force, parent=None):\n    if not tarfile.is_tarfile(b_path):\n        raise AnsibleError(\"Collection artifact at '%s' is not a valid tar file.\" % to_native(b_path))\n\n    info = {}\n    with tarfile.open(b_path, mode='r') as collection_tar:\n        for b_member_name, property_name in CollectionRequirement._FILE_MAPPING:\n            n_member_name = to_native(b_member_name)\n            try:\n                member = collection_tar.getmember(n_member_name)\n            except KeyError:\n                raise AnsibleError(\"Collection at '%s' does not contain the required file %s.\"\n                                   % (to_native(b_path), n_member_name))\n\n            with _tarfile_extract(collection_tar, member) as member_obj:\n                try:\n                    info[property_name] = json.loads(to_text(member_obj.read(), errors='surrogate_or_strict'))\n                except ValueError:\n                    raise AnsibleError(\"Collection tar file member %s does not contain a valid json string.\"\n                                       % n_member_name)\n\n    meta = info['manifest_file']['collection_info']\n    files = info['files_file']['files']\n\n    namespace = meta['namespace']\n    name = meta['name']\n    version = meta['version']\n    meta = CollectionVersionMetadata(namespace, name, version, None, None, meta['dependencies'])\n\n    if SemanticVersion(version).is_prerelease:\n        allow_pre_release = True\n    else:\n        allow_pre_release = False\n\n    return CollectionRequirement(namespace, name, b_path, None, [version], version, force, parent=parent,\n                                 metadata=meta, files=files, allow_pre_releases=allow_pre_release)",
                "@staticmethod\ndef from_path(b_path, force, parent=None):\n    info = {}\n    for b_file_name, property_name in CollectionRequirement._FILE_MAPPING:\n        b_file_path = os.path.join(b_path, b_file_name)\n        if not os.path.exists(b_file_path):\n            continue\n\n        with open(b_file_path, 'rb') as file_obj:\n            try:\n                info[property_name] = json.loads(to_text(file_obj.read(), errors='surrogate_or_strict'))\n            except ValueError:\n                raise AnsibleError(\"Collection file at '%s' does not contain a valid json string.\"\n                                   % to_native(b_file_path))\n\n    allow_pre_release = False\n    if 'manifest_file' in info:\n        manifest = info['manifest_file']['collection_info']\n        namespace = manifest['namespace']\n        name = manifest['name']\n        version = to_text(manifest['version'], errors='surrogate_or_strict')\n\n        try:\n            _v = SemanticVersion()\n            _v.parse(version)\n            if _v.is_prerelease:\n                allow_pre_release = True\n        except ValueError:\n            display.warning(\"Collection at '%s' does not have a valid version set, falling back to '*'. Found \"\n                            \"version: '%s'\" % (to_text(b_path), version))\n            version = '*'\n\n        dependencies = manifest['dependencies']\n    else:\n        display.warning(\"Collection at '%s' does not have a MANIFEST.json file, cannot detect version.\"\n                        % to_text(b_path))\n        parent_dir, name = os.path.split(to_text(b_path, errors='surrogate_or_strict'))\n        namespace = os.path.split(parent_dir)[1]\n\n        version = '*'\n        dependencies = {}\n\n    meta = CollectionVersionMetadata(namespace, name, version, None, None, dependencies)\n\n    files = info.get('files_file', {}).get('files', {})\n\n    return CollectionRequirement(namespace, name, b_path, None, [version], version, force, parent=parent,\n                                 metadata=meta, files=files, skip=True, allow_pre_releases=allow_pre_release)",
                "@staticmethod\ndef from_name(collection, apis, requirement, force, parent=None, allow_pre_release=False):\n    namespace, name = collection.split('.', 1)\n    galaxy_meta = None\n\n    for api in apis:\n        try:\n            if not (requirement == '*' or requirement.startswith('<') or requirement.startswith('>') or\n                    requirement.startswith('!=')):\n                # Exact requirement\n                allow_pre_release = True\n\n                if requirement.startswith('='):\n                    requirement = requirement.lstrip('=')\n\n                resp = api.get_collection_version_metadata(namespace, name, requirement)\n\n                galaxy_meta = resp\n                versions = [resp.version]\n            else:\n                versions = api.get_collection_versions(namespace, name)\n        except GalaxyError as err:\n            if err.http_code == 404:\n                display.vvv(\"Collection '%s' is not available from server %s %s\"\n                            % (collection, api.name, api.api_server))\n                continue\n            raise\n\n        display.vvv(\"Collection '%s' obtained from server %s %s\" % (collection, api.name, api.api_server))\n        break\n    else:\n        raise AnsibleError(\"Failed to find collection %s:%s\" % (collection, requirement))\n\n    req = CollectionRequirement(namespace, name, None, api, versions, requirement, force, parent=parent,\n                                metadata=galaxy_meta, allow_pre_releases=allow_pre_release)\n    return req",
                "def progress(display_queue, actual_display):\n    actual_display.debug(\"Starting display_progress display thread\")\n    t = threading.current_thread()\n\n    while True:\n        for c in \"|/-\\\\\":\n            actual_display.display(c + \"\\b\", newline=False)\n            time.sleep(0.1)\n\n            # Display a message from the main thread\n            while True:\n                try:\n                    method, args, kwargs = display_queue.get(block=False, timeout=0.1)\n                except queue.Empty:\n                    break\n                else:\n                    func = getattr(actual_display, method)\n                    func(*args, **kwargs)\n\n            if getattr(t, \"finish\", False):\n                actual_display.debug(\"Received end signal for display_progress display thread\")\n                return",
                "def _walk(b_path, b_top_level_dir):\n    for b_item in os.listdir(b_path):\n        b_abs_path = os.path.join(b_path, b_item)\n        b_rel_base_dir = b'' if b_path == b_top_level_dir else b_path[len(b_top_level_dir) + 1:]\n        b_rel_path = os.path.join(b_rel_base_dir, b_item)\n        rel_path = to_text(b_rel_path, errors='surrogate_or_strict')\n\n        if os.path.isdir(b_abs_path):\n            if any(b_item == b_path for b_path in b_ignore_dirs) or \\\n                    any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                continue\n\n            if os.path.islink(b_abs_path):\n                b_link_target = os.path.realpath(b_abs_path)\n\n                if not b_link_target.startswith(b_top_level_dir):\n                    display.warning(\"Skipping '%s' as it is a symbolic link to a directory outside the collection\"\n                                    % to_text(b_abs_path))\n                    continue\n\n            manifest_entry = entry_template.copy()\n            manifest_entry['name'] = rel_path\n            manifest_entry['ftype'] = 'dir'\n\n            manifest['files'].append(manifest_entry)\n\n            _walk(b_abs_path, b_top_level_dir)\n        else:\n            if any(fnmatch.fnmatch(b_rel_path, b_pattern) for b_pattern in b_ignore_patterns):\n                display.vvv(\"Skipping '%s' for collection build\" % to_text(b_abs_path))\n                continue\n\n            manifest_entry = entry_template.copy()\n            manifest_entry['name'] = rel_path\n            manifest_entry['ftype'] = 'file'\n            manifest_entry['chksum_type'] = 'sha256'\n            manifest_entry['chksum_sha256'] = secure_hash(b_abs_path, hash_func=sha256)\n\n            manifest['files'].append(manifest_entry)",
                "def __init__(self, display_queue):\n    self.display_queue = display_queue",
                "def __getattr__(self, attr):\n    def call_display(*args, **kwargs):\n        self.display_queue.put((attr, args, kwargs))\n\n    return call_display",
                "def call_display(*args, **kwargs):\n    self.display_queue.put((attr, args, kwargs))",
                "def reset_stat(tarinfo):\n    existing_is_exec = tarinfo.mode & stat.S_IXUSR\n    tarinfo.mode = 0o0755 if existing_is_exec or tarinfo.isdir() else 0o0644\n    tarinfo.uid = tarinfo.gid = 0\n    tarinfo.uname = tarinfo.gname = ''\n    return tarinfo"
            ],
            "inscope_function_signatures": [
                "build_collection(collection_path, output_path, force)",
                "download_collections(collections, output_path, apis, validate_certs, no_deps, allow_pre_release)",
                "publish_collection(collection_path, api, wait, timeout)",
                "install_collections(collections, output_path, apis, validate_certs, ignore_errors, no_deps, force, force_deps, allow_pre_release=False)",
                "validate_collection_name(name)",
                "validate_collection_path(collection_path)",
                "verify_collections(collections, search_paths, apis, validate_certs, ignore_errors, allow_pre_release=False)",
                "_tempdir()",
                "_tarfile_extract(tar, member)",
                "_display_progress()",
                "_get_galaxy_yml(b_galaxy_yml_path)",
                "_build_files_manifest(b_collection_path, namespace, name, ignore_patterns)",
                "_build_manifest(namespace, name, version, authors, readme, tags, description, license_ids, license_file, dependencies, repository, documentation, homepage, issues, **kwargs)",
                "_build_collection_tar(b_collection_path, b_tar_path, collection_manifest, file_manifest)",
                "find_existing_collections(path)",
                "_build_dependency_map(collections, existing_collections, b_temp_path, apis, validate_certs, force, force_deps, no_deps, allow_pre_release=False)",
                "_get_collection_info(dep_map, existing_collections, collection, requirement, source, b_temp_path, apis, validate_certs, force, parent=None, allow_pre_release=False)",
                "_download_file(url, b_path, expected_hash, validate_certs, headers=None)",
                "_extract_tar_file(tar, filename, b_dest, b_temp_path, expected_hash=None)",
                "_get_tar_file_member(tar, filename)",
                "_get_json_from_tar_file(b_path, filename)",
                "_get_tar_file_hash(b_path, filename)",
                "_consume_file(read_from, write_to=None)",
                "__init__(self, namespace, name, b_path, api, versions, requirement, force, parent=None, metadata=None, files=None, skip=False, allow_pre_releases=False)",
                "__str__(self)",
                "__unicode__(self)",
                "metadata(self)",
                "versions(self)",
                "versions(self, value)",
                "pre_releases(self)",
                "latest_version(self)",
                "dependencies(self)",
                "add_requirement(self, parent, requirement)",
                "download(self, b_path)",
                "install(self, path, b_temp_path)",
                "set_latest_version(self)",
                "verify(self, remote_collection, path, b_temp_tar_path)",
                "_verify_file_hash(self, b_path, filename, expected_hash, error_queue)",
                "_get_metadata(self)",
                "_meets_requirements(self, version, requirements, parent)",
                "from_tar(b_path, force, parent=None)",
                "from_path(b_path, force, parent=None)",
                "from_name(collection, apis, requirement, force, parent=None, allow_pre_release=False)",
                "progress(display_queue, actual_display)",
                "_walk(b_path, b_top_level_dir)",
                "__init__(self, display_queue)",
                "__getattr__(self, attr)",
                "call_display(*args, **kwargs)",
                "reset_stat(tarinfo)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    5
                ],
                "type": [
                    5
                ],
                "ImportError": [
                    29
                ],
                "urlparse": [
                    1069,
                    660,
                    45
                ],
                "six.moves.urllib.parse.urlparse": [
                    45
                ],
                "six.moves.urllib.parse": [
                    45
                ],
                "six.moves.urllib": [
                    45,
                    46
                ],
                "six.moves": [
                    45,
                    46
                ],
                "six": [
                    45,
                    46
                ],
                "urllib_error": [
                    1073,
                    46
                ],
                "six.moves.urllib.error": [
                    46
                ],
                "display": [
                    257,
                    776,
                    906,
                    524,
                    530,
                    538,
                    283,
                    284,
                    285,
                    287,
                    288,
                    416,
                    290,
                    543,
                    422,
                    1063,
                    1067,
                    1070,
                    815,
                    49,
                    694,
                    573,
                    576,
                    1089,
                    194,
                    579,
                    200,
                    460,
                    335,
                    465,
                    601,
                    1113,
                    607,
                    993,
                    1122,
                    762,
                    614,
                    1009,
                    244,
                    886,
                    759,
                    250,
                    251,
                    252,
                    893
                ],
                "Display": [
                    49
                ],
                "MANIFEST_FORMAT": [
                    870,
                    873,
                    947,
                    51,
                    949,
                    861
                ],
                "ModifiedContent": [
                    53,
                    302
                ],
                "namedtuple": [
                    53
                ],
                "_FILE_MAPPING": [
                    58
                ],
                "self.namespace": [
                    98,
                    101,
                    198,
                    82,
                    307,
                    247
                ],
                "self": [
                    256,
                    131,
                    132,
                    134,
                    136,
                    264,
                    144,
                    145,
                    273,
                    147,
                    149,
                    151,
                    280,
                    154,
                    283,
                    284,
                    157,
                    285,
                    159,
                    161,
                    162,
                    290,
                    165,
                    166,
                    305,
                    179,
                    307,
                    182,
                    183,
                    185,
                    187,
                    193,
                    194,
                    198,
                    200,
                    202,
                    203,
                    337,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    210,
                    92,
                    93,
                    95,
                    98,
                    101,
                    105,
                    106,
                    749,
                    110,
                    111,
                    112,
                    239,
                    240,
                    243,
                    116,
                    244,
                    753,
                    247,
                    120,
                    250,
                    125,
                    255
                ],
                "namespace": [
                    385,
                    439,
                    452,
                    425,
                    457,
                    664,
                    430,
                    82,
                    434,
                    851,
                    406,
                    375,
                    470,
                    378,
                    669,
                    927
                ],
                "self.name": [
                    98,
                    101,
                    198,
                    83,
                    307,
                    247
                ],
                "name": [
                    385,
                    532,
                    407,
                    664,
                    538,
                    669,
                    928,
                    424,
                    430,
                    434,
                    439,
                    452,
                    965,
                    967,
                    457,
                    83,
                    851,
                    470,
                    1111,
                    627,
                    629,
                    634,
                    376,
                    378,
                    1021,
                    1022
                ],
                "self.b_path": [
                    202,
                    203,
                    210,
                    84,
                    285,
                    159
                ],
                "b_path": [
                    385,
                    392,
                    1175,
                    417,
                    1187,
                    293,
                    423,
                    424,
                    434,
                    187,
                    84,
                    1111,
                    1113,
                    352,
                    353,
                    356,
                    999,
                    1000,
                    1001,
                    363,
                    877,
                    878,
                    879,
                    884
                ],
                "self.api": [
                    307,
                    85,
                    185,
                    187,
                    159
                ],
                "api": [
                    577,
                    452,
                    581,
                    457,
                    461,
                    557,
                    465,
                    85,
                    470,
                    442,
                    573,
                    575
                ],
                "self._versions": [
                    111,
                    112,
                    116,
                    86,
                    120
                ],
                "set": [
                    1025,
                    1028,
                    807,
                    782,
                    239,
                    112,
                    145,
                    783,
                    784,
                    116,
                    785,
                    86,
                    120,
                    1049
                ],
                "versions": [
                    165,
                    455,
                    457,
                    176,
                    114,
                    86,
                    470
                ],
                "self.force": [
                    87
                ],
                "force": [
                    385,
                    1095,
                    434,
                    470,
                    87,
                    504,
                    1078,
                    604,
                    1023
                ],
                "self.skip": [
                    88,
                    193,
                    147,
                    243
                ],
                "skip": [
                    88
                ],
                "self.required_by": [
                    144,
                    89,
                    162
                ],
                "self.allow_pre_releases": [
                    90,
                    110
                ],
                "allow_pre_releases": [
                    90
                ],
                "self._metadata": [
                    131,
                    136,
                    106,
                    305,
                    307,
                    182,
                    183,
                    92
                ],
                "metadata": [
                    92
                ],
                "self._files": [
                    93
                ],
                "files": [
                    386,
                    432,
                    435,
                    213,
                    373,
                    218,
                    93
                ],
                "self.add_requirement": [
                    95
                ],
                "parent": [
                    385,
                    1031,
                    1032,
                    1039,
                    144,
                    145,
                    1041,
                    148,
                    153,
                    157,
                    1061,
                    1062,
                    434,
                    1078,
                    1092,
                    1095,
                    1101,
                    334,
                    337,
                    470,
                    95
                ],
                "requirement": [
                    144,
                    145,
                    532,
                    533,
                    534,
                    151,
                    536,
                    154,
                    539,
                    157,
                    444,
                    445,
                    449,
                    450,
                    452,
                    1092,
                    327,
                    1095,
                    329,
                    1101,
                    334,
                    339,
                    468,
                    342,
                    470,
                    95
                ],
                "to_native": [
                    1152,
                    353,
                    98,
                    805,
                    358,
                    488,
                    1161,
                    363,
                    811,
                    1166,
                    1136,
                    401,
                    978,
                    1075,
                    1142,
                    503,
                    506,
                    1115
                ],
                "self._get_metadata": [
                    240,
                    105,
                    134
                ],
                "property": [
                    129,
                    103,
                    108,
                    118,
                    122
                ],
                "v": [
                    112,
                    145,
                    120,
                    125
                ],
                "is_prerelease": [
                    112,
                    380,
                    120
                ],
                "SemanticVersion": [
                    165,
                    112,
                    342,
                    120,
                    411,
                    380,
                    125
                ],
                "value": [
                    116
                ],
                "versions.setter": [
                    114
                ],
                "max": [
                    125
                ],
                "self.versions": [
                    132,
                    165,
                    166,
                    239,
                    145,
                    179,
                    125
                ],
                "ValueError": [
                    368,
                    415,
                    126,
                    399
                ],
                "len": [
                    1026,
                    132,
                    324,
                    968,
                    814,
                    879,
                    146,
                    660,
                    1052
                ],
                "dependencies": [
                    420,
                    136,
                    936,
                    138,
                    428,
                    141,
                    430,
                    1052
                ],
                "self._metadata.dependencies": [
                    136
                ],
                "self.required_by.append": [
                    144
                ],
                "new_versions": [
                    145,
                    146,
                    179
                ],
                "self._meets_requirements": [
                    145
                ],
                "force_flag": [
                    148,
                    151
                ],
                "version": [
                    385,
                    149,
                    151,
                    408,
                    412,
                    417,
                    418,
                    929,
                    427,
                    430,
                    434,
                    334,
                    339,
                    342,
                    377,
                    378,
                    380,
                    1021,
                    1022
                ],
                "self.latest_version": [
                    256,
                    290,
                    200,
                    239,
                    307,
                    149,
                    250,
                    255
                ],
                "msg": [
                    176,
                    150,
                    152,
                    154,
                    156
                ],
                "to_text": [
                    256,
                    1025,
                    906,
                    398,
                    151,
                    408,
                    154,
                    283,
                    284,
                    285,
                    157,
                    159,
                    1180,
                    161,
                    290,
                    417,
                    293,
                    423,
                    424,
                    1063,
                    1067,
                    816,
                    695,
                    1080,
                    190,
                    194,
                    200,
                    1098,
                    1104,
                    337,
                    1108,
                    213,
                    1113,
                    993,
                    615,
                    367,
                    881,
                    1009,
                    1010,
                    244,
                    886,
                    250,
                    894
                ],
                "AnsibleError": [
                    1165,
                    400,
                    661,
                    152,
                    674,
                    804,
                    680,
                    682,
                    810,
                    174,
                    1074,
                    692,
                    571,
                    468,
                    353,
                    612,
                    1124,
                    488,
                    362,
                    1135,
                    369,
                    1141,
                    502,
                    631,
                    505
                ],
                "collection_source": [
                    176,
                    159
                ],
                "self.api.api_server": [
                    159
                ],
                "req_by": [
                    160,
                    176
                ],
                "join": [
                    160,
                    816,
                    811,
                    165
                ],
                "p": [
                    161,
                    162,
                    853
                ],
                "r": [
                    161,
                    162
                ],
                "sorted": [
                    811,
                    165
                ],
                "self.pre_releases": [
                    166
                ],
                "pre_release_msg": [
                    176,
                    172,
                    167
                ],
                "download_url": [
                    685,
                    687,
                    688,
                    182,
                    185,
                    187
                ],
                "self._metadata.download_url": [
                    182
                ],
                "artifact_hash": [
                    187,
                    183
                ],
                "self._metadata.artifact_sha256": [
                    183
                ],
                "headers": [
                    686,
                    687,
                    688,
                    184,
                    185,
                    1115,
                    188
                ],
                "self.api._add_auth_token": [
                    185
                ],
                "b_collection_path": [
                    264,
                    273,
                    917,
                    280,
                    187,
                    190,
                    199,
                    205,
                    206,
                    207,
                    979,
                    215,
                    216,
                    224,
                    227,
                    485,
                    230,
                    486,
                    232,
                    491,
                    1006,
                    1007,
                    1008,
                    1010,
                    248,
                    508
                ],
                "_download_file": [
                    688,
                    1072,
                    187
                ],
                "self.api.validate_certs": [
                    187
                ],
                "display.display": [
                    576,
                    257,
                    194,
                    579,
                    993,
                    200,
                    524,
                    543,
                    607,
                    530,
                    244,
                    601,
                    538,
                    283,
                    284,
                    573,
                    287
                ],
                "collection_path": [
                    644,
                    485,
                    198,
                    199,
                    200,
                    645,
                    647,
                    557,
                    247,
                    248,
                    251
                ],
                "os.path.join": [
                    961,
                    227,
                    535,
                    293,
                    198,
                    486,
                    392,
                    645,
                    1001,
                    878,
                    495,
                    880,
                    1006,
                    1138,
                    979,
                    247,
                    669,
                    542
                ],
                "os.path": [
                    644,
                    645,
                    392,
                    393,
                    660,
                    535,
                    669,
                    542,
                    670,
                    293,
                    295,
                    424,
                    425,
                    1066,
                    961,
                    198,
                    205,
                    979,
                    1108,
                    988,
                    227,
                    486,
                    487,
                    232,
                    1001,
                    1002,
                    878,
                    495,
                    880,
                    1006,
                    1007,
                    883,
                    500,
                    501,
                    1138,
                    247,
                    1139,
                    889,
                    890,
                    1140,
                    1144
                ],
                "os": [
                    644,
                    645,
                    1157,
                    392,
                    393,
                    1147,
                    660,
                    535,
                    669,
                    542,
                    670,
                    293,
                    295,
                    424,
                    425,
                    1066,
                    1144,
                    961,
                    198,
                    205,
                    207,
                    979,
                    1108,
                    988,
                    227,
                    486,
                    487,
                    232,
                    233,
                    234,
                    1000,
                    1001,
                    877,
                    878,
                    495,
                    880,
                    1002,
                    1005,
                    883,
                    500,
                    501,
                    1006,
                    247,
                    1007,
                    889,
                    890,
                    1138,
                    1139,
                    1140
                ],
                "path": [
                    999,
                    198,
                    247
                ],
                "to_bytes": [
                    658,
                    540,
                    669,
                    544,
                    545,
                    293,
                    1066,
                    1068,
                    956,
                    958,
                    702,
                    199,
                    851,
                    979,
                    853,
                    1109,
                    1110,
                    227,
                    485,
                    999,
                    1138,
                    499,
                    1140,
                    248,
                    1149
                ],
                "self.download": [
                    203
                ],
                "b_temp_path": [
                    523,
                    653,
                    526,
                    1038,
                    539,
                    688,
                    1072,
                    702,
                    703,
                    704,
                    960,
                    961,
                    203,
                    215,
                    600,
                    216,
                    603,
                    224,
                    611,
                    1131,
                    1022
                ],
                "os.path.exists": [
                    487,
                    393,
                    205,
                    500,
                    1144
                ],
                "shutil.rmtree": [
                    704,
                    206,
                    230
                ],
                "shutil": [
                    704,
                    230,
                    206,
                    540,
                    1149,
                    990
                ],
                "os.makedirs": [
                    1147,
                    227,
                    207
                ],
                "tarfile.open": [
                    963,
                    356,
                    1187,
                    210,
                    1175
                ],
                "tarfile": [
                    352,
                    963,
                    356,
                    1187,
                    967,
                    210,
                    1175
                ],
                "collection_tar": [
                    224,
                    1187,
                    356,
                    1188,
                    360,
                    365,
                    210,
                    211,
                    212,
                    215,
                    216,
                    1175,
                    1176
                ],
                "files_member_obj": [
                    211,
                    212
                ],
                "collection_tar.getmember": [
                    360,
                    211
                ],
                "_tarfile_extract": [
                    1169,
                    212,
                    365
                ],
                "files_obj": [
                    212,
                    213
                ],
                "json.loads": [
                    1183,
                    213,
                    398,
                    367
                ],
                "json": [
                    398,
                    367,
                    213,
                    956,
                    958,
                    1183
                ],
                "files_obj.read": [
                    213
                ],
                "_extract_tar_file": [
                    216,
                    224,
                    215
                ],
                "file_info": [
                    225,
                    973,
                    974,
                    978,
                    218,
                    219,
                    223
                ],
                "file_name": [
                    224,
                    219,
                    220,
                    227
                ],
                "Exception": [
                    228,
                    772
                ],
                "b_namespace_path": [
                    232,
                    233,
                    234,
                    1002,
                    1001,
                    1005,
                    1006
                ],
                "os.path.dirname": [
                    232,
                    1139
                ],
                "os.listdir": [
                    1000,
                    233,
                    877,
                    1005
                ],
                "os.rmdir": [
                    234
                ],
                "display.vvv": [
                    288,
                    290,
                    1063,
                    906,
                    460,
                    465,
                    1009,
                    886,
                    1113,
                    250,
                    251,
                    252,
                    285
                ],
                "remote_collection.metadata.download_url": [
                    252,
                    685
                ],
                "remote_collection.metadata": [
                    252,
                    685
                ],
                "remote_collection": [
                    256,
                    678,
                    685,
                    687,
                    690,
                    252,
                    255
                ],
                "remote_collection.latest_version": [
                    256,
                    255
                ],
                "err": [
                    256,
                    257,
                    805,
                    615,
                    459,
                    1075,
                    695
                ],
                "modified_content": [
                    260,
                    264,
                    273,
                    280,
                    282,
                    286
                ],
                "expected_hash": [
                    1121,
                    1122,
                    1123,
                    263,
                    264,
                    301,
                    270,
                    302,
                    1134,
                    273,
                    279,
                    280
                ],
                "_get_tar_file_hash": [
                    263
                ],
                "b_temp_tar_path": [
                    263,
                    265,
                    688,
                    274,
                    690
                ],
                "self._verify_file_hash": [
                    264,
                    273,
                    280
                ],
                "manifest": [
                    420,
                    901,
                    265,
                    268,
                    919,
                    915,
                    405,
                    406,
                    407,
                    408,
                    952,
                    925,
                    863
                ],
                "_get_json_from_tar_file": [
                    265,
                    274
                ],
                "file_manifest_data": [
                    268,
                    269,
                    270
                ],
                "file_manifest_filename": [
                    273,
                    274,
                    269
                ],
                "file_manifest": [
                    491,
                    508,
                    973,
                    274,
                    277,
                    956
                ],
                "manifest_data": [
                    280,
                    277,
                    278,
                    279
                ],
                "content_change": [
                    288,
                    286,
                    287
                ],
                "content_change.filename": [
                    287
                ],
                "content_change.expected": [
                    288
                ],
                "content_change.installed": [
                    288
                ],
                "b_file_path": [
                    293,
                    1126,
                    295,
                    392,
                    393,
                    298,
                    396,
                    401,
                    1111,
                    1118
                ],
                "filename": [
                    1152,
                    1188,
                    293,
                    1161,
                    1130,
                    302,
                    1136,
                    978,
                    979,
                    1138,
                    1142,
                    1176,
                    988
                ],
                "os.path.isfile": [
                    1002,
                    660,
                    1066,
                    295
                ],
                "actual_hash": [
                    1122,
                    1123,
                    296,
                    299,
                    1132,
                    301,
                    302,
                    1134,
                    1119
                ],
                "open": [
                    544,
                    801,
                    298,
                    396,
                    1118
                ],
                "file_object": [
                    298,
                    299
                ],
                "_consume_file": [
                    299,
                    1132,
                    1189,
                    1119
                ],
                "error_queue.append": [
                    302
                ],
                "error_queue": [
                    302
                ],
                "self.api.get_collection_version_metadata": [
                    307
                ],
                "op_map": [
                    313,
                    325
                ],
                "operator.ne": [
                    314
                ],
                "operator": [
                    320,
                    330,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319
                ],
                "operator.eq": [
                    330,
                    315,
                    316
                ],
                "operator.ge": [
                    317
                ],
                "operator.gt": [
                    318
                ],
                "operator.le": [
                    319
                ],
                "operator.lt": [
                    320
                ],
                "req": [
                    323,
                    324,
                    325,
                    327,
                    329,
                    1008,
                    337,
                    1009,
                    1011,
                    470,
                    1078,
                    472,
                    1080,
                    1083,
                    1085
                ],
                "list": [
                    323,
                    828,
                    798
                ],
                "requirements.split": [
                    323
                ],
                "requirements": [
                    536,
                    529,
                    323,
                    545
                ],
                "op_pos": [
                    324,
                    325,
                    327
                ],
                "op": [
                    328,
                    330,
                    325,
                    342
                ],
                "op_map.get": [
                    325
                ],
                "display.warning": [
                    416,
                    614,
                    422,
                    335,
                    815,
                    694,
                    893
                ],
                "SemanticVersion.from_loose_version": [
                    342
                ],
                "LooseVersion": [
                    342
                ],
                "tarfile.is_tarfile": [
                    352
                ],
                "info": [
                    355,
                    390,
                    398,
                    367,
                    432,
                    787,
                    372,
                    373,
                    404,
                    405,
                    788,
                    789,
                    795,
                    796
                ],
                "b_member_name": [
                    357,
                    358
                ],
                "property_name": [
                    391,
                    357,
                    398,
                    367
                ],
                "CollectionRequirement._FILE_MAPPING": [
                    357,
                    391
                ],
                "CollectionRequirement": [
                    385,
                    357,
                    678,
                    391,
                    1095,
                    1008,
                    434,
                    470,
                    1078,
                    671
                ],
                "n_member_name": [
                    360,
                    370,
                    363,
                    358
                ],
                "member": [
                    709,
                    360,
                    1163,
                    365,
                    1169
                ],
                "KeyError": [
                    361,
                    1164
                ],
                "member_obj": [
                    365,
                    367
                ],
                "member_obj.read": [
                    367
                ],
                "meta": [
                    386,
                    430,
                    435,
                    372,
                    375,
                    376,
                    377,
                    378
                ],
                "CollectionVersionMetadata": [
                    378,
                    430
                ],
                "allow_pre_release": [
                    386,
                    605,
                    679,
                    1096,
                    447,
                    527,
                    1039,
                    403,
                    435,
                    471,
                    1023,
                    381,
                    414,
                    383
                ],
                "staticmethod": [
                    388,
                    437,
                    350
                ],
                "b_file_name": [
                    392,
                    1109,
                    1111,
                    391
                ],
                "file_obj": [
                    396,
                    398
                ],
                "file_obj.read": [
                    398
                ],
                "_v": [
                    411,
                    412,
                    413
                ],
                "_v.parse": [
                    412
                ],
                "_v.is_prerelease": [
                    413
                ],
                "parent_dir": [
                    424,
                    425
                ],
                "os.path.split": [
                    424,
                    425,
                    644
                ],
                "get": [
                    432
                ],
                "info.get": [
                    432,
                    795,
                    788
                ],
                "collection.split": [
                    439
                ],
                "collection": [
                    654,
                    658,
                    660,
                    661,
                    663,
                    665,
                    1050,
                    1051,
                    1052,
                    1053,
                    1063,
                    681,
                    682,
                    1066,
                    1067,
                    1068,
                    1069,
                    1070,
                    1072,
                    1075,
                    695,
                    439,
                    1087,
                    1089,
                    1090,
                    1091,
                    1095,
                    461,
                    465,
                    468,
                    609,
                    611,
                    615,
                    627,
                    628
                ],
                "galaxy_meta": [
                    440,
                    454,
                    471
                ],
                "apis": [
                    678,
                    1094,
                    1095,
                    526,
                    1038,
                    442,
                    603,
                    1022
                ],
                "requirement.startswith": [
                    449,
                    444,
                    445
                ],
                "requirement.lstrip": [
                    450
                ],
                "resp": [
                    452,
                    454,
                    455,
                    1115,
                    1119
                ],
                "api.get_collection_version_metadata": [
                    452
                ],
                "resp.version": [
                    455
                ],
                "api.get_collection_versions": [
                    457
                ],
                "GalaxyError": [
                    458
                ],
                "err.http_code": [
                    459
                ],
                "api.name": [
                    577,
                    581,
                    461,
                    465,
                    573
                ],
                "api.api_server": [
                    577,
                    581,
                    461,
                    465,
                    573
                ],
                "b_galaxy_path": [
                    488,
                    490,
                    486,
                    487
                ],
                "collection_meta": [
                    490,
                    491,
                    492,
                    493,
                    495,
                    496,
                    497
                ],
                "_get_galaxy_yml": [
                    490
                ],
                "_build_files_manifest": [
                    491
                ],
                "collection_manifest": [
                    992,
                    493,
                    508,
                    957,
                    958,
                    991
                ],
                "_build_manifest": [
                    493
                ],
                "collection_output": [
                    503,
                    506,
                    499,
                    495
                ],
                "output_path": [
                    611,
                    495,
                    530,
                    598,
                    535,
                    542
                ],
                "b_collection_output": [
                    508,
                    499,
                    500,
                    501
                ],
                "os.path.isdir": [
                    883,
                    501,
                    670,
                    1007
                ],
                "_build_collection_tar": [
                    508
                ],
                "_tempdir": [
                    600,
                    523,
                    653,
                    960
                ],
                "_display_progress": [
                    608,
                    652,
                    525,
                    531,
                    602,
                    574
                ],
                "dep_map": [
                    1090,
                    1091,
                    526,
                    1104,
                    532,
                    1081,
                    1082
                ],
                "_build_dependency_map": [
                    603,
                    526
                ],
                "collections": [
                    997,
                    654,
                    526,
                    1011,
                    1013,
                    603,
                    1021
                ],
                "validate_certs": [
                    1038,
                    526,
                    688,
                    1072,
                    1115,
                    604,
                    1023
                ],
                "no_deps": [
                    1027,
                    604,
                    1052,
                    526
                ],
                "dep_map.items": [
                    532
                ],
                "collection_filename": [
                    536,
                    533,
                    535
                ],
                "requirement.namespace": [
                    533
                ],
                "requirement.name": [
                    533
                ],
                "requirement.latest_version": [
                    536,
                    534
                ],
                "dest_path": [
                    538,
                    540,
                    535
                ],
                "requirements.append": [
                    536
                ],
                "b_temp_download_path": [
                    539,
                    540
                ],
                "requirement.download": [
                    539
                ],
                "shutil.move": [
                    540,
                    1149
                ],
                "requirements_path": [
                    544,
                    542,
                    543
                ],
                "req_fd": [
                    544,
                    545
                ],
                "req_fd.write": [
                    545
                ],
                "yaml.safe_dump": [
                    545
                ],
                "yaml": [
                    545,
                    802
                ],
                "import_uri": [
                    571,
                    565,
                    581,
                    557
                ],
                "api.publish_collection": [
                    557
                ],
                "wait": [
                    559
                ],
                "task_id": [
                    570,
                    564,
                    575,
                    567
                ],
                "path_segment": [
                    565,
                    566,
                    567
                ],
                "reversed": [
                    565
                ],
                "import_uri.split": [
                    565
                ],
                "api.wait_import_task": [
                    575
                ],
                "timeout": [
                    575
                ],
                "existing_collections": [
                    1098,
                    1037,
                    598,
                    603,
                    1022
                ],
                "find_existing_collections": [
                    598
                ],
                "dependency_map": [
                    1025,
                    609,
                    1026,
                    1028,
                    1032,
                    1051,
                    1037,
                    1049,
                    1018,
                    603,
                    1052,
                    1022,
                    1055
                ],
                "force_deps": [
                    604,
                    1038,
                    1023
                ],
                "dependency_map.values": [
                    609,
                    1025
                ],
                "collection.install": [
                    611
                ],
                "ignore_errors": [
                    613,
                    693
                ],
                "dummy": [
                    627
                ],
                "name.partition": [
                    627
                ],
                "AnsibleCollectionRef.is_valid_collection_name": [
                    628
                ],
                "AnsibleCollectionRef": [
                    628
                ],
                "local_collection": [
                    657,
                    690,
                    673,
                    671
                ],
                "b_collection": [
                    658,
                    660,
                    1005,
                    1006
                ],
                "scheme.lower": [
                    660,
                    1069
                ],
                "scheme": [
                    660,
                    1069
                ],
                "split": [
                    660
                ],
                "collection_name": [
                    993,
                    674,
                    1082,
                    678,
                    663,
                    664,
                    1081,
                    1080,
                    991
                ],
                "collection_name.split": [
                    664
                ],
                "collection_version": [
                    665,
                    678
                ],
                "search_path": [
                    690,
                    668,
                    669
                ],
                "search_paths": [
                    668
                ],
                "b_search_path": [
                    669,
                    670,
                    671
                ],
                "CollectionRequirement.from_path": [
                    1008,
                    671
                ],
                "CollectionRequirement.from_name": [
                    678,
                    1095
                ],
                "e.message": [
                    681
                ],
                "e": [
                    681
                ],
                "remote_collection.api._add_auth_token": [
                    687
                ],
                "remote_collection.api": [
                    687
                ],
                "local_collection.verify": [
                    690
                ],
                "tempfile.mkdtemp": [
                    702
                ],
                "tempfile": [
                    1131,
                    702,
                    1111
                ],
                "C.DEFAULT_LOCAL_TMP": [
                    702
                ],
                "C": [
                    716,
                    702
                ],
                "contextmanager": [
                    714,
                    707,
                    700
                ],
                "tar_obj": [
                    1188,
                    709,
                    710,
                    711,
                    1189,
                    1130,
                    1132,
                    1176,
                    1178,
                    1181
                ],
                "tar.extractfile": [
                    709
                ],
                "tar": [
                    1152,
                    709,
                    1130,
                    1163,
                    1166,
                    1136,
                    1169
                ],
                "tar_obj.close": [
                    711
                ],
                "config_display": [
                    716,
                    717
                ],
                "C.GALAXY_DISPLAY_PROGRESS": [
                    716
                ],
                "display_wheel": [
                    717,
                    719
                ],
                "sys.stdout.isatty": [
                    717
                ],
                "sys.stdout": [
                    717
                ],
                "sys": [
                    717
                ],
                "actual_display.debug": [
                    724,
                    743
                ],
                "actual_display": [
                    729,
                    739,
                    724,
                    743
                ],
                "t": [
                    770,
                    771,
                    742,
                    725,
                    763,
                    764,
                    765
                ],
                "threading.current_thread": [
                    725
                ],
                "threading": [
                    763,
                    725
                ],
                "c": [
                    728,
                    729,
                    1098,
                    1025
                ],
                "actual_display.display": [
                    729
                ],
                "time.sleep": [
                    730
                ],
                "time": [
                    969,
                    730
                ],
                "method": [
                    739,
                    735
                ],
                "args": [
                    753,
                    740,
                    735
                ],
                "kwargs": [
                    753,
                    740,
                    735
                ],
                "display_queue.get": [
                    735
                ],
                "display_queue": [
                    749,
                    761,
                    762,
                    763,
                    735
                ],
                "queue.Empty": [
                    736
                ],
                "queue": [
                    736,
                    761
                ],
                "func": [
                    739,
                    740
                ],
                "getattr": [
                    739,
                    742
                ],
                "object": [
                    746
                ],
                "self.display_queue": [
                    753,
                    749
                ],
                "self.display_queue.put": [
                    753
                ],
                "attr": [
                    753
                ],
                "call_display": [
                    755
                ],
                "old_display": [
                    776,
                    763,
                    759
                ],
                "queue.Queue": [
                    761
                ],
                "DisplayThread": [
                    762
                ],
                "threading.Thread": [
                    763
                ],
                "progress": [
                    763
                ],
                "t.daemon": [
                    764
                ],
                "t.start": [
                    765
                ],
                "t.finish": [
                    770
                ],
                "t.join": [
                    771
                ],
                "meta_info": [
                    787,
                    780
                ],
                "get_collections_galaxy_meta_info": [
                    780
                ],
                "mandatory_keys": [
                    808,
                    789,
                    782,
                    798
                ],
                "string_keys": [
                    792,
                    819,
                    798,
                    783
                ],
                "list_keys": [
                    784,
                    793,
                    798,
                    823
                ],
                "dict_keys": [
                    785,
                    794,
                    798,
                    831
                ],
                "mandatory_keys.add": [
                    789
                ],
                "key_list_type": [
                    796,
                    791
                ],
                "key_list_type.add": [
                    796
                ],
                "all_keys": [
                    813,
                    798
                ],
                "frozenset": [
                    854,
                    798
                ],
                "b_galaxy_yml_path": [
                    816,
                    801,
                    811,
                    805
                ],
                "g_yaml": [
                    801,
                    802
                ],
                "galaxy_yml": [
                    832,
                    833,
                    802,
                    836,
                    837,
                    807,
                    839,
                    820,
                    821,
                    824,
                    827,
                    829
                ],
                "yaml.safe_load": [
                    802
                ],
                "YAMLError": [
                    803
                ],
                "set_keys": [
                    808,
                    813,
                    807
                ],
                "galaxy_yml.keys": [
                    807
                ],
                "missing_keys": [
                    808,
                    809,
                    811
                ],
                "mandatory_keys.difference": [
                    808
                ],
                "extra_keys": [
                    816,
                    813,
                    814
                ],
                "set_keys.difference": [
                    813
                ],
                "optional_string": [
                    819,
                    820,
                    821
                ],
                "optional_list": [
                    824,
                    827,
                    829,
                    823
                ],
                "list_val": [
                    824,
                    826,
                    828,
                    829
                ],
                "galaxy_yml.get": [
                    824
                ],
                "isinstance": [
                    828
                ],
                "optional_dict": [
                    832,
                    833,
                    831
                ],
                "b_ignore_patterns": [
                    905,
                    885,
                    853,
                    845
                ],
                "format": [
                    851
                ],
                "ignore_patterns": [
                    853
                ],
                "b_ignore_dirs": [
                    884,
                    854
                ],
                "entry_template": [
                    856,
                    897,
                    909
                ],
                "b_item": [
                    880,
                    884,
                    877,
                    878
                ],
                "b_abs_path": [
                    903,
                    906,
                    878,
                    913,
                    883,
                    886,
                    889,
                    890,
                    894
                ],
                "b_rel_base_dir": [
                    880,
                    879
                ],
                "b_top_level_dir": [
                    903,
                    892,
                    879
                ],
                "b_rel_path": [
                    880,
                    881,
                    905,
                    885
                ],
                "rel_path": [
                    881,
                    898,
                    910
                ],
                "any": [
                    905,
                    884,
                    885
                ],
                "fnmatch.fnmatch": [
                    905,
                    885
                ],
                "fnmatch": [
                    905,
                    885
                ],
                "b_pattern": [
                    905,
                    885
                ],
                "os.path.islink": [
                    889
                ],
                "b_link_target": [
                    890,
                    892
                ],
                "os.path.realpath": [
                    890,
                    988
                ],
                "b_link_target.startswith": [
                    892
                ],
                "manifest_entry": [
                    897,
                    898,
                    899,
                    901,
                    909,
                    910,
                    911,
                    912,
                    913,
                    915
                ],
                "entry_template.copy": [
                    897,
                    909
                ],
                "append": [
                    915,
                    901
                ],
                "_walk": [
                    917,
                    903
                ],
                "secure_hash": [
                    913
                ],
                "sha256": [
                    913,
                    1194,
                    957
                ],
                "authors": [
                    930
                ],
                "readme": [
                    931
                ],
                "tags": [
                    932
                ],
                "description": [
                    933
                ],
                "license_ids": [
                    934
                ],
                "license_file": [
                    935
                ],
                "repository": [
                    937
                ],
                "documentation": [
                    938
                ],
                "homepage": [
                    939
                ],
                "issues": [
                    940
                ],
                "files_manifest_json": [
                    965,
                    956,
                    957
                ],
                "json.dumps": [
                    956,
                    958
                ],
                "secure_hash_s": [
                    957
                ],
                "collection_manifest_json": [
                    965,
                    958
                ],
                "b_tar_filepath": [
                    961,
                    963,
                    990
                ],
                "os.path.basename": [
                    961
                ],
                "b_tar_path": [
                    961,
                    993,
                    1065,
                    1068,
                    1072,
                    1077,
                    1078,
                    990
                ],
                "tar_file": [
                    963,
                    988,
                    971
                ],
                "b": [
                    968,
                    965,
                    966
                ],
                "b_io": [
                    971,
                    966
                ],
                "BytesIO": [
                    966
                ],
                "tar_info": [
                    967,
                    968,
                    969,
                    970,
                    971
                ],
                "tarfile.TarInfo": [
                    967
                ],
                "tar_info.size": [
                    968
                ],
                "tar_info.mtime": [
                    969
                ],
                "time.time": [
                    969
                ],
                "tar_info.mode": [
                    970
                ],
                "tar_file.addfile": [
                    971
                ],
                "b_src_path": [
                    979,
                    988
                ],
                "existing_is_exec": [
                    982,
                    983
                ],
                "tarinfo.mode": [
                    982,
                    983
                ],
                "tarinfo": [
                    982,
                    983,
                    984,
                    985,
                    986
                ],
                "stat.S_IXUSR": [
                    1154,
                    982
                ],
                "stat": [
                    1154,
                    982
                ],
                "tarinfo.isdir": [
                    983
                ],
                "tarinfo.uid": [
                    984
                ],
                "tarinfo.gid": [
                    984
                ],
                "tarinfo.uname": [
                    985
                ],
                "tarinfo.gname": [
                    985
                ],
                "tar_file.add": [
                    988
                ],
                "reset_stat": [
                    988
                ],
                "shutil.copy": [
                    990
                ],
                "b_namespace": [
                    1000,
                    1001
                ],
                "req.latest_version": [
                    1009,
                    1083
                ],
                "collections.append": [
                    1011
                ],
                "source": [
                    1094,
                    1021,
                    1022
                ],
                "_get_collection_info": [
                    1037,
                    1022
                ],
                "checked_parents": [
                    1025,
                    1026,
                    1028,
                    1041,
                    1049,
                    1053
                ],
                "c.skip": [
                    1025
                ],
                "parents_to_check": [
                    1028,
                    1031
                ],
                "difference": [
                    1049,
                    1028
                ],
                "dependency_map.keys": [
                    1049,
                    1028
                ],
                "deps_exhausted": [
                    1035,
                    1044,
                    1030
                ],
                "parent_info": [
                    1032,
                    1034,
                    1036,
                    1038
                ],
                "parent_info.dependencies": [
                    1034,
                    1036
                ],
                "dep_name": [
                    1036,
                    1037
                ],
                "dep_requirement": [
                    1036,
                    1037
                ],
                "parent_info.dependencies.items": [
                    1036
                ],
                "parent_info.api": [
                    1038
                ],
                "checked_parents.add": [
                    1041,
                    1053
                ],
                "deps_not_checked": [
                    1049,
                    1050
                ],
                "set_latest_version": [
                    1051
                ],
                "dep_msg": [
                    1060,
                    1062,
                    1063
                ],
                "display.vvvv": [
                    1089,
                    1122,
                    1067,
                    1070
                ],
                "urllib_error.URLError": [
                    1073
                ],
                "CollectionRequirement.from_tar": [
                    1078
                ],
                "collection_info": [
                    1091,
                    1092,
                    1095,
                    1098,
                    1099,
                    1102,
                    1104,
                    1082,
                    1083,
                    1085
                ],
                "collection_info.add_requirement": [
                    1083,
                    1092
                ],
                "validate_collection_name": [
                    1087
                ],
                "existing": [
                    1098,
                    1099,
                    1101,
                    1102
                ],
                "collection_info.force": [
                    1099
                ],
                "add_requirement": [
                    1101
                ],
                "urlsplit": [
                    1108,
                    1109,
                    1110
                ],
                "os.path.splitext": [
                    1108
                ],
                "url.rsplit": [
                    1108
                ],
                "url": [
                    1113,
                    1115,
                    1108
                ],
                "b_file_ext": [
                    1110,
                    1111
                ],
                "tempfile.NamedTemporaryFile": [
                    1131,
                    1111
                ],
                "open_url": [
                    1115
                ],
                "user_agent": [
                    1116
                ],
                "download_file": [
                    1118,
                    1119
                ],
                "_get_tar_file_member": [
                    1176,
                    1130,
                    1188
                ],
                "tmpfile_obj": [
                    1131,
                    1132,
                    1149
                ],
                "tar.name": [
                    1136,
                    1166
                ],
                "b_dest_filepath": [
                    1138,
                    1139,
                    1149,
                    1157
                ],
                "os.path.abspath": [
                    1138
                ],
                "b_dest": [
                    1138,
                    1140
                ],
                "b_parent_dir": [
                    1144,
                    1147,
                    1139,
                    1140
                ],
                "b_parent_dir.startswith": [
                    1140
                ],
                "os.path.sep": [
                    1140
                ],
                "tmpfile_obj.name": [
                    1149
                ],
                "tar_member": [
                    1152,
                    1154
                ],
                "tar.getmember": [
                    1152,
                    1163
                ],
                "new_mode": [
                    1153,
                    1155,
                    1157
                ],
                "stat.S_IMODE": [
                    1154
                ],
                "tar_member.mode": [
                    1154
                ],
                "os.chmod": [
                    1157
                ],
                "n_filename": [
                    1161,
                    1163,
                    1167
                ],
                "file_contents": [
                    1180,
                    1173,
                    1183
                ],
                "bufsize": [
                    1193,
                    1195,
                    1201,
                    1177,
                    1178,
                    1181
                ],
                "data": [
                    1195,
                    1196,
                    1198,
                    1200,
                    1201,
                    1178,
                    1179,
                    1180,
                    1181
                ],
                "tar_obj.read": [
                    1178,
                    1181
                ],
                "sha256_digest": [
                    1200,
                    1194,
                    1203
                ],
                "read_from.read": [
                    1201,
                    1195
                ],
                "read_from": [
                    1201,
                    1195
                ],
                "write_to": [
                    1197,
                    1198,
                    1199
                ],
                "write_to.write": [
                    1198
                ],
                "write_to.flush": [
                    1199
                ],
                "sha256_digest.update": [
                    1200
                ],
                "sha256_digest.hexdigest": [
                    1203
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    5
                ],
                "urlparse": [
                    1069,
                    660,
                    45
                ],
                "six.moves.urllib.parse.urlparse": [
                    45
                ],
                "six.moves.urllib.parse": [
                    45
                ],
                "six.moves.urllib": [
                    45,
                    46
                ],
                "six.moves": [
                    45,
                    46
                ],
                "six": [
                    45,
                    46
                ],
                "urllib_error": [
                    1073,
                    46
                ],
                "six.moves.urllib.error": [
                    46
                ],
                "display": [
                    257,
                    776,
                    906,
                    524,
                    530,
                    538,
                    283,
                    284,
                    285,
                    287,
                    288,
                    416,
                    290,
                    543,
                    422,
                    1063,
                    1067,
                    1070,
                    815,
                    49,
                    694,
                    573,
                    576,
                    1089,
                    194,
                    579,
                    200,
                    460,
                    335,
                    465,
                    601,
                    1113,
                    607,
                    993,
                    1122,
                    762,
                    614,
                    1009,
                    244,
                    886,
                    759,
                    250,
                    251,
                    252,
                    893
                ],
                "Display": [
                    49
                ],
                "MANIFEST_FORMAT": [
                    870,
                    873,
                    947,
                    51,
                    949,
                    861
                ],
                "ModifiedContent": [
                    53,
                    302
                ],
                "namedtuple": [
                    53
                ],
                "_FILE_MAPPING": [
                    58
                ],
                "self.namespace": [
                    98,
                    101,
                    198,
                    82,
                    307,
                    247
                ],
                "self": [
                    256,
                    131,
                    132,
                    134,
                    136,
                    264,
                    144,
                    145,
                    273,
                    147,
                    149,
                    151,
                    280,
                    154,
                    283,
                    284,
                    157,
                    285,
                    159,
                    161,
                    162,
                    290,
                    165,
                    166,
                    305,
                    179,
                    307,
                    182,
                    183,
                    185,
                    187,
                    193,
                    194,
                    198,
                    200,
                    202,
                    203,
                    337,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    210,
                    92,
                    93,
                    95,
                    98,
                    101,
                    105,
                    106,
                    749,
                    110,
                    111,
                    112,
                    239,
                    240,
                    243,
                    116,
                    244,
                    753,
                    247,
                    120,
                    250,
                    125,
                    255
                ],
                "namespace": [
                    385,
                    439,
                    452,
                    425,
                    457,
                    664,
                    430,
                    82,
                    434,
                    851,
                    406,
                    375,
                    470,
                    378,
                    669,
                    927
                ],
                "self.name": [
                    98,
                    101,
                    198,
                    83,
                    307,
                    247
                ],
                "name": [
                    385,
                    532,
                    407,
                    664,
                    538,
                    669,
                    928,
                    424,
                    430,
                    434,
                    439,
                    452,
                    965,
                    967,
                    457,
                    83,
                    851,
                    470,
                    1111,
                    627,
                    629,
                    634,
                    376,
                    378,
                    1021,
                    1022
                ],
                "self.b_path": [
                    202,
                    203,
                    210,
                    84,
                    285,
                    159
                ],
                "b_path": [
                    385,
                    392,
                    1175,
                    417,
                    1187,
                    293,
                    423,
                    424,
                    434,
                    187,
                    84,
                    1111,
                    1113,
                    352,
                    353,
                    356,
                    999,
                    1000,
                    1001,
                    363,
                    877,
                    878,
                    879,
                    884
                ],
                "self.api": [
                    307,
                    85,
                    185,
                    187,
                    159
                ],
                "api": [
                    577,
                    452,
                    581,
                    457,
                    461,
                    557,
                    465,
                    85,
                    470,
                    442,
                    573,
                    575
                ],
                "self._versions": [
                    111,
                    112,
                    116,
                    86,
                    120
                ],
                "versions": [
                    165,
                    455,
                    457,
                    176,
                    114,
                    86,
                    470
                ],
                "self.force": [
                    87
                ],
                "force": [
                    385,
                    1095,
                    434,
                    470,
                    87,
                    504,
                    1078,
                    604,
                    1023
                ],
                "self.skip": [
                    88,
                    193,
                    147,
                    243
                ],
                "skip": [
                    88
                ],
                "self.required_by": [
                    144,
                    89,
                    162
                ],
                "self.allow_pre_releases": [
                    90,
                    110
                ],
                "allow_pre_releases": [
                    90
                ],
                "self._metadata": [
                    131,
                    136,
                    106,
                    305,
                    307,
                    182,
                    183,
                    92
                ],
                "metadata": [
                    92
                ],
                "self._files": [
                    93
                ],
                "files": [
                    386,
                    432,
                    435,
                    213,
                    373,
                    218,
                    93
                ],
                "self.add_requirement": [
                    95
                ],
                "parent": [
                    385,
                    1031,
                    1032,
                    1039,
                    144,
                    145,
                    1041,
                    148,
                    153,
                    157,
                    1061,
                    1062,
                    434,
                    1078,
                    1092,
                    1095,
                    1101,
                    334,
                    337,
                    470,
                    95
                ],
                "requirement": [
                    144,
                    145,
                    532,
                    533,
                    534,
                    151,
                    536,
                    154,
                    539,
                    157,
                    444,
                    445,
                    449,
                    450,
                    452,
                    1092,
                    327,
                    1095,
                    329,
                    1101,
                    334,
                    339,
                    468,
                    342,
                    470,
                    95
                ],
                "to_native": [
                    1152,
                    353,
                    98,
                    805,
                    358,
                    488,
                    1161,
                    363,
                    811,
                    1166,
                    1136,
                    401,
                    978,
                    1075,
                    1142,
                    503,
                    506,
                    1115
                ],
                "self._get_metadata": [
                    240,
                    105,
                    134
                ],
                "v": [
                    112,
                    145,
                    120,
                    125
                ],
                "is_prerelease": [
                    112,
                    380,
                    120
                ],
                "SemanticVersion": [
                    165,
                    112,
                    342,
                    120,
                    411,
                    380,
                    125
                ],
                "value": [
                    116
                ],
                "versions.setter": [
                    114
                ],
                "self.versions": [
                    132,
                    165,
                    166,
                    239,
                    145,
                    179,
                    125
                ],
                "dependencies": [
                    420,
                    136,
                    936,
                    138,
                    428,
                    141,
                    430,
                    1052
                ],
                "self._metadata.dependencies": [
                    136
                ],
                "self.required_by.append": [
                    144
                ],
                "new_versions": [
                    145,
                    146,
                    179
                ],
                "self._meets_requirements": [
                    145
                ],
                "force_flag": [
                    148,
                    151
                ],
                "version": [
                    385,
                    149,
                    151,
                    408,
                    412,
                    417,
                    418,
                    929,
                    427,
                    430,
                    434,
                    334,
                    339,
                    342,
                    377,
                    378,
                    380,
                    1021,
                    1022
                ],
                "self.latest_version": [
                    256,
                    290,
                    200,
                    239,
                    307,
                    149,
                    250,
                    255
                ],
                "msg": [
                    176,
                    150,
                    152,
                    154,
                    156
                ],
                "to_text": [
                    256,
                    1025,
                    906,
                    398,
                    151,
                    408,
                    154,
                    283,
                    284,
                    285,
                    157,
                    159,
                    1180,
                    161,
                    290,
                    417,
                    293,
                    423,
                    424,
                    1063,
                    1067,
                    816,
                    695,
                    1080,
                    190,
                    194,
                    200,
                    1098,
                    1104,
                    337,
                    1108,
                    213,
                    1113,
                    993,
                    615,
                    367,
                    881,
                    1009,
                    1010,
                    244,
                    886,
                    250,
                    894
                ],
                "AnsibleError": [
                    1165,
                    400,
                    661,
                    152,
                    674,
                    804,
                    680,
                    682,
                    810,
                    174,
                    1074,
                    692,
                    571,
                    468,
                    353,
                    612,
                    1124,
                    488,
                    362,
                    1135,
                    369,
                    1141,
                    502,
                    631,
                    505
                ],
                "collection_source": [
                    176,
                    159
                ],
                "self.api.api_server": [
                    159
                ],
                "req_by": [
                    160,
                    176
                ],
                "join": [
                    160,
                    816,
                    811,
                    165
                ],
                "p": [
                    161,
                    162,
                    853
                ],
                "r": [
                    161,
                    162
                ],
                "self.pre_releases": [
                    166
                ],
                "pre_release_msg": [
                    176,
                    172,
                    167
                ],
                "download_url": [
                    685,
                    687,
                    688,
                    182,
                    185,
                    187
                ],
                "self._metadata.download_url": [
                    182
                ],
                "artifact_hash": [
                    187,
                    183
                ],
                "self._metadata.artifact_sha256": [
                    183
                ],
                "headers": [
                    686,
                    687,
                    688,
                    184,
                    185,
                    1115,
                    188
                ],
                "self.api._add_auth_token": [
                    185
                ],
                "b_collection_path": [
                    264,
                    273,
                    917,
                    280,
                    187,
                    190,
                    199,
                    205,
                    206,
                    207,
                    979,
                    215,
                    216,
                    224,
                    227,
                    485,
                    230,
                    486,
                    232,
                    491,
                    1006,
                    1007,
                    1008,
                    1010,
                    248,
                    508
                ],
                "_download_file": [
                    688,
                    1072,
                    187
                ],
                "self.api.validate_certs": [
                    187
                ],
                "display.display": [
                    576,
                    257,
                    194,
                    579,
                    993,
                    200,
                    524,
                    543,
                    607,
                    530,
                    244,
                    601,
                    538,
                    283,
                    284,
                    573,
                    287
                ],
                "collection_path": [
                    644,
                    485,
                    198,
                    199,
                    200,
                    645,
                    647,
                    557,
                    247,
                    248,
                    251
                ],
                "os.path.join": [
                    961,
                    227,
                    535,
                    293,
                    198,
                    486,
                    392,
                    645,
                    1001,
                    878,
                    495,
                    880,
                    1006,
                    1138,
                    979,
                    247,
                    669,
                    542
                ],
                "os.path": [
                    644,
                    645,
                    392,
                    393,
                    660,
                    535,
                    669,
                    542,
                    670,
                    293,
                    295,
                    424,
                    425,
                    1066,
                    961,
                    198,
                    205,
                    979,
                    1108,
                    988,
                    227,
                    486,
                    487,
                    232,
                    1001,
                    1002,
                    878,
                    495,
                    880,
                    1006,
                    1007,
                    883,
                    500,
                    501,
                    1138,
                    247,
                    1139,
                    889,
                    890,
                    1140,
                    1144
                ],
                "os": [
                    644,
                    645,
                    1157,
                    392,
                    393,
                    1147,
                    660,
                    535,
                    669,
                    542,
                    670,
                    293,
                    295,
                    424,
                    425,
                    1066,
                    1144,
                    961,
                    198,
                    205,
                    207,
                    979,
                    1108,
                    988,
                    227,
                    486,
                    487,
                    232,
                    233,
                    234,
                    1000,
                    1001,
                    877,
                    878,
                    495,
                    880,
                    1002,
                    1005,
                    883,
                    500,
                    501,
                    1006,
                    247,
                    1007,
                    889,
                    890,
                    1138,
                    1139,
                    1140
                ],
                "path": [
                    999,
                    198,
                    247
                ],
                "to_bytes": [
                    658,
                    540,
                    669,
                    544,
                    545,
                    293,
                    1066,
                    1068,
                    956,
                    958,
                    702,
                    199,
                    851,
                    979,
                    853,
                    1109,
                    1110,
                    227,
                    485,
                    999,
                    1138,
                    499,
                    1140,
                    248,
                    1149
                ],
                "self.download": [
                    203
                ],
                "b_temp_path": [
                    523,
                    653,
                    526,
                    1038,
                    539,
                    688,
                    1072,
                    702,
                    703,
                    704,
                    960,
                    961,
                    203,
                    215,
                    600,
                    216,
                    603,
                    224,
                    611,
                    1131,
                    1022
                ],
                "os.path.exists": [
                    487,
                    393,
                    205,
                    500,
                    1144
                ],
                "shutil.rmtree": [
                    704,
                    206,
                    230
                ],
                "shutil": [
                    704,
                    230,
                    206,
                    540,
                    1149,
                    990
                ],
                "os.makedirs": [
                    1147,
                    227,
                    207
                ],
                "tarfile.open": [
                    963,
                    356,
                    1187,
                    210,
                    1175
                ],
                "tarfile": [
                    352,
                    963,
                    356,
                    1187,
                    967,
                    210,
                    1175
                ],
                "collection_tar": [
                    224,
                    1187,
                    356,
                    1188,
                    360,
                    365,
                    210,
                    211,
                    212,
                    215,
                    216,
                    1175,
                    1176
                ],
                "files_member_obj": [
                    211,
                    212
                ],
                "collection_tar.getmember": [
                    360,
                    211
                ],
                "_tarfile_extract": [
                    1169,
                    212,
                    365
                ],
                "files_obj": [
                    212,
                    213
                ],
                "json.loads": [
                    1183,
                    213,
                    398,
                    367
                ],
                "json": [
                    398,
                    367,
                    213,
                    956,
                    958,
                    1183
                ],
                "files_obj.read": [
                    213
                ],
                "_extract_tar_file": [
                    216,
                    224,
                    215
                ],
                "file_info": [
                    225,
                    973,
                    974,
                    978,
                    218,
                    219,
                    223
                ],
                "file_name": [
                    224,
                    219,
                    220,
                    227
                ],
                "b_namespace_path": [
                    232,
                    233,
                    234,
                    1002,
                    1001,
                    1005,
                    1006
                ],
                "os.path.dirname": [
                    232,
                    1139
                ],
                "os.listdir": [
                    1000,
                    233,
                    877,
                    1005
                ],
                "os.rmdir": [
                    234
                ],
                "display.vvv": [
                    288,
                    290,
                    1063,
                    906,
                    460,
                    465,
                    1009,
                    886,
                    1113,
                    250,
                    251,
                    252,
                    285
                ],
                "remote_collection.metadata.download_url": [
                    252,
                    685
                ],
                "remote_collection.metadata": [
                    252,
                    685
                ],
                "remote_collection": [
                    256,
                    678,
                    685,
                    687,
                    690,
                    252,
                    255
                ],
                "remote_collection.latest_version": [
                    256,
                    255
                ],
                "err": [
                    256,
                    257,
                    805,
                    615,
                    459,
                    1075,
                    695
                ],
                "modified_content": [
                    260,
                    264,
                    273,
                    280,
                    282,
                    286
                ],
                "expected_hash": [
                    1121,
                    1122,
                    1123,
                    263,
                    264,
                    301,
                    270,
                    302,
                    1134,
                    273,
                    279,
                    280
                ],
                "_get_tar_file_hash": [
                    263
                ],
                "b_temp_tar_path": [
                    263,
                    265,
                    688,
                    274,
                    690
                ],
                "self._verify_file_hash": [
                    264,
                    273,
                    280
                ],
                "manifest": [
                    420,
                    901,
                    265,
                    268,
                    919,
                    915,
                    405,
                    406,
                    407,
                    408,
                    952,
                    925,
                    863
                ],
                "_get_json_from_tar_file": [
                    265,
                    274
                ],
                "file_manifest_data": [
                    268,
                    269,
                    270
                ],
                "file_manifest_filename": [
                    273,
                    274,
                    269
                ],
                "file_manifest": [
                    491,
                    508,
                    973,
                    274,
                    277,
                    956
                ],
                "manifest_data": [
                    280,
                    277,
                    278,
                    279
                ],
                "content_change": [
                    288,
                    286,
                    287
                ],
                "content_change.filename": [
                    287
                ],
                "content_change.expected": [
                    288
                ],
                "content_change.installed": [
                    288
                ],
                "b_file_path": [
                    293,
                    1126,
                    295,
                    392,
                    393,
                    298,
                    396,
                    401,
                    1111,
                    1118
                ],
                "filename": [
                    1152,
                    1188,
                    293,
                    1161,
                    1130,
                    302,
                    1136,
                    978,
                    979,
                    1138,
                    1142,
                    1176,
                    988
                ],
                "os.path.isfile": [
                    1002,
                    660,
                    1066,
                    295
                ],
                "actual_hash": [
                    1122,
                    1123,
                    296,
                    299,
                    1132,
                    301,
                    302,
                    1134,
                    1119
                ],
                "file_object": [
                    298,
                    299
                ],
                "_consume_file": [
                    299,
                    1132,
                    1189,
                    1119
                ],
                "error_queue.append": [
                    302
                ],
                "error_queue": [
                    302
                ],
                "self.api.get_collection_version_metadata": [
                    307
                ],
                "op_map": [
                    313,
                    325
                ],
                "operator.ne": [
                    314
                ],
                "operator": [
                    320,
                    330,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319
                ],
                "operator.eq": [
                    330,
                    315,
                    316
                ],
                "operator.ge": [
                    317
                ],
                "operator.gt": [
                    318
                ],
                "operator.le": [
                    319
                ],
                "operator.lt": [
                    320
                ],
                "req": [
                    323,
                    324,
                    325,
                    327,
                    329,
                    1008,
                    337,
                    1009,
                    1011,
                    470,
                    1078,
                    472,
                    1080,
                    1083,
                    1085
                ],
                "requirements.split": [
                    323
                ],
                "requirements": [
                    536,
                    529,
                    323,
                    545
                ],
                "op_pos": [
                    324,
                    325,
                    327
                ],
                "op": [
                    328,
                    330,
                    325,
                    342
                ],
                "op_map.get": [
                    325
                ],
                "display.warning": [
                    416,
                    614,
                    422,
                    335,
                    815,
                    694,
                    893
                ],
                "SemanticVersion.from_loose_version": [
                    342
                ],
                "LooseVersion": [
                    342
                ],
                "tarfile.is_tarfile": [
                    352
                ],
                "info": [
                    355,
                    390,
                    398,
                    367,
                    432,
                    787,
                    372,
                    373,
                    404,
                    405,
                    788,
                    789,
                    795,
                    796
                ],
                "b_member_name": [
                    357,
                    358
                ],
                "property_name": [
                    391,
                    357,
                    398,
                    367
                ],
                "CollectionRequirement._FILE_MAPPING": [
                    357,
                    391
                ],
                "CollectionRequirement": [
                    385,
                    357,
                    678,
                    391,
                    1095,
                    1008,
                    434,
                    470,
                    1078,
                    671
                ],
                "n_member_name": [
                    360,
                    370,
                    363,
                    358
                ],
                "member": [
                    709,
                    360,
                    1163,
                    365,
                    1169
                ],
                "member_obj": [
                    365,
                    367
                ],
                "member_obj.read": [
                    367
                ],
                "meta": [
                    386,
                    430,
                    435,
                    372,
                    375,
                    376,
                    377,
                    378
                ],
                "CollectionVersionMetadata": [
                    378,
                    430
                ],
                "allow_pre_release": [
                    386,
                    605,
                    679,
                    1096,
                    447,
                    527,
                    1039,
                    403,
                    435,
                    471,
                    1023,
                    381,
                    414,
                    383
                ],
                "b_file_name": [
                    392,
                    1109,
                    1111,
                    391
                ],
                "file_obj": [
                    396,
                    398
                ],
                "file_obj.read": [
                    398
                ],
                "_v": [
                    411,
                    412,
                    413
                ],
                "_v.parse": [
                    412
                ],
                "_v.is_prerelease": [
                    413
                ],
                "parent_dir": [
                    424,
                    425
                ],
                "os.path.split": [
                    424,
                    425,
                    644
                ],
                "get": [
                    432
                ],
                "info.get": [
                    432,
                    795,
                    788
                ],
                "collection.split": [
                    439
                ],
                "collection": [
                    654,
                    658,
                    660,
                    661,
                    663,
                    665,
                    1050,
                    1051,
                    1052,
                    1053,
                    1063,
                    681,
                    682,
                    1066,
                    1067,
                    1068,
                    1069,
                    1070,
                    1072,
                    1075,
                    695,
                    439,
                    1087,
                    1089,
                    1090,
                    1091,
                    1095,
                    461,
                    465,
                    468,
                    609,
                    611,
                    615,
                    627,
                    628
                ],
                "galaxy_meta": [
                    440,
                    454,
                    471
                ],
                "apis": [
                    678,
                    1094,
                    1095,
                    526,
                    1038,
                    442,
                    603,
                    1022
                ],
                "requirement.startswith": [
                    449,
                    444,
                    445
                ],
                "requirement.lstrip": [
                    450
                ],
                "resp": [
                    452,
                    454,
                    455,
                    1115,
                    1119
                ],
                "api.get_collection_version_metadata": [
                    452
                ],
                "resp.version": [
                    455
                ],
                "api.get_collection_versions": [
                    457
                ],
                "GalaxyError": [
                    458
                ],
                "err.http_code": [
                    459
                ],
                "api.name": [
                    577,
                    581,
                    461,
                    465,
                    573
                ],
                "api.api_server": [
                    577,
                    581,
                    461,
                    465,
                    573
                ],
                "b_galaxy_path": [
                    488,
                    490,
                    486,
                    487
                ],
                "collection_meta": [
                    490,
                    491,
                    492,
                    493,
                    495,
                    496,
                    497
                ],
                "_get_galaxy_yml": [
                    490
                ],
                "_build_files_manifest": [
                    491
                ],
                "collection_manifest": [
                    992,
                    493,
                    508,
                    957,
                    958,
                    991
                ],
                "_build_manifest": [
                    493
                ],
                "collection_output": [
                    503,
                    506,
                    499,
                    495
                ],
                "output_path": [
                    611,
                    495,
                    530,
                    598,
                    535,
                    542
                ],
                "b_collection_output": [
                    508,
                    499,
                    500,
                    501
                ],
                "os.path.isdir": [
                    883,
                    501,
                    670,
                    1007
                ],
                "_build_collection_tar": [
                    508
                ],
                "_tempdir": [
                    600,
                    523,
                    653,
                    960
                ],
                "_display_progress": [
                    608,
                    652,
                    525,
                    531,
                    602,
                    574
                ],
                "dep_map": [
                    1090,
                    1091,
                    526,
                    1104,
                    532,
                    1081,
                    1082
                ],
                "_build_dependency_map": [
                    603,
                    526
                ],
                "collections": [
                    997,
                    654,
                    526,
                    1011,
                    1013,
                    603,
                    1021
                ],
                "validate_certs": [
                    1038,
                    526,
                    688,
                    1072,
                    1115,
                    604,
                    1023
                ],
                "no_deps": [
                    1027,
                    604,
                    1052,
                    526
                ],
                "dep_map.items": [
                    532
                ],
                "collection_filename": [
                    536,
                    533,
                    535
                ],
                "requirement.namespace": [
                    533
                ],
                "requirement.name": [
                    533
                ],
                "requirement.latest_version": [
                    536,
                    534
                ],
                "dest_path": [
                    538,
                    540,
                    535
                ],
                "requirements.append": [
                    536
                ],
                "b_temp_download_path": [
                    539,
                    540
                ],
                "requirement.download": [
                    539
                ],
                "shutil.move": [
                    540,
                    1149
                ],
                "requirements_path": [
                    544,
                    542,
                    543
                ],
                "req_fd": [
                    544,
                    545
                ],
                "req_fd.write": [
                    545
                ],
                "yaml.safe_dump": [
                    545
                ],
                "yaml": [
                    545,
                    802
                ],
                "import_uri": [
                    571,
                    565,
                    581,
                    557
                ],
                "api.publish_collection": [
                    557
                ],
                "wait": [
                    559
                ],
                "task_id": [
                    570,
                    564,
                    575,
                    567
                ],
                "path_segment": [
                    565,
                    566,
                    567
                ],
                "import_uri.split": [
                    565
                ],
                "api.wait_import_task": [
                    575
                ],
                "timeout": [
                    575
                ],
                "existing_collections": [
                    1098,
                    1037,
                    598,
                    603,
                    1022
                ],
                "find_existing_collections": [
                    598
                ],
                "dependency_map": [
                    1025,
                    609,
                    1026,
                    1028,
                    1032,
                    1051,
                    1037,
                    1049,
                    1018,
                    603,
                    1052,
                    1022,
                    1055
                ],
                "force_deps": [
                    604,
                    1038,
                    1023
                ],
                "dependency_map.values": [
                    609,
                    1025
                ],
                "collection.install": [
                    611
                ],
                "ignore_errors": [
                    613,
                    693
                ],
                "dummy": [
                    627
                ],
                "name.partition": [
                    627
                ],
                "AnsibleCollectionRef.is_valid_collection_name": [
                    628
                ],
                "AnsibleCollectionRef": [
                    628
                ],
                "local_collection": [
                    657,
                    690,
                    673,
                    671
                ],
                "b_collection": [
                    658,
                    660,
                    1005,
                    1006
                ],
                "scheme.lower": [
                    660,
                    1069
                ],
                "scheme": [
                    660,
                    1069
                ],
                "split": [
                    660
                ],
                "collection_name": [
                    993,
                    674,
                    1082,
                    678,
                    663,
                    664,
                    1081,
                    1080,
                    991
                ],
                "collection_name.split": [
                    664
                ],
                "collection_version": [
                    665,
                    678
                ],
                "search_path": [
                    690,
                    668,
                    669
                ],
                "search_paths": [
                    668
                ],
                "b_search_path": [
                    669,
                    670,
                    671
                ],
                "CollectionRequirement.from_path": [
                    1008,
                    671
                ],
                "CollectionRequirement.from_name": [
                    678,
                    1095
                ],
                "e.message": [
                    681
                ],
                "e": [
                    681
                ],
                "remote_collection.api._add_auth_token": [
                    687
                ],
                "remote_collection.api": [
                    687
                ],
                "local_collection.verify": [
                    690
                ],
                "tempfile.mkdtemp": [
                    702
                ],
                "tempfile": [
                    1131,
                    702,
                    1111
                ],
                "C.DEFAULT_LOCAL_TMP": [
                    702
                ],
                "C": [
                    716,
                    702
                ],
                "contextmanager": [
                    714,
                    707,
                    700
                ],
                "tar_obj": [
                    1188,
                    709,
                    710,
                    711,
                    1189,
                    1130,
                    1132,
                    1176,
                    1178,
                    1181
                ],
                "tar.extractfile": [
                    709
                ],
                "tar": [
                    1152,
                    709,
                    1130,
                    1163,
                    1166,
                    1136,
                    1169
                ],
                "tar_obj.close": [
                    711
                ],
                "config_display": [
                    716,
                    717
                ],
                "C.GALAXY_DISPLAY_PROGRESS": [
                    716
                ],
                "display_wheel": [
                    717,
                    719
                ],
                "sys.stdout.isatty": [
                    717
                ],
                "sys.stdout": [
                    717
                ],
                "sys": [
                    717
                ],
                "actual_display.debug": [
                    724,
                    743
                ],
                "actual_display": [
                    729,
                    739,
                    724,
                    743
                ],
                "t": [
                    770,
                    771,
                    742,
                    725,
                    763,
                    764,
                    765
                ],
                "threading.current_thread": [
                    725
                ],
                "threading": [
                    763,
                    725
                ],
                "c": [
                    728,
                    729,
                    1098,
                    1025
                ],
                "actual_display.display": [
                    729
                ],
                "time.sleep": [
                    730
                ],
                "time": [
                    969,
                    730
                ],
                "method": [
                    739,
                    735
                ],
                "args": [
                    753,
                    740,
                    735
                ],
                "kwargs": [
                    753,
                    740,
                    735
                ],
                "display_queue.get": [
                    735
                ],
                "display_queue": [
                    749,
                    761,
                    762,
                    763,
                    735
                ],
                "queue.Empty": [
                    736
                ],
                "queue": [
                    736,
                    761
                ],
                "func": [
                    739,
                    740
                ],
                "self.display_queue": [
                    753,
                    749
                ],
                "self.display_queue.put": [
                    753
                ],
                "attr": [
                    753
                ],
                "call_display": [
                    755
                ],
                "old_display": [
                    776,
                    763,
                    759
                ],
                "queue.Queue": [
                    761
                ],
                "DisplayThread": [
                    762
                ],
                "threading.Thread": [
                    763
                ],
                "progress": [
                    763
                ],
                "t.daemon": [
                    764
                ],
                "t.start": [
                    765
                ],
                "t.finish": [
                    770
                ],
                "t.join": [
                    771
                ],
                "meta_info": [
                    787,
                    780
                ],
                "get_collections_galaxy_meta_info": [
                    780
                ],
                "mandatory_keys": [
                    808,
                    789,
                    782,
                    798
                ],
                "string_keys": [
                    792,
                    819,
                    798,
                    783
                ],
                "list_keys": [
                    784,
                    793,
                    798,
                    823
                ],
                "dict_keys": [
                    785,
                    794,
                    798,
                    831
                ],
                "mandatory_keys.add": [
                    789
                ],
                "key_list_type": [
                    796,
                    791
                ],
                "key_list_type.add": [
                    796
                ],
                "all_keys": [
                    813,
                    798
                ],
                "b_galaxy_yml_path": [
                    816,
                    801,
                    811,
                    805
                ],
                "g_yaml": [
                    801,
                    802
                ],
                "galaxy_yml": [
                    832,
                    833,
                    802,
                    836,
                    837,
                    807,
                    839,
                    820,
                    821,
                    824,
                    827,
                    829
                ],
                "yaml.safe_load": [
                    802
                ],
                "YAMLError": [
                    803
                ],
                "set_keys": [
                    808,
                    813,
                    807
                ],
                "galaxy_yml.keys": [
                    807
                ],
                "missing_keys": [
                    808,
                    809,
                    811
                ],
                "mandatory_keys.difference": [
                    808
                ],
                "extra_keys": [
                    816,
                    813,
                    814
                ],
                "set_keys.difference": [
                    813
                ],
                "optional_string": [
                    819,
                    820,
                    821
                ],
                "optional_list": [
                    824,
                    827,
                    829,
                    823
                ],
                "list_val": [
                    824,
                    826,
                    828,
                    829
                ],
                "galaxy_yml.get": [
                    824
                ],
                "optional_dict": [
                    832,
                    833,
                    831
                ],
                "b_ignore_patterns": [
                    905,
                    885,
                    853,
                    845
                ],
                "ignore_patterns": [
                    853
                ],
                "b_ignore_dirs": [
                    884,
                    854
                ],
                "entry_template": [
                    856,
                    897,
                    909
                ],
                "b_item": [
                    880,
                    884,
                    877,
                    878
                ],
                "b_abs_path": [
                    903,
                    906,
                    878,
                    913,
                    883,
                    886,
                    889,
                    890,
                    894
                ],
                "b_rel_base_dir": [
                    880,
                    879
                ],
                "b_top_level_dir": [
                    903,
                    892,
                    879
                ],
                "b_rel_path": [
                    880,
                    881,
                    905,
                    885
                ],
                "rel_path": [
                    881,
                    898,
                    910
                ],
                "fnmatch.fnmatch": [
                    905,
                    885
                ],
                "fnmatch": [
                    905,
                    885
                ],
                "b_pattern": [
                    905,
                    885
                ],
                "os.path.islink": [
                    889
                ],
                "b_link_target": [
                    890,
                    892
                ],
                "os.path.realpath": [
                    890,
                    988
                ],
                "b_link_target.startswith": [
                    892
                ],
                "manifest_entry": [
                    897,
                    898,
                    899,
                    901,
                    909,
                    910,
                    911,
                    912,
                    913,
                    915
                ],
                "entry_template.copy": [
                    897,
                    909
                ],
                "append": [
                    915,
                    901
                ],
                "_walk": [
                    917,
                    903
                ],
                "secure_hash": [
                    913
                ],
                "sha256": [
                    913,
                    1194,
                    957
                ],
                "authors": [
                    930
                ],
                "readme": [
                    931
                ],
                "tags": [
                    932
                ],
                "description": [
                    933
                ],
                "license_ids": [
                    934
                ],
                "license_file": [
                    935
                ],
                "repository": [
                    937
                ],
                "documentation": [
                    938
                ],
                "homepage": [
                    939
                ],
                "issues": [
                    940
                ],
                "files_manifest_json": [
                    965,
                    956,
                    957
                ],
                "json.dumps": [
                    956,
                    958
                ],
                "secure_hash_s": [
                    957
                ],
                "collection_manifest_json": [
                    965,
                    958
                ],
                "b_tar_filepath": [
                    961,
                    963,
                    990
                ],
                "os.path.basename": [
                    961
                ],
                "b_tar_path": [
                    961,
                    993,
                    1065,
                    1068,
                    1072,
                    1077,
                    1078,
                    990
                ],
                "tar_file": [
                    963,
                    988,
                    971
                ],
                "b": [
                    968,
                    965,
                    966
                ],
                "b_io": [
                    971,
                    966
                ],
                "BytesIO": [
                    966
                ],
                "tar_info": [
                    967,
                    968,
                    969,
                    970,
                    971
                ],
                "tarfile.TarInfo": [
                    967
                ],
                "tar_info.size": [
                    968
                ],
                "tar_info.mtime": [
                    969
                ],
                "time.time": [
                    969
                ],
                "tar_info.mode": [
                    970
                ],
                "tar_file.addfile": [
                    971
                ],
                "b_src_path": [
                    979,
                    988
                ],
                "existing_is_exec": [
                    982,
                    983
                ],
                "tarinfo.mode": [
                    982,
                    983
                ],
                "tarinfo": [
                    982,
                    983,
                    984,
                    985,
                    986
                ],
                "stat.S_IXUSR": [
                    1154,
                    982
                ],
                "stat": [
                    1154,
                    982
                ],
                "tarinfo.isdir": [
                    983
                ],
                "tarinfo.uid": [
                    984
                ],
                "tarinfo.gid": [
                    984
                ],
                "tarinfo.uname": [
                    985
                ],
                "tarinfo.gname": [
                    985
                ],
                "tar_file.add": [
                    988
                ],
                "reset_stat": [
                    988
                ],
                "shutil.copy": [
                    990
                ],
                "b_namespace": [
                    1000,
                    1001
                ],
                "req.latest_version": [
                    1009,
                    1083
                ],
                "collections.append": [
                    1011
                ],
                "source": [
                    1094,
                    1021,
                    1022
                ],
                "_get_collection_info": [
                    1037,
                    1022
                ],
                "checked_parents": [
                    1025,
                    1026,
                    1028,
                    1041,
                    1049,
                    1053
                ],
                "c.skip": [
                    1025
                ],
                "parents_to_check": [
                    1028,
                    1031
                ],
                "difference": [
                    1049,
                    1028
                ],
                "dependency_map.keys": [
                    1049,
                    1028
                ],
                "deps_exhausted": [
                    1035,
                    1044,
                    1030
                ],
                "parent_info": [
                    1032,
                    1034,
                    1036,
                    1038
                ],
                "parent_info.dependencies": [
                    1034,
                    1036
                ],
                "dep_name": [
                    1036,
                    1037
                ],
                "dep_requirement": [
                    1036,
                    1037
                ],
                "parent_info.dependencies.items": [
                    1036
                ],
                "parent_info.api": [
                    1038
                ],
                "checked_parents.add": [
                    1041,
                    1053
                ],
                "deps_not_checked": [
                    1049,
                    1050
                ],
                "set_latest_version": [
                    1051
                ],
                "dep_msg": [
                    1060,
                    1062,
                    1063
                ],
                "display.vvvv": [
                    1089,
                    1122,
                    1067,
                    1070
                ],
                "urllib_error.URLError": [
                    1073
                ],
                "CollectionRequirement.from_tar": [
                    1078
                ],
                "collection_info": [
                    1091,
                    1092,
                    1095,
                    1098,
                    1099,
                    1102,
                    1104,
                    1082,
                    1083,
                    1085
                ],
                "collection_info.add_requirement": [
                    1083,
                    1092
                ],
                "validate_collection_name": [
                    1087
                ],
                "existing": [
                    1098,
                    1099,
                    1101,
                    1102
                ],
                "collection_info.force": [
                    1099
                ],
                "add_requirement": [
                    1101
                ],
                "urlsplit": [
                    1108,
                    1109,
                    1110
                ],
                "os.path.splitext": [
                    1108
                ],
                "url.rsplit": [
                    1108
                ],
                "url": [
                    1113,
                    1115,
                    1108
                ],
                "b_file_ext": [
                    1110,
                    1111
                ],
                "tempfile.NamedTemporaryFile": [
                    1131,
                    1111
                ],
                "open_url": [
                    1115
                ],
                "user_agent": [
                    1116
                ],
                "download_file": [
                    1118,
                    1119
                ],
                "_get_tar_file_member": [
                    1176,
                    1130,
                    1188
                ],
                "tmpfile_obj": [
                    1131,
                    1132,
                    1149
                ],
                "tar.name": [
                    1136,
                    1166
                ],
                "b_dest_filepath": [
                    1138,
                    1139,
                    1149,
                    1157
                ],
                "os.path.abspath": [
                    1138
                ],
                "b_dest": [
                    1138,
                    1140
                ],
                "b_parent_dir": [
                    1144,
                    1147,
                    1139,
                    1140
                ],
                "b_parent_dir.startswith": [
                    1140
                ],
                "os.path.sep": [
                    1140
                ],
                "tmpfile_obj.name": [
                    1149
                ],
                "tar_member": [
                    1152,
                    1154
                ],
                "tar.getmember": [
                    1152,
                    1163
                ],
                "new_mode": [
                    1153,
                    1155,
                    1157
                ],
                "stat.S_IMODE": [
                    1154
                ],
                "tar_member.mode": [
                    1154
                ],
                "os.chmod": [
                    1157
                ],
                "n_filename": [
                    1161,
                    1163,
                    1167
                ],
                "file_contents": [
                    1180,
                    1173,
                    1183
                ],
                "bufsize": [
                    1193,
                    1195,
                    1201,
                    1177,
                    1178,
                    1181
                ],
                "data": [
                    1195,
                    1196,
                    1198,
                    1200,
                    1201,
                    1178,
                    1179,
                    1180,
                    1181
                ],
                "tar_obj.read": [
                    1178,
                    1181
                ],
                "sha256_digest": [
                    1200,
                    1194,
                    1203
                ],
                "read_from.read": [
                    1201,
                    1195
                ],
                "read_from": [
                    1201,
                    1195
                ],
                "write_to": [
                    1197,
                    1198,
                    1199
                ],
                "write_to.write": [
                    1198
                ],
                "write_to.flush": [
                    1199
                ],
                "sha256_digest.update": [
                    1200
                ],
                "sha256_digest.hexdigest": [
                    1203
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/ansible_1/test/units/galaxy/test_collection.py",
                "test_function": "test_verify_collections_no_version",
                "test_function_code": "@patch.object(os.path, 'isdir', return_value=True)\ndef test_verify_collections_no_version(mock_isdir, mock_collection, monkeypatch):\n    namespace = 'ansible_namespace'\n    name = 'collection'\n    version = '*'  # Occurs if MANIFEST.json does not exist\n\n    local_collection = mock_collection(namespace=namespace, name=name, version=version)\n    monkeypatch.setattr(collection.CollectionRequirement, 'from_path', MagicMock(return_value=local_collection))\n\n    collections = [('%s.%s' % (namespace, name), version, None)]\n\n    with pytest.raises(AnsibleError) as err:\n        collection.verify_collections(collections, './', local_collection.api, False, False)\n\n    err_msg = 'Collection %s.%s does not appear to have a MANIFEST.json. ' % (namespace, name)\n    err_msg += 'A MANIFEST.json is expected if the collection has been built and installed via ansible-galaxy.'\n    assert err.value.message == err_msg",
                "test_error": "TypeError: 'GalaxyAPI' object is not iterable",
                "full_test_error": "mock_isdir = <MagicMock name='isdir' id='4493240400'>\nmock_collection = <function mock_collection.<locals>.create_mock_collection at 0x10bc8bb00>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10bd16690>\n\n    @patch.object(os.path, 'isdir', return_value=True)\n    def test_verify_collections_no_version(mock_isdir, mock_collection, monkeypatch):\n        namespace = 'ansible_namespace'\n        name = 'collection'\n        version = '*'  # Occurs if MANIFEST.json does not exist\n    \n        local_collection = mock_collection(namespace=namespace, name=name, version=version)\n        monkeypatch.setattr(collection.CollectionRequirement, 'from_path', MagicMock(return_value=local_collection))\n    \n        collections = [('%s.%s' % (namespace, name), version, None)]\n    \n        with pytest.raises(AnsibleError) as err:\n>           collection.verify_collections(collections, './', local_collection.api, False, False)\n\ntest/units/galaxy/test_collection.py:1169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/ansible/galaxy/collection.py:679: in verify_collections\n    allow_pre_release=allow_pre_release)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncollection = 'ansible_namespace.collection'\napis = <ansible.galaxy.api.GalaxyAPI object at 0x10bd16510>, requirement = '*'\nforce = False, parent = None, allow_pre_release = False\n\n    @staticmethod\n    def from_name(collection, apis, requirement, force, parent=None, allow_pre_release=False):\n        namespace, name = collection.split('.', 1)\n        galaxy_meta = None\n    \n>       for api in apis:\nE       TypeError: 'GalaxyAPI' object is not iterable\n\nlib/ansible/galaxy/collection.py:442: TypeError",
                "traceback": "lib/ansible/galaxy/collection.py:679: in verify_collections\n    allow_pre_release=allow_pre_release)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncollection = 'ansible_namespace.collection'\napis = <ansible.galaxy.api.GalaxyAPI object at 0x10bd16510>, requirement = '*'\nforce = False, parent = None, allow_pre_release = False\n\n    @staticmethod\n    def from_name(collection, apis, requirement, force, parent=None, allow_pre_release=False):\n        namespace, name = collection.split('.', 1)\n        galaxy_meta = None\n    \n>       for api in apis:\nE       TypeError: 'GalaxyAPI' object is not iterable\n\nlib/ansible/galaxy/collection.py:442: TypeError",
                "test_function_decorators": [
                    "patch.object(os.path, 'isdir', return_value=True)"
                ]
            }
        ]
    }
}