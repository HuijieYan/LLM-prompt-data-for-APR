{
    "ansible": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 650,
            "file_name": "lib/ansible/galaxy/collection.py",
            "replace_code": "def verify_collections(collections, search_paths, apis, validate_certs, ignore_errors, allow_pre_release=False):\n    import os\n    from urllib.parse import urlparse\n    from ansible.errors import AnsibleError\n    from ansible.module_utils.collection_utils import CollectionRequirement\n    from ansible.module_utils.pycompat24 import to_text, to_bytes\n    from ansible.utils.display import Display\n    from ansible.cli import CLI\n    from collections import defaultdict\n    display = Display()\n    results = defaultdict(list)\n    \n    for collection in collections:\n        try:\n            collection_name, collection_version = collection[0], collection[1]\n            namespace, name = collection_name.split('.')\n            local_collection = None\n    \n            for search_path in search_paths:\n                b_search_path = to_bytes(os.path.join(search_path, namespace, name), errors='surrogate_or_strict')\n                if os.path.isdir(b_search_path):\n                    local_collection = CollectionRequirement.from_path(b_search_path, False)\n                    break\n    \n            if local_collection is None:\n                raise AnsibleError(message='Collection %s is not installed in any of the collection paths.' % collection_name)\n    \n            remote_collection = CollectionRequirement.from_name(collection_name, apis, collection_version, False, parent=None, allow_pre_release=allow_pre_release)\n            remote_metadata = remote_collection.metadata\n            download_url = remote_metadata.download_url\n            headers = {}\n            remote_collection.api._add_auth_token(headers, download_url, required=False)\n            b_temp_tar_path = _download_file(download_url, b_temp_path, None, validate_certs, headers=headers)\n    \n            local_collection.verify(remote_collection, search_path, b_temp_tar_path)\n            \n        except AnsibleError as err:\n            if ignore_errors:\n                display.warning(\"Failed to verify collection %s but skipping due to --ignore-errors being set. Error: %s\" % (collection_name, to_text(err)))\n            else:\n                raise"
        }
    ]
}