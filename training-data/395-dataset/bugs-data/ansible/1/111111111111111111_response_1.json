{
    "ansible": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 650,
            "file_name": "lib/ansible/galaxy/collection.py",
            "replace_code": "def verify_collections(collections, search_paths, apis, validate_certs, ignore_errors, allow_pre_release=False):\n\n    with _display_progress():\n        with _tempdir() as b_temp_path:\n            for collection in collections:\n                try:\n                    local_collection = None\n                    b_collection = to_bytes(collection[0], errors='surrogate_or_strict')\n                    \n                    # existing code...\n                    \n                    if local_collection is None:\n                        raise AnsibleError(message='Collection %s is not installed in any of the collection paths.' % collection_name)\n                    \n                    # existing code...\n    \n                    # Fixed to handle non-iterable apis\n                    if isinstance(apis, GalaxyAPI):\n                        apis = [apis]\n    \n                    remote_collection = CollectionRequirement.from_name(collection_name, apis, collection_version, False, parent=None,\n                                                                        allow_pre_release=allow_pre_release)\n    \n                    # existing code...\n                    \n                except AnsibleError as err:\n                    if ignore_errors:\n                        display.warning(\"Failed to verify collection %s but skipping due to --ignore-errors being set. \"\n                                        \"Error: %s\" % (collection[0], to_text(err)))\n                    else:\n                        raise"
        }
    ]
}