{
    "1.1.1": "def run(self, terms, variables, **kwargs):\n\n    ret = []\n    for term in terms:\n        var = term.split()[0]\n        ret.append(os.getenv(var, ''))\n\n    return ret\n",
    "1.1.2": null,
    "1.2.1": "class LookupModule(LookupBase)",
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_12/lib/ansible/plugins/lookup/env.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('foo', 'bar'),\n    ('equation', 'a=b*100')\n])\ndef test_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]",
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('foo', 'bar'),\n    ('equation', 'a=b*100')\n])\ndef test_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]",
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('simple_var', 'alpha-\u03b2-gamma'),\n    ('the_var', '\u00e3n\u02c8si\u03b2le')\n])\ndef test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]",
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('simple_var', 'alpha-\u03b2-gamma'),\n    ('the_var', '\u00e3n\u02c8si\u03b2le')\n])\ndef test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_12/test/units/plugins/lookup/test_env.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_12/test/units/plugins/lookup/test_env.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_12/test/units/plugins/lookup/test_env.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_12/test/units/plugins/lookup/test_env.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert [''] == ['bar']\nE         At index 0 diff: '' != 'bar'\nE         Full diff:\nE         - ['bar']\nE         + ['']"
        ],
        [
            "E       AssertionError: assert [''] == ['a=b*100']\nE         At index 0 diff: '' != 'a=b*100'\nE         Full diff:\nE         - ['a=b*100']\nE         + ['']"
        ],
        [
            "E       AssertionError: assert [''] == ['alpha-\u03b2-gamma']\nE         At index 0 diff: '' != 'alpha-\u03b2-gamma'\nE         Full diff:\nE         - ['alpha-\u03b2-gamma']\nE         + ['']"
        ],
        [
            "E       AssertionError: assert [''] == ['\u00e3n\u02c8si\u03b2le']\nE         At index 0 diff: '' != '\u00e3n\u02c8si\u03b2le'\nE         Full diff:\nE         - ['\u00e3n\u02c8si\u03b2le']\nE         + ['']"
        ]
    ],
    "2.1.2": [
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10fc89fd0>\nenv_var = 'foo', exp_value = 'bar'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('foo', 'bar'),\n        ('equation', 'a=b*100')\n    ])\n    def test_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:23: AssertionError"
        ],
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10fcdf350>\nenv_var = 'equation', exp_value = 'a=b*100'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('foo', 'bar'),\n        ('equation', 'a=b*100')\n    ])\n    def test_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:23: AssertionError"
        ],
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10fd09310>\nenv_var = 'simple_var', exp_value = 'alpha-\u03b2-gamma'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('simple_var', 'alpha-\u03b2-gamma'),\n        ('the_var', '\u00e3n\u02c8si\u03b2le')\n    ])\n    def test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:35: AssertionError"
        ],
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10fcf4990>\nenv_var = 'the_var', exp_value = '\u00e3n\u02c8si\u03b2le'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('simple_var', 'alpha-\u03b2-gamma'),\n        ('the_var', '\u00e3n\u02c8si\u03b2le')\n    ])\n    def test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:35: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "terms": "['foo']"
            },
            {
                "ret": "['']",
                "term": "'foo'",
                "var": "'foo'"
            }
        ],
        [
            {
                "terms": "['equation']"
            },
            {
                "ret": "['']",
                "term": "'equation'",
                "var": "'equation'"
            }
        ],
        [
            {
                "terms": "['simple_var']"
            },
            {
                "ret": "['']",
                "term": "'simple_var'",
                "var": "'simple_var'"
            }
        ],
        [
            {
                "terms": "['the_var']"
            },
            {
                "ret": "['']",
                "term": "'the_var'",
                "var": "'the_var'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "terms": "['foo']"
            },
            {
                "ret": "['bar']",
                "term": "'foo'",
                "var": "'foo'"
            }
        ],
        [
            {
                "terms": "['equation']"
            },
            {
                "ret": "['a=b*100']",
                "term": "'equation'",
                "var": "'equation'"
            }
        ],
        [
            {
                "terms": "['simple_var']"
            },
            {
                "ret": "['alpha-\u03b2-gamma']",
                "term": "'simple_var'",
                "var": "'simple_var'"
            }
        ],
        [
            {
                "terms": "['the_var']"
            },
            {
                "ret": "['\u00e3n\u02c8si\u03b2le']",
                "term": "'the_var'",
                "var": "'the_var'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}