{
    "ansible:8": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_8/lib/ansible/plugins/shell/powershell.py": {
            "buggy_functions": [
                {
                    "function_name": "join_path",
                    "function_code": "def join_path(self, *args):\n    parts = []\n    for arg in args:\n        arg = self._unquote(arg).replace('/', '\\\\')\n        parts.extend([a for a in arg.split('\\\\') if a])\n    path = '\\\\'.join(parts)\n    if path.startswith('~'):\n        return path\n    return path\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 95,
                    "end_line": 103,
                    "variables": {
                        "parts": [
                            96,
                            99,
                            100
                        ],
                        "arg": [
                            97,
                            98,
                            99
                        ],
                        "args": [
                            97
                        ],
                        "replace": [
                            98
                        ],
                        "self._unquote": [
                            98
                        ],
                        "self": [
                            98
                        ],
                        "parts.extend": [
                            99
                        ],
                        "a": [
                            99
                        ],
                        "arg.split": [
                            99
                        ],
                        "path": [
                            100,
                            101,
                            102,
                            103
                        ],
                        "join": [
                            100
                        ],
                        "path.startswith": [
                            101
                        ]
                    },
                    "filtered_variables": {
                        "parts": [
                            96,
                            99,
                            100
                        ],
                        "arg": [
                            97,
                            98,
                            99
                        ],
                        "args": [
                            97
                        ],
                        "replace": [
                            98
                        ],
                        "self._unquote": [
                            98
                        ],
                        "self": [
                            98
                        ],
                        "parts.extend": [
                            99
                        ],
                        "a": [
                            99
                        ],
                        "arg.split": [
                            99
                        ],
                        "path": [
                            100,
                            101,
                            102,
                            103
                        ],
                        "join": [
                            100
                        ],
                        "path.startswith": [
                            101
                        ]
                    },
                    "diff_line_number": 96,
                    "class_data": {
                        "signature": "class ShellModule(ShellBase)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def assert_safe_env_key(self, key):\n    if not self.safe_envkey.match(key):\n        raise AnsibleError('Invalid PowerShell environment key: %s' % key)\n    return key",
                            "def safe_env_value(self, key, value):\n    if len(value) > 32767:\n        raise AnsibleError(\"PowerShell environment value for key '%s' exceeds 32767 characters in length\" % key)\n    value = value.replace(\"'\", \"''\")\n    return to_text(value, errors='surrogate_or_strict')",
                            "def env_prefix(self, **kwargs):\n    return ''",
                            "def join_path(self, *args):\n    parts = []\n    for arg in args:\n        arg = self._unquote(arg).replace('/', '\\\\')\n        parts.extend([a for a in arg.split('\\\\') if a])\n    path = '\\\\'.join(parts)\n    if path.startswith('~'):\n        return path\n    return path",
                            "def get_remote_filename(self, pathname):\n    base_name = os.path.basename(pathname.strip())\n    name, ext = os.path.splitext(base_name.strip())\n    if ext.lower() not in ['.ps1', '.exe']:\n        return name + '.ps1'\n    return base_name.strip()",
                            "def path_has_trailing_slash(self, path):\n    path = self._unquote(path)\n    return path.endswith('/') or path.endswith('\\\\')",
                            "def chmod(self, paths, mode):\n    raise NotImplementedError('chmod is not implemented for Powershell')",
                            "def chown(self, paths, user):\n    raise NotImplementedError('chown is not implemented for Powershell')",
                            "def set_user_facl(self, paths, user, mode):\n    raise NotImplementedError('set_user_facl is not implemented for Powershell')",
                            "def remove(self, path, recurse=False):\n    path = self._escape(self._unquote(path))\n    if recurse:\n        return self._encode_script('Remove-Item \"%s\" -Force -Recurse;' % path)\n    else:\n        return self._encode_script('Remove-Item \"%s\" -Force;' % path)",
                            "def mkdtemp(self, basefile=None, system=False, mode=None, tmpdir=None):\n    basefile = self._escape(self._unquote(basefile))\n    basetmpdir = tmpdir if tmpdir else self.get_option('remote_tmp')\n    script = \"\\n        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('%s')\\n        $tmp = New-Item -Type Directory -Path $tmp_path -Name '%s'\\n        Write-Output -InputObject $tmp.FullName\\n        \" % (basetmpdir, basefile)\n    return self._encode_script(script.strip())",
                            "def expand_user(self, user_home_path, username=''):\n    user_home_path = self._unquote(user_home_path)\n    if user_home_path == '~':\n        script = 'Write-Output (Get-Location).Path'\n    elif user_home_path.startswith('~\\\\'):\n        script = 'Write-Output ((Get-Location).Path + \"%s\")' % self._escape(user_home_path[1:])\n    else:\n        script = 'Write-Output \"%s\"' % self._escape(user_home_path)\n    return self._encode_script(script)",
                            "def exists(self, path):\n    path = self._escape(self._unquote(path))\n    script = '\\n            If (Test-Path \"%s\")\\n            {\\n                $res = 0;\\n            }\\n            Else\\n            {\\n                $res = 1;\\n            }\\n            Write-Output \"$res\";\\n            Exit $res;\\n         ' % path\n    return self._encode_script(script)",
                            "def checksum(self, path, *args, **kwargs):\n    path = self._escape(self._unquote(path))\n    script = '\\n            If (Test-Path -PathType Leaf \"%(path)s\")\\n            {\\n                $sp = new-object -TypeName System.Security.Cryptography.SHA1CryptoServiceProvider;\\n                $fp = [System.IO.File]::Open(\"%(path)s\", [System.IO.Filemode]::Open, [System.IO.FileAccess]::Read);\\n                [System.BitConverter]::ToString($sp.ComputeHash($fp)).Replace(\"-\", \"\").ToLower();\\n                $fp.Dispose();\\n            }\\n            ElseIf (Test-Path -PathType Container \"%(path)s\")\\n            {\\n                Write-Output \"3\";\\n            }\\n            Else\\n            {\\n                Write-Output \"1\";\\n            }\\n        ' % dict(path=path)\n    return self._encode_script(script)",
                            "def build_module_command(self, env_string, shebang, cmd, arg_path=None):\n    bootstrap_wrapper = pkgutil.get_data('ansible.executor.powershell', 'bootstrap_wrapper.ps1')\n    if cmd == '':\n        return self._encode_script(script=bootstrap_wrapper, strict_mode=False, preserve_rc=False)\n    cmd_parts = shlex.split(cmd, posix=False)\n    cmd_parts = list(map(to_text, cmd_parts))\n    if shebang and shebang.lower() == '#!powershell':\n        if not self._unquote(cmd_parts[0]).lower().endswith('.ps1'):\n            cmd_parts[0] = '\"%s.ps1\"' % self._unquote(cmd_parts[0])\n        wrapper_cmd = 'type ' + cmd_parts[0] + ' | ' + self._encode_script(script=bootstrap_wrapper, strict_mode=False, preserve_rc=False)\n        return wrapper_cmd\n    elif shebang and shebang.startswith('#!'):\n        cmd_parts.insert(0, shebang[2:])\n    elif not shebang:\n        cmd_parts[0] = self._unquote(cmd_parts[0])\n        cmd_parts.append(arg_path)\n    script = \"\\n            Try\\n            {\\n                %s\\n                %s\\n            }\\n            Catch\\n            {\\n                $_obj = @{ failed = $true }\\n                If ($_.Exception.GetType)\\n                {\\n                    $_obj.Add('msg', $_.Exception.Message)\\n                }\\n                Else\\n                {\\n                    $_obj.Add('msg', $_.ToString())\\n                }\\n                If ($_.InvocationInfo.PositionMessage)\\n                {\\n                    $_obj.Add('exception', $_.InvocationInfo.PositionMessage)\\n                }\\n                ElseIf ($_.ScriptStackTrace)\\n                {\\n                    $_obj.Add('exception', $_.ScriptStackTrace)\\n                }\\n                Try\\n                {\\n                    $_obj.Add('error_record', ($_ | ConvertTo-Json | ConvertFrom-Json))\\n                }\\n                Catch\\n                {\\n                }\\n                Echo $_obj | ConvertTo-Json -Compress -Depth 99\\n                Exit 1\\n            }\\n        \" % (env_string, ' '.join(cmd_parts))\n    return self._encode_script(script, preserve_rc=False)",
                            "def wrap_for_exec(self, cmd):\n    return '& %s; exit $LASTEXITCODE' % cmd",
                            "def _unquote(self, value):\n    \"\"\"Remove any matching quotes that wrap the given value.\"\"\"\n    value = to_text(value or '')\n    m = re.match(\"^\\\\s*?\\\\'(.*?)\\\\'\\\\s*?$\", value)\n    if m:\n        return m.group(1)\n    m = re.match('^\\\\s*?\"(.*?)\"\\\\s*?$', value)\n    if m:\n        return m.group(1)\n    return value",
                            "def _escape(self, value, include_vars=False):\n    \"\"\"Return value escaped for use in PowerShell command.\"\"\"\n    subs = [('\\n', '`n'), ('\\r', '`r'), ('\\t', '`t'), ('\\x07', '`a'), ('\\x08', '`b'), ('\\x0c', '`f'), ('\\x0b', '`v'), ('\"', '`\"'), (\"'\", \"`'\"), ('`', '``'), ('\\x00', '`0')]\n    if include_vars:\n        subs.append(('$', '`$'))\n    pattern = '|'.join(('(%s)' % re.escape(p) for p, s in subs))\n    substs = [s for p, s in subs]\n\n    def replace(m):\n        return substs[m.lastindex - 1]\n    return re.sub(pattern, replace, value)",
                            "def _encode_script(self, script, as_list=False, strict_mode=True, preserve_rc=True):\n    \"\"\"Convert a PowerShell script to a single base64-encoded command.\"\"\"\n    script = to_text(script)\n    if script == u'-':\n        cmd_parts = _common_args + ['-Command', '-']\n    else:\n        if strict_mode:\n            script = u'Set-StrictMode -Version Latest\\r\\n%s' % script\n        if preserve_rc:\n            script = u'%s\\r\\nIf (-not $?) { If (Get-Variable LASTEXITCODE -ErrorAction SilentlyContinue) { exit $LASTEXITCODE } Else { exit 1 } }\\r\\n' % script\n        script = '\\n'.join([x.strip() for x in script.splitlines() if x.strip()])\n        encoded_script = to_text(base64.b64encode(script.encode('utf-16-le')), 'utf-8')\n        cmd_parts = _common_args + ['-EncodedCommand', encoded_script]\n    if as_list:\n        return cmd_parts\n    return ' '.join(cmd_parts)",
                            "def replace(m):\n    return substs[m.lastindex - 1]"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "COMPATIBLE_SHELLS",
                            "SHELL_FAMILY",
                            "_SHELL_REDIRECT_ALLNULL",
                            "_SHELL_AND",
                            "_IS_WINDOWS",
                            "env",
                            "safe_envkey"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "assert_safe_env_key(self, key)",
                            "safe_env_value(self, key, value)",
                            "env_prefix(self, **kwargs)",
                            "join_path(self, *args)",
                            "get_remote_filename(self, pathname)",
                            "path_has_trailing_slash(self, path)",
                            "chmod(self, paths, mode)",
                            "chown(self, paths, user)",
                            "set_user_facl(self, paths, user, mode)",
                            "remove(self, path, recurse=False)",
                            "mkdtemp(self, basefile=None, system=False, mode=None, tmpdir=None)",
                            "expand_user(self, user_home_path, username='')",
                            "exists(self, path)",
                            "checksum(self, path, *args, **kwargs)",
                            "build_module_command(self, env_string, shebang, cmd, arg_path=None)",
                            "wrap_for_exec(self, cmd)",
                            "_unquote(self, value)",
                            "_escape(self, value, include_vars=False)",
                            "_encode_script(self, script, as_list=False, strict_mode=True, preserve_rc=True)",
                            "replace(m)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "('\\\\\\\\host\\\\share\\\\dir1\\\\\\\\dir2\\\\', '\\\\dir3/dir4', 'dir5', 'dir6\\\\')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unquote": {
                                    "variable_value": "<bound method ShellModule._unquote of <ansible.plugins.shell.powershell.ShellModule object at 0x10e719710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.plugins.shell.powershell.ShellModule object at 0x10e719710>",
                                    "variable_type": "ShellModule",
                                    "variable_shape": null
                                },
                                "parts.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arg.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "path.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "parts": {
                                    "variable_value": "['host', 'share', 'dir1', 'dir2', 'dir3', 'dir4', 'dir5', 'dir6']",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "arg": {
                                    "variable_value": "'dir6\\\\'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "args": {
                                    "variable_value": "('\\\\\\\\host\\\\share\\\\dir1\\\\\\\\dir2\\\\', '\\\\dir3/dir4', 'dir5', 'dir6\\\\')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unquote": {
                                    "variable_value": "<bound method ShellModule._unquote of <ansible.plugins.shell.powershell.ShellModule object at 0x10e719710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.plugins.shell.powershell.ShellModule object at 0x10e719710>",
                                    "variable_type": "ShellModule",
                                    "variable_shape": null
                                },
                                "parts.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10e7d7d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arg.split": {
                                    "variable_value": "<built-in method split of str object at 0x10e3c1770>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": "'host\\\\share\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\dir5\\\\dir6'",
                                    "variable_type": "str",
                                    "variable_shape": "40"
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "path.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10e642db0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "parts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ntpath.normpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ntpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unquote": {
                                    "variable_value": "<bound method ShellModule._unquote of <ansible.plugins.shell.powershell.ShellModule object at 0x10b7b7850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.plugins.shell.powershell.ShellModule object at 0x10b7b7850>",
                                    "variable_type": "ShellModule",
                                    "variable_shape": null
                                },
                                "arg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "('\\\\\\\\host\\\\share\\\\dir1\\\\\\\\dir2\\\\', '\\\\dir3/dir4', 'dir5', 'dir6\\\\')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "ntpath.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "part.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "part": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "parts": {
                                    "variable_value": "['\\\\\\\\host\\\\share\\\\dir1\\\\dir2', '\\\\dir3\\\\dir4', 'dir5', 'dir6']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "ntpath.normpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ntpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unquote": {
                                    "variable_value": "<bound method ShellModule._unquote of <ansible.plugins.shell.powershell.ShellModule object at 0x10b7b7850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.plugins.shell.powershell.ShellModule object at 0x10b7b7850>",
                                    "variable_type": "ShellModule",
                                    "variable_shape": null
                                },
                                "arg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "('\\\\\\\\host\\\\share\\\\dir1\\\\\\\\dir2\\\\', '\\\\dir3/dir4', 'dir5', 'dir6\\\\')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "ntpath.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "part.strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "part": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "import xml.etree.ElementTree as ET",
                    "start_line": 24,
                    "end_line": 25
                }
            ],
            "inscope_functions": [
                "def _parse_clixml(data, stream=\"Error\"):\n    \"\"\"\n    Takes a byte string like '#< CLIXML\\r\\n<Objs...' and extracts the stream\n    message encoded in the XML data. CLIXML is used by PowerShell to encode\n    multiple objects in stderr.\n    \"\"\"\n    clixml = ET.fromstring(data.split(b\"\\r\\n\", 1)[-1])\n    namespace_match = re.match(r'{(.*)}', clixml.tag)\n    namespace = \"{%s}\" % namespace_match.group(1) if namespace_match else \"\"\n\n    strings = clixml.findall(\"./%sS\" % namespace)\n    lines = [e.text.replace('_x000D__x000A_', '') for e in strings if e.attrib.get('S') == stream]\n    return to_bytes('\\r\\n'.join(lines))",
                "def assert_safe_env_key(self, key):\n    if not self.safe_envkey.match(key):\n        raise AnsibleError(\"Invalid PowerShell environment key: %s\" % key)\n    return key",
                "def safe_env_value(self, key, value):\n    if len(value) > 32767:\n        raise AnsibleError(\"PowerShell environment value for key '%s' exceeds 32767 characters in length\" % key)\n    # powershell single quoted literals need single-quote doubling as their only escaping\n    value = value.replace(\"'\", \"''\")\n    return to_text(value, errors='surrogate_or_strict')",
                "def env_prefix(self, **kwargs):\n    # powershell/winrm env handling is handled in the exec wrapper\n    return \"\"",
                "def join_path(self, *args):\n    parts = []\n    for arg in args:\n        arg = self._unquote(arg).replace('/', '\\\\')\n        parts.extend([a for a in arg.split('\\\\') if a])\n    path = '\\\\'.join(parts)\n    if path.startswith('~'):\n        return path\n    return path",
                "def get_remote_filename(self, pathname):\n    # powershell requires that script files end with .ps1\n    base_name = os.path.basename(pathname.strip())\n    name, ext = os.path.splitext(base_name.strip())\n    if ext.lower() not in ['.ps1', '.exe']:\n        return name + '.ps1'\n\n    return base_name.strip()",
                "def path_has_trailing_slash(self, path):\n    # Allow Windows paths to be specified using either slash.\n    path = self._unquote(path)\n    return path.endswith('/') or path.endswith('\\\\')",
                "def chmod(self, paths, mode):\n    raise NotImplementedError('chmod is not implemented for Powershell')",
                "def chown(self, paths, user):\n    raise NotImplementedError('chown is not implemented for Powershell')",
                "def set_user_facl(self, paths, user, mode):\n    raise NotImplementedError('set_user_facl is not implemented for Powershell')",
                "def remove(self, path, recurse=False):\n    path = self._escape(self._unquote(path))\n    if recurse:\n        return self._encode_script('''Remove-Item \"%s\" -Force -Recurse;''' % path)\n    else:\n        return self._encode_script('''Remove-Item \"%s\" -Force;''' % path)",
                "def mkdtemp(self, basefile=None, system=False, mode=None, tmpdir=None):\n    # Windows does not have an equivalent for the system temp files, so\n    # the param is ignored\n    basefile = self._escape(self._unquote(basefile))\n    basetmpdir = tmpdir if tmpdir else self.get_option('remote_tmp')\n\n    script = '''\n    $tmp_path = [System.Environment]::ExpandEnvironmentVariables('%s')\n    $tmp = New-Item -Type Directory -Path $tmp_path -Name '%s'\n    Write-Output -InputObject $tmp.FullName\n    ''' % (basetmpdir, basefile)\n    return self._encode_script(script.strip())",
                "def expand_user(self, user_home_path, username=''):\n    # PowerShell only supports \"~\" (not \"~username\").  Resolve-Path ~ does\n    # not seem to work remotely, though by default we are always starting\n    # in the user's home directory.\n    user_home_path = self._unquote(user_home_path)\n    if user_home_path == '~':\n        script = 'Write-Output (Get-Location).Path'\n    elif user_home_path.startswith('~\\\\'):\n        script = 'Write-Output ((Get-Location).Path + \"%s\")' % self._escape(user_home_path[1:])\n    else:\n        script = 'Write-Output \"%s\"' % self._escape(user_home_path)\n    return self._encode_script(script)",
                "def exists(self, path):\n    path = self._escape(self._unquote(path))\n    script = '''\n        If (Test-Path \"%s\")\n        {\n            $res = 0;\n        }\n        Else\n        {\n            $res = 1;\n        }\n        Write-Output \"$res\";\n        Exit $res;\n     ''' % path\n    return self._encode_script(script)",
                "def checksum(self, path, *args, **kwargs):\n    path = self._escape(self._unquote(path))\n    script = '''\n        If (Test-Path -PathType Leaf \"%(path)s\")\n        {\n            $sp = new-object -TypeName System.Security.Cryptography.SHA1CryptoServiceProvider;\n            $fp = [System.IO.File]::Open(\"%(path)s\", [System.IO.Filemode]::Open, [System.IO.FileAccess]::Read);\n            [System.BitConverter]::ToString($sp.ComputeHash($fp)).Replace(\"-\", \"\").ToLower();\n            $fp.Dispose();\n        }\n        ElseIf (Test-Path -PathType Container \"%(path)s\")\n        {\n            Write-Output \"3\";\n        }\n        Else\n        {\n            Write-Output \"1\";\n        }\n    ''' % dict(path=path)\n    return self._encode_script(script)",
                "def build_module_command(self, env_string, shebang, cmd, arg_path=None):\n    bootstrap_wrapper = pkgutil.get_data(\"ansible.executor.powershell\", \"bootstrap_wrapper.ps1\")\n\n    # pipelining bypass\n    if cmd == '':\n        return self._encode_script(script=bootstrap_wrapper, strict_mode=False, preserve_rc=False)\n\n    # non-pipelining\n\n    cmd_parts = shlex.split(cmd, posix=False)\n    cmd_parts = list(map(to_text, cmd_parts))\n    if shebang and shebang.lower() == '#!powershell':\n        if not self._unquote(cmd_parts[0]).lower().endswith('.ps1'):\n            # we're running a module via the bootstrap wrapper\n            cmd_parts[0] = '\"%s.ps1\"' % self._unquote(cmd_parts[0])\n        wrapper_cmd = \"type \" + cmd_parts[0] + \" | \" + self._encode_script(script=bootstrap_wrapper, strict_mode=False, preserve_rc=False)\n        return wrapper_cmd\n    elif shebang and shebang.startswith('#!'):\n        cmd_parts.insert(0, shebang[2:])\n    elif not shebang:\n        # The module is assumed to be a binary\n        cmd_parts[0] = self._unquote(cmd_parts[0])\n        cmd_parts.append(arg_path)\n    script = '''\n        Try\n        {\n            %s\n            %s\n        }\n        Catch\n        {\n            $_obj = @{ failed = $true }\n            If ($_.Exception.GetType)\n            {\n                $_obj.Add('msg', $_.Exception.Message)\n            }\n            Else\n            {\n                $_obj.Add('msg', $_.ToString())\n            }\n            If ($_.InvocationInfo.PositionMessage)\n            {\n                $_obj.Add('exception', $_.InvocationInfo.PositionMessage)\n            }\n            ElseIf ($_.ScriptStackTrace)\n            {\n                $_obj.Add('exception', $_.ScriptStackTrace)\n            }\n            Try\n            {\n                $_obj.Add('error_record', ($_ | ConvertTo-Json | ConvertFrom-Json))\n            }\n            Catch\n            {\n            }\n            Echo $_obj | ConvertTo-Json -Compress -Depth 99\n            Exit 1\n        }\n    ''' % (env_string, ' '.join(cmd_parts))\n    return self._encode_script(script, preserve_rc=False)",
                "def wrap_for_exec(self, cmd):\n    return '& %s; exit $LASTEXITCODE' % cmd",
                "def _unquote(self, value):\n    '''Remove any matching quotes that wrap the given value.'''\n    value = to_text(value or '')\n    m = re.match(r'^\\s*?\\'(.*?)\\'\\s*?$', value)\n    if m:\n        return m.group(1)\n    m = re.match(r'^\\s*?\"(.*?)\"\\s*?$', value)\n    if m:\n        return m.group(1)\n    return value",
                "def _escape(self, value, include_vars=False):\n    '''Return value escaped for use in PowerShell command.'''\n    # http://www.techotopia.com/index.php/Windows_PowerShell_1.0_String_Quoting_and_Escape_Sequences\n    # http://stackoverflow.com/questions/764360/a-list-of-string-replacements-in-python\n    subs = [('\\n', '`n'), ('\\r', '`r'), ('\\t', '`t'), ('\\a', '`a'),\n            ('\\b', '`b'), ('\\f', '`f'), ('\\v', '`v'), ('\"', '`\"'),\n            ('\\'', '`\\''), ('`', '``'), ('\\x00', '`0')]\n    if include_vars:\n        subs.append(('$', '`$'))\n    pattern = '|'.join('(%s)' % re.escape(p) for p, s in subs)\n    substs = [s for p, s in subs]\n\n    def replace(m):\n        return substs[m.lastindex - 1]\n\n    return re.sub(pattern, replace, value)",
                "def _encode_script(self, script, as_list=False, strict_mode=True, preserve_rc=True):\n    '''Convert a PowerShell script to a single base64-encoded command.'''\n    script = to_text(script)\n\n    if script == u'-':\n        cmd_parts = _common_args + ['-Command', '-']\n\n    else:\n        if strict_mode:\n            script = u'Set-StrictMode -Version Latest\\r\\n%s' % script\n        # try to propagate exit code if present- won't work with begin/process/end-style scripts (ala put_file)\n        # NB: the exit code returned may be incorrect in the case of a successful command followed by an invalid command\n        if preserve_rc:\n            script = u'%s\\r\\nIf (-not $?) { If (Get-Variable LASTEXITCODE -ErrorAction SilentlyContinue) { exit $LASTEXITCODE } Else { exit 1 } }\\r\\n'\\\n                % script\n        script = '\\n'.join([x.strip() for x in script.splitlines() if x.strip()])\n        encoded_script = to_text(base64.b64encode(script.encode('utf-16-le')), 'utf-8')\n        cmd_parts = _common_args + ['-EncodedCommand', encoded_script]\n\n    if as_list:\n        return cmd_parts\n    return ' '.join(cmd_parts)",
                "def replace(m):\n    return substs[m.lastindex - 1]"
            ],
            "inscope_function_signatures": [
                "_parse_clixml(data, stream='Error')",
                "assert_safe_env_key(self, key)",
                "safe_env_value(self, key, value)",
                "env_prefix(self, **kwargs)",
                "join_path(self, *args)",
                "get_remote_filename(self, pathname)",
                "path_has_trailing_slash(self, path)",
                "chmod(self, paths, mode)",
                "chown(self, paths, user)",
                "set_user_facl(self, paths, user, mode)",
                "remove(self, path, recurse=False)",
                "mkdtemp(self, basefile=None, system=False, mode=None, tmpdir=None)",
                "expand_user(self, user_home_path, username='')",
                "exists(self, path)",
                "checksum(self, path, *args, **kwargs)",
                "build_module_command(self, env_string, shebang, cmd, arg_path=None)",
                "wrap_for_exec(self, cmd)",
                "_unquote(self, value)",
                "_escape(self, value, include_vars=False)",
                "_encode_script(self, script, as_list=False, strict_mode=True, preserve_rc=True)",
                "replace(m)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    5
                ],
                "type": [
                    5
                ],
                "DOCUMENTATION": [
                    7
                ],
                "_common_args": [
                    295,
                    307,
                    37,
                    31
                ],
                "_powershell_version": [
                    35,
                    36,
                    37
                ],
                "os.environ.get": [
                    35
                ],
                "os.environ": [
                    35
                ],
                "os": [
                    107,
                    35,
                    108
                ],
                "clixml": [
                    50,
                    46,
                    47
                ],
                "ET.fromstring": [
                    46
                ],
                "ET": [
                    46
                ],
                "data.split": [
                    46
                ],
                "data": [
                    46
                ],
                "namespace_match": [
                    48,
                    47
                ],
                "re.match": [
                    265,
                    268,
                    47
                ],
                "re": [
                    288,
                    265,
                    75,
                    268,
                    47,
                    282
                ],
                "clixml.tag": [
                    47
                ],
                "namespace": [
                    48,
                    50
                ],
                "namespace_match.group": [
                    48
                ],
                "strings": [
                    50,
                    51
                ],
                "clixml.findall": [
                    50
                ],
                "lines": [
                    51,
                    52
                ],
                "e.text.replace": [
                    51
                ],
                "e.text": [
                    51
                ],
                "e": [
                    51
                ],
                "e.attrib.get": [
                    51
                ],
                "e.attrib": [
                    51
                ],
                "stream": [
                    51
                ],
                "to_bytes": [
                    52
                ],
                "join": [
                    256,
                    100,
                    305,
                    52,
                    311,
                    282
                ],
                "ShellBase": [
                    55
                ],
                "COMPATIBLE_SHELLS": [
                    60
                ],
                "frozenset": [
                    60
                ],
                "SHELL_FAMILY": [
                    62
                ],
                "_SHELL_REDIRECT_ALLNULL": [
                    64
                ],
                "_SHELL_AND": [
                    65
                ],
                "_IS_WINDOWS": [
                    68
                ],
                "env": [
                    70
                ],
                "dict": [
                    195,
                    70
                ],
                "safe_envkey": [
                    75
                ],
                "re.compile": [
                    75
                ],
                "self.safe_envkey.match": [
                    80
                ],
                "self.safe_envkey": [
                    80
                ],
                "self": [
                    129,
                    257,
                    131,
                    133,
                    138,
                    139,
                    146,
                    152,
                    156,
                    158,
                    159,
                    162,
                    175,
                    178,
                    196,
                    203,
                    80,
                    210,
                    212,
                    213,
                    219,
                    98,
                    116
                ],
                "key": [
                    80,
                    81,
                    82,
                    86
                ],
                "AnsibleError": [
                    81,
                    86
                ],
                "len": [
                    85
                ],
                "value": [
                    288,
                    264,
                    265,
                    268,
                    271,
                    85,
                    88,
                    89
                ],
                "value.replace": [
                    88
                ],
                "to_text": [
                    292,
                    264,
                    208,
                    306,
                    89
                ],
                "parts": [
                    96,
                    99,
                    100
                ],
                "arg": [
                    97,
                    98,
                    99
                ],
                "args": [
                    97
                ],
                "replace": [
                    288,
                    98
                ],
                "self._unquote": [
                    129,
                    98,
                    162,
                    138,
                    178,
                    210,
                    116,
                    212,
                    152,
                    219
                ],
                "parts.extend": [
                    99
                ],
                "a": [
                    99
                ],
                "arg.split": [
                    99
                ],
                "path": [
                    129,
                    162,
                    131,
                    100,
                    101,
                    102,
                    103,
                    133,
                    195,
                    174,
                    178,
                    116,
                    117
                ],
                "path.startswith": [
                    101
                ],
                "base_name": [
                    112,
                    107,
                    108
                ],
                "os.path.basename": [
                    107
                ],
                "os.path": [
                    107,
                    108
                ],
                "pathname.strip": [
                    107
                ],
                "pathname": [
                    107
                ],
                "name": [
                    108,
                    110
                ],
                "ext": [
                    108,
                    109
                ],
                "os.path.splitext": [
                    108
                ],
                "base_name.strip": [
                    112,
                    108
                ],
                "ext.lower": [
                    109
                ],
                "path.endswith": [
                    117
                ],
                "NotImplementedError": [
                    120,
                    123,
                    126
                ],
                "self._escape": [
                    129,
                    162,
                    138,
                    178,
                    156,
                    158
                ],
                "recurse": [
                    130
                ],
                "self._encode_script": [
                    257,
                    131,
                    196,
                    133,
                    203,
                    175,
                    146,
                    213,
                    159
                ],
                "basefile": [
                    145,
                    138
                ],
                "basetmpdir": [
                    145,
                    139
                ],
                "tmpdir": [
                    139
                ],
                "self.get_option": [
                    139
                ],
                "script": [
                    257,
                    141,
                    146,
                    154,
                    156,
                    158,
                    159,
                    163,
                    292,
                    294,
                    299,
                    175,
                    303,
                    304,
                    305,
                    179,
                    306,
                    196,
                    221
                ],
                "script.strip": [
                    146
                ],
                "user_home_path": [
                    152,
                    153,
                    155,
                    156,
                    158
                ],
                "user_home_path.startswith": [
                    155
                ],
                "bootstrap_wrapper": [
                    203,
                    213,
                    199
                ],
                "pkgutil.get_data": [
                    199
                ],
                "pkgutil": [
                    199
                ],
                "cmd": [
                    202,
                    260,
                    207
                ],
                "cmd_parts": [
                    256,
                    295,
                    207,
                    208,
                    210,
                    307,
                    212,
                    213,
                    310,
                    311,
                    216,
                    219,
                    220
                ],
                "shlex.split": [
                    207
                ],
                "shlex": [
                    207
                ],
                "list": [
                    208
                ],
                "map": [
                    208
                ],
                "shebang": [
                    216,
                    209,
                    217,
                    215
                ],
                "shebang.lower": [
                    209
                ],
                "endswith": [
                    210
                ],
                "lower": [
                    210
                ],
                "wrapper_cmd": [
                    213,
                    214
                ],
                "shebang.startswith": [
                    215
                ],
                "cmd_parts.insert": [
                    216
                ],
                "cmd_parts.append": [
                    220
                ],
                "arg_path": [
                    220
                ],
                "env_string": [
                    256
                ],
                "m": [
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    286
                ],
                "m.group": [
                    267,
                    270
                ],
                "subs": [
                    281,
                    282,
                    283,
                    277
                ],
                "include_vars": [
                    280
                ],
                "subs.append": [
                    281
                ],
                "pattern": [
                    288,
                    282
                ],
                "re.escape": [
                    282
                ],
                "p": [
                    282,
                    283
                ],
                "s": [
                    282,
                    283
                ],
                "substs": [
                    283,
                    286
                ],
                "m.lastindex": [
                    286
                ],
                "re.sub": [
                    288
                ],
                "strict_mode": [
                    298
                ],
                "preserve_rc": [
                    302
                ],
                "x.strip": [
                    305
                ],
                "x": [
                    305
                ],
                "script.splitlines": [
                    305
                ],
                "encoded_script": [
                    306,
                    307
                ],
                "base64.b64encode": [
                    306
                ],
                "base64": [
                    306
                ],
                "script.encode": [
                    306
                ],
                "as_list": [
                    309
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    5
                ],
                "DOCUMENTATION": [
                    7
                ],
                "_common_args": [
                    295,
                    307,
                    37,
                    31
                ],
                "_powershell_version": [
                    35,
                    36,
                    37
                ],
                "os.environ.get": [
                    35
                ],
                "os.environ": [
                    35
                ],
                "os": [
                    107,
                    35,
                    108
                ],
                "clixml": [
                    50,
                    46,
                    47
                ],
                "ET.fromstring": [
                    46
                ],
                "ET": [
                    46
                ],
                "data.split": [
                    46
                ],
                "data": [
                    46
                ],
                "namespace_match": [
                    48,
                    47
                ],
                "re.match": [
                    265,
                    268,
                    47
                ],
                "re": [
                    288,
                    265,
                    75,
                    268,
                    47,
                    282
                ],
                "clixml.tag": [
                    47
                ],
                "namespace": [
                    48,
                    50
                ],
                "namespace_match.group": [
                    48
                ],
                "strings": [
                    50,
                    51
                ],
                "clixml.findall": [
                    50
                ],
                "lines": [
                    51,
                    52
                ],
                "e.text.replace": [
                    51
                ],
                "e.text": [
                    51
                ],
                "e": [
                    51
                ],
                "e.attrib.get": [
                    51
                ],
                "e.attrib": [
                    51
                ],
                "stream": [
                    51
                ],
                "to_bytes": [
                    52
                ],
                "join": [
                    256,
                    100,
                    305,
                    52,
                    311,
                    282
                ],
                "ShellBase": [
                    55
                ],
                "COMPATIBLE_SHELLS": [
                    60
                ],
                "SHELL_FAMILY": [
                    62
                ],
                "_SHELL_REDIRECT_ALLNULL": [
                    64
                ],
                "_SHELL_AND": [
                    65
                ],
                "_IS_WINDOWS": [
                    68
                ],
                "env": [
                    70
                ],
                "safe_envkey": [
                    75
                ],
                "re.compile": [
                    75
                ],
                "self.safe_envkey.match": [
                    80
                ],
                "self.safe_envkey": [
                    80
                ],
                "self": [
                    129,
                    257,
                    131,
                    133,
                    138,
                    139,
                    146,
                    152,
                    156,
                    158,
                    159,
                    162,
                    175,
                    178,
                    196,
                    203,
                    80,
                    210,
                    212,
                    213,
                    219,
                    98,
                    116
                ],
                "key": [
                    80,
                    81,
                    82,
                    86
                ],
                "AnsibleError": [
                    81,
                    86
                ],
                "value": [
                    288,
                    264,
                    265,
                    268,
                    271,
                    85,
                    88,
                    89
                ],
                "value.replace": [
                    88
                ],
                "to_text": [
                    292,
                    264,
                    208,
                    306,
                    89
                ],
                "parts": [
                    96,
                    99,
                    100
                ],
                "arg": [
                    97,
                    98,
                    99
                ],
                "args": [
                    97
                ],
                "replace": [
                    288,
                    98
                ],
                "self._unquote": [
                    129,
                    98,
                    162,
                    138,
                    178,
                    210,
                    116,
                    212,
                    152,
                    219
                ],
                "parts.extend": [
                    99
                ],
                "a": [
                    99
                ],
                "arg.split": [
                    99
                ],
                "path": [
                    129,
                    162,
                    131,
                    100,
                    101,
                    102,
                    103,
                    133,
                    195,
                    174,
                    178,
                    116,
                    117
                ],
                "path.startswith": [
                    101
                ],
                "base_name": [
                    112,
                    107,
                    108
                ],
                "os.path.basename": [
                    107
                ],
                "os.path": [
                    107,
                    108
                ],
                "pathname.strip": [
                    107
                ],
                "pathname": [
                    107
                ],
                "name": [
                    108,
                    110
                ],
                "ext": [
                    108,
                    109
                ],
                "os.path.splitext": [
                    108
                ],
                "base_name.strip": [
                    112,
                    108
                ],
                "ext.lower": [
                    109
                ],
                "path.endswith": [
                    117
                ],
                "self._escape": [
                    129,
                    162,
                    138,
                    178,
                    156,
                    158
                ],
                "recurse": [
                    130
                ],
                "self._encode_script": [
                    257,
                    131,
                    196,
                    133,
                    203,
                    175,
                    146,
                    213,
                    159
                ],
                "basefile": [
                    145,
                    138
                ],
                "basetmpdir": [
                    145,
                    139
                ],
                "tmpdir": [
                    139
                ],
                "self.get_option": [
                    139
                ],
                "script": [
                    257,
                    141,
                    146,
                    154,
                    156,
                    158,
                    159,
                    163,
                    292,
                    294,
                    299,
                    175,
                    303,
                    304,
                    305,
                    179,
                    306,
                    196,
                    221
                ],
                "script.strip": [
                    146
                ],
                "user_home_path": [
                    152,
                    153,
                    155,
                    156,
                    158
                ],
                "user_home_path.startswith": [
                    155
                ],
                "bootstrap_wrapper": [
                    203,
                    213,
                    199
                ],
                "pkgutil.get_data": [
                    199
                ],
                "pkgutil": [
                    199
                ],
                "cmd": [
                    202,
                    260,
                    207
                ],
                "cmd_parts": [
                    256,
                    295,
                    207,
                    208,
                    210,
                    307,
                    212,
                    213,
                    310,
                    311,
                    216,
                    219,
                    220
                ],
                "shlex.split": [
                    207
                ],
                "shlex": [
                    207
                ],
                "shebang": [
                    216,
                    209,
                    217,
                    215
                ],
                "shebang.lower": [
                    209
                ],
                "endswith": [
                    210
                ],
                "lower": [
                    210
                ],
                "wrapper_cmd": [
                    213,
                    214
                ],
                "shebang.startswith": [
                    215
                ],
                "cmd_parts.insert": [
                    216
                ],
                "cmd_parts.append": [
                    220
                ],
                "arg_path": [
                    220
                ],
                "env_string": [
                    256
                ],
                "m": [
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    286
                ],
                "m.group": [
                    267,
                    270
                ],
                "subs": [
                    281,
                    282,
                    283,
                    277
                ],
                "include_vars": [
                    280
                ],
                "subs.append": [
                    281
                ],
                "pattern": [
                    288,
                    282
                ],
                "re.escape": [
                    282
                ],
                "p": [
                    282,
                    283
                ],
                "s": [
                    282,
                    283
                ],
                "substs": [
                    283,
                    286
                ],
                "m.lastindex": [
                    286
                ],
                "re.sub": [
                    288
                ],
                "strict_mode": [
                    298
                ],
                "preserve_rc": [
                    302
                ],
                "x.strip": [
                    305
                ],
                "x": [
                    305
                ],
                "script.splitlines": [
                    305
                ],
                "encoded_script": [
                    306,
                    307
                ],
                "base64.b64encode": [
                    306
                ],
                "base64": [
                    306
                ],
                "script.encode": [
                    306
                ],
                "as_list": [
                    309
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/ansible_8/test/units/plugins/shell/test_powershell.py",
                "test_function": "test_join_path_unc",
                "test_function_code": "def test_join_path_unc():\n    pwsh = ShellModule()\n    unc_path_parts = ['\\\\\\\\host\\\\share\\\\dir1\\\\\\\\dir2\\\\', '\\\\dir3/dir4', 'dir5', 'dir6\\\\']\n    expected = '\\\\\\\\host\\\\share\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\dir5\\\\dir6'\n    actual = pwsh.join_path(*unc_path_parts)\n    assert actual == expected",
                "test_error": "AssertionError: assert 'host\\\\share\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\dir5\\\\dir6' == '\\\\\\\\host\\\\share\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\dir5\\\\dir6'\n  - \\\\host\\share\\dir1\\dir2\\dir3\\dir4\\dir5\\dir6\n  ? --\n  + host\\share\\dir1\\dir2\\dir3\\dir4\\dir5\\dir6",
                "full_test_error": "def test_join_path_unc():\n        pwsh = ShellModule()\n        unc_path_parts = ['\\\\\\\\host\\\\share\\\\dir1\\\\\\\\dir2\\\\', '\\\\dir3/dir4', 'dir5', 'dir6\\\\']\n        expected = '\\\\\\\\host\\\\share\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\dir5\\\\dir6'\n        actual = pwsh.join_path(*unc_path_parts)\n>       assert actual == expected\nE       AssertionError: assert 'host\\\\share\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\dir5\\\\dir6' == '\\\\\\\\host\\\\share\\\\dir1\\\\dir2\\\\dir3\\\\dir4\\\\dir5\\\\dir6'\nE         - \\\\host\\share\\dir1\\dir2\\dir3\\dir4\\dir5\\dir6\nE         ? --\nE         + host\\share\\dir1\\dir2\\dir3\\dir4\\dir5\\dir6\n\ntest/units/plugins/shell/test_powershell.py:61: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}