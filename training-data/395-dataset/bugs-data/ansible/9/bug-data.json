{
    "ansible:9": {
        "/Volumes/SSD2T/bgp_envs/repos/ansible_9/lib/ansible/modules/packaging/os/redhat_subscription.py": {
            "buggy_functions": [
                {
                    "function_name": "subscribe_by_pool_ids",
                    "function_code": "def subscribe_by_pool_ids(self, pool_ids):\n    \"\"\"\n    Try to subscribe to the list of pool IDs\n    \"\"\"\n    available_pools = RhsmPools(self.module)\n\n    available_pool_ids = [p.get_pool_id() for p in available_pools]\n\n    for pool_id, quantity in sorted(pool_ids.items()):\n        if pool_id in available_pool_ids:\n            args = [SUBMAN_CMD, 'attach', '--pool', pool_id, '--quantity', quantity]\n            rc, stderr, stdout = self.module.run_command(args, check_rc=True)\n        else:\n            self.module.fail_json(msg='Pool ID: %s not in list of available pools' % pool_id)\n    return pool_ids\n",
                    "decorators": [],
                    "docstring": "Try to subscribe to the list of pool IDs",
                    "start_line": 508,
                    "end_line": 522,
                    "variables": {
                        "available_pools": [
                            512,
                            514
                        ],
                        "RhsmPools": [
                            512
                        ],
                        "self.module": [
                            512,
                            521,
                            519
                        ],
                        "self": [
                            512,
                            521,
                            519
                        ],
                        "available_pool_ids": [
                            514,
                            517
                        ],
                        "p.get_pool_id": [
                            514
                        ],
                        "p": [
                            514
                        ],
                        "pool_id": [
                            521,
                            516,
                            517,
                            518
                        ],
                        "quantity": [
                            516,
                            518
                        ],
                        "sorted": [
                            516
                        ],
                        "pool_ids.items": [
                            516
                        ],
                        "pool_ids": [
                            522,
                            516
                        ],
                        "args": [
                            518,
                            519
                        ],
                        "SUBMAN_CMD": [
                            518
                        ],
                        "rc": [
                            519
                        ],
                        "stderr": [
                            519
                        ],
                        "stdout": [
                            519
                        ],
                        "self.module.run_command": [
                            519
                        ],
                        "self.module.fail_json": [
                            521
                        ]
                    },
                    "filtered_variables": {
                        "available_pools": [
                            512,
                            514
                        ],
                        "RhsmPools": [
                            512
                        ],
                        "self.module": [
                            512,
                            521,
                            519
                        ],
                        "self": [
                            512,
                            521,
                            519
                        ],
                        "available_pool_ids": [
                            514,
                            517
                        ],
                        "p.get_pool_id": [
                            514
                        ],
                        "p": [
                            514
                        ],
                        "pool_id": [
                            521,
                            516,
                            517,
                            518
                        ],
                        "quantity": [
                            516,
                            518
                        ],
                        "pool_ids.items": [
                            516
                        ],
                        "pool_ids": [
                            522,
                            516
                        ],
                        "args": [
                            518,
                            519
                        ],
                        "SUBMAN_CMD": [
                            518
                        ],
                        "rc": [
                            519
                        ],
                        "stderr": [
                            519
                        ],
                        "stdout": [
                            519
                        ],
                        "self.module.run_command": [
                            519
                        ],
                        "self.module.fail_json": [
                            521
                        ]
                    },
                    "diff_line_number": 518,
                    "class_data": {
                        "signature": "class Rhsm(RegistrationBase)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, module, username=None, password=None):\n    RegistrationBase.__init__(self, module, username, password)\n    self.module = module",
                            "def enable(self):\n    \"\"\"\n        Enable the system to receive updates from subscription-manager.\n        This involves updating affected yum plugins and removing any\n        conflicting yum repositories.\n    \"\"\"\n    RegistrationBase.enable(self)\n    self.update_plugin_conf('rhnplugin', False)\n    self.update_plugin_conf('subscription-manager', True)",
                            "def configure(self, **kwargs):\n    \"\"\"\n        Configure the system as directed for registration with RHSM\n        Raises:\n          * Exception - if error occurs while running command\n    \"\"\"\n    args = [SUBMAN_CMD, 'config']\n    options = []\n    for k, v in sorted(kwargs.items()):\n        if re.search('^(server|rhsm)_', k) and v is not None:\n            options.append('--%s=%s' % (k.replace('_', '.', 1), v))\n    if len(options) == 0:\n        return\n    args.extend(options)\n    self.module.run_command(args, check_rc=True)",
                            "@property\ndef is_registered(self):\n    \"\"\"\n        Determine whether the current system\n        Returns:\n          * Boolean - whether the current system is currently registered to\n                      RHSM.\n    \"\"\"\n    args = [SUBMAN_CMD, 'identity']\n    rc, stdout, stderr = self.module.run_command(args, check_rc=False)\n    if rc == 0:\n        return True\n    else:\n        return False",
                            "def register(self, username, password, auto_attach, activationkey, org_id, consumer_type, consumer_name, consumer_id, force_register, environment, rhsm_baseurl, server_insecure, server_hostname, server_proxy_hostname, server_proxy_port, server_proxy_user, server_proxy_password, release):\n    \"\"\"\n        Register the current system to the provided RHSM or Sat6 server\n        Raises:\n          * Exception - if error occurs while running command\n    \"\"\"\n    args = [SUBMAN_CMD, 'register']\n    if force_register:\n        args.extend(['--force'])\n    if rhsm_baseurl:\n        args.extend(['--baseurl', rhsm_baseurl])\n    if server_insecure:\n        args.extend(['--insecure'])\n    if server_hostname:\n        args.extend(['--serverurl', server_hostname])\n    if org_id:\n        args.extend(['--org', org_id])\n    if server_proxy_hostname and server_proxy_port:\n        args.extend(['--proxy', server_proxy_hostname + ':' + server_proxy_port])\n    if server_proxy_user:\n        args.extend(['--proxyuser', server_proxy_user])\n    if server_proxy_password:\n        args.extend(['--proxypassword', server_proxy_password])\n    if activationkey:\n        args.extend(['--activationkey', activationkey])\n    else:\n        if auto_attach:\n            args.append('--auto-attach')\n        if username:\n            args.extend(['--username', username])\n        if password:\n            args.extend(['--password', password])\n        if consumer_type:\n            args.extend(['--type', consumer_type])\n        if consumer_name:\n            args.extend(['--name', consumer_name])\n        if consumer_id:\n            args.extend(['--consumerid', consumer_id])\n        if environment:\n            args.extend(['--environment', environment])\n    if release:\n        args.extend(['--release', release])\n    rc, stderr, stdout = self.module.run_command(args, check_rc=True, expand_user_and_vars=False)",
                            "def unsubscribe(self, serials=None):\n    \"\"\"\n        Unsubscribe a system from subscribed channels\n        Args:\n          serials(list or None): list of serials to unsubscribe. If\n                                 serials is none or an empty list, then\n                                 all subscribed channels will be removed.\n        Raises:\n          * Exception - if error occurs while running command\n    \"\"\"\n    items = []\n    if serials is not None and serials:\n        items = ['--serial=%s' % s for s in serials]\n    if serials is None:\n        items = ['--all']\n    if items:\n        args = [SUBMAN_CMD, 'unsubscribe'] + items\n        rc, stderr, stdout = self.module.run_command(args, check_rc=True)\n    return serials",
                            "def unregister(self):\n    \"\"\"\n        Unregister a currently registered system\n        Raises:\n          * Exception - if error occurs while running command\n    \"\"\"\n    args = [SUBMAN_CMD, 'unregister']\n    rc, stderr, stdout = self.module.run_command(args, check_rc=True)\n    self.update_plugin_conf('rhnplugin', False)\n    self.update_plugin_conf('subscription-manager', False)",
                            "def subscribe(self, regexp):\n    \"\"\"\n        Subscribe current system to available pools matching the specified\n        regular expression. It matches regexp against available pool ids first.\n        If any pool ids match, subscribe to those pools and return.\n\n        If no pool ids match, then match regexp against available pool product\n        names. Note this can still easily match many many pools. Then subscribe\n        to those pools.\n\n        Since a pool id is a more specific match, we only fallback to matching\n        against names if we didn't match pool ids.\n\n        Raises:\n          * Exception - if error occurs while running command\n    \"\"\"\n    subscribed_pool_ids = self.subscribe_pool(regexp)\n    if subscribed_pool_ids:\n        return subscribed_pool_ids\n    subscribed_by_product_pool_ids = self.subscribe_product(regexp)\n    if subscribed_by_product_pool_ids:\n        return subscribed_by_product_pool_ids\n    return []",
                            "def subscribe_by_pool_ids(self, pool_ids):\n    \"\"\"\n    Try to subscribe to the list of pool IDs\n    \"\"\"\n    available_pools = RhsmPools(self.module)\n    available_pool_ids = [p.get_pool_id() for p in available_pools]\n    for pool_id, quantity in sorted(pool_ids.items()):\n        if pool_id in available_pool_ids:\n            args = [SUBMAN_CMD, 'attach', '--pool', pool_id, '--quantity', quantity]\n            rc, stderr, stdout = self.module.run_command(args, check_rc=True)\n        else:\n            self.module.fail_json(msg='Pool ID: %s not in list of available pools' % pool_id)\n    return pool_ids",
                            "def subscribe_pool(self, regexp):\n    \"\"\"\n        Subscribe current system to available pools matching the specified\n        regular expression\n        Raises:\n          * Exception - if error occurs while running command\n    \"\"\"\n    available_pools = RhsmPools(self.module)\n    subscribed_pool_ids = []\n    for pool in available_pools.filter_pools(regexp):\n        pool.subscribe()\n        subscribed_pool_ids.append(pool.get_pool_id())\n    return subscribed_pool_ids",
                            "def subscribe_product(self, regexp):\n    \"\"\"\n        Subscribe current system to available pools matching the specified\n        regular expression\n        Raises:\n          * Exception - if error occurs while running command\n    \"\"\"\n    available_pools = RhsmPools(self.module)\n    subscribed_pool_ids = []\n    for pool in available_pools.filter_products(regexp):\n        pool.subscribe()\n        subscribed_pool_ids.append(pool.get_pool_id())\n    return subscribed_pool_ids",
                            "def update_subscriptions(self, regexp):\n    changed = False\n    consumed_pools = RhsmPools(self.module, consumed=True)\n    pool_ids_to_keep = [p.get_pool_id() for p in consumed_pools.filter_pools(regexp)]\n    pool_ids_to_keep.extend([p.get_pool_id() for p in consumed_pools.filter_products(regexp)])\n    serials_to_remove = [p.Serial for p in consumed_pools if p.get_pool_id() not in pool_ids_to_keep]\n    serials = self.unsubscribe(serials=serials_to_remove)\n    subscribed_pool_ids = self.subscribe(regexp)\n    if subscribed_pool_ids or serials:\n        changed = True\n    return {'changed': changed, 'subscribed_pool_ids': subscribed_pool_ids, 'unsubscribed_serials': serials}",
                            "def update_subscriptions_by_pool_ids(self, pool_ids):\n    changed = False\n    consumed_pools = RhsmPools(self.module, consumed=True)\n    existing_pools = {}\n    for p in consumed_pools:\n        existing_pools[p.get_pool_id()] = p.QuantityUsed\n    serials_to_remove = [p.Serial for p in consumed_pools if pool_ids.get(p.get_pool_id(), 0) != p.QuantityUsed]\n    serials = self.unsubscribe(serials=serials_to_remove)\n    missing_pools = {}\n    for pool_id, quantity in sorted(pool_ids.items()):\n        if existing_pools.get(pool_id, 0) != quantity:\n            missing_pools[pool_id] = quantity\n    self.subscribe_by_pool_ids(missing_pools)\n    if missing_pools or serials:\n        changed = True\n    return {'changed': changed, 'subscribed_pool_ids': missing_pools.keys(), 'unsubscribed_serials': serials}",
                            "def sync_syspurpose(self):\n    \"\"\"\n    Try to synchronize syspurpose attributes with server\n    \"\"\"\n    args = [SUBMAN_CMD, 'status']\n    rc, stdout, stderr = self.module.run_command(args, check_rc=False)"
                        ],
                        "constructor_variables": [
                            "module"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, module, username=None, password=None)",
                            "enable(self)",
                            "configure(self, **kwargs)",
                            "is_registered(self)",
                            "register(self, username, password, auto_attach, activationkey, org_id, consumer_type, consumer_name, consumer_id, force_register, environment, rhsm_baseurl, server_insecure, server_hostname, server_proxy_hostname, server_proxy_port, server_proxy_user, server_proxy_password, release)",
                            "unsubscribe(self, serials=None)",
                            "unregister(self)",
                            "subscribe(self, regexp)",
                            "subscribe_by_pool_ids(self, pool_ids)",
                            "subscribe_pool(self, regexp)",
                            "subscribe_product(self, regexp)",
                            "update_subscriptions(self, regexp)",
                            "update_subscriptions_by_pool_ids(self, pool_ids)",
                            "sync_syspurpose(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d4fb790>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d6dd390>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10dafca00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '2', 'ff8080816b8e967f016b8e99747107e9': '4'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x10db13b90>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d4fb790>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d6dd390>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99747107e9'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "'4'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10dafca00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '2', 'ff8080816b8e967f016b8e99747107e9': '4'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9', '--quantity', '4']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d907190>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d907110>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10d918640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '1', 'ff8080816b8e967f016b8e99747107e9': '1'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x10d90e710>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d907190>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d907110>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99747107e9'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "'1'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10d918640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '1', 'ff8080816b8e967f016b8e99747107e9': '1'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9', '--quantity', '1']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d8ebd50>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d8ebdd0>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10dae8be0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '1'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x10d8e59d0>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d8ebd50>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d8ebdd0>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99632804a6'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "'1'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10dae8be0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '1'}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d8b6710>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d8b6a90>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10db30730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '2', 'ff8080816b8e967f016b8e99747107e9': '4'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x10d8d3b50>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x10d8b6710>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x10d8b6a90>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6', 'ff8080816b8e967f016b8e995f5103b5']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99747107e9'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "'4'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10db30730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': '2', 'ff8080816b8e967f016b8e99747107e9': '4'}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9', '--quantity', '4']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x104d38990>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x104d38910>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x105082e60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': 2, 'ff8080816b8e967f016b8e99747107e9': 4}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x104e18390>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x104d38990>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x104d38910>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99747107e9'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x105082e60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': 2, 'ff8080816b8e967f016b8e99747107e9': 4}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9', '--quantity', '4']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104e33af0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x104e0f890>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x104e0f910>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104c6b960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': None, 'ff8080816b8e967f016b8e99747107e9': None}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x104e090d0>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x104e0f890>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x104e0f910>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99747107e9'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104c6b960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': None, 'ff8080816b8e967f016b8e99747107e9': None}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104ed7870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x1050b4590>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x1050b4610>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104f11780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': None}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x104f2c5d0>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x1050b4590>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x1050b4610>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99632804a6'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104f11780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': None}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x104e2a3c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "available_pools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x104f50ed0>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x104f50e50>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "quantity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104f56050>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': 2, 'ff8080816b8e967f016b8e99747107e9': 4}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "available_pools": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.RhsmPools object at 0x104f59890>",
                                    "variable_type": "RhsmPools",
                                    "variable_shape": null
                                },
                                "RhsmPools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.module": {
                                    "variable_value": "<ansible.module_utils.basic.AnsibleModule object at 0x104f50ed0>",
                                    "variable_type": "AnsibleModule",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<ansible.modules.packaging.os.redhat_subscription.Rhsm object at 0x104f50e50>",
                                    "variable_type": "Rhsm",
                                    "variable_shape": null
                                },
                                "available_pool_ids": {
                                    "variable_value": "['ff8080816b8e967f016b8e99747107e9', 'ff8080816b8e967f016b8e99632804a6', 'ff8080816b8e967f016b8e995f5103b5']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "p.get_pool_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pool_id": {
                                    "variable_value": "'ff8080816b8e967f016b8e99747107e9'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "quantity": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "pool_ids.items": {
                                    "variable_value": "<built-in method items of dict object at 0x104f56050>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pool_ids": {
                                    "variable_value": "{'ff8080816b8e967f016b8e99632804a6': 2, 'ff8080816b8e967f016b8e99747107e9': 4}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "args": {
                                    "variable_value": "['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9', '--quantity', '4']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "SUBMAN_CMD": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x10508ed70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "to_native": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stderr": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "stdout": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "self.module.run_command": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.module.fail_json": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "main",
                    "function_code": "def main():\n\n    # Load RHSM configuration from file\n    rhsm = Rhsm(None)\n\n    # Note: the default values for parameters are:\n    # 'type': 'str', 'default': None, 'required': False\n    # So there is no need to repeat these values for each parameter.\n    module = AnsibleModule(\n        argument_spec={\n            'state': {'default': 'present', 'choices': ['present', 'absent']},\n            'username': {},\n            'password': {'no_log': True},\n            'server_hostname': {},\n            'server_insecure': {},\n            'rhsm_baseurl': {},\n            'rhsm_repo_ca_cert': {},\n            'auto_attach': {'aliases': ['autosubscribe'], 'type': 'bool'},\n            'activationkey': {'no_log': True},\n            'org_id': {},\n            'environment': {},\n            'pool': {'default': '^$'},\n            'pool_ids': {'default': [], 'type': 'list'},\n            'consumer_type': {},\n            'consumer_name': {},\n            'consumer_id': {},\n            'force_register': {'default': False, 'type': 'bool'},\n            'server_proxy_hostname': {},\n            'server_proxy_port': {},\n            'server_proxy_user': {},\n            'server_proxy_password': {'no_log': True},\n            'release': {},\n            'syspurpose': {\n                'type': 'dict',\n                'options': {\n                    'role': {},\n                    'usage': {},\n                    'service_level_agreement': {},\n                    'addons': {'type': 'list'},\n                    'sync': {'type': 'bool', 'default': False}\n                }\n            }\n        },\n        required_together=[['username', 'password'],\n                           ['server_proxy_hostname', 'server_proxy_port'],\n                           ['server_proxy_user', 'server_proxy_password']],\n        mutually_exclusive=[['activationkey', 'username'],\n                            ['activationkey', 'consumer_id'],\n                            ['activationkey', 'environment'],\n                            ['activationkey', 'autosubscribe'],\n                            ['force', 'consumer_id'],\n                            ['pool', 'pool_ids']],\n        required_if=[['state', 'present', ['username', 'activationkey'], True]],\n    )\n\n    rhsm.module = module\n    state = module.params['state']\n    username = module.params['username']\n    password = module.params['password']\n    server_hostname = module.params['server_hostname']\n    server_insecure = module.params['server_insecure']\n    rhsm_baseurl = module.params['rhsm_baseurl']\n    rhsm_repo_ca_cert = module.params['rhsm_repo_ca_cert']\n    auto_attach = module.params['auto_attach']\n    activationkey = module.params['activationkey']\n    org_id = module.params['org_id']\n    if activationkey and not org_id:\n        module.fail_json(msg='org_id is required when using activationkey')\n    environment = module.params['environment']\n    pool = module.params['pool']\n    pool_ids = {}\n    for value in module.params['pool_ids']:\n        if isinstance(value, dict):\n            if len(value) != 1:\n                module.fail_json(msg='Unable to parse pool_ids option.')\n            pool_id, quantity = list(value.items())[0]\n        else:\n            pool_id, quantity = value, 1\n        pool_ids[pool_id] = str(quantity)\n    consumer_type = module.params[\"consumer_type\"]\n    consumer_name = module.params[\"consumer_name\"]\n    consumer_id = module.params[\"consumer_id\"]\n    force_register = module.params[\"force_register\"]\n    server_proxy_hostname = module.params['server_proxy_hostname']\n    server_proxy_port = module.params['server_proxy_port']\n    server_proxy_user = module.params['server_proxy_user']\n    server_proxy_password = module.params['server_proxy_password']\n    release = module.params['release']\n    syspurpose = module.params['syspurpose']\n\n    global SUBMAN_CMD\n    SUBMAN_CMD = module.get_bin_path('subscription-manager', True)\n\n    syspurpose_changed = False\n    if syspurpose is not None:\n        try:\n            syspurpose_changed = SysPurpose().update_syspurpose(syspurpose)\n        except Exception as err:\n            module.fail_json(msg=\"Failed to update syspurpose attributes: %s\" % to_native(err))\n\n    # Ensure system is registered\n    if state == 'present':\n\n        # Register system\n        if rhsm.is_registered and not force_register:\n            if syspurpose and 'sync' in syspurpose and syspurpose['sync'] is True:\n                try:\n                    rhsm.sync_syspurpose()\n                except Exception as e:\n                    module.fail_json(msg=\"Failed to synchronize syspurpose attributes: %s\" % to_native(e))\n            if pool != '^$' or pool_ids:\n                try:\n                    if pool_ids:\n                        result = rhsm.update_subscriptions_by_pool_ids(pool_ids)\n                    else:\n                        result = rhsm.update_subscriptions(pool)\n                except Exception as e:\n                    module.fail_json(msg=\"Failed to update subscriptions for '%s': %s\" % (server_hostname, to_native(e)))\n                else:\n                    module.exit_json(**result)\n            else:\n                if syspurpose_changed is True:\n                    module.exit_json(changed=True, msg=\"Syspurpose attributes changed.\")\n                else:\n                    module.exit_json(changed=False, msg=\"System already registered.\")\n        else:\n            try:\n                rhsm.enable()\n                rhsm.configure(**module.params)\n                rhsm.register(username, password, auto_attach, activationkey, org_id,\n                              consumer_type, consumer_name, consumer_id, force_register,\n                              environment, rhsm_baseurl, server_insecure, server_hostname,\n                              server_proxy_hostname, server_proxy_port, server_proxy_user, server_proxy_password, release)\n                if syspurpose and 'sync' in syspurpose and syspurpose['sync'] is True:\n                    rhsm.sync_syspurpose()\n                if pool_ids:\n                    subscribed_pool_ids = rhsm.subscribe_by_pool_ids(pool_ids)\n                elif pool != '^$':\n                    subscribed_pool_ids = rhsm.subscribe(pool)\n                else:\n                    subscribed_pool_ids = []\n            except Exception as e:\n                module.fail_json(msg=\"Failed to register with '%s': %s\" % (server_hostname, to_native(e)))\n            else:\n                module.exit_json(changed=True,\n                                 msg=\"System successfully registered to '%s'.\" % server_hostname,\n                                 subscribed_pool_ids=subscribed_pool_ids)\n\n    # Ensure system is *not* registered\n    if state == 'absent':\n        if not rhsm.is_registered:\n            module.exit_json(changed=False, msg=\"System already unregistered.\")\n        else:\n            try:\n                rhsm.unsubscribe()\n                rhsm.unregister()\n            except Exception as e:\n                module.fail_json(msg=\"Failed to unregister: %s\" % to_native(e))\n            else:\n                module.exit_json(changed=True, msg=\"System successfully unregistered from %s.\" % server_hostname)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 765,
                    "end_line": 924,
                    "variables": {
                        "rhsm": [
                            768,
                            899,
                            869,
                            901,
                            903,
                            872,
                            878,
                            880,
                            915,
                            820,
                            919,
                            920,
                            892,
                            893,
                            894
                        ],
                        "Rhsm": [
                            768
                        ],
                        "module": [
                            773,
                            907,
                            909,
                            916,
                            922,
                            924,
                            820,
                            821,
                            822,
                            823,
                            824,
                            825,
                            826,
                            827,
                            828,
                            829,
                            830,
                            832,
                            833,
                            834,
                            836,
                            839,
                            844,
                            845,
                            846,
                            847,
                            848,
                            849,
                            850,
                            851,
                            852,
                            853,
                            856,
                            863,
                            874,
                            882,
                            884,
                            887,
                            889,
                            893
                        ],
                        "AnsibleModule": [
                            773
                        ],
                        "rhsm.module": [
                            820
                        ],
                        "state": [
                            866,
                            821,
                            914
                        ],
                        "module.params": [
                            821,
                            822,
                            823,
                            824,
                            825,
                            826,
                            827,
                            828,
                            829,
                            830,
                            833,
                            834,
                            836,
                            844,
                            845,
                            846,
                            847,
                            848,
                            849,
                            850,
                            851,
                            852,
                            853,
                            893
                        ],
                        "username": [
                            894,
                            822
                        ],
                        "password": [
                            894,
                            823
                        ],
                        "server_hostname": [
                            896,
                            907,
                            910,
                            882,
                            824,
                            924
                        ],
                        "server_insecure": [
                            896,
                            825
                        ],
                        "rhsm_baseurl": [
                            896,
                            826
                        ],
                        "rhsm_repo_ca_cert": [
                            827
                        ],
                        "auto_attach": [
                            828,
                            894
                        ],
                        "activationkey": [
                            829,
                            894,
                            831
                        ],
                        "org_id": [
                            894,
                            830,
                            831
                        ],
                        "module.fail_json": [
                            832,
                            839,
                            874,
                            907,
                            882,
                            922,
                            863
                        ],
                        "environment": [
                            896,
                            833
                        ],
                        "pool": [
                            834,
                            902,
                            903,
                            875,
                            880
                        ],
                        "pool_ids": [
                            835,
                            900,
                            901,
                            875,
                            843,
                            877,
                            878
                        ],
                        "value": [
                            836,
                            837,
                            838,
                            840,
                            842
                        ],
                        "isinstance": [
                            837
                        ],
                        "dict": [
                            837
                        ],
                        "len": [
                            838
                        ],
                        "pool_id": [
                            840,
                            842,
                            843
                        ],
                        "quantity": [
                            840,
                            842,
                            843
                        ],
                        "list": [
                            840
                        ],
                        "value.items": [
                            840
                        ],
                        "str": [
                            843
                        ],
                        "consumer_type": [
                            844,
                            895
                        ],
                        "consumer_name": [
                            845,
                            895
                        ],
                        "consumer_id": [
                            846,
                            895
                        ],
                        "force_register": [
                            895,
                            869,
                            847
                        ],
                        "server_proxy_hostname": [
                            848,
                            897
                        ],
                        "server_proxy_port": [
                            849,
                            897
                        ],
                        "server_proxy_user": [
                            897,
                            850
                        ],
                        "server_proxy_password": [
                            897,
                            851
                        ],
                        "release": [
                            897,
                            852
                        ],
                        "syspurpose": [
                            898,
                            870,
                            853,
                            859,
                            861
                        ],
                        "SUBMAN_CMD": [
                            856
                        ],
                        "module.get_bin_path": [
                            856
                        ],
                        "syspurpose_changed": [
                            858,
                            861,
                            886
                        ],
                        "update_syspurpose": [
                            861
                        ],
                        "SysPurpose": [
                            861
                        ],
                        "Exception": [
                            873,
                            906,
                            881,
                            921,
                            862
                        ],
                        "to_native": [
                            874,
                            907,
                            882,
                            922,
                            863
                        ],
                        "err": [
                            863
                        ],
                        "rhsm.is_registered": [
                            915,
                            869
                        ],
                        "rhsm.sync_syspurpose": [
                            872,
                            899
                        ],
                        "e": [
                            874,
                            907,
                            882,
                            922
                        ],
                        "result": [
                            880,
                            884,
                            878
                        ],
                        "rhsm.update_subscriptions_by_pool_ids": [
                            878
                        ],
                        "rhsm.update_subscriptions": [
                            880
                        ],
                        "module.exit_json": [
                            909,
                            884,
                            916,
                            887,
                            889,
                            924
                        ],
                        "rhsm.enable": [
                            892
                        ],
                        "rhsm.configure": [
                            893
                        ],
                        "rhsm.register": [
                            894
                        ],
                        "subscribed_pool_ids": [
                            911,
                            905,
                            901,
                            903
                        ],
                        "rhsm.subscribe_by_pool_ids": [
                            901
                        ],
                        "rhsm.subscribe": [
                            903
                        ],
                        "rhsm.unsubscribe": [
                            919
                        ],
                        "rhsm.unregister": [
                            920
                        ]
                    },
                    "filtered_variables": {
                        "rhsm": [
                            768,
                            899,
                            869,
                            901,
                            903,
                            872,
                            878,
                            880,
                            915,
                            820,
                            919,
                            920,
                            892,
                            893,
                            894
                        ],
                        "Rhsm": [
                            768
                        ],
                        "module": [
                            773,
                            907,
                            909,
                            916,
                            922,
                            924,
                            820,
                            821,
                            822,
                            823,
                            824,
                            825,
                            826,
                            827,
                            828,
                            829,
                            830,
                            832,
                            833,
                            834,
                            836,
                            839,
                            844,
                            845,
                            846,
                            847,
                            848,
                            849,
                            850,
                            851,
                            852,
                            853,
                            856,
                            863,
                            874,
                            882,
                            884,
                            887,
                            889,
                            893
                        ],
                        "AnsibleModule": [
                            773
                        ],
                        "rhsm.module": [
                            820
                        ],
                        "state": [
                            866,
                            821,
                            914
                        ],
                        "module.params": [
                            821,
                            822,
                            823,
                            824,
                            825,
                            826,
                            827,
                            828,
                            829,
                            830,
                            833,
                            834,
                            836,
                            844,
                            845,
                            846,
                            847,
                            848,
                            849,
                            850,
                            851,
                            852,
                            853,
                            893
                        ],
                        "username": [
                            894,
                            822
                        ],
                        "password": [
                            894,
                            823
                        ],
                        "server_hostname": [
                            896,
                            907,
                            910,
                            882,
                            824,
                            924
                        ],
                        "server_insecure": [
                            896,
                            825
                        ],
                        "rhsm_baseurl": [
                            896,
                            826
                        ],
                        "rhsm_repo_ca_cert": [
                            827
                        ],
                        "auto_attach": [
                            828,
                            894
                        ],
                        "activationkey": [
                            829,
                            894,
                            831
                        ],
                        "org_id": [
                            894,
                            830,
                            831
                        ],
                        "module.fail_json": [
                            832,
                            839,
                            874,
                            907,
                            882,
                            922,
                            863
                        ],
                        "environment": [
                            896,
                            833
                        ],
                        "pool": [
                            834,
                            902,
                            903,
                            875,
                            880
                        ],
                        "pool_ids": [
                            835,
                            900,
                            901,
                            875,
                            843,
                            877,
                            878
                        ],
                        "value": [
                            836,
                            837,
                            838,
                            840,
                            842
                        ],
                        "pool_id": [
                            840,
                            842,
                            843
                        ],
                        "quantity": [
                            840,
                            842,
                            843
                        ],
                        "value.items": [
                            840
                        ],
                        "consumer_type": [
                            844,
                            895
                        ],
                        "consumer_name": [
                            845,
                            895
                        ],
                        "consumer_id": [
                            846,
                            895
                        ],
                        "force_register": [
                            895,
                            869,
                            847
                        ],
                        "server_proxy_hostname": [
                            848,
                            897
                        ],
                        "server_proxy_port": [
                            849,
                            897
                        ],
                        "server_proxy_user": [
                            897,
                            850
                        ],
                        "server_proxy_password": [
                            897,
                            851
                        ],
                        "release": [
                            897,
                            852
                        ],
                        "syspurpose": [
                            898,
                            870,
                            853,
                            859,
                            861
                        ],
                        "SUBMAN_CMD": [
                            856
                        ],
                        "module.get_bin_path": [
                            856
                        ],
                        "syspurpose_changed": [
                            858,
                            861,
                            886
                        ],
                        "update_syspurpose": [
                            861
                        ],
                        "SysPurpose": [
                            861
                        ],
                        "to_native": [
                            874,
                            907,
                            882,
                            922,
                            863
                        ],
                        "err": [
                            863
                        ],
                        "rhsm.is_registered": [
                            915,
                            869
                        ],
                        "rhsm.sync_syspurpose": [
                            872,
                            899
                        ],
                        "e": [
                            874,
                            907,
                            882,
                            922
                        ],
                        "result": [
                            880,
                            884,
                            878
                        ],
                        "rhsm.update_subscriptions_by_pool_ids": [
                            878
                        ],
                        "rhsm.update_subscriptions": [
                            880
                        ],
                        "module.exit_json": [
                            909,
                            884,
                            916,
                            887,
                            889,
                            924
                        ],
                        "rhsm.enable": [
                            892
                        ],
                        "rhsm.configure": [
                            893
                        ],
                        "rhsm.register": [
                            894
                        ],
                        "subscribed_pool_ids": [
                            911,
                            905,
                            901,
                            903
                        ],
                        "rhsm.subscribe_by_pool_ids": [
                            901
                        ],
                        "rhsm.subscribe": [
                            903
                        ],
                        "rhsm.unsubscribe": [
                            919
                        ],
                        "rhsm.unregister": [
                            920
                        ]
                    },
                    "diff_line_number": 842,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def main():\n\n    # Load RHSM configuration from file\n    rhsm = Rhsm(None)\n\n    # Note: the default values for parameters are:\n    # 'type': 'str', 'default': None, 'required': False\n    # So there is no need to repeat these values for each parameter.\n    module = AnsibleModule(\n        argument_spec={\n            'state': {'default': 'present', 'choices': ['present', 'absent']},\n            'username': {},\n            'password': {'no_log': True},\n            'server_hostname': {},\n            'server_insecure': {},\n            'rhsm_baseurl': {},\n            'rhsm_repo_ca_cert': {},\n            'auto_attach': {'aliases': ['autosubscribe'], 'type': 'bool'},\n            'activationkey': {'no_log': True},\n            'org_id': {},\n            'environment': {},\n            'pool': {'default': '^$'},\n            'pool_ids': {'default': [], 'type': 'list'},\n            'consumer_type': {},\n            'consumer_name': {},\n            'consumer_id': {},\n            'force_register': {'default': False, 'type': 'bool'},\n            'server_proxy_hostname': {},\n            'server_proxy_port': {},\n            'server_proxy_user': {},\n            'server_proxy_password': {'no_log': True},\n            'release': {},\n            'syspurpose': {\n                'type': 'dict',\n                'options': {\n                    'role': {},\n                    'usage': {},\n                    'service_level_agreement': {},\n                    'addons': {'type': 'list'},\n                    'sync': {'type': 'bool', 'default': False}\n                }\n            }\n        },\n        required_together=[['username', 'password'],\n                           ['server_proxy_hostname', 'server_proxy_port'],\n                           ['server_proxy_user', 'server_proxy_password']],\n        mutually_exclusive=[['activationkey', 'username'],\n                            ['activationkey', 'consumer_id'],\n                            ['activationkey', 'environment'],\n                            ['activationkey', 'autosubscribe'],\n                            ['force', 'consumer_id'],\n                            ['pool', 'pool_ids']],\n        required_if=[['state', 'present', ['username', 'activationkey'], True]],\n    )\n\n    rhsm.module = module\n    state = module.params['state']\n    username = module.params['username']\n    password = module.params['password']\n    server_hostname = module.params['server_hostname']\n    server_insecure = module.params['server_insecure']\n    rhsm_baseurl = module.params['rhsm_baseurl']\n    rhsm_repo_ca_cert = module.params['rhsm_repo_ca_cert']\n    auto_attach = module.params['auto_attach']\n    activationkey = module.params['activationkey']\n    org_id = module.params['org_id']\n    if activationkey and not org_id:\n        module.fail_json(msg='org_id is required when using activationkey')\n    environment = module.params['environment']\n    pool = module.params['pool']\n    pool_ids = {}\n    for value in module.params['pool_ids']:\n        if isinstance(value, dict):\n            if len(value) != 1:\n                module.fail_json(msg='Unable to parse pool_ids option.')\n            pool_id, quantity = list(value.items())[0]\n        else:\n            pool_id, quantity = value, 1\n        pool_ids[pool_id] = str(quantity)\n    consumer_type = module.params[\"consumer_type\"]\n    consumer_name = module.params[\"consumer_name\"]\n    consumer_id = module.params[\"consumer_id\"]\n    force_register = module.params[\"force_register\"]\n    server_proxy_hostname = module.params['server_proxy_hostname']\n    server_proxy_port = module.params['server_proxy_port']\n    server_proxy_user = module.params['server_proxy_user']\n    server_proxy_password = module.params['server_proxy_password']\n    release = module.params['release']\n    syspurpose = module.params['syspurpose']\n\n    global SUBMAN_CMD\n    SUBMAN_CMD = module.get_bin_path('subscription-manager', True)\n\n    syspurpose_changed = False\n    if syspurpose is not None:\n        try:\n            syspurpose_changed = SysPurpose().update_syspurpose(syspurpose)\n        except Exception as err:\n            module.fail_json(msg=\"Failed to update syspurpose attributes: %s\" % to_native(err))\n\n    # Ensure system is registered\n    if state == 'present':\n\n        # Register system\n        if rhsm.is_registered and not force_register:\n            if syspurpose and 'sync' in syspurpose and syspurpose['sync'] is True:\n                try:\n                    rhsm.sync_syspurpose()\n                except Exception as e:\n                    module.fail_json(msg=\"Failed to synchronize syspurpose attributes: %s\" % to_native(e))\n            if pool != '^$' or pool_ids:\n                try:\n                    if pool_ids:\n                        result = rhsm.update_subscriptions_by_pool_ids(pool_ids)\n                    else:\n                        result = rhsm.update_subscriptions(pool)\n                except Exception as e:\n                    module.fail_json(msg=\"Failed to update subscriptions for '%s': %s\" % (server_hostname, to_native(e)))\n                else:\n                    module.exit_json(**result)\n            else:\n                if syspurpose_changed is True:\n                    module.exit_json(changed=True, msg=\"Syspurpose attributes changed.\")\n                else:\n                    module.exit_json(changed=False, msg=\"System already registered.\")\n        else:\n            try:\n                rhsm.enable()\n                rhsm.configure(**module.params)\n                rhsm.register(username, password, auto_attach, activationkey, org_id,\n                              consumer_type, consumer_name, consumer_id, force_register,\n                              environment, rhsm_baseurl, server_insecure, server_hostname,\n                              server_proxy_hostname, server_proxy_port, server_proxy_user, server_proxy_password, release)\n                if syspurpose and 'sync' in syspurpose and syspurpose['sync'] is True:\n                    rhsm.sync_syspurpose()\n                if pool_ids:\n                    subscribed_pool_ids = rhsm.subscribe_by_pool_ids(pool_ids)\n                elif pool != '^$':\n                    subscribed_pool_ids = rhsm.subscribe(pool)\n                else:\n                    subscribed_pool_ids = []\n            except Exception as e:\n                module.fail_json(msg=\"Failed to register with '%s': %s\" % (server_hostname, to_native(e)))\n            else:\n                module.exit_json(changed=True,\n                                 msg=\"System successfully registered to '%s'.\" % server_hostname,\n                                 subscribed_pool_ids=subscribed_pool_ids)\n\n    # Ensure system is *not* registered\n    if state == 'absent':\n        if not rhsm.is_registered:\n            module.exit_json(changed=False, msg=\"System already unregistered.\")\n        else:\n            try:\n                rhsm.unsubscribe()\n                rhsm.unregister()\n            except Exception as e:\n                module.fail_json(msg=\"Failed to unregister: %s\" % to_native(e))\n            else:\n                module.exit_json(changed=True, msg=\"System successfully unregistered from %s.\" % server_hostname)",
                "def __init__(self, module, username=None, password=None):\n    self.module = module\n    self.username = username\n    self.password = password",
                "def configure(self):\n    raise NotImplementedError(\"Must be implemented by a sub-class\")",
                "def enable(self):\n    # Remove any existing redhat.repo\n    if isfile(self.REDHAT_REPO):\n        unlink(self.REDHAT_REPO)",
                "def register(self):\n    raise NotImplementedError(\"Must be implemented by a sub-class\")",
                "def unregister(self):\n    raise NotImplementedError(\"Must be implemented by a sub-class\")",
                "def unsubscribe(self):\n    raise NotImplementedError(\"Must be implemented by a sub-class\")",
                "def update_plugin_conf(self, plugin, enabled=True):\n    plugin_conf = '/etc/yum/pluginconf.d/%s.conf' % plugin\n\n    if isfile(plugin_conf):\n        tmpfd, tmpfile = tempfile.mkstemp()\n        shutil.copy2(plugin_conf, tmpfile)\n        cfg = configparser.ConfigParser()\n        cfg.read([tmpfile])\n\n        if enabled:\n            cfg.set('main', 'enabled', '1')\n        else:\n            cfg.set('main', 'enabled', '0')\n\n        fd = open(tmpfile, 'w+')\n        cfg.write(fd)\n        fd.close()\n        self.module.atomic_move(tmpfile, plugin_conf)",
                "def subscribe(self, **kwargs):\n    raise NotImplementedError(\"Must be implemented by a sub-class\")",
                "def __init__(self, module, username=None, password=None):\n    RegistrationBase.__init__(self, module, username, password)\n    self.module = module",
                "def enable(self):\n    '''\n        Enable the system to receive updates from subscription-manager.\n        This involves updating affected yum plugins and removing any\n        conflicting yum repositories.\n    '''\n    RegistrationBase.enable(self)\n    self.update_plugin_conf('rhnplugin', False)\n    self.update_plugin_conf('subscription-manager', True)",
                "def configure(self, **kwargs):\n    '''\n        Configure the system as directed for registration with RHSM\n        Raises:\n          * Exception - if error occurs while running command\n    '''\n\n    args = [SUBMAN_CMD, 'config']\n\n    # Pass supplied **kwargs as parameters to subscription-manager.  Ignore\n    # non-configuration parameters and replace '_' with '.'.  For example,\n    # 'server_hostname' becomes '--server.hostname'.\n    options = []\n    for k, v in sorted(kwargs.items()):\n        if re.search(r'^(server|rhsm)_', k) and v is not None:\n            options.append('--%s=%s' % (k.replace('_', '.', 1), v))\n\n    # When there is nothing to configure, then it is not necessary\n    # to run config command, because it only returns current\n    # content of current configuration file\n    if len(options) == 0:\n        return\n\n    args.extend(options)\n\n    self.module.run_command(args, check_rc=True)",
                "@property\ndef is_registered(self):\n    '''\n        Determine whether the current system\n        Returns:\n          * Boolean - whether the current system is currently registered to\n                      RHSM.\n    '''\n\n    args = [SUBMAN_CMD, 'identity']\n    rc, stdout, stderr = self.module.run_command(args, check_rc=False)\n    if rc == 0:\n        return True\n    else:\n        return False",
                "def register(self, username, password, auto_attach, activationkey, org_id,\n             consumer_type, consumer_name, consumer_id, force_register, environment,\n             rhsm_baseurl, server_insecure, server_hostname, server_proxy_hostname,\n             server_proxy_port, server_proxy_user, server_proxy_password, release):\n    '''\n        Register the current system to the provided RHSM or Sat6 server\n        Raises:\n          * Exception - if error occurs while running command\n    '''\n    args = [SUBMAN_CMD, 'register']\n\n    # Generate command arguments\n    if force_register:\n        args.extend(['--force'])\n\n    if rhsm_baseurl:\n        args.extend(['--baseurl', rhsm_baseurl])\n\n    if server_insecure:\n        args.extend(['--insecure'])\n\n    if server_hostname:\n        args.extend(['--serverurl', server_hostname])\n\n    if org_id:\n        args.extend(['--org', org_id])\n\n    if server_proxy_hostname and server_proxy_port:\n        args.extend(['--proxy', server_proxy_hostname + ':' + server_proxy_port])\n\n    if server_proxy_user:\n        args.extend(['--proxyuser', server_proxy_user])\n\n    if server_proxy_password:\n        args.extend(['--proxypassword', server_proxy_password])\n\n    if activationkey:\n        args.extend(['--activationkey', activationkey])\n    else:\n        if auto_attach:\n            args.append('--auto-attach')\n        if username:\n            args.extend(['--username', username])\n        if password:\n            args.extend(['--password', password])\n        if consumer_type:\n            args.extend(['--type', consumer_type])\n        if consumer_name:\n            args.extend(['--name', consumer_name])\n        if consumer_id:\n            args.extend(['--consumerid', consumer_id])\n        if environment:\n            args.extend(['--environment', environment])\n\n    if release:\n        args.extend(['--release', release])\n\n    rc, stderr, stdout = self.module.run_command(args, check_rc=True, expand_user_and_vars=False)",
                "def unsubscribe(self, serials=None):\n    '''\n        Unsubscribe a system from subscribed channels\n        Args:\n          serials(list or None): list of serials to unsubscribe. If\n                                 serials is none or an empty list, then\n                                 all subscribed channels will be removed.\n        Raises:\n          * Exception - if error occurs while running command\n    '''\n    items = []\n    if serials is not None and serials:\n        items = [\"--serial=%s\" % s for s in serials]\n    if serials is None:\n        items = [\"--all\"]\n\n    if items:\n        args = [SUBMAN_CMD, 'unsubscribe'] + items\n        rc, stderr, stdout = self.module.run_command(args, check_rc=True)\n    return serials",
                "def unregister(self):\n    '''\n        Unregister a currently registered system\n        Raises:\n          * Exception - if error occurs while running command\n    '''\n    args = [SUBMAN_CMD, 'unregister']\n    rc, stderr, stdout = self.module.run_command(args, check_rc=True)\n    self.update_plugin_conf('rhnplugin', False)\n    self.update_plugin_conf('subscription-manager', False)",
                "def subscribe(self, regexp):\n    '''\n        Subscribe current system to available pools matching the specified\n        regular expression. It matches regexp against available pool ids first.\n        If any pool ids match, subscribe to those pools and return.\n\n        If no pool ids match, then match regexp against available pool product\n        names. Note this can still easily match many many pools. Then subscribe\n        to those pools.\n\n        Since a pool id is a more specific match, we only fallback to matching\n        against names if we didn't match pool ids.\n\n        Raises:\n          * Exception - if error occurs while running command\n    '''\n    # See https://github.com/ansible/ansible/issues/19466\n\n    # subscribe to pools whose pool id matches regexp (and only the pool id)\n    subscribed_pool_ids = self.subscribe_pool(regexp)\n\n    # If we found any matches, we are done\n    # Don't attempt to match pools by product name\n    if subscribed_pool_ids:\n        return subscribed_pool_ids\n\n    # We didn't match any pool ids.\n    # Now try subscribing to pools based on product name match\n    # Note: This can match lots of product names.\n    subscribed_by_product_pool_ids = self.subscribe_product(regexp)\n    if subscribed_by_product_pool_ids:\n        return subscribed_by_product_pool_ids\n\n    # no matches\n    return []",
                "def subscribe_by_pool_ids(self, pool_ids):\n    \"\"\"\n    Try to subscribe to the list of pool IDs\n    \"\"\"\n    available_pools = RhsmPools(self.module)\n\n    available_pool_ids = [p.get_pool_id() for p in available_pools]\n\n    for pool_id, quantity in sorted(pool_ids.items()):\n        if pool_id in available_pool_ids:\n            args = [SUBMAN_CMD, 'attach', '--pool', pool_id, '--quantity', quantity]\n            rc, stderr, stdout = self.module.run_command(args, check_rc=True)\n        else:\n            self.module.fail_json(msg='Pool ID: %s not in list of available pools' % pool_id)\n    return pool_ids",
                "def subscribe_pool(self, regexp):\n    '''\n        Subscribe current system to available pools matching the specified\n        regular expression\n        Raises:\n          * Exception - if error occurs while running command\n    '''\n\n    # Available pools ready for subscription\n    available_pools = RhsmPools(self.module)\n\n    subscribed_pool_ids = []\n    for pool in available_pools.filter_pools(regexp):\n        pool.subscribe()\n        subscribed_pool_ids.append(pool.get_pool_id())\n    return subscribed_pool_ids",
                "def subscribe_product(self, regexp):\n    '''\n        Subscribe current system to available pools matching the specified\n        regular expression\n        Raises:\n          * Exception - if error occurs while running command\n    '''\n\n    # Available pools ready for subscription\n    available_pools = RhsmPools(self.module)\n\n    subscribed_pool_ids = []\n    for pool in available_pools.filter_products(regexp):\n        pool.subscribe()\n        subscribed_pool_ids.append(pool.get_pool_id())\n    return subscribed_pool_ids",
                "def update_subscriptions(self, regexp):\n    changed = False\n    consumed_pools = RhsmPools(self.module, consumed=True)\n    pool_ids_to_keep = [p.get_pool_id() for p in consumed_pools.filter_pools(regexp)]\n    pool_ids_to_keep.extend([p.get_pool_id() for p in consumed_pools.filter_products(regexp)])\n\n    serials_to_remove = [p.Serial for p in consumed_pools if p.get_pool_id() not in pool_ids_to_keep]\n    serials = self.unsubscribe(serials=serials_to_remove)\n\n    subscribed_pool_ids = self.subscribe(regexp)\n\n    if subscribed_pool_ids or serials:\n        changed = True\n    return {'changed': changed, 'subscribed_pool_ids': subscribed_pool_ids,\n            'unsubscribed_serials': serials}",
                "def update_subscriptions_by_pool_ids(self, pool_ids):\n    changed = False\n    consumed_pools = RhsmPools(self.module, consumed=True)\n\n    existing_pools = {}\n    for p in consumed_pools:\n        existing_pools[p.get_pool_id()] = p.QuantityUsed\n\n    serials_to_remove = [p.Serial for p in consumed_pools if pool_ids.get(p.get_pool_id(), 0) != p.QuantityUsed]\n    serials = self.unsubscribe(serials=serials_to_remove)\n\n    missing_pools = {}\n    for pool_id, quantity in sorted(pool_ids.items()):\n        if existing_pools.get(pool_id, 0) != quantity:\n            missing_pools[pool_id] = quantity\n\n    self.subscribe_by_pool_ids(missing_pools)\n\n    if missing_pools or serials:\n        changed = True\n    return {'changed': changed, 'subscribed_pool_ids': missing_pools.keys(),\n            'unsubscribed_serials': serials}",
                "def sync_syspurpose(self):\n    \"\"\"\n    Try to synchronize syspurpose attributes with server\n    \"\"\"\n    args = [SUBMAN_CMD, 'status']\n    rc, stdout, stderr = self.module.run_command(args, check_rc=False)",
                "def __init__(self, module, **kwargs):\n    self.module = module\n    for k, v in kwargs.items():\n        setattr(self, k, v)",
                "def __str__(self):\n    return str(self.__getattribute__('_name'))",
                "def get_pool_id(self):\n    return getattr(self, 'PoolId', getattr(self, 'PoolID'))",
                "def subscribe(self):\n    args = \"subscription-manager attach --pool %s\" % self.get_pool_id()\n    rc, stdout, stderr = self.module.run_command(args, check_rc=True)\n    if rc == 0:\n        return True\n    else:\n        return False",
                "def __init__(self, module, consumed=False):\n    self.module = module\n    self.products = self._load_product_list(consumed)",
                "def __iter__(self):\n    return self.products.__iter__()",
                "def _load_product_list(self, consumed=False):\n    \"\"\"\n        Loads list of all available or consumed pools for system in data structure\n\n        Args:\n            consumed(bool): if True list consumed  pools, else list available pools (default False)\n    \"\"\"\n    args = \"subscription-manager list\"\n    if consumed:\n        args += \" --consumed\"\n    else:\n        args += \" --available\"\n    lang_env = dict(LANG='C', LC_ALL='C', LC_MESSAGES='C')\n    rc, stdout, stderr = self.module.run_command(args, check_rc=True, environ_update=lang_env)\n\n    products = []\n    for line in stdout.split('\\n'):\n        # Remove leading+trailing whitespace\n        line = line.strip()\n        # An empty line implies the end of a output group\n        if len(line) == 0:\n            continue\n        # If a colon ':' is found, parse\n        elif ':' in line:\n            (key, value) = line.split(':', 1)\n            key = key.strip().replace(\" \", \"\")  # To unify\n            value = value.strip()\n            if key in ['ProductName', 'SubscriptionName']:\n                # Remember the name for later processing\n                products.append(RhsmPool(self.module, _name=value, key=value))\n            elif products:\n                # Associate value with most recently recorded product\n                products[-1].__setattr__(key, value)\n            # FIXME - log some warning?\n            # else:\n                # warnings.warn(\"Unhandled subscription key/value: %s/%s\" % (key,value))\n    return products",
                "def filter_pools(self, regexp='^$'):\n    '''\n        Return a list of RhsmPools whose pool id matches the provided regular expression\n    '''\n    r = re.compile(regexp)\n    for product in self.products:\n        if r.search(product.get_pool_id()):\n            yield product",
                "def filter_products(self, regexp='^$'):\n    '''\n        Return a list of RhsmPools whose product name matches the provided regular expression\n    '''\n    r = re.compile(regexp)\n    for product in self.products:\n        if r.search(product._name):\n            yield product",
                "def __init__(self, path=None):\n    \"\"\"\n    Initialize class used for reading syspurpose json file\n    \"\"\"\n    self.path = path or self.SYSPURPOSE_FILE_PATH",
                "def update_syspurpose(self, new_syspurpose):\n    \"\"\"\n    Try to update current syspurpose with new attributes from new_syspurpose\n    \"\"\"\n    syspurpose = {}\n    syspurpose_changed = False\n    for key, value in new_syspurpose.items():\n        if key in self.ALLOWED_ATTRIBUTES:\n            if value is not None:\n                syspurpose[key] = value\n        elif key == 'sync':\n            pass\n        else:\n            raise KeyError(\"Attribute: %s not in list of allowed attributes: %s\" %\n                           (key, self.ALLOWED_ATTRIBUTES))\n    current_syspurpose = self._read_syspurpose()\n    if current_syspurpose != syspurpose:\n        syspurpose_changed = True\n    # Update current syspurpose with new values\n    current_syspurpose.update(syspurpose)\n    # When some key is not listed in new syspurpose, then delete it from current syspurpose\n    # and ignore custom attributes created by user (e.g. \"foo\": \"bar\")\n    for key in list(current_syspurpose):\n        if key in self.ALLOWED_ATTRIBUTES and key not in syspurpose:\n            del current_syspurpose[key]\n    self._write_syspurpose(current_syspurpose)\n    return syspurpose_changed",
                "def _write_syspurpose(self, new_syspurpose):\n    \"\"\"\n    This function tries to update current new_syspurpose attributes to\n    json file.\n    \"\"\"\n    with open(self.path, \"w\") as fp:\n        fp.write(json.dumps(new_syspurpose, indent=2, ensure_ascii=False, sort_keys=True))",
                "def _read_syspurpose(self):\n    \"\"\"\n    Read current syspurpuse from json file.\n    \"\"\"\n    current_syspurpose = {}\n    try:\n        with open(self.path, \"r\") as fp:\n            content = fp.read()\n    except IOError:\n        pass\n    else:\n        current_syspurpose = json.loads(content)\n    return current_syspurpose"
            ],
            "inscope_function_signatures": [
                "main()",
                "__init__(self, module, username=None, password=None)",
                "configure(self)",
                "enable(self)",
                "register(self)",
                "unregister(self)",
                "unsubscribe(self)",
                "update_plugin_conf(self, plugin, enabled=True)",
                "subscribe(self, **kwargs)",
                "__init__(self, module, username=None, password=None)",
                "enable(self)",
                "configure(self, **kwargs)",
                "is_registered(self)",
                "register(self, username, password, auto_attach, activationkey, org_id, consumer_type, consumer_name, consumer_id, force_register, environment, rhsm_baseurl, server_insecure, server_hostname, server_proxy_hostname, server_proxy_port, server_proxy_user, server_proxy_password, release)",
                "unsubscribe(self, serials=None)",
                "unregister(self)",
                "subscribe(self, regexp)",
                "subscribe_by_pool_ids(self, pool_ids)",
                "subscribe_pool(self, regexp)",
                "subscribe_product(self, regexp)",
                "update_subscriptions(self, regexp)",
                "update_subscriptions_by_pool_ids(self, pool_ids)",
                "sync_syspurpose(self)",
                "__init__(self, module, **kwargs)",
                "__str__(self)",
                "get_pool_id(self)",
                "subscribe(self)",
                "__init__(self, module, consumed=False)",
                "__iter__(self)",
                "_load_product_list(self, consumed=False)",
                "filter_pools(self, regexp='^$')",
                "filter_products(self, regexp='^$')",
                "__init__(self, path=None)",
                "update_syspurpose(self, new_syspurpose)",
                "_write_syspurpose(self, new_syspurpose)",
                "_read_syspurpose(self)"
            ],
            "variables_in_file": {
                "__metaclass__": [
                    8
                ],
                "type": [
                    8
                ],
                "ANSIBLE_METADATA": [
                    11
                ],
                "DOCUMENTATION": [
                    16
                ],
                "EXAMPLES": [
                    164
                ],
                "RETURN": [
                    249
                ],
                "SUBMAN_CMD": [
                    390,
                    518,
                    457,
                    271,
                    601,
                    467,
                    374,
                    856,
                    345
                ],
                "object": [
                    274,
                    699,
                    605,
                    630
                ],
                "REDHAT_REPO": [
                    276
                ],
                "self.module": [
                    512,
                    519,
                    521,
                    655,
                    533,
                    279,
                    671,
                    550,
                    560,
                    438,
                    317,
                    576,
                    326,
                    458,
                    468,
                    602,
                    611,
                    363,
                    623,
                    375,
                    636
                ],
                "self": [
                    512,
                    640,
                    519,
                    521,
                    655,
                    533,
                    279,
                    280,
                    281,
                    671,
                    288,
                    289,
                    550,
                    685,
                    560,
                    565,
                    438,
                    567,
                    694,
                    317,
                    576,
                    325,
                    326,
                    583,
                    712,
                    458,
                    334,
                    335,
                    336,
                    590,
                    721,
                    468,
                    469,
                    470,
                    728,
                    729,
                    602,
                    737,
                    611,
                    739,
                    613,
                    616,
                    363,
                    491,
                    619,
                    622,
                    623,
                    747,
                    756,
                    501,
                    375,
                    636,
                    637
                ],
                "module": [
                    773,
                    907,
                    909,
                    916,
                    279,
                    922,
                    924,
                    820,
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    832,
                    833,
                    834,
                    836,
                    325,
                    326,
                    839,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    856,
                    863,
                    611,
                    874,
                    882,
                    884,
                    887,
                    889,
                    636,
                    893
                ],
                "self.username": [
                    280
                ],
                "username": [
                    325,
                    422,
                    423,
                    822,
                    280,
                    894
                ],
                "self.password": [
                    281
                ],
                "password": [
                    325,
                    424,
                    425,
                    823,
                    281,
                    894
                ],
                "NotImplementedError": [
                    320,
                    292,
                    295,
                    298,
                    284
                ],
                "isfile": [
                    288,
                    303
                ],
                "self.REDHAT_REPO": [
                    288,
                    289
                ],
                "unlink": [
                    289
                ],
                "plugin_conf": [
                    305,
                    317,
                    301,
                    303
                ],
                "plugin": [
                    301
                ],
                "tmpfd": [
                    304
                ],
                "tmpfile": [
                    304,
                    305,
                    307,
                    314,
                    317
                ],
                "tempfile.mkstemp": [
                    304
                ],
                "tempfile": [
                    304
                ],
                "shutil.copy2": [
                    305
                ],
                "shutil": [
                    305
                ],
                "cfg": [
                    306,
                    307,
                    310,
                    312,
                    315
                ],
                "configparser.ConfigParser": [
                    306
                ],
                "configparser": [
                    306
                ],
                "cfg.read": [
                    307
                ],
                "enabled": [
                    309
                ],
                "cfg.set": [
                    312,
                    310
                ],
                "fd": [
                    314,
                    315,
                    316
                ],
                "open": [
                    314,
                    747,
                    756
                ],
                "cfg.write": [
                    315
                ],
                "fd.close": [
                    316
                ],
                "self.module.atomic_move": [
                    317
                ],
                "RegistrationBase": [
                    323,
                    325,
                    334
                ],
                "RegistrationBase.__init__": [
                    325
                ],
                "RegistrationBase.enable": [
                    334
                ],
                "self.update_plugin_conf": [
                    336,
                    469,
                    470,
                    335
                ],
                "args": [
                    390,
                    518,
                    519,
                    649,
                    394,
                    651,
                    397,
                    653,
                    655,
                    400,
                    403,
                    406,
                    409,
                    412,
                    415,
                    418,
                    421,
                    423,
                    425,
                    427,
                    429,
                    431,
                    433,
                    436,
                    438,
                    457,
                    458,
                    467,
                    468,
                    345,
                    601,
                    602,
                    361,
                    363,
                    622,
                    623,
                    374,
                    375
                ],
                "options": [
                    353,
                    358,
                    350,
                    361
                ],
                "k": [
                    352,
                    353,
                    612,
                    613,
                    351
                ],
                "v": [
                    352,
                    353,
                    612,
                    613,
                    351
                ],
                "sorted": [
                    586,
                    516,
                    351
                ],
                "kwargs.items": [
                    612,
                    351
                ],
                "kwargs": [
                    612,
                    351
                ],
                "re.search": [
                    352
                ],
                "re": [
                    352,
                    684,
                    693
                ],
                "options.append": [
                    353
                ],
                "k.replace": [
                    353
                ],
                "len": [
                    838,
                    662,
                    358
                ],
                "args.extend": [
                    418,
                    423,
                    361,
                    394,
                    425,
                    427,
                    397,
                    429,
                    431,
                    400,
                    433,
                    403,
                    436,
                    406,
                    409,
                    412,
                    415
                ],
                "self.module.run_command": [
                    519,
                    458,
                    363,
                    623,
                    655,
                    468,
                    438,
                    375,
                    602
                ],
                "rc": [
                    519,
                    458,
                    623,
                    624,
                    655,
                    468,
                    438,
                    375,
                    376,
                    602
                ],
                "stdout": [
                    519,
                    458,
                    623,
                    655,
                    658,
                    468,
                    438,
                    375,
                    602
                ],
                "stderr": [
                    519,
                    458,
                    623,
                    655,
                    468,
                    438,
                    375,
                    602
                ],
                "property": [
                    365
                ],
                "force_register": [
                    393,
                    895,
                    869,
                    847
                ],
                "rhsm_baseurl": [
                    896,
                    826,
                    396,
                    397
                ],
                "server_insecure": [
                    896,
                    825,
                    399
                ],
                "server_hostname": [
                    896,
                    907,
                    910,
                    402,
                    403,
                    882,
                    824,
                    924
                ],
                "org_id": [
                    894,
                    405,
                    406,
                    830,
                    831
                ],
                "server_proxy_hostname": [
                    408,
                    409,
                    897,
                    848
                ],
                "server_proxy_port": [
                    408,
                    409,
                    897,
                    849
                ],
                "server_proxy_user": [
                    897,
                    850,
                    411,
                    412
                ],
                "server_proxy_password": [
                    897,
                    851,
                    414,
                    415
                ],
                "activationkey": [
                    417,
                    418,
                    829,
                    894,
                    831
                ],
                "auto_attach": [
                    894,
                    420,
                    828
                ],
                "args.append": [
                    421
                ],
                "consumer_type": [
                    426,
                    427,
                    844,
                    895
                ],
                "consumer_name": [
                    845,
                    428,
                    429,
                    895
                ],
                "consumer_id": [
                    846,
                    895,
                    430,
                    431
                ],
                "environment": [
                    432,
                    433,
                    896,
                    833
                ],
                "release": [
                    897,
                    435,
                    436,
                    852
                ],
                "items": [
                    450,
                    452,
                    454,
                    456,
                    457
                ],
                "serials": [
                    451,
                    452,
                    453,
                    583,
                    459,
                    592,
                    595,
                    565,
                    569,
                    572
                ],
                "s": [
                    452
                ],
                "subscribed_pool_ids": [
                    567,
                    901,
                    903,
                    552,
                    905,
                    491,
                    555,
                    556,
                    495,
                    496,
                    911,
                    535,
                    569,
                    538,
                    539,
                    571
                ],
                "self.subscribe_pool": [
                    491
                ],
                "regexp": [
                    553,
                    491,
                    684,
                    561,
                    562,
                    501,
                    693,
                    567,
                    536
                ],
                "subscribed_by_product_pool_ids": [
                    501,
                    502,
                    503
                ],
                "self.subscribe_product": [
                    501
                ],
                "available_pools": [
                    512,
                    514,
                    550,
                    553,
                    533,
                    536
                ],
                "RhsmPools": [
                    512,
                    576,
                    550,
                    560,
                    533
                ],
                "available_pool_ids": [
                    514,
                    517
                ],
                "p.get_pool_id": [
                    514,
                    580,
                    582,
                    561,
                    562,
                    564
                ],
                "p": [
                    514,
                    579,
                    580,
                    582,
                    561,
                    562,
                    564
                ],
                "pool_id": [
                    516,
                    517,
                    518,
                    840,
                    521,
                    586,
                    587,
                    588,
                    842,
                    843
                ],
                "quantity": [
                    516,
                    518,
                    840,
                    586,
                    587,
                    588,
                    842,
                    843
                ],
                "pool_ids.items": [
                    586,
                    516
                ],
                "pool_ids": [
                    835,
                    516,
                    900,
                    582,
                    901,
                    522,
                    586,
                    843,
                    875,
                    877,
                    878
                ],
                "self.module.fail_json": [
                    521
                ],
                "pool": [
                    834,
                    902,
                    903,
                    553,
                    554,
                    555,
                    875,
                    880,
                    536,
                    537,
                    538
                ],
                "available_pools.filter_pools": [
                    536
                ],
                "pool.subscribe": [
                    537,
                    554
                ],
                "subscribed_pool_ids.append": [
                    538,
                    555
                ],
                "pool.get_pool_id": [
                    538,
                    555
                ],
                "available_pools.filter_products": [
                    553
                ],
                "changed": [
                    559,
                    593,
                    594,
                    570,
                    571,
                    575
                ],
                "consumed_pools": [
                    576,
                    579,
                    582,
                    560,
                    561,
                    562,
                    564
                ],
                "pool_ids_to_keep": [
                    561,
                    562,
                    564
                ],
                "consumed_pools.filter_pools": [
                    561
                ],
                "pool_ids_to_keep.extend": [
                    562
                ],
                "consumed_pools.filter_products": [
                    562
                ],
                "serials_to_remove": [
                    564,
                    565,
                    582,
                    583
                ],
                "p.Serial": [
                    564,
                    582
                ],
                "self.unsubscribe": [
                    565,
                    583
                ],
                "self.subscribe": [
                    567
                ],
                "existing_pools": [
                    578,
                    587,
                    580
                ],
                "p.QuantityUsed": [
                    580,
                    582
                ],
                "pool_ids.get": [
                    582
                ],
                "missing_pools": [
                    585,
                    588,
                    590,
                    592,
                    594
                ],
                "existing_pools.get": [
                    587
                ],
                "self.subscribe_by_pool_ids": [
                    590
                ],
                "missing_pools.keys": [
                    594
                ],
                "setattr": [
                    613
                ],
                "str": [
                    616,
                    843
                ],
                "self.__getattribute__": [
                    616
                ],
                "getattr": [
                    619
                ],
                "self.get_pool_id": [
                    622
                ],
                "self.products": [
                    640,
                    637,
                    694,
                    685
                ],
                "self._load_product_list": [
                    637
                ],
                "consumed": [
                    650,
                    637
                ],
                "self.products.__iter__": [
                    640
                ],
                "lang_env": [
                    654,
                    655
                ],
                "dict": [
                    837,
                    654
                ],
                "products": [
                    672,
                    674,
                    678,
                    657,
                    671
                ],
                "line": [
                    658,
                    660,
                    662,
                    665,
                    666
                ],
                "stdout.split": [
                    658
                ],
                "line.strip": [
                    660
                ],
                "key": [
                    736,
                    737,
                    674,
                    738,
                    720,
                    721,
                    723,
                    724,
                    728,
                    666,
                    667,
                    669
                ],
                "value": [
                    674,
                    836,
                    837,
                    838,
                    840,
                    842,
                    720,
                    722,
                    723,
                    666,
                    668,
                    671
                ],
                "line.split": [
                    666
                ],
                "replace": [
                    667
                ],
                "key.strip": [
                    667
                ],
                "value.strip": [
                    668
                ],
                "products.append": [
                    671
                ],
                "RhsmPool": [
                    671
                ],
                "__setattr__": [
                    674
                ],
                "r": [
                    684,
                    693,
                    686,
                    695
                ],
                "re.compile": [
                    684,
                    693
                ],
                "product": [
                    685,
                    686,
                    687,
                    694,
                    695,
                    696
                ],
                "r.search": [
                    686,
                    695
                ],
                "product.get_pool_id": [
                    686
                ],
                "product._name": [
                    695
                ],
                "SYSPURPOSE_FILE_PATH": [
                    704
                ],
                "ALLOWED_ATTRIBUTES": [
                    706
                ],
                "self.path": [
                    712,
                    747,
                    756
                ],
                "path": [
                    712
                ],
                "self.SYSPURPOSE_FILE_PATH": [
                    712
                ],
                "syspurpose": [
                    737,
                    898,
                    870,
                    861,
                    718,
                    723,
                    853,
                    730,
                    859,
                    733
                ],
                "syspurpose_changed": [
                    740,
                    719,
                    886,
                    858,
                    731,
                    861
                ],
                "new_syspurpose.items": [
                    720
                ],
                "new_syspurpose": [
                    720,
                    748
                ],
                "self.ALLOWED_ATTRIBUTES": [
                    728,
                    721,
                    737
                ],
                "KeyError": [
                    727
                ],
                "current_syspurpose": [
                    736,
                    738,
                    739,
                    762,
                    754,
                    761,
                    729,
                    730,
                    733
                ],
                "self._read_syspurpose": [
                    729
                ],
                "current_syspurpose.update": [
                    733
                ],
                "list": [
                    736,
                    840
                ],
                "self._write_syspurpose": [
                    739
                ],
                "fp": [
                    757,
                    747,
                    748,
                    756
                ],
                "fp.write": [
                    748
                ],
                "json.dumps": [
                    748
                ],
                "json": [
                    761,
                    748
                ],
                "content": [
                    761,
                    757
                ],
                "fp.read": [
                    757
                ],
                "IOError": [
                    758
                ],
                "json.loads": [
                    761
                ],
                "rhsm": [
                    768,
                    899,
                    869,
                    901,
                    903,
                    872,
                    878,
                    880,
                    915,
                    820,
                    919,
                    920,
                    892,
                    893,
                    894
                ],
                "Rhsm": [
                    768
                ],
                "AnsibleModule": [
                    773
                ],
                "rhsm.module": [
                    820
                ],
                "state": [
                    866,
                    821,
                    914
                ],
                "module.params": [
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    833,
                    834,
                    836,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    893
                ],
                "rhsm_repo_ca_cert": [
                    827
                ],
                "module.fail_json": [
                    832,
                    839,
                    874,
                    907,
                    882,
                    922,
                    863
                ],
                "isinstance": [
                    837
                ],
                "value.items": [
                    840
                ],
                "module.get_bin_path": [
                    856
                ],
                "update_syspurpose": [
                    861
                ],
                "SysPurpose": [
                    861
                ],
                "Exception": [
                    873,
                    906,
                    881,
                    921,
                    862
                ],
                "to_native": [
                    874,
                    907,
                    882,
                    922,
                    863
                ],
                "err": [
                    863
                ],
                "rhsm.is_registered": [
                    915,
                    869
                ],
                "rhsm.sync_syspurpose": [
                    872,
                    899
                ],
                "e": [
                    874,
                    907,
                    882,
                    922
                ],
                "result": [
                    880,
                    884,
                    878
                ],
                "rhsm.update_subscriptions_by_pool_ids": [
                    878
                ],
                "rhsm.update_subscriptions": [
                    880
                ],
                "module.exit_json": [
                    909,
                    884,
                    916,
                    887,
                    889,
                    924
                ],
                "rhsm.enable": [
                    892
                ],
                "rhsm.configure": [
                    893
                ],
                "rhsm.register": [
                    894
                ],
                "rhsm.subscribe_by_pool_ids": [
                    901
                ],
                "rhsm.subscribe": [
                    903
                ],
                "rhsm.unsubscribe": [
                    919
                ],
                "rhsm.unregister": [
                    920
                ],
                "__name__": [
                    927
                ],
                "main": [
                    928
                ]
            },
            "filtered_variables_in_file": {
                "__metaclass__": [
                    8
                ],
                "ANSIBLE_METADATA": [
                    11
                ],
                "DOCUMENTATION": [
                    16
                ],
                "EXAMPLES": [
                    164
                ],
                "RETURN": [
                    249
                ],
                "SUBMAN_CMD": [
                    390,
                    518,
                    457,
                    271,
                    601,
                    467,
                    374,
                    856,
                    345
                ],
                "REDHAT_REPO": [
                    276
                ],
                "self.module": [
                    512,
                    519,
                    521,
                    655,
                    533,
                    279,
                    671,
                    550,
                    560,
                    438,
                    317,
                    576,
                    326,
                    458,
                    468,
                    602,
                    611,
                    363,
                    623,
                    375,
                    636
                ],
                "self": [
                    512,
                    640,
                    519,
                    521,
                    655,
                    533,
                    279,
                    280,
                    281,
                    671,
                    288,
                    289,
                    550,
                    685,
                    560,
                    565,
                    438,
                    567,
                    694,
                    317,
                    576,
                    325,
                    326,
                    583,
                    712,
                    458,
                    334,
                    335,
                    336,
                    590,
                    721,
                    468,
                    469,
                    470,
                    728,
                    729,
                    602,
                    737,
                    611,
                    739,
                    613,
                    616,
                    363,
                    491,
                    619,
                    622,
                    623,
                    747,
                    756,
                    501,
                    375,
                    636,
                    637
                ],
                "module": [
                    773,
                    907,
                    909,
                    916,
                    279,
                    922,
                    924,
                    820,
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    832,
                    833,
                    834,
                    836,
                    325,
                    326,
                    839,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    856,
                    863,
                    611,
                    874,
                    882,
                    884,
                    887,
                    889,
                    636,
                    893
                ],
                "self.username": [
                    280
                ],
                "username": [
                    325,
                    422,
                    423,
                    822,
                    280,
                    894
                ],
                "self.password": [
                    281
                ],
                "password": [
                    325,
                    424,
                    425,
                    823,
                    281,
                    894
                ],
                "isfile": [
                    288,
                    303
                ],
                "self.REDHAT_REPO": [
                    288,
                    289
                ],
                "unlink": [
                    289
                ],
                "plugin_conf": [
                    305,
                    317,
                    301,
                    303
                ],
                "plugin": [
                    301
                ],
                "tmpfd": [
                    304
                ],
                "tmpfile": [
                    304,
                    305,
                    307,
                    314,
                    317
                ],
                "tempfile.mkstemp": [
                    304
                ],
                "tempfile": [
                    304
                ],
                "shutil.copy2": [
                    305
                ],
                "shutil": [
                    305
                ],
                "cfg": [
                    306,
                    307,
                    310,
                    312,
                    315
                ],
                "configparser.ConfigParser": [
                    306
                ],
                "configparser": [
                    306
                ],
                "cfg.read": [
                    307
                ],
                "enabled": [
                    309
                ],
                "cfg.set": [
                    312,
                    310
                ],
                "fd": [
                    314,
                    315,
                    316
                ],
                "cfg.write": [
                    315
                ],
                "fd.close": [
                    316
                ],
                "self.module.atomic_move": [
                    317
                ],
                "RegistrationBase": [
                    323,
                    325,
                    334
                ],
                "RegistrationBase.__init__": [
                    325
                ],
                "RegistrationBase.enable": [
                    334
                ],
                "self.update_plugin_conf": [
                    336,
                    469,
                    470,
                    335
                ],
                "args": [
                    390,
                    518,
                    519,
                    649,
                    394,
                    651,
                    397,
                    653,
                    655,
                    400,
                    403,
                    406,
                    409,
                    412,
                    415,
                    418,
                    421,
                    423,
                    425,
                    427,
                    429,
                    431,
                    433,
                    436,
                    438,
                    457,
                    458,
                    467,
                    468,
                    345,
                    601,
                    602,
                    361,
                    363,
                    622,
                    623,
                    374,
                    375
                ],
                "options": [
                    353,
                    358,
                    350,
                    361
                ],
                "k": [
                    352,
                    353,
                    612,
                    613,
                    351
                ],
                "v": [
                    352,
                    353,
                    612,
                    613,
                    351
                ],
                "kwargs.items": [
                    612,
                    351
                ],
                "kwargs": [
                    612,
                    351
                ],
                "re.search": [
                    352
                ],
                "re": [
                    352,
                    684,
                    693
                ],
                "options.append": [
                    353
                ],
                "k.replace": [
                    353
                ],
                "args.extend": [
                    418,
                    423,
                    361,
                    394,
                    425,
                    427,
                    397,
                    429,
                    431,
                    400,
                    433,
                    403,
                    436,
                    406,
                    409,
                    412,
                    415
                ],
                "self.module.run_command": [
                    519,
                    458,
                    363,
                    623,
                    655,
                    468,
                    438,
                    375,
                    602
                ],
                "rc": [
                    519,
                    458,
                    623,
                    624,
                    655,
                    468,
                    438,
                    375,
                    376,
                    602
                ],
                "stdout": [
                    519,
                    458,
                    623,
                    655,
                    658,
                    468,
                    438,
                    375,
                    602
                ],
                "stderr": [
                    519,
                    458,
                    623,
                    655,
                    468,
                    438,
                    375,
                    602
                ],
                "force_register": [
                    393,
                    895,
                    869,
                    847
                ],
                "rhsm_baseurl": [
                    896,
                    826,
                    396,
                    397
                ],
                "server_insecure": [
                    896,
                    825,
                    399
                ],
                "server_hostname": [
                    896,
                    907,
                    910,
                    402,
                    403,
                    882,
                    824,
                    924
                ],
                "org_id": [
                    894,
                    405,
                    406,
                    830,
                    831
                ],
                "server_proxy_hostname": [
                    408,
                    409,
                    897,
                    848
                ],
                "server_proxy_port": [
                    408,
                    409,
                    897,
                    849
                ],
                "server_proxy_user": [
                    897,
                    850,
                    411,
                    412
                ],
                "server_proxy_password": [
                    897,
                    851,
                    414,
                    415
                ],
                "activationkey": [
                    417,
                    418,
                    829,
                    894,
                    831
                ],
                "auto_attach": [
                    894,
                    420,
                    828
                ],
                "args.append": [
                    421
                ],
                "consumer_type": [
                    426,
                    427,
                    844,
                    895
                ],
                "consumer_name": [
                    845,
                    428,
                    429,
                    895
                ],
                "consumer_id": [
                    846,
                    895,
                    430,
                    431
                ],
                "environment": [
                    432,
                    433,
                    896,
                    833
                ],
                "release": [
                    897,
                    435,
                    436,
                    852
                ],
                "items": [
                    450,
                    452,
                    454,
                    456,
                    457
                ],
                "serials": [
                    451,
                    452,
                    453,
                    583,
                    459,
                    592,
                    595,
                    565,
                    569,
                    572
                ],
                "s": [
                    452
                ],
                "subscribed_pool_ids": [
                    567,
                    901,
                    903,
                    552,
                    905,
                    491,
                    555,
                    556,
                    495,
                    496,
                    911,
                    535,
                    569,
                    538,
                    539,
                    571
                ],
                "self.subscribe_pool": [
                    491
                ],
                "regexp": [
                    553,
                    491,
                    684,
                    561,
                    562,
                    501,
                    693,
                    567,
                    536
                ],
                "subscribed_by_product_pool_ids": [
                    501,
                    502,
                    503
                ],
                "self.subscribe_product": [
                    501
                ],
                "available_pools": [
                    512,
                    514,
                    550,
                    553,
                    533,
                    536
                ],
                "RhsmPools": [
                    512,
                    576,
                    550,
                    560,
                    533
                ],
                "available_pool_ids": [
                    514,
                    517
                ],
                "p.get_pool_id": [
                    514,
                    580,
                    582,
                    561,
                    562,
                    564
                ],
                "p": [
                    514,
                    579,
                    580,
                    582,
                    561,
                    562,
                    564
                ],
                "pool_id": [
                    516,
                    517,
                    518,
                    840,
                    521,
                    586,
                    587,
                    588,
                    842,
                    843
                ],
                "quantity": [
                    516,
                    518,
                    840,
                    586,
                    587,
                    588,
                    842,
                    843
                ],
                "pool_ids.items": [
                    586,
                    516
                ],
                "pool_ids": [
                    835,
                    516,
                    900,
                    582,
                    901,
                    522,
                    586,
                    843,
                    875,
                    877,
                    878
                ],
                "self.module.fail_json": [
                    521
                ],
                "pool": [
                    834,
                    902,
                    903,
                    553,
                    554,
                    555,
                    875,
                    880,
                    536,
                    537,
                    538
                ],
                "available_pools.filter_pools": [
                    536
                ],
                "pool.subscribe": [
                    537,
                    554
                ],
                "subscribed_pool_ids.append": [
                    538,
                    555
                ],
                "pool.get_pool_id": [
                    538,
                    555
                ],
                "available_pools.filter_products": [
                    553
                ],
                "changed": [
                    559,
                    593,
                    594,
                    570,
                    571,
                    575
                ],
                "consumed_pools": [
                    576,
                    579,
                    582,
                    560,
                    561,
                    562,
                    564
                ],
                "pool_ids_to_keep": [
                    561,
                    562,
                    564
                ],
                "consumed_pools.filter_pools": [
                    561
                ],
                "pool_ids_to_keep.extend": [
                    562
                ],
                "consumed_pools.filter_products": [
                    562
                ],
                "serials_to_remove": [
                    564,
                    565,
                    582,
                    583
                ],
                "p.Serial": [
                    564,
                    582
                ],
                "self.unsubscribe": [
                    565,
                    583
                ],
                "self.subscribe": [
                    567
                ],
                "existing_pools": [
                    578,
                    587,
                    580
                ],
                "p.QuantityUsed": [
                    580,
                    582
                ],
                "pool_ids.get": [
                    582
                ],
                "missing_pools": [
                    585,
                    588,
                    590,
                    592,
                    594
                ],
                "existing_pools.get": [
                    587
                ],
                "self.subscribe_by_pool_ids": [
                    590
                ],
                "missing_pools.keys": [
                    594
                ],
                "self.__getattribute__": [
                    616
                ],
                "self.get_pool_id": [
                    622
                ],
                "self.products": [
                    640,
                    637,
                    694,
                    685
                ],
                "self._load_product_list": [
                    637
                ],
                "consumed": [
                    650,
                    637
                ],
                "self.products.__iter__": [
                    640
                ],
                "lang_env": [
                    654,
                    655
                ],
                "products": [
                    672,
                    674,
                    678,
                    657,
                    671
                ],
                "line": [
                    658,
                    660,
                    662,
                    665,
                    666
                ],
                "stdout.split": [
                    658
                ],
                "line.strip": [
                    660
                ],
                "key": [
                    736,
                    737,
                    674,
                    738,
                    720,
                    721,
                    723,
                    724,
                    728,
                    666,
                    667,
                    669
                ],
                "value": [
                    674,
                    836,
                    837,
                    838,
                    840,
                    842,
                    720,
                    722,
                    723,
                    666,
                    668,
                    671
                ],
                "line.split": [
                    666
                ],
                "replace": [
                    667
                ],
                "key.strip": [
                    667
                ],
                "value.strip": [
                    668
                ],
                "products.append": [
                    671
                ],
                "RhsmPool": [
                    671
                ],
                "__setattr__": [
                    674
                ],
                "r": [
                    684,
                    693,
                    686,
                    695
                ],
                "re.compile": [
                    684,
                    693
                ],
                "product": [
                    685,
                    686,
                    687,
                    694,
                    695,
                    696
                ],
                "r.search": [
                    686,
                    695
                ],
                "product.get_pool_id": [
                    686
                ],
                "product._name": [
                    695
                ],
                "SYSPURPOSE_FILE_PATH": [
                    704
                ],
                "ALLOWED_ATTRIBUTES": [
                    706
                ],
                "self.path": [
                    712,
                    747,
                    756
                ],
                "path": [
                    712
                ],
                "self.SYSPURPOSE_FILE_PATH": [
                    712
                ],
                "syspurpose": [
                    737,
                    898,
                    870,
                    861,
                    718,
                    723,
                    853,
                    730,
                    859,
                    733
                ],
                "syspurpose_changed": [
                    740,
                    719,
                    886,
                    858,
                    731,
                    861
                ],
                "new_syspurpose.items": [
                    720
                ],
                "new_syspurpose": [
                    720,
                    748
                ],
                "self.ALLOWED_ATTRIBUTES": [
                    728,
                    721,
                    737
                ],
                "current_syspurpose": [
                    736,
                    738,
                    739,
                    762,
                    754,
                    761,
                    729,
                    730,
                    733
                ],
                "self._read_syspurpose": [
                    729
                ],
                "current_syspurpose.update": [
                    733
                ],
                "self._write_syspurpose": [
                    739
                ],
                "fp": [
                    757,
                    747,
                    748,
                    756
                ],
                "fp.write": [
                    748
                ],
                "json.dumps": [
                    748
                ],
                "json": [
                    761,
                    748
                ],
                "content": [
                    761,
                    757
                ],
                "fp.read": [
                    757
                ],
                "json.loads": [
                    761
                ],
                "rhsm": [
                    768,
                    899,
                    869,
                    901,
                    903,
                    872,
                    878,
                    880,
                    915,
                    820,
                    919,
                    920,
                    892,
                    893,
                    894
                ],
                "Rhsm": [
                    768
                ],
                "AnsibleModule": [
                    773
                ],
                "rhsm.module": [
                    820
                ],
                "state": [
                    866,
                    821,
                    914
                ],
                "module.params": [
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    833,
                    834,
                    836,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    893
                ],
                "rhsm_repo_ca_cert": [
                    827
                ],
                "module.fail_json": [
                    832,
                    839,
                    874,
                    907,
                    882,
                    922,
                    863
                ],
                "value.items": [
                    840
                ],
                "module.get_bin_path": [
                    856
                ],
                "update_syspurpose": [
                    861
                ],
                "SysPurpose": [
                    861
                ],
                "to_native": [
                    874,
                    907,
                    882,
                    922,
                    863
                ],
                "err": [
                    863
                ],
                "rhsm.is_registered": [
                    915,
                    869
                ],
                "rhsm.sync_syspurpose": [
                    872,
                    899
                ],
                "e": [
                    874,
                    907,
                    882,
                    922
                ],
                "result": [
                    880,
                    884,
                    878
                ],
                "rhsm.update_subscriptions_by_pool_ids": [
                    878
                ],
                "rhsm.update_subscriptions": [
                    880
                ],
                "module.exit_json": [
                    909,
                    884,
                    916,
                    887,
                    889,
                    924
                ],
                "rhsm.enable": [
                    892
                ],
                "rhsm.configure": [
                    893
                ],
                "rhsm.register": [
                    894
                ],
                "rhsm.subscribe_by_pool_ids": [
                    901
                ],
                "rhsm.subscribe": [
                    903
                ],
                "rhsm.unsubscribe": [
                    919
                ],
                "rhsm.unregister": [
                    920
                ],
                "main": [
                    928
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/ansible_9/test/units/modules/packaging/os/test_redhat_subscription.py",
                "test_function": "test_redhat_subscribtion",
                "test_function_code": "@pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, ids=TEST_CASES_IDS, indirect=['patch_ansible_module'])\n@pytest.mark.usefixtures('patch_ansible_module')\ndef test_redhat_subscribtion(mocker, capfd, patch_redhat_subscription, testcase):\n    \"\"\"\n    Run unit tests for test cases listen in TEST_CASES\n    \"\"\"\n\n    # Mock function used for running commands first\n    call_results = [item[2] for item in testcase['run_command.calls']]\n    mock_run_command = mocker.patch.object(\n        basic.AnsibleModule,\n        'run_command',\n        side_effect=call_results)\n\n    # Try to run test case\n    with pytest.raises(SystemExit):\n        redhat_subscription.main()\n\n    out, err = capfd.readouterr()\n    results = json.loads(out)\n\n    assert 'changed' in results\n    assert results['changed'] == testcase['changed']\n    if 'msg' in results:\n        assert results['msg'] == testcase['msg']\n\n    assert basic.AnsibleModule.run_command.call_count == len(testcase['run_command.calls'])\n    if basic.AnsibleModule.run_command.call_count:\n        call_args_list = [(item[0][0], item[1]) for item in basic.AnsibleModule.run_command.call_args_list]\n        expected_call_args_list = [(item[0], item[1]) for item in testcase['run_command.calls']]\n        assert call_args_list == expected_call_args_list",
                "test_error": "AssertionError: assert [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9', '--quantity', '1'], {'check_rc': True})] == [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9'], {'check_rc': True})]\n  At index 3 diff: (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True}) != (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True})\n  Full diff:\n    [\n     (['/testbin/subscription-manager',\n       'identity'],\n      {'check_rc': False}),\n     (['/testbin/subscription-manager',\n       'register',\n       '--org',\n       'admin',\n       '--username',\n       'admin',\n       '--password',\n       'admin'],\n      {'check_rc': True,\n       'expand_user_and_vars': False}),\n     ('subscription-manager list --available',\n      {'check_rc': True,\n       'environ_update': {'LANG': 'C',\n                          'LC_ALL': 'C',\n                          'LC_MESSAGES': 'C'}}),\n     (['/testbin/subscription-manager',\n       'attach',\n       '--pool',\n  -    'ff8080816b8e967f016b8e99632804a6'],\n  ?                                      -\n  +    'ff8080816b8e967f016b8e99632804a6',\n  +    '--quantity',\n  +    '1'],\n      {'check_rc': True}),\n     (['/testbin/subscription-manager',\n       'attach',\n       '--pool',\n  -    'ff8080816b8e967f016b8e99747107e9'],\n  ?                                      -\n  +    'ff8080816b8e967f016b8e99747107e9',\n  +    '--quantity',\n  +    '1'],\n      {'check_rc': True}),\n    ]",
                "full_test_error": "mocker = <pytest_mock.plugin.MockerFixture object at 0x102519250>\ncapfd = <_pytest.capture.CaptureFixture object at 0x102519750>\npatch_redhat_subscription = None\ntestcase = {'changed': True, 'id': 'test_registeration_username_password_pool_ids', 'msg': \"System successfully registered to 'No...tbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9'], {'check_rc': True}, (0, '', ''))]}\n\n    @pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, ids=TEST_CASES_IDS, indirect=['patch_ansible_module'])\n    @pytest.mark.usefixtures('patch_ansible_module')\n    def test_redhat_subscribtion(mocker, capfd, patch_redhat_subscription, testcase):\n        \"\"\"\n        Run unit tests for test cases listen in TEST_CASES\n        \"\"\"\n    \n        # Mock function used for running commands first\n        call_results = [item[2] for item in testcase['run_command.calls']]\n        mock_run_command = mocker.patch.object(\n            basic.AnsibleModule,\n            'run_command',\n            side_effect=call_results)\n    \n        # Try to run test case\n        with pytest.raises(SystemExit):\n            redhat_subscription.main()\n    \n        out, err = capfd.readouterr()\n        results = json.loads(out)\n    \n        assert 'changed' in results\n        assert results['changed'] == testcase['changed']\n        if 'msg' in results:\n            assert results['msg'] == testcase['msg']\n    \n        assert basic.AnsibleModule.run_command.call_count == len(testcase['run_command.calls'])\n        if basic.AnsibleModule.run_command.call_count:\n            call_args_list = [(item[0][0], item[1]) for item in basic.AnsibleModule.run_command.call_args_list]\n            expected_call_args_list = [(item[0], item[1]) for item in testcase['run_command.calls']]\n>           assert call_args_list == expected_call_args_list\nE           AssertionError: assert [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9', '--quantity', '1'], {'check_rc': True})] == [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99747107e9'], {'check_rc': True})]\nE             At index 3 diff: (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True}) != (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True})\nE             Full diff:\nE               [\nE                (['/testbin/subscription-manager',\nE                  'identity'],\nE                 {'check_rc': False}),\nE                (['/testbin/subscription-manager',\nE                  'register',\nE                  '--org',\nE                  'admin',\nE                  '--username',\nE                  'admin',\nE                  '--password',\nE                  'admin'],\nE                 {'check_rc': True,\nE                  'expand_user_and_vars': False}),\nE                ('subscription-manager list --available',\nE                 {'check_rc': True,\nE                  'environ_update': {'LANG': 'C',\nE                                     'LC_ALL': 'C',\nE                                     'LC_MESSAGES': 'C'}}),\nE                (['/testbin/subscription-manager',\nE                  'attach',\nE                  '--pool',\nE             -    'ff8080816b8e967f016b8e99632804a6'],\nE             ?                                      -\nE             +    'ff8080816b8e967f016b8e99632804a6',\nE             +    '--quantity',\nE             +    '1'],\nE                 {'check_rc': True}),\nE                (['/testbin/subscription-manager',\nE                  'attach',\nE                  '--pool',\nE             -    'ff8080816b8e967f016b8e99747107e9'],\nE             ?                                      -\nE             +    'ff8080816b8e967f016b8e99747107e9',\nE             +    '--quantity',\nE             +    '1'],\nE                 {'check_rc': True}),\nE               ]\n\ntest/units/modules/packaging/os/test_redhat_subscription.py:848: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, ids=TEST_CASES_IDS, indirect=['patch_ansible_module'])",
                    "pytest.mark.usefixtures('patch_ansible_module')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/ansible_9/test/units/modules/packaging/os/test_redhat_subscription.py",
                "test_function": "test_redhat_subscribtion",
                "test_function_code": "@pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, ids=TEST_CASES_IDS, indirect=['patch_ansible_module'])\n@pytest.mark.usefixtures('patch_ansible_module')\ndef test_redhat_subscribtion(mocker, capfd, patch_redhat_subscription, testcase):\n    \"\"\"\n    Run unit tests for test cases listen in TEST_CASES\n    \"\"\"\n\n    # Mock function used for running commands first\n    call_results = [item[2] for item in testcase['run_command.calls']]\n    mock_run_command = mocker.patch.object(\n        basic.AnsibleModule,\n        'run_command',\n        side_effect=call_results)\n\n    # Try to run test case\n    with pytest.raises(SystemExit):\n        redhat_subscription.main()\n\n    out, err = capfd.readouterr()\n    results = json.loads(out)\n\n    assert 'changed' in results\n    assert results['changed'] == testcase['changed']\n    if 'msg' in results:\n        assert results['msg'] == testcase['msg']\n\n    assert basic.AnsibleModule.run_command.call_count == len(testcase['run_command.calls'])\n    if basic.AnsibleModule.run_command.call_count:\n        call_args_list = [(item[0][0], item[1]) for item in basic.AnsibleModule.run_command.call_args_list]\n        expected_call_args_list = [(item[0], item[1]) for item in testcase['run_command.calls']]\n        assert call_args_list == expected_call_args_list",
                "test_error": "AssertionError: assert [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True})] == [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True})]\n  At index 3 diff: (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True}) != (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True})\n  Full diff:\n    [\n     (['/testbin/subscription-manager',\n       'identity'],\n      {'check_rc': False}),\n     (['/testbin/subscription-manager',\n       'register',\n       '--org',\n       'admin',\n       '--username',\n       'admin',\n       '--password',\n       'admin'],\n      {'check_rc': True,\n       'expand_user_and_vars': False}),\n     ('subscription-manager list --available',\n      {'check_rc': True,\n       'environ_update': {'LANG': 'C',\n                          'LC_ALL': 'C',\n                          'LC_MESSAGES': 'C'}}),\n     (['/testbin/subscription-manager',\n       'attach',\n       '--pool',\n  -    'ff8080816b8e967f016b8e99632804a6'],\n  ?                                      -\n  +    'ff8080816b8e967f016b8e99632804a6',\n  +    '--quantity',\n  +    '1'],\n      {'check_rc': True}),\n    ]",
                "full_test_error": "mocker = <pytest_mock.plugin.MockerFixture object at 0x102405c90>\ncapfd = <_pytest.capture.CaptureFixture object at 0x102405150>\npatch_redhat_subscription = None\ntestcase = {'changed': True, 'id': 'test_registeration_username_password_one_pool_id', 'msg': \"System successfully registered to ...tbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True}, (0, '', ''))]}\n\n    @pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, ids=TEST_CASES_IDS, indirect=['patch_ansible_module'])\n    @pytest.mark.usefixtures('patch_ansible_module')\n    def test_redhat_subscribtion(mocker, capfd, patch_redhat_subscription, testcase):\n        \"\"\"\n        Run unit tests for test cases listen in TEST_CASES\n        \"\"\"\n    \n        # Mock function used for running commands first\n        call_results = [item[2] for item in testcase['run_command.calls']]\n        mock_run_command = mocker.patch.object(\n            basic.AnsibleModule,\n            'run_command',\n            side_effect=call_results)\n    \n        # Try to run test case\n        with pytest.raises(SystemExit):\n            redhat_subscription.main()\n    \n        out, err = capfd.readouterr()\n        results = json.loads(out)\n    \n        assert 'changed' in results\n        assert results['changed'] == testcase['changed']\n        if 'msg' in results:\n            assert results['msg'] == testcase['msg']\n    \n        assert basic.AnsibleModule.run_command.call_count == len(testcase['run_command.calls'])\n        if basic.AnsibleModule.run_command.call_count:\n            call_args_list = [(item[0][0], item[1]) for item in basic.AnsibleModule.run_command.call_args_list]\n            expected_call_args_list = [(item[0], item[1]) for item in testcase['run_command.calls']]\n>           assert call_args_list == expected_call_args_list\nE           AssertionError: assert [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True})] == [(['/testbin/subscription-manager', 'identity'], {'check_rc': False}), (['/testbin/subscription-manager', 'register', '--org', 'admin', '--username', 'admin', '--password', 'admin'], {'check_rc': True, 'expand_user_and_vars': False}), ('subscription-manager list --available', {'check_rc': True, 'environ_update': {'LANG': 'C', 'LC_ALL': 'C', 'LC_MESSAGES': 'C'}}), (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True})]\nE             At index 3 diff: (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6', '--quantity', '1'], {'check_rc': True}) != (['/testbin/subscription-manager', 'attach', '--pool', 'ff8080816b8e967f016b8e99632804a6'], {'check_rc': True})\nE             Full diff:\nE               [\nE                (['/testbin/subscription-manager',\nE                  'identity'],\nE                 {'check_rc': False}),\nE                (['/testbin/subscription-manager',\nE                  'register',\nE                  '--org',\nE                  'admin',\nE                  '--username',\nE                  'admin',\nE                  '--password',\nE                  'admin'],\nE                 {'check_rc': True,\nE                  'expand_user_and_vars': False}),\nE                ('subscription-manager list --available',\nE                 {'check_rc': True,\nE                  'environ_update': {'LANG': 'C',\nE                                     'LC_ALL': 'C',\nE                                     'LC_MESSAGES': 'C'}}),\nE                (['/testbin/subscription-manager',\nE                  'attach',\nE                  '--pool',\nE             -    'ff8080816b8e967f016b8e99632804a6'],\nE             ?                                      -\nE             +    'ff8080816b8e967f016b8e99632804a6',\nE             +    '--quantity',\nE             +    '1'],\nE                 {'check_rc': True}),\nE               ]\n\ntest/units/modules/packaging/os/test_redhat_subscription.py:848: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('patch_ansible_module, testcase', TEST_CASES, ids=TEST_CASES_IDS, indirect=['patch_ansible_module'])",
                    "pytest.mark.usefixtures('patch_ansible_module')"
                ]
            }
        ]
    }
}