{
    "1.1.1": "@cache('~/.config/fish/config.fish')\ndef _get_aliases(overridden):\n    aliases = {}\n    proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    for alias in alias_out:\n        name, value = alias.replace('alias ', '', 1).split(' ', 1)\n        if name not in overridden:\n            aliases[name] = value\n    return aliases\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_4/thefuck/shells/fish.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader',\n                                       'alias_with_equal_sign': 'echo'}\n        assert shell.get_aliases() == {'func1': 'func1', 'func2': 'func2'}"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_4/tests/shells/test_fish.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: not enough values to unpack (expected 2, got 1)"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.shells.test_fish.TestFish object at 0x10573e6d0>\nshell = <thefuck.shells.fish.Fish object at 0x1056ddc10>\n\n    def test_get_aliases(self, shell):\n>       assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader',\n                                       'alias_with_equal_sign': 'echo'}\n\ntests/shells/test_fish.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nthefuck/shells/fish.py:60: in get_aliases\n    raw_aliases = _get_aliases(overridden)\nthefuck/utils.py:37: in wrapper\n    value = fn(*args, **kwargs)\nthefuck/utils.py:265: in wrapper\n    return fn(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\noverridden = {'', 'cd', 'grep', 'ls', 'man', 'open'}\n\n    @cache('~/.config/fish/config.fish')\n    def _get_aliases(overridden):\n        aliases = {}\n        proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n        alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n        for alias in alias_out:\n>           name, value = alias.replace('alias ', '', 1).split(' ', 1)",
            "\nthefuck/shells/fish.py:25: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}