{
    "thefuck:4": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_4/thefuck/shells/fish.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_aliases",
                    "function_code": "@cache('~/.config/fish/config.fish')\ndef _get_aliases(overridden):\n    aliases = {}\n    proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    for alias in alias_out:\n        name, value = alias.replace('alias ', '', 1).split(' ', 1)\n        if name not in overridden:\n            aliases[name] = value\n    return aliases\n",
                    "decorators": [
                        "cache('~/.config/fish/config.fish')"
                    ],
                    "docstring": null,
                    "start_line": 19,
                    "variables": {
                        "aliases": [
                            27,
                            28,
                            21
                        ],
                        "proc": [
                            22,
                            23
                        ],
                        "Popen": [
                            22
                        ],
                        "PIPE": [
                            22
                        ],
                        "DEVNULL": [
                            22
                        ],
                        "alias_out": [
                            24,
                            23
                        ],
                        "split": [
                            25,
                            23
                        ],
                        "strip": [
                            23
                        ],
                        "decode": [
                            23
                        ],
                        "proc.stdout.read": [
                            23
                        ],
                        "proc.stdout": [
                            23
                        ],
                        "alias": [
                            24,
                            25
                        ],
                        "name": [
                            25,
                            26,
                            27
                        ],
                        "value": [
                            25,
                            27
                        ],
                        "alias.replace": [
                            25
                        ],
                        "overridden": [
                            26
                        ],
                        "cache": [
                            19
                        ]
                    },
                    "filtered_variables": {
                        "aliases": [
                            27,
                            28,
                            21
                        ],
                        "proc": [
                            22,
                            23
                        ],
                        "Popen": [
                            22
                        ],
                        "PIPE": [
                            22
                        ],
                        "DEVNULL": [
                            22
                        ],
                        "alias_out": [
                            24,
                            23
                        ],
                        "split": [
                            25,
                            23
                        ],
                        "strip": [
                            23
                        ],
                        "decode": [
                            23
                        ],
                        "proc.stdout.read": [
                            23
                        ],
                        "proc.stdout": [
                            23
                        ],
                        "alias": [
                            24,
                            25
                        ],
                        "name": [
                            25,
                            26,
                            27
                        ],
                        "value": [
                            25,
                            27
                        ],
                        "alias.replace": [
                            25
                        ],
                        "overridden": [
                            26
                        ],
                        "cache": [
                            19
                        ]
                    },
                    "diff_line_number": 23,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "aliases": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "overridden": {
                                    "variable_value": "{'', 'open', 'cd', 'grep', 'man', 'ls'}",
                                    "variable_type": "set",
                                    "variable_shape": "6"
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "aliases": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "separator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "overridden": {
                                    "variable_value": "{'', 'grep', 'ls', 'cd', 'man', 'open'}",
                                    "variable_type": "set",
                                    "variable_shape": "6"
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "aliases": {
                                    "variable_value": "{'fish_key_reader': '/usr/bin/fish_key_reader', 'g': 'git', 'alias_with_equal_sign': 'echo'}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "proc": {
                                    "variable_value": "<MagicMock name='Popen()' id='4435880400'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out": {
                                    "variable_value": "'alias fish_key_reader /usr/bin/fish_key_reader\\nalias g git\\nalias alias_with_equal_sign=echo\\ninvalid_alias'",
                                    "variable_type": "str",
                                    "variable_shape": "105"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": "<MagicMock name='Popen().stdout.read' id='4436836944'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "proc.stdout": {
                                    "variable_value": "<MagicMock name='Popen().stdout' id='4435635280'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "alias": {
                                    "variable_value": "'invalid_alias'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "alias_out.split": {
                                    "variable_value": "<built-in method split of str object at 0x10868fcb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "separator": {
                                    "variable_value": "'='",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "split_alias": {
                                    "variable_value": "['invalid_alias']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10862dab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'alias_with_equal_sign'",
                                    "variable_type": "str",
                                    "variable_shape": "21"
                                },
                                "value": {
                                    "variable_value": "'echo'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "overridden": {
                                    "variable_value": "{'', 'grep', 'ls', 'cd', 'man', 'open'}",
                                    "variable_type": "set",
                                    "variable_shape": "6"
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "aliases": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "separator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "overridden": {
                                    "variable_value": "{'', 'grep', 'ls', 'cd', 'man', 'open'}",
                                    "variable_type": "set",
                                    "variable_shape": "6"
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "aliases": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "proc": {
                                    "variable_value": "<MagicMock name='Popen()' id='4435880400'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": "<MagicMock name='Popen().stdout.read' id='4436836944'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "proc.stdout": {
                                    "variable_value": "<MagicMock name='Popen().stdout' id='4435635280'>",
                                    "variable_type": "MagicMock",
                                    "variable_shape": "0"
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_out.split": {
                                    "variable_value": "<built-in method split of str object at 0x1067773b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "separator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split_alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "overridden": {
                                    "variable_value": "{'', 'grep', 'ls', 'cd', 'man', 'open'}",
                                    "variable_type": "set",
                                    "variable_shape": "6"
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@cache('~/.config/fish/config.fish', '~/.config/fish/functions')\ndef _get_functions(overridden):\n    proc = Popen(['fish', '-ic', 'functions'], stdout=PIPE, stderr=DEVNULL)\n    functions = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    return {func: func for func in functions if func not in overridden}",
                "@cache('~/.config/fish/config.fish')\ndef _get_aliases(overridden):\n    aliases = {}\n    proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    for alias in alias_out:\n        name, value = alias.replace('alias ', '', 1).split(' ', 1)\n        if name not in overridden:\n            aliases[name] = value\n    return aliases",
                "def _get_overridden_aliases(self):\n    overridden = os.environ.get('THEFUCK_OVERRIDDEN_ALIASES',\n                                os.environ.get('TF_OVERRIDDEN_ALIASES', ''))\n    default = {'cd', 'grep', 'ls', 'man', 'open'}\n    for alias in overridden.split(','):\n        default.add(alias.strip())\n    return default",
                "def app_alias(self, alias_name):\n    if settings.alter_history:\n        alter_history = ('    builtin history delete --exact'\n                         ' --case-sensitive -- $fucked_up_command\\n'\n                         '    builtin history merge ^ /dev/null\\n')\n    else:\n        alter_history = ''\n    # It is VERY important to have the variables declared WITHIN the alias\n    return ('function {0} -d \"Correct your previous console command\"\\n'\n            '  set -l fucked_up_command $history[1]\\n'\n            '  env TF_SHELL=fish TF_ALIAS={0} PYTHONIOENCODING=utf-8'\n            ' thefuck $fucked_up_command | read -l unfucked_command\\n'\n            '  if [ \"$unfucked_command\" != \"\" ]\\n'\n            '    eval $unfucked_command\\n{1}'\n            '  end\\n'\n            'end').format(alias_name, alter_history)",
                "def get_aliases(self):\n    overridden = self._get_overridden_aliases()\n    functions = _get_functions(overridden)\n    raw_aliases = _get_aliases(overridden)\n    functions.update(raw_aliases)\n    return functions",
                "def _expand_aliases(self, command_script):\n    aliases = self.get_aliases()\n    binary = command_script.split(' ')[0]\n    if binary in aliases and aliases[binary] != binary:\n        return command_script.replace(binary, aliases[binary], 1)\n    elif binary in aliases:\n        return u'fish -ic \"{}\"'.format(command_script.replace('\"', r'\\\"'))\n    else:\n        return command_script",
                "def _get_history_file_name(self):\n    return os.path.expanduser('~/.config/fish/fish_history')",
                "def _get_history_line(self, command_script):\n    return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))",
                "def _script_from_history(self, line):\n    if '- cmd: ' in line:\n        return line.split('- cmd: ', 1)[1]\n    else:\n        return ''",
                "def and_(self, *commands):\n    return u'; and '.join(commands)",
                "def or_(self, *commands):\n    return u'; or '.join(commands)",
                "def how_to_configure(self):\n    return self._create_shell_configuration(\n        content=u\"thefuck --alias | source\",\n        path='~/.config/fish/config.fish',\n        reload='fish')",
                "def put_to_history(self, command):\n    try:\n        return self._put_to_history(command)\n    except IOError:\n        logs.exception(\"Can't update history\", sys.exc_info())",
                "def _put_to_history(self, command_script):\n    \"\"\"Puts command script to shell history.\"\"\"\n    history_file_name = self._get_history_file_name()\n    if os.path.isfile(history_file_name):\n        with open(history_file_name, 'a') as history:\n            entry = self._get_history_line(command_script)\n            if six.PY2:\n                history.write(entry.encode('utf-8'))\n            else:\n                history.write(entry)"
            ],
            "inscope_function_signatures": [
                "_get_functions(overridden)",
                "_get_aliases(overridden)",
                "_get_overridden_aliases(self)",
                "app_alias(self, alias_name)",
                "get_aliases(self)",
                "_expand_aliases(self, command_script)",
                "_get_history_file_name(self)",
                "_get_history_line(self, command_script)",
                "_script_from_history(self, line)",
                "and_(self, *commands)",
                "or_(self, *commands)",
                "how_to_configure(self)",
                "put_to_history(self, command)",
                "_put_to_history(self, command_script)"
            ],
            "variables_in_file": {
                "proc": [
                    22,
                    23,
                    14,
                    15
                ],
                "Popen": [
                    14,
                    22
                ],
                "PIPE": [
                    14,
                    22
                ],
                "DEVNULL": [
                    14,
                    22
                ],
                "functions": [
                    15,
                    16,
                    59,
                    61,
                    62
                ],
                "split": [
                    25,
                    23,
                    15
                ],
                "strip": [
                    23,
                    15
                ],
                "decode": [
                    23,
                    15
                ],
                "proc.stdout.read": [
                    23,
                    15
                ],
                "proc.stdout": [
                    23,
                    15
                ],
                "func": [
                    16
                ],
                "overridden": [
                    33,
                    36,
                    58,
                    16,
                    26,
                    59,
                    60
                ],
                "cache": [
                    19,
                    12
                ],
                "aliases": [
                    65,
                    67,
                    68,
                    69,
                    21,
                    27,
                    28
                ],
                "alias_out": [
                    24,
                    23
                ],
                "alias": [
                    24,
                    25,
                    36,
                    37
                ],
                "name": [
                    25,
                    26,
                    27
                ],
                "value": [
                    25,
                    27
                ],
                "alias.replace": [
                    25
                ],
                "Generic": [
                    31
                ],
                "os.environ.get": [
                    33,
                    34
                ],
                "os.environ": [
                    33,
                    34
                ],
                "os": [
                    107,
                    33,
                    34,
                    75
                ],
                "default": [
                    35,
                    37,
                    38
                ],
                "overridden.split": [
                    36
                ],
                "default.add": [
                    37
                ],
                "alias.strip": [
                    37
                ],
                "settings.alter_history": [
                    41
                ],
                "settings": [
                    41
                ],
                "alter_history": [
                    42,
                    46,
                    55
                ],
                "format": [
                    48,
                    78,
                    70
                ],
                "alias_name": [
                    55
                ],
                "self._get_overridden_aliases": [
                    58
                ],
                "self": [
                    65,
                    100,
                    106,
                    109,
                    58,
                    93
                ],
                "_get_functions": [
                    59
                ],
                "raw_aliases": [
                    60,
                    61
                ],
                "_get_aliases": [
                    60
                ],
                "functions.update": [
                    61
                ],
                "self.get_aliases": [
                    65
                ],
                "binary": [
                    66,
                    67,
                    68,
                    69
                ],
                "command_script.split": [
                    66
                ],
                "command_script": [
                    66,
                    68,
                    70,
                    72,
                    109,
                    78
                ],
                "command_script.replace": [
                    68,
                    70
                ],
                "os.path.expanduser": [
                    75
                ],
                "os.path": [
                    107,
                    75
                ],
                "int": [
                    78
                ],
                "time": [
                    78
                ],
                "line": [
                    81,
                    82
                ],
                "line.split": [
                    82
                ],
                "join": [
                    90,
                    87
                ],
                "commands": [
                    90,
                    87
                ],
                "self._create_shell_configuration": [
                    93
                ],
                "self._put_to_history": [
                    100
                ],
                "command": [
                    100
                ],
                "IOError": [
                    101
                ],
                "logs.exception": [
                    102
                ],
                "logs": [
                    102
                ],
                "sys.exc_info": [
                    102
                ],
                "sys": [
                    102
                ],
                "history_file_name": [
                    106,
                    107,
                    108
                ],
                "self._get_history_file_name": [
                    106
                ],
                "os.path.isfile": [
                    107
                ],
                "open": [
                    108
                ],
                "history": [
                    113,
                    108,
                    111
                ],
                "entry": [
                    113,
                    109,
                    111
                ],
                "self._get_history_line": [
                    109
                ],
                "six.PY2": [
                    110
                ],
                "six": [
                    110
                ],
                "history.write": [
                    113,
                    111
                ],
                "entry.encode": [
                    111
                ]
            },
            "filtered_variables_in_file": {
                "proc": [
                    22,
                    23,
                    14,
                    15
                ],
                "Popen": [
                    14,
                    22
                ],
                "PIPE": [
                    14,
                    22
                ],
                "DEVNULL": [
                    14,
                    22
                ],
                "functions": [
                    15,
                    16,
                    59,
                    61,
                    62
                ],
                "split": [
                    25,
                    23,
                    15
                ],
                "strip": [
                    23,
                    15
                ],
                "decode": [
                    23,
                    15
                ],
                "proc.stdout.read": [
                    23,
                    15
                ],
                "proc.stdout": [
                    23,
                    15
                ],
                "func": [
                    16
                ],
                "overridden": [
                    33,
                    36,
                    58,
                    16,
                    26,
                    59,
                    60
                ],
                "cache": [
                    19,
                    12
                ],
                "aliases": [
                    65,
                    67,
                    68,
                    69,
                    21,
                    27,
                    28
                ],
                "alias_out": [
                    24,
                    23
                ],
                "alias": [
                    24,
                    25,
                    36,
                    37
                ],
                "name": [
                    25,
                    26,
                    27
                ],
                "value": [
                    25,
                    27
                ],
                "alias.replace": [
                    25
                ],
                "Generic": [
                    31
                ],
                "os.environ.get": [
                    33,
                    34
                ],
                "os.environ": [
                    33,
                    34
                ],
                "os": [
                    107,
                    33,
                    34,
                    75
                ],
                "default": [
                    35,
                    37,
                    38
                ],
                "overridden.split": [
                    36
                ],
                "default.add": [
                    37
                ],
                "alias.strip": [
                    37
                ],
                "settings.alter_history": [
                    41
                ],
                "settings": [
                    41
                ],
                "alter_history": [
                    42,
                    46,
                    55
                ],
                "alias_name": [
                    55
                ],
                "self._get_overridden_aliases": [
                    58
                ],
                "self": [
                    65,
                    100,
                    106,
                    109,
                    58,
                    93
                ],
                "_get_functions": [
                    59
                ],
                "raw_aliases": [
                    60,
                    61
                ],
                "_get_aliases": [
                    60
                ],
                "functions.update": [
                    61
                ],
                "self.get_aliases": [
                    65
                ],
                "binary": [
                    66,
                    67,
                    68,
                    69
                ],
                "command_script.split": [
                    66
                ],
                "command_script": [
                    66,
                    68,
                    70,
                    72,
                    109,
                    78
                ],
                "command_script.replace": [
                    68,
                    70
                ],
                "os.path.expanduser": [
                    75
                ],
                "os.path": [
                    107,
                    75
                ],
                "time": [
                    78
                ],
                "line": [
                    81,
                    82
                ],
                "line.split": [
                    82
                ],
                "join": [
                    90,
                    87
                ],
                "commands": [
                    90,
                    87
                ],
                "self._create_shell_configuration": [
                    93
                ],
                "self._put_to_history": [
                    100
                ],
                "command": [
                    100
                ],
                "logs.exception": [
                    102
                ],
                "logs": [
                    102
                ],
                "sys.exc_info": [
                    102
                ],
                "sys": [
                    102
                ],
                "history_file_name": [
                    106,
                    107,
                    108
                ],
                "self._get_history_file_name": [
                    106
                ],
                "os.path.isfile": [
                    107
                ],
                "history": [
                    113,
                    108,
                    111
                ],
                "entry": [
                    113,
                    109,
                    111
                ],
                "self._get_history_line": [
                    109
                ],
                "six.PY2": [
                    110
                ],
                "six": [
                    110
                ],
                "history.write": [
                    113,
                    111
                ],
                "entry.encode": [
                    111
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_4/tests/shells/test_fish.py",
                "test_function": "test_get_aliases",
                "test_function_code": "    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader',\n                                       'alias_with_equal_sign': 'echo'}\n        assert shell.get_aliases() == {'func1': 'func1', 'func2': 'func2'}",
                "test_error": "ValueError: not enough values to unpack (expected 2, got 1)",
                "full_test_error": "self = <tests.shells.test_fish.TestFish object at 0x10dea6410>\nshell = <thefuck.shells.fish.Fish object at 0x10de45850>\n\n    def test_get_aliases(self, shell):\n>       assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader',\n                                       'alias_with_equal_sign': 'echo'}\n\ntests/shells/test_fish.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nthefuck/shells/fish.py:60: in get_aliases\n    raw_aliases = _get_aliases(overridden)\nthefuck/utils.py:37: in wrapper\n    value = fn(*args, **kwargs)\nthefuck/utils.py:265: in wrapper\n    return fn(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\noverridden = {'', 'cd', 'grep', 'ls', 'man', 'open'}\n\n    @cache('~/.config/fish/config.fish')\n    def _get_aliases(overridden):\n        aliases = {}\n        proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n        alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n        for alias in alias_out:\n>           name, value = alias.replace('alias ', '', 1).split(' ', 1)\nE           ValueError: not enough values to unpack (expected 2, got 1)\n\nthefuck/shells/fish.py:25: ValueError",
                "traceback": "thefuck/shells/fish.py:60: in get_aliases\n    raw_aliases = _get_aliases(overridden)\nthefuck/utils.py:37: in wrapper\n    value = fn(*args, **kwargs)\nthefuck/utils.py:265: in wrapper\n    return fn(*args, **kwargs)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\noverridden = {'', 'cd', 'grep', 'ls', 'man', 'open'}\n\n    @cache('~/.config/fish/config.fish')\n    def _get_aliases(overridden):\n        aliases = {}\n        proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n        alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n        for alias in alias_out:\n>           name, value = alias.replace('alias ', '', 1).split(' ', 1)\nE           ValueError: not enough values to unpack (expected 2, got 1)\n\nthefuck/shells/fish.py:25: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}