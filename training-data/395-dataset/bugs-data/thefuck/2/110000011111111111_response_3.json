{
    "thefuck": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 107,
            "file_name": "thefuck/utils.py",
            "replace_code": "def get_all_executables():\n    import os\n    from thefuck.shells import shell\n    from thefuck.utils import get_alias, six\n    from pathlib import Path\n    tf_alias = get_alias()\n    tf_entry_points = ['thefuck', 'fuck']\n    \n    def _safe(fn, fallback):\n        try:\n            return fn()\n        except OSError:\n            return fallback\n    \n    def list_dir_contents(path):\n        try:\n            return list(Path(path).iterdir())\n        except Exception as e:\n            return []\n    \n    bins = [exe.name.decode('utf8') if six.PY2 else exe.name\n            for path in os.environ.get('PATH', '').split(':')\n            for exe in _safe(lambda: list_dir_contents(path), [])\n            if not _safe(lambda: exe.is_dir(), True)\n            and hasattr(exe, \"name\") and exe.name not in tf_entry_points]\n    \n    def decode_alias(alias):\n        return alias.decode('utf8') if six.PY2 else alias\n    \n    aliases = [decode_alias(alias)\n               for alias in shell.get_aliases() if alias != tf_alias]\n    \n    return bins + aliases"
        }
    ]
}