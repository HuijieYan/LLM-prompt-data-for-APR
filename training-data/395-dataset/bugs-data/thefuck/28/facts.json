{
    "1.1.1": "def get_new_command(command, settings):\n    m = _search(command.stderr) or _search(command.stdout)\n\n    # Note: there does not seem to be a standard for columns, so they are just\n    # ignored for now\n    editor_call = '{} {} +{}'.format(os.environ['EDITOR'],\n                                     m.group('file'),\n                                     m.group('line'))\n    return shells.and_(editor_call, command.script)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/thefuck/rules/fix_file.py",
    "1.3.2": [
        "_search(stderr)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "@pytest.mark.parametrize('test', tests)\n@pytest.mark.usefixtures('no_memoize')\ndef test_get_new_command_with_settings(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n    settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n\n    if test[3]:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))\n    else:\n        assert (get_new_command(cmd, settings) ==\n            'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_28/tests/rules/test_fix_file.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: assert 'dummy_editor...+3 && gcc a.c' == 'dummy_editor ...:1 && gcc a.c'\nE             - dummy_editor a.c +3 && gcc a.c\nE             + dummy_editor a.c +3:1 && gcc a.c\nE             ?                    ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor... && clang a.c' == 'dummy_editor ... && clang a.c'\nE             - dummy_editor a.c +3 && clang a.c\nE             + dummy_editor a.c +3:1 && clang a.c\nE             ?                    ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...&& rustc a.rs' == 'dummy_editor ...&& rustc a.rs'\nE             - dummy_editor a.rs +2 && rustc a.rs\nE             + dummy_editor a.rs +2:5 && rustc a.rs\nE             ?                     ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...& cargo build' == 'dummy_editor ...& cargo build'\nE             - dummy_editor src/lib.rs +3 && cargo build\nE             + dummy_editor src/lib.rs +3:5 && cargo build\nE             ?                           ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...1 && llc a.ll' == 'dummy_editor ...2 && llc a.ll'\nE             - dummy_editor a.ll +1 && llc a.ll\nE             + dummy_editor a.ll +1:2 && llc a.ll\nE             ?                     ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...go build a.go' == 'dummy_editor ...go build a.go'\nE             - dummy_editor a.go +1 && go build a.go\nE             + dummy_editor a.go +1:2 && go build a.go\nE             ?                     ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor....js asdf qwer' == 'dummy_editor ....js asdf qwer'\nE             - dummy_editor /Users/pablo/Workspace/barebones/fuck.js +2 && node fuck.js asdf qwer\nE             + dummy_editor /Users/pablo/Workspace/barebones/fuck.js +2:5 && node fuck.js asdf qwer\nE             ?                                                         ++"
        ],
        [
            "E           AssertionError: assert 'dummy_editor...y +17 && pep8' == 'dummy_editor ...17:80 && pep8'\nE             - dummy_editor ./tests/rules/test_systemctl.py +17 && pep8\nE             + dummy_editor ./tests/rules/test_systemctl.py +17:80 && pep8\nE             ?                                                 +++"
        ]
    ],
    "2.1.2": [
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104c807d0>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104c80790>\ntest = ('gcc a.c', 'a.c', 3, 1, '', \"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104d38b10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104d38910>\ntest = ('clang a.c', 'a.c', 3, 1, '', '\\na.c:3:1: error: expected expression\\n}\\n^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104d7a190>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104d85ed0>\ntest = ('rustc a.rs', 'a.rs', 2, 5, '', '\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104d7de10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104d7dd90>\ntest = ('cargo build', 'src/lib.rs', 3, 5, '', '\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3...s:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104d2b810>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104d2b110>\ntest = ('llc a.ll', 'a.ll', 1, 2, '', '\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104c79a10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104d1cf90>\ntest = ('go build a.go', 'a.go', 1, 2, '', \"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104d99d90>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104d99110>\ntest = ('node fuck.js asdf qwer', '/Users/pablo/Workspace/barebones/fuck.js', '2', 5, '', '\\n/Users/pablo/Workspace/barebones...s:310:12)\\n    at Function.Module.runMain (module.js:501:10)\\n    at startup (node.js:129:16)\\n    at node.js:814:3\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x104d2b590>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x104d2b310>\ntest = ('pep8', './tests/rules/test_systemctl.py', 17, 80, '\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 >... line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n', '')\n\n    @pytest.mark.parametrize('test', tests)\n    @pytest.mark.usefixtures('no_memoize')\n    def test_get_new_command_with_settings(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=True)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n        cmd = Command(script=test[0], stdout=test[4], stderr=test[5])\n        settings = Settings({'fixcolcmd': '{editor} {file} +{line}:{col}'})\n    \n        if test[3]:\n>           assert (get_new_command(cmd, settings) ==\n                'dummy_editor {} +{}:{} && {}'.format(test[1], test[2], test[3], test[0]))",
            "\ntests/rules/test_fix_file.py:230: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "command.stderr": "\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\"",
                "command": "Command(script='gcc a.c', stdout='', stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")",
                "command.stdout": "''",
                "command.script": "'gcc a.c'"
            },
            {
                "m": "<re.Match object; span=(26, 32), match='a.c:3:'>",
                "editor_call": "'dummy_editor a.c +3'"
            }
        ],
        [
            {
                "command.stderr": "'\\na.c:3:1: error: expected expression\\n}\\n^\\n'",
                "command": "Command(script='clang a.c', stdout='', stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n')",
                "command.stdout": "''",
                "command.script": "'clang a.c'"
            },
            {
                "m": "<re.Match object; span=(1, 7), match='a.c:3:'>",
                "editor_call": "'dummy_editor a.c +3'"
            }
        ],
        [
            {
                "command.stderr": "'\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n'",
                "command": "Command(script='perl a.pl', stdout='', stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n')",
                "command.stdout": "''",
                "command.script": "'perl a.pl'"
            },
            {
                "m": "<re.Match object; span=(14, 28), match='at a.pl line 3'>",
                "editor_call": "'dummy_editor a.pl +3'"
            }
        ],
        [
            {
                "command.stderr": "'\\nSearch pattern not terminated at a.pl line 2.\\n'",
                "command": "Command(script='perl a.pl', stdout='', stderr='\\nSearch pattern not terminated at a.pl line 2.\\n')",
                "command.stdout": "''",
                "command.script": "'perl a.pl'"
            },
            {
                "m": "<re.Match object; span=(31, 45), match='at a.pl line 2'>",
                "editor_call": "'dummy_editor a.pl +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\na.sh: line 2: foo: command not found\\n'",
                "command": "Command(script='sh a.sh', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                "command.stdout": "''",
                "command.script": "'sh a.sh'"
            },
            {
                "m": "<re.Match object; span=(1, 15), match='a.sh: line 2: '>",
                "editor_call": "'dummy_editor a.sh +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\na.sh:2: command not found: foo\\n'",
                "command": "Command(script='zsh a.sh', stdout='', stderr='\\na.sh:2: command not found: foo\\n')",
                "command.stdout": "''",
                "command.script": "'zsh a.sh'"
            },
            {
                "m": "<re.Match object; span=(1, 8), match='a.sh:2:'>",
                "editor_call": "'dummy_editor a.sh +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\na.sh: line 2: foo: command not found\\n'",
                "command": "Command(script='bash a.sh', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                "command.stdout": "''",
                "command.script": "'bash a.sh'"
            },
            {
                "m": "<re.Match object; span=(1, 15), match='a.sh: line 2: '>",
                "editor_call": "'dummy_editor a.sh +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n'",
                "command": "Command(script='rustc a.rs', stdout='', stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')",
                "command.stdout": "''",
                "command.script": "'rustc a.rs'"
            },
            {
                "m": "<re.Match object; span=(1, 8), match='a.rs:2:'>",
                "editor_call": "'dummy_editor a.rs +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n'",
                "command": "Command(script='cargo build', stdout='', stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')",
                "command.stdout": "''",
                "command.script": "'cargo build'"
            },
            {
                "m": "<re.Match object; span=(55, 72), match='   src/lib.rs:3:5'>",
                "editor_call": "'dummy_editor src/lib.rs +3'"
            }
        ],
        [
            {
                "command.stderr": "'\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n'",
                "command": "Command(script='python a.py', stdout='', stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n')",
                "command.stdout": "''",
                "command.script": "'python a.py'"
            },
            {
                "m": "<re.Match object; span=(1, 22), match='  File \"a.py\", line 2'>",
                "editor_call": "'dummy_editor a.py +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    match(\"foo\")\\n  File \"a.py\", line 5, in match\\n    m = re.search(None, command)\\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\\n    return _compile(pattern, flags).search(string)\\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\\n    raise TypeError(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n'",
                "command": "array of shape 3",
                "command.stdout": "''",
                "command.script": "'python a.py'"
            },
            {
                "m": "<re.Match object; span=(36, 57), match='  File \"a.py\", line 8'>",
                "editor_call": "'dummy_editor a.py +8'"
            }
        ],
        [
            {
                "command.stderr": "'\\na.rb:3: syntax error, unexpected keyword_end\\n'",
                "command": "Command(script='ruby a.rb', stdout='', stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n')",
                "command.stdout": "''",
                "command.script": "'ruby a.rb'"
            },
            {
                "m": "<re.Match object; span=(1, 8), match='a.rb:3:'>",
                "editor_call": "'dummy_editor a.rb +3'"
            }
        ],
        [
            {
                "command.stderr": "\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\"",
                "command": "Command(script='lua a.lua', stdout='', stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\")",
                "command.stdout": "''",
                "command.script": "'lua a.lua'"
            },
            {
                "m": "<re.Match object; span=(1, 14), match='lua: a.lua:2:'>",
                "editor_call": "'dummy_editor a.lua +2'"
            }
        ],
        [
            {
                "command.stderr": "\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\"",
                "command": "Command(script='fish a.sh', stdout='', stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\")",
                "command.stdout": "''",
                "command.script": "'fish a.sh'"
            },
            {
                "m": "<re.Match object; span=(29, 58), match='/tmp/fix-error/a.sh (line 2):'>",
                "editor_call": "'dummy_editor /tmp/fix-error/a.sh +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n'",
                "command": "Command(script='./a', stdout='', stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n')",
                "command.stdout": "''",
                "command.script": "'./a'"
            },
            {
                "m": "<re.Match object; span=(1, 12), match='awk: ./a:2:'>",
                "editor_call": "'dummy_editor ./a +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n'",
                "command": "Command(script='llc a.ll', stdout='', stderr='\\nllc: a.ll:1:2: error: expected top-level entity\\n+\\n^\\n')",
                "command.stdout": "''",
                "command.script": "'llc a.ll'"
            },
            {
                "m": "<re.Match object; span=(1, 15), match='llc: a.ll:1:2:'>",
                "editor_call": "'dummy_editor a.ll +1'"
            }
        ],
        [
            {
                "command.stderr": "\"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\"",
                "command": "Command(script='go build a.go', stdout='', stderr=\"\\ncan't load package:\\na.go:1:2: expected 'package', found '+'\\n\")",
                "command.stdout": "''",
                "command.script": "'go build a.go'"
            },
            {
                "m": "<re.Match object; span=(21, 28), match='a.go:1:'>",
                "editor_call": "'dummy_editor a.go +1'"
            }
        ],
        [
            {
                "command.stderr": "\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\"",
                "command": "Command(script='make', stdout='', stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\")",
                "command.stdout": "''",
                "command.script": "'make'"
            },
            {
                "m": "<re.Match object; span=(40, 51), match='Makefile:2:'>",
                "editor_call": "'dummy_editor Makefile +2'"
            }
        ],
        [
            {
                "command.stderr": "'\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n'",
                "command": "Command(script='git st', stdout='', stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n')",
                "command.stdout": "''",
                "command.script": "'git st'"
            },
            {
                "m": "<re.Match object; span=(1, 65), match='fatal: bad config file line 1 in /home/martin/.co>",
                "editor_call": "'dummy_editor /home/martin/.config/git/config +1'"
            }
        ],
        [
            {
                "command.stderr": "array of shape 583",
                "command": "array of shape 3",
                "command.stdout": "''",
                "command.script": "'node fuck.js asdf qwer'"
            },
            {
                "m": "<re.Match object; span=(140, 191), match='    at /Users/pablo/Workspace/barebones/fuck.js:2>",
                "editor_call": "'dummy_editor /Users/pablo/Workspace/barebones/fuck.js +2'"
            }
        ],
        [
            {
                "command.stderr": "''",
                "command": "Command(script='pep8', stdout='\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n', stderr='')",
                "command.stdout": "'\\n./tests/rules/test_systemctl.py:17:80: E501 line too long (93 > 79 characters)\\n./tests/rules/test_systemctl.py:18:80: E501 line too long (103 > 79 characters)\\n./tests/rules/test_whois.py:20:80: E501 line too long (89 > 79 characters)\\n./tests/rules/test_whois.py:22:80: E501 line too long (83 > 79 characters)\\n'",
                "command.script": "'pep8'"
            },
            {
                "m": "<re.Match object; span=(1, 36), match='./tests/rules/test_systemctl.py:17:'>",
                "editor_call": "'dummy_editor ./tests/rules/test_systemctl.py +17'"
            }
        ],
        [
            {
                "command.stderr": "''",
                "command": "array of shape 3",
                "command.stdout": "array of shape 536",
                "command.script": "'py.test'"
            },
            {
                "m": "<re.Match object; span=(478, 525), match='/home/thefuck/tests/rules/test_fix_file.py:218:'>",
                "editor_call": "'dummy_editor /home/thefuck/tests/rules/test_fix_file.py +218'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command",
                "command.stdout": "str",
                "command.script": "str"
            },
            {
                "m": "Match",
                "editor_call": "str"
            }
        ]
    ],
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}