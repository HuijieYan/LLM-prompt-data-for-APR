{
    "thefuck:16": {
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_16/thefuck/shells/bash.py": {
            "buggy_functions": [
                {
                    "function_name": "app_alias",
                    "function_code": "def app_alias(self, fuck):\n    alias = \"TF_ALIAS={0}\" \\\n            \" alias {0}='PYTHONIOENCODING=utf-8\" \\\n            \" TF_CMD=$(TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) && \" \\\n            \" eval $TF_CMD\".format(fuck)\n\n    if settings.alter_history:\n        return alias + \" && history -s $TF_CMD'\"\n    else:\n        return alias + \"'\"\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 8,
                    "end_line": 17,
                    "variables": {
                        "alias": [
                            9,
                            17,
                            15
                        ],
                        "format": [
                            9
                        ],
                        "fuck": [
                            12
                        ],
                        "settings.alter_history": [
                            14
                        ],
                        "settings": [
                            14
                        ]
                    },
                    "filtered_variables": {
                        "alias": [
                            9,
                            17,
                            15
                        ],
                        "fuck": [
                            12
                        ],
                        "settings.alter_history": [
                            14
                        ],
                        "settings": [
                            14
                        ]
                    },
                    "diff_line_number": 9,
                    "class_data": {
                        "signature": "class Bash(Generic)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def app_alias(self, fuck):\n    alias = \"TF_ALIAS={0} alias {0}='PYTHONIOENCODING=utf-8 TF_CMD=$(TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) &&  eval $TF_CMD\".format(fuck)\n    if settings.alter_history:\n        return alias + \" && history -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                            "def _parse_alias(self, alias):\n    name, value = alias.replace('alias ', '', 1).split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return (name, value)",
                            "@memoize\ndef get_aliases(self):\n    raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n    return dict((self._parse_alias(alias) for alias in raw_aliases if alias and '=' in alias))",
                            "def _get_history_file_name(self):\n    return os.environ.get('HISTFILE', os.path.expanduser('~/.bash_history'))",
                            "def _get_history_line(self, command_script):\n    return u'{}\\n'.format(command_script)",
                            "def how_to_configure(self):\n    if os.path.join(os.path.expanduser('~'), '.bashrc'):\n        config = '~/.bashrc'\n    elif os.path.join(os.path.expanduser('~'), '.bash_profile'):\n        config = '~/.bashrc'\n    else:\n        config = 'bash config'\n    return ('eval $(thefuck --alias)', config)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "app_alias(self, fuck)",
                            "_parse_alias(self, alias)",
                            "get_aliases(self)",
                            "_get_history_file_name(self)",
                            "_get_history_line(self, command_script)",
                            "how_to_configure(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fuck": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "alias": {
                                    "variable_value": "\"TF_ALIAS=fuck alias fuck='PYTHONIOENCODING=utf-8 TF_CMD=$(TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) &&  eval $TF_CMD\"",
                                    "variable_type": "str",
                                    "variable_shape": "122"
                                },
                                "fuck": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fuck": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "alias": {
                                    "variable_value": "\"alias fuck='TF_CMD=$(TF_ALIAS=fuck PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) && eval $TF_CMD\"",
                                    "variable_type": "str",
                                    "variable_shape": "121"
                                },
                                "fuck": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def app_alias(self, fuck):\n    alias = \"TF_ALIAS={0}\" \\\n            \" alias {0}='PYTHONIOENCODING=utf-8\" \\\n            \" TF_CMD=$(TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) && \" \\\n            \" eval $TF_CMD\".format(fuck)\n\n    if settings.alter_history:\n        return alias + \" && history -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                "def _parse_alias(self, alias):\n    name, value = alias.replace('alias ', '', 1).split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return name, value",
                "@memoize\ndef get_aliases(self):\n    raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n    return dict(self._parse_alias(alias)\n                for alias in raw_aliases if alias and '=' in alias)",
                "def _get_history_file_name(self):\n    return os.environ.get(\"HISTFILE\",\n                          os.path.expanduser('~/.bash_history'))",
                "def _get_history_line(self, command_script):\n    return u'{}\\n'.format(command_script)",
                "def how_to_configure(self):\n    if os.path.join(os.path.expanduser('~'), '.bashrc'):\n        config = '~/.bashrc'\n    elif os.path.join(os.path.expanduser('~'), '.bash_profile'):\n        config = '~/.bashrc'\n    else:\n        config = 'bash config'\n    return 'eval $(thefuck --alias)', config"
            ],
            "inscope_function_signatures": [
                "app_alias(self, fuck)",
                "_parse_alias(self, alias)",
                "get_aliases(self)",
                "_get_history_file_name(self)",
                "_get_history_line(self, command_script)",
                "how_to_configure(self)"
            ],
            "variables_in_file": {
                "Generic": [
                    7
                ],
                "alias": [
                    9,
                    15,
                    17,
                    20,
                    28,
                    29
                ],
                "format": [
                    9,
                    36
                ],
                "fuck": [
                    12
                ],
                "settings.alter_history": [
                    14
                ],
                "settings": [
                    14
                ],
                "name": [
                    20,
                    23
                ],
                "value": [
                    20,
                    21,
                    22,
                    23
                ],
                "split": [
                    27,
                    20
                ],
                "alias.replace": [
                    20
                ],
                "raw_aliases": [
                    27,
                    29
                ],
                "os.environ.get": [
                    32,
                    27
                ],
                "os.environ": [
                    32,
                    27
                ],
                "os": [
                    32,
                    33,
                    39,
                    41,
                    27
                ],
                "dict": [
                    28
                ],
                "self._parse_alias": [
                    28
                ],
                "self": [
                    28
                ],
                "memoize": [
                    25
                ],
                "os.path.expanduser": [
                    33,
                    41,
                    39
                ],
                "os.path": [
                    33,
                    41,
                    39
                ],
                "command_script": [
                    36
                ],
                "os.path.join": [
                    41,
                    39
                ],
                "config": [
                    40,
                    42,
                    44,
                    45
                ]
            },
            "filtered_variables_in_file": {
                "Generic": [
                    7
                ],
                "alias": [
                    9,
                    15,
                    17,
                    20,
                    28,
                    29
                ],
                "fuck": [
                    12
                ],
                "settings.alter_history": [
                    14
                ],
                "settings": [
                    14
                ],
                "name": [
                    20,
                    23
                ],
                "value": [
                    20,
                    21,
                    22,
                    23
                ],
                "split": [
                    27,
                    20
                ],
                "alias.replace": [
                    20
                ],
                "raw_aliases": [
                    27,
                    29
                ],
                "os.environ.get": [
                    32,
                    27
                ],
                "os.environ": [
                    32,
                    27
                ],
                "os": [
                    32,
                    33,
                    39,
                    41,
                    27
                ],
                "self._parse_alias": [
                    28
                ],
                "self": [
                    28
                ],
                "memoize": [
                    25
                ],
                "os.path.expanduser": [
                    33,
                    41,
                    39
                ],
                "os.path": [
                    33,
                    41,
                    39
                ],
                "command_script": [
                    36
                ],
                "os.path.join": [
                    41,
                    39
                ],
                "config": [
                    40,
                    42,
                    44,
                    45
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_16/thefuck/shells/fish.py": {
            "buggy_functions": [
                {
                    "function_name": "app_alias",
                    "function_code": "def app_alias(self, fuck):\n    return ('function {0} -d \"Correct your previous console command\"\\n'\n            '  set -l fucked_up_command $history[1]\\n'\n            '  env TF_ALIAS={0} PYTHONIOENCODING=utf-8'\n            ' thefuck $fucked_up_command | read -l unfucked_command\\n'\n            '  if [ \"$unfucked_command\" != \"\" ]\\n'\n            '    eval $unfucked_command\\n'\n            '    history --delete $fucked_up_command\\n'\n            '    history --merge ^ /dev/null\\n'\n            '  end\\n'\n            'end').format(fuck)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 16,
                    "end_line": 26,
                    "variables": {
                        "format": [
                            17
                        ],
                        "fuck": [
                            26
                        ]
                    },
                    "filtered_variables": {
                        "fuck": [
                            26
                        ]
                    },
                    "diff_line_number": 16,
                    "class_data": {
                        "signature": "class Fish(Generic)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def _get_overridden_aliases(self):\n    overridden_aliases = os.environ.get('TF_OVERRIDDEN_ALIASES', '').strip()\n    if overridden_aliases:\n        return [alias.strip() for alias in overridden_aliases.split(',')]\n    else:\n        return ['cd', 'grep', 'ls', 'man', 'open']",
                            "def app_alias(self, fuck):\n    return 'function {0} -d \"Correct your previous console command\"\\n  set -l fucked_up_command $history[1]\\n  env TF_ALIAS={0} PYTHONIOENCODING=utf-8 thefuck $fucked_up_command | read -l unfucked_command\\n  if [ \"$unfucked_command\" != \"\" ]\\n    eval $unfucked_command\\n    history --delete $fucked_up_command\\n    history --merge ^ /dev/null\\n  end\\nend'.format(fuck)",
                            "@memoize\n@cache('.config/fish/config.fish', '.config/fish/functions')\ndef get_aliases(self):\n    overridden = self._get_overridden_aliases()\n    proc = Popen(['fish', '-ic', 'functions'], stdout=PIPE, stderr=DEVNULL)\n    functions = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    return {func: func for func in functions if func not in overridden}",
                            "def _expand_aliases(self, command_script):\n    aliases = self.get_aliases()\n    binary = command_script.split(' ')[0]\n    if binary in aliases:\n        return u'fish -ic \"{}\"'.format(command_script.replace('\"', '\\\\\"'))\n    else:\n        return command_script",
                            "def from_shell(self, command_script):\n    \"\"\"Prepares command before running in app.\"\"\"\n    return self._expand_aliases(command_script)",
                            "def _get_history_file_name(self):\n    return os.path.expanduser('~/.config/fish/fish_history')",
                            "def _get_history_line(self, command_script):\n    return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))",
                            "def _script_from_history(self, line):\n    if '- cmd: ' in line:\n        return line.split('- cmd: ', 1)[1]\n    else:\n        return ''",
                            "def and_(self, *commands):\n    return u'; and '.join(commands)",
                            "def how_to_configure(self):\n    return (\"eval (thefuck --alias | tr '\\\\n' ';')\", '~/.config/fish/config.fish')"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "_get_overridden_aliases(self)",
                            "app_alias(self, fuck)",
                            "get_aliases(self)",
                            "_expand_aliases(self, command_script)",
                            "from_shell(self, command_script)",
                            "_get_history_file_name(self)",
                            "_get_history_line(self, command_script)",
                            "_script_from_history(self, line)",
                            "and_(self, *commands)",
                            "how_to_configure(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _get_overridden_aliases(self):\n    overridden_aliases = os.environ.get('TF_OVERRIDDEN_ALIASES', '').strip()\n    if overridden_aliases:\n        return [alias.strip() for alias in overridden_aliases.split(',')]\n    else:\n        return ['cd', 'grep', 'ls', 'man', 'open']",
                "def app_alias(self, fuck):\n    return ('function {0} -d \"Correct your previous console command\"\\n'\n            '  set -l fucked_up_command $history[1]\\n'\n            '  env TF_ALIAS={0} PYTHONIOENCODING=utf-8'\n            ' thefuck $fucked_up_command | read -l unfucked_command\\n'\n            '  if [ \"$unfucked_command\" != \"\" ]\\n'\n            '    eval $unfucked_command\\n'\n            '    history --delete $fucked_up_command\\n'\n            '    history --merge ^ /dev/null\\n'\n            '  end\\n'\n            'end').format(fuck)",
                "@memoize\n@cache('.config/fish/config.fish', '.config/fish/functions')\ndef get_aliases(self):\n    overridden = self._get_overridden_aliases()\n    proc = Popen(['fish', '-ic', 'functions'], stdout=PIPE, stderr=DEVNULL)\n    functions = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    return {func: func for func in functions if func not in overridden}",
                "def _expand_aliases(self, command_script):\n    aliases = self.get_aliases()\n    binary = command_script.split(' ')[0]\n    if binary in aliases:\n        return u'fish -ic \"{}\"'.format(command_script.replace('\"', r'\\\"'))\n    else:\n        return command_script",
                "def from_shell(self, command_script):\n    \"\"\"Prepares command before running in app.\"\"\"\n    return self._expand_aliases(command_script)",
                "def _get_history_file_name(self):\n    return os.path.expanduser('~/.config/fish/fish_history')",
                "def _get_history_line(self, command_script):\n    return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))",
                "def _script_from_history(self, line):\n    if '- cmd: ' in line:\n        return line.split('- cmd: ', 1)[1]\n    else:\n        return ''",
                "def and_(self, *commands):\n    return u'; and '.join(commands)",
                "def how_to_configure(self):\n    return (r\"eval (thefuck --alias | tr '\\n' ';')\",\n            '~/.config/fish/config.fish')"
            ],
            "inscope_function_signatures": [
                "_get_overridden_aliases(self)",
                "app_alias(self, fuck)",
                "get_aliases(self)",
                "_expand_aliases(self, command_script)",
                "from_shell(self, command_script)",
                "_get_history_file_name(self)",
                "_get_history_line(self, command_script)",
                "_script_from_history(self, line)",
                "and_(self, *commands)",
                "how_to_configure(self)"
            ],
            "variables_in_file": {
                "Generic": [
                    8
                ],
                "overridden_aliases": [
                    10,
                    11,
                    12
                ],
                "strip": [
                    33,
                    10
                ],
                "os.environ.get": [
                    10
                ],
                "os.environ": [
                    10
                ],
                "os": [
                    49,
                    10
                ],
                "alias.strip": [
                    12
                ],
                "alias": [
                    12
                ],
                "overridden_aliases.split": [
                    12
                ],
                "format": [
                    40,
                    17,
                    52
                ],
                "fuck": [
                    26
                ],
                "overridden": [
                    34,
                    31
                ],
                "self._get_overridden_aliases": [
                    31
                ],
                "self": [
                    37,
                    46,
                    31
                ],
                "proc": [
                    32,
                    33
                ],
                "Popen": [
                    32
                ],
                "PIPE": [
                    32
                ],
                "DEVNULL": [
                    32
                ],
                "functions": [
                    33,
                    34
                ],
                "split": [
                    33
                ],
                "decode": [
                    33
                ],
                "proc.stdout.read": [
                    33
                ],
                "proc.stdout": [
                    33
                ],
                "func": [
                    34
                ],
                "memoize": [
                    28
                ],
                "cache": [
                    29
                ],
                "aliases": [
                    37,
                    39
                ],
                "self.get_aliases": [
                    37
                ],
                "binary": [
                    38,
                    39
                ],
                "command_script.split": [
                    38
                ],
                "command_script": [
                    38,
                    40,
                    42,
                    46,
                    52
                ],
                "command_script.replace": [
                    40
                ],
                "self._expand_aliases": [
                    46
                ],
                "os.path.expanduser": [
                    49
                ],
                "os.path": [
                    49
                ],
                "int": [
                    52
                ],
                "time": [
                    52
                ],
                "line": [
                    56,
                    55
                ],
                "line.split": [
                    56
                ],
                "join": [
                    61
                ],
                "commands": [
                    61
                ]
            },
            "filtered_variables_in_file": {
                "Generic": [
                    8
                ],
                "overridden_aliases": [
                    10,
                    11,
                    12
                ],
                "strip": [
                    33,
                    10
                ],
                "os.environ.get": [
                    10
                ],
                "os.environ": [
                    10
                ],
                "os": [
                    49,
                    10
                ],
                "alias.strip": [
                    12
                ],
                "alias": [
                    12
                ],
                "overridden_aliases.split": [
                    12
                ],
                "fuck": [
                    26
                ],
                "overridden": [
                    34,
                    31
                ],
                "self._get_overridden_aliases": [
                    31
                ],
                "self": [
                    37,
                    46,
                    31
                ],
                "proc": [
                    32,
                    33
                ],
                "Popen": [
                    32
                ],
                "PIPE": [
                    32
                ],
                "DEVNULL": [
                    32
                ],
                "functions": [
                    33,
                    34
                ],
                "split": [
                    33
                ],
                "decode": [
                    33
                ],
                "proc.stdout.read": [
                    33
                ],
                "proc.stdout": [
                    33
                ],
                "func": [
                    34
                ],
                "memoize": [
                    28
                ],
                "cache": [
                    29
                ],
                "aliases": [
                    37,
                    39
                ],
                "self.get_aliases": [
                    37
                ],
                "binary": [
                    38,
                    39
                ],
                "command_script.split": [
                    38
                ],
                "command_script": [
                    38,
                    40,
                    42,
                    46,
                    52
                ],
                "command_script.replace": [
                    40
                ],
                "self._expand_aliases": [
                    46
                ],
                "os.path.expanduser": [
                    49
                ],
                "os.path": [
                    49
                ],
                "time": [
                    52
                ],
                "line": [
                    56,
                    55
                ],
                "line.split": [
                    56
                ],
                "join": [
                    61
                ],
                "commands": [
                    61
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_16/thefuck/shells/zsh.py": {
            "buggy_functions": [
                {
                    "function_name": "app_alias",
                    "function_code": "def app_alias(self, alias_name):\n    alias = \"alias {0}='TF_ALIAS={0}\" \\\n            \" PYTHONIOENCODING=utf-8\" \\\n            ' TF_SHELL_ALIASES=$(alias)' \\\n            \" TF_CMD=$(thefuck $(fc -ln -1 | tail -n 1)) &&\" \\\n            \" eval $TF_CMD\".format(alias_name)\n\n    if settings.alter_history:\n        return alias + \" && print -s $TF_CMD'\"\n    else:\n        return alias + \"'\"\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 9,
                    "end_line": 19,
                    "variables": {
                        "alias": [
                            17,
                            10,
                            19
                        ],
                        "format": [
                            10
                        ],
                        "alias_name": [
                            14
                        ],
                        "settings.alter_history": [
                            16
                        ],
                        "settings": [
                            16
                        ]
                    },
                    "filtered_variables": {
                        "alias": [
                            17,
                            10,
                            19
                        ],
                        "alias_name": [
                            14
                        ],
                        "settings.alter_history": [
                            16
                        ],
                        "settings": [
                            16
                        ]
                    },
                    "diff_line_number": 10,
                    "class_data": {
                        "signature": "class Zsh(Generic)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def app_alias(self, alias_name):\n    alias = \"alias {0}='TF_ALIAS={0} PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) TF_CMD=$(thefuck $(fc -ln -1 | tail -n 1)) && eval $TF_CMD\".format(alias_name)\n    if settings.alter_history:\n        return alias + \" && print -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                            "def _parse_alias(self, alias):\n    name, value = alias.split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return (name, value)",
                            "@memoize\ndef get_aliases(self):\n    raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n    return dict((self._parse_alias(alias) for alias in raw_aliases if alias and '=' in alias))",
                            "def _get_history_file_name(self):\n    return os.environ.get('HISTFILE', os.path.expanduser('~/.zsh_history'))",
                            "def _get_history_line(self, command_script):\n    return u': {}:0;{}\\n'.format(int(time()), command_script)",
                            "def _script_from_history(self, line):\n    if ';' in line:\n        return line.split(';', 1)[1]\n    else:\n        return ''",
                            "def how_to_configure(self):\n    return ('eval $(thefuck --alias)', '~/.zshrc')"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "app_alias(self, alias_name)",
                            "_parse_alias(self, alias)",
                            "get_aliases(self)",
                            "_get_history_file_name(self)",
                            "_get_history_line(self, command_script)",
                            "_script_from_history(self, line)",
                            "how_to_configure(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_name": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "alias": {
                                    "variable_value": "\"alias fuck='TF_ALIAS=fuck PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) TF_CMD=$(thefuck $(fc -ln -1 ",
                                    "variable_type": "str",
                                    "variable_shape": " tail -n 1)) && eval $TF_CMD\""
                                },
                                "alias_name": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "alias_name": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "alias": {
                                    "variable_value": "\"alias fuck='TF_CMD=$(TF_ALIAS=fuck PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1 ",
                                    "variable_type": "str",
                                    "variable_shape": " tail -n 1)) && eval $TF_CMD\""
                                },
                                "alias_name": {
                                    "variable_value": "'fuck'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "settings.alter_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "settings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def app_alias(self, alias_name):\n    alias = \"alias {0}='TF_ALIAS={0}\" \\\n            \" PYTHONIOENCODING=utf-8\" \\\n            ' TF_SHELL_ALIASES=$(alias)' \\\n            \" TF_CMD=$(thefuck $(fc -ln -1 | tail -n 1)) &&\" \\\n            \" eval $TF_CMD\".format(alias_name)\n\n    if settings.alter_history:\n        return alias + \" && print -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                "def _parse_alias(self, alias):\n    name, value = alias.split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return name, value",
                "@memoize\ndef get_aliases(self):\n    raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n    return dict(self._parse_alias(alias)\n                for alias in raw_aliases if alias and '=' in alias)",
                "def _get_history_file_name(self):\n    return os.environ.get(\"HISTFILE\",\n                          os.path.expanduser('~/.zsh_history'))",
                "def _get_history_line(self, command_script):\n    return u': {}:0;{}\\n'.format(int(time()), command_script)",
                "def _script_from_history(self, line):\n    if ';' in line:\n        return line.split(';', 1)[1]\n    else:\n        return ''",
                "def how_to_configure(self):\n    return 'eval $(thefuck --alias)', '~/.zshrc'"
            ],
            "inscope_function_signatures": [
                "app_alias(self, alias_name)",
                "_parse_alias(self, alias)",
                "get_aliases(self)",
                "_get_history_file_name(self)",
                "_get_history_line(self, command_script)",
                "_script_from_history(self, line)",
                "how_to_configure(self)"
            ],
            "variables_in_file": {
                "Generic": [
                    8
                ],
                "alias": [
                    10,
                    17,
                    19,
                    22,
                    30,
                    31
                ],
                "format": [
                    10,
                    38
                ],
                "alias_name": [
                    14
                ],
                "settings.alter_history": [
                    16
                ],
                "settings": [
                    16
                ],
                "name": [
                    25,
                    22
                ],
                "value": [
                    24,
                    25,
                    22,
                    23
                ],
                "alias.split": [
                    22
                ],
                "raw_aliases": [
                    29,
                    31
                ],
                "split": [
                    29
                ],
                "os.environ.get": [
                    34,
                    29
                ],
                "os.environ": [
                    34,
                    29
                ],
                "os": [
                    34,
                    35,
                    29
                ],
                "dict": [
                    30
                ],
                "self._parse_alias": [
                    30
                ],
                "self": [
                    30
                ],
                "memoize": [
                    27
                ],
                "os.path.expanduser": [
                    35
                ],
                "os.path": [
                    35
                ],
                "int": [
                    38
                ],
                "time": [
                    38
                ],
                "command_script": [
                    38
                ],
                "line": [
                    41,
                    42
                ],
                "line.split": [
                    42
                ]
            },
            "filtered_variables_in_file": {
                "Generic": [
                    8
                ],
                "alias": [
                    10,
                    17,
                    19,
                    22,
                    30,
                    31
                ],
                "alias_name": [
                    14
                ],
                "settings.alter_history": [
                    16
                ],
                "settings": [
                    16
                ],
                "name": [
                    25,
                    22
                ],
                "value": [
                    24,
                    25,
                    22,
                    23
                ],
                "alias.split": [
                    22
                ],
                "raw_aliases": [
                    29,
                    31
                ],
                "split": [
                    29
                ],
                "os.environ.get": [
                    34,
                    29
                ],
                "os.environ": [
                    34,
                    29
                ],
                "os": [
                    34,
                    35,
                    29
                ],
                "self._parse_alias": [
                    30
                ],
                "self": [
                    30
                ],
                "memoize": [
                    27
                ],
                "os.path.expanduser": [
                    35
                ],
                "os.path": [
                    35
                ],
                "time": [
                    38
                ],
                "command_script": [
                    38
                ],
                "line": [
                    41,
                    42
                ],
                "line.split": [
                    42
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_16/thefuck/types.py": {
            "buggy_functions": [
                {
                    "function_name": "run",
                    "function_code": "def run(self, old_cmd):\n    \"\"\"Runs command from rule for passed command.\n\n    :type old_cmd: Command\n\n    \"\"\"\n    if self.side_effect:\n        compatibility_call(self.side_effect, old_cmd, self.script)\n    # This depends on correct setting of PYTHONIOENCODING by the alias:\n    logs.debug(u'PYTHONIOENCODING: {}'.format(\n        os.environ.get('PYTHONIOENCODING', '>-not-set-<')))\n    print(self.script)\n",
                    "decorators": [],
                    "docstring": "Runs command from rule for passed command.\n\n:type old_cmd: Command",
                    "start_line": 275,
                    "end_line": 286,
                    "variables": {
                        "self.side_effect": [
                            281,
                            282
                        ],
                        "self": [
                            281,
                            282,
                            286
                        ],
                        "compatibility_call": [
                            282
                        ],
                        "old_cmd": [
                            282
                        ],
                        "self.script": [
                            282,
                            286
                        ],
                        "logs.debug": [
                            284
                        ],
                        "logs": [
                            284
                        ],
                        "format": [
                            284
                        ],
                        "os.environ.get": [
                            285
                        ],
                        "os.environ": [
                            285
                        ],
                        "os": [
                            285
                        ],
                        "print": [
                            286
                        ]
                    },
                    "filtered_variables": {
                        "self.side_effect": [
                            281,
                            282
                        ],
                        "self": [
                            281,
                            282,
                            286
                        ],
                        "compatibility_call": [
                            282
                        ],
                        "old_cmd": [
                            282
                        ],
                        "self.script": [
                            282,
                            286
                        ],
                        "logs.debug": [
                            284
                        ],
                        "logs": [
                            284
                        ],
                        "os.environ.get": [
                            285
                        ],
                        "os.environ": [
                            285
                        ],
                        "os": [
                            285
                        ]
                    },
                    "diff_line_number": 285,
                    "class_data": {
                        "signature": "class CorrectedCommand(object)",
                        "docstring": "Corrected by rule command.",
                        "constructor_docstring": "Initializes instance with given fields.\n\n:type script: basestring\n:type side_effect: (Command, basestring) -> None\n:type priority: int",
                        "functions": [
                            "def __init__(self, script, side_effect, priority):\n    \"\"\"Initializes instance with given fields.\n\n    :type script: basestring\n    :type side_effect: (Command, basestring) -> None\n    :type priority: int\n\n    \"\"\"\n    self.script = script\n    self.side_effect = side_effect\n    self.priority = priority",
                            "def __eq__(self, other):\n    \"\"\"Ignores `priority` field.\"\"\"\n    if isinstance(other, CorrectedCommand):\n        return (other.script, other.side_effect) == (self.script, self.side_effect)\n    else:\n        return False",
                            "def __hash__(self):\n    return (self.script, self.side_effect).__hash__()",
                            "def __repr__(self):\n    return u'CorrectedCommand(script={}, side_effect={}, priority={})'.format(self.script, self.side_effect, self.priority)",
                            "def run(self, old_cmd):\n    \"\"\"Runs command from rule for passed command.\n\n    :type old_cmd: Command\n\n    \"\"\"\n    if self.side_effect:\n        compatibility_call(self.side_effect, old_cmd, self.script)\n    logs.debug(u'PYTHONIOENCODING: {}'.format(os.environ.get('PYTHONIOENCODING', '>-not-set-<')))\n    print(self.script)"
                        ],
                        "constructor_variables": [
                            "side_effect",
                            "script",
                            "priority"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, script, side_effect, priority)",
                            "__eq__(self, other)",
                            "__hash__(self)",
                            "__repr__(self)",
                            "run(self, old_cmd)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, script, stdout, stderr):\n    \"\"\"Initializes command with given values.\n\n    :type script: basestring\n    :type stdout: basestring\n    :type stderr: basestring\n\n    \"\"\"\n    self.script = script\n    self.stdout = stdout\n    self.stderr = stderr",
                "@property\ndef script_parts(self):\n    if not hasattr(self, '_script_parts'):\n        try:\n            self._script_parts = shell.split_command(self.script)\n        except Exception:\n            logs.debug(u\"Can't split command script {} because:\\n {}\".format(\n                    self, sys.exc_info()))\n            self._script_parts = None\n    return self._script_parts",
                "def __eq__(self, other):\n    if isinstance(other, Command):\n        return (self.script, self.stdout, self.stderr) \\\n               == (other.script, other.stdout, other.stderr)\n    else:\n        return False",
                "def __repr__(self):\n    return u'Command(script={}, stdout={}, stderr={})'.format(\n            self.script, self.stdout, self.stderr)",
                "def update(self, **kwargs):\n    \"\"\"Returns new command with replaced fields.\n\n    :rtype: Command\n\n    \"\"\"\n    kwargs.setdefault('script', self.script)\n    kwargs.setdefault('stdout', self.stdout)\n    kwargs.setdefault('stderr', self.stderr)\n    return Command(**kwargs)",
                "@staticmethod\ndef _wait_output(popen):\n    \"\"\"Returns `True` if we can get output of the command in the\n    `settings.wait_command` time.\n\n    Command will be killed if it wasn't finished in the time.\n\n    :type popen: Popen\n    :rtype: bool\n\n    \"\"\"\n    proc = Process(popen.pid)\n    try:\n        proc.wait(settings.wait_command)\n        return True\n    except TimeoutExpired:\n        for child in proc.children(recursive=True):\n            child.kill()\n        proc.kill()\n        return False",
                "@staticmethod\ndef _prepare_script(raw_script):\n    \"\"\"Creates single script from a list of script parts.\n\n    :type raw_script: [basestring]\n    :rtype: basestring\n\n    \"\"\"\n    if six.PY2:\n        script = ' '.join(arg.decode('utf-8') for arg in raw_script)\n    else:\n        script = ' '.join(raw_script)\n\n    script = script.strip()\n    return shell.from_shell(script)",
                "@classmethod\ndef from_raw_script(cls, raw_script):\n    \"\"\"Creates instance of `Command` from a list of script parts.\n\n    :type raw_script: [basestring]\n    :rtype: Command\n    :raises: EmptyCommand\n\n    \"\"\"\n    script = cls._prepare_script(raw_script)\n    if not script:\n        raise EmptyCommand\n\n    env = dict(os.environ)\n    env.update(settings.env)\n\n    with logs.debug_time(u'Call: {}; with env: {};'.format(script, env)):\n        result = Popen(script, shell=True, stdout=PIPE, stderr=PIPE, env=env)\n        if cls._wait_output(result):\n            stdout = result.stdout.read().decode('utf-8')\n            stderr = result.stderr.read().decode('utf-8')\n\n            logs.debug(u'Received stdout: {}'.format(stdout))\n            logs.debug(u'Received stderr: {}'.format(stderr))\n\n            return cls(script, stdout, stderr)\n        else:\n            logs.debug(u'Execution timed out!')\n            return cls(script, None, None)",
                "def __init__(self, name, match, get_new_command,\n             enabled_by_default, side_effect,\n             priority, requires_output):\n    \"\"\"Initializes rule with given fields.\n\n    :type name: basestring\n    :type match: (Command) -> bool\n    :type get_new_command: (Command) -> (basestring | [basestring])\n    :type enabled_by_default: boolean\n    :type side_effect: (Command, basestring) -> None\n    :type priority: int\n    :type requires_output: bool\n\n    \"\"\"\n    self.name = name\n    self.match = match\n    self.get_new_command = get_new_command\n    self.enabled_by_default = enabled_by_default\n    self.side_effect = side_effect\n    self.priority = priority\n    self.requires_output = requires_output",
                "def __eq__(self, other):\n    if isinstance(other, Rule):\n        return (self.name, self.match, self.get_new_command,\n                self.enabled_by_default, self.side_effect,\n                self.priority, self.requires_output) \\\n               == (other.name, other.match, other.get_new_command,\n                   other.enabled_by_default, other.side_effect,\n                   other.priority, other.requires_output)\n    else:\n        return False",
                "def __repr__(self):\n    return 'Rule(name={}, match={}, get_new_command={}, ' \\\n           'enabled_by_default={}, side_effect={}, ' \\\n           'priority={}, requires_output)'.format(\n            self.name, self.match, self.get_new_command,\n            self.enabled_by_default, self.side_effect,\n            self.priority, self.requires_output)",
                "@classmethod\ndef from_path(cls, path):\n    \"\"\"Creates rule instance from path.\n\n    :type path: pathlib.Path\n    :rtype: Rule\n\n    \"\"\"\n    name = path.name[:-3]\n    with logs.debug_time(u'Importing rule: {};'.format(name)):\n        rule_module = load_source(name, str(path))\n        priority = getattr(rule_module, 'priority', DEFAULT_PRIORITY)\n    return cls(name, rule_module.match,\n               rule_module.get_new_command,\n               getattr(rule_module, 'enabled_by_default', True),\n               getattr(rule_module, 'side_effect', None),\n               settings.priority.get(name, priority),\n               getattr(rule_module, 'requires_output', True))",
                "@property\ndef is_enabled(self):\n    \"\"\"Returns `True` when rule enabled.\n\n    :rtype: bool\n\n    \"\"\"\n    if self.name in settings.exclude_rules:\n        return False\n    elif self.name in settings.rules:\n        return True\n    elif self.enabled_by_default and ALL_ENABLED in settings.rules:\n        return True\n    else:\n        return False",
                "def is_match(self, command):\n    \"\"\"Returns `True` if rule matches the command.\n\n    :type command: Command\n    :rtype: bool\n\n    \"\"\"\n    script_only = command.stdout is None and command.stderr is None\n\n    if script_only and self.requires_output:\n        return False\n\n    try:\n        with logs.debug_time(u'Trying rule: {};'.format(self.name)):\n            if compatibility_call(self.match, command):\n                return True\n    except Exception:\n        logs.rule_failed(self, sys.exc_info())",
                "def get_corrected_commands(self, command):\n    \"\"\"Returns generator with corrected commands.\n\n    :type command: Command\n    :rtype: Iterable[CorrectedCommand]\n\n    \"\"\"\n    new_commands = compatibility_call(self.get_new_command, command)\n    if not isinstance(new_commands, list):\n        new_commands = (new_commands,)\n    for n, new_command in enumerate(new_commands):\n        yield CorrectedCommand(script=new_command,\n                               side_effect=self.side_effect,\n                               priority=(n + 1) * self.priority)",
                "def __init__(self, script, side_effect, priority):\n    \"\"\"Initializes instance with given fields.\n\n    :type script: basestring\n    :type side_effect: (Command, basestring) -> None\n    :type priority: int\n\n    \"\"\"\n    self.script = script\n    self.side_effect = side_effect\n    self.priority = priority",
                "def __eq__(self, other):\n    \"\"\"Ignores `priority` field.\"\"\"\n    if isinstance(other, CorrectedCommand):\n        return (other.script, other.side_effect) == \\\n               (self.script, self.side_effect)\n    else:\n        return False",
                "def __hash__(self):\n    return (self.script, self.side_effect).__hash__()",
                "def __repr__(self):\n    return u'CorrectedCommand(script={}, side_effect={}, priority={})'.format(\n            self.script, self.side_effect, self.priority)",
                "def run(self, old_cmd):\n    \"\"\"Runs command from rule for passed command.\n\n    :type old_cmd: Command\n\n    \"\"\"\n    if self.side_effect:\n        compatibility_call(self.side_effect, old_cmd, self.script)\n    # This depends on correct setting of PYTHONIOENCODING by the alias:\n    logs.debug(u'PYTHONIOENCODING: {}'.format(\n        os.environ.get('PYTHONIOENCODING', '>-not-set-<')))\n    print(self.script)"
            ],
            "inscope_function_signatures": [
                "__init__(self, script, stdout, stderr)",
                "script_parts(self)",
                "__eq__(self, other)",
                "__repr__(self)",
                "update(self, **kwargs)",
                "_wait_output(popen)",
                "_prepare_script(raw_script)",
                "from_raw_script(cls, raw_script)",
                "__init__(self, name, match, get_new_command, enabled_by_default, side_effect, priority, requires_output)",
                "__eq__(self, other)",
                "__repr__(self)",
                "from_path(cls, path)",
                "is_enabled(self)",
                "is_match(self, command)",
                "get_corrected_commands(self, command)",
                "__init__(self, script, side_effect, priority)",
                "__eq__(self, other)",
                "__hash__(self)",
                "__repr__(self)",
                "run(self, old_cmd)"
            ],
            "variables_in_file": {
                "object": [
                    131,
                    245,
                    15
                ],
                "self.script": [
                    256,
                    34,
                    26,
                    264,
                    43,
                    282,
                    269,
                    273,
                    50,
                    58,
                    286
                ],
                "self": [
                    256,
                    257,
                    258,
                    281,
                    264,
                    269,
                    273,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    26,
                    27,
                    28,
                    154,
                    158,
                    159,
                    32,
                    160,
                    34,
                    282,
                    286,
                    37,
                    38,
                    39,
                    43,
                    171,
                    172,
                    173,
                    50,
                    58,
                    59,
                    60,
                    201,
                    203,
                    205,
                    219,
                    223,
                    224,
                    227,
                    236,
                    241,
                    242
                ],
                "script": [
                    128,
                    97,
                    98,
                    256,
                    109,
                    110,
                    116,
                    117,
                    125,
                    26,
                    93,
                    95
                ],
                "self.stdout": [
                    43,
                    50,
                    27,
                    59
                ],
                "stdout": [
                    122,
                    27,
                    125,
                    119
                ],
                "self.stderr": [
                    50,
                    43,
                    28,
                    60
                ],
                "stderr": [
                    120,
                    123,
                    28,
                    125
                ],
                "hasattr": [
                    32
                ],
                "self._script_parts": [
                    34,
                    38,
                    39
                ],
                "shell.split_command": [
                    34
                ],
                "shell": [
                    34,
                    98
                ],
                "Exception": [
                    226,
                    35
                ],
                "logs.debug": [
                    36,
                    122,
                    123,
                    284,
                    127
                ],
                "logs": [
                    223,
                    227,
                    36,
                    116,
                    184,
                    122,
                    123,
                    284,
                    127
                ],
                "format": [
                    36,
                    168,
                    272,
                    49,
                    116,
                    184,
                    122,
                    123,
                    284,
                    223
                ],
                "sys.exc_info": [
                    227,
                    37
                ],
                "sys": [
                    227,
                    37
                ],
                "property": [
                    194,
                    30
                ],
                "isinstance": [
                    237,
                    42,
                    157,
                    262
                ],
                "other": [
                    161,
                    162,
                    163,
                    262,
                    263,
                    42,
                    44,
                    157
                ],
                "Command": [
                    42,
                    61
                ],
                "other.script": [
                    44,
                    263
                ],
                "other.stdout": [
                    44
                ],
                "other.stderr": [
                    44
                ],
                "kwargs.setdefault": [
                    58,
                    59,
                    60
                ],
                "kwargs": [
                    58,
                    59,
                    60,
                    61
                ],
                "proc": [
                    81,
                    74,
                    76,
                    79
                ],
                "Process": [
                    74
                ],
                "popen.pid": [
                    74
                ],
                "popen": [
                    74
                ],
                "proc.wait": [
                    76
                ],
                "settings.wait_command": [
                    76
                ],
                "settings": [
                    201,
                    203,
                    76,
                    205,
                    114,
                    191
                ],
                "TimeoutExpired": [
                    78
                ],
                "child": [
                    80,
                    79
                ],
                "proc.children": [
                    79
                ],
                "child.kill": [
                    80
                ],
                "proc.kill": [
                    81
                ],
                "staticmethod": [
                    84,
                    63
                ],
                "six.PY2": [
                    92
                ],
                "six": [
                    92
                ],
                "join": [
                    93,
                    95
                ],
                "arg.decode": [
                    93
                ],
                "arg": [
                    93
                ],
                "raw_script": [
                    109,
                    93,
                    95
                ],
                "script.strip": [
                    97
                ],
                "shell.from_shell": [
                    98
                ],
                "cls._prepare_script": [
                    109
                ],
                "cls": [
                    128,
                    109,
                    118,
                    187,
                    125
                ],
                "EmptyCommand": [
                    111
                ],
                "env": [
                    113,
                    114,
                    116,
                    117
                ],
                "dict": [
                    113
                ],
                "os.environ": [
                    113,
                    285
                ],
                "os": [
                    113,
                    285
                ],
                "env.update": [
                    114
                ],
                "settings.env": [
                    114
                ],
                "logs.debug_time": [
                    184,
                    116,
                    223
                ],
                "result": [
                    120,
                    117,
                    118,
                    119
                ],
                "Popen": [
                    117
                ],
                "PIPE": [
                    117
                ],
                "cls._wait_output": [
                    118
                ],
                "decode": [
                    120,
                    119
                ],
                "result.stdout.read": [
                    119
                ],
                "result.stdout": [
                    119
                ],
                "result.stderr.read": [
                    120
                ],
                "result.stderr": [
                    120
                ],
                "classmethod": [
                    100,
                    175
                ],
                "self.name": [
                    201,
                    171,
                    203,
                    148,
                    158,
                    223
                ],
                "name": [
                    148,
                    183,
                    184,
                    185,
                    187,
                    191
                ],
                "self.match": [
                    224,
                    171,
                    149,
                    158
                ],
                "match": [
                    149
                ],
                "self.get_new_command": [
                    158,
                    236,
                    171,
                    150
                ],
                "get_new_command": [
                    150
                ],
                "self.enabled_by_default": [
                    159,
                    172,
                    205,
                    151
                ],
                "enabled_by_default": [
                    151
                ],
                "self.side_effect": [
                    257,
                    264,
                    172,
                    269,
                    241,
                    273,
                    152,
                    281,
                    282,
                    159
                ],
                "side_effect": [
                    152,
                    257
                ],
                "self.priority": [
                    160,
                    258,
                    173,
                    273,
                    242,
                    153
                ],
                "priority": [
                    153,
                    186,
                    258,
                    191
                ],
                "self.requires_output": [
                    160,
                    154,
                    219,
                    173
                ],
                "requires_output": [
                    154
                ],
                "Rule": [
                    157
                ],
                "other.name": [
                    161
                ],
                "other.match": [
                    161
                ],
                "other.get_new_command": [
                    161
                ],
                "other.enabled_by_default": [
                    162
                ],
                "other.side_effect": [
                    162,
                    263
                ],
                "other.priority": [
                    163
                ],
                "other.requires_output": [
                    163
                ],
                "path.name": [
                    183
                ],
                "path": [
                    185,
                    183
                ],
                "rule_module": [
                    192,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190
                ],
                "load_source": [
                    185
                ],
                "str": [
                    185
                ],
                "getattr": [
                    192,
                    186,
                    189,
                    190
                ],
                "DEFAULT_PRIORITY": [
                    186
                ],
                "rule_module.match": [
                    187
                ],
                "rule_module.get_new_command": [
                    188
                ],
                "settings.priority.get": [
                    191
                ],
                "settings.priority": [
                    191
                ],
                "settings.exclude_rules": [
                    201
                ],
                "settings.rules": [
                    203,
                    205
                ],
                "ALL_ENABLED": [
                    205
                ],
                "script_only": [
                    217,
                    219
                ],
                "command.stdout": [
                    217
                ],
                "command": [
                    224,
                    217,
                    236
                ],
                "command.stderr": [
                    217
                ],
                "compatibility_call": [
                    224,
                    282,
                    236
                ],
                "logs.rule_failed": [
                    227
                ],
                "new_commands": [
                    236,
                    237,
                    238,
                    239
                ],
                "list": [
                    237
                ],
                "n": [
                    242,
                    239
                ],
                "new_command": [
                    240,
                    239
                ],
                "enumerate": [
                    239
                ],
                "CorrectedCommand": [
                    240,
                    262
                ],
                "__hash__": [
                    269
                ],
                "old_cmd": [
                    282
                ],
                "os.environ.get": [
                    285
                ],
                "print": [
                    286
                ]
            },
            "filtered_variables_in_file": {
                "self.script": [
                    256,
                    34,
                    26,
                    264,
                    43,
                    282,
                    269,
                    273,
                    50,
                    58,
                    286
                ],
                "self": [
                    256,
                    257,
                    258,
                    281,
                    264,
                    269,
                    273,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    26,
                    27,
                    28,
                    154,
                    158,
                    159,
                    32,
                    160,
                    34,
                    282,
                    286,
                    37,
                    38,
                    39,
                    43,
                    171,
                    172,
                    173,
                    50,
                    58,
                    59,
                    60,
                    201,
                    203,
                    205,
                    219,
                    223,
                    224,
                    227,
                    236,
                    241,
                    242
                ],
                "script": [
                    128,
                    97,
                    98,
                    256,
                    109,
                    110,
                    116,
                    117,
                    125,
                    26,
                    93,
                    95
                ],
                "self.stdout": [
                    43,
                    50,
                    27,
                    59
                ],
                "stdout": [
                    122,
                    27,
                    125,
                    119
                ],
                "self.stderr": [
                    50,
                    43,
                    28,
                    60
                ],
                "stderr": [
                    120,
                    123,
                    28,
                    125
                ],
                "self._script_parts": [
                    34,
                    38,
                    39
                ],
                "shell.split_command": [
                    34
                ],
                "shell": [
                    34,
                    98
                ],
                "logs.debug": [
                    36,
                    122,
                    123,
                    284,
                    127
                ],
                "logs": [
                    223,
                    227,
                    36,
                    116,
                    184,
                    122,
                    123,
                    284,
                    127
                ],
                "sys.exc_info": [
                    227,
                    37
                ],
                "sys": [
                    227,
                    37
                ],
                "other": [
                    161,
                    162,
                    163,
                    262,
                    263,
                    42,
                    44,
                    157
                ],
                "Command": [
                    42,
                    61
                ],
                "other.script": [
                    44,
                    263
                ],
                "other.stdout": [
                    44
                ],
                "other.stderr": [
                    44
                ],
                "kwargs.setdefault": [
                    58,
                    59,
                    60
                ],
                "kwargs": [
                    58,
                    59,
                    60,
                    61
                ],
                "proc": [
                    81,
                    74,
                    76,
                    79
                ],
                "Process": [
                    74
                ],
                "popen.pid": [
                    74
                ],
                "popen": [
                    74
                ],
                "proc.wait": [
                    76
                ],
                "settings.wait_command": [
                    76
                ],
                "settings": [
                    201,
                    203,
                    76,
                    205,
                    114,
                    191
                ],
                "TimeoutExpired": [
                    78
                ],
                "child": [
                    80,
                    79
                ],
                "proc.children": [
                    79
                ],
                "child.kill": [
                    80
                ],
                "proc.kill": [
                    81
                ],
                "six.PY2": [
                    92
                ],
                "six": [
                    92
                ],
                "join": [
                    93,
                    95
                ],
                "arg.decode": [
                    93
                ],
                "arg": [
                    93
                ],
                "raw_script": [
                    109,
                    93,
                    95
                ],
                "script.strip": [
                    97
                ],
                "shell.from_shell": [
                    98
                ],
                "cls._prepare_script": [
                    109
                ],
                "cls": [
                    128,
                    109,
                    118,
                    187,
                    125
                ],
                "EmptyCommand": [
                    111
                ],
                "env": [
                    113,
                    114,
                    116,
                    117
                ],
                "os.environ": [
                    113,
                    285
                ],
                "os": [
                    113,
                    285
                ],
                "env.update": [
                    114
                ],
                "settings.env": [
                    114
                ],
                "logs.debug_time": [
                    184,
                    116,
                    223
                ],
                "result": [
                    120,
                    117,
                    118,
                    119
                ],
                "Popen": [
                    117
                ],
                "PIPE": [
                    117
                ],
                "cls._wait_output": [
                    118
                ],
                "decode": [
                    120,
                    119
                ],
                "result.stdout.read": [
                    119
                ],
                "result.stdout": [
                    119
                ],
                "result.stderr.read": [
                    120
                ],
                "result.stderr": [
                    120
                ],
                "self.name": [
                    201,
                    171,
                    203,
                    148,
                    158,
                    223
                ],
                "name": [
                    148,
                    183,
                    184,
                    185,
                    187,
                    191
                ],
                "self.match": [
                    224,
                    171,
                    149,
                    158
                ],
                "match": [
                    149
                ],
                "self.get_new_command": [
                    158,
                    236,
                    171,
                    150
                ],
                "get_new_command": [
                    150
                ],
                "self.enabled_by_default": [
                    159,
                    172,
                    205,
                    151
                ],
                "enabled_by_default": [
                    151
                ],
                "self.side_effect": [
                    257,
                    264,
                    172,
                    269,
                    241,
                    273,
                    152,
                    281,
                    282,
                    159
                ],
                "side_effect": [
                    152,
                    257
                ],
                "self.priority": [
                    160,
                    258,
                    173,
                    273,
                    242,
                    153
                ],
                "priority": [
                    153,
                    186,
                    258,
                    191
                ],
                "self.requires_output": [
                    160,
                    154,
                    219,
                    173
                ],
                "requires_output": [
                    154
                ],
                "Rule": [
                    157
                ],
                "other.name": [
                    161
                ],
                "other.match": [
                    161
                ],
                "other.get_new_command": [
                    161
                ],
                "other.enabled_by_default": [
                    162
                ],
                "other.side_effect": [
                    162,
                    263
                ],
                "other.priority": [
                    163
                ],
                "other.requires_output": [
                    163
                ],
                "path.name": [
                    183
                ],
                "path": [
                    185,
                    183
                ],
                "rule_module": [
                    192,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190
                ],
                "load_source": [
                    185
                ],
                "DEFAULT_PRIORITY": [
                    186
                ],
                "rule_module.match": [
                    187
                ],
                "rule_module.get_new_command": [
                    188
                ],
                "settings.priority.get": [
                    191
                ],
                "settings.priority": [
                    191
                ],
                "settings.exclude_rules": [
                    201
                ],
                "settings.rules": [
                    203,
                    205
                ],
                "ALL_ENABLED": [
                    205
                ],
                "script_only": [
                    217,
                    219
                ],
                "command.stdout": [
                    217
                ],
                "command": [
                    224,
                    217,
                    236
                ],
                "command.stderr": [
                    217
                ],
                "compatibility_call": [
                    224,
                    282,
                    236
                ],
                "logs.rule_failed": [
                    227
                ],
                "new_commands": [
                    236,
                    237,
                    238,
                    239
                ],
                "n": [
                    242,
                    239
                ],
                "new_command": [
                    240,
                    239
                ],
                "CorrectedCommand": [
                    240,
                    262
                ],
                "__hash__": [
                    269
                ],
                "old_cmd": [
                    282
                ],
                "os.environ.get": [
                    285
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/thefuck_16/tests/shells/test_bash.py",
                "test_function": "test_app_alias_variables_correctly_set",
                "test_function_code": "    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n        assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in alias\n        assert '$(TF_ALIAS=fuck PYTHONIOENCODING' in alias\n        assert 'PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES' in alias\n        assert 'ALIASES=$(alias) thefuck' in alias",
                "test_error": "assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in \"TF_ALIAS=fuck alias fuck='PYTHONIOENCODING=utf-8 TF_CMD=$(TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) &&  eval $TF_CMD && history -s $TF_CMD'\"",
                "full_test_error": "self = <tests.shells.test_bash.TestBash object at 0x10a202a50>\nshell = <thefuck.shells.bash.Bash object at 0x10a1bc6d0>\n\n    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n>       assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in alias\nE       assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in \"TF_ALIAS=fuck alias fuck='PYTHONIOENCODING=utf-8 TF_CMD=$(TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) &&  eval $TF_CMD && history -s $TF_CMD'\"\n\ntests/shells/test_bash.py:51: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/thefuck_16/tests/shells/test_zsh.py",
                "test_function": "test_app_alias_variables_correctly_set",
                "test_function_code": "    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n        assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in alias\n        assert '$(TF_ALIAS=fuck PYTHONIOENCODING' in alias\n        assert 'PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES' in alias\n        assert 'ALIASES=$(alias) thefuck' in alias",
                "test_error": "assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in \"alias fuck='TF_ALIAS=fuck PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) TF_CMD=$(thefuck $(fc -ln -1 | tail -n 1)) && eval $TF_CMD && print -s $TF_CMD'\"",
                "full_test_error": "self = <tests.shells.test_zsh.TestZsh object at 0x10a1aeed0>\nshell = <thefuck.shells.zsh.Zsh object at 0x10a1b18d0>\n\n    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n>       assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in alias\nE       assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in \"alias fuck='TF_ALIAS=fuck PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) TF_CMD=$(thefuck $(fc -ln -1 | tail -n 1)) && eval $TF_CMD && print -s $TF_CMD'\"\n\ntests/shells/test_zsh.py:50: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}