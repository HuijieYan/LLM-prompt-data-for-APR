{
    "thefuck:24": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_24/thefuck/types.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_first_two_unique",
                    "function_code": "def _get_first_two_unique(self):\n    \"\"\"Returns first two unique commands.\"\"\"\n    try:\n        first = next(self._commands)\n    except StopIteration:\n        return []\n\n    for command in self._commands:\n        if command.script != first.script or \\\n                        command.side_effect != first.side_effect:\n            return [first, command]\n    return [first]\n",
                    "decorators": [],
                    "docstring": "Returns first two unique commands.",
                    "start_line": 49,
                    "variables": {
                        "first": [
                            52,
                            57,
                            58,
                            59,
                            60
                        ],
                        "next": [
                            52
                        ],
                        "self._commands": [
                            56,
                            52
                        ],
                        "self": [
                            56,
                            52
                        ],
                        "StopIteration": [
                            53
                        ],
                        "command": [
                            56,
                            57,
                            58,
                            59
                        ],
                        "command.script": [
                            57
                        ],
                        "first.script": [
                            57
                        ],
                        "command.side_effect": [
                            58
                        ],
                        "first.side_effect": [
                            58
                        ]
                    },
                    "filtered_variables": {
                        "first": [
                            52,
                            57,
                            58,
                            59,
                            60
                        ],
                        "self._commands": [
                            56,
                            52
                        ],
                        "self": [
                            56,
                            52
                        ],
                        "command": [
                            56,
                            57,
                            58,
                            59
                        ],
                        "command.script": [
                            57
                        ],
                        "first.script": [
                            57
                        ],
                        "command.side_effect": [
                            58
                        ],
                        "first.side_effect": [
                            58
                        ]
                    },
                    "diff_line_number": 57,
                    "class_data": {
                        "signature": "class SortedCorrectedCommandsSequence(object)",
                        "docstring": "List-like collection/wrapper around generator, that:\n\n- immediately gives access to the first commands through [];\n- realises generator and sorts commands on first access to other\n  commands through [], or when len called.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, commands, settings):\n    self._settings = settings\n    self._commands = commands\n    self._cached = self._get_first_two_unique()\n    self._realised = False",
                            "def _get_first_two_unique(self):\n    \"\"\"Returns first two unique commands.\"\"\"\n    try:\n        first = next(self._commands)\n    except StopIteration:\n        return []\n    for command in self._commands:\n        if command.script != first.script or command.side_effect != first.side_effect:\n            return [first, command]\n    return [first]",
                            "def _remove_duplicates(self, corrected_commands):\n    \"\"\"Removes low-priority duplicates.\"\"\"\n    commands = {(command.script, command.side_effect): command for command in sorted(corrected_commands, key=lambda command: -command.priority) if command.script != self._cached[0].script or command.side_effect != self._cached[0].side_effect}\n    return commands.values()",
                            "def _realise(self):\n    \"\"\"Realises generator, removes duplicates and sorts commands.\"\"\"\n    commands = self._cached[1:] + list(self._commands)\n    commands = self._remove_duplicates(commands)\n    self._cached = [self._cached[0]] + sorted(commands, key=lambda corrected_command: corrected_command.priority)\n    self._realised = True\n    debug('SortedCommandsSequence was realised with: {}, after: {}'.format(self._cached, '\\n'.join(format_stack())), self._settings)",
                            "def __getitem__(self, item):\n    if item != 0 and (not self._realised):\n        self._realise()\n    return self._cached[item]",
                            "def __bool__(self):\n    return bool(self._cached)",
                            "def __len__(self):\n    if not self._realised:\n        self._realise()\n    return len(self._cached)",
                            "def __iter__(self):\n    if not self._realised:\n        self._realise()\n    return iter(self._cached)",
                            "@property\ndef is_multiple(self):\n    return len(self._cached) > 1"
                        ],
                        "constructor_variables": [
                            "_realised",
                            "_cached",
                            "_settings",
                            "_commands"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, commands, settings)",
                            "_get_first_two_unique(self)",
                            "_remove_duplicates(self, corrected_commands)",
                            "_realise(self)",
                            "__getitem__(self, item)",
                            "__bool__(self)",
                            "__len__(self)",
                            "__iter__(self)",
                            "is_multiple(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_remove_duplicates",
                    "function_code": "def _remove_duplicates(self, corrected_commands):\n    \"\"\"Removes low-priority duplicates.\"\"\"\n    commands = {(command.script, command.side_effect): command\n                for command in sorted(corrected_commands,\n                                      key=lambda command: -command.priority)\n                if command.script != self._cached[0].script\n                or command.side_effect != self._cached[0].side_effect}\n    return commands.values()\n",
                    "decorators": [],
                    "docstring": "Removes low-priority duplicates.",
                    "start_line": 62,
                    "variables": {
                        "commands": [
                            64,
                            69
                        ],
                        "command.script": [
                            64,
                            67
                        ],
                        "command": [
                            64,
                            65,
                            66,
                            67,
                            68
                        ],
                        "command.side_effect": [
                            64,
                            68
                        ],
                        "sorted": [
                            65
                        ],
                        "corrected_commands": [
                            65
                        ],
                        "command.priority": [
                            66
                        ],
                        "script": [
                            67
                        ],
                        "self._cached": [
                            67,
                            68
                        ],
                        "self": [
                            67,
                            68
                        ],
                        "side_effect": [
                            68
                        ],
                        "commands.values": [
                            69
                        ]
                    },
                    "filtered_variables": {
                        "commands": [
                            64,
                            69
                        ],
                        "command.script": [
                            64,
                            67
                        ],
                        "command": [
                            64,
                            65,
                            66,
                            67,
                            68
                        ],
                        "command.side_effect": [
                            64,
                            68
                        ],
                        "corrected_commands": [
                            65
                        ],
                        "command.priority": [
                            66
                        ],
                        "script": [
                            67
                        ],
                        "self._cached": [
                            67,
                            68
                        ],
                        "self": [
                            67,
                            68
                        ],
                        "side_effect": [
                            68
                        ],
                        "commands.values": [
                            69
                        ]
                    },
                    "diff_line_number": 64,
                    "class_data": {
                        "signature": "class SortedCorrectedCommandsSequence(object)",
                        "docstring": "List-like collection/wrapper around generator, that:\n\n- immediately gives access to the first commands through [];\n- realises generator and sorts commands on first access to other\n  commands through [], or when len called.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, commands, settings):\n    self._settings = settings\n    self._commands = commands\n    self._cached = self._get_first_two_unique()\n    self._realised = False",
                            "def _get_first_two_unique(self):\n    \"\"\"Returns first two unique commands.\"\"\"\n    try:\n        first = next(self._commands)\n    except StopIteration:\n        return []\n    for command in self._commands:\n        if command.script != first.script or command.side_effect != first.side_effect:\n            return [first, command]\n    return [first]",
                            "def _remove_duplicates(self, corrected_commands):\n    \"\"\"Removes low-priority duplicates.\"\"\"\n    commands = {(command.script, command.side_effect): command for command in sorted(corrected_commands, key=lambda command: -command.priority) if command.script != self._cached[0].script or command.side_effect != self._cached[0].side_effect}\n    return commands.values()",
                            "def _realise(self):\n    \"\"\"Realises generator, removes duplicates and sorts commands.\"\"\"\n    commands = self._cached[1:] + list(self._commands)\n    commands = self._remove_duplicates(commands)\n    self._cached = [self._cached[0]] + sorted(commands, key=lambda corrected_command: corrected_command.priority)\n    self._realised = True\n    debug('SortedCommandsSequence was realised with: {}, after: {}'.format(self._cached, '\\n'.join(format_stack())), self._settings)",
                            "def __getitem__(self, item):\n    if item != 0 and (not self._realised):\n        self._realise()\n    return self._cached[item]",
                            "def __bool__(self):\n    return bool(self._cached)",
                            "def __len__(self):\n    if not self._realised:\n        self._realise()\n    return len(self._cached)",
                            "def __iter__(self):\n    if not self._realised:\n        self._realise()\n    return iter(self._cached)",
                            "@property\ndef is_multiple(self):\n    return len(self._cached) > 1"
                        ],
                        "constructor_variables": [
                            "_realised",
                            "_cached",
                            "_settings",
                            "_commands"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, commands, settings)",
                            "_get_first_two_unique(self)",
                            "_remove_duplicates(self, corrected_commands)",
                            "_realise(self)",
                            "__getitem__(self, item)",
                            "__bool__(self)",
                            "__len__(self)",
                            "__iter__(self)",
                            "is_multiple(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "CorrectedCommand = namedtuple('CorrectedCommand', ('script', 'side_effect', 'priority'))\n\nRule = namedtuple('Rule', ('name', 'match', 'get_new_command',\n                           'enabled_by_default', 'side_effect',\n                           'priority', 'requires_output'))",
                    "start_line": 7,
                    "end_line": 13
                }
            ],
            "inscope_functions": [
                "def __contains__(self, item):\n    return super(RulesNamesList, self).__contains__(item.name)",
                "def __getattr__(self, item):\n    return self.get(item)",
                "def update(self, **kwargs):\n    \"\"\"\n    Returns new settings with values from `kwargs` for unset settings.\n    \"\"\"\n    conf = dict(kwargs)\n    conf.update(self)\n    return Settings(conf)",
                "def __init__(self, commands, settings):\n    self._settings = settings\n    self._commands = commands\n    self._cached = self._get_first_two_unique()\n    self._realised = False",
                "def _get_first_two_unique(self):\n    \"\"\"Returns first two unique commands.\"\"\"\n    try:\n        first = next(self._commands)\n    except StopIteration:\n        return []\n\n    for command in self._commands:\n        if command.script != first.script or \\\n                        command.side_effect != first.side_effect:\n            return [first, command]\n    return [first]",
                "def _remove_duplicates(self, corrected_commands):\n    \"\"\"Removes low-priority duplicates.\"\"\"\n    commands = {(command.script, command.side_effect): command\n                for command in sorted(corrected_commands,\n                                      key=lambda command: -command.priority)\n                if command.script != self._cached[0].script\n                or command.side_effect != self._cached[0].side_effect}\n    return commands.values()",
                "def _realise(self):\n    \"\"\"Realises generator, removes duplicates and sorts commands.\"\"\"\n    commands = self._cached[1:] + list(self._commands)\n    commands = self._remove_duplicates(commands)\n    self._cached = [self._cached[0]] + sorted(\n        commands, key=lambda corrected_command: corrected_command.priority)\n    self._realised = True\n    debug('SortedCommandsSequence was realised with: {}, after: {}'.format(\n        self._cached, '\\n'.join(format_stack())), self._settings)",
                "def __getitem__(self, item):\n    if item != 0 and not self._realised:\n        self._realise()\n    return self._cached[item]",
                "def __bool__(self):\n    return bool(self._cached)",
                "def __len__(self):\n    if not self._realised:\n        self._realise()\n    return len(self._cached)",
                "def __iter__(self):\n    if not self._realised:\n        self._realise()\n    return iter(self._cached)",
                "@property\ndef is_multiple(self):\n    return len(self._cached) > 1"
            ],
            "inscope_function_signatures": [
                "__contains__(self, item)",
                "__getattr__(self, item)",
                "update(self, **kwargs)",
                "__init__(self, commands, settings)",
                "_get_first_two_unique(self)",
                "_remove_duplicates(self, corrected_commands)",
                "_realise(self)",
                "__getitem__(self, item)",
                "__bool__(self)",
                "__len__(self)",
                "__iter__(self)",
                "is_multiple(self)"
            ],
            "variables_in_file": {
                "Command": [
                    5
                ],
                "namedtuple": [
                    9,
                    5,
                    7
                ],
                "CorrectedCommand": [
                    7
                ],
                "Rule": [
                    9
                ],
                "list": [
                    73,
                    14
                ],
                "__contains__": [
                    18
                ],
                "super": [
                    18
                ],
                "RulesNamesList": [
                    18
                ],
                "self": [
                    18,
                    23,
                    30,
                    44,
                    45,
                    46,
                    47,
                    52,
                    56,
                    67,
                    68,
                    73,
                    74,
                    75,
                    77,
                    79,
                    82,
                    83,
                    84,
                    87,
                    90,
                    91,
                    92,
                    95,
                    96,
                    97,
                    101
                ],
                "item.name": [
                    18
                ],
                "item": [
                    18,
                    84,
                    82,
                    23
                ],
                "dict": [
                    29,
                    21
                ],
                "self.get": [
                    23
                ],
                "conf": [
                    29,
                    30,
                    31
                ],
                "kwargs": [
                    29
                ],
                "conf.update": [
                    30
                ],
                "Settings": [
                    31
                ],
                "object": [
                    34
                ],
                "self._settings": [
                    44,
                    79
                ],
                "settings": [
                    44
                ],
                "self._commands": [
                    56,
                    73,
                    52,
                    45
                ],
                "commands": [
                    64,
                    69,
                    73,
                    74,
                    76,
                    45
                ],
                "self._cached": [
                    97,
                    67,
                    68,
                    101,
                    73,
                    75,
                    46,
                    79,
                    84,
                    87,
                    92
                ],
                "self._get_first_two_unique": [
                    46
                ],
                "self._realised": [
                    77,
                    47,
                    82,
                    90,
                    95
                ],
                "first": [
                    52,
                    57,
                    58,
                    59,
                    60
                ],
                "next": [
                    52
                ],
                "StopIteration": [
                    53
                ],
                "command": [
                    64,
                    65,
                    66,
                    67,
                    68,
                    56,
                    57,
                    58,
                    59
                ],
                "command.script": [
                    64,
                    57,
                    67
                ],
                "first.script": [
                    57
                ],
                "command.side_effect": [
                    64,
                    58,
                    68
                ],
                "first.side_effect": [
                    58
                ],
                "sorted": [
                    65,
                    75
                ],
                "corrected_commands": [
                    65
                ],
                "command.priority": [
                    66
                ],
                "script": [
                    67
                ],
                "side_effect": [
                    68
                ],
                "commands.values": [
                    69
                ],
                "self._remove_duplicates": [
                    74
                ],
                "corrected_command.priority": [
                    76
                ],
                "corrected_command": [
                    76
                ],
                "debug": [
                    78
                ],
                "format": [
                    78
                ],
                "join": [
                    79
                ],
                "format_stack": [
                    79
                ],
                "self._realise": [
                    96,
                    91,
                    83
                ],
                "bool": [
                    87
                ],
                "len": [
                    92,
                    101
                ],
                "iter": [
                    97
                ],
                "property": [
                    99
                ]
            },
            "filtered_variables_in_file": {
                "Command": [
                    5
                ],
                "namedtuple": [
                    9,
                    5,
                    7
                ],
                "CorrectedCommand": [
                    7
                ],
                "Rule": [
                    9
                ],
                "__contains__": [
                    18
                ],
                "RulesNamesList": [
                    18
                ],
                "self": [
                    18,
                    23,
                    30,
                    44,
                    45,
                    46,
                    47,
                    52,
                    56,
                    67,
                    68,
                    73,
                    74,
                    75,
                    77,
                    79,
                    82,
                    83,
                    84,
                    87,
                    90,
                    91,
                    92,
                    95,
                    96,
                    97,
                    101
                ],
                "item.name": [
                    18
                ],
                "item": [
                    18,
                    84,
                    82,
                    23
                ],
                "self.get": [
                    23
                ],
                "conf": [
                    29,
                    30,
                    31
                ],
                "kwargs": [
                    29
                ],
                "conf.update": [
                    30
                ],
                "Settings": [
                    31
                ],
                "self._settings": [
                    44,
                    79
                ],
                "settings": [
                    44
                ],
                "self._commands": [
                    56,
                    73,
                    52,
                    45
                ],
                "commands": [
                    64,
                    69,
                    73,
                    74,
                    76,
                    45
                ],
                "self._cached": [
                    97,
                    67,
                    68,
                    101,
                    73,
                    75,
                    46,
                    79,
                    84,
                    87,
                    92
                ],
                "self._get_first_two_unique": [
                    46
                ],
                "self._realised": [
                    77,
                    47,
                    82,
                    90,
                    95
                ],
                "first": [
                    52,
                    57,
                    58,
                    59,
                    60
                ],
                "command": [
                    64,
                    65,
                    66,
                    67,
                    68,
                    56,
                    57,
                    58,
                    59
                ],
                "command.script": [
                    64,
                    57,
                    67
                ],
                "first.script": [
                    57
                ],
                "command.side_effect": [
                    64,
                    58,
                    68
                ],
                "first.side_effect": [
                    58
                ],
                "corrected_commands": [
                    65
                ],
                "command.priority": [
                    66
                ],
                "script": [
                    67
                ],
                "side_effect": [
                    68
                ],
                "commands.values": [
                    69
                ],
                "self._remove_duplicates": [
                    74
                ],
                "corrected_command.priority": [
                    76
                ],
                "corrected_command": [
                    76
                ],
                "debug": [
                    78
                ],
                "join": [
                    79
                ],
                "format_stack": [
                    79
                ],
                "self._realise": [
                    96,
                    91,
                    83
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_24/tests/test_types.py",
                "test_function": "test_equality",
                "test_function_code": "    def test_equality(self):\n        assert CorrectedCommand('ls', None, 100) == \\\n               CorrectedCommand('ls', None, 200)\n        assert CorrectedCommand('ls', None, 100) != \\\n               CorrectedCommand('ls', lambda *_: _, 100)",
                "test_error": "AssertionError: assert CorrectedComm... priority=100) == CorrectedComma... priority=200)   At index 2 diff: 100 != 200   Full diff:   - CorrectedCommand(script='ls', side_effect=None, priority=100)   ?                                                          ^   + CorrectedCommand(script='ls', side_effect=None, priority=200)   ?                                                          ^",
                "full_test_error": "self = <tests.test_types.TestCorrectedCommand object at 0x10d1d8cd0>\n\n    def test_equality(self):\n>       assert CorrectedCommand('ls', None, 100) == \\\n               CorrectedCommand('ls', None, 200)\nE       AssertionError: assert CorrectedComm... priority=100) == CorrectedComma... priority=200)\nE         At index 2 diff: 100 != 200\nE         Full diff:\nE         - CorrectedCommand(script='ls', side_effect=None, priority=100)\nE         ?                                                          ^\nE         + CorrectedCommand(script='ls', side_effect=None, priority=200)\nE         ?                                                          ^\n\ntests/test_types.py:52: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_24/tests/test_types.py",
                "test_function": "test_hashable",
                "test_function_code": "    def test_hashable(self):\n        assert {CorrectedCommand('ls', None, 100),\n                CorrectedCommand('ls', None, 200)} == {CorrectedCommand('ls')}",
                "test_error": "AssertionError: assert {CorrectedCom...priority=200)} == {CorrectedComm...riority=1000)}   Extra items in the left set:   CorrectedCommand(script='ls', side_effect=None, priority=100)   CorrectedCommand(script='ls', side_effect=None, priority=200)   Extra items in the right set:   CorrectedCommand(script='ls', side_effect=None, priority=1000)   Full diff:   - {CorrectedCommand(script='ls', side_effect=None, priority=100),   ?                                                               ^   + {CorrectedCommand(script='ls', side_effect=None, priority=1000)}   ?                                                              + ^   -  CorrectedCommand(script='ls', side_effect=None, priority=200)}",
                "full_test_error": "self = <tests.test_types.TestCorrectedCommand object at 0x10d1dd310>\n\n    def test_hashable(self):\n>       assert {CorrectedCommand('ls', None, 100),\n                CorrectedCommand('ls', None, 200)} == {CorrectedCommand('ls')}\nE       AssertionError: assert {CorrectedCom...priority=200)} == {CorrectedComm...riority=1000)}\nE         Extra items in the left set:\nE         CorrectedCommand(script='ls', side_effect=None, priority=100)\nE         CorrectedCommand(script='ls', side_effect=None, priority=200)\nE         Extra items in the right set:\nE         CorrectedCommand(script='ls', side_effect=None, priority=1000)\nE         Full diff:\nE         - {CorrectedCommand(script='ls', side_effect=None, priority=100),\nE         ?                                                               ^\nE         + {CorrectedCommand(script='ls', side_effect=None, priority=1000)}\nE         ?                                                              + ^\nE         -  CorrectedCommand(script='ls', side_effect=None, priority=200)}\n\ntests/test_types.py:58: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}