{
    "1.1.1": "@utils.git_support\ndef get_new_command(command, settings):\n    return '{} --staged'.format(command.script)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_31/thefuck/rules/git_diff_staged.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize('command, new_command', [\n    (Command('git diff'), 'git diff --staged'),\n    (Command('git diff foo'), 'git diff --staged foo')])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command, None) == new_command"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_31/tests/rules/test_git_diff_staged.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert 'git diff foo --staged' == 'git diff --staged foo'\nE         - git diff foo --staged\nE         ?         ----\nE         + git diff --staged foo\nE         ?                  ++++"
        ]
    ],
    "2.1.2": [
        [
            "command = Command(script='git diff foo', stdout='', stderr='')\nnew_command = 'git diff --staged foo'\n\n    @pytest.mark.parametrize('command, new_command', [\n        (Command('git diff'), 'git diff --staged'),\n        (Command('git diff foo'), 'git diff --staged foo')])\n    def test_get_new_command(command, new_command):\n>       assert get_new_command(command, None) == new_command",
            "\ntests/rules/test_git_diff_staged.py:26: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}