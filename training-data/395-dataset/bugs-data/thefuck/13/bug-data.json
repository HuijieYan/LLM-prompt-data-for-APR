{
    "thefuck:13": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_13/thefuck/rules/git_branch_exists.py": {
            "buggy_functions": [
                {
                    "function_name": "match",
                    "function_code": "@git_support\ndef match(command):\n    return ('branch' in command.script\n            and \"fatal: A branch named '\" in command.stderr\n            and \" already exists.\" in command.stderr)\n",
                    "decorators": [
                        "git_support"
                    ],
                    "docstring": null,
                    "start_line": 7,
                    "end_line": 11,
                    "variables": {
                        "command.script": [
                            9
                        ],
                        "command": [
                            9,
                            10,
                            11
                        ],
                        "command.stderr": [
                            10,
                            11
                        ],
                        "git_support": [
                            7
                        ]
                    },
                    "filtered_variables": {
                        "command.script": [
                            9
                        ],
                        "command": [
                            9,
                            10,
                            11
                        ],
                        "command.stderr": [
                            10,
                            11
                        ],
                        "git_support": [
                            7
                        ]
                    },
                    "diff_line_number": 9,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {
                                "command.script": {
                                    "variable_value": "'git branch foo'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "command": {
                                    "variable_value": "Command(script=git branch foo, stdout=, stderr=fatal: A branch named 'foo' already exists.)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "\"fatal: A branch named 'foo' already exists.\"",
                                    "variable_type": "str",
                                    "variable_shape": "43"
                                },
                                "git_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "command.script": {
                                    "variable_value": "'git checkout bar'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "command": {
                                    "variable_value": "Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "\"fatal: A branch named 'bar' already exists.\"",
                                    "variable_type": "str",
                                    "variable_shape": "43"
                                },
                                "git_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {
                                "command.stderr": {
                                    "variable_value": "\"fatal: A branch named 'foo' already exists.\"",
                                    "variable_type": "str",
                                    "variable_shape": "43"
                                },
                                "command": {
                                    "variable_value": "Command(script=git branch foo, stdout=, stderr=fatal: A branch named 'foo' already exists.)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "git_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "command.stderr": {
                                    "variable_value": "\"fatal: A branch named 'bar' already exists.\"",
                                    "variable_type": "str",
                                    "variable_shape": "43"
                                },
                                "command": {
                                    "variable_value": "Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "git_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "get_new_command",
                    "function_code": "@git_support\n@eager\ndef get_new_command(command):\n    branch_name = re.findall(\n        r\"fatal: A branch named '([^']*)' already exists.\", command.stderr)[0]\n    new_command_templates = [['git branch -d {0}', 'git branch {0}'],\n                             ['git branch -D {0}', 'git branch {0}'],\n                             ['git checkout {0}']]\n    for new_command_template in new_command_templates:\n        yield shell.and_(*new_command_template).format(branch_name)\n",
                    "decorators": [
                        "git_support",
                        "eager"
                    ],
                    "docstring": null,
                    "start_line": 14,
                    "end_line": 23,
                    "variables": {
                        "branch_name": [
                            17,
                            23
                        ],
                        "re.findall": [
                            17
                        ],
                        "re": [
                            17
                        ],
                        "command.stderr": [
                            18
                        ],
                        "command": [
                            18
                        ],
                        "new_command_templates": [
                            19,
                            22
                        ],
                        "new_command_template": [
                            22,
                            23
                        ],
                        "format": [
                            23
                        ],
                        "shell.and_": [
                            23
                        ],
                        "shell": [
                            23
                        ],
                        "git_support": [
                            14
                        ],
                        "eager": [
                            15
                        ]
                    },
                    "filtered_variables": {
                        "branch_name": [
                            17,
                            23
                        ],
                        "re.findall": [
                            17
                        ],
                        "re": [
                            17
                        ],
                        "command.stderr": [
                            18
                        ],
                        "command": [
                            18
                        ],
                        "new_command_templates": [
                            19,
                            22
                        ],
                        "new_command_template": [
                            22,
                            23
                        ],
                        "shell.and_": [
                            23
                        ],
                        "shell": [
                            23
                        ],
                        "git_support": [
                            14
                        ],
                        "eager": [
                            15
                        ]
                    },
                    "diff_line_number": 19,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@git_support\ndef match(command):\n    return ('branch' in command.script\n            and \"fatal: A branch named '\" in command.stderr\n            and \" already exists.\" in command.stderr)",
                "@git_support\n@eager\ndef get_new_command(command):\n    branch_name = re.findall(\n        r\"fatal: A branch named '([^']*)' already exists.\", command.stderr)[0]\n    new_command_templates = [['git branch -d {0}', 'git branch {0}'],\n                             ['git branch -D {0}', 'git branch {0}'],\n                             ['git checkout {0}']]\n    for new_command_template in new_command_templates:\n        yield shell.and_(*new_command_template).format(branch_name)"
            ],
            "inscope_function_signatures": [
                "match(command)",
                "get_new_command(command)"
            ],
            "variables_in_file": {
                "command.script": [
                    9
                ],
                "command": [
                    18,
                    9,
                    10,
                    11
                ],
                "command.stderr": [
                    18,
                    10,
                    11
                ],
                "git_support": [
                    14,
                    7
                ],
                "branch_name": [
                    17,
                    23
                ],
                "re.findall": [
                    17
                ],
                "re": [
                    17
                ],
                "new_command_templates": [
                    19,
                    22
                ],
                "new_command_template": [
                    22,
                    23
                ],
                "format": [
                    23
                ],
                "shell.and_": [
                    23
                ],
                "shell": [
                    23
                ],
                "eager": [
                    15
                ]
            },
            "filtered_variables_in_file": {
                "command.script": [
                    9
                ],
                "command": [
                    18,
                    9,
                    10,
                    11
                ],
                "command.stderr": [
                    18,
                    10,
                    11
                ],
                "git_support": [
                    14,
                    7
                ],
                "branch_name": [
                    17,
                    23
                ],
                "re.findall": [
                    17
                ],
                "re": [
                    17
                ],
                "new_command_templates": [
                    19,
                    22
                ],
                "new_command_template": [
                    22,
                    23
                ],
                "shell.and_": [
                    23
                ],
                "shell": [
                    23
                ],
                "eager": [
                    15
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_13/tests/rules/test_git_branch_exists.py",
                "test_function": "test_match",
                "test_function_code": "@pytest.mark.parametrize('script, branch_name', [\n    ('git branch foo', 'foo'), ('git checkout bar', 'bar')])\ndef test_match(stderr, script, branch_name):\n    assert match(Command(script=script, stderr=stderr))",
                "test_error": "assert False  +  where False = match(Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.))  +    where Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.) = Command(script='git checkout bar', stderr=\"fatal: A branch named 'bar' already exists.\")",
                "full_test_error": "stderr = \"fatal: A branch named 'bar' already exists.\"\nscript = 'git checkout bar', branch_name = 'bar'\n\n    @pytest.mark.parametrize('script, branch_name', [\n        ('git branch foo', 'foo'), ('git checkout bar', 'bar')])\n    def test_match(stderr, script, branch_name):\n>       assert match(Command(script=script, stderr=stderr))\nE       assert False\nE        +  where False = match(Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.))\nE        +    where Command(script=git checkout bar, stdout=, stderr=fatal: A branch named 'bar' already exists.) = Command(script='git checkout bar', stderr=\"fatal: A branch named 'bar' already exists.\")\n\ntests/rules/test_git_branch_exists.py:23: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('script, branch_name', [('git branch foo', 'foo'), ('git checkout bar', 'bar')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_13/tests/rules/test_git_branch_exists.py",
                "test_function": "test_get_new_command",
                "test_function_code": "@pytest.mark.parametrize('script, branch_name, ', [\n    ('git branch foo', 'foo'), ('git checkout bar', 'bar')])\ndef test_get_new_command(stderr, new_command, script, branch_name):\n    assert get_new_command(Command(script=script, stderr=stderr)) == new_command",
                "test_error": "AssertionError: assert ['git branch ...checkout foo'] == ['git branch -...checkout foo']   At index 1 diff: 'git branch -D foo && git branch foo' != 'git branch -d foo && git checkout -b foo'   Right contains more items, first extra item: 'git branch -D foo && git checkout -b foo'   Full diff:   ['git branch -d foo && git branch foo',   +  'git branch -d foo && git checkout -b foo',   'git branch -D foo && git branch foo',   +  'git branch -D foo && git checkout -b foo',   'git checkout foo']",
                "full_test_error": "stderr = \"fatal: A branch named 'foo' already exists.\"\nnew_command = ['git branch -d foo && git branch foo', 'git branch -d foo && git checkout -b foo', 'git branch -D foo && git branch foo', 'git branch -D foo && git checkout -b foo', 'git checkout foo']\nscript = 'git branch foo', branch_name = 'foo'\n\n    @pytest.mark.parametrize('script, branch_name, ', [\n        ('git branch foo', 'foo'), ('git checkout bar', 'bar')])\n    def test_get_new_command(stderr, new_command, script, branch_name):\n>       assert get_new_command(Command(script=script, stderr=stderr)) == new_command\nE       AssertionError: assert ['git branch ...checkout foo'] == ['git branch -...checkout foo']\nE         At index 1 diff: 'git branch -D foo && git branch foo' != 'git branch -d foo && git checkout -b foo'\nE         Right contains more items, first extra item: 'git branch -D foo && git checkout -b foo'\nE         Full diff:\nE         ['git branch -d foo && git branch foo',\nE         +  'git branch -d foo && git checkout -b foo',\nE         'git branch -D foo && git branch foo',\nE         +  'git branch -D foo && git checkout -b foo',\nE         'git checkout foo']\n\ntests/rules/test_git_branch_exists.py:34: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('script, branch_name, ', [('git branch foo', 'foo'), ('git checkout bar', 'bar')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_13/tests/rules/test_git_branch_exists.py",
                "test_function": "test_get_new_command",
                "test_function_code": "@pytest.mark.parametrize('script, branch_name, ', [\n    ('git branch foo', 'foo'), ('git checkout bar', 'bar')])\ndef test_get_new_command(stderr, new_command, script, branch_name):\n    assert get_new_command(Command(script=script, stderr=stderr)) == new_command",
                "test_error": "AssertionError: assert ['git branch ...checkout bar'] == ['git branch -...checkout bar']   At index 1 diff: 'git branch -D bar && git branch bar' != 'git branch -d bar && git checkout -b bar'   Right contains more items, first extra item: 'git branch -D bar && git checkout -b bar'   Full diff:   ['git branch -d bar && git branch bar',   +  'git branch -d bar && git checkout -b bar',   'git branch -D bar && git branch bar',   +  'git branch -D bar && git checkout -b bar',   'git checkout bar']",
                "full_test_error": "stderr = \"fatal: A branch named 'bar' already exists.\"\nnew_command = ['git branch -d bar && git branch bar', 'git branch -d bar && git checkout -b bar', 'git branch -D bar && git branch bar', 'git branch -D bar && git checkout -b bar', 'git checkout bar']\nscript = 'git checkout bar', branch_name = 'bar'\n\n    @pytest.mark.parametrize('script, branch_name, ', [\n        ('git branch foo', 'foo'), ('git checkout bar', 'bar')])\n    def test_get_new_command(stderr, new_command, script, branch_name):\n>       assert get_new_command(Command(script=script, stderr=stderr)) == new_command\nE       AssertionError: assert ['git branch ...checkout bar'] == ['git branch -...checkout bar']\nE         At index 1 diff: 'git branch -D bar && git branch bar' != 'git branch -d bar && git checkout -b bar'\nE         Right contains more items, first extra item: 'git branch -D bar && git checkout -b bar'\nE         Full diff:\nE         ['git branch -d bar && git branch bar',\nE         +  'git branch -d bar && git checkout -b bar',\nE         'git branch -D bar && git branch bar',\nE         +  'git branch -D bar && git checkout -b bar',\nE         'git checkout bar']\n\ntests/rules/test_git_branch_exists.py:34: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('script, branch_name, ', [('git branch foo', 'foo'), ('git checkout bar', 'bar')])"
                ]
            }
        ]
    }
}