{
    "thefuck:12": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py": {
            "buggy_functions": [
                {
                    "function_name": "match",
                    "function_code": "@sudo_support\ndef match(command):\n    return (command.script_parts\n            and 'not found' in command.stderr\n            and bool(get_close_matches(command.script_parts[0],\n                                       get_all_executables())))\n",
                    "decorators": [
                        "sudo_support"
                    ],
                    "docstring": null,
                    "start_line": 7,
                    "end_line": 12,
                    "variables": {
                        "command.script_parts": [
                            9,
                            11
                        ],
                        "command": [
                            9,
                            10,
                            11
                        ],
                        "command.stderr": [
                            10
                        ],
                        "bool": [
                            11
                        ],
                        "get_close_matches": [
                            11
                        ],
                        "get_all_executables": [
                            12
                        ],
                        "sudo_support": [
                            7
                        ]
                    },
                    "filtered_variables": {
                        "command.script_parts": [
                            9,
                            11
                        ],
                        "command": [
                            9,
                            10,
                            11
                        ],
                        "command.stderr": [
                            10
                        ],
                        "get_close_matches": [
                            11
                        ],
                        "get_all_executables": [
                            12
                        ],
                        "sudo_support": [
                            7
                        ]
                    },
                    "diff_line_number": 9,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {
                                "which": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "command.script_parts": {
                                    "variable_value": "['qweqwe']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "command": {
                                    "variable_value": "Command(script=qweqwe, stdout=, stderr=qweqwe: not found)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "'qweqwe: not found'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "get_close_matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_all_executables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sudo_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "which": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "command.script_parts": {
                                    "variable_value": "['vom', 'file.py']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "command": {
                                    "variable_value": "Command(script=vom file.py, stdout=, stderr=some text)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "'some text'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "get_close_matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_all_executables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sudo_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "which": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "command.script_parts": {
                                    "variable_value": "['vim', 'file.py']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "command": {
                                    "variable_value": "Command(script=vim file.py, stdout=, stderr=vim: not found)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "'vim: not found'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "get_close_matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_all_executables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sudo_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "which": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "command.script_parts": {
                                    "variable_value": "['vom', 'file.py']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "command": {
                                    "variable_value": "Command(script=vom file.py, stdout=, stderr=vom: not found)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "'vom: not found'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "get_close_matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_all_executables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sudo_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "which": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "command.script_parts": {
                                    "variable_value": "['fucck']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "command": {
                                    "variable_value": "Command(script=fucck, stdout=, stderr=fucck: not found)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "'fucck: not found'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "get_close_matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_all_executables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sudo_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "which": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "command.script_parts": {
                                    "variable_value": "['got', 'commit']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "command": {
                                    "variable_value": "Command(script=got commit, stdout=, stderr=got: command not found)",
                                    "variable_type": "Command",
                                    "variable_shape": null
                                },
                                "command.stderr": {
                                    "variable_value": "'got: command not found'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "get_close_matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_all_executables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sudo_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from thefuck.utils import get_all_executables, \\\n    get_valid_history_without_current, get_closest\nfrom thefuck.specific.sudo import sudo_support",
                    "start_line": 2,
                    "end_line": 4
                }
            ],
            "inscope_functions": [
                "@sudo_support\ndef match(command):\n    return (command.script_parts\n            and 'not found' in command.stderr\n            and bool(get_close_matches(command.script_parts[0],\n                                       get_all_executables())))",
                "def _get_used_executables(command):\n    for script in get_valid_history_without_current(command):\n        yield script.split(' ')[0]",
                "@sudo_support\ndef get_new_command(command):\n    old_command = command.script_parts[0]\n\n    # One from history:\n    already_used = get_closest(\n        old_command, _get_used_executables(command),\n        fallback_to_first=False)\n    if already_used:\n        new_cmds = [already_used]\n    else:\n        new_cmds = []\n\n    # Other from all executables:\n    new_cmds += [cmd for cmd in get_close_matches(old_command,\n                                                  get_all_executables())\n                 if cmd not in new_cmds]\n\n    return [' '.join([new_command] + command.script_parts[1:])\n            for new_command in new_cmds]"
            ],
            "inscope_function_signatures": [
                "match(command)",
                "_get_used_executables(command)",
                "get_new_command(command)"
            ],
            "variables_in_file": {
                "command.script_parts": [
                    38,
                    9,
                    11,
                    22
                ],
                "command": [
                    38,
                    9,
                    10,
                    11,
                    16,
                    22,
                    26
                ],
                "command.stderr": [
                    10
                ],
                "bool": [
                    11
                ],
                "get_close_matches": [
                    34,
                    11
                ],
                "get_all_executables": [
                    35,
                    12
                ],
                "sudo_support": [
                    20,
                    7
                ],
                "script": [
                    16,
                    17
                ],
                "get_valid_history_without_current": [
                    16
                ],
                "script.split": [
                    17
                ],
                "old_command": [
                    26,
                    34,
                    22
                ],
                "already_used": [
                    25,
                    28,
                    29
                ],
                "get_closest": [
                    25
                ],
                "_get_used_executables": [
                    26
                ],
                "new_cmds": [
                    34,
                    36,
                    39,
                    29,
                    31
                ],
                "cmd": [
                    34,
                    36
                ],
                "join": [
                    38
                ],
                "new_command": [
                    38,
                    39
                ],
                "priority": [
                    42
                ]
            },
            "filtered_variables_in_file": {
                "command.script_parts": [
                    38,
                    9,
                    11,
                    22
                ],
                "command": [
                    38,
                    9,
                    10,
                    11,
                    16,
                    22,
                    26
                ],
                "command.stderr": [
                    10
                ],
                "get_close_matches": [
                    34,
                    11
                ],
                "get_all_executables": [
                    35,
                    12
                ],
                "sudo_support": [
                    20,
                    7
                ],
                "script": [
                    16,
                    17
                ],
                "get_valid_history_without_current": [
                    16
                ],
                "script.split": [
                    17
                ],
                "old_command": [
                    26,
                    34,
                    22
                ],
                "already_used": [
                    25,
                    28,
                    29
                ],
                "get_closest": [
                    25
                ],
                "_get_used_executables": [
                    26
                ],
                "new_cmds": [
                    34,
                    36,
                    39,
                    29,
                    31
                ],
                "cmd": [
                    34,
                    36
                ],
                "join": [
                    38
                ],
                "new_command": [
                    38,
                    39
                ],
                "priority": [
                    42
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/tests/rules/test_no_command.py",
                "test_function": "test_not_match",
                "test_function_code": "@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, stderr, which', [\n    ('qweqwe', 'qweqwe: not found', None),\n    ('vom file.py', 'some text', None),\n    ('vim file.py', 'vim: not found', 'vim')])\ndef test_not_match(mocker, script, stderr, which):\n    mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\n    assert not match(Command(script, stderr=stderr))",
                "test_error": "AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'",
                "full_test_error": "mocker = <pytest_mock.plugin.MockFixture object at 0x10b305250>\nscript = 'qweqwe', stderr = 'qweqwe: not found', which = None\n\n    @pytest.mark.usefixtures('no_memoize')\n    @pytest.mark.parametrize('script, stderr, which', [\n        ('qweqwe', 'qweqwe: not found', None),\n        ('vom file.py', 'some text', None),\n        ('vim file.py', 'vim: not found', 'vim')])\n    def test_not_match(mocker, script, stderr, which):\n>       mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\ntests/rules/test_no_command.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b50dad0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "traceback": "../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b50dad0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.usefixtures('no_memoize')",
                    "pytest.mark.parametrize('script, stderr, which', [('qweqwe', 'qweqwe: not found', None), ('vom file.py', 'some text', None), ('vim file.py', 'vim: not found', 'vim')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/tests/rules/test_no_command.py",
                "test_function": "test_not_match",
                "test_function_code": "@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, stderr, which', [\n    ('qweqwe', 'qweqwe: not found', None),\n    ('vom file.py', 'some text', None),\n    ('vim file.py', 'vim: not found', 'vim')])\ndef test_not_match(mocker, script, stderr, which):\n    mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\n    assert not match(Command(script, stderr=stderr))",
                "test_error": "AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'",
                "full_test_error": "mocker = <pytest_mock.plugin.MockFixture object at 0x10b59ab50>\nscript = 'vom file.py', stderr = 'some text', which = None\n\n    @pytest.mark.usefixtures('no_memoize')\n    @pytest.mark.parametrize('script, stderr, which', [\n        ('qweqwe', 'qweqwe: not found', None),\n        ('vom file.py', 'some text', None),\n        ('vim file.py', 'vim: not found', 'vim')])\n    def test_not_match(mocker, script, stderr, which):\n>       mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\ntests/rules/test_no_command.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b5198d0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "traceback": "../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b5198d0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.usefixtures('no_memoize')",
                    "pytest.mark.parametrize('script, stderr, which', [('qweqwe', 'qweqwe: not found', None), ('vom file.py', 'some text', None), ('vim file.py', 'vim: not found', 'vim')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/tests/rules/test_no_command.py",
                "test_function": "test_not_match",
                "test_function_code": "@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, stderr, which', [\n    ('qweqwe', 'qweqwe: not found', None),\n    ('vom file.py', 'some text', None),\n    ('vim file.py', 'vim: not found', 'vim')])\ndef test_not_match(mocker, script, stderr, which):\n    mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\n    assert not match(Command(script, stderr=stderr))",
                "test_error": "AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'",
                "full_test_error": "mocker = <pytest_mock.plugin.MockFixture object at 0x10b50dc50>\nscript = 'vim file.py', stderr = 'vim: not found', which = 'vim'\n\n    @pytest.mark.usefixtures('no_memoize')\n    @pytest.mark.parametrize('script, stderr, which', [\n        ('qweqwe', 'qweqwe: not found', None),\n        ('vom file.py', 'some text', None),\n        ('vim file.py', 'vim: not found', 'vim')])\n    def test_not_match(mocker, script, stderr, which):\n>       mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\ntests/rules/test_no_command.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b708550>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "traceback": "../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b708550>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.usefixtures('no_memoize')",
                    "pytest.mark.parametrize('script, stderr, which', [('qweqwe', 'qweqwe: not found', None), ('vom file.py', 'some text', None), ('vim file.py', 'vim: not found', 'vim')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/tests/rules/test_no_command.py",
                "test_function": "test_match",
                "test_function_code": "@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, stderr', [\n    ('vom file.py', 'vom: not found'),\n    ('fucck', 'fucck: not found'),\n    ('got commit', 'got: command not found')])\ndef test_match(mocker, script, stderr):\n    mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\n    assert match(Command(script, stderr=stderr))",
                "test_error": "AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'",
                "full_test_error": "mocker = <pytest_mock.plugin.MockFixture object at 0x10b5ef550>\nscript = 'vom file.py', stderr = 'vom: not found'\n\n    @pytest.mark.usefixtures('no_memoize')\n    @pytest.mark.parametrize('script, stderr', [\n        ('vom file.py', 'vom: not found'),\n        ('fucck', 'fucck: not found'),\n        ('got commit', 'got: command not found')])\n    def test_match(mocker, script, stderr):\n>       mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\ntests/rules/test_no_command.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b5f1fd0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "traceback": "../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b5f1fd0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.usefixtures('no_memoize')",
                    "pytest.mark.parametrize('script, stderr', [('vom file.py', 'vom: not found'), ('fucck', 'fucck: not found'), ('got commit', 'got: command not found')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/tests/rules/test_no_command.py",
                "test_function": "test_match",
                "test_function_code": "@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, stderr', [\n    ('vom file.py', 'vom: not found'),\n    ('fucck', 'fucck: not found'),\n    ('got commit', 'got: command not found')])\ndef test_match(mocker, script, stderr):\n    mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\n    assert match(Command(script, stderr=stderr))",
                "test_error": "AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'",
                "full_test_error": "mocker = <pytest_mock.plugin.MockFixture object at 0x10b5667d0>\nscript = 'fucck', stderr = 'fucck: not found'\n\n    @pytest.mark.usefixtures('no_memoize')\n    @pytest.mark.parametrize('script, stderr', [\n        ('vom file.py', 'vom: not found'),\n        ('fucck', 'fucck: not found'),\n        ('got commit', 'got: command not found')])\n    def test_match(mocker, script, stderr):\n>       mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\ntests/rules/test_no_command.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b542e90>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "traceback": "../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b542e90>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.usefixtures('no_memoize')",
                    "pytest.mark.parametrize('script, stderr', [('vom file.py', 'vom: not found'), ('fucck', 'fucck: not found'), ('got commit', 'got: command not found')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/tests/rules/test_no_command.py",
                "test_function": "test_match",
                "test_function_code": "@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, stderr', [\n    ('vom file.py', 'vom: not found'),\n    ('fucck', 'fucck: not found'),\n    ('got commit', 'got: command not found')])\ndef test_match(mocker, script, stderr):\n    mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\n    assert match(Command(script, stderr=stderr))",
                "test_error": "AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'",
                "full_test_error": "mocker = <pytest_mock.plugin.MockFixture object at 0x10b5662d0>\nscript = 'got commit', stderr = 'got: command not found'\n\n    @pytest.mark.usefixtures('no_memoize')\n    @pytest.mark.parametrize('script, stderr', [\n        ('vom file.py', 'vom: not found'),\n        ('fucck', 'fucck: not found'),\n        ('got commit', 'got: command not found')])\n    def test_match(mocker, script, stderr):\n>       mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\ntests/rules/test_no_command.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b51e510>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "traceback": "../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:199: in __call__\n    return self._start_patch(self.mock_module.patch, *args, **kwargs)\n../../envs/thefuck_12/lib/python3.7/site-packages/pytest_mock/plugin.py:163: in _start_patch\n    mocked = p.start()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1442: in start\n    result = self.__enter__()\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1307: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x10b51e510>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'thefuck.rules.no_command' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_12/thefuck/rules/no_command.py'> does not have the attribute 'which'\n\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1281: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.usefixtures('no_memoize')",
                    "pytest.mark.parametrize('script, stderr', [('vom file.py', 'vom: not found'), ('fucck', 'fucck: not found'), ('got commit', 'got: command not found')])"
                ]
            }
        ]
    }
}