{
    "1.1.1": "def get_new_command(command):\n    broken_cmd = re.findall(r'ERROR: unknown command \\\"([a-z]+)\\\"',\n                            command.output)[0]\n    new_cmd = re.findall(r'maybe you meant \\\"([a-z]+)\\\"', command.output)[0]\n\n    return replace_argument(command.script, broken_cmd, new_cmd)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_1/thefuck/rules/pip_unknown_command.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize('script, broken, suggested, new_cmd', [\n    ('pip un+install thefuck', 'un+install', 'uninstall', 'pip uninstall thefuck'),\n    ('pip instatl', 'instatl', 'install', 'pip install')])\ndef test_get_new_command(script, new_cmd, pip_unknown_cmd):\n    assert get_new_command(Command(script,\n                                   pip_unknown_cmd)) == new_cmd"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/thefuck_1/tests/rules/test_pip_unknown_command.py"
    ],
    "2.1.1": [
        [
            "E       IndexError: list index out of range"
        ]
    ],
    "2.1.2": [
        [
            "script = 'pip un+install thefuck', new_cmd = 'pip uninstall thefuck'\npip_unknown_cmd = 'ERROR: unknown command \"un+install\" - maybe you meant \"uninstall\"'\n\n    @pytest.mark.parametrize('script, broken, suggested, new_cmd', [\n        ('pip un+install thefuck', 'un+install', 'uninstall', 'pip uninstall thefuck'),\n        ('pip instatl', 'instatl', 'install', 'pip install')])\n    def test_get_new_command(script, new_cmd, pip_unknown_cmd):\n>       assert get_new_command(Command(script,\n                                       pip_unknown_cmd)) == new_cmd\n\ntests/rules/test_pip_unknown_command.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncommand = Command(script=pip un+install thefuck, output=ERROR: unknown command \"un+install\" - maybe you meant \"uninstall\")\n\n    def get_new_command(command):\n        broken_cmd = re.findall(r'ERROR: unknown command \\\"([a-z]+)\\\"',\n>                               command.output)[0]",
            "\nthefuck/rules/pip_unknown_command.py:16: IndexError"
        ]
    ],
    "2.1.3": [
        [
            {
                "command.output": "'ERROR: unknown command \"instatl\" - maybe you meant \"install\"'",
                "command": "Command(script=pip instatl, output=ERROR: unknown command \"instatl\" - maybe you meant \"install\")",
                "command.script": "'pip instatl'"
            },
            {
                "broken_cmd": "'instatl'",
                "new_cmd": "'install'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "command.output": "str",
                "command": "Command",
                "command.script": "str"
            },
            {
                "broken_cmd": "str",
                "new_cmd": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "command.output": "'ERROR: unknown command \"un+install\" - maybe you meant \"uninstall\"'",
                "command": "Command(script=pip un+install thefuck, output=ERROR: unknown command \"un+install\" - maybe you meant \"uninstall\")",
                "command.script": "'pip un+install thefuck'"
            },
            {
                "broken_cmd": "'un+install'",
                "new_cmd": "'uninstall'"
            }
        ],
        [
            {
                "command.output": "'ERROR: unknown command \"instatl\" - maybe you meant \"install\"'",
                "command": "Command(script=pip instatl, output=ERROR: unknown command \"instatl\" - maybe you meant \"install\")",
                "command.script": "'pip instatl'"
            },
            {
                "broken_cmd": "'instatl'",
                "new_cmd": "'install'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "command.output": "str",
                "command": "Command",
                "command.script": "str"
            },
            {
                "broken_cmd": "str",
                "new_cmd": "str"
            }
        ],
        [
            {
                "command.output": "str",
                "command": "Command",
                "command.script": "str"
            },
            {
                "broken_cmd": "str",
                "new_cmd": "str"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}