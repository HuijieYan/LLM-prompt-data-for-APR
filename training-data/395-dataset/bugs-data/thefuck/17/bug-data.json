{
    "thefuck:17": {
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_17/thefuck/shells/bash.py": {
            "buggy_functions": [
                {
                    "function_name": "app_alias",
                    "function_code": "def app_alias(self, fuck):\n    alias = \"TF_ALIAS={0}\" \\\n            \" alias {0}='PYTHONIOENCODING=utf-8\" \\\n            \" TF_CMD=$(thefuck $(fc -ln -1)) && \" \\\n            \" eval $TF_CMD\".format(fuck)\n\n    if settings.alter_history:\n        return alias + \" && history -s $TF_CMD'\"\n    else:\n        return alias + \"'\"\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 9,
                    "end_line": 18,
                    "variables": {
                        "alias": [
                            16,
                            10,
                            18
                        ],
                        "format": [
                            10
                        ],
                        "fuck": [
                            13
                        ],
                        "settings.alter_history": [
                            15
                        ],
                        "settings": [
                            15
                        ]
                    },
                    "filtered_variables": {
                        "alias": [
                            16,
                            10,
                            18
                        ],
                        "fuck": [
                            13
                        ],
                        "settings.alter_history": [
                            15
                        ],
                        "settings": [
                            15
                        ]
                    },
                    "diff_line_number": 12,
                    "class_data": {
                        "signature": "class Bash(Generic)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def app_alias(self, fuck):\n    alias = \"TF_ALIAS={0} alias {0}='PYTHONIOENCODING=utf-8 TF_CMD=$(thefuck $(fc -ln -1)) &&  eval $TF_CMD\".format(fuck)\n    if settings.alter_history:\n        return alias + \" && history -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                            "def _parse_alias(self, alias):\n    name, value = alias.replace('alias ', '', 1).split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return (name, value)",
                            "@memoize\n@cache('.bashrc', '.bash_profile')\ndef get_aliases(self):\n    proc = Popen(['bash', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    return dict((self._parse_alias(alias) for alias in proc.stdout.read().decode('utf-8').split('\\n') if alias and '=' in alias))",
                            "def _get_history_file_name(self):\n    return os.environ.get('HISTFILE', os.path.expanduser('~/.bash_history'))",
                            "def _get_history_line(self, command_script):\n    return u'{}\\n'.format(command_script)",
                            "def how_to_configure(self):\n    if os.path.join(os.path.expanduser('~'), '.bashrc'):\n        config = '~/.bashrc'\n    elif os.path.join(os.path.expanduser('~'), '.bash_profile'):\n        config = '~/.bashrc'\n    else:\n        config = 'bash config'\n    return ('eval $(thefuck --alias)', config)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "app_alias(self, fuck)",
                            "_parse_alias(self, alias)",
                            "get_aliases(self)",
                            "_get_history_file_name(self)",
                            "_get_history_line(self, command_script)",
                            "how_to_configure(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "get_aliases",
                    "function_code": "@memoize\n@cache('.bashrc', '.bash_profile')\ndef get_aliases(self):\n    proc = Popen(['bash', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    return dict(\n            self._parse_alias(alias)\n            for alias in proc.stdout.read().decode('utf-8').split('\\n')\n            if alias and '=' in alias)\n",
                    "decorators": [
                        "memoize",
                        "cache('.bashrc', '.bash_profile')"
                    ],
                    "docstring": null,
                    "start_line": 26,
                    "end_line": 33,
                    "variables": {
                        "proc": [
                            32,
                            29
                        ],
                        "Popen": [
                            29
                        ],
                        "PIPE": [
                            29
                        ],
                        "DEVNULL": [
                            29
                        ],
                        "dict": [
                            30
                        ],
                        "self._parse_alias": [
                            31
                        ],
                        "self": [
                            31
                        ],
                        "alias": [
                            32,
                            33,
                            31
                        ],
                        "split": [
                            32
                        ],
                        "decode": [
                            32
                        ],
                        "proc.stdout.read": [
                            32
                        ],
                        "proc.stdout": [
                            32
                        ],
                        "memoize": [
                            26
                        ],
                        "cache": [
                            27
                        ]
                    },
                    "filtered_variables": {
                        "proc": [
                            32,
                            29
                        ],
                        "Popen": [
                            29
                        ],
                        "PIPE": [
                            29
                        ],
                        "DEVNULL": [
                            29
                        ],
                        "self._parse_alias": [
                            31
                        ],
                        "self": [
                            31
                        ],
                        "alias": [
                            32,
                            33,
                            31
                        ],
                        "split": [
                            32
                        ],
                        "decode": [
                            32
                        ],
                        "proc.stdout.read": [
                            32
                        ],
                        "proc.stdout": [
                            32
                        ],
                        "memoize": [
                            26
                        ],
                        "cache": [
                            27
                        ]
                    },
                    "diff_line_number": 29,
                    "class_data": {
                        "signature": "class Bash(Generic)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def app_alias(self, fuck):\n    alias = \"TF_ALIAS={0} alias {0}='PYTHONIOENCODING=utf-8 TF_CMD=$(thefuck $(fc -ln -1)) &&  eval $TF_CMD\".format(fuck)\n    if settings.alter_history:\n        return alias + \" && history -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                            "def _parse_alias(self, alias):\n    name, value = alias.replace('alias ', '', 1).split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return (name, value)",
                            "@memoize\n@cache('.bashrc', '.bash_profile')\ndef get_aliases(self):\n    proc = Popen(['bash', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    return dict((self._parse_alias(alias) for alias in proc.stdout.read().decode('utf-8').split('\\n') if alias and '=' in alias))",
                            "def _get_history_file_name(self):\n    return os.environ.get('HISTFILE', os.path.expanduser('~/.bash_history'))",
                            "def _get_history_line(self, command_script):\n    return u'{}\\n'.format(command_script)",
                            "def how_to_configure(self):\n    if os.path.join(os.path.expanduser('~'), '.bashrc'):\n        config = '~/.bashrc'\n    elif os.path.join(os.path.expanduser('~'), '.bash_profile'):\n        config = '~/.bashrc'\n    else:\n        config = 'bash config'\n    return ('eval $(thefuck --alias)', config)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "app_alias(self, fuck)",
                            "_parse_alias(self, alias)",
                            "get_aliases(self)",
                            "_get_history_file_name(self)",
                            "_get_history_line(self, command_script)",
                            "how_to_configure(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c705e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c705e10>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "proc": {
                                    "variable_value": "<subprocess.Popen object at 0x10c70c5d0>",
                                    "variable_type": "Popen",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c705e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c705e10>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": "<_io.BufferedReader name=10>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c70c4d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c70c4d0>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "proc": {
                                    "variable_value": "<subprocess.Popen object at 0x10c71fe10>",
                                    "variable_type": "Popen",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c70c4d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c70c4d0>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": "<_io.BufferedReader name=10>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c897e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c897e90>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "proc": {
                                    "variable_value": "<subprocess.Popen object at 0x10c89b590>",
                                    "variable_type": "Popen",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c897e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c897e90>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": "<_io.BufferedReader name=10>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c70f210>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c70f210>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "proc": {
                                    "variable_value": "<subprocess.Popen object at 0x10c899d90>",
                                    "variable_type": "Popen",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c70f210>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c70f210>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": "<_io.BufferedReader name=10>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c89e4d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c89e4d0>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "proc": {
                                    "variable_value": "<subprocess.Popen object at 0x10c8a2450>",
                                    "variable_type": "Popen",
                                    "variable_shape": null
                                },
                                "Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PIPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEVNULL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x10c89e4d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x10c89e4d0>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.stdout.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "proc.stdout": {
                                    "variable_value": "<_io.BufferedReader name=10>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "raw_aliases": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.environ.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.environ": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._parse_alias": {
                                    "variable_value": "<bound method Bash._parse_alias of <thefuck.shells.bash.Bash object at 0x109def610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<thefuck.shells.bash.Bash object at 0x109def610>",
                                    "variable_type": "Bash",
                                    "variable_shape": null
                                },
                                "alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "memoize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from subprocess import Popen, PIPE\nimport os\nfrom ..conf import settings\nfrom ..utils import DEVNULL, memoize, cache\nfrom .generic import Generic",
                    "start_line": 1,
                    "end_line": 5
                },
                {
                    "snippet_code": "@cache('.bashrc', '.bash_profile')",
                    "start_line": 27,
                    "end_line": 27
                }
            ],
            "inscope_functions": [
                "def app_alias(self, fuck):\n    alias = \"TF_ALIAS={0}\" \\\n            \" alias {0}='PYTHONIOENCODING=utf-8\" \\\n            \" TF_CMD=$(thefuck $(fc -ln -1)) && \" \\\n            \" eval $TF_CMD\".format(fuck)\n\n    if settings.alter_history:\n        return alias + \" && history -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                "def _parse_alias(self, alias):\n    name, value = alias.replace('alias ', '', 1).split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return name, value",
                "@memoize\n@cache('.bashrc', '.bash_profile')\ndef get_aliases(self):\n    proc = Popen(['bash', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    return dict(\n            self._parse_alias(alias)\n            for alias in proc.stdout.read().decode('utf-8').split('\\n')\n            if alias and '=' in alias)",
                "def _get_history_file_name(self):\n    return os.environ.get(\"HISTFILE\",\n                          os.path.expanduser('~/.bash_history'))",
                "def _get_history_line(self, command_script):\n    return u'{}\\n'.format(command_script)",
                "def how_to_configure(self):\n    if os.path.join(os.path.expanduser('~'), '.bashrc'):\n        config = '~/.bashrc'\n    elif os.path.join(os.path.expanduser('~'), '.bash_profile'):\n        config = '~/.bashrc'\n    else:\n        config = 'bash config'\n    return 'eval $(thefuck --alias)', config"
            ],
            "inscope_function_signatures": [
                "app_alias(self, fuck)",
                "_parse_alias(self, alias)",
                "get_aliases(self)",
                "_get_history_file_name(self)",
                "_get_history_line(self, command_script)",
                "how_to_configure(self)"
            ],
            "variables_in_file": {
                "Generic": [
                    8
                ],
                "alias": [
                    32,
                    33,
                    10,
                    16,
                    18,
                    21,
                    31
                ],
                "format": [
                    40,
                    10
                ],
                "fuck": [
                    13
                ],
                "settings.alter_history": [
                    15
                ],
                "settings": [
                    15
                ],
                "name": [
                    24,
                    21
                ],
                "value": [
                    24,
                    21,
                    22,
                    23
                ],
                "split": [
                    32,
                    21
                ],
                "alias.replace": [
                    21
                ],
                "proc": [
                    32,
                    29
                ],
                "Popen": [
                    29
                ],
                "PIPE": [
                    29
                ],
                "DEVNULL": [
                    29
                ],
                "dict": [
                    30
                ],
                "self._parse_alias": [
                    31
                ],
                "self": [
                    31
                ],
                "decode": [
                    32
                ],
                "proc.stdout.read": [
                    32
                ],
                "proc.stdout": [
                    32
                ],
                "memoize": [
                    26
                ],
                "cache": [
                    27
                ],
                "os.environ.get": [
                    36
                ],
                "os.environ": [
                    36
                ],
                "os": [
                    45,
                    43,
                    36,
                    37
                ],
                "os.path.expanduser": [
                    45,
                    43,
                    37
                ],
                "os.path": [
                    45,
                    43,
                    37
                ],
                "command_script": [
                    40
                ],
                "os.path.join": [
                    43,
                    45
                ],
                "config": [
                    48,
                    49,
                    44,
                    46
                ]
            },
            "filtered_variables_in_file": {
                "Generic": [
                    8
                ],
                "alias": [
                    32,
                    33,
                    10,
                    16,
                    18,
                    21,
                    31
                ],
                "fuck": [
                    13
                ],
                "settings.alter_history": [
                    15
                ],
                "settings": [
                    15
                ],
                "name": [
                    24,
                    21
                ],
                "value": [
                    24,
                    21,
                    22,
                    23
                ],
                "split": [
                    32,
                    21
                ],
                "alias.replace": [
                    21
                ],
                "proc": [
                    32,
                    29
                ],
                "Popen": [
                    29
                ],
                "PIPE": [
                    29
                ],
                "DEVNULL": [
                    29
                ],
                "self._parse_alias": [
                    31
                ],
                "self": [
                    31
                ],
                "decode": [
                    32
                ],
                "proc.stdout.read": [
                    32
                ],
                "proc.stdout": [
                    32
                ],
                "memoize": [
                    26
                ],
                "cache": [
                    27
                ],
                "os.environ.get": [
                    36
                ],
                "os.environ": [
                    36
                ],
                "os": [
                    45,
                    43,
                    36,
                    37
                ],
                "os.path.expanduser": [
                    45,
                    43,
                    37
                ],
                "os.path": [
                    45,
                    43,
                    37
                ],
                "command_script": [
                    40
                ],
                "os.path.join": [
                    43,
                    45
                ],
                "config": [
                    48,
                    49,
                    44,
                    46
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_17/thefuck/shells/zsh.py": {
            "buggy_functions": [
                {
                    "function_name": "get_aliases",
                    "function_code": "@memoize\ndef get_aliases(self):\n    raw_aliases = os.environ['TF_SHELL_ALIASES'].split('\\n')\n    return dict(self._parse_alias(alias)\n                for alias in raw_aliases if alias and '=' in alias)\n",
                    "decorators": [
                        "memoize"
                    ],
                    "docstring": null,
                    "start_line": 27,
                    "end_line": 31,
                    "variables": {
                        "raw_aliases": [
                            29,
                            31
                        ],
                        "split": [
                            29
                        ],
                        "os.environ": [
                            29
                        ],
                        "os": [
                            29
                        ],
                        "dict": [
                            30
                        ],
                        "self._parse_alias": [
                            30
                        ],
                        "self": [
                            30
                        ],
                        "alias": [
                            30,
                            31
                        ],
                        "memoize": [
                            27
                        ]
                    },
                    "filtered_variables": {
                        "raw_aliases": [
                            29,
                            31
                        ],
                        "split": [
                            29
                        ],
                        "os.environ": [
                            29
                        ],
                        "os": [
                            29
                        ],
                        "self._parse_alias": [
                            30
                        ],
                        "self": [
                            30
                        ],
                        "alias": [
                            30,
                            31
                        ],
                        "memoize": [
                            27
                        ]
                    },
                    "diff_line_number": 29,
                    "class_data": {
                        "signature": "class Zsh(Generic)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def app_alias(self, alias_name):\n    alias = \"alias {0}='TF_ALIAS={0} PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) TF_CMD=$(thefuck $(fc -ln -1 | tail -n 1)) && eval $TF_CMD\".format(alias_name)\n    if settings.alter_history:\n        return alias + \" && print -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                            "def _parse_alias(self, alias):\n    name, value = alias.split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return (name, value)",
                            "@memoize\ndef get_aliases(self):\n    raw_aliases = os.environ['TF_SHELL_ALIASES'].split('\\n')\n    return dict((self._parse_alias(alias) for alias in raw_aliases if alias and '=' in alias))",
                            "def _get_history_file_name(self):\n    return os.environ.get('HISTFILE', os.path.expanduser('~/.zsh_history'))",
                            "def _get_history_line(self, command_script):\n    return u': {}:0;{}\\n'.format(int(time()), command_script)",
                            "def _script_from_history(self, line):\n    if ';' in line:\n        return line.split(';', 1)[1]\n    else:\n        return ''",
                            "def how_to_configure(self):\n    return ('eval $(thefuck --alias)', '~/.zshrc')"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "app_alias(self, alias_name)",
                            "_parse_alias(self, alias)",
                            "get_aliases(self)",
                            "_get_history_file_name(self)",
                            "_get_history_line(self, command_script)",
                            "_script_from_history(self, line)",
                            "how_to_configure(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def app_alias(self, alias_name):\n    alias = \"alias {0}='TF_ALIAS={0}\" \\\n            \" PYTHONIOENCODING=utf-8\" \\\n            ' TF_SHELL_ALIASES=$(alias)' \\\n            \" TF_CMD=$(thefuck $(fc -ln -1 | tail -n 1)) &&\" \\\n            \" eval $TF_CMD\".format(alias_name)\n\n    if settings.alter_history:\n        return alias + \" && print -s $TF_CMD'\"\n    else:\n        return alias + \"'\"",
                "def _parse_alias(self, alias):\n    name, value = alias.split('=', 1)\n    if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n        value = value[1:-1]\n    return name, value",
                "@memoize\ndef get_aliases(self):\n    raw_aliases = os.environ['TF_SHELL_ALIASES'].split('\\n')\n    return dict(self._parse_alias(alias)\n                for alias in raw_aliases if alias and '=' in alias)",
                "def _get_history_file_name(self):\n    return os.environ.get(\"HISTFILE\",\n                          os.path.expanduser('~/.zsh_history'))",
                "def _get_history_line(self, command_script):\n    return u': {}:0;{}\\n'.format(int(time()), command_script)",
                "def _script_from_history(self, line):\n    if ';' in line:\n        return line.split(';', 1)[1]\n    else:\n        return ''",
                "def how_to_configure(self):\n    return 'eval $(thefuck --alias)', '~/.zshrc'"
            ],
            "inscope_function_signatures": [
                "app_alias(self, alias_name)",
                "_parse_alias(self, alias)",
                "get_aliases(self)",
                "_get_history_file_name(self)",
                "_get_history_line(self, command_script)",
                "_script_from_history(self, line)",
                "how_to_configure(self)"
            ],
            "variables_in_file": {
                "Generic": [
                    8
                ],
                "alias": [
                    10,
                    17,
                    19,
                    22,
                    30,
                    31
                ],
                "format": [
                    10,
                    38
                ],
                "alias_name": [
                    14
                ],
                "settings.alter_history": [
                    16
                ],
                "settings": [
                    16
                ],
                "name": [
                    25,
                    22
                ],
                "value": [
                    24,
                    25,
                    22,
                    23
                ],
                "alias.split": [
                    22
                ],
                "raw_aliases": [
                    29,
                    31
                ],
                "split": [
                    29
                ],
                "os.environ": [
                    34,
                    29
                ],
                "os": [
                    34,
                    35,
                    29
                ],
                "dict": [
                    30
                ],
                "self._parse_alias": [
                    30
                ],
                "self": [
                    30
                ],
                "memoize": [
                    27
                ],
                "os.environ.get": [
                    34
                ],
                "os.path.expanduser": [
                    35
                ],
                "os.path": [
                    35
                ],
                "int": [
                    38
                ],
                "time": [
                    38
                ],
                "command_script": [
                    38
                ],
                "line": [
                    41,
                    42
                ],
                "line.split": [
                    42
                ]
            },
            "filtered_variables_in_file": {
                "Generic": [
                    8
                ],
                "alias": [
                    10,
                    17,
                    19,
                    22,
                    30,
                    31
                ],
                "alias_name": [
                    14
                ],
                "settings.alter_history": [
                    16
                ],
                "settings": [
                    16
                ],
                "name": [
                    25,
                    22
                ],
                "value": [
                    24,
                    25,
                    22,
                    23
                ],
                "alias.split": [
                    22
                ],
                "raw_aliases": [
                    29,
                    31
                ],
                "split": [
                    29
                ],
                "os.environ": [
                    34,
                    29
                ],
                "os": [
                    34,
                    35,
                    29
                ],
                "self._parse_alias": [
                    30
                ],
                "self": [
                    30
                ],
                "memoize": [
                    27
                ],
                "os.environ.get": [
                    34
                ],
                "os.path.expanduser": [
                    35
                ],
                "os.path": [
                    35
                ],
                "time": [
                    38
                ],
                "command_script": [
                    38
                ],
                "line": [
                    41,
                    42
                ],
                "line.split": [
                    42
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/thefuck_17/tests/shells/test_bash.py",
                "test_function": "test_get_aliases",
                "test_function_code": "    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fuck': 'eval $(thefuck $(fc -ln -1))',\n                                       'l': 'ls -CF',\n                                       'la': 'ls -A',\n                                       'll': 'ls -alF'}",
                "test_error": "AssertionError: assert {'platformio'...n/platformio'} == {'fuck': 'eval...l': 'ls -alF'}   Left contains more items:   {'platformio': '/Users/jerry/.platformio/penv/bin/platformio'}   Right contains more items:   {'fuck': 'eval $(thefuck $(fc -ln -1))',    'l': 'ls -CF',    'la': 'ls -A',    'll': 'ls -alF'}   Full diff:   - {'platformio': '/Users/jerry/.platformio/penv/bin/platformio'}   + {'fuck': 'eval $(thefuck $(fc -ln -1))',   +  'l': 'ls -CF',   +  'la': 'ls -A',   +  'll': 'ls -alF'}",
                "full_test_error": "self = <tests.shells.test_bash.TestBash object at 0x1084fd490>\nshell = <thefuck.shells.bash.Bash object at 0x1084cd4d0>\n\n    def test_get_aliases(self, shell):\n>       assert shell.get_aliases() == {'fuck': 'eval $(thefuck $(fc -ln -1))',\n                                       'l': 'ls -CF',\n                                       'la': 'ls -A',\n                                       'll': 'ls -alF'}\nE       AssertionError: assert {'platformio'...n/platformio'} == {'fuck': 'eval...l': 'ls -alF'}\nE         Left contains more items:\nE         {'platformio': '/Users/jerry/.platformio/penv/bin/platformio'}\nE         Right contains more items:\nE         {'fuck': 'eval $(thefuck $(fc -ln -1))',\nE          'l': 'ls -CF',\nE          'la': 'ls -A',\nE          'll': 'ls -alF'}\nE         Full diff:\nE         - {'platformio': '/Users/jerry/.platformio/penv/bin/platformio'}\nE         + {'fuck': 'eval $(thefuck $(fc -ln -1))',\nE         +  'l': 'ls -CF',\nE         +  'la': 'ls -A',\nE         +  'll': 'ls -alF'}\n\ntests/shells/test_bash.py:37: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/thefuck_17/tests/shells/test_bash.py",
                "test_function": "test_from_shell",
                "test_function_code": "    @pytest.mark.parametrize('before, after', [\n        ('pwd', 'pwd'),\n        ('fuck', 'eval $(thefuck $(fc -ln -1))'),\n        ('awk', 'awk'),\n        ('ll', 'ls -alF')])\n    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after",
                "test_error": "AssertionError: assert 'fuck' == 'eval $(thefuck $(fc -ln -1))'   - fuck   + eval $(thefuck $(fc -ln -1))",
                "full_test_error": "self = <tests.shells.test_bash.TestBash object at 0x1084cbe50>, before = 'fuck'\nafter = 'eval $(thefuck $(fc -ln -1))'\nshell = <thefuck.shells.bash.Bash object at 0x1085039d0>\n\n    @pytest.mark.parametrize('before, after', [\n        ('pwd', 'pwd'),\n        ('fuck', 'eval $(thefuck $(fc -ln -1))'),\n        ('awk', 'awk'),\n        ('ll', 'ls -alF')])\n    def test_from_shell(self, before, after, shell):\n>       assert shell.from_shell(before) == after\nE       AssertionError: assert 'fuck' == 'eval $(thefuck $(fc -ln -1))'\nE         - fuck\nE         + eval $(thefuck $(fc -ln -1))\n\ntests/shells/test_bash.py:28: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('before, after', [('pwd', 'pwd'), ('fuck', 'eval $(thefuck $(fc -ln -1))'), ('awk', 'awk'), ('ll', 'ls -alF')])"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/thefuck_17/tests/shells/test_bash.py",
                "test_function": "test_from_shell",
                "test_function_code": "    @pytest.mark.parametrize('before, after', [\n        ('pwd', 'pwd'),\n        ('fuck', 'eval $(thefuck $(fc -ln -1))'),\n        ('awk', 'awk'),\n        ('ll', 'ls -alF')])\n    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after",
                "test_error": "AssertionError: assert 'll' == 'ls -alF'   - ll   + ls -alF",
                "full_test_error": "self = <tests.shells.test_bash.TestBash object at 0x1084bb310>, before = 'll'\nafter = 'ls -alF', shell = <thefuck.shells.bash.Bash object at 0x10870f550>\n\n    @pytest.mark.parametrize('before, after', [\n        ('pwd', 'pwd'),\n        ('fuck', 'eval $(thefuck $(fc -ln -1))'),\n        ('awk', 'awk'),\n        ('ll', 'ls -alF')])\n    def test_from_shell(self, before, after, shell):\n>       assert shell.from_shell(before) == after\nE       AssertionError: assert 'll' == 'ls -alF'\nE         - ll\nE         + ls -alF\n\ntests/shells/test_bash.py:28: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('before, after', [('pwd', 'pwd'), ('fuck', 'eval $(thefuck $(fc -ln -1))'), ('awk', 'awk'), ('ll', 'ls -alF')])"
                ]
            }
        ]
    }
}