{
    "fastapi:1": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_1/fastapi/applications.py": {
            "buggy_functions": [
                {
                    "function_name": "add_api_route",
                    "function_code": "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    self.router.add_api_route(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 153,
                    "variables": {
                        "str": [
                            160,
                            162,
                            163,
                            164,
                            165,
                            167,
                            168,
                            176,
                            155
                        ],
                        "Callable": [
                            156
                        ],
                        "Type": [
                            158,
                            175
                        ],
                        "Any": [
                            165,
                            158
                        ],
                        "int": [
                            165,
                            159
                        ],
                        "List": [
                            160,
                            167
                        ],
                        "Sequence": [
                            161
                        ],
                        "Depends": [
                            161
                        ],
                        "Dict": [
                            165
                        ],
                        "Union": [
                            169,
                            170,
                            165
                        ],
                        "bool": [
                            197,
                            166,
                            171,
                            172,
                            173,
                            174
                        ],
                        "SetIntStr": [
                            169,
                            170
                        ],
                        "DictIntStrAny": [
                            169,
                            170
                        ],
                        "Response": [
                            175
                        ],
                        "set": [
                            170
                        ],
                        "response_model_skip_defaults": [
                            178,
                            198
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            179
                        ],
                        "self.router.add_api_route": [
                            180
                        ],
                        "self.router": [
                            180
                        ],
                        "self": [
                            201,
                            180
                        ],
                        "path": [
                            181
                        ],
                        "endpoint": [
                            182
                        ],
                        "response_model": [
                            183
                        ],
                        "status_code": [
                            184
                        ],
                        "tags": [
                            185
                        ],
                        "dependencies": [
                            186
                        ],
                        "summary": [
                            187
                        ],
                        "description": [
                            188
                        ],
                        "response_description": [
                            189
                        ],
                        "responses": [
                            190
                        ],
                        "deprecated": [
                            191
                        ],
                        "methods": [
                            192
                        ],
                        "operation_id": [
                            193
                        ],
                        "response_model_include": [
                            194
                        ],
                        "response_model_exclude": [
                            195
                        ],
                        "response_model_by_alias": [
                            196
                        ],
                        "response_model_exclude_unset": [
                            198
                        ],
                        "include_in_schema": [
                            200
                        ],
                        "response_class": [
                            201
                        ],
                        "self.default_response_class": [
                            201
                        ],
                        "name": [
                            202
                        ]
                    },
                    "filtered_variables": {
                        "Callable": [
                            156
                        ],
                        "Type": [
                            158,
                            175
                        ],
                        "Any": [
                            165,
                            158
                        ],
                        "List": [
                            160,
                            167
                        ],
                        "Sequence": [
                            161
                        ],
                        "Depends": [
                            161
                        ],
                        "Dict": [
                            165
                        ],
                        "Union": [
                            169,
                            170,
                            165
                        ],
                        "SetIntStr": [
                            169,
                            170
                        ],
                        "DictIntStrAny": [
                            169,
                            170
                        ],
                        "Response": [
                            175
                        ],
                        "response_model_skip_defaults": [
                            178,
                            198
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            179
                        ],
                        "self.router.add_api_route": [
                            180
                        ],
                        "self.router": [
                            180
                        ],
                        "self": [
                            201,
                            180
                        ],
                        "path": [
                            181
                        ],
                        "endpoint": [
                            182
                        ],
                        "response_model": [
                            183
                        ],
                        "status_code": [
                            184
                        ],
                        "tags": [
                            185
                        ],
                        "dependencies": [
                            186
                        ],
                        "summary": [
                            187
                        ],
                        "description": [
                            188
                        ],
                        "response_description": [
                            189
                        ],
                        "responses": [
                            190
                        ],
                        "deprecated": [
                            191
                        ],
                        "methods": [
                            192
                        ],
                        "operation_id": [
                            193
                        ],
                        "response_model_include": [
                            194
                        ],
                        "response_model_exclude": [
                            195
                        ],
                        "response_model_by_alias": [
                            196
                        ],
                        "response_model_exclude_unset": [
                            198
                        ],
                        "include_in_schema": [
                            200
                        ],
                        "response_class": [
                            201
                        ],
                        "self.default_response_class": [
                            201
                        ],
                        "name": [
                            202
                        ]
                    },
                    "diff_line_number": 173,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "api_route",
                    "function_code": "def api_route(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(\n            path,\n            func,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags or [],\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses or {},\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=bool(\n                response_model_exclude_unset or response_model_skip_defaults\n            ),\n            include_in_schema=include_in_schema,\n            response_class=response_class or self.default_response_class,\n            name=name,\n        )\n        return func\n\n    return decorator\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 205,
                    "variables": {
                        "str": [
                            227,
                            207,
                            211,
                            213,
                            214,
                            215,
                            216,
                            218,
                            219
                        ],
                        "Type": [
                            209,
                            226
                        ],
                        "Any": [
                            216,
                            209
                        ],
                        "int": [
                            216,
                            210
                        ],
                        "List": [
                            218,
                            211
                        ],
                        "Sequence": [
                            212
                        ],
                        "Depends": [
                            212
                        ],
                        "Dict": [
                            216
                        ],
                        "Union": [
                            216,
                            220,
                            221
                        ],
                        "bool": [
                            224,
                            225,
                            217,
                            250,
                            222,
                            223
                        ],
                        "SetIntStr": [
                            220,
                            221
                        ],
                        "DictIntStrAny": [
                            220,
                            221
                        ],
                        "Response": [
                            226
                        ],
                        "set": [
                            221
                        ],
                        "response_model_skip_defaults": [
                            251,
                            229
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            230
                        ],
                        "Callable": [
                            232,
                            228
                        ],
                        "self.router.add_api_route": [
                            233
                        ],
                        "self.router": [
                            233
                        ],
                        "self": [
                            233,
                            254
                        ],
                        "path": [
                            234
                        ],
                        "func": [
                            257,
                            235
                        ],
                        "response_model": [
                            236
                        ],
                        "status_code": [
                            237
                        ],
                        "tags": [
                            238
                        ],
                        "dependencies": [
                            239
                        ],
                        "summary": [
                            240
                        ],
                        "description": [
                            241
                        ],
                        "response_description": [
                            242
                        ],
                        "responses": [
                            243
                        ],
                        "deprecated": [
                            244
                        ],
                        "methods": [
                            245
                        ],
                        "operation_id": [
                            246
                        ],
                        "response_model_include": [
                            247
                        ],
                        "response_model_exclude": [
                            248
                        ],
                        "response_model_by_alias": [
                            249
                        ],
                        "response_model_exclude_unset": [
                            251
                        ],
                        "include_in_schema": [
                            253
                        ],
                        "response_class": [
                            254
                        ],
                        "self.default_response_class": [
                            254
                        ],
                        "name": [
                            255
                        ],
                        "decorator": [
                            259
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            209,
                            226
                        ],
                        "Any": [
                            216,
                            209
                        ],
                        "List": [
                            218,
                            211
                        ],
                        "Sequence": [
                            212
                        ],
                        "Depends": [
                            212
                        ],
                        "Dict": [
                            216
                        ],
                        "Union": [
                            216,
                            220,
                            221
                        ],
                        "SetIntStr": [
                            220,
                            221
                        ],
                        "DictIntStrAny": [
                            220,
                            221
                        ],
                        "Response": [
                            226
                        ],
                        "response_model_skip_defaults": [
                            251,
                            229
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            230
                        ],
                        "Callable": [
                            232,
                            228
                        ],
                        "self.router.add_api_route": [
                            233
                        ],
                        "self.router": [
                            233
                        ],
                        "self": [
                            233,
                            254
                        ],
                        "path": [
                            234
                        ],
                        "func": [
                            257,
                            235
                        ],
                        "response_model": [
                            236
                        ],
                        "status_code": [
                            237
                        ],
                        "tags": [
                            238
                        ],
                        "dependencies": [
                            239
                        ],
                        "summary": [
                            240
                        ],
                        "description": [
                            241
                        ],
                        "response_description": [
                            242
                        ],
                        "responses": [
                            243
                        ],
                        "deprecated": [
                            244
                        ],
                        "methods": [
                            245
                        ],
                        "operation_id": [
                            246
                        ],
                        "response_model_include": [
                            247
                        ],
                        "response_model_exclude": [
                            248
                        ],
                        "response_model_by_alias": [
                            249
                        ],
                        "response_model_exclude_unset": [
                            251
                        ],
                        "include_in_schema": [
                            253
                        ],
                        "response_class": [
                            254
                        ],
                        "self.default_response_class": [
                            254
                        ],
                        "name": [
                            255
                        ],
                        "decorator": [
                            259
                        ]
                    },
                    "diff_line_number": 224,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "get",
                    "function_code": "def get(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.get(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 293,
                    "variables": {
                        "str": [
                            295,
                            299,
                            301,
                            302,
                            303,
                            304,
                            306,
                            314
                        ],
                        "Type": [
                            297,
                            313
                        ],
                        "Any": [
                            304,
                            297
                        ],
                        "int": [
                            304,
                            298
                        ],
                        "List": [
                            315,
                            299
                        ],
                        "Sequence": [
                            300
                        ],
                        "Depends": [
                            300
                        ],
                        "Dict": [
                            304
                        ],
                        "Union": [
                            304,
                            307,
                            308
                        ],
                        "bool": [
                            334,
                            305,
                            309,
                            310,
                            311,
                            312
                        ],
                        "SetIntStr": [
                            307,
                            308
                        ],
                        "DictIntStrAny": [
                            307,
                            308
                        ],
                        "Response": [
                            313
                        ],
                        "routing.APIRoute": [
                            315
                        ],
                        "routing": [
                            315
                        ],
                        "set": [
                            308
                        ],
                        "response_model_skip_defaults": [
                            317,
                            335
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            318
                        ],
                        "self.router.get": [
                            319
                        ],
                        "self.router": [
                            319
                        ],
                        "self": [
                            338,
                            319
                        ],
                        "path": [
                            320
                        ],
                        "response_model": [
                            321
                        ],
                        "status_code": [
                            322
                        ],
                        "tags": [
                            323
                        ],
                        "dependencies": [
                            324
                        ],
                        "summary": [
                            325
                        ],
                        "description": [
                            326
                        ],
                        "response_description": [
                            327
                        ],
                        "responses": [
                            328
                        ],
                        "deprecated": [
                            329
                        ],
                        "operation_id": [
                            330
                        ],
                        "response_model_include": [
                            331
                        ],
                        "response_model_exclude": [
                            332
                        ],
                        "response_model_by_alias": [
                            333
                        ],
                        "response_model_exclude_unset": [
                            335
                        ],
                        "include_in_schema": [
                            337
                        ],
                        "response_class": [
                            338
                        ],
                        "self.default_response_class": [
                            338
                        ],
                        "name": [
                            339
                        ],
                        "callbacks": [
                            340
                        ],
                        "Callable": [
                            316
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            297,
                            313
                        ],
                        "Any": [
                            304,
                            297
                        ],
                        "List": [
                            315,
                            299
                        ],
                        "Sequence": [
                            300
                        ],
                        "Depends": [
                            300
                        ],
                        "Dict": [
                            304
                        ],
                        "Union": [
                            304,
                            307,
                            308
                        ],
                        "SetIntStr": [
                            307,
                            308
                        ],
                        "DictIntStrAny": [
                            307,
                            308
                        ],
                        "Response": [
                            313
                        ],
                        "routing.APIRoute": [
                            315
                        ],
                        "routing": [
                            315
                        ],
                        "response_model_skip_defaults": [
                            317,
                            335
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            318
                        ],
                        "self.router.get": [
                            319
                        ],
                        "self.router": [
                            319
                        ],
                        "self": [
                            338,
                            319
                        ],
                        "path": [
                            320
                        ],
                        "response_model": [
                            321
                        ],
                        "status_code": [
                            322
                        ],
                        "tags": [
                            323
                        ],
                        "dependencies": [
                            324
                        ],
                        "summary": [
                            325
                        ],
                        "description": [
                            326
                        ],
                        "response_description": [
                            327
                        ],
                        "responses": [
                            328
                        ],
                        "deprecated": [
                            329
                        ],
                        "operation_id": [
                            330
                        ],
                        "response_model_include": [
                            331
                        ],
                        "response_model_exclude": [
                            332
                        ],
                        "response_model_by_alias": [
                            333
                        ],
                        "response_model_exclude_unset": [
                            335
                        ],
                        "include_in_schema": [
                            337
                        ],
                        "response_class": [
                            338
                        ],
                        "self.default_response_class": [
                            338
                        ],
                        "name": [
                            339
                        ],
                        "callbacks": [
                            340
                        ],
                        "Callable": [
                            316
                        ]
                    },
                    "diff_line_number": 311,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "put",
                    "function_code": "def put(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.put(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 343,
                    "variables": {
                        "str": [
                            352,
                            353,
                            354,
                            356,
                            364,
                            345,
                            349,
                            351
                        ],
                        "Type": [
                            363,
                            347
                        ],
                        "Any": [
                            354,
                            347
                        ],
                        "int": [
                            354,
                            348
                        ],
                        "List": [
                            365,
                            349
                        ],
                        "Sequence": [
                            350
                        ],
                        "Depends": [
                            350
                        ],
                        "Dict": [
                            354
                        ],
                        "Union": [
                            354,
                            357,
                            358
                        ],
                        "bool": [
                            384,
                            355,
                            359,
                            360,
                            361,
                            362
                        ],
                        "SetIntStr": [
                            357,
                            358
                        ],
                        "DictIntStrAny": [
                            357,
                            358
                        ],
                        "Response": [
                            363
                        ],
                        "routing.APIRoute": [
                            365
                        ],
                        "routing": [
                            365
                        ],
                        "set": [
                            358
                        ],
                        "response_model_skip_defaults": [
                            385,
                            367
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            368
                        ],
                        "self.router.put": [
                            369
                        ],
                        "self.router": [
                            369
                        ],
                        "self": [
                            369,
                            388
                        ],
                        "path": [
                            370
                        ],
                        "response_model": [
                            371
                        ],
                        "status_code": [
                            372
                        ],
                        "tags": [
                            373
                        ],
                        "dependencies": [
                            374
                        ],
                        "summary": [
                            375
                        ],
                        "description": [
                            376
                        ],
                        "response_description": [
                            377
                        ],
                        "responses": [
                            378
                        ],
                        "deprecated": [
                            379
                        ],
                        "operation_id": [
                            380
                        ],
                        "response_model_include": [
                            381
                        ],
                        "response_model_exclude": [
                            382
                        ],
                        "response_model_by_alias": [
                            383
                        ],
                        "response_model_exclude_unset": [
                            385
                        ],
                        "include_in_schema": [
                            387
                        ],
                        "response_class": [
                            388
                        ],
                        "self.default_response_class": [
                            388
                        ],
                        "name": [
                            389
                        ],
                        "callbacks": [
                            390
                        ],
                        "Callable": [
                            366
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            363,
                            347
                        ],
                        "Any": [
                            354,
                            347
                        ],
                        "List": [
                            365,
                            349
                        ],
                        "Sequence": [
                            350
                        ],
                        "Depends": [
                            350
                        ],
                        "Dict": [
                            354
                        ],
                        "Union": [
                            354,
                            357,
                            358
                        ],
                        "SetIntStr": [
                            357,
                            358
                        ],
                        "DictIntStrAny": [
                            357,
                            358
                        ],
                        "Response": [
                            363
                        ],
                        "routing.APIRoute": [
                            365
                        ],
                        "routing": [
                            365
                        ],
                        "response_model_skip_defaults": [
                            385,
                            367
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            368
                        ],
                        "self.router.put": [
                            369
                        ],
                        "self.router": [
                            369
                        ],
                        "self": [
                            369,
                            388
                        ],
                        "path": [
                            370
                        ],
                        "response_model": [
                            371
                        ],
                        "status_code": [
                            372
                        ],
                        "tags": [
                            373
                        ],
                        "dependencies": [
                            374
                        ],
                        "summary": [
                            375
                        ],
                        "description": [
                            376
                        ],
                        "response_description": [
                            377
                        ],
                        "responses": [
                            378
                        ],
                        "deprecated": [
                            379
                        ],
                        "operation_id": [
                            380
                        ],
                        "response_model_include": [
                            381
                        ],
                        "response_model_exclude": [
                            382
                        ],
                        "response_model_by_alias": [
                            383
                        ],
                        "response_model_exclude_unset": [
                            385
                        ],
                        "include_in_schema": [
                            387
                        ],
                        "response_class": [
                            388
                        ],
                        "self.default_response_class": [
                            388
                        ],
                        "name": [
                            389
                        ],
                        "callbacks": [
                            390
                        ],
                        "Callable": [
                            366
                        ]
                    },
                    "diff_line_number": 361,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "post",
                    "function_code": "def post(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.post(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 393,
                    "variables": {
                        "str": [
                            395,
                            399,
                            401,
                            402,
                            403,
                            404,
                            406,
                            414
                        ],
                        "Type": [
                            397,
                            413
                        ],
                        "Any": [
                            404,
                            397
                        ],
                        "int": [
                            404,
                            398
                        ],
                        "List": [
                            415,
                            399
                        ],
                        "Sequence": [
                            400
                        ],
                        "Depends": [
                            400
                        ],
                        "Dict": [
                            404
                        ],
                        "Union": [
                            408,
                            404,
                            407
                        ],
                        "bool": [
                            434,
                            405,
                            409,
                            410,
                            411,
                            412
                        ],
                        "SetIntStr": [
                            408,
                            407
                        ],
                        "DictIntStrAny": [
                            408,
                            407
                        ],
                        "Response": [
                            413
                        ],
                        "routing.APIRoute": [
                            415
                        ],
                        "routing": [
                            415
                        ],
                        "set": [
                            408
                        ],
                        "response_model_skip_defaults": [
                            417,
                            435
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            418
                        ],
                        "self.router.post": [
                            419
                        ],
                        "self.router": [
                            419
                        ],
                        "self": [
                            419,
                            438
                        ],
                        "path": [
                            420
                        ],
                        "response_model": [
                            421
                        ],
                        "status_code": [
                            422
                        ],
                        "tags": [
                            423
                        ],
                        "dependencies": [
                            424
                        ],
                        "summary": [
                            425
                        ],
                        "description": [
                            426
                        ],
                        "response_description": [
                            427
                        ],
                        "responses": [
                            428
                        ],
                        "deprecated": [
                            429
                        ],
                        "operation_id": [
                            430
                        ],
                        "response_model_include": [
                            431
                        ],
                        "response_model_exclude": [
                            432
                        ],
                        "response_model_by_alias": [
                            433
                        ],
                        "response_model_exclude_unset": [
                            435
                        ],
                        "include_in_schema": [
                            437
                        ],
                        "response_class": [
                            438
                        ],
                        "self.default_response_class": [
                            438
                        ],
                        "name": [
                            439
                        ],
                        "callbacks": [
                            440
                        ],
                        "Callable": [
                            416
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            397,
                            413
                        ],
                        "Any": [
                            404,
                            397
                        ],
                        "List": [
                            415,
                            399
                        ],
                        "Sequence": [
                            400
                        ],
                        "Depends": [
                            400
                        ],
                        "Dict": [
                            404
                        ],
                        "Union": [
                            408,
                            404,
                            407
                        ],
                        "SetIntStr": [
                            408,
                            407
                        ],
                        "DictIntStrAny": [
                            408,
                            407
                        ],
                        "Response": [
                            413
                        ],
                        "routing.APIRoute": [
                            415
                        ],
                        "routing": [
                            415
                        ],
                        "response_model_skip_defaults": [
                            417,
                            435
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            418
                        ],
                        "self.router.post": [
                            419
                        ],
                        "self.router": [
                            419
                        ],
                        "self": [
                            419,
                            438
                        ],
                        "path": [
                            420
                        ],
                        "response_model": [
                            421
                        ],
                        "status_code": [
                            422
                        ],
                        "tags": [
                            423
                        ],
                        "dependencies": [
                            424
                        ],
                        "summary": [
                            425
                        ],
                        "description": [
                            426
                        ],
                        "response_description": [
                            427
                        ],
                        "responses": [
                            428
                        ],
                        "deprecated": [
                            429
                        ],
                        "operation_id": [
                            430
                        ],
                        "response_model_include": [
                            431
                        ],
                        "response_model_exclude": [
                            432
                        ],
                        "response_model_by_alias": [
                            433
                        ],
                        "response_model_exclude_unset": [
                            435
                        ],
                        "include_in_schema": [
                            437
                        ],
                        "response_class": [
                            438
                        ],
                        "self.default_response_class": [
                            438
                        ],
                        "name": [
                            439
                        ],
                        "callbacks": [
                            440
                        ],
                        "Callable": [
                            416
                        ]
                    },
                    "diff_line_number": 411,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "delete",
                    "function_code": "def delete(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.delete(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        operation_id=operation_id,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 443,
                    "variables": {
                        "str": [
                            449,
                            451,
                            452,
                            453,
                            454,
                            456,
                            464,
                            445
                        ],
                        "Type": [
                            463,
                            447
                        ],
                        "Any": [
                            454,
                            447
                        ],
                        "int": [
                            448,
                            454
                        ],
                        "List": [
                            449,
                            465
                        ],
                        "Sequence": [
                            450
                        ],
                        "Depends": [
                            450
                        ],
                        "Dict": [
                            454
                        ],
                        "Union": [
                            457,
                            458,
                            454
                        ],
                        "bool": [
                            484,
                            455,
                            459,
                            460,
                            461,
                            462
                        ],
                        "SetIntStr": [
                            457,
                            458
                        ],
                        "DictIntStrAny": [
                            457,
                            458
                        ],
                        "Response": [
                            463
                        ],
                        "routing.APIRoute": [
                            465
                        ],
                        "routing": [
                            465
                        ],
                        "set": [
                            458
                        ],
                        "response_model_skip_defaults": [
                            467,
                            485
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            468
                        ],
                        "self.router.delete": [
                            469
                        ],
                        "self.router": [
                            469
                        ],
                        "self": [
                            488,
                            469
                        ],
                        "path": [
                            470
                        ],
                        "response_model": [
                            471
                        ],
                        "status_code": [
                            472
                        ],
                        "tags": [
                            473
                        ],
                        "dependencies": [
                            474
                        ],
                        "summary": [
                            475
                        ],
                        "description": [
                            476
                        ],
                        "response_description": [
                            477
                        ],
                        "responses": [
                            478
                        ],
                        "deprecated": [
                            479
                        ],
                        "response_model_include": [
                            480
                        ],
                        "response_model_exclude": [
                            481
                        ],
                        "response_model_by_alias": [
                            482
                        ],
                        "operation_id": [
                            483
                        ],
                        "response_model_exclude_unset": [
                            485
                        ],
                        "include_in_schema": [
                            487
                        ],
                        "response_class": [
                            488
                        ],
                        "self.default_response_class": [
                            488
                        ],
                        "name": [
                            489
                        ],
                        "callbacks": [
                            490
                        ],
                        "Callable": [
                            466
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            463,
                            447
                        ],
                        "Any": [
                            454,
                            447
                        ],
                        "List": [
                            449,
                            465
                        ],
                        "Sequence": [
                            450
                        ],
                        "Depends": [
                            450
                        ],
                        "Dict": [
                            454
                        ],
                        "Union": [
                            457,
                            458,
                            454
                        ],
                        "SetIntStr": [
                            457,
                            458
                        ],
                        "DictIntStrAny": [
                            457,
                            458
                        ],
                        "Response": [
                            463
                        ],
                        "routing.APIRoute": [
                            465
                        ],
                        "routing": [
                            465
                        ],
                        "response_model_skip_defaults": [
                            467,
                            485
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            468
                        ],
                        "self.router.delete": [
                            469
                        ],
                        "self.router": [
                            469
                        ],
                        "self": [
                            488,
                            469
                        ],
                        "path": [
                            470
                        ],
                        "response_model": [
                            471
                        ],
                        "status_code": [
                            472
                        ],
                        "tags": [
                            473
                        ],
                        "dependencies": [
                            474
                        ],
                        "summary": [
                            475
                        ],
                        "description": [
                            476
                        ],
                        "response_description": [
                            477
                        ],
                        "responses": [
                            478
                        ],
                        "deprecated": [
                            479
                        ],
                        "response_model_include": [
                            480
                        ],
                        "response_model_exclude": [
                            481
                        ],
                        "response_model_by_alias": [
                            482
                        ],
                        "operation_id": [
                            483
                        ],
                        "response_model_exclude_unset": [
                            485
                        ],
                        "include_in_schema": [
                            487
                        ],
                        "response_class": [
                            488
                        ],
                        "self.default_response_class": [
                            488
                        ],
                        "name": [
                            489
                        ],
                        "callbacks": [
                            490
                        ],
                        "Callable": [
                            466
                        ]
                    },
                    "diff_line_number": 461,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "options",
                    "function_code": "def options(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.options(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 493,
                    "variables": {
                        "str": [
                            514,
                            495,
                            499,
                            501,
                            502,
                            503,
                            504,
                            506
                        ],
                        "Type": [
                            497,
                            513
                        ],
                        "Any": [
                            504,
                            497
                        ],
                        "int": [
                            504,
                            498
                        ],
                        "List": [
                            515,
                            499
                        ],
                        "Sequence": [
                            500
                        ],
                        "Depends": [
                            500
                        ],
                        "Dict": [
                            504
                        ],
                        "Union": [
                            504,
                            507,
                            508
                        ],
                        "bool": [
                            512,
                            534,
                            505,
                            509,
                            510,
                            511
                        ],
                        "SetIntStr": [
                            507,
                            508
                        ],
                        "DictIntStrAny": [
                            507,
                            508
                        ],
                        "Response": [
                            513
                        ],
                        "routing.APIRoute": [
                            515
                        ],
                        "routing": [
                            515
                        ],
                        "set": [
                            508
                        ],
                        "response_model_skip_defaults": [
                            517,
                            535
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            518
                        ],
                        "self.router.options": [
                            519
                        ],
                        "self.router": [
                            519
                        ],
                        "self": [
                            538,
                            519
                        ],
                        "path": [
                            520
                        ],
                        "response_model": [
                            521
                        ],
                        "status_code": [
                            522
                        ],
                        "tags": [
                            523
                        ],
                        "dependencies": [
                            524
                        ],
                        "summary": [
                            525
                        ],
                        "description": [
                            526
                        ],
                        "response_description": [
                            527
                        ],
                        "responses": [
                            528
                        ],
                        "deprecated": [
                            529
                        ],
                        "operation_id": [
                            530
                        ],
                        "response_model_include": [
                            531
                        ],
                        "response_model_exclude": [
                            532
                        ],
                        "response_model_by_alias": [
                            533
                        ],
                        "response_model_exclude_unset": [
                            535
                        ],
                        "include_in_schema": [
                            537
                        ],
                        "response_class": [
                            538
                        ],
                        "self.default_response_class": [
                            538
                        ],
                        "name": [
                            539
                        ],
                        "callbacks": [
                            540
                        ],
                        "Callable": [
                            516
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            497,
                            513
                        ],
                        "Any": [
                            504,
                            497
                        ],
                        "List": [
                            515,
                            499
                        ],
                        "Sequence": [
                            500
                        ],
                        "Depends": [
                            500
                        ],
                        "Dict": [
                            504
                        ],
                        "Union": [
                            504,
                            507,
                            508
                        ],
                        "SetIntStr": [
                            507,
                            508
                        ],
                        "DictIntStrAny": [
                            507,
                            508
                        ],
                        "Response": [
                            513
                        ],
                        "routing.APIRoute": [
                            515
                        ],
                        "routing": [
                            515
                        ],
                        "response_model_skip_defaults": [
                            517,
                            535
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            518
                        ],
                        "self.router.options": [
                            519
                        ],
                        "self.router": [
                            519
                        ],
                        "self": [
                            538,
                            519
                        ],
                        "path": [
                            520
                        ],
                        "response_model": [
                            521
                        ],
                        "status_code": [
                            522
                        ],
                        "tags": [
                            523
                        ],
                        "dependencies": [
                            524
                        ],
                        "summary": [
                            525
                        ],
                        "description": [
                            526
                        ],
                        "response_description": [
                            527
                        ],
                        "responses": [
                            528
                        ],
                        "deprecated": [
                            529
                        ],
                        "operation_id": [
                            530
                        ],
                        "response_model_include": [
                            531
                        ],
                        "response_model_exclude": [
                            532
                        ],
                        "response_model_by_alias": [
                            533
                        ],
                        "response_model_exclude_unset": [
                            535
                        ],
                        "include_in_schema": [
                            537
                        ],
                        "response_class": [
                            538
                        ],
                        "self.default_response_class": [
                            538
                        ],
                        "name": [
                            539
                        ],
                        "callbacks": [
                            540
                        ],
                        "Callable": [
                            516
                        ]
                    },
                    "diff_line_number": 511,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "head",
                    "function_code": "def head(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.head(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 543,
                    "variables": {
                        "str": [
                            545,
                            549,
                            551,
                            552,
                            553,
                            554,
                            556,
                            564
                        ],
                        "Type": [
                            563,
                            547
                        ],
                        "Any": [
                            554,
                            547
                        ],
                        "int": [
                            554,
                            548
                        ],
                        "List": [
                            565,
                            549
                        ],
                        "Sequence": [
                            550
                        ],
                        "Depends": [
                            550
                        ],
                        "Dict": [
                            554
                        ],
                        "Union": [
                            554,
                            557,
                            558
                        ],
                        "bool": [
                            584,
                            555,
                            559,
                            560,
                            561,
                            562
                        ],
                        "SetIntStr": [
                            557,
                            558
                        ],
                        "DictIntStrAny": [
                            557,
                            558
                        ],
                        "Response": [
                            563
                        ],
                        "routing.APIRoute": [
                            565
                        ],
                        "routing": [
                            565
                        ],
                        "set": [
                            558
                        ],
                        "response_model_skip_defaults": [
                            585,
                            567
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            568
                        ],
                        "self.router.head": [
                            569
                        ],
                        "self.router": [
                            569
                        ],
                        "self": [
                            569,
                            588
                        ],
                        "path": [
                            570
                        ],
                        "response_model": [
                            571
                        ],
                        "status_code": [
                            572
                        ],
                        "tags": [
                            573
                        ],
                        "dependencies": [
                            574
                        ],
                        "summary": [
                            575
                        ],
                        "description": [
                            576
                        ],
                        "response_description": [
                            577
                        ],
                        "responses": [
                            578
                        ],
                        "deprecated": [
                            579
                        ],
                        "operation_id": [
                            580
                        ],
                        "response_model_include": [
                            581
                        ],
                        "response_model_exclude": [
                            582
                        ],
                        "response_model_by_alias": [
                            583
                        ],
                        "response_model_exclude_unset": [
                            585
                        ],
                        "include_in_schema": [
                            587
                        ],
                        "response_class": [
                            588
                        ],
                        "self.default_response_class": [
                            588
                        ],
                        "name": [
                            589
                        ],
                        "callbacks": [
                            590
                        ],
                        "Callable": [
                            566
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            563,
                            547
                        ],
                        "Any": [
                            554,
                            547
                        ],
                        "List": [
                            565,
                            549
                        ],
                        "Sequence": [
                            550
                        ],
                        "Depends": [
                            550
                        ],
                        "Dict": [
                            554
                        ],
                        "Union": [
                            554,
                            557,
                            558
                        ],
                        "SetIntStr": [
                            557,
                            558
                        ],
                        "DictIntStrAny": [
                            557,
                            558
                        ],
                        "Response": [
                            563
                        ],
                        "routing.APIRoute": [
                            565
                        ],
                        "routing": [
                            565
                        ],
                        "response_model_skip_defaults": [
                            585,
                            567
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            568
                        ],
                        "self.router.head": [
                            569
                        ],
                        "self.router": [
                            569
                        ],
                        "self": [
                            569,
                            588
                        ],
                        "path": [
                            570
                        ],
                        "response_model": [
                            571
                        ],
                        "status_code": [
                            572
                        ],
                        "tags": [
                            573
                        ],
                        "dependencies": [
                            574
                        ],
                        "summary": [
                            575
                        ],
                        "description": [
                            576
                        ],
                        "response_description": [
                            577
                        ],
                        "responses": [
                            578
                        ],
                        "deprecated": [
                            579
                        ],
                        "operation_id": [
                            580
                        ],
                        "response_model_include": [
                            581
                        ],
                        "response_model_exclude": [
                            582
                        ],
                        "response_model_by_alias": [
                            583
                        ],
                        "response_model_exclude_unset": [
                            585
                        ],
                        "include_in_schema": [
                            587
                        ],
                        "response_class": [
                            588
                        ],
                        "self.default_response_class": [
                            588
                        ],
                        "name": [
                            589
                        ],
                        "callbacks": [
                            590
                        ],
                        "Callable": [
                            566
                        ]
                    },
                    "diff_line_number": 561,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "patch",
                    "function_code": "def patch(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.patch(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 593,
                    "variables": {
                        "str": [
                            614,
                            595,
                            599,
                            601,
                            602,
                            603,
                            604,
                            606
                        ],
                        "Type": [
                            613,
                            597
                        ],
                        "Any": [
                            604,
                            597
                        ],
                        "int": [
                            604,
                            598
                        ],
                        "List": [
                            615,
                            599
                        ],
                        "Sequence": [
                            600
                        ],
                        "Depends": [
                            600
                        ],
                        "Dict": [
                            604
                        ],
                        "Union": [
                            608,
                            604,
                            607
                        ],
                        "bool": [
                            609,
                            610,
                            611,
                            612,
                            634,
                            605
                        ],
                        "SetIntStr": [
                            608,
                            607
                        ],
                        "DictIntStrAny": [
                            608,
                            607
                        ],
                        "Response": [
                            613
                        ],
                        "routing.APIRoute": [
                            615
                        ],
                        "routing": [
                            615
                        ],
                        "set": [
                            608
                        ],
                        "response_model_skip_defaults": [
                            617,
                            635
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            618
                        ],
                        "self.router.patch": [
                            619
                        ],
                        "self.router": [
                            619
                        ],
                        "self": [
                            619,
                            638
                        ],
                        "path": [
                            620
                        ],
                        "response_model": [
                            621
                        ],
                        "status_code": [
                            622
                        ],
                        "tags": [
                            623
                        ],
                        "dependencies": [
                            624
                        ],
                        "summary": [
                            625
                        ],
                        "description": [
                            626
                        ],
                        "response_description": [
                            627
                        ],
                        "responses": [
                            628
                        ],
                        "deprecated": [
                            629
                        ],
                        "operation_id": [
                            630
                        ],
                        "response_model_include": [
                            631
                        ],
                        "response_model_exclude": [
                            632
                        ],
                        "response_model_by_alias": [
                            633
                        ],
                        "response_model_exclude_unset": [
                            635
                        ],
                        "include_in_schema": [
                            637
                        ],
                        "response_class": [
                            638
                        ],
                        "self.default_response_class": [
                            638
                        ],
                        "name": [
                            639
                        ],
                        "callbacks": [
                            640
                        ],
                        "Callable": [
                            616
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            613,
                            597
                        ],
                        "Any": [
                            604,
                            597
                        ],
                        "List": [
                            615,
                            599
                        ],
                        "Sequence": [
                            600
                        ],
                        "Depends": [
                            600
                        ],
                        "Dict": [
                            604
                        ],
                        "Union": [
                            608,
                            604,
                            607
                        ],
                        "SetIntStr": [
                            608,
                            607
                        ],
                        "DictIntStrAny": [
                            608,
                            607
                        ],
                        "Response": [
                            613
                        ],
                        "routing.APIRoute": [
                            615
                        ],
                        "routing": [
                            615
                        ],
                        "response_model_skip_defaults": [
                            617,
                            635
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            618
                        ],
                        "self.router.patch": [
                            619
                        ],
                        "self.router": [
                            619
                        ],
                        "self": [
                            619,
                            638
                        ],
                        "path": [
                            620
                        ],
                        "response_model": [
                            621
                        ],
                        "status_code": [
                            622
                        ],
                        "tags": [
                            623
                        ],
                        "dependencies": [
                            624
                        ],
                        "summary": [
                            625
                        ],
                        "description": [
                            626
                        ],
                        "response_description": [
                            627
                        ],
                        "responses": [
                            628
                        ],
                        "deprecated": [
                            629
                        ],
                        "operation_id": [
                            630
                        ],
                        "response_model_include": [
                            631
                        ],
                        "response_model_exclude": [
                            632
                        ],
                        "response_model_by_alias": [
                            633
                        ],
                        "response_model_exclude_unset": [
                            635
                        ],
                        "include_in_schema": [
                            637
                        ],
                        "response_class": [
                            638
                        ],
                        "self.default_response_class": [
                            638
                        ],
                        "name": [
                            639
                        ],
                        "callbacks": [
                            640
                        ],
                        "Callable": [
                            616
                        ]
                    },
                    "diff_line_number": 611,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "trace",
                    "function_code": "def trace(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.trace(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 643,
                    "variables": {
                        "str": [
                            645,
                            649,
                            651,
                            652,
                            653,
                            654,
                            656,
                            664
                        ],
                        "Type": [
                            663,
                            647
                        ],
                        "Any": [
                            654,
                            647
                        ],
                        "int": [
                            648,
                            654
                        ],
                        "List": [
                            649,
                            665
                        ],
                        "Sequence": [
                            650
                        ],
                        "Depends": [
                            650
                        ],
                        "Dict": [
                            654
                        ],
                        "Union": [
                            657,
                            658,
                            654
                        ],
                        "bool": [
                            684,
                            655,
                            659,
                            660,
                            661,
                            662
                        ],
                        "SetIntStr": [
                            657,
                            658
                        ],
                        "DictIntStrAny": [
                            657,
                            658
                        ],
                        "Response": [
                            663
                        ],
                        "routing.APIRoute": [
                            665
                        ],
                        "routing": [
                            665
                        ],
                        "set": [
                            658
                        ],
                        "response_model_skip_defaults": [
                            667,
                            685
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            668
                        ],
                        "self.router.trace": [
                            669
                        ],
                        "self.router": [
                            669
                        ],
                        "self": [
                            688,
                            669
                        ],
                        "path": [
                            670
                        ],
                        "response_model": [
                            671
                        ],
                        "status_code": [
                            672
                        ],
                        "tags": [
                            673
                        ],
                        "dependencies": [
                            674
                        ],
                        "summary": [
                            675
                        ],
                        "description": [
                            676
                        ],
                        "response_description": [
                            677
                        ],
                        "responses": [
                            678
                        ],
                        "deprecated": [
                            679
                        ],
                        "operation_id": [
                            680
                        ],
                        "response_model_include": [
                            681
                        ],
                        "response_model_exclude": [
                            682
                        ],
                        "response_model_by_alias": [
                            683
                        ],
                        "response_model_exclude_unset": [
                            685
                        ],
                        "include_in_schema": [
                            687
                        ],
                        "response_class": [
                            688
                        ],
                        "self.default_response_class": [
                            688
                        ],
                        "name": [
                            689
                        ],
                        "callbacks": [
                            690
                        ],
                        "Callable": [
                            666
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            663,
                            647
                        ],
                        "Any": [
                            654,
                            647
                        ],
                        "List": [
                            649,
                            665
                        ],
                        "Sequence": [
                            650
                        ],
                        "Depends": [
                            650
                        ],
                        "Dict": [
                            654
                        ],
                        "Union": [
                            657,
                            658,
                            654
                        ],
                        "SetIntStr": [
                            657,
                            658
                        ],
                        "DictIntStrAny": [
                            657,
                            658
                        ],
                        "Response": [
                            663
                        ],
                        "routing.APIRoute": [
                            665
                        ],
                        "routing": [
                            665
                        ],
                        "response_model_skip_defaults": [
                            667,
                            685
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            668
                        ],
                        "self.router.trace": [
                            669
                        ],
                        "self.router": [
                            669
                        ],
                        "self": [
                            688,
                            669
                        ],
                        "path": [
                            670
                        ],
                        "response_model": [
                            671
                        ],
                        "status_code": [
                            672
                        ],
                        "tags": [
                            673
                        ],
                        "dependencies": [
                            674
                        ],
                        "summary": [
                            675
                        ],
                        "description": [
                            676
                        ],
                        "response_description": [
                            677
                        ],
                        "responses": [
                            678
                        ],
                        "deprecated": [
                            679
                        ],
                        "operation_id": [
                            680
                        ],
                        "response_model_include": [
                            681
                        ],
                        "response_model_exclude": [
                            682
                        ],
                        "response_model_by_alias": [
                            683
                        ],
                        "response_model_exclude_unset": [
                            685
                        ],
                        "include_in_schema": [
                            687
                        ],
                        "response_class": [
                            688
                        ],
                        "self.default_response_class": [
                            688
                        ],
                        "name": [
                            689
                        ],
                        "callbacks": [
                            690
                        ],
                        "Callable": [
                            666
                        ]
                    },
                    "diff_line_number": 661,
                    "class_data": {
                        "signature": "class FastAPI(Starlette)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, debug: bool=False, routes: List[BaseRoute]=None, title: str='FastAPI', description: str='', version: str='0.1.0', openapi_url: Optional[str]='/openapi.json', openapi_prefix: str='', default_response_class: Type[Response]=JSONResponse, docs_url: Optional[str]='/docs', redoc_url: Optional[str]='/redoc', swagger_ui_oauth2_redirect_url: Optional[str]='/docs/oauth2-redirect', swagger_ui_init_oauth: Optional[dict]=None, middleware: Sequence[Middleware]=None, exception_handlers: Dict[Union[int, Type[Exception]], Callable]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None, **extra: Dict[str, Any]) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(routes, dependency_overrides_provider=self, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.exception_handlers = {} if exception_handlers is None else dict(exception_handlers)\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip('/')\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n    self.openapi_version = '3.0.2'\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, 'The openapi_url is required for the docs'\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                            "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(title=self.title, version=self.version, openapi_version=self.openapi_version, description=self.description, routes=self.routes, openapi_prefix=self.openapi_prefix)\n    return self.openapi_schema",
                            "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n            self.add_route(self.swagger_ui_oauth2_redirect_url, swagger_ui_redirect, include_in_schema=False)\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(RequestValidationError, request_validation_exception_handler)",
                            "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope['fastapi_astack'] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    self.router.add_api_route(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: routing.APIRouter, *, prefix: str='', tags: List[str]=None, dependencies: Sequence[Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    self.router.include_router(router, prefix=prefix, tags=tags, dependencies=dependencies, responses=responses or {}, default_response_class=default_response_class or self.default_response_class)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.get(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.put(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.post(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.delete(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, operation_id=operation_id, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.options(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.head(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.patch(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.router.trace(path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                            "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                            "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(openapi_url=openapi_url, title=self.title + ' - Swagger UI', oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url, init_oauth=self.swagger_ui_init_oauth)",
                            "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(openapi_url=openapi_url, title=self.title + ' - ReDoc')",
                            "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
                        ],
                        "constructor_variables": [
                            "_debug",
                            "openapi_url",
                            "redoc_url",
                            "user_middleware",
                            "description",
                            "swagger_ui_init_oauth",
                            "openapi_version",
                            "default_response_class",
                            "version",
                            "extra",
                            "swagger_ui_oauth2_redirect_url",
                            "docs_url",
                            "title",
                            "openapi_prefix",
                            "middleware_stack",
                            "state",
                            "exception_handlers"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, **extra: Dict[str, Any]) -> None",
                            "openapi(self) -> Dict",
                            "setup(self) -> None",
                            "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: routing.APIRouter) -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "openapi(req: Request) -> JSONResponse",
                            "swagger_ui_html(req: Request) -> HTMLResponse",
                            "redoc_html(req: Request) -> HTMLResponse",
                            "swagger_ui_redirect(req: Request) -> HTMLResponse"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(\n    self,\n    *,\n    debug: bool = False,\n    routes: List[BaseRoute] = None,\n    title: str = \"FastAPI\",\n    description: str = \"\",\n    version: str = \"0.1.0\",\n    openapi_url: Optional[str] = \"/openapi.json\",\n    openapi_prefix: str = \"\",\n    default_response_class: Type[Response] = JSONResponse,\n    docs_url: Optional[str] = \"/docs\",\n    redoc_url: Optional[str] = \"/redoc\",\n    swagger_ui_oauth2_redirect_url: Optional[str] = \"/docs/oauth2-redirect\",\n    swagger_ui_init_oauth: Optional[dict] = None,\n    middleware: Sequence[Middleware] = None,\n    exception_handlers: Dict[Union[int, Type[Exception]], Callable] = None,\n    on_startup: Sequence[Callable] = None,\n    on_shutdown: Sequence[Callable] = None,\n    **extra: Dict[str, Any],\n) -> None:\n    self.default_response_class = default_response_class\n    self._debug = debug\n    self.state = State()\n    self.router: routing.APIRouter = routing.APIRouter(\n        routes,\n        dependency_overrides_provider=self,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n    )\n    self.exception_handlers = (\n        {} if exception_handlers is None else dict(exception_handlers)\n    )\n\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack = self.build_middleware_stack()\n\n    self.title = title\n    self.description = description\n    self.version = version\n    self.openapi_url = openapi_url\n    self.openapi_prefix = openapi_prefix.rstrip(\"/\")\n    self.docs_url = docs_url\n    self.redoc_url = redoc_url\n    self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n    self.swagger_ui_init_oauth = swagger_ui_init_oauth\n    self.extra = extra\n    self.dependency_overrides: Dict[Callable, Callable] = {}\n\n    self.openapi_version = \"3.0.2\"\n\n    if self.openapi_url:\n        assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n        assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n\n    if self.docs_url or self.redoc_url:\n        assert self.openapi_url, \"The openapi_url is required for the docs\"\n    self.openapi_schema: Optional[Dict[str, Any]] = None\n    self.setup()",
                "def openapi(self) -> Dict:\n    if not self.openapi_schema:\n        self.openapi_schema = get_openapi(\n            title=self.title,\n            version=self.version,\n            openapi_version=self.openapi_version,\n            description=self.description,\n            routes=self.routes,\n            openapi_prefix=self.openapi_prefix,\n        )\n    return self.openapi_schema",
                "def setup(self) -> None:\n    if self.openapi_url:\n\n        async def openapi(req: Request) -> JSONResponse:\n            return JSONResponse(self.openapi())\n\n        self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        openapi_url = self.openapi_prefix + self.openapi_url\n    if self.openapi_url and self.docs_url:\n\n        async def swagger_ui_html(req: Request) -> HTMLResponse:\n            return get_swagger_ui_html(\n                openapi_url=openapi_url,\n                title=self.title + \" - Swagger UI\",\n                oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url,\n                init_oauth=self.swagger_ui_init_oauth,\n            )\n\n        self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n\n        if self.swagger_ui_oauth2_redirect_url:\n\n            async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                return get_swagger_ui_oauth2_redirect_html()\n\n            self.add_route(\n                self.swagger_ui_oauth2_redirect_url,\n                swagger_ui_redirect,\n                include_in_schema=False,\n            )\n    if self.openapi_url and self.redoc_url:\n\n        async def redoc_html(req: Request) -> HTMLResponse:\n            return get_redoc_html(\n                openapi_url=openapi_url, title=self.title + \" - ReDoc\"\n            )\n\n        self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n    self.add_exception_handler(HTTPException, http_exception_handler)\n    self.add_exception_handler(\n        RequestValidationError, request_validation_exception_handler\n    )",
                "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n    if AsyncExitStack:\n        async with AsyncExitStack() as stack:\n            scope[\"fastapi_astack\"] = stack\n            await super().__call__(scope, receive, send)\n    else:\n        await super().__call__(scope, receive, send)  # pragma: no cover",
                "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    self.router.add_api_route(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n    )",
                "def api_route(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n\n    def decorator(func: Callable) -> Callable:\n        self.router.add_api_route(\n            path,\n            func,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags or [],\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses or {},\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=bool(\n                response_model_exclude_unset or response_model_skip_defaults\n            ),\n            include_in_schema=include_in_schema,\n            response_class=response_class or self.default_response_class,\n            name=name,\n        )\n        return func\n\n    return decorator",
                "def add_api_websocket_route(\n    self, path: str, endpoint: Callable, name: str = None\n) -> None:\n    self.router.add_api_websocket_route(path, endpoint, name=name)",
                "def websocket(self, path: str, name: str = None) -> Callable:\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n\n    return decorator",
                "def include_router(\n    self,\n    router: routing.APIRouter,\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    default_response_class: Optional[Type[Response]] = None,\n) -> None:\n    self.router.include_router(\n        router,\n        prefix=prefix,\n        tags=tags,\n        dependencies=dependencies,\n        responses=responses or {},\n        default_response_class=default_response_class\n        or self.default_response_class,\n    )",
                "def get(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.get(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def put(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.put(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def post(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.post(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def delete(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.delete(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        operation_id=operation_id,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def options(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.options(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def head(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.head(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def patch(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.patch(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def trace(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[routing.APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.router.trace(\n        path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def decorator(func: Callable) -> Callable:\n    self.router.add_api_route(\n        path,\n        func,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n    )\n    return func",
                "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func",
                "async def openapi(req: Request) -> JSONResponse:\n    return JSONResponse(self.openapi())",
                "async def swagger_ui_html(req: Request) -> HTMLResponse:\n    return get_swagger_ui_html(\n        openapi_url=openapi_url,\n        title=self.title + \" - Swagger UI\",\n        oauth2_redirect_url=self.swagger_ui_oauth2_redirect_url,\n        init_oauth=self.swagger_ui_init_oauth,\n    )",
                "async def redoc_html(req: Request) -> HTMLResponse:\n    return get_redoc_html(\n        openapi_url=openapi_url, title=self.title + \" - ReDoc\"\n    )",
                "async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n    return get_swagger_ui_oauth2_redirect_html()"
            ],
            "inscope_function_signatures": [
                "__init__(self, **extra: Dict[str, Any]) -> None",
                "openapi(self) -> Dict",
                "setup(self) -> None",
                "__call__(self, scope: Scope, receive: Receive, send: Send) -> None",
                "add_api_route(self, path: str, endpoint: Callable) -> None",
                "api_route(self, path: str) -> Callable",
                "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                "websocket(self, path: str, name: str=None) -> Callable",
                "include_router(self, router: routing.APIRouter) -> None",
                "get(self, path: str) -> Callable",
                "put(self, path: str) -> Callable",
                "post(self, path: str) -> Callable",
                "delete(self, path: str) -> Callable",
                "options(self, path: str) -> Callable",
                "head(self, path: str) -> Callable",
                "patch(self, path: str) -> Callable",
                "trace(self, path: str) -> Callable",
                "decorator(func: Callable) -> Callable",
                "decorator(func: Callable) -> Callable",
                "openapi(req: Request) -> JSONResponse",
                "swagger_ui_html(req: Request) -> HTMLResponse",
                "redoc_html(req: Request) -> HTMLResponse",
                "swagger_ui_redirect(req: Request) -> HTMLResponse"
            ],
            "variables_in_file": {
                "Starlette": [
                    29
                ],
                "bool": [
                    384,
                    512,
                    655,
                    659,
                    660,
                    405,
                    534,
                    661,
                    662,
                    409,
                    410,
                    411,
                    412,
                    33,
                    166,
                    171,
                    172,
                    173,
                    174,
                    555,
                    559,
                    305,
                    434,
                    560,
                    561,
                    309,
                    310,
                    311,
                    312,
                    562,
                    197,
                    455,
                    584,
                    459,
                    460,
                    461,
                    334,
                    462,
                    217,
                    605,
                    222,
                    223,
                    224,
                    225,
                    609,
                    355,
                    484,
                    610,
                    611,
                    359,
                    360,
                    361,
                    362,
                    612,
                    684,
                    634,
                    505,
                    250,
                    509,
                    510,
                    511
                ],
                "List": [
                    515,
                    649,
                    399,
                    278,
                    665,
                    415,
                    160,
                    34,
                    549,
                    167,
                    299,
                    565,
                    315,
                    449,
                    465,
                    211,
                    599,
                    218,
                    349,
                    615,
                    365,
                    499
                ],
                "BaseRoute": [
                    34
                ],
                "str": [
                    514,
                    545,
                    35,
                    36,
                    37,
                    38,
                    39,
                    552,
                    41,
                    42,
                    43,
                    549,
                    551,
                    553,
                    554,
                    556,
                    49,
                    564,
                    595,
                    87,
                    599,
                    601,
                    602,
                    603,
                    604,
                    606,
                    614,
                    645,
                    649,
                    651,
                    652,
                    653,
                    654,
                    656,
                    664,
                    155,
                    160,
                    162,
                    163,
                    164,
                    165,
                    167,
                    168,
                    176,
                    207,
                    211,
                    213,
                    214,
                    215,
                    216,
                    218,
                    219,
                    227,
                    262,
                    266,
                    277,
                    278,
                    280,
                    295,
                    299,
                    301,
                    302,
                    303,
                    304,
                    306,
                    314,
                    345,
                    349,
                    351,
                    352,
                    353,
                    354,
                    356,
                    364,
                    395,
                    399,
                    401,
                    402,
                    403,
                    404,
                    406,
                    414,
                    445,
                    449,
                    451,
                    452,
                    453,
                    454,
                    456,
                    464,
                    495,
                    499,
                    501,
                    502,
                    503,
                    504,
                    506
                ],
                "Optional": [
                    38,
                    41,
                    42,
                    43,
                    44,
                    87,
                    281
                ],
                "Type": [
                    513,
                    647,
                    397,
                    663,
                    281,
                    413,
                    158,
                    547,
                    40,
                    297,
                    46,
                    175,
                    563,
                    313,
                    447,
                    463,
                    209,
                    597,
                    347,
                    226,
                    613,
                    363,
                    497
                ],
                "Response": [
                    513,
                    226,
                    613,
                    313,
                    40,
                    363,
                    175,
                    463,
                    563,
                    663,
                    281,
                    413
                ],
                "dict": [
                    44,
                    61
                ],
                "Sequence": [
                    161,
                    450,
                    550,
                    650,
                    300,
                    45,
                    47,
                    48,
                    400,
                    212,
                    500,
                    279,
                    600,
                    350
                ],
                "Middleware": [
                    45
                ],
                "Dict": [
                    280,
                    354,
                    165,
                    454,
                    504,
                    554,
                    77,
                    46,
                    654,
                    304,
                    49,
                    404,
                    87,
                    216,
                    90,
                    604
                ],
                "Union": [
                    654,
                    657,
                    658,
                    404,
                    407,
                    280,
                    408,
                    165,
                    169,
                    170,
                    554,
                    557,
                    46,
                    558,
                    304,
                    307,
                    308,
                    454,
                    457,
                    458,
                    216,
                    220,
                    221,
                    604,
                    607,
                    608,
                    354,
                    357,
                    358,
                    504,
                    507,
                    508
                ],
                "int": [
                    648,
                    398,
                    654,
                    404,
                    280,
                    159,
                    548,
                    165,
                    298,
                    554,
                    46,
                    304,
                    448,
                    454,
                    210,
                    598,
                    216,
                    348,
                    604,
                    354,
                    498,
                    504
                ],
                "Exception": [
                    46
                ],
                "Callable": [
                    416,
                    228,
                    516,
                    262,
                    232,
                    616,
                    266,
                    267,
                    77,
                    46,
                    47,
                    48,
                    366,
                    466,
                    316,
                    566,
                    666,
                    156
                ],
                "JSONResponse": [
                    40,
                    105,
                    106
                ],
                "Any": [
                    647,
                    397,
                    654,
                    404,
                    280,
                    158,
                    547,
                    165,
                    297,
                    554,
                    304,
                    49,
                    447,
                    454,
                    209,
                    597,
                    87,
                    216,
                    347,
                    604,
                    354,
                    497,
                    504
                ],
                "self.default_response_class": [
                    290,
                    388,
                    488,
                    201,
                    638,
                    588,
                    688,
                    338,
                    51,
                    438,
                    538,
                    254
                ],
                "self": [
                    519,
                    538,
                    51,
                    52,
                    53,
                    54,
                    56,
                    569,
                    60,
                    64,
                    65,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    588,
                    79,
                    81,
                    82,
                    83,
                    85,
                    86,
                    87,
                    88,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    100,
                    103,
                    106,
                    619,
                    108,
                    109,
                    110,
                    115,
                    116,
                    117,
                    120,
                    122,
                    638,
                    127,
                    128,
                    132,
                    136,
                    139,
                    140,
                    141,
                    669,
                    688,
                    180,
                    201,
                    233,
                    254,
                    264,
                    268,
                    283,
                    290,
                    319,
                    338,
                    369,
                    388,
                    419,
                    438,
                    469,
                    488
                ],
                "default_response_class": [
                    289,
                    51
                ],
                "self._debug": [
                    52
                ],
                "debug": [
                    52
                ],
                "self.state": [
                    53
                ],
                "State": [
                    53
                ],
                "self.router": [
                    419,
                    519,
                    264,
                    233,
                    619,
                    369,
                    180,
                    469,
                    54,
                    569,
                    283,
                    669,
                    319
                ],
                "routing.APIRouter": [
                    275,
                    54
                ],
                "routing": [
                    515,
                    615,
                    365,
                    465,
                    275,
                    565,
                    54,
                    665,
                    315,
                    415
                ],
                "routes": [
                    55
                ],
                "on_startup": [
                    57
                ],
                "on_shutdown": [
                    58
                ],
                "self.exception_handlers": [
                    60
                ],
                "exception_handlers": [
                    61
                ],
                "self.user_middleware": [
                    64
                ],
                "middleware": [
                    64
                ],
                "list": [
                    64
                ],
                "self.middleware_stack": [
                    65
                ],
                "self.build_middleware_stack": [
                    65
                ],
                "self.title": [
                    67,
                    136,
                    82,
                    115,
                    93
                ],
                "title": [
                    67
                ],
                "self.description": [
                    96,
                    68
                ],
                "description": [
                    576,
                    68,
                    676,
                    326,
                    426,
                    526,
                    241,
                    626,
                    376,
                    476,
                    188
                ],
                "self.version": [
                    83,
                    69,
                    94
                ],
                "version": [
                    69
                ],
                "self.openapi_url": [
                    132,
                    70,
                    103,
                    108,
                    109,
                    110,
                    81,
                    86
                ],
                "openapi_url": [
                    136,
                    114,
                    109,
                    70
                ],
                "self.openapi_prefix": [
                    98,
                    109,
                    71
                ],
                "openapi_prefix.rstrip": [
                    71
                ],
                "openapi_prefix": [
                    71
                ],
                "self.docs_url": [
                    72,
                    120,
                    85,
                    110
                ],
                "docs_url": [
                    72
                ],
                "self.redoc_url": [
                    73,
                    139,
                    132,
                    85
                ],
                "redoc_url": [
                    73
                ],
                "self.swagger_ui_oauth2_redirect_url": [
                    128,
                    74,
                    116,
                    122
                ],
                "swagger_ui_oauth2_redirect_url": [
                    74
                ],
                "self.swagger_ui_init_oauth": [
                    75,
                    117
                ],
                "swagger_ui_init_oauth": [
                    75
                ],
                "self.extra": [
                    76
                ],
                "extra": [
                    76
                ],
                "self.dependency_overrides": [
                    77
                ],
                "self.openapi_version": [
                    95,
                    79
                ],
                "self.openapi_schema": [
                    100,
                    91,
                    92,
                    87
                ],
                "self.setup": [
                    88
                ],
                "get_openapi": [
                    92
                ],
                "self.routes": [
                    97
                ],
                "Request": [
                    112,
                    105,
                    124,
                    134
                ],
                "self.openapi": [
                    106
                ],
                "self.add_route": [
                    120,
                    139,
                    108,
                    127
                ],
                "openapi": [
                    108
                ],
                "get_swagger_ui_html": [
                    113
                ],
                "HTMLResponse": [
                    112,
                    124,
                    134
                ],
                "swagger_ui_html": [
                    120
                ],
                "get_swagger_ui_oauth2_redirect_html": [
                    125
                ],
                "swagger_ui_redirect": [
                    129
                ],
                "get_redoc_html": [
                    135
                ],
                "redoc_html": [
                    139
                ],
                "self.add_exception_handler": [
                    140,
                    141
                ],
                "HTTPException": [
                    140
                ],
                "http_exception_handler": [
                    140
                ],
                "RequestValidationError": [
                    142
                ],
                "request_validation_exception_handler": [
                    142
                ],
                "Scope": [
                    145
                ],
                "Receive": [
                    145
                ],
                "Send": [
                    145
                ],
                "AsyncExitStack": [
                    146,
                    147
                ],
                "stack": [
                    147,
                    148
                ],
                "scope": [
                    148,
                    149,
                    151
                ],
                "__call__": [
                    149,
                    151
                ],
                "super": [
                    149,
                    151
                ],
                "receive": [
                    149,
                    151
                ],
                "send": [
                    149,
                    151
                ],
                "Depends": [
                    161,
                    450,
                    550,
                    650,
                    300,
                    400,
                    212,
                    500,
                    279,
                    600,
                    350
                ],
                "SetIntStr": [
                    657,
                    658,
                    407,
                    408,
                    169,
                    170,
                    557,
                    558,
                    307,
                    308,
                    457,
                    458,
                    220,
                    221,
                    607,
                    608,
                    357,
                    358,
                    507,
                    508
                ],
                "DictIntStrAny": [
                    657,
                    658,
                    407,
                    408,
                    169,
                    170,
                    557,
                    558,
                    307,
                    308,
                    457,
                    458,
                    220,
                    221,
                    607,
                    608,
                    357,
                    358,
                    507,
                    508
                ],
                "set": [
                    608,
                    358,
                    170,
                    458,
                    558,
                    658,
                    308,
                    408,
                    508,
                    221
                ],
                "response_model_skip_defaults": [
                    385,
                    517,
                    535,
                    667,
                    417,
                    685,
                    178,
                    435,
                    567,
                    317,
                    198,
                    585,
                    335,
                    467,
                    229,
                    485,
                    617,
                    367,
                    251,
                    635
                ],
                "warning_response_model_skip_defaults_deprecated": [
                    418,
                    230,
                    518,
                    618,
                    368,
                    179,
                    468,
                    568,
                    668,
                    318
                ],
                "self.router.add_api_route": [
                    233,
                    180
                ],
                "path": [
                    320,
                    420,
                    264,
                    520,
                    234,
                    268,
                    620,
                    370,
                    181,
                    470,
                    570,
                    670
                ],
                "endpoint": [
                    264,
                    182
                ],
                "response_model": [
                    321,
                    471,
                    421,
                    521,
                    236,
                    621,
                    371,
                    183,
                    571,
                    671
                ],
                "status_code": [
                    672,
                    322,
                    422,
                    472,
                    522,
                    237,
                    622,
                    372,
                    184,
                    572
                ],
                "tags": [
                    673,
                    323,
                    423,
                    523,
                    473,
                    238,
                    623,
                    373,
                    185,
                    573,
                    286
                ],
                "dependencies": [
                    674,
                    324,
                    424,
                    524,
                    239,
                    624,
                    474,
                    374,
                    186,
                    574,
                    287
                ],
                "summary": [
                    675,
                    325,
                    425,
                    525,
                    240,
                    625,
                    475,
                    375,
                    187,
                    575
                ],
                "response_description": [
                    477,
                    577,
                    677,
                    327,
                    427,
                    527,
                    242,
                    627,
                    377,
                    189
                ],
                "responses": [
                    288,
                    578,
                    478,
                    678,
                    328,
                    428,
                    528,
                    243,
                    628,
                    378,
                    190
                ],
                "deprecated": [
                    579,
                    679,
                    329,
                    479,
                    429,
                    529,
                    244,
                    629,
                    379,
                    191
                ],
                "methods": [
                    192,
                    245
                ],
                "operation_id": [
                    193,
                    483,
                    580,
                    680,
                    330,
                    430,
                    530,
                    246,
                    630,
                    380
                ],
                "response_model_include": [
                    480,
                    194,
                    581,
                    631,
                    681,
                    331,
                    431,
                    531,
                    247,
                    381
                ],
                "response_model_exclude": [
                    481,
                    195,
                    582,
                    682,
                    332,
                    632,
                    432,
                    532,
                    248,
                    382
                ],
                "response_model_by_alias": [
                    482,
                    196,
                    583,
                    683,
                    333,
                    433,
                    633,
                    533,
                    249,
                    383
                ],
                "response_model_exclude_unset": [
                    385,
                    485,
                    198,
                    635,
                    585,
                    685,
                    335,
                    435,
                    535,
                    251
                ],
                "include_in_schema": [
                    387,
                    637,
                    487,
                    200,
                    587,
                    687,
                    337,
                    437,
                    537,
                    253
                ],
                "response_class": [
                    388,
                    488,
                    201,
                    638,
                    588,
                    688,
                    338,
                    438,
                    538,
                    254
                ],
                "name": [
                    389,
                    264,
                    489,
                    202,
                    268,
                    589,
                    639,
                    689,
                    339,
                    439,
                    539,
                    255
                ],
                "func": [
                    257,
                    235,
                    268,
                    269
                ],
                "decorator": [
                    259,
                    271
                ],
                "self.router.add_api_websocket_route": [
                    264
                ],
                "self.add_api_websocket_route": [
                    268
                ],
                "self.router.include_router": [
                    283
                ],
                "router": [
                    284
                ],
                "prefix": [
                    285
                ],
                "routing.APIRoute": [
                    515,
                    615,
                    365,
                    465,
                    565,
                    665,
                    315,
                    415
                ],
                "self.router.get": [
                    319
                ],
                "callbacks": [
                    640,
                    390,
                    490,
                    590,
                    690,
                    340,
                    440,
                    540
                ],
                "self.router.put": [
                    369
                ],
                "self.router.post": [
                    419
                ],
                "self.router.delete": [
                    469
                ],
                "self.router.options": [
                    519
                ],
                "self.router.head": [
                    569
                ],
                "self.router.patch": [
                    619
                ],
                "self.router.trace": [
                    669
                ]
            },
            "filtered_variables_in_file": {
                "Starlette": [
                    29
                ],
                "List": [
                    515,
                    649,
                    399,
                    278,
                    665,
                    415,
                    160,
                    34,
                    549,
                    167,
                    299,
                    565,
                    315,
                    449,
                    465,
                    211,
                    599,
                    218,
                    349,
                    615,
                    365,
                    499
                ],
                "BaseRoute": [
                    34
                ],
                "Optional": [
                    38,
                    41,
                    42,
                    43,
                    44,
                    87,
                    281
                ],
                "Type": [
                    513,
                    647,
                    397,
                    663,
                    281,
                    413,
                    158,
                    547,
                    40,
                    297,
                    46,
                    175,
                    563,
                    313,
                    447,
                    463,
                    209,
                    597,
                    347,
                    226,
                    613,
                    363,
                    497
                ],
                "Response": [
                    513,
                    226,
                    613,
                    313,
                    40,
                    363,
                    175,
                    463,
                    563,
                    663,
                    281,
                    413
                ],
                "Sequence": [
                    161,
                    450,
                    550,
                    650,
                    300,
                    45,
                    47,
                    48,
                    400,
                    212,
                    500,
                    279,
                    600,
                    350
                ],
                "Middleware": [
                    45
                ],
                "Dict": [
                    280,
                    354,
                    165,
                    454,
                    504,
                    554,
                    77,
                    46,
                    654,
                    304,
                    49,
                    404,
                    87,
                    216,
                    90,
                    604
                ],
                "Union": [
                    654,
                    657,
                    658,
                    404,
                    407,
                    280,
                    408,
                    165,
                    169,
                    170,
                    554,
                    557,
                    46,
                    558,
                    304,
                    307,
                    308,
                    454,
                    457,
                    458,
                    216,
                    220,
                    221,
                    604,
                    607,
                    608,
                    354,
                    357,
                    358,
                    504,
                    507,
                    508
                ],
                "Callable": [
                    416,
                    228,
                    516,
                    262,
                    232,
                    616,
                    266,
                    267,
                    77,
                    46,
                    47,
                    48,
                    366,
                    466,
                    316,
                    566,
                    666,
                    156
                ],
                "JSONResponse": [
                    40,
                    105,
                    106
                ],
                "Any": [
                    647,
                    397,
                    654,
                    404,
                    280,
                    158,
                    547,
                    165,
                    297,
                    554,
                    304,
                    49,
                    447,
                    454,
                    209,
                    597,
                    87,
                    216,
                    347,
                    604,
                    354,
                    497,
                    504
                ],
                "self.default_response_class": [
                    290,
                    388,
                    488,
                    201,
                    638,
                    588,
                    688,
                    338,
                    51,
                    438,
                    538,
                    254
                ],
                "self": [
                    519,
                    538,
                    51,
                    52,
                    53,
                    54,
                    56,
                    569,
                    60,
                    64,
                    65,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    588,
                    79,
                    81,
                    82,
                    83,
                    85,
                    86,
                    87,
                    88,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    100,
                    103,
                    106,
                    619,
                    108,
                    109,
                    110,
                    115,
                    116,
                    117,
                    120,
                    122,
                    638,
                    127,
                    128,
                    132,
                    136,
                    139,
                    140,
                    141,
                    669,
                    688,
                    180,
                    201,
                    233,
                    254,
                    264,
                    268,
                    283,
                    290,
                    319,
                    338,
                    369,
                    388,
                    419,
                    438,
                    469,
                    488
                ],
                "default_response_class": [
                    289,
                    51
                ],
                "self._debug": [
                    52
                ],
                "debug": [
                    52
                ],
                "self.state": [
                    53
                ],
                "State": [
                    53
                ],
                "self.router": [
                    419,
                    519,
                    264,
                    233,
                    619,
                    369,
                    180,
                    469,
                    54,
                    569,
                    283,
                    669,
                    319
                ],
                "routing.APIRouter": [
                    275,
                    54
                ],
                "routing": [
                    515,
                    615,
                    365,
                    465,
                    275,
                    565,
                    54,
                    665,
                    315,
                    415
                ],
                "routes": [
                    55
                ],
                "on_startup": [
                    57
                ],
                "on_shutdown": [
                    58
                ],
                "self.exception_handlers": [
                    60
                ],
                "exception_handlers": [
                    61
                ],
                "self.user_middleware": [
                    64
                ],
                "middleware": [
                    64
                ],
                "self.middleware_stack": [
                    65
                ],
                "self.build_middleware_stack": [
                    65
                ],
                "self.title": [
                    67,
                    136,
                    82,
                    115,
                    93
                ],
                "title": [
                    67
                ],
                "self.description": [
                    96,
                    68
                ],
                "description": [
                    576,
                    68,
                    676,
                    326,
                    426,
                    526,
                    241,
                    626,
                    376,
                    476,
                    188
                ],
                "self.version": [
                    83,
                    69,
                    94
                ],
                "version": [
                    69
                ],
                "self.openapi_url": [
                    132,
                    70,
                    103,
                    108,
                    109,
                    110,
                    81,
                    86
                ],
                "openapi_url": [
                    136,
                    114,
                    109,
                    70
                ],
                "self.openapi_prefix": [
                    98,
                    109,
                    71
                ],
                "openapi_prefix.rstrip": [
                    71
                ],
                "openapi_prefix": [
                    71
                ],
                "self.docs_url": [
                    72,
                    120,
                    85,
                    110
                ],
                "docs_url": [
                    72
                ],
                "self.redoc_url": [
                    73,
                    139,
                    132,
                    85
                ],
                "redoc_url": [
                    73
                ],
                "self.swagger_ui_oauth2_redirect_url": [
                    128,
                    74,
                    116,
                    122
                ],
                "swagger_ui_oauth2_redirect_url": [
                    74
                ],
                "self.swagger_ui_init_oauth": [
                    75,
                    117
                ],
                "swagger_ui_init_oauth": [
                    75
                ],
                "self.extra": [
                    76
                ],
                "extra": [
                    76
                ],
                "self.dependency_overrides": [
                    77
                ],
                "self.openapi_version": [
                    95,
                    79
                ],
                "self.openapi_schema": [
                    100,
                    91,
                    92,
                    87
                ],
                "self.setup": [
                    88
                ],
                "get_openapi": [
                    92
                ],
                "self.routes": [
                    97
                ],
                "Request": [
                    112,
                    105,
                    124,
                    134
                ],
                "self.openapi": [
                    106
                ],
                "self.add_route": [
                    120,
                    139,
                    108,
                    127
                ],
                "openapi": [
                    108
                ],
                "get_swagger_ui_html": [
                    113
                ],
                "HTMLResponse": [
                    112,
                    124,
                    134
                ],
                "swagger_ui_html": [
                    120
                ],
                "get_swagger_ui_oauth2_redirect_html": [
                    125
                ],
                "swagger_ui_redirect": [
                    129
                ],
                "get_redoc_html": [
                    135
                ],
                "redoc_html": [
                    139
                ],
                "self.add_exception_handler": [
                    140,
                    141
                ],
                "HTTPException": [
                    140
                ],
                "http_exception_handler": [
                    140
                ],
                "RequestValidationError": [
                    142
                ],
                "request_validation_exception_handler": [
                    142
                ],
                "Scope": [
                    145
                ],
                "Receive": [
                    145
                ],
                "Send": [
                    145
                ],
                "AsyncExitStack": [
                    146,
                    147
                ],
                "stack": [
                    147,
                    148
                ],
                "scope": [
                    148,
                    149,
                    151
                ],
                "__call__": [
                    149,
                    151
                ],
                "receive": [
                    149,
                    151
                ],
                "send": [
                    149,
                    151
                ],
                "Depends": [
                    161,
                    450,
                    550,
                    650,
                    300,
                    400,
                    212,
                    500,
                    279,
                    600,
                    350
                ],
                "SetIntStr": [
                    657,
                    658,
                    407,
                    408,
                    169,
                    170,
                    557,
                    558,
                    307,
                    308,
                    457,
                    458,
                    220,
                    221,
                    607,
                    608,
                    357,
                    358,
                    507,
                    508
                ],
                "DictIntStrAny": [
                    657,
                    658,
                    407,
                    408,
                    169,
                    170,
                    557,
                    558,
                    307,
                    308,
                    457,
                    458,
                    220,
                    221,
                    607,
                    608,
                    357,
                    358,
                    507,
                    508
                ],
                "response_model_skip_defaults": [
                    385,
                    517,
                    535,
                    667,
                    417,
                    685,
                    178,
                    435,
                    567,
                    317,
                    198,
                    585,
                    335,
                    467,
                    229,
                    485,
                    617,
                    367,
                    251,
                    635
                ],
                "warning_response_model_skip_defaults_deprecated": [
                    418,
                    230,
                    518,
                    618,
                    368,
                    179,
                    468,
                    568,
                    668,
                    318
                ],
                "self.router.add_api_route": [
                    233,
                    180
                ],
                "path": [
                    320,
                    420,
                    264,
                    520,
                    234,
                    268,
                    620,
                    370,
                    181,
                    470,
                    570,
                    670
                ],
                "endpoint": [
                    264,
                    182
                ],
                "response_model": [
                    321,
                    471,
                    421,
                    521,
                    236,
                    621,
                    371,
                    183,
                    571,
                    671
                ],
                "status_code": [
                    672,
                    322,
                    422,
                    472,
                    522,
                    237,
                    622,
                    372,
                    184,
                    572
                ],
                "tags": [
                    673,
                    323,
                    423,
                    523,
                    473,
                    238,
                    623,
                    373,
                    185,
                    573,
                    286
                ],
                "dependencies": [
                    674,
                    324,
                    424,
                    524,
                    239,
                    624,
                    474,
                    374,
                    186,
                    574,
                    287
                ],
                "summary": [
                    675,
                    325,
                    425,
                    525,
                    240,
                    625,
                    475,
                    375,
                    187,
                    575
                ],
                "response_description": [
                    477,
                    577,
                    677,
                    327,
                    427,
                    527,
                    242,
                    627,
                    377,
                    189
                ],
                "responses": [
                    288,
                    578,
                    478,
                    678,
                    328,
                    428,
                    528,
                    243,
                    628,
                    378,
                    190
                ],
                "deprecated": [
                    579,
                    679,
                    329,
                    479,
                    429,
                    529,
                    244,
                    629,
                    379,
                    191
                ],
                "methods": [
                    192,
                    245
                ],
                "operation_id": [
                    193,
                    483,
                    580,
                    680,
                    330,
                    430,
                    530,
                    246,
                    630,
                    380
                ],
                "response_model_include": [
                    480,
                    194,
                    581,
                    631,
                    681,
                    331,
                    431,
                    531,
                    247,
                    381
                ],
                "response_model_exclude": [
                    481,
                    195,
                    582,
                    682,
                    332,
                    632,
                    432,
                    532,
                    248,
                    382
                ],
                "response_model_by_alias": [
                    482,
                    196,
                    583,
                    683,
                    333,
                    433,
                    633,
                    533,
                    249,
                    383
                ],
                "response_model_exclude_unset": [
                    385,
                    485,
                    198,
                    635,
                    585,
                    685,
                    335,
                    435,
                    535,
                    251
                ],
                "include_in_schema": [
                    387,
                    637,
                    487,
                    200,
                    587,
                    687,
                    337,
                    437,
                    537,
                    253
                ],
                "response_class": [
                    388,
                    488,
                    201,
                    638,
                    588,
                    688,
                    338,
                    438,
                    538,
                    254
                ],
                "name": [
                    389,
                    264,
                    489,
                    202,
                    268,
                    589,
                    639,
                    689,
                    339,
                    439,
                    539,
                    255
                ],
                "func": [
                    257,
                    235,
                    268,
                    269
                ],
                "decorator": [
                    259,
                    271
                ],
                "self.router.add_api_websocket_route": [
                    264
                ],
                "self.add_api_websocket_route": [
                    268
                ],
                "self.router.include_router": [
                    283
                ],
                "router": [
                    284
                ],
                "prefix": [
                    285
                ],
                "routing.APIRoute": [
                    515,
                    615,
                    365,
                    465,
                    565,
                    665,
                    315,
                    415
                ],
                "self.router.get": [
                    319
                ],
                "callbacks": [
                    640,
                    390,
                    490,
                    590,
                    690,
                    340,
                    440,
                    540
                ],
                "self.router.put": [
                    369
                ],
                "self.router.post": [
                    419
                ],
                "self.router.delete": [
                    469
                ],
                "self.router.options": [
                    519
                ],
                "self.router.head": [
                    569
                ],
                "self.router.patch": [
                    619
                ],
                "self.router.trace": [
                    669
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_1/fastapi/encoders.py": {
            "buggy_functions": [
                {
                    "function_name": "jsonable_encoder",
                    "function_code": "def jsonable_encoder(\n    obj: Any,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    skip_defaults: bool = None,\n    exclude_unset: bool = False,\n    include_none: bool = True,\n    custom_encoder: dict = {},\n    sqlalchemy_safe: bool = True,\n) -> Any:\n    if skip_defaults is not None:\n        logger.warning(  # pragma: nocover\n            \"skip_defaults in jsonable_encoder has been deprecated in favor of \"\n            \"exclude_unset to keep in line with Pydantic v1, support for it will be \"\n            \"removed soon.\"\n        )\n    if include is not None and not isinstance(include, set):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, set):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        encoder = getattr(obj.Config, \"json_encoders\", {})\n        if custom_encoder:\n            encoder.update(custom_encoder)\n        if PYDANTIC_1:\n            obj_dict = obj.dict(\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=bool(exclude_unset or skip_defaults),\n            )\n        else:  # pragma: nocover\n            obj_dict = obj.dict(\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                skip_defaults=bool(exclude_unset or skip_defaults),\n            )\n        return jsonable_encoder(\n            obj_dict,\n            include_none=include_none,\n            custom_encoder=encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or include_none)\n                and ((include and key in include) or key not in exclude)\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    include_none=include_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    include_none=include_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    include_none=include_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder(obj)\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    errors: List[Exception] = []\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors)\n    return jsonable_encoder(\n        data,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        include_none=include_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 30,
                    "variables": {
                        "Any": [
                            40,
                            31
                        ],
                        "Union": [
                            32,
                            33
                        ],
                        "SetIntStr": [
                            32,
                            33
                        ],
                        "DictIntStrAny": [
                            32,
                            33
                        ],
                        "bool": [
                            34,
                            35,
                            36,
                            37,
                            67,
                            39,
                            60
                        ],
                        "dict": [
                            144,
                            81,
                            38
                        ],
                        "set": [
                            33,
                            47,
                            48,
                            49,
                            50,
                            111
                        ],
                        "skip_defaults": [
                            41,
                            67,
                            60
                        ],
                        "logger.warning": [
                            42
                        ],
                        "logger": [
                            42
                        ],
                        "include": [
                            64,
                            47,
                            48,
                            117,
                            57,
                            91
                        ],
                        "isinstance": [
                            133,
                            75,
                            139,
                            77,
                            47,
                            79,
                            49,
                            81,
                            51,
                            111,
                            87
                        ],
                        "exclude": [
                            65,
                            49,
                            50,
                            118,
                            58,
                            91
                        ],
                        "obj": [
                            129,
                            130,
                            133,
                            134,
                            136,
                            137,
                            139,
                            140,
                            144,
                            148,
                            51,
                            52,
                            56,
                            63,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            83,
                            111,
                            113
                        ],
                        "BaseModel": [
                            51
                        ],
                        "encoder": [
                            132,
                            134,
                            72,
                            138,
                            140,
                            52,
                            54
                        ],
                        "getattr": [
                            52
                        ],
                        "obj.Config": [
                            52
                        ],
                        "custom_encoder": [
                            128,
                            129,
                            98,
                            130,
                            132,
                            106,
                            53,
                            54,
                            122,
                            157
                        ],
                        "encoder.update": [
                            54
                        ],
                        "PYDANTIC_1": [
                            55
                        ],
                        "obj_dict": [
                            56,
                            70,
                            63
                        ],
                        "obj.dict": [
                            56,
                            63
                        ],
                        "by_alias": [
                            66,
                            103,
                            119,
                            154,
                            59,
                            95
                        ],
                        "exclude_unset": [
                            96,
                            67,
                            104,
                            120,
                            155,
                            60
                        ],
                        "jsonable_encoder": [
                            101,
                            69,
                            115,
                            152,
                            93
                        ],
                        "include_none": [
                            97,
                            71,
                            105,
                            121,
                            90,
                            156
                        ],
                        "sqlalchemy_safe": [
                            99,
                            73,
                            107,
                            86,
                            123,
                            158
                        ],
                        "Enum": [
                            75
                        ],
                        "obj.value": [
                            76
                        ],
                        "PurePath": [
                            77
                        ],
                        "str": [
                            87,
                            78,
                            79
                        ],
                        "int": [
                            79
                        ],
                        "float": [
                            79
                        ],
                        "type": [
                            129,
                            130,
                            136,
                            137,
                            79
                        ],
                        "encoded_dict": [
                            82,
                            109,
                            110
                        ],
                        "key": [
                            83,
                            87,
                            88,
                            91,
                            94
                        ],
                        "value": [
                            90,
                            83,
                            102
                        ],
                        "obj.items": [
                            83
                        ],
                        "key.startswith": [
                            88
                        ],
                        "encoded_key": [
                            109,
                            93
                        ],
                        "encoded_value": [
                            109,
                            101
                        ],
                        "list": [
                            111
                        ],
                        "frozenset": [
                            111
                        ],
                        "GeneratorType": [
                            111
                        ],
                        "tuple": [
                            111
                        ],
                        "encoded_list": [
                            112,
                            114,
                            126
                        ],
                        "item": [
                            113,
                            116
                        ],
                        "encoded_list.append": [
                            114
                        ],
                        "encoder_type": [
                            132,
                            133
                        ],
                        "custom_encoder.items": [
                            132
                        ],
                        "ENCODERS_BY_TYPE": [
                            136,
                            137
                        ],
                        "classes_tuple": [
                            138,
                            139
                        ],
                        "encoders_by_class_tuples.items": [
                            138
                        ],
                        "encoders_by_class_tuples": [
                            138
                        ],
                        "errors": [
                            146,
                            150,
                            142,
                            151
                        ],
                        "List": [
                            142
                        ],
                        "Exception": [
                            145,
                            149,
                            142
                        ],
                        "data": [
                            144,
                            153,
                            148
                        ],
                        "errors.append": [
                            146,
                            150
                        ],
                        "e": [
                            146,
                            150
                        ],
                        "vars": [
                            148
                        ],
                        "ValueError": [
                            151
                        ]
                    },
                    "filtered_variables": {
                        "Any": [
                            40,
                            31
                        ],
                        "Union": [
                            32,
                            33
                        ],
                        "SetIntStr": [
                            32,
                            33
                        ],
                        "DictIntStrAny": [
                            32,
                            33
                        ],
                        "skip_defaults": [
                            41,
                            67,
                            60
                        ],
                        "logger.warning": [
                            42
                        ],
                        "logger": [
                            42
                        ],
                        "include": [
                            64,
                            47,
                            48,
                            117,
                            57,
                            91
                        ],
                        "exclude": [
                            65,
                            49,
                            50,
                            118,
                            58,
                            91
                        ],
                        "obj": [
                            129,
                            130,
                            133,
                            134,
                            136,
                            137,
                            139,
                            140,
                            144,
                            148,
                            51,
                            52,
                            56,
                            63,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            83,
                            111,
                            113
                        ],
                        "BaseModel": [
                            51
                        ],
                        "encoder": [
                            132,
                            134,
                            72,
                            138,
                            140,
                            52,
                            54
                        ],
                        "obj.Config": [
                            52
                        ],
                        "custom_encoder": [
                            128,
                            129,
                            98,
                            130,
                            132,
                            106,
                            53,
                            54,
                            122,
                            157
                        ],
                        "encoder.update": [
                            54
                        ],
                        "PYDANTIC_1": [
                            55
                        ],
                        "obj_dict": [
                            56,
                            70,
                            63
                        ],
                        "obj.dict": [
                            56,
                            63
                        ],
                        "by_alias": [
                            66,
                            103,
                            119,
                            154,
                            59,
                            95
                        ],
                        "exclude_unset": [
                            96,
                            67,
                            104,
                            120,
                            155,
                            60
                        ],
                        "jsonable_encoder": [
                            101,
                            69,
                            115,
                            152,
                            93
                        ],
                        "include_none": [
                            97,
                            71,
                            105,
                            121,
                            90,
                            156
                        ],
                        "sqlalchemy_safe": [
                            99,
                            73,
                            107,
                            86,
                            123,
                            158
                        ],
                        "Enum": [
                            75
                        ],
                        "obj.value": [
                            76
                        ],
                        "PurePath": [
                            77
                        ],
                        "encoded_dict": [
                            82,
                            109,
                            110
                        ],
                        "key": [
                            83,
                            87,
                            88,
                            91,
                            94
                        ],
                        "value": [
                            90,
                            83,
                            102
                        ],
                        "obj.items": [
                            83
                        ],
                        "key.startswith": [
                            88
                        ],
                        "encoded_key": [
                            109,
                            93
                        ],
                        "encoded_value": [
                            109,
                            101
                        ],
                        "GeneratorType": [
                            111
                        ],
                        "encoded_list": [
                            112,
                            114,
                            126
                        ],
                        "item": [
                            113,
                            116
                        ],
                        "encoded_list.append": [
                            114
                        ],
                        "encoder_type": [
                            132,
                            133
                        ],
                        "custom_encoder.items": [
                            132
                        ],
                        "ENCODERS_BY_TYPE": [
                            136,
                            137
                        ],
                        "classes_tuple": [
                            138,
                            139
                        ],
                        "encoders_by_class_tuples.items": [
                            138
                        ],
                        "encoders_by_class_tuples": [
                            138
                        ],
                        "errors": [
                            146,
                            150,
                            142,
                            151
                        ],
                        "List": [
                            142
                        ],
                        "data": [
                            144,
                            153,
                            148
                        ],
                        "errors.append": [
                            146,
                            150
                        ],
                        "e": [
                            146,
                            150
                        ]
                    },
                    "diff_line_number": 37,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SetIntStr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DictIntStrAny": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_defaults": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "logger.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "include": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "obj": {
                                    "variable_value": "'bar'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.Config": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "custom_encoder": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "encoder.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.dict": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "by_alias": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "exclude_unset": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "jsonable_encoder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "include_none": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "sqlalchemy_safe": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Enum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "PurePath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorType": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "item": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_list.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoder_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_encoder.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10d41f040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ENCODERS_BY_TYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "classes_tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoders_by_class_tuples.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoders_by_class_tuples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SetIntStr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DictIntStrAny": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_defaults": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "logger.warning": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "include": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "obj": {
                                    "variable_value": "'foo'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.Config": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "custom_encoder": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "encoder.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj_dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.dict": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "by_alias": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "exclude_unset": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "exclude_none": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "exclude_defaults": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "jsonable_encoder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sqlalchemy_safe": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Enum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "PurePath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorType": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "item": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoded_list.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoder_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_encoder.items": {
                                    "variable_value": "<built-in method items of dict object at 0x10d257200>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ENCODERS_BY_TYPE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "classes_tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoders_by_class_tuples.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoders_by_class_tuples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def generate_encoders_by_class_tuples(\n    type_encoder_map: Dict[Any, Callable]\n) -> Dict[Callable, Tuple]:\n    encoders_by_classes: Dict[Callable, List] = {}\n    for type_, encoder in type_encoder_map.items():\n        encoders_by_classes.setdefault(encoder, []).append(type_)\n    encoders_by_class_tuples: Dict[Callable, Tuple] = {}\n    for encoder, classes in encoders_by_classes.items():\n        encoders_by_class_tuples[encoder] = tuple(classes)\n    return encoders_by_class_tuples",
                "def jsonable_encoder(\n    obj: Any,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    skip_defaults: bool = None,\n    exclude_unset: bool = False,\n    include_none: bool = True,\n    custom_encoder: dict = {},\n    sqlalchemy_safe: bool = True,\n) -> Any:\n    if skip_defaults is not None:\n        logger.warning(  # pragma: nocover\n            \"skip_defaults in jsonable_encoder has been deprecated in favor of \"\n            \"exclude_unset to keep in line with Pydantic v1, support for it will be \"\n            \"removed soon.\"\n        )\n    if include is not None and not isinstance(include, set):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, set):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        encoder = getattr(obj.Config, \"json_encoders\", {})\n        if custom_encoder:\n            encoder.update(custom_encoder)\n        if PYDANTIC_1:\n            obj_dict = obj.dict(\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=bool(exclude_unset or skip_defaults),\n            )\n        else:  # pragma: nocover\n            obj_dict = obj.dict(\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                skip_defaults=bool(exclude_unset or skip_defaults),\n            )\n        return jsonable_encoder(\n            obj_dict,\n            include_none=include_none,\n            custom_encoder=encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or include_none)\n                and ((include and key in include) or key not in exclude)\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    include_none=include_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    include_none=include_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    include_none=include_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder(obj)\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    errors: List[Exception] = []\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors)\n    return jsonable_encoder(\n        data,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        include_none=include_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )"
            ],
            "inscope_function_signatures": [
                "generate_encoders_by_class_tuples(type_encoder_map: Dict[Any, Callable]) -> Dict[Callable, Tuple]",
                "jsonable_encoder(obj: Any, include: Union[SetIntStr, DictIntStrAny]=None, exclude: Union[SetIntStr, DictIntStrAny]=set(), by_alias: bool=True, skip_defaults: bool=None, exclude_unset: bool=False, include_none: bool=True, custom_encoder: dict={}, sqlalchemy_safe: bool=True) -> Any"
            ],
            "variables_in_file": {
                "SetIntStr": [
                    32,
                    33,
                    11
                ],
                "Set": [
                    11
                ],
                "Union": [
                    32,
                    33,
                    11,
                    12
                ],
                "int": [
                    11,
                    12,
                    79
                ],
                "str": [
                    11,
                    12,
                    78,
                    79,
                    87
                ],
                "DictIntStrAny": [
                    32,
                    33,
                    12
                ],
                "Dict": [
                    12,
                    16,
                    17,
                    18,
                    21
                ],
                "Any": [
                    16,
                    40,
                    12,
                    31
                ],
                "Callable": [
                    16,
                    17,
                    18,
                    21
                ],
                "encoders_by_classes": [
                    18,
                    20,
                    22
                ],
                "List": [
                    18,
                    142
                ],
                "type_": [
                    19,
                    20
                ],
                "encoder": [
                    132,
                    134,
                    72,
                    138,
                    140,
                    19,
                    20,
                    52,
                    22,
                    23,
                    54
                ],
                "type_encoder_map.items": [
                    19
                ],
                "type_encoder_map": [
                    19
                ],
                "append": [
                    20
                ],
                "encoders_by_classes.setdefault": [
                    20
                ],
                "encoders_by_class_tuples": [
                    138,
                    21,
                    23,
                    24,
                    27
                ],
                "Tuple": [
                    17,
                    21
                ],
                "classes": [
                    22,
                    23
                ],
                "encoders_by_classes.items": [
                    22
                ],
                "tuple": [
                    111,
                    23
                ],
                "generate_encoders_by_class_tuples": [
                    27
                ],
                "ENCODERS_BY_TYPE": [
                    136,
                    137,
                    27
                ],
                "bool": [
                    34,
                    35,
                    36,
                    37,
                    67,
                    39,
                    60
                ],
                "dict": [
                    144,
                    81,
                    38
                ],
                "set": [
                    33,
                    47,
                    48,
                    49,
                    50,
                    111
                ],
                "skip_defaults": [
                    41,
                    67,
                    60
                ],
                "logger.warning": [
                    42
                ],
                "logger": [
                    42
                ],
                "include": [
                    64,
                    47,
                    48,
                    117,
                    57,
                    91
                ],
                "isinstance": [
                    133,
                    75,
                    139,
                    77,
                    47,
                    79,
                    49,
                    81,
                    51,
                    111,
                    87
                ],
                "exclude": [
                    65,
                    49,
                    50,
                    118,
                    58,
                    91
                ],
                "obj": [
                    129,
                    130,
                    133,
                    134,
                    136,
                    137,
                    139,
                    140,
                    144,
                    148,
                    51,
                    52,
                    56,
                    63,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    83,
                    111,
                    113
                ],
                "BaseModel": [
                    51
                ],
                "getattr": [
                    52
                ],
                "obj.Config": [
                    52
                ],
                "custom_encoder": [
                    128,
                    129,
                    98,
                    130,
                    132,
                    106,
                    53,
                    54,
                    122,
                    157
                ],
                "encoder.update": [
                    54
                ],
                "PYDANTIC_1": [
                    55
                ],
                "obj_dict": [
                    56,
                    70,
                    63
                ],
                "obj.dict": [
                    56,
                    63
                ],
                "by_alias": [
                    66,
                    103,
                    119,
                    154,
                    59,
                    95
                ],
                "exclude_unset": [
                    96,
                    67,
                    104,
                    120,
                    155,
                    60
                ],
                "jsonable_encoder": [
                    101,
                    69,
                    115,
                    152,
                    93
                ],
                "include_none": [
                    97,
                    71,
                    105,
                    121,
                    90,
                    156
                ],
                "sqlalchemy_safe": [
                    99,
                    73,
                    107,
                    86,
                    123,
                    158
                ],
                "Enum": [
                    75
                ],
                "obj.value": [
                    76
                ],
                "PurePath": [
                    77
                ],
                "float": [
                    79
                ],
                "type": [
                    129,
                    130,
                    136,
                    137,
                    79
                ],
                "encoded_dict": [
                    82,
                    109,
                    110
                ],
                "key": [
                    83,
                    87,
                    88,
                    91,
                    94
                ],
                "value": [
                    90,
                    83,
                    102
                ],
                "obj.items": [
                    83
                ],
                "key.startswith": [
                    88
                ],
                "encoded_key": [
                    109,
                    93
                ],
                "encoded_value": [
                    109,
                    101
                ],
                "list": [
                    111
                ],
                "frozenset": [
                    111
                ],
                "GeneratorType": [
                    111
                ],
                "encoded_list": [
                    112,
                    114,
                    126
                ],
                "item": [
                    113,
                    116
                ],
                "encoded_list.append": [
                    114
                ],
                "encoder_type": [
                    132,
                    133
                ],
                "custom_encoder.items": [
                    132
                ],
                "classes_tuple": [
                    138,
                    139
                ],
                "encoders_by_class_tuples.items": [
                    138
                ],
                "errors": [
                    146,
                    150,
                    142,
                    151
                ],
                "Exception": [
                    145,
                    149,
                    142
                ],
                "data": [
                    144,
                    153,
                    148
                ],
                "errors.append": [
                    146,
                    150
                ],
                "e": [
                    146,
                    150
                ],
                "vars": [
                    148
                ],
                "ValueError": [
                    151
                ]
            },
            "filtered_variables_in_file": {
                "SetIntStr": [
                    32,
                    33,
                    11
                ],
                "Set": [
                    11
                ],
                "Union": [
                    32,
                    33,
                    11,
                    12
                ],
                "DictIntStrAny": [
                    32,
                    33,
                    12
                ],
                "Dict": [
                    12,
                    16,
                    17,
                    18,
                    21
                ],
                "Any": [
                    16,
                    40,
                    12,
                    31
                ],
                "Callable": [
                    16,
                    17,
                    18,
                    21
                ],
                "encoders_by_classes": [
                    18,
                    20,
                    22
                ],
                "List": [
                    18,
                    142
                ],
                "type_": [
                    19,
                    20
                ],
                "encoder": [
                    132,
                    134,
                    72,
                    138,
                    140,
                    19,
                    20,
                    52,
                    22,
                    23,
                    54
                ],
                "type_encoder_map.items": [
                    19
                ],
                "type_encoder_map": [
                    19
                ],
                "append": [
                    20
                ],
                "encoders_by_classes.setdefault": [
                    20
                ],
                "encoders_by_class_tuples": [
                    138,
                    21,
                    23,
                    24,
                    27
                ],
                "Tuple": [
                    17,
                    21
                ],
                "classes": [
                    22,
                    23
                ],
                "encoders_by_classes.items": [
                    22
                ],
                "generate_encoders_by_class_tuples": [
                    27
                ],
                "ENCODERS_BY_TYPE": [
                    136,
                    137,
                    27
                ],
                "skip_defaults": [
                    41,
                    67,
                    60
                ],
                "logger.warning": [
                    42
                ],
                "logger": [
                    42
                ],
                "include": [
                    64,
                    47,
                    48,
                    117,
                    57,
                    91
                ],
                "exclude": [
                    65,
                    49,
                    50,
                    118,
                    58,
                    91
                ],
                "obj": [
                    129,
                    130,
                    133,
                    134,
                    136,
                    137,
                    139,
                    140,
                    144,
                    148,
                    51,
                    52,
                    56,
                    63,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    83,
                    111,
                    113
                ],
                "BaseModel": [
                    51
                ],
                "obj.Config": [
                    52
                ],
                "custom_encoder": [
                    128,
                    129,
                    98,
                    130,
                    132,
                    106,
                    53,
                    54,
                    122,
                    157
                ],
                "encoder.update": [
                    54
                ],
                "PYDANTIC_1": [
                    55
                ],
                "obj_dict": [
                    56,
                    70,
                    63
                ],
                "obj.dict": [
                    56,
                    63
                ],
                "by_alias": [
                    66,
                    103,
                    119,
                    154,
                    59,
                    95
                ],
                "exclude_unset": [
                    96,
                    67,
                    104,
                    120,
                    155,
                    60
                ],
                "jsonable_encoder": [
                    101,
                    69,
                    115,
                    152,
                    93
                ],
                "include_none": [
                    97,
                    71,
                    105,
                    121,
                    90,
                    156
                ],
                "sqlalchemy_safe": [
                    99,
                    73,
                    107,
                    86,
                    123,
                    158
                ],
                "Enum": [
                    75
                ],
                "obj.value": [
                    76
                ],
                "PurePath": [
                    77
                ],
                "encoded_dict": [
                    82,
                    109,
                    110
                ],
                "key": [
                    83,
                    87,
                    88,
                    91,
                    94
                ],
                "value": [
                    90,
                    83,
                    102
                ],
                "obj.items": [
                    83
                ],
                "key.startswith": [
                    88
                ],
                "encoded_key": [
                    109,
                    93
                ],
                "encoded_value": [
                    109,
                    101
                ],
                "GeneratorType": [
                    111
                ],
                "encoded_list": [
                    112,
                    114,
                    126
                ],
                "item": [
                    113,
                    116
                ],
                "encoded_list.append": [
                    114
                ],
                "encoder_type": [
                    132,
                    133
                ],
                "custom_encoder.items": [
                    132
                ],
                "classes_tuple": [
                    138,
                    139
                ],
                "encoders_by_class_tuples.items": [
                    138
                ],
                "errors": [
                    146,
                    150,
                    142,
                    151
                ],
                "data": [
                    144,
                    153,
                    148
                ],
                "errors.append": [
                    146,
                    150
                ],
                "e": [
                    146,
                    150
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_1/fastapi/openapi/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "get_openapi_security_definitions",
                    "function_code": "def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, List]:\n    security_definitions = {}\n    operation_security = []\n    for security_requirement in flat_dependant.security_requirements:\n        security_definition = jsonable_encoder(\n            security_requirement.security_scheme.model,\n            by_alias=True,\n            include_none=False,\n        )\n        security_name = security_requirement.security_scheme.scheme_name\n        security_definitions[security_name] = security_definition\n        operation_security.append({security_name: security_requirement.scopes})\n    return security_definitions, operation_security\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 77,
                    "variables": {
                        "Dependant": [
                            77
                        ],
                        "security_definitions": [
                            89,
                            78,
                            87
                        ],
                        "operation_security": [
                            88,
                            89,
                            79
                        ],
                        "security_requirement": [
                            80,
                            82,
                            88,
                            86
                        ],
                        "flat_dependant.security_requirements": [
                            80
                        ],
                        "flat_dependant": [
                            80
                        ],
                        "security_definition": [
                            81,
                            87
                        ],
                        "jsonable_encoder": [
                            81
                        ],
                        "security_requirement.security_scheme.model": [
                            82
                        ],
                        "security_requirement.security_scheme": [
                            82,
                            86
                        ],
                        "security_name": [
                            88,
                            86,
                            87
                        ],
                        "security_requirement.security_scheme.scheme_name": [
                            86
                        ],
                        "operation_security.append": [
                            88
                        ],
                        "security_requirement.scopes": [
                            88
                        ],
                        "Tuple": [
                            77
                        ],
                        "Dict": [
                            77
                        ],
                        "List": [
                            77
                        ]
                    },
                    "filtered_variables": {
                        "Dependant": [
                            77
                        ],
                        "security_definitions": [
                            89,
                            78,
                            87
                        ],
                        "operation_security": [
                            88,
                            89,
                            79
                        ],
                        "security_requirement": [
                            80,
                            82,
                            88,
                            86
                        ],
                        "flat_dependant.security_requirements": [
                            80
                        ],
                        "flat_dependant": [
                            80
                        ],
                        "security_definition": [
                            81,
                            87
                        ],
                        "jsonable_encoder": [
                            81
                        ],
                        "security_requirement.security_scheme.model": [
                            82
                        ],
                        "security_requirement.security_scheme": [
                            82,
                            86
                        ],
                        "security_name": [
                            88,
                            86,
                            87
                        ],
                        "security_requirement.security_scheme.scheme_name": [
                            86
                        ],
                        "operation_security.append": [
                            88
                        ],
                        "security_requirement.scopes": [
                            88
                        ],
                        "Tuple": [
                            77
                        ],
                        "Dict": [
                            77
                        ],
                        "List": [
                            77
                        ]
                    },
                    "diff_line_number": 84,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "get_openapi",
                    "function_code": "def get_openapi(\n    *,\n    title: str,\n    version: str,\n    openapi_version: str = \"3.0.2\",\n    description: str = None,\n    routes: Sequence[BaseRoute],\n    openapi_prefix: str = \"\"\n) -> Dict:\n    info = {\"title\": title, \"version\": version}\n    if description:\n        info[\"description\"] = description\n    output = {\"openapi\": openapi_version, \"info\": info}\n    components: Dict[str, Dict] = {}\n    paths: Dict[str, Dict] = {}\n    flat_models = get_flat_models_from_routes(routes)\n    model_name_map = get_model_name_map(flat_models)\n    definitions = get_model_definitions(\n        flat_models=flat_models, model_name_map=model_name_map\n    )\n    for route in routes:\n        if isinstance(route, routing.APIRoute):\n            result = get_openapi_path(route=route, model_name_map=model_name_map)\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    paths.setdefault(openapi_prefix + route.path_format, {}).update(\n                        path\n                    )\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    if definitions:\n        components[\"schemas\"] = {k: definitions[k] for k in sorted(definitions)}\n    if components:\n        output[\"components\"] = components\n    output[\"paths\"] = paths\n    return jsonable_encoder(OpenAPI(**output), by_alias=True, include_none=False)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 273,
                    "variables": {
                        "str": [
                            275,
                            276,
                            277,
                            278,
                            280,
                            286,
                            287
                        ],
                        "Sequence": [
                            279
                        ],
                        "BaseRoute": [
                            279
                        ],
                        "info": [
                            282,
                            284,
                            285
                        ],
                        "title": [
                            282
                        ],
                        "version": [
                            282
                        ],
                        "description": [
                            283,
                            284
                        ],
                        "output": [
                            312,
                            313,
                            285,
                            311
                        ],
                        "openapi_version": [
                            285
                        ],
                        "components": [
                            303,
                            309,
                            310,
                            311,
                            286
                        ],
                        "Dict": [
                            281,
                            286,
                            287
                        ],
                        "paths": [
                            312,
                            299,
                            287
                        ],
                        "flat_models": [
                            288,
                            289,
                            291
                        ],
                        "get_flat_models_from_routes": [
                            288
                        ],
                        "routes": [
                            288,
                            293
                        ],
                        "model_name_map": [
                            289,
                            291,
                            295
                        ],
                        "get_model_name_map": [
                            289
                        ],
                        "definitions": [
                            290,
                            307,
                            308,
                            309
                        ],
                        "get_model_definitions": [
                            290
                        ],
                        "route": [
                            299,
                            293,
                            294,
                            295
                        ],
                        "isinstance": [
                            294
                        ],
                        "routing.APIRoute": [
                            294
                        ],
                        "routing": [
                            294
                        ],
                        "result": [
                            296,
                            297,
                            295
                        ],
                        "get_openapi_path": [
                            295
                        ],
                        "path": [
                            297,
                            298,
                            300
                        ],
                        "security_schemes": [
                            304,
                            297,
                            302
                        ],
                        "path_definitions": [
                            297,
                            306,
                            307
                        ],
                        "update": [
                            299,
                            303
                        ],
                        "paths.setdefault": [
                            299
                        ],
                        "openapi_prefix": [
                            299
                        ],
                        "route.path_format": [
                            299
                        ],
                        "components.setdefault": [
                            303
                        ],
                        "definitions.update": [
                            307
                        ],
                        "k": [
                            309
                        ],
                        "sorted": [
                            309
                        ],
                        "jsonable_encoder": [
                            313
                        ],
                        "OpenAPI": [
                            313
                        ]
                    },
                    "filtered_variables": {
                        "Sequence": [
                            279
                        ],
                        "BaseRoute": [
                            279
                        ],
                        "info": [
                            282,
                            284,
                            285
                        ],
                        "title": [
                            282
                        ],
                        "version": [
                            282
                        ],
                        "description": [
                            283,
                            284
                        ],
                        "output": [
                            312,
                            313,
                            285,
                            311
                        ],
                        "openapi_version": [
                            285
                        ],
                        "components": [
                            303,
                            309,
                            310,
                            311,
                            286
                        ],
                        "Dict": [
                            281,
                            286,
                            287
                        ],
                        "paths": [
                            312,
                            299,
                            287
                        ],
                        "flat_models": [
                            288,
                            289,
                            291
                        ],
                        "get_flat_models_from_routes": [
                            288
                        ],
                        "routes": [
                            288,
                            293
                        ],
                        "model_name_map": [
                            289,
                            291,
                            295
                        ],
                        "get_model_name_map": [
                            289
                        ],
                        "definitions": [
                            290,
                            307,
                            308,
                            309
                        ],
                        "get_model_definitions": [
                            290
                        ],
                        "route": [
                            299,
                            293,
                            294,
                            295
                        ],
                        "routing.APIRoute": [
                            294
                        ],
                        "routing": [
                            294
                        ],
                        "result": [
                            296,
                            297,
                            295
                        ],
                        "get_openapi_path": [
                            295
                        ],
                        "path": [
                            297,
                            298,
                            300
                        ],
                        "security_schemes": [
                            304,
                            297,
                            302
                        ],
                        "path_definitions": [
                            297,
                            306,
                            307
                        ],
                        "update": [
                            299,
                            303
                        ],
                        "paths.setdefault": [
                            299
                        ],
                        "openapi_prefix": [
                            299
                        ],
                        "route.path_format": [
                            299
                        ],
                        "components.setdefault": [
                            303
                        ],
                        "definitions.update": [
                            307
                        ],
                        "k": [
                            309
                        ],
                        "jsonable_encoder": [
                            313
                        ],
                        "OpenAPI": [
                            313
                        ]
                    },
                    "diff_line_number": 313,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_openapi_params(dependant: Dependant) -> List[ModelField]:\n    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n    return (\n        flat_dependant.path_params\n        + flat_dependant.query_params\n        + flat_dependant.header_params\n        + flat_dependant.cookie_params\n    )",
                "def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, List]:\n    security_definitions = {}\n    operation_security = []\n    for security_requirement in flat_dependant.security_requirements:\n        security_definition = jsonable_encoder(\n            security_requirement.security_scheme.model,\n            by_alias=True,\n            include_none=False,\n        )\n        security_name = security_requirement.security_scheme.scheme_name\n        security_definitions[security_name] = security_definition\n        operation_security.append({security_name: security_requirement.scopes})\n    return security_definitions, operation_security",
                "def get_openapi_operation_parameters(\n    all_route_params: Sequence[ModelField],\n) -> List[Dict[str, Any]]:\n    parameters = []\n    for param in all_route_params:\n        field_info = get_field_info(param)\n        field_info = cast(Param, field_info)\n        parameter = {\n            \"name\": param.alias,\n            \"in\": field_info.in_.value,\n            \"required\": param.required,\n            \"schema\": field_schema(param, model_name_map={})[0],\n        }\n        if field_info.description:\n            parameter[\"description\"] = field_info.description\n        if field_info.deprecated:\n            parameter[\"deprecated\"] = field_info.deprecated\n        parameters.append(parameter)\n    return parameters",
                "def get_openapi_operation_request_body(\n    *, body_field: Optional[ModelField], model_name_map: Dict[Type[BaseModel], str]\n) -> Optional[Dict]:\n    if not body_field:\n        return None\n    assert isinstance(body_field, ModelField)\n    body_schema, _, _ = field_schema(\n        body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n    )\n    field_info = cast(Body, get_field_info(body_field))\n    request_media_type = field_info.media_type\n    required = body_field.required\n    request_body_oai: Dict[str, Any] = {}\n    if required:\n        request_body_oai[\"required\"] = required\n    request_body_oai[\"content\"] = {request_media_type: {\"schema\": body_schema}}\n    return request_body_oai",
                "def generate_operation_id(*, route: routing.APIRoute, method: str) -> str:\n    if route.operation_id:\n        return route.operation_id\n    path: str = route.path_format\n    return generate_operation_id_for_path(name=route.name, path=path, method=method)",
                "def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\n    if route.summary:\n        return route.summary\n    return route.name.replace(\"_\", \" \").title()",
                "def get_openapi_operation_metadata(*, route: routing.APIRoute, method: str) -> Dict:\n    operation: Dict[str, Any] = {}\n    if route.tags:\n        operation[\"tags\"] = route.tags\n    operation[\"summary\"] = generate_operation_summary(route=route, method=method)\n    if route.description:\n        operation[\"description\"] = route.description\n    operation[\"operationId\"] = generate_operation_id(route=route, method=method)\n    if route.deprecated:\n        operation[\"deprecated\"] = route.deprecated\n    return operation",
                "def get_openapi_path(\n    *, route: routing.APIRoute, model_name_map: Dict[Type, str]\n) -> Tuple[Dict, Dict, Dict]:\n    path = {}\n    security_schemes: Dict[str, Any] = {}\n    definitions: Dict[str, Any] = {}\n    assert route.methods is not None, \"Methods must be a list\"\n    assert route.response_class, \"A response class is needed to generate OpenAPI\"\n    route_response_media_type: Optional[str] = route.response_class.media_type\n    if route.include_in_schema:\n        for method in route.methods:\n            operation = get_openapi_operation_metadata(route=route, method=method)\n            parameters: List[Dict] = []\n            flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n            security_definitions, operation_security = get_openapi_security_definitions(\n                flat_dependant=flat_dependant\n            )\n            if operation_security:\n                operation.setdefault(\"security\", []).extend(operation_security)\n            if security_definitions:\n                security_schemes.update(security_definitions)\n            all_route_params = get_openapi_params(route.dependant)\n            operation_parameters = get_openapi_operation_parameters(all_route_params)\n            parameters.extend(operation_parameters)\n            if parameters:\n                operation[\"parameters\"] = list(\n                    {param[\"name\"]: param for param in parameters}.values()\n                )\n            if method in METHODS_WITH_BODY:\n                request_body_oai = get_openapi_operation_request_body(\n                    body_field=route.body_field, model_name_map=model_name_map\n                )\n                if request_body_oai:\n                    operation[\"requestBody\"] = request_body_oai\n            if route.callbacks:\n                callbacks = {}\n                for callback in route.callbacks:\n                    cb_path, cb_security_schemes, cb_definitions, = get_openapi_path(\n                        route=callback, model_name_map=model_name_map\n                    )\n                    callbacks[callback.name] = {callback.path: cb_path}\n                operation[\"callbacks\"] = callbacks\n            if route.responses:\n                for (additional_status_code, response) in route.responses.items():\n                    assert isinstance(\n                        response, dict\n                    ), \"An additional response must be a dict\"\n                    field = route.response_fields.get(additional_status_code)\n                    if field:\n                        response_schema, _, _ = field_schema(\n                            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                        )\n                        response.setdefault(\"content\", {}).setdefault(\n                            route_response_media_type or \"application/json\", {}\n                        )[\"schema\"] = response_schema\n                    status_text: Optional[str] = status_code_ranges.get(\n                        str(additional_status_code).upper()\n                    ) or http.client.responses.get(int(additional_status_code))\n                    response.setdefault(\n                        \"description\", status_text or \"Additional Response\"\n                    )\n                    status_code_key = str(additional_status_code).upper()\n                    if status_code_key == \"DEFAULT\":\n                        status_code_key = \"default\"\n                    operation.setdefault(\"responses\", {})[status_code_key] = response\n            status_code = str(route.status_code)\n            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                \"description\"\n            ] = route.response_description\n            if (\n                route_response_media_type\n                and route.status_code not in STATUS_CODES_WITH_NO_BODY\n            ):\n                response_schema = {\"type\": \"string\"}\n                if lenient_issubclass(route.response_class, JSONResponse):\n                    if route.response_field:\n                        response_schema, _, _ = field_schema(\n                            route.response_field,\n                            model_name_map=model_name_map,\n                            ref_prefix=REF_PREFIX,\n                        )\n                    else:\n                        response_schema = {}\n                operation.setdefault(\"responses\", {}).setdefault(\n                    status_code, {}\n                ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n                    \"schema\"\n                ] = response_schema\n\n            http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n            if (all_route_params or route.body_field) and not any(\n                [\n                    status in operation[\"responses\"]\n                    for status in [http422, \"4XX\", \"default\"]\n                ]\n            ):\n                operation[\"responses\"][http422] = {\n                    \"description\": \"Validation Error\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\"$ref\": REF_PREFIX + \"HTTPValidationError\"}\n                        }\n                    },\n                }\n                if \"ValidationError\" not in definitions:\n                    definitions.update(\n                        {\n                            \"ValidationError\": validation_error_definition,\n                            \"HTTPValidationError\": validation_error_response_definition,\n                        }\n                    )\n            path[method.lower()] = operation\n    return path, security_schemes, definitions",
                "def get_openapi(\n    *,\n    title: str,\n    version: str,\n    openapi_version: str = \"3.0.2\",\n    description: str = None,\n    routes: Sequence[BaseRoute],\n    openapi_prefix: str = \"\"\n) -> Dict:\n    info = {\"title\": title, \"version\": version}\n    if description:\n        info[\"description\"] = description\n    output = {\"openapi\": openapi_version, \"info\": info}\n    components: Dict[str, Dict] = {}\n    paths: Dict[str, Dict] = {}\n    flat_models = get_flat_models_from_routes(routes)\n    model_name_map = get_model_name_map(flat_models)\n    definitions = get_model_definitions(\n        flat_models=flat_models, model_name_map=model_name_map\n    )\n    for route in routes:\n        if isinstance(route, routing.APIRoute):\n            result = get_openapi_path(route=route, model_name_map=model_name_map)\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    paths.setdefault(openapi_prefix + route.path_format, {}).update(\n                        path\n                    )\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    if definitions:\n        components[\"schemas\"] = {k: definitions[k] for k in sorted(definitions)}\n    if components:\n        output[\"components\"] = components\n    output[\"paths\"] = paths\n    return jsonable_encoder(OpenAPI(**output), by_alias=True, include_none=False)"
            ],
            "inscope_function_signatures": [
                "get_openapi_params(dependant: Dependant) -> List[ModelField]",
                "get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, List]",
                "get_openapi_operation_parameters(all_route_params: Sequence[ModelField]) -> List[Dict[str, Any]]",
                "get_openapi_operation_request_body() -> Optional[Dict]",
                "generate_operation_id() -> str",
                "generate_operation_summary() -> str",
                "get_openapi_operation_metadata() -> Dict",
                "get_openapi_path() -> Tuple[Dict, Dict, Dict]",
                "get_openapi() -> Dict"
            ],
            "variables_in_file": {
                "ImportError": [
                    30
                ],
                "validation_error_definition": [
                    265,
                    34
                ],
                "validation_error_response_definition": [
                    266,
                    45
                ],
                "REF_PREFIX": [
                    258,
                    237,
                    208,
                    52,
                    120
                ],
                "status_code_ranges": [
                    57,
                    213
                ],
                "Dict": [
                    160,
                    162,
                    163,
                    287,
                    281,
                    170,
                    77,
                    145,
                    114,
                    115,
                    146,
                    57,
                    286,
                    125,
                    94,
                    159
                ],
                "str": [
                    132,
                    135,
                    139,
                    145,
                    146,
                    275,
                    276,
                    277,
                    278,
                    280,
                    286,
                    159,
                    287,
                    162,
                    163,
                    166,
                    57,
                    213,
                    214,
                    219,
                    94,
                    223,
                    114,
                    247,
                    125
                ],
                "Dependant": [
                    67,
                    77
                ],
                "flat_dependant": [
                    68,
                    70,
                    71,
                    72,
                    73,
                    171,
                    173,
                    80
                ],
                "get_flat_dependant": [
                    171,
                    68
                ],
                "dependant": [
                    68
                ],
                "flat_dependant.path_params": [
                    70
                ],
                "flat_dependant.query_params": [
                    71
                ],
                "flat_dependant.header_params": [
                    72
                ],
                "flat_dependant.cookie_params": [
                    73
                ],
                "List": [
                    170,
                    67,
                    77,
                    94
                ],
                "ModelField": [
                    114,
                    67,
                    93,
                    118
                ],
                "security_definitions": [
                    172,
                    78,
                    177,
                    178,
                    87,
                    89
                ],
                "operation_security": [
                    172,
                    175,
                    79,
                    176,
                    88,
                    89
                ],
                "security_requirement": [
                    80,
                    82,
                    88,
                    86
                ],
                "flat_dependant.security_requirements": [
                    80
                ],
                "security_definition": [
                    81,
                    87
                ],
                "jsonable_encoder": [
                    81,
                    313
                ],
                "security_requirement.security_scheme.model": [
                    82
                ],
                "security_requirement.security_scheme": [
                    82,
                    86
                ],
                "security_name": [
                    88,
                    86,
                    87
                ],
                "security_requirement.security_scheme.scheme_name": [
                    86
                ],
                "operation_security.append": [
                    88
                ],
                "security_requirement.scopes": [
                    88
                ],
                "Tuple": [
                    160,
                    77
                ],
                "Sequence": [
                    93,
                    279
                ],
                "parameters": [
                    170,
                    109,
                    110,
                    181,
                    182,
                    184,
                    95
                ],
                "param": [
                    96,
                    97,
                    100,
                    102,
                    103,
                    184
                ],
                "all_route_params": [
                    96,
                    248,
                    179,
                    180
                ],
                "field_info": [
                    97,
                    98,
                    101,
                    105,
                    106,
                    107,
                    108,
                    122,
                    123
                ],
                "get_field_info": [
                    97,
                    122
                ],
                "cast": [
                    98,
                    122
                ],
                "Param": [
                    98
                ],
                "parameter": [
                    106,
                    99,
                    108,
                    109
                ],
                "param.alias": [
                    100
                ],
                "field_info.in_.value": [
                    101
                ],
                "field_info.in_": [
                    101
                ],
                "param.required": [
                    102
                ],
                "field_schema": [
                    207,
                    234,
                    119,
                    103
                ],
                "field_info.description": [
                    105,
                    106
                ],
                "field_info.deprecated": [
                    107,
                    108
                ],
                "parameters.append": [
                    109
                ],
                "Any": [
                    162,
                    163,
                    146,
                    125,
                    94
                ],
                "Optional": [
                    114,
                    115,
                    213,
                    166
                ],
                "Type": [
                    114,
                    159
                ],
                "BaseModel": [
                    114
                ],
                "body_field": [
                    116,
                    118,
                    120,
                    122,
                    124
                ],
                "isinstance": [
                    294,
                    202,
                    118
                ],
                "body_schema": [
                    128,
                    119
                ],
                "_": [
                    207,
                    234,
                    119
                ],
                "model_name_map": [
                    289,
                    291,
                    196,
                    295,
                    236,
                    208,
                    120,
                    188
                ],
                "Body": [
                    122
                ],
                "request_media_type": [
                    128,
                    123
                ],
                "field_info.media_type": [
                    123
                ],
                "required": [
                    124,
                    126,
                    127
                ],
                "body_field.required": [
                    124
                ],
                "request_body_oai": [
                    128,
                    129,
                    191,
                    187,
                    125,
                    190,
                    127
                ],
                "routing.APIRoute": [
                    132,
                    294,
                    139,
                    145,
                    159
                ],
                "routing": [
                    132,
                    294,
                    139,
                    145,
                    159
                ],
                "route.operation_id": [
                    133,
                    134
                ],
                "route": [
                    133,
                    134,
                    135,
                    136,
                    140,
                    141,
                    142,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    293,
                    171,
                    294,
                    295,
                    299,
                    179,
                    188,
                    192,
                    194,
                    200,
                    201,
                    205,
                    223,
                    226,
                    229,
                    232,
                    233,
                    235,
                    248
                ],
                "path": [
                    161,
                    135,
                    136,
                    297,
                    298,
                    300,
                    269,
                    270
                ],
                "route.path_format": [
                    299,
                    135
                ],
                "generate_operation_id_for_path": [
                    136
                ],
                "route.name": [
                    136,
                    142
                ],
                "method": [
                    136,
                    169,
                    168,
                    269,
                    149,
                    152,
                    186
                ],
                "route.summary": [
                    140,
                    141
                ],
                "title": [
                    282,
                    142
                ],
                "route.name.replace": [
                    142
                ],
                "operation": [
                    224,
                    199,
                    169,
                    250,
                    269,
                    176,
                    241,
                    146,
                    148,
                    149,
                    254,
                    151,
                    152,
                    183,
                    154,
                    155,
                    222,
                    191
                ],
                "route.tags": [
                    147,
                    148
                ],
                "generate_operation_summary": [
                    149
                ],
                "route.description": [
                    150,
                    151
                ],
                "generate_operation_id": [
                    152
                ],
                "route.deprecated": [
                    153,
                    154
                ],
                "security_schemes": [
                    162,
                    297,
                    270,
                    302,
                    304,
                    178
                ],
                "definitions": [
                    290,
                    163,
                    262,
                    263,
                    270,
                    307,
                    308,
                    309
                ],
                "route.methods": [
                    168,
                    164
                ],
                "route.response_class": [
                    232,
                    165,
                    166
                ],
                "route_response_media_type": [
                    211,
                    228,
                    166,
                    243
                ],
                "route.response_class.media_type": [
                    166
                ],
                "route.include_in_schema": [
                    167
                ],
                "get_openapi_operation_metadata": [
                    169
                ],
                "route.dependant": [
                    171,
                    179
                ],
                "get_openapi_security_definitions": [
                    172
                ],
                "extend": [
                    176
                ],
                "operation.setdefault": [
                    176,
                    224,
                    241,
                    222
                ],
                "security_schemes.update": [
                    178
                ],
                "get_openapi_params": [
                    179
                ],
                "operation_parameters": [
                    180,
                    181
                ],
                "get_openapi_operation_parameters": [
                    180
                ],
                "parameters.extend": [
                    181
                ],
                "list": [
                    183
                ],
                "values": [
                    184
                ],
                "METHODS_WITH_BODY": [
                    186
                ],
                "get_openapi_operation_request_body": [
                    187
                ],
                "route.body_field": [
                    248,
                    188
                ],
                "route.callbacks": [
                    192,
                    194
                ],
                "callbacks": [
                    193,
                    198,
                    199
                ],
                "callback": [
                    194,
                    196,
                    198
                ],
                "cb_path": [
                    195,
                    198
                ],
                "cb_security_schemes": [
                    195
                ],
                "cb_definitions": [
                    195
                ],
                "get_openapi_path": [
                    195,
                    295
                ],
                "callback.name": [
                    198
                ],
                "callback.path": [
                    198
                ],
                "route.responses": [
                    200,
                    201
                ],
                "additional_status_code": [
                    201,
                    205,
                    214,
                    215,
                    219
                ],
                "response": [
                    201,
                    203,
                    210,
                    216,
                    222
                ],
                "route.responses.items": [
                    201
                ],
                "dict": [
                    203
                ],
                "field": [
                    208,
                    205,
                    206
                ],
                "route.response_fields.get": [
                    205
                ],
                "route.response_fields": [
                    205
                ],
                "response_schema": [
                    231,
                    234,
                    207,
                    240,
                    212,
                    245
                ],
                "setdefault": [
                    224,
                    241,
                    210
                ],
                "response.setdefault": [
                    216,
                    210
                ],
                "status_text": [
                    217,
                    213
                ],
                "status_code_ranges.get": [
                    213
                ],
                "upper": [
                    219,
                    214
                ],
                "http.client.responses.get": [
                    215
                ],
                "http.client.responses": [
                    215
                ],
                "http.client": [
                    215
                ],
                "http": [
                    215
                ],
                "int": [
                    215
                ],
                "status_code_key": [
                    219,
                    220,
                    221,
                    222
                ],
                "status_code": [
                    224,
                    242,
                    223
                ],
                "route.status_code": [
                    229,
                    223
                ],
                "route.response_description": [
                    226
                ],
                "STATUS_CODES_WITH_NO_BODY": [
                    229
                ],
                "lenient_issubclass": [
                    232
                ],
                "JSONResponse": [
                    232
                ],
                "route.response_field": [
                    233,
                    235
                ],
                "http422": [
                    251,
                    254,
                    247
                ],
                "HTTP_422_UNPROCESSABLE_ENTITY": [
                    247
                ],
                "any": [
                    248
                ],
                "status": [
                    250,
                    251
                ],
                "definitions.update": [
                    307,
                    263
                ],
                "method.lower": [
                    269
                ],
                "BaseRoute": [
                    279
                ],
                "info": [
                    282,
                    284,
                    285
                ],
                "version": [
                    282
                ],
                "description": [
                    283,
                    284
                ],
                "output": [
                    312,
                    313,
                    285,
                    311
                ],
                "openapi_version": [
                    285
                ],
                "components": [
                    303,
                    309,
                    310,
                    311,
                    286
                ],
                "paths": [
                    312,
                    299,
                    287
                ],
                "flat_models": [
                    288,
                    289,
                    291
                ],
                "get_flat_models_from_routes": [
                    288
                ],
                "routes": [
                    288,
                    293
                ],
                "get_model_name_map": [
                    289
                ],
                "get_model_definitions": [
                    290
                ],
                "result": [
                    296,
                    297,
                    295
                ],
                "path_definitions": [
                    297,
                    306,
                    307
                ],
                "update": [
                    299,
                    303
                ],
                "paths.setdefault": [
                    299
                ],
                "openapi_prefix": [
                    299
                ],
                "components.setdefault": [
                    303
                ],
                "k": [
                    309
                ],
                "sorted": [
                    309
                ],
                "OpenAPI": [
                    313
                ]
            },
            "filtered_variables_in_file": {
                "validation_error_definition": [
                    265,
                    34
                ],
                "validation_error_response_definition": [
                    266,
                    45
                ],
                "REF_PREFIX": [
                    258,
                    237,
                    208,
                    52,
                    120
                ],
                "status_code_ranges": [
                    57,
                    213
                ],
                "Dict": [
                    160,
                    162,
                    163,
                    287,
                    281,
                    170,
                    77,
                    145,
                    114,
                    115,
                    146,
                    57,
                    286,
                    125,
                    94,
                    159
                ],
                "Dependant": [
                    67,
                    77
                ],
                "flat_dependant": [
                    68,
                    70,
                    71,
                    72,
                    73,
                    171,
                    173,
                    80
                ],
                "get_flat_dependant": [
                    171,
                    68
                ],
                "dependant": [
                    68
                ],
                "flat_dependant.path_params": [
                    70
                ],
                "flat_dependant.query_params": [
                    71
                ],
                "flat_dependant.header_params": [
                    72
                ],
                "flat_dependant.cookie_params": [
                    73
                ],
                "List": [
                    170,
                    67,
                    77,
                    94
                ],
                "ModelField": [
                    114,
                    67,
                    93,
                    118
                ],
                "security_definitions": [
                    172,
                    78,
                    177,
                    178,
                    87,
                    89
                ],
                "operation_security": [
                    172,
                    175,
                    79,
                    176,
                    88,
                    89
                ],
                "security_requirement": [
                    80,
                    82,
                    88,
                    86
                ],
                "flat_dependant.security_requirements": [
                    80
                ],
                "security_definition": [
                    81,
                    87
                ],
                "jsonable_encoder": [
                    81,
                    313
                ],
                "security_requirement.security_scheme.model": [
                    82
                ],
                "security_requirement.security_scheme": [
                    82,
                    86
                ],
                "security_name": [
                    88,
                    86,
                    87
                ],
                "security_requirement.security_scheme.scheme_name": [
                    86
                ],
                "operation_security.append": [
                    88
                ],
                "security_requirement.scopes": [
                    88
                ],
                "Tuple": [
                    160,
                    77
                ],
                "Sequence": [
                    93,
                    279
                ],
                "parameters": [
                    170,
                    109,
                    110,
                    181,
                    182,
                    184,
                    95
                ],
                "param": [
                    96,
                    97,
                    100,
                    102,
                    103,
                    184
                ],
                "all_route_params": [
                    96,
                    248,
                    179,
                    180
                ],
                "field_info": [
                    97,
                    98,
                    101,
                    105,
                    106,
                    107,
                    108,
                    122,
                    123
                ],
                "get_field_info": [
                    97,
                    122
                ],
                "cast": [
                    98,
                    122
                ],
                "Param": [
                    98
                ],
                "parameter": [
                    106,
                    99,
                    108,
                    109
                ],
                "param.alias": [
                    100
                ],
                "field_info.in_.value": [
                    101
                ],
                "field_info.in_": [
                    101
                ],
                "param.required": [
                    102
                ],
                "field_schema": [
                    207,
                    234,
                    119,
                    103
                ],
                "field_info.description": [
                    105,
                    106
                ],
                "field_info.deprecated": [
                    107,
                    108
                ],
                "parameters.append": [
                    109
                ],
                "Any": [
                    162,
                    163,
                    146,
                    125,
                    94
                ],
                "Optional": [
                    114,
                    115,
                    213,
                    166
                ],
                "Type": [
                    114,
                    159
                ],
                "BaseModel": [
                    114
                ],
                "body_field": [
                    116,
                    118,
                    120,
                    122,
                    124
                ],
                "body_schema": [
                    128,
                    119
                ],
                "_": [
                    207,
                    234,
                    119
                ],
                "model_name_map": [
                    289,
                    291,
                    196,
                    295,
                    236,
                    208,
                    120,
                    188
                ],
                "Body": [
                    122
                ],
                "request_media_type": [
                    128,
                    123
                ],
                "field_info.media_type": [
                    123
                ],
                "required": [
                    124,
                    126,
                    127
                ],
                "body_field.required": [
                    124
                ],
                "request_body_oai": [
                    128,
                    129,
                    191,
                    187,
                    125,
                    190,
                    127
                ],
                "routing.APIRoute": [
                    132,
                    294,
                    139,
                    145,
                    159
                ],
                "routing": [
                    132,
                    294,
                    139,
                    145,
                    159
                ],
                "route.operation_id": [
                    133,
                    134
                ],
                "route": [
                    133,
                    134,
                    135,
                    136,
                    140,
                    141,
                    142,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    293,
                    171,
                    294,
                    295,
                    299,
                    179,
                    188,
                    192,
                    194,
                    200,
                    201,
                    205,
                    223,
                    226,
                    229,
                    232,
                    233,
                    235,
                    248
                ],
                "path": [
                    161,
                    135,
                    136,
                    297,
                    298,
                    300,
                    269,
                    270
                ],
                "route.path_format": [
                    299,
                    135
                ],
                "generate_operation_id_for_path": [
                    136
                ],
                "route.name": [
                    136,
                    142
                ],
                "method": [
                    136,
                    169,
                    168,
                    269,
                    149,
                    152,
                    186
                ],
                "route.summary": [
                    140,
                    141
                ],
                "title": [
                    282,
                    142
                ],
                "route.name.replace": [
                    142
                ],
                "operation": [
                    224,
                    199,
                    169,
                    250,
                    269,
                    176,
                    241,
                    146,
                    148,
                    149,
                    254,
                    151,
                    152,
                    183,
                    154,
                    155,
                    222,
                    191
                ],
                "route.tags": [
                    147,
                    148
                ],
                "generate_operation_summary": [
                    149
                ],
                "route.description": [
                    150,
                    151
                ],
                "generate_operation_id": [
                    152
                ],
                "route.deprecated": [
                    153,
                    154
                ],
                "security_schemes": [
                    162,
                    297,
                    270,
                    302,
                    304,
                    178
                ],
                "definitions": [
                    290,
                    163,
                    262,
                    263,
                    270,
                    307,
                    308,
                    309
                ],
                "route.methods": [
                    168,
                    164
                ],
                "route.response_class": [
                    232,
                    165,
                    166
                ],
                "route_response_media_type": [
                    211,
                    228,
                    166,
                    243
                ],
                "route.response_class.media_type": [
                    166
                ],
                "route.include_in_schema": [
                    167
                ],
                "get_openapi_operation_metadata": [
                    169
                ],
                "route.dependant": [
                    171,
                    179
                ],
                "get_openapi_security_definitions": [
                    172
                ],
                "extend": [
                    176
                ],
                "operation.setdefault": [
                    176,
                    224,
                    241,
                    222
                ],
                "security_schemes.update": [
                    178
                ],
                "get_openapi_params": [
                    179
                ],
                "operation_parameters": [
                    180,
                    181
                ],
                "get_openapi_operation_parameters": [
                    180
                ],
                "parameters.extend": [
                    181
                ],
                "values": [
                    184
                ],
                "METHODS_WITH_BODY": [
                    186
                ],
                "get_openapi_operation_request_body": [
                    187
                ],
                "route.body_field": [
                    248,
                    188
                ],
                "route.callbacks": [
                    192,
                    194
                ],
                "callbacks": [
                    193,
                    198,
                    199
                ],
                "callback": [
                    194,
                    196,
                    198
                ],
                "cb_path": [
                    195,
                    198
                ],
                "cb_security_schemes": [
                    195
                ],
                "cb_definitions": [
                    195
                ],
                "get_openapi_path": [
                    195,
                    295
                ],
                "callback.name": [
                    198
                ],
                "callback.path": [
                    198
                ],
                "route.responses": [
                    200,
                    201
                ],
                "additional_status_code": [
                    201,
                    205,
                    214,
                    215,
                    219
                ],
                "response": [
                    201,
                    203,
                    210,
                    216,
                    222
                ],
                "route.responses.items": [
                    201
                ],
                "field": [
                    208,
                    205,
                    206
                ],
                "route.response_fields.get": [
                    205
                ],
                "route.response_fields": [
                    205
                ],
                "response_schema": [
                    231,
                    234,
                    207,
                    240,
                    212,
                    245
                ],
                "setdefault": [
                    224,
                    241,
                    210
                ],
                "response.setdefault": [
                    216,
                    210
                ],
                "status_text": [
                    217,
                    213
                ],
                "status_code_ranges.get": [
                    213
                ],
                "upper": [
                    219,
                    214
                ],
                "http.client.responses.get": [
                    215
                ],
                "http.client.responses": [
                    215
                ],
                "http.client": [
                    215
                ],
                "http": [
                    215
                ],
                "status_code_key": [
                    219,
                    220,
                    221,
                    222
                ],
                "status_code": [
                    224,
                    242,
                    223
                ],
                "route.status_code": [
                    229,
                    223
                ],
                "route.response_description": [
                    226
                ],
                "STATUS_CODES_WITH_NO_BODY": [
                    229
                ],
                "lenient_issubclass": [
                    232
                ],
                "JSONResponse": [
                    232
                ],
                "route.response_field": [
                    233,
                    235
                ],
                "http422": [
                    251,
                    254,
                    247
                ],
                "HTTP_422_UNPROCESSABLE_ENTITY": [
                    247
                ],
                "status": [
                    250,
                    251
                ],
                "definitions.update": [
                    307,
                    263
                ],
                "method.lower": [
                    269
                ],
                "BaseRoute": [
                    279
                ],
                "info": [
                    282,
                    284,
                    285
                ],
                "version": [
                    282
                ],
                "description": [
                    283,
                    284
                ],
                "output": [
                    312,
                    313,
                    285,
                    311
                ],
                "openapi_version": [
                    285
                ],
                "components": [
                    303,
                    309,
                    310,
                    311,
                    286
                ],
                "paths": [
                    312,
                    299,
                    287
                ],
                "flat_models": [
                    288,
                    289,
                    291
                ],
                "get_flat_models_from_routes": [
                    288
                ],
                "routes": [
                    288,
                    293
                ],
                "get_model_name_map": [
                    289
                ],
                "get_model_definitions": [
                    290
                ],
                "result": [
                    296,
                    297,
                    295
                ],
                "path_definitions": [
                    297,
                    306,
                    307
                ],
                "update": [
                    299,
                    303
                ],
                "paths.setdefault": [
                    299
                ],
                "openapi_prefix": [
                    299
                ],
                "components.setdefault": [
                    303
                ],
                "k": [
                    309
                ],
                "OpenAPI": [
                    313
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_1/fastapi/routing.py": {
            "buggy_functions": [
                {
                    "function_name": "_prepare_response_content",
                    "function_code": "def _prepare_response_content(\n    res: Any, *, by_alias: bool = True, exclude_unset: bool\n) -> Any:\n    if isinstance(res, BaseModel):\n        if PYDANTIC_1:\n            return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)\n        else:\n            return res.dict(\n                by_alias=by_alias, skip_defaults=exclude_unset\n            )  # pragma: nocover\n    elif isinstance(res, list):\n        return [\n            _prepare_response_content(item, exclude_unset=exclude_unset) for item in res\n        ]\n    elif isinstance(res, dict):\n        return {\n            k: _prepare_response_content(v, exclude_unset=exclude_unset)\n            for k, v in res.items()\n        }\n    return res\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 51,
                    "variables": {
                        "Any": [
                            52,
                            53
                        ],
                        "bool": [
                            52
                        ],
                        "isinstance": [
                            65,
                            61,
                            54
                        ],
                        "res": [
                            65,
                            68,
                            70,
                            54,
                            56,
                            58,
                            61,
                            63
                        ],
                        "BaseModel": [
                            54
                        ],
                        "PYDANTIC_1": [
                            55
                        ],
                        "res.dict": [
                            56,
                            58
                        ],
                        "by_alias": [
                            56,
                            59
                        ],
                        "exclude_unset": [
                            56,
                            67,
                            59,
                            63
                        ],
                        "list": [
                            61
                        ],
                        "_prepare_response_content": [
                            67,
                            63
                        ],
                        "item": [
                            63
                        ],
                        "dict": [
                            65
                        ],
                        "k": [
                            67,
                            68
                        ],
                        "v": [
                            67,
                            68
                        ],
                        "res.items": [
                            68
                        ]
                    },
                    "filtered_variables": {
                        "Any": [
                            52,
                            53
                        ],
                        "res": [
                            65,
                            68,
                            70,
                            54,
                            56,
                            58,
                            61,
                            63
                        ],
                        "BaseModel": [
                            54
                        ],
                        "PYDANTIC_1": [
                            55
                        ],
                        "res.dict": [
                            56,
                            58
                        ],
                        "by_alias": [
                            56,
                            59
                        ],
                        "exclude_unset": [
                            56,
                            67,
                            59,
                            63
                        ],
                        "_prepare_response_content": [
                            67,
                            63
                        ],
                        "item": [
                            63
                        ],
                        "k": [
                            67,
                            68
                        ],
                        "v": [
                            67,
                            68
                        ],
                        "res.items": [
                            68
                        ]
                    },
                    "diff_line_number": 52,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "serialize_response",
                    "function_code": "async def serialize_response(\n    *,\n    field: ModelField = None,\n    response_content: Any,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    exclude_unset: bool = False,\n    is_coroutine: bool = True,\n) -> Any:\n    if field:\n        errors = []\n        response_content = _prepare_response_content(\n            response_content, by_alias=by_alias, exclude_unset=exclude_unset\n        )\n        if is_coroutine:\n            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n        else:\n            value, errors_ = await run_in_threadpool(\n                field.validate, response_content, {}, loc=(\"response\",)\n            )\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors, field.type_)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n        )\n    else:\n        return jsonable_encoder(response_content)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 73,
                    "variables": {
                        "ModelField": [
                            75
                        ],
                        "Any": [
                            82,
                            76
                        ],
                        "Union": [
                            77,
                            78
                        ],
                        "SetIntStr": [
                            77,
                            78
                        ],
                        "DictIntStrAny": [
                            77,
                            78
                        ],
                        "bool": [
                            80,
                            81,
                            79
                        ],
                        "set": [
                            78
                        ],
                        "field": [
                            99,
                            89,
                            83,
                            92
                        ],
                        "errors": [
                            97,
                            98,
                            99,
                            84,
                            95
                        ],
                        "response_content": [
                            108,
                            85,
                            86,
                            89,
                            92
                        ],
                        "_prepare_response_content": [
                            85
                        ],
                        "by_alias": [
                            104,
                            86
                        ],
                        "exclude_unset": [
                            105,
                            86
                        ],
                        "is_coroutine": [
                            88
                        ],
                        "value": [
                            89,
                            91,
                            101
                        ],
                        "errors_": [
                            96,
                            97,
                            89,
                            91,
                            94,
                            95
                        ],
                        "field.validate": [
                            89,
                            92
                        ],
                        "run_in_threadpool": [
                            91
                        ],
                        "isinstance": [
                            96,
                            94
                        ],
                        "ErrorWrapper": [
                            94
                        ],
                        "errors.append": [
                            95
                        ],
                        "list": [
                            96
                        ],
                        "errors.extend": [
                            97
                        ],
                        "ValidationError": [
                            99
                        ],
                        "field.type_": [
                            99
                        ],
                        "jsonable_encoder": [
                            108,
                            100
                        ],
                        "include": [
                            102
                        ],
                        "exclude": [
                            103
                        ]
                    },
                    "filtered_variables": {
                        "ModelField": [
                            75
                        ],
                        "Any": [
                            82,
                            76
                        ],
                        "Union": [
                            77,
                            78
                        ],
                        "SetIntStr": [
                            77,
                            78
                        ],
                        "DictIntStrAny": [
                            77,
                            78
                        ],
                        "field": [
                            99,
                            89,
                            83,
                            92
                        ],
                        "errors": [
                            97,
                            98,
                            99,
                            84,
                            95
                        ],
                        "response_content": [
                            108,
                            85,
                            86,
                            89,
                            92
                        ],
                        "_prepare_response_content": [
                            85
                        ],
                        "by_alias": [
                            104,
                            86
                        ],
                        "exclude_unset": [
                            105,
                            86
                        ],
                        "is_coroutine": [
                            88
                        ],
                        "value": [
                            89,
                            91,
                            101
                        ],
                        "errors_": [
                            96,
                            97,
                            89,
                            91,
                            94,
                            95
                        ],
                        "field.validate": [
                            89,
                            92
                        ],
                        "run_in_threadpool": [
                            91
                        ],
                        "ErrorWrapper": [
                            94
                        ],
                        "errors.append": [
                            95
                        ],
                        "errors.extend": [
                            97
                        ],
                        "ValidationError": [
                            99
                        ],
                        "field.type_": [
                            99
                        ],
                        "jsonable_encoder": [
                            108,
                            100
                        ],
                        "include": [
                            102
                        ],
                        "exclude": [
                            103
                        ]
                    },
                    "diff_line_number": 80,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "get_request_handler",
                    "function_code": "def get_request_handler(\n    dependant: Dependant,\n    body_field: ModelField = None,\n    status_code: int = 200,\n    response_class: Type[Response] = JSONResponse,\n    response_field: ModelField = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    dependency_overrides_provider: Any = None,\n) -> Callable:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(get_field_info(body_field), params.Form)\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logger.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n            raise RequestValidationError(errors, body=body)\n        else:\n            raw_response = await run_endpoint_function(\n                dependant=dependant, values=values, is_coroutine=is_coroutine\n            )\n\n            if isinstance(raw_response, Response):\n                if raw_response.background is None:\n                    raw_response.background = background_tasks\n                return raw_response\n            response_data = await serialize_response(\n                field=response_field,\n                response_content=raw_response,\n                include=response_model_include,\n                exclude=response_model_exclude,\n                by_alias=response_model_by_alias,\n                exclude_unset=response_model_exclude_unset,\n                is_coroutine=is_coroutine,\n            )\n            response = response_class(\n                content=response_data,\n                status_code=status_code,\n                background=background_tasks,\n            )\n            response.headers.raw.extend(sub_response.headers.raw)\n            if sub_response.status_code:\n                response.status_code = sub_response.status_code\n            return response\n\n    return app\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 124,
                    "variables": {
                        "Dependant": [
                            125
                        ],
                        "ModelField": [
                            129,
                            126
                        ],
                        "int": [
                            127
                        ],
                        "Type": [
                            128
                        ],
                        "Response": [
                            128,
                            169,
                            140
                        ],
                        "Union": [
                            130,
                            131
                        ],
                        "SetIntStr": [
                            130,
                            131
                        ],
                        "DictIntStrAny": [
                            130,
                            131
                        ],
                        "bool": [
                            132,
                            133
                        ],
                        "Any": [
                            134
                        ],
                        "JSONResponse": [
                            128
                        ],
                        "set": [
                            131
                        ],
                        "dependant.call": [
                            136,
                            137
                        ],
                        "dependant": [
                            136,
                            137,
                            157,
                            166
                        ],
                        "is_coroutine": [
                            137,
                            180,
                            166
                        ],
                        "asyncio.iscoroutinefunction": [
                            137
                        ],
                        "asyncio": [
                            137
                        ],
                        "is_body_form": [
                            144,
                            138
                        ],
                        "body_field": [
                            138,
                            143
                        ],
                        "isinstance": [
                            169,
                            138
                        ],
                        "get_field_info": [
                            138
                        ],
                        "params.Form": [
                            138
                        ],
                        "params": [
                            138
                        ],
                        "Request": [
                            140
                        ],
                        "body": [
                            163,
                            142,
                            145,
                            149,
                            158
                        ],
                        "request.form": [
                            145
                        ],
                        "request": [
                            145,
                            147,
                            156,
                            149
                        ],
                        "body_bytes": [
                            147,
                            148
                        ],
                        "request.body": [
                            147
                        ],
                        "request.json": [
                            149
                        ],
                        "Exception": [
                            150
                        ],
                        "logger.error": [
                            151
                        ],
                        "logger": [
                            151
                        ],
                        "e": [
                            154,
                            151
                        ],
                        "HTTPException": [
                            152
                        ],
                        "solved_result": [
                            161,
                            155
                        ],
                        "solve_dependencies": [
                            155
                        ],
                        "dependency_overrides_provider": [
                            159
                        ],
                        "values": [
                            161,
                            166
                        ],
                        "errors": [
                            161,
                            162,
                            163
                        ],
                        "background_tasks": [
                            185,
                            161,
                            171
                        ],
                        "sub_response": [
                            161,
                            187,
                            188,
                            189
                        ],
                        "_": [
                            161
                        ],
                        "RequestValidationError": [
                            163
                        ],
                        "raw_response": [
                            165,
                            169,
                            170,
                            171,
                            172,
                            175
                        ],
                        "run_endpoint_function": [
                            165
                        ],
                        "raw_response.background": [
                            170,
                            171
                        ],
                        "response_data": [
                            173,
                            183
                        ],
                        "serialize_response": [
                            173
                        ],
                        "response_field": [
                            174
                        ],
                        "response_model_include": [
                            176
                        ],
                        "response_model_exclude": [
                            177
                        ],
                        "response_model_by_alias": [
                            178
                        ],
                        "response_model_exclude_unset": [
                            179
                        ],
                        "response": [
                            187,
                            190,
                            189,
                            182
                        ],
                        "response_class": [
                            182
                        ],
                        "status_code": [
                            184
                        ],
                        "response.headers.raw.extend": [
                            187
                        ],
                        "response.headers.raw": [
                            187
                        ],
                        "response.headers": [
                            187
                        ],
                        "sub_response.headers.raw": [
                            187
                        ],
                        "sub_response.headers": [
                            187
                        ],
                        "sub_response.status_code": [
                            188,
                            189
                        ],
                        "response.status_code": [
                            189
                        ],
                        "app": [
                            192
                        ],
                        "Callable": [
                            135
                        ]
                    },
                    "filtered_variables": {
                        "Dependant": [
                            125
                        ],
                        "ModelField": [
                            129,
                            126
                        ],
                        "Type": [
                            128
                        ],
                        "Response": [
                            128,
                            169,
                            140
                        ],
                        "Union": [
                            130,
                            131
                        ],
                        "SetIntStr": [
                            130,
                            131
                        ],
                        "DictIntStrAny": [
                            130,
                            131
                        ],
                        "Any": [
                            134
                        ],
                        "JSONResponse": [
                            128
                        ],
                        "dependant.call": [
                            136,
                            137
                        ],
                        "dependant": [
                            136,
                            137,
                            157,
                            166
                        ],
                        "is_coroutine": [
                            137,
                            180,
                            166
                        ],
                        "asyncio.iscoroutinefunction": [
                            137
                        ],
                        "asyncio": [
                            137
                        ],
                        "is_body_form": [
                            144,
                            138
                        ],
                        "body_field": [
                            138,
                            143
                        ],
                        "get_field_info": [
                            138
                        ],
                        "params.Form": [
                            138
                        ],
                        "params": [
                            138
                        ],
                        "Request": [
                            140
                        ],
                        "body": [
                            163,
                            142,
                            145,
                            149,
                            158
                        ],
                        "request.form": [
                            145
                        ],
                        "request": [
                            145,
                            147,
                            156,
                            149
                        ],
                        "body_bytes": [
                            147,
                            148
                        ],
                        "request.body": [
                            147
                        ],
                        "request.json": [
                            149
                        ],
                        "logger.error": [
                            151
                        ],
                        "logger": [
                            151
                        ],
                        "e": [
                            154,
                            151
                        ],
                        "HTTPException": [
                            152
                        ],
                        "solved_result": [
                            161,
                            155
                        ],
                        "solve_dependencies": [
                            155
                        ],
                        "dependency_overrides_provider": [
                            159
                        ],
                        "values": [
                            161,
                            166
                        ],
                        "errors": [
                            161,
                            162,
                            163
                        ],
                        "background_tasks": [
                            185,
                            161,
                            171
                        ],
                        "sub_response": [
                            161,
                            187,
                            188,
                            189
                        ],
                        "_": [
                            161
                        ],
                        "RequestValidationError": [
                            163
                        ],
                        "raw_response": [
                            165,
                            169,
                            170,
                            171,
                            172,
                            175
                        ],
                        "run_endpoint_function": [
                            165
                        ],
                        "raw_response.background": [
                            170,
                            171
                        ],
                        "response_data": [
                            173,
                            183
                        ],
                        "serialize_response": [
                            173
                        ],
                        "response_field": [
                            174
                        ],
                        "response_model_include": [
                            176
                        ],
                        "response_model_exclude": [
                            177
                        ],
                        "response_model_by_alias": [
                            178
                        ],
                        "response_model_exclude_unset": [
                            179
                        ],
                        "response": [
                            187,
                            190,
                            189,
                            182
                        ],
                        "response_class": [
                            182
                        ],
                        "status_code": [
                            184
                        ],
                        "response.headers.raw.extend": [
                            187
                        ],
                        "response.headers.raw": [
                            187
                        ],
                        "response.headers": [
                            187
                        ],
                        "sub_response.headers.raw": [
                            187
                        ],
                        "sub_response.headers": [
                            187
                        ],
                        "sub_response.status_code": [
                            188,
                            189
                        ],
                        "response.status_code": [
                            189
                        ],
                        "app": [
                            192
                        ],
                        "Callable": [
                            135
                        ]
                    },
                    "diff_line_number": 133,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    name: str = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Optional[Type[Response]] = None,\n    dependency_overrides_provider: Any = None,\n    callbacks: Optional[List[\"APIRoute\"]] = None,\n) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n    if methods is None:\n        methods = [\"GET\"]\n    self.methods = set([method.upper() for method in methods])\n    self.unique_id = generate_operation_id_for_path(\n        name=self.name, path=self.path_format, method=list(methods)[0]\n    )\n    self.response_model = response_model\n    if self.response_model:\n        assert (\n            status_code not in STATUS_CODES_WITH_NO_BODY\n        ), f\"Status code {status_code} must not have a response body\"\n        response_name = \"Response_\" + self.unique_id\n        self.response_field = create_response_field(\n            name=response_name, type_=self.response_model\n        )\n        # Create a clone of the field, so that a Pydantic submodel is not returned\n        # as is just because it's an instance of a subclass of a more limited class\n        # e.g. UserInDB (containing hashed_password) could be a subclass of User\n        # that doesn't have the hashed_password. But because it's a subclass, it\n        # would pass the validation and be returned as is.\n        # By being a new field, no inheritance will be passed as is. A new model\n        # will be always created.\n        self.secure_cloned_response_field: Optional[\n            ModelField\n        ] = create_cloned_field(self.response_field)\n    else:\n        self.response_field = None  # type: ignore\n        self.secure_cloned_response_field = None\n    self.status_code = status_code\n    self.tags = tags or []\n    if dependencies:\n        self.dependencies = list(dependencies)\n    else:\n        self.dependencies = []\n    self.summary = summary\n    self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n    # if a \"form feed\" character (page break) is found in the description text,\n    # truncate description text to the content preceding the first \"form feed\"\n    self.description = self.description.split(\"\\f\")[0]\n    self.response_description = response_description\n    self.responses = responses or {}\n    response_fields = {}\n    for additional_status_code, response in self.responses.items():\n        assert isinstance(response, dict), \"An additional response must be a dict\"\n        model = response.get(\"model\")\n        if model:\n            assert (\n                additional_status_code not in STATUS_CODES_WITH_NO_BODY\n            ), f\"Status code {additional_status_code} must not have a response body\"\n            response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n            response_field = create_response_field(name=response_name, type_=model)\n            response_fields[additional_status_code] = response_field\n    if response_fields:\n        self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n    else:\n        self.response_fields = {}\n    self.deprecated = deprecated\n    self.operation_id = operation_id\n    self.response_model_include = response_model_include\n    self.response_model_exclude = response_model_exclude\n    self.response_model_by_alias = response_model_by_alias\n    self.response_model_exclude_unset = response_model_exclude_unset\n    self.include_in_schema = include_in_schema\n    self.response_class = response_class\n\n    assert callable(endpoint), f\"An endpoint must be a callable\"\n    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n    for depends in self.dependencies[::-1]:\n        self.dependant.dependencies.insert(\n            0,\n            get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n        )\n    self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.callbacks = callbacks\n    self.app = request_response(self.get_route_handler())\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 237,
                    "variables": {
                        "str": [
                            320,
                            239,
                            244,
                            246,
                            247,
                            248,
                            249,
                            251,
                            252,
                            253
                        ],
                        "Callable": [
                            240
                        ],
                        "Type": [
                            242,
                            259
                        ],
                        "Any": [
                            249,
                            242,
                            260
                        ],
                        "int": [
                            320,
                            249,
                            243
                        ],
                        "List": [
                            261,
                            244,
                            252
                        ],
                        "Sequence": [
                            245
                        ],
                        "params.Depends": [
                            245
                        ],
                        "params": [
                            245
                        ],
                        "Dict": [
                            320,
                            249
                        ],
                        "Union": [
                            320,
                            249,
                            252,
                            254,
                            255
                        ],
                        "bool": [
                            256,
                            257,
                            250,
                            258
                        ],
                        "Optional": [
                            289,
                            259,
                            252,
                            261
                        ],
                        "Set": [
                            252
                        ],
                        "SetIntStr": [
                            254,
                            255
                        ],
                        "DictIntStrAny": [
                            254,
                            255
                        ],
                        "Response": [
                            259
                        ],
                        "set": [
                            269,
                            255
                        ],
                        "self.path": [
                            263
                        ],
                        "self": [
                            263,
                            264,
                            265,
                            266,
                            269,
                            270,
                            271,
                            273,
                            274,
                            278,
                            279,
                            280,
                            289,
                            291,
                            293,
                            294,
                            295,
                            296,
                            298,
                            300,
                            301,
                            302,
                            305,
                            306,
                            307,
                            309,
                            316,
                            320,
                            322,
                            323,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            330,
                            333,
                            334,
                            335,
                            337,
                            339,
                            340,
                            341,
                            342
                        ],
                        "path": [
                            266,
                            263
                        ],
                        "self.endpoint": [
                            264,
                            333,
                            302
                        ],
                        "endpoint": [
                            264,
                            265,
                            332
                        ],
                        "self.name": [
                            265,
                            271
                        ],
                        "name": [
                            265
                        ],
                        "get_name": [
                            265
                        ],
                        "self.path_regex": [
                            266
                        ],
                        "self.path_format": [
                            337,
                            266,
                            333,
                            271
                        ],
                        "self.param_convertors": [
                            266
                        ],
                        "compile_path": [
                            266
                        ],
                        "methods": [
                            267,
                            268,
                            269,
                            271
                        ],
                        "self.methods": [
                            269
                        ],
                        "method.upper": [
                            269
                        ],
                        "method": [
                            269
                        ],
                        "self.unique_id": [
                            339,
                            316,
                            270,
                            278
                        ],
                        "generate_operation_id_for_path": [
                            270
                        ],
                        "list": [
                            298,
                            271
                        ],
                        "self.response_model": [
                            280,
                            273,
                            274
                        ],
                        "response_model": [
                            273
                        ],
                        "status_code": [
                            276,
                            277,
                            295
                        ],
                        "STATUS_CODES_WITH_NO_BODY": [
                            314,
                            276
                        ],
                        "response_name": [
                            280,
                            316,
                            317,
                            278
                        ],
                        "self.response_field": [
                            291,
                            293,
                            279
                        ],
                        "create_response_field": [
                            317,
                            279
                        ],
                        "self.secure_cloned_response_field": [
                            289,
                            294
                        ],
                        "ModelField": [
                            320,
                            290
                        ],
                        "create_cloned_field": [
                            291
                        ],
                        "self.status_code": [
                            295
                        ],
                        "self.tags": [
                            296
                        ],
                        "tags": [
                            296
                        ],
                        "dependencies": [
                            297,
                            298
                        ],
                        "self.dependencies": [
                            298,
                            300,
                            334
                        ],
                        "self.summary": [
                            301
                        ],
                        "summary": [
                            301
                        ],
                        "self.description": [
                            305,
                            302
                        ],
                        "description": [
                            302
                        ],
                        "inspect.cleandoc": [
                            302
                        ],
                        "inspect": [
                            302
                        ],
                        "self.endpoint.__doc__": [
                            302
                        ],
                        "self.description.split": [
                            305
                        ],
                        "self.response_description": [
                            306
                        ],
                        "response_description": [
                            306
                        ],
                        "self.responses": [
                            307,
                            309
                        ],
                        "responses": [
                            307
                        ],
                        "response_fields": [
                            320,
                            308,
                            318,
                            319
                        ],
                        "additional_status_code": [
                            309,
                            314,
                            315,
                            316,
                            318
                        ],
                        "response": [
                            309,
                            310,
                            311
                        ],
                        "self.responses.items": [
                            309
                        ],
                        "isinstance": [
                            310
                        ],
                        "dict": [
                            310
                        ],
                        "model": [
                            312,
                            317,
                            311
                        ],
                        "response.get": [
                            311
                        ],
                        "response_field": [
                            317,
                            318
                        ],
                        "self.response_fields": [
                            320,
                            322
                        ],
                        "self.deprecated": [
                            323
                        ],
                        "deprecated": [
                            323
                        ],
                        "self.operation_id": [
                            324
                        ],
                        "operation_id": [
                            324
                        ],
                        "self.response_model_include": [
                            325
                        ],
                        "response_model_include": [
                            325
                        ],
                        "self.response_model_exclude": [
                            326
                        ],
                        "response_model_exclude": [
                            326
                        ],
                        "self.response_model_by_alias": [
                            327
                        ],
                        "response_model_by_alias": [
                            327
                        ],
                        "self.response_model_exclude_unset": [
                            328
                        ],
                        "response_model_exclude_unset": [
                            328
                        ],
                        "self.include_in_schema": [
                            329
                        ],
                        "include_in_schema": [
                            329
                        ],
                        "self.response_class": [
                            330
                        ],
                        "response_class": [
                            330
                        ],
                        "callable": [
                            332
                        ],
                        "self.dependant": [
                            339,
                            333,
                            335
                        ],
                        "get_dependant": [
                            333
                        ],
                        "depends": [
                            337,
                            334
                        ],
                        "self.dependant.dependencies.insert": [
                            335
                        ],
                        "self.dependant.dependencies": [
                            335
                        ],
                        "get_parameterless_sub_dependant": [
                            337
                        ],
                        "self.body_field": [
                            339
                        ],
                        "get_body_field": [
                            339
                        ],
                        "self.dependency_overrides_provider": [
                            340
                        ],
                        "dependency_overrides_provider": [
                            340
                        ],
                        "self.callbacks": [
                            341
                        ],
                        "callbacks": [
                            341
                        ],
                        "self.app": [
                            342
                        ],
                        "request_response": [
                            342
                        ],
                        "self.get_route_handler": [
                            342
                        ]
                    },
                    "filtered_variables": {
                        "Callable": [
                            240
                        ],
                        "Type": [
                            242,
                            259
                        ],
                        "Any": [
                            249,
                            242,
                            260
                        ],
                        "List": [
                            261,
                            244,
                            252
                        ],
                        "Sequence": [
                            245
                        ],
                        "params.Depends": [
                            245
                        ],
                        "params": [
                            245
                        ],
                        "Dict": [
                            320,
                            249
                        ],
                        "Union": [
                            320,
                            249,
                            252,
                            254,
                            255
                        ],
                        "Optional": [
                            289,
                            259,
                            252,
                            261
                        ],
                        "Set": [
                            252
                        ],
                        "SetIntStr": [
                            254,
                            255
                        ],
                        "DictIntStrAny": [
                            254,
                            255
                        ],
                        "Response": [
                            259
                        ],
                        "self.path": [
                            263
                        ],
                        "self": [
                            263,
                            264,
                            265,
                            266,
                            269,
                            270,
                            271,
                            273,
                            274,
                            278,
                            279,
                            280,
                            289,
                            291,
                            293,
                            294,
                            295,
                            296,
                            298,
                            300,
                            301,
                            302,
                            305,
                            306,
                            307,
                            309,
                            316,
                            320,
                            322,
                            323,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            330,
                            333,
                            334,
                            335,
                            337,
                            339,
                            340,
                            341,
                            342
                        ],
                        "path": [
                            266,
                            263
                        ],
                        "self.endpoint": [
                            264,
                            333,
                            302
                        ],
                        "endpoint": [
                            264,
                            265,
                            332
                        ],
                        "self.name": [
                            265,
                            271
                        ],
                        "name": [
                            265
                        ],
                        "get_name": [
                            265
                        ],
                        "self.path_regex": [
                            266
                        ],
                        "self.path_format": [
                            337,
                            266,
                            333,
                            271
                        ],
                        "self.param_convertors": [
                            266
                        ],
                        "compile_path": [
                            266
                        ],
                        "methods": [
                            267,
                            268,
                            269,
                            271
                        ],
                        "self.methods": [
                            269
                        ],
                        "method.upper": [
                            269
                        ],
                        "method": [
                            269
                        ],
                        "self.unique_id": [
                            339,
                            316,
                            270,
                            278
                        ],
                        "generate_operation_id_for_path": [
                            270
                        ],
                        "self.response_model": [
                            280,
                            273,
                            274
                        ],
                        "response_model": [
                            273
                        ],
                        "status_code": [
                            276,
                            277,
                            295
                        ],
                        "STATUS_CODES_WITH_NO_BODY": [
                            314,
                            276
                        ],
                        "response_name": [
                            280,
                            316,
                            317,
                            278
                        ],
                        "self.response_field": [
                            291,
                            293,
                            279
                        ],
                        "create_response_field": [
                            317,
                            279
                        ],
                        "self.secure_cloned_response_field": [
                            289,
                            294
                        ],
                        "ModelField": [
                            320,
                            290
                        ],
                        "create_cloned_field": [
                            291
                        ],
                        "self.status_code": [
                            295
                        ],
                        "self.tags": [
                            296
                        ],
                        "tags": [
                            296
                        ],
                        "dependencies": [
                            297,
                            298
                        ],
                        "self.dependencies": [
                            298,
                            300,
                            334
                        ],
                        "self.summary": [
                            301
                        ],
                        "summary": [
                            301
                        ],
                        "self.description": [
                            305,
                            302
                        ],
                        "description": [
                            302
                        ],
                        "inspect.cleandoc": [
                            302
                        ],
                        "inspect": [
                            302
                        ],
                        "self.endpoint.__doc__": [
                            302
                        ],
                        "self.description.split": [
                            305
                        ],
                        "self.response_description": [
                            306
                        ],
                        "response_description": [
                            306
                        ],
                        "self.responses": [
                            307,
                            309
                        ],
                        "responses": [
                            307
                        ],
                        "response_fields": [
                            320,
                            308,
                            318,
                            319
                        ],
                        "additional_status_code": [
                            309,
                            314,
                            315,
                            316,
                            318
                        ],
                        "response": [
                            309,
                            310,
                            311
                        ],
                        "self.responses.items": [
                            309
                        ],
                        "model": [
                            312,
                            317,
                            311
                        ],
                        "response.get": [
                            311
                        ],
                        "response_field": [
                            317,
                            318
                        ],
                        "self.response_fields": [
                            320,
                            322
                        ],
                        "self.deprecated": [
                            323
                        ],
                        "deprecated": [
                            323
                        ],
                        "self.operation_id": [
                            324
                        ],
                        "operation_id": [
                            324
                        ],
                        "self.response_model_include": [
                            325
                        ],
                        "response_model_include": [
                            325
                        ],
                        "self.response_model_exclude": [
                            326
                        ],
                        "response_model_exclude": [
                            326
                        ],
                        "self.response_model_by_alias": [
                            327
                        ],
                        "response_model_by_alias": [
                            327
                        ],
                        "self.response_model_exclude_unset": [
                            328
                        ],
                        "response_model_exclude_unset": [
                            328
                        ],
                        "self.include_in_schema": [
                            329
                        ],
                        "include_in_schema": [
                            329
                        ],
                        "self.response_class": [
                            330
                        ],
                        "response_class": [
                            330
                        ],
                        "self.dependant": [
                            339,
                            333,
                            335
                        ],
                        "get_dependant": [
                            333
                        ],
                        "depends": [
                            337,
                            334
                        ],
                        "self.dependant.dependencies.insert": [
                            335
                        ],
                        "self.dependant.dependencies": [
                            335
                        ],
                        "get_parameterless_sub_dependant": [
                            337
                        ],
                        "self.body_field": [
                            339
                        ],
                        "get_body_field": [
                            339
                        ],
                        "self.dependency_overrides_provider": [
                            340
                        ],
                        "dependency_overrides_provider": [
                            340
                        ],
                        "self.callbacks": [
                            341
                        ],
                        "callbacks": [
                            341
                        ],
                        "self.app": [
                            342
                        ],
                        "request_response": [
                            342
                        ],
                        "self.get_route_handler": [
                            342
                        ]
                    },
                    "diff_line_number": 257,
                    "class_data": {
                        "signature": "class APIRoute(routing.Route)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, name: str=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Optional[Type[Response]]=None, dependency_overrides_provider: Any=None, callbacks: Optional[List['APIRoute']]=None) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n    if methods is None:\n        methods = ['GET']\n    self.methods = set([method.upper() for method in methods])\n    self.unique_id = generate_operation_id_for_path(name=self.name, path=self.path_format, method=list(methods)[0])\n    self.response_model = response_model\n    if self.response_model:\n        assert status_code not in STATUS_CODES_WITH_NO_BODY, f'Status code {status_code} must not have a response body'\n        response_name = 'Response_' + self.unique_id\n        self.response_field = create_response_field(name=response_name, type_=self.response_model)\n        self.secure_cloned_response_field: Optional[ModelField] = create_cloned_field(self.response_field)\n    else:\n        self.response_field = None\n        self.secure_cloned_response_field = None\n    self.status_code = status_code\n    self.tags = tags or []\n    if dependencies:\n        self.dependencies = list(dependencies)\n    else:\n        self.dependencies = []\n    self.summary = summary\n    self.description = description or inspect.cleandoc(self.endpoint.__doc__ or '')\n    self.description = self.description.split('\\x0c')[0]\n    self.response_description = response_description\n    self.responses = responses or {}\n    response_fields = {}\n    for additional_status_code, response in self.responses.items():\n        assert isinstance(response, dict), 'An additional response must be a dict'\n        model = response.get('model')\n        if model:\n            assert additional_status_code not in STATUS_CODES_WITH_NO_BODY, f'Status code {additional_status_code} must not have a response body'\n            response_name = f'Response_{additional_status_code}_{self.unique_id}'\n            response_field = create_response_field(name=response_name, type_=model)\n            response_fields[additional_status_code] = response_field\n    if response_fields:\n        self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n    else:\n        self.response_fields = {}\n    self.deprecated = deprecated\n    self.operation_id = operation_id\n    self.response_model_include = response_model_include\n    self.response_model_exclude = response_model_exclude\n    self.response_model_by_alias = response_model_by_alias\n    self.response_model_exclude_unset = response_model_exclude_unset\n    self.include_in_schema = include_in_schema\n    self.response_class = response_class\n    assert callable(endpoint), f'An endpoint must be a callable'\n    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n    for depends in self.dependencies[::-1]:\n        self.dependant.dependencies.insert(0, get_parameterless_sub_dependant(depends=depends, path=self.path_format))\n    self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.callbacks = callbacks\n    self.app = request_response(self.get_route_handler())",
                            "def get_route_handler(self) -> Callable:\n    return get_request_handler(dependant=self.dependant, body_field=self.body_field, status_code=self.status_code, response_class=self.response_class or JSONResponse, response_field=self.secure_cloned_response_field, response_model_include=self.response_model_include, response_model_exclude=self.response_model_exclude, response_model_by_alias=self.response_model_by_alias, response_model_exclude_unset=self.response_model_exclude_unset, dependency_overrides_provider=self.dependency_overrides_provider)"
                        ],
                        "constructor_variables": [
                            "response_description",
                            "response_model_exclude",
                            "response_class",
                            "name",
                            "deprecated",
                            "status_code",
                            "tags",
                            "description",
                            "response_model_exclude_unset",
                            "model",
                            "path",
                            "unique_id",
                            "response_field",
                            "endpoint",
                            "summary",
                            "include_in_schema",
                            "app",
                            "response_model_include",
                            "methods",
                            "responses",
                            "response_fields",
                            "dependency_overrides_provider",
                            "dependant",
                            "response_model_by_alias",
                            "callbacks",
                            "response_name",
                            "dependencies",
                            "response_model",
                            "body_field",
                            "operation_id",
                            "secure_cloned_response_field"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, path: str, endpoint: Callable) -> None",
                            "get_route_handler(self) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ],
                        [
                            {},
                            {}
                        ],
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "get_route_handler",
                    "function_code": "def get_route_handler(self) -> Callable:\n    return get_request_handler(\n        dependant=self.dependant,\n        body_field=self.body_field,\n        status_code=self.status_code,\n        response_class=self.response_class or JSONResponse,\n        response_field=self.secure_cloned_response_field,\n        response_model_include=self.response_model_include,\n        response_model_exclude=self.response_model_exclude,\n        response_model_by_alias=self.response_model_by_alias,\n        response_model_exclude_unset=self.response_model_exclude_unset,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 344,
                    "variables": {
                        "get_request_handler": [
                            345
                        ],
                        "self.dependant": [
                            346
                        ],
                        "self": [
                            352,
                            353,
                            354,
                            355,
                            346,
                            347,
                            348,
                            349,
                            350,
                            351
                        ],
                        "self.body_field": [
                            347
                        ],
                        "self.status_code": [
                            348
                        ],
                        "self.response_class": [
                            349
                        ],
                        "JSONResponse": [
                            349
                        ],
                        "self.secure_cloned_response_field": [
                            350
                        ],
                        "self.response_model_include": [
                            351
                        ],
                        "self.response_model_exclude": [
                            352
                        ],
                        "self.response_model_by_alias": [
                            353
                        ],
                        "self.response_model_exclude_unset": [
                            354
                        ],
                        "self.dependency_overrides_provider": [
                            355
                        ],
                        "Callable": [
                            344
                        ]
                    },
                    "filtered_variables": {
                        "get_request_handler": [
                            345
                        ],
                        "self.dependant": [
                            346
                        ],
                        "self": [
                            352,
                            353,
                            354,
                            355,
                            346,
                            347,
                            348,
                            349,
                            350,
                            351
                        ],
                        "self.body_field": [
                            347
                        ],
                        "self.status_code": [
                            348
                        ],
                        "self.response_class": [
                            349
                        ],
                        "JSONResponse": [
                            349
                        ],
                        "self.secure_cloned_response_field": [
                            350
                        ],
                        "self.response_model_include": [
                            351
                        ],
                        "self.response_model_exclude": [
                            352
                        ],
                        "self.response_model_by_alias": [
                            353
                        ],
                        "self.response_model_exclude_unset": [
                            354
                        ],
                        "self.dependency_overrides_provider": [
                            355
                        ],
                        "Callable": [
                            344
                        ]
                    },
                    "diff_line_number": 354,
                    "class_data": {
                        "signature": "class APIRoute(routing.Route)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, name: str=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Optional[Type[Response]]=None, dependency_overrides_provider: Any=None, callbacks: Optional[List['APIRoute']]=None) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n    if methods is None:\n        methods = ['GET']\n    self.methods = set([method.upper() for method in methods])\n    self.unique_id = generate_operation_id_for_path(name=self.name, path=self.path_format, method=list(methods)[0])\n    self.response_model = response_model\n    if self.response_model:\n        assert status_code not in STATUS_CODES_WITH_NO_BODY, f'Status code {status_code} must not have a response body'\n        response_name = 'Response_' + self.unique_id\n        self.response_field = create_response_field(name=response_name, type_=self.response_model)\n        self.secure_cloned_response_field: Optional[ModelField] = create_cloned_field(self.response_field)\n    else:\n        self.response_field = None\n        self.secure_cloned_response_field = None\n    self.status_code = status_code\n    self.tags = tags or []\n    if dependencies:\n        self.dependencies = list(dependencies)\n    else:\n        self.dependencies = []\n    self.summary = summary\n    self.description = description or inspect.cleandoc(self.endpoint.__doc__ or '')\n    self.description = self.description.split('\\x0c')[0]\n    self.response_description = response_description\n    self.responses = responses or {}\n    response_fields = {}\n    for additional_status_code, response in self.responses.items():\n        assert isinstance(response, dict), 'An additional response must be a dict'\n        model = response.get('model')\n        if model:\n            assert additional_status_code not in STATUS_CODES_WITH_NO_BODY, f'Status code {additional_status_code} must not have a response body'\n            response_name = f'Response_{additional_status_code}_{self.unique_id}'\n            response_field = create_response_field(name=response_name, type_=model)\n            response_fields[additional_status_code] = response_field\n    if response_fields:\n        self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n    else:\n        self.response_fields = {}\n    self.deprecated = deprecated\n    self.operation_id = operation_id\n    self.response_model_include = response_model_include\n    self.response_model_exclude = response_model_exclude\n    self.response_model_by_alias = response_model_by_alias\n    self.response_model_exclude_unset = response_model_exclude_unset\n    self.include_in_schema = include_in_schema\n    self.response_class = response_class\n    assert callable(endpoint), f'An endpoint must be a callable'\n    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n    for depends in self.dependencies[::-1]:\n        self.dependant.dependencies.insert(0, get_parameterless_sub_dependant(depends=depends, path=self.path_format))\n    self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.callbacks = callbacks\n    self.app = request_response(self.get_route_handler())",
                            "def get_route_handler(self) -> Callable:\n    return get_request_handler(dependant=self.dependant, body_field=self.body_field, status_code=self.status_code, response_class=self.response_class or JSONResponse, response_field=self.secure_cloned_response_field, response_model_include=self.response_model_include, response_model_exclude=self.response_model_exclude, response_model_by_alias=self.response_model_by_alias, response_model_exclude_unset=self.response_model_exclude_unset, dependency_overrides_provider=self.dependency_overrides_provider)"
                        ],
                        "constructor_variables": [
                            "response_description",
                            "response_model_exclude",
                            "response_class",
                            "name",
                            "deprecated",
                            "status_code",
                            "tags",
                            "description",
                            "response_model_exclude_unset",
                            "model",
                            "path",
                            "unique_id",
                            "response_field",
                            "endpoint",
                            "summary",
                            "include_in_schema",
                            "app",
                            "response_model_include",
                            "methods",
                            "responses",
                            "response_fields",
                            "dependency_overrides_provider",
                            "dependant",
                            "response_model_by_alias",
                            "callbacks",
                            "response_name",
                            "dependencies",
                            "response_model",
                            "body_field",
                            "operation_id",
                            "secure_cloned_response_field"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, path: str, endpoint: Callable) -> None",
                            "get_route_handler(self) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "add_api_route",
                    "function_code": "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    route_class_override: Optional[Type[APIRoute]] = None,\n    callbacks: List[APIRoute] = None,\n) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    route_class = route_class_override or self.route_class\n    route = route_class(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n        callbacks=callbacks,\n    )\n    self.routes.append(route)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 382,
                    "variables": {
                        "str": [
                            384,
                            389,
                            391,
                            392,
                            393,
                            394,
                            396,
                            397,
                            405
                        ],
                        "Callable": [
                            385
                        ],
                        "Type": [
                            387,
                            404,
                            406
                        ],
                        "Any": [
                            394,
                            387
                        ],
                        "int": [
                            394,
                            388
                        ],
                        "List": [
                            396,
                            389,
                            407
                        ],
                        "Sequence": [
                            390
                        ],
                        "params.Depends": [
                            390
                        ],
                        "params": [
                            390
                        ],
                        "Dict": [
                            394
                        ],
                        "Union": [
                            394,
                            396,
                            398,
                            399
                        ],
                        "bool": [
                            395,
                            429,
                            400,
                            401,
                            402,
                            403
                        ],
                        "Optional": [
                            396,
                            406
                        ],
                        "Set": [
                            396
                        ],
                        "SetIntStr": [
                            398,
                            399
                        ],
                        "DictIntStrAny": [
                            398,
                            399
                        ],
                        "Response": [
                            404
                        ],
                        "APIRoute": [
                            406,
                            407
                        ],
                        "set": [
                            399
                        ],
                        "response_model_skip_defaults": [
                            409,
                            430
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            410
                        ],
                        "route_class": [
                            411,
                            412
                        ],
                        "route_class_override": [
                            411
                        ],
                        "self.route_class": [
                            411
                        ],
                        "self": [
                            433,
                            411,
                            435,
                            438
                        ],
                        "route": [
                            412,
                            438
                        ],
                        "path": [
                            413
                        ],
                        "endpoint": [
                            414
                        ],
                        "response_model": [
                            415
                        ],
                        "status_code": [
                            416
                        ],
                        "tags": [
                            417
                        ],
                        "dependencies": [
                            418
                        ],
                        "summary": [
                            419
                        ],
                        "description": [
                            420
                        ],
                        "response_description": [
                            421
                        ],
                        "responses": [
                            422
                        ],
                        "deprecated": [
                            423
                        ],
                        "methods": [
                            424
                        ],
                        "operation_id": [
                            425
                        ],
                        "response_model_include": [
                            426
                        ],
                        "response_model_exclude": [
                            427
                        ],
                        "response_model_by_alias": [
                            428
                        ],
                        "response_model_exclude_unset": [
                            430
                        ],
                        "include_in_schema": [
                            432
                        ],
                        "response_class": [
                            433
                        ],
                        "self.default_response_class": [
                            433
                        ],
                        "name": [
                            434
                        ],
                        "self.dependency_overrides_provider": [
                            435
                        ],
                        "callbacks": [
                            436
                        ],
                        "self.routes.append": [
                            438
                        ],
                        "self.routes": [
                            438
                        ]
                    },
                    "filtered_variables": {
                        "Callable": [
                            385
                        ],
                        "Type": [
                            387,
                            404,
                            406
                        ],
                        "Any": [
                            394,
                            387
                        ],
                        "List": [
                            396,
                            389,
                            407
                        ],
                        "Sequence": [
                            390
                        ],
                        "params.Depends": [
                            390
                        ],
                        "params": [
                            390
                        ],
                        "Dict": [
                            394
                        ],
                        "Union": [
                            394,
                            396,
                            398,
                            399
                        ],
                        "Optional": [
                            396,
                            406
                        ],
                        "Set": [
                            396
                        ],
                        "SetIntStr": [
                            398,
                            399
                        ],
                        "DictIntStrAny": [
                            398,
                            399
                        ],
                        "Response": [
                            404
                        ],
                        "APIRoute": [
                            406,
                            407
                        ],
                        "response_model_skip_defaults": [
                            409,
                            430
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            410
                        ],
                        "route_class": [
                            411,
                            412
                        ],
                        "route_class_override": [
                            411
                        ],
                        "self.route_class": [
                            411
                        ],
                        "self": [
                            433,
                            411,
                            435,
                            438
                        ],
                        "route": [
                            412,
                            438
                        ],
                        "path": [
                            413
                        ],
                        "endpoint": [
                            414
                        ],
                        "response_model": [
                            415
                        ],
                        "status_code": [
                            416
                        ],
                        "tags": [
                            417
                        ],
                        "dependencies": [
                            418
                        ],
                        "summary": [
                            419
                        ],
                        "description": [
                            420
                        ],
                        "response_description": [
                            421
                        ],
                        "responses": [
                            422
                        ],
                        "deprecated": [
                            423
                        ],
                        "methods": [
                            424
                        ],
                        "operation_id": [
                            425
                        ],
                        "response_model_include": [
                            426
                        ],
                        "response_model_exclude": [
                            427
                        ],
                        "response_model_by_alias": [
                            428
                        ],
                        "response_model_exclude_unset": [
                            430
                        ],
                        "include_in_schema": [
                            432
                        ],
                        "response_class": [
                            433
                        ],
                        "self.default_response_class": [
                            433
                        ],
                        "name": [
                            434
                        ],
                        "self.dependency_overrides_provider": [
                            435
                        ],
                        "callbacks": [
                            436
                        ],
                        "self.routes.append": [
                            438
                        ],
                        "self.routes": [
                            438
                        ]
                    },
                    "diff_line_number": 402,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "api_route",
                    "function_code": "def api_route(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(\n            path,\n            func,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags or [],\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses or {},\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=bool(\n                response_model_exclude_unset or response_model_skip_defaults\n            ),\n            include_in_schema=include_in_schema,\n            response_class=response_class or self.default_response_class,\n            name=name,\n            callbacks=callbacks,\n        )\n        return func\n\n    return decorator\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 440,
                    "variables": {
                        "str": [
                            448,
                            449,
                            450,
                            451,
                            453,
                            454,
                            462,
                            442,
                            446
                        ],
                        "Type": [
                            444,
                            461
                        ],
                        "Any": [
                            451,
                            444
                        ],
                        "int": [
                            451,
                            445
                        ],
                        "List": [
                            453,
                            446,
                            463
                        ],
                        "Sequence": [
                            447
                        ],
                        "params.Depends": [
                            447
                        ],
                        "params": [
                            447
                        ],
                        "Dict": [
                            451
                        ],
                        "Union": [
                            456,
                            451,
                            455
                        ],
                        "bool": [
                            452,
                            486,
                            457,
                            458,
                            459,
                            460
                        ],
                        "SetIntStr": [
                            456,
                            455
                        ],
                        "DictIntStrAny": [
                            456,
                            455
                        ],
                        "Response": [
                            461
                        ],
                        "APIRoute": [
                            463
                        ],
                        "set": [
                            456
                        ],
                        "response_model_skip_defaults": [
                            465,
                            487
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            466
                        ],
                        "Callable": [
                            464,
                            468
                        ],
                        "self.add_api_route": [
                            469
                        ],
                        "self": [
                            490,
                            469
                        ],
                        "path": [
                            470
                        ],
                        "func": [
                            494,
                            471
                        ],
                        "response_model": [
                            472
                        ],
                        "status_code": [
                            473
                        ],
                        "tags": [
                            474
                        ],
                        "dependencies": [
                            475
                        ],
                        "summary": [
                            476
                        ],
                        "description": [
                            477
                        ],
                        "response_description": [
                            478
                        ],
                        "responses": [
                            479
                        ],
                        "deprecated": [
                            480
                        ],
                        "methods": [
                            481
                        ],
                        "operation_id": [
                            482
                        ],
                        "response_model_include": [
                            483
                        ],
                        "response_model_exclude": [
                            484
                        ],
                        "response_model_by_alias": [
                            485
                        ],
                        "response_model_exclude_unset": [
                            487
                        ],
                        "include_in_schema": [
                            489
                        ],
                        "response_class": [
                            490
                        ],
                        "self.default_response_class": [
                            490
                        ],
                        "name": [
                            491
                        ],
                        "callbacks": [
                            492
                        ],
                        "decorator": [
                            496
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            444,
                            461
                        ],
                        "Any": [
                            451,
                            444
                        ],
                        "List": [
                            453,
                            446,
                            463
                        ],
                        "Sequence": [
                            447
                        ],
                        "params.Depends": [
                            447
                        ],
                        "params": [
                            447
                        ],
                        "Dict": [
                            451
                        ],
                        "Union": [
                            456,
                            451,
                            455
                        ],
                        "SetIntStr": [
                            456,
                            455
                        ],
                        "DictIntStrAny": [
                            456,
                            455
                        ],
                        "Response": [
                            461
                        ],
                        "APIRoute": [
                            463
                        ],
                        "response_model_skip_defaults": [
                            465,
                            487
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            466
                        ],
                        "Callable": [
                            464,
                            468
                        ],
                        "self.add_api_route": [
                            469
                        ],
                        "self": [
                            490,
                            469
                        ],
                        "path": [
                            470
                        ],
                        "func": [
                            494,
                            471
                        ],
                        "response_model": [
                            472
                        ],
                        "status_code": [
                            473
                        ],
                        "tags": [
                            474
                        ],
                        "dependencies": [
                            475
                        ],
                        "summary": [
                            476
                        ],
                        "description": [
                            477
                        ],
                        "response_description": [
                            478
                        ],
                        "responses": [
                            479
                        ],
                        "deprecated": [
                            480
                        ],
                        "methods": [
                            481
                        ],
                        "operation_id": [
                            482
                        ],
                        "response_model_include": [
                            483
                        ],
                        "response_model_exclude": [
                            484
                        ],
                        "response_model_by_alias": [
                            485
                        ],
                        "response_model_exclude_unset": [
                            487
                        ],
                        "include_in_schema": [
                            489
                        ],
                        "response_class": [
                            490
                        ],
                        "self.default_response_class": [
                            490
                        ],
                        "name": [
                            491
                        ],
                        "callbacks": [
                            492
                        ],
                        "decorator": [
                            496
                        ]
                    },
                    "diff_line_number": 459,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "include_router",
                    "function_code": "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    default_response_class: Optional[Type[Response]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise Exception(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                dependencies=list(dependencies or [])\n                + list(route.dependencies or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                include_in_schema=route.include_in_schema,\n                response_class=route.response_class or default_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=route.callbacks,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=list(route.methods or []),\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 516,
                    "variables": {
                        "str": [
                            520,
                            521,
                            523
                        ],
                        "List": [
                            521
                        ],
                        "Sequence": [
                            522
                        ],
                        "params.Depends": [
                            522
                        ],
                        "params": [
                            522
                        ],
                        "Dict": [
                            523
                        ],
                        "Union": [
                            523
                        ],
                        "int": [
                            523
                        ],
                        "Any": [
                            523
                        ],
                        "Optional": [
                            524
                        ],
                        "Type": [
                            524
                        ],
                        "Response": [
                            524
                        ],
                        "prefix": [
                            545,
                            579,
                            583,
                            526,
                            527,
                            528,
                            571
                        ],
                        "prefix.startswith": [
                            527
                        ],
                        "prefix.endswith": [
                            528
                        ],
                        "r": [
                            532,
                            533,
                            534
                        ],
                        "router.routes": [
                            532,
                            541
                        ],
                        "router": [
                            585,
                            587,
                            532,
                            541
                        ],
                        "path": [
                            533,
                            535
                        ],
                        "getattr": [
                            533,
                            534
                        ],
                        "name": [
                            537,
                            534
                        ],
                        "Exception": [
                            536
                        ],
                        "responses": [
                            539,
                            540,
                            543
                        ],
                        "route": [
                            541,
                            542,
                            543,
                            545,
                            546,
                            547,
                            548,
                            549,
                            551,
                            552,
                            553,
                            554,
                            556,
                            557,
                            558,
                            559,
                            560,
                            561,
                            562,
                            563,
                            564,
                            565,
                            566,
                            567,
                            569,
                            571,
                            572,
                            573,
                            574,
                            575,
                            577,
                            579,
                            581,
                            583
                        ],
                        "isinstance": [
                            577,
                            569,
                            581,
                            542
                        ],
                        "APIRoute": [
                            542
                        ],
                        "combined_responses": [
                            555,
                            543
                        ],
                        "route.responses": [
                            543
                        ],
                        "self.add_api_route": [
                            544
                        ],
                        "self": [
                            544,
                            578,
                            582,
                            586,
                            588,
                            570
                        ],
                        "route.path": [
                            545,
                            579,
                            571,
                            583
                        ],
                        "route.endpoint": [
                            546,
                            579,
                            572,
                            583
                        ],
                        "route.response_model": [
                            547
                        ],
                        "route.status_code": [
                            548
                        ],
                        "route.tags": [
                            549
                        ],
                        "tags": [
                            549
                        ],
                        "list": [
                            573,
                            550,
                            551
                        ],
                        "dependencies": [
                            550
                        ],
                        "route.dependencies": [
                            551
                        ],
                        "route.summary": [
                            552
                        ],
                        "route.description": [
                            553
                        ],
                        "route.response_description": [
                            554
                        ],
                        "route.deprecated": [
                            556
                        ],
                        "route.methods": [
                            573,
                            557
                        ],
                        "route.operation_id": [
                            558
                        ],
                        "route.response_model_include": [
                            559
                        ],
                        "route.response_model_exclude": [
                            560
                        ],
                        "route.response_model_by_alias": [
                            561
                        ],
                        "route.response_model_exclude_unset": [
                            562
                        ],
                        "route.include_in_schema": [
                            563,
                            574
                        ],
                        "route.response_class": [
                            564
                        ],
                        "default_response_class": [
                            564
                        ],
                        "route.name": [
                            579,
                            565,
                            583,
                            575
                        ],
                        "type": [
                            566
                        ],
                        "route.callbacks": [
                            567
                        ],
                        "routing.Route": [
                            569
                        ],
                        "routing": [
                            569,
                            581
                        ],
                        "self.add_route": [
                            570
                        ],
                        "APIWebSocketRoute": [
                            577
                        ],
                        "self.add_api_websocket_route": [
                            578
                        ],
                        "routing.WebSocketRoute": [
                            581
                        ],
                        "self.add_websocket_route": [
                            582
                        ],
                        "handler": [
                            585,
                            586,
                            587,
                            588
                        ],
                        "router.on_startup": [
                            585
                        ],
                        "self.add_event_handler": [
                            586,
                            588
                        ],
                        "router.on_shutdown": [
                            587
                        ]
                    },
                    "filtered_variables": {
                        "List": [
                            521
                        ],
                        "Sequence": [
                            522
                        ],
                        "params.Depends": [
                            522
                        ],
                        "params": [
                            522
                        ],
                        "Dict": [
                            523
                        ],
                        "Union": [
                            523
                        ],
                        "Any": [
                            523
                        ],
                        "Optional": [
                            524
                        ],
                        "Type": [
                            524
                        ],
                        "Response": [
                            524
                        ],
                        "prefix": [
                            545,
                            579,
                            583,
                            526,
                            527,
                            528,
                            571
                        ],
                        "prefix.startswith": [
                            527
                        ],
                        "prefix.endswith": [
                            528
                        ],
                        "r": [
                            532,
                            533,
                            534
                        ],
                        "router.routes": [
                            532,
                            541
                        ],
                        "router": [
                            585,
                            587,
                            532,
                            541
                        ],
                        "path": [
                            533,
                            535
                        ],
                        "name": [
                            537,
                            534
                        ],
                        "responses": [
                            539,
                            540,
                            543
                        ],
                        "route": [
                            541,
                            542,
                            543,
                            545,
                            546,
                            547,
                            548,
                            549,
                            551,
                            552,
                            553,
                            554,
                            556,
                            557,
                            558,
                            559,
                            560,
                            561,
                            562,
                            563,
                            564,
                            565,
                            566,
                            567,
                            569,
                            571,
                            572,
                            573,
                            574,
                            575,
                            577,
                            579,
                            581,
                            583
                        ],
                        "APIRoute": [
                            542
                        ],
                        "combined_responses": [
                            555,
                            543
                        ],
                        "route.responses": [
                            543
                        ],
                        "self.add_api_route": [
                            544
                        ],
                        "self": [
                            544,
                            578,
                            582,
                            586,
                            588,
                            570
                        ],
                        "route.path": [
                            545,
                            579,
                            571,
                            583
                        ],
                        "route.endpoint": [
                            546,
                            579,
                            572,
                            583
                        ],
                        "route.response_model": [
                            547
                        ],
                        "route.status_code": [
                            548
                        ],
                        "route.tags": [
                            549
                        ],
                        "tags": [
                            549
                        ],
                        "dependencies": [
                            550
                        ],
                        "route.dependencies": [
                            551
                        ],
                        "route.summary": [
                            552
                        ],
                        "route.description": [
                            553
                        ],
                        "route.response_description": [
                            554
                        ],
                        "route.deprecated": [
                            556
                        ],
                        "route.methods": [
                            573,
                            557
                        ],
                        "route.operation_id": [
                            558
                        ],
                        "route.response_model_include": [
                            559
                        ],
                        "route.response_model_exclude": [
                            560
                        ],
                        "route.response_model_by_alias": [
                            561
                        ],
                        "route.response_model_exclude_unset": [
                            562
                        ],
                        "route.include_in_schema": [
                            563,
                            574
                        ],
                        "route.response_class": [
                            564
                        ],
                        "default_response_class": [
                            564
                        ],
                        "route.name": [
                            579,
                            565,
                            583,
                            575
                        ],
                        "route.callbacks": [
                            567
                        ],
                        "routing.Route": [
                            569
                        ],
                        "routing": [
                            569,
                            581
                        ],
                        "self.add_route": [
                            570
                        ],
                        "APIWebSocketRoute": [
                            577
                        ],
                        "self.add_api_websocket_route": [
                            578
                        ],
                        "routing.WebSocketRoute": [
                            581
                        ],
                        "self.add_websocket_route": [
                            582
                        ],
                        "handler": [
                            585,
                            586,
                            587,
                            588
                        ],
                        "router.on_startup": [
                            585
                        ],
                        "self.add_event_handler": [
                            586,
                            588
                        ],
                        "router.on_shutdown": [
                            587
                        ]
                    },
                    "diff_line_number": 562,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "get",
                    "function_code": "def get(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 590,
                    "variables": {
                        "str": [
                            611,
                            592,
                            596,
                            598,
                            599,
                            600,
                            601,
                            603
                        ],
                        "Type": [
                            594,
                            610
                        ],
                        "Any": [
                            601,
                            594
                        ],
                        "int": [
                            601,
                            595
                        ],
                        "List": [
                            612,
                            596
                        ],
                        "Sequence": [
                            597
                        ],
                        "params.Depends": [
                            597
                        ],
                        "params": [
                            597
                        ],
                        "Dict": [
                            601
                        ],
                        "Union": [
                            601,
                            604,
                            605
                        ],
                        "bool": [
                            608,
                            609,
                            632,
                            602,
                            606,
                            607
                        ],
                        "SetIntStr": [
                            604,
                            605
                        ],
                        "DictIntStrAny": [
                            604,
                            605
                        ],
                        "Response": [
                            610
                        ],
                        "APIRoute": [
                            612
                        ],
                        "set": [
                            605
                        ],
                        "response_model_skip_defaults": [
                            633,
                            614
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            615
                        ],
                        "self.api_route": [
                            616
                        ],
                        "self": [
                            616,
                            636
                        ],
                        "path": [
                            617
                        ],
                        "response_model": [
                            618
                        ],
                        "status_code": [
                            619
                        ],
                        "tags": [
                            620
                        ],
                        "dependencies": [
                            621
                        ],
                        "summary": [
                            622
                        ],
                        "description": [
                            623
                        ],
                        "response_description": [
                            624
                        ],
                        "responses": [
                            625
                        ],
                        "deprecated": [
                            626
                        ],
                        "operation_id": [
                            628
                        ],
                        "response_model_include": [
                            629
                        ],
                        "response_model_exclude": [
                            630
                        ],
                        "response_model_by_alias": [
                            631
                        ],
                        "response_model_exclude_unset": [
                            633
                        ],
                        "include_in_schema": [
                            635
                        ],
                        "response_class": [
                            636
                        ],
                        "self.default_response_class": [
                            636
                        ],
                        "name": [
                            637
                        ],
                        "callbacks": [
                            638
                        ],
                        "Callable": [
                            613
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            594,
                            610
                        ],
                        "Any": [
                            601,
                            594
                        ],
                        "List": [
                            612,
                            596
                        ],
                        "Sequence": [
                            597
                        ],
                        "params.Depends": [
                            597
                        ],
                        "params": [
                            597
                        ],
                        "Dict": [
                            601
                        ],
                        "Union": [
                            601,
                            604,
                            605
                        ],
                        "SetIntStr": [
                            604,
                            605
                        ],
                        "DictIntStrAny": [
                            604,
                            605
                        ],
                        "Response": [
                            610
                        ],
                        "APIRoute": [
                            612
                        ],
                        "response_model_skip_defaults": [
                            633,
                            614
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            615
                        ],
                        "self.api_route": [
                            616
                        ],
                        "self": [
                            616,
                            636
                        ],
                        "path": [
                            617
                        ],
                        "response_model": [
                            618
                        ],
                        "status_code": [
                            619
                        ],
                        "tags": [
                            620
                        ],
                        "dependencies": [
                            621
                        ],
                        "summary": [
                            622
                        ],
                        "description": [
                            623
                        ],
                        "response_description": [
                            624
                        ],
                        "responses": [
                            625
                        ],
                        "deprecated": [
                            626
                        ],
                        "operation_id": [
                            628
                        ],
                        "response_model_include": [
                            629
                        ],
                        "response_model_exclude": [
                            630
                        ],
                        "response_model_by_alias": [
                            631
                        ],
                        "response_model_exclude_unset": [
                            633
                        ],
                        "include_in_schema": [
                            635
                        ],
                        "response_class": [
                            636
                        ],
                        "self.default_response_class": [
                            636
                        ],
                        "name": [
                            637
                        ],
                        "callbacks": [
                            638
                        ],
                        "Callable": [
                            613
                        ]
                    },
                    "diff_line_number": 608,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "put",
                    "function_code": "def put(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 641,
                    "variables": {
                        "str": [
                            643,
                            647,
                            649,
                            650,
                            651,
                            652,
                            654,
                            662
                        ],
                        "Type": [
                            645,
                            661
                        ],
                        "Any": [
                            652,
                            645
                        ],
                        "int": [
                            652,
                            646
                        ],
                        "List": [
                            663,
                            647
                        ],
                        "Sequence": [
                            648
                        ],
                        "params.Depends": [
                            648
                        ],
                        "params": [
                            648
                        ],
                        "Dict": [
                            652
                        ],
                        "Union": [
                            656,
                            652,
                            655
                        ],
                        "bool": [
                            683,
                            653,
                            657,
                            658,
                            659,
                            660
                        ],
                        "SetIntStr": [
                            656,
                            655
                        ],
                        "DictIntStrAny": [
                            656,
                            655
                        ],
                        "Response": [
                            661
                        ],
                        "APIRoute": [
                            663
                        ],
                        "set": [
                            656
                        ],
                        "response_model_skip_defaults": [
                            665,
                            684
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            666
                        ],
                        "self.api_route": [
                            667
                        ],
                        "self": [
                            667,
                            687
                        ],
                        "path": [
                            668
                        ],
                        "response_model": [
                            669
                        ],
                        "status_code": [
                            670
                        ],
                        "tags": [
                            671
                        ],
                        "dependencies": [
                            672
                        ],
                        "summary": [
                            673
                        ],
                        "description": [
                            674
                        ],
                        "response_description": [
                            675
                        ],
                        "responses": [
                            676
                        ],
                        "deprecated": [
                            677
                        ],
                        "operation_id": [
                            679
                        ],
                        "response_model_include": [
                            680
                        ],
                        "response_model_exclude": [
                            681
                        ],
                        "response_model_by_alias": [
                            682
                        ],
                        "response_model_exclude_unset": [
                            684
                        ],
                        "include_in_schema": [
                            686
                        ],
                        "response_class": [
                            687
                        ],
                        "self.default_response_class": [
                            687
                        ],
                        "name": [
                            688
                        ],
                        "callbacks": [
                            689
                        ],
                        "Callable": [
                            664
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            645,
                            661
                        ],
                        "Any": [
                            652,
                            645
                        ],
                        "List": [
                            663,
                            647
                        ],
                        "Sequence": [
                            648
                        ],
                        "params.Depends": [
                            648
                        ],
                        "params": [
                            648
                        ],
                        "Dict": [
                            652
                        ],
                        "Union": [
                            656,
                            652,
                            655
                        ],
                        "SetIntStr": [
                            656,
                            655
                        ],
                        "DictIntStrAny": [
                            656,
                            655
                        ],
                        "Response": [
                            661
                        ],
                        "APIRoute": [
                            663
                        ],
                        "response_model_skip_defaults": [
                            665,
                            684
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            666
                        ],
                        "self.api_route": [
                            667
                        ],
                        "self": [
                            667,
                            687
                        ],
                        "path": [
                            668
                        ],
                        "response_model": [
                            669
                        ],
                        "status_code": [
                            670
                        ],
                        "tags": [
                            671
                        ],
                        "dependencies": [
                            672
                        ],
                        "summary": [
                            673
                        ],
                        "description": [
                            674
                        ],
                        "response_description": [
                            675
                        ],
                        "responses": [
                            676
                        ],
                        "deprecated": [
                            677
                        ],
                        "operation_id": [
                            679
                        ],
                        "response_model_include": [
                            680
                        ],
                        "response_model_exclude": [
                            681
                        ],
                        "response_model_by_alias": [
                            682
                        ],
                        "response_model_exclude_unset": [
                            684
                        ],
                        "include_in_schema": [
                            686
                        ],
                        "response_class": [
                            687
                        ],
                        "self.default_response_class": [
                            687
                        ],
                        "name": [
                            688
                        ],
                        "callbacks": [
                            689
                        ],
                        "Callable": [
                            664
                        ]
                    },
                    "diff_line_number": 659,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "post",
                    "function_code": "def post(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 692,
                    "variables": {
                        "str": [
                            705,
                            713,
                            694,
                            698,
                            700,
                            701,
                            702,
                            703
                        ],
                        "Type": [
                            696,
                            712
                        ],
                        "Any": [
                            696,
                            703
                        ],
                        "int": [
                            697,
                            703
                        ],
                        "List": [
                            714,
                            698
                        ],
                        "Sequence": [
                            699
                        ],
                        "params.Depends": [
                            699
                        ],
                        "params": [
                            699
                        ],
                        "Dict": [
                            703
                        ],
                        "Union": [
                            706,
                            707,
                            703
                        ],
                        "bool": [
                            704,
                            708,
                            709,
                            710,
                            711,
                            734
                        ],
                        "SetIntStr": [
                            706,
                            707
                        ],
                        "DictIntStrAny": [
                            706,
                            707
                        ],
                        "Response": [
                            712
                        ],
                        "APIRoute": [
                            714
                        ],
                        "set": [
                            707
                        ],
                        "response_model_skip_defaults": [
                            716,
                            735
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            717
                        ],
                        "self.api_route": [
                            718
                        ],
                        "self": [
                            738,
                            718
                        ],
                        "path": [
                            719
                        ],
                        "response_model": [
                            720
                        ],
                        "status_code": [
                            721
                        ],
                        "tags": [
                            722
                        ],
                        "dependencies": [
                            723
                        ],
                        "summary": [
                            724
                        ],
                        "description": [
                            725
                        ],
                        "response_description": [
                            726
                        ],
                        "responses": [
                            727
                        ],
                        "deprecated": [
                            728
                        ],
                        "operation_id": [
                            730
                        ],
                        "response_model_include": [
                            731
                        ],
                        "response_model_exclude": [
                            732
                        ],
                        "response_model_by_alias": [
                            733
                        ],
                        "response_model_exclude_unset": [
                            735
                        ],
                        "include_in_schema": [
                            737
                        ],
                        "response_class": [
                            738
                        ],
                        "self.default_response_class": [
                            738
                        ],
                        "name": [
                            739
                        ],
                        "callbacks": [
                            740
                        ],
                        "Callable": [
                            715
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            696,
                            712
                        ],
                        "Any": [
                            696,
                            703
                        ],
                        "List": [
                            714,
                            698
                        ],
                        "Sequence": [
                            699
                        ],
                        "params.Depends": [
                            699
                        ],
                        "params": [
                            699
                        ],
                        "Dict": [
                            703
                        ],
                        "Union": [
                            706,
                            707,
                            703
                        ],
                        "SetIntStr": [
                            706,
                            707
                        ],
                        "DictIntStrAny": [
                            706,
                            707
                        ],
                        "Response": [
                            712
                        ],
                        "APIRoute": [
                            714
                        ],
                        "response_model_skip_defaults": [
                            716,
                            735
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            717
                        ],
                        "self.api_route": [
                            718
                        ],
                        "self": [
                            738,
                            718
                        ],
                        "path": [
                            719
                        ],
                        "response_model": [
                            720
                        ],
                        "status_code": [
                            721
                        ],
                        "tags": [
                            722
                        ],
                        "dependencies": [
                            723
                        ],
                        "summary": [
                            724
                        ],
                        "description": [
                            725
                        ],
                        "response_description": [
                            726
                        ],
                        "responses": [
                            727
                        ],
                        "deprecated": [
                            728
                        ],
                        "operation_id": [
                            730
                        ],
                        "response_model_include": [
                            731
                        ],
                        "response_model_exclude": [
                            732
                        ],
                        "response_model_by_alias": [
                            733
                        ],
                        "response_model_exclude_unset": [
                            735
                        ],
                        "include_in_schema": [
                            737
                        ],
                        "response_class": [
                            738
                        ],
                        "self.default_response_class": [
                            738
                        ],
                        "name": [
                            739
                        ],
                        "callbacks": [
                            740
                        ],
                        "Callable": [
                            715
                        ]
                    },
                    "diff_line_number": 710,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "delete",
                    "function_code": "def delete(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 743,
                    "variables": {
                        "str": [
                            745,
                            749,
                            751,
                            752,
                            753,
                            754,
                            756,
                            764
                        ],
                        "Type": [
                            747,
                            763
                        ],
                        "Any": [
                            754,
                            747
                        ],
                        "int": [
                            754,
                            748
                        ],
                        "List": [
                            765,
                            749
                        ],
                        "Sequence": [
                            750
                        ],
                        "params.Depends": [
                            750
                        ],
                        "params": [
                            750
                        ],
                        "Dict": [
                            754
                        ],
                        "Union": [
                            754,
                            757,
                            758
                        ],
                        "bool": [
                            785,
                            755,
                            759,
                            760,
                            761,
                            762
                        ],
                        "SetIntStr": [
                            757,
                            758
                        ],
                        "DictIntStrAny": [
                            757,
                            758
                        ],
                        "Response": [
                            763
                        ],
                        "APIRoute": [
                            765
                        ],
                        "set": [
                            758
                        ],
                        "response_model_skip_defaults": [
                            786,
                            767
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            768
                        ],
                        "self.api_route": [
                            769
                        ],
                        "self": [
                            769,
                            789
                        ],
                        "path": [
                            770
                        ],
                        "response_model": [
                            771
                        ],
                        "status_code": [
                            772
                        ],
                        "tags": [
                            773
                        ],
                        "dependencies": [
                            774
                        ],
                        "summary": [
                            775
                        ],
                        "description": [
                            776
                        ],
                        "response_description": [
                            777
                        ],
                        "responses": [
                            778
                        ],
                        "deprecated": [
                            779
                        ],
                        "operation_id": [
                            781
                        ],
                        "response_model_include": [
                            782
                        ],
                        "response_model_exclude": [
                            783
                        ],
                        "response_model_by_alias": [
                            784
                        ],
                        "response_model_exclude_unset": [
                            786
                        ],
                        "include_in_schema": [
                            788
                        ],
                        "response_class": [
                            789
                        ],
                        "self.default_response_class": [
                            789
                        ],
                        "name": [
                            790
                        ],
                        "callbacks": [
                            791
                        ],
                        "Callable": [
                            766
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            747,
                            763
                        ],
                        "Any": [
                            754,
                            747
                        ],
                        "List": [
                            765,
                            749
                        ],
                        "Sequence": [
                            750
                        ],
                        "params.Depends": [
                            750
                        ],
                        "params": [
                            750
                        ],
                        "Dict": [
                            754
                        ],
                        "Union": [
                            754,
                            757,
                            758
                        ],
                        "SetIntStr": [
                            757,
                            758
                        ],
                        "DictIntStrAny": [
                            757,
                            758
                        ],
                        "Response": [
                            763
                        ],
                        "APIRoute": [
                            765
                        ],
                        "response_model_skip_defaults": [
                            786,
                            767
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            768
                        ],
                        "self.api_route": [
                            769
                        ],
                        "self": [
                            769,
                            789
                        ],
                        "path": [
                            770
                        ],
                        "response_model": [
                            771
                        ],
                        "status_code": [
                            772
                        ],
                        "tags": [
                            773
                        ],
                        "dependencies": [
                            774
                        ],
                        "summary": [
                            775
                        ],
                        "description": [
                            776
                        ],
                        "response_description": [
                            777
                        ],
                        "responses": [
                            778
                        ],
                        "deprecated": [
                            779
                        ],
                        "operation_id": [
                            781
                        ],
                        "response_model_include": [
                            782
                        ],
                        "response_model_exclude": [
                            783
                        ],
                        "response_model_by_alias": [
                            784
                        ],
                        "response_model_exclude_unset": [
                            786
                        ],
                        "include_in_schema": [
                            788
                        ],
                        "response_class": [
                            789
                        ],
                        "self.default_response_class": [
                            789
                        ],
                        "name": [
                            790
                        ],
                        "callbacks": [
                            791
                        ],
                        "Callable": [
                            766
                        ]
                    },
                    "diff_line_number": 761,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "options",
                    "function_code": "def options(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 794,
                    "variables": {
                        "str": [
                            800,
                            802,
                            803,
                            804,
                            805,
                            807,
                            815,
                            796
                        ],
                        "Type": [
                            814,
                            798
                        ],
                        "Any": [
                            805,
                            798
                        ],
                        "int": [
                            805,
                            799
                        ],
                        "List": [
                            800,
                            816
                        ],
                        "Sequence": [
                            801
                        ],
                        "params.Depends": [
                            801
                        ],
                        "params": [
                            801
                        ],
                        "Dict": [
                            805
                        ],
                        "Union": [
                            808,
                            809,
                            805
                        ],
                        "bool": [
                            836,
                            806,
                            810,
                            811,
                            812,
                            813
                        ],
                        "SetIntStr": [
                            808,
                            809
                        ],
                        "DictIntStrAny": [
                            808,
                            809
                        ],
                        "Response": [
                            814
                        ],
                        "APIRoute": [
                            816
                        ],
                        "set": [
                            809
                        ],
                        "response_model_skip_defaults": [
                            818,
                            837
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            819
                        ],
                        "self.api_route": [
                            820
                        ],
                        "self": [
                            840,
                            820
                        ],
                        "path": [
                            821
                        ],
                        "response_model": [
                            822
                        ],
                        "status_code": [
                            823
                        ],
                        "tags": [
                            824
                        ],
                        "dependencies": [
                            825
                        ],
                        "summary": [
                            826
                        ],
                        "description": [
                            827
                        ],
                        "response_description": [
                            828
                        ],
                        "responses": [
                            829
                        ],
                        "deprecated": [
                            830
                        ],
                        "operation_id": [
                            832
                        ],
                        "response_model_include": [
                            833
                        ],
                        "response_model_exclude": [
                            834
                        ],
                        "response_model_by_alias": [
                            835
                        ],
                        "response_model_exclude_unset": [
                            837
                        ],
                        "include_in_schema": [
                            839
                        ],
                        "response_class": [
                            840
                        ],
                        "self.default_response_class": [
                            840
                        ],
                        "name": [
                            841
                        ],
                        "callbacks": [
                            842
                        ],
                        "Callable": [
                            817
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            814,
                            798
                        ],
                        "Any": [
                            805,
                            798
                        ],
                        "List": [
                            800,
                            816
                        ],
                        "Sequence": [
                            801
                        ],
                        "params.Depends": [
                            801
                        ],
                        "params": [
                            801
                        ],
                        "Dict": [
                            805
                        ],
                        "Union": [
                            808,
                            809,
                            805
                        ],
                        "SetIntStr": [
                            808,
                            809
                        ],
                        "DictIntStrAny": [
                            808,
                            809
                        ],
                        "Response": [
                            814
                        ],
                        "APIRoute": [
                            816
                        ],
                        "response_model_skip_defaults": [
                            818,
                            837
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            819
                        ],
                        "self.api_route": [
                            820
                        ],
                        "self": [
                            840,
                            820
                        ],
                        "path": [
                            821
                        ],
                        "response_model": [
                            822
                        ],
                        "status_code": [
                            823
                        ],
                        "tags": [
                            824
                        ],
                        "dependencies": [
                            825
                        ],
                        "summary": [
                            826
                        ],
                        "description": [
                            827
                        ],
                        "response_description": [
                            828
                        ],
                        "responses": [
                            829
                        ],
                        "deprecated": [
                            830
                        ],
                        "operation_id": [
                            832
                        ],
                        "response_model_include": [
                            833
                        ],
                        "response_model_exclude": [
                            834
                        ],
                        "response_model_by_alias": [
                            835
                        ],
                        "response_model_exclude_unset": [
                            837
                        ],
                        "include_in_schema": [
                            839
                        ],
                        "response_class": [
                            840
                        ],
                        "self.default_response_class": [
                            840
                        ],
                        "name": [
                            841
                        ],
                        "callbacks": [
                            842
                        ],
                        "Callable": [
                            817
                        ]
                    },
                    "diff_line_number": 812,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "head",
                    "function_code": "def head(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 845,
                    "variables": {
                        "str": [
                            866,
                            847,
                            851,
                            853,
                            854,
                            855,
                            856,
                            858
                        ],
                        "Type": [
                            849,
                            865
                        ],
                        "Any": [
                            856,
                            849
                        ],
                        "int": [
                            856,
                            850
                        ],
                        "List": [
                            867,
                            851
                        ],
                        "Sequence": [
                            852
                        ],
                        "params.Depends": [
                            852
                        ],
                        "params": [
                            852
                        ],
                        "Dict": [
                            856
                        ],
                        "Union": [
                            856,
                            859,
                            860
                        ],
                        "bool": [
                            864,
                            887,
                            857,
                            861,
                            862,
                            863
                        ],
                        "SetIntStr": [
                            859,
                            860
                        ],
                        "DictIntStrAny": [
                            859,
                            860
                        ],
                        "Response": [
                            865
                        ],
                        "APIRoute": [
                            867
                        ],
                        "set": [
                            860
                        ],
                        "response_model_skip_defaults": [
                            888,
                            869
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            870
                        ],
                        "self.api_route": [
                            871
                        ],
                        "self": [
                            891,
                            871
                        ],
                        "path": [
                            872
                        ],
                        "response_model": [
                            873
                        ],
                        "status_code": [
                            874
                        ],
                        "tags": [
                            875
                        ],
                        "dependencies": [
                            876
                        ],
                        "summary": [
                            877
                        ],
                        "description": [
                            878
                        ],
                        "response_description": [
                            879
                        ],
                        "responses": [
                            880
                        ],
                        "deprecated": [
                            881
                        ],
                        "operation_id": [
                            883
                        ],
                        "response_model_include": [
                            884
                        ],
                        "response_model_exclude": [
                            885
                        ],
                        "response_model_by_alias": [
                            886
                        ],
                        "response_model_exclude_unset": [
                            888
                        ],
                        "include_in_schema": [
                            890
                        ],
                        "response_class": [
                            891
                        ],
                        "self.default_response_class": [
                            891
                        ],
                        "name": [
                            892
                        ],
                        "callbacks": [
                            893
                        ],
                        "Callable": [
                            868
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            849,
                            865
                        ],
                        "Any": [
                            856,
                            849
                        ],
                        "List": [
                            867,
                            851
                        ],
                        "Sequence": [
                            852
                        ],
                        "params.Depends": [
                            852
                        ],
                        "params": [
                            852
                        ],
                        "Dict": [
                            856
                        ],
                        "Union": [
                            856,
                            859,
                            860
                        ],
                        "SetIntStr": [
                            859,
                            860
                        ],
                        "DictIntStrAny": [
                            859,
                            860
                        ],
                        "Response": [
                            865
                        ],
                        "APIRoute": [
                            867
                        ],
                        "response_model_skip_defaults": [
                            888,
                            869
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            870
                        ],
                        "self.api_route": [
                            871
                        ],
                        "self": [
                            891,
                            871
                        ],
                        "path": [
                            872
                        ],
                        "response_model": [
                            873
                        ],
                        "status_code": [
                            874
                        ],
                        "tags": [
                            875
                        ],
                        "dependencies": [
                            876
                        ],
                        "summary": [
                            877
                        ],
                        "description": [
                            878
                        ],
                        "response_description": [
                            879
                        ],
                        "responses": [
                            880
                        ],
                        "deprecated": [
                            881
                        ],
                        "operation_id": [
                            883
                        ],
                        "response_model_include": [
                            884
                        ],
                        "response_model_exclude": [
                            885
                        ],
                        "response_model_by_alias": [
                            886
                        ],
                        "response_model_exclude_unset": [
                            888
                        ],
                        "include_in_schema": [
                            890
                        ],
                        "response_class": [
                            891
                        ],
                        "self.default_response_class": [
                            891
                        ],
                        "name": [
                            892
                        ],
                        "callbacks": [
                            893
                        ],
                        "Callable": [
                            868
                        ]
                    },
                    "diff_line_number": 863,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "patch",
                    "function_code": "def patch(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 896,
                    "variables": {
                        "str": [
                            898,
                            902,
                            904,
                            905,
                            906,
                            907,
                            909,
                            917
                        ],
                        "Type": [
                            916,
                            900
                        ],
                        "Any": [
                            907,
                            900
                        ],
                        "int": [
                            907,
                            901
                        ],
                        "List": [
                            918,
                            902
                        ],
                        "Sequence": [
                            903
                        ],
                        "params.Depends": [
                            903
                        ],
                        "params": [
                            903
                        ],
                        "Dict": [
                            907
                        ],
                        "Union": [
                            907,
                            910,
                            911
                        ],
                        "bool": [
                            938,
                            908,
                            912,
                            913,
                            914,
                            915
                        ],
                        "SetIntStr": [
                            910,
                            911
                        ],
                        "DictIntStrAny": [
                            910,
                            911
                        ],
                        "Response": [
                            916
                        ],
                        "APIRoute": [
                            918
                        ],
                        "set": [
                            911
                        ],
                        "response_model_skip_defaults": [
                            920,
                            939
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            921
                        ],
                        "self.api_route": [
                            922
                        ],
                        "self": [
                            922,
                            942
                        ],
                        "path": [
                            923
                        ],
                        "response_model": [
                            924
                        ],
                        "status_code": [
                            925
                        ],
                        "tags": [
                            926
                        ],
                        "dependencies": [
                            927
                        ],
                        "summary": [
                            928
                        ],
                        "description": [
                            929
                        ],
                        "response_description": [
                            930
                        ],
                        "responses": [
                            931
                        ],
                        "deprecated": [
                            932
                        ],
                        "operation_id": [
                            934
                        ],
                        "response_model_include": [
                            935
                        ],
                        "response_model_exclude": [
                            936
                        ],
                        "response_model_by_alias": [
                            937
                        ],
                        "response_model_exclude_unset": [
                            939
                        ],
                        "include_in_schema": [
                            941
                        ],
                        "response_class": [
                            942
                        ],
                        "self.default_response_class": [
                            942
                        ],
                        "name": [
                            943
                        ],
                        "callbacks": [
                            944
                        ],
                        "Callable": [
                            919
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            916,
                            900
                        ],
                        "Any": [
                            907,
                            900
                        ],
                        "List": [
                            918,
                            902
                        ],
                        "Sequence": [
                            903
                        ],
                        "params.Depends": [
                            903
                        ],
                        "params": [
                            903
                        ],
                        "Dict": [
                            907
                        ],
                        "Union": [
                            907,
                            910,
                            911
                        ],
                        "SetIntStr": [
                            910,
                            911
                        ],
                        "DictIntStrAny": [
                            910,
                            911
                        ],
                        "Response": [
                            916
                        ],
                        "APIRoute": [
                            918
                        ],
                        "response_model_skip_defaults": [
                            920,
                            939
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            921
                        ],
                        "self.api_route": [
                            922
                        ],
                        "self": [
                            922,
                            942
                        ],
                        "path": [
                            923
                        ],
                        "response_model": [
                            924
                        ],
                        "status_code": [
                            925
                        ],
                        "tags": [
                            926
                        ],
                        "dependencies": [
                            927
                        ],
                        "summary": [
                            928
                        ],
                        "description": [
                            929
                        ],
                        "response_description": [
                            930
                        ],
                        "responses": [
                            931
                        ],
                        "deprecated": [
                            932
                        ],
                        "operation_id": [
                            934
                        ],
                        "response_model_include": [
                            935
                        ],
                        "response_model_exclude": [
                            936
                        ],
                        "response_model_by_alias": [
                            937
                        ],
                        "response_model_exclude_unset": [
                            939
                        ],
                        "include_in_schema": [
                            941
                        ],
                        "response_class": [
                            942
                        ],
                        "self.default_response_class": [
                            942
                        ],
                        "name": [
                            943
                        ],
                        "callbacks": [
                            944
                        ],
                        "Callable": [
                            919
                        ]
                    },
                    "diff_line_number": 914,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "trace",
                    "function_code": "def trace(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 947,
                    "variables": {
                        "str": [
                            960,
                            968,
                            949,
                            953,
                            955,
                            956,
                            957,
                            958
                        ],
                        "Type": [
                            967,
                            951
                        ],
                        "Any": [
                            958,
                            951
                        ],
                        "int": [
                            952,
                            958
                        ],
                        "List": [
                            953,
                            969
                        ],
                        "Sequence": [
                            954
                        ],
                        "params.Depends": [
                            954
                        ],
                        "params": [
                            954
                        ],
                        "Dict": [
                            958
                        ],
                        "Union": [
                            961,
                            962,
                            958
                        ],
                        "bool": [
                            963,
                            964,
                            965,
                            966,
                            989,
                            959
                        ],
                        "SetIntStr": [
                            961,
                            962
                        ],
                        "DictIntStrAny": [
                            961,
                            962
                        ],
                        "Response": [
                            967
                        ],
                        "APIRoute": [
                            969
                        ],
                        "set": [
                            962
                        ],
                        "response_model_skip_defaults": [
                            971,
                            990
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            972
                        ],
                        "self.api_route": [
                            973
                        ],
                        "self": [
                            993,
                            973
                        ],
                        "path": [
                            974
                        ],
                        "response_model": [
                            975
                        ],
                        "status_code": [
                            976
                        ],
                        "tags": [
                            977
                        ],
                        "dependencies": [
                            978
                        ],
                        "summary": [
                            979
                        ],
                        "description": [
                            980
                        ],
                        "response_description": [
                            981
                        ],
                        "responses": [
                            982
                        ],
                        "deprecated": [
                            983
                        ],
                        "operation_id": [
                            985
                        ],
                        "response_model_include": [
                            986
                        ],
                        "response_model_exclude": [
                            987
                        ],
                        "response_model_by_alias": [
                            988
                        ],
                        "response_model_exclude_unset": [
                            990
                        ],
                        "include_in_schema": [
                            992
                        ],
                        "response_class": [
                            993
                        ],
                        "self.default_response_class": [
                            993
                        ],
                        "name": [
                            994
                        ],
                        "callbacks": [
                            995
                        ],
                        "Callable": [
                            970
                        ]
                    },
                    "filtered_variables": {
                        "Type": [
                            967,
                            951
                        ],
                        "Any": [
                            958,
                            951
                        ],
                        "List": [
                            953,
                            969
                        ],
                        "Sequence": [
                            954
                        ],
                        "params.Depends": [
                            954
                        ],
                        "params": [
                            954
                        ],
                        "Dict": [
                            958
                        ],
                        "Union": [
                            961,
                            962,
                            958
                        ],
                        "SetIntStr": [
                            961,
                            962
                        ],
                        "DictIntStrAny": [
                            961,
                            962
                        ],
                        "Response": [
                            967
                        ],
                        "APIRoute": [
                            969
                        ],
                        "response_model_skip_defaults": [
                            971,
                            990
                        ],
                        "warning_response_model_skip_defaults_deprecated": [
                            972
                        ],
                        "self.api_route": [
                            973
                        ],
                        "self": [
                            993,
                            973
                        ],
                        "path": [
                            974
                        ],
                        "response_model": [
                            975
                        ],
                        "status_code": [
                            976
                        ],
                        "tags": [
                            977
                        ],
                        "dependencies": [
                            978
                        ],
                        "summary": [
                            979
                        ],
                        "description": [
                            980
                        ],
                        "response_description": [
                            981
                        ],
                        "responses": [
                            982
                        ],
                        "deprecated": [
                            983
                        ],
                        "operation_id": [
                            985
                        ],
                        "response_model_include": [
                            986
                        ],
                        "response_model_exclude": [
                            987
                        ],
                        "response_model_by_alias": [
                            988
                        ],
                        "response_model_exclude_unset": [
                            990
                        ],
                        "include_in_schema": [
                            992
                        ],
                        "response_class": [
                            993
                        ],
                        "self.default_response_class": [
                            993
                        ],
                        "name": [
                            994
                        ],
                        "callbacks": [
                            995
                        ],
                        "Callable": [
                            970
                        ]
                    },
                    "diff_line_number": 965,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default, on_startup=on_startup, on_shutdown=on_shutdown)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    route_class = route_class_override or self.route_class\n    route = route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider, callbacks=callbacks)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_exclude_unset=route.response_model_exclude_unset, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name, route_class_override=type(route), callbacks=route.callbacks)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n    for handler in router.on_startup:\n        self.add_event_handler('startup', handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler('shutdown', handler)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_exclude_unset=bool(response_model_exclude_unset or response_model_skip_defaults), include_in_schema=include_in_schema, response_class=response_class or self.default_response_class, name=name, callbacks=callbacks)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "default_response_class",
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _prepare_response_content(\n    res: Any, *, by_alias: bool = True, exclude_unset: bool\n) -> Any:\n    if isinstance(res, BaseModel):\n        if PYDANTIC_1:\n            return res.dict(by_alias=by_alias, exclude_unset=exclude_unset)\n        else:\n            return res.dict(\n                by_alias=by_alias, skip_defaults=exclude_unset\n            )  # pragma: nocover\n    elif isinstance(res, list):\n        return [\n            _prepare_response_content(item, exclude_unset=exclude_unset) for item in res\n        ]\n    elif isinstance(res, dict):\n        return {\n            k: _prepare_response_content(v, exclude_unset=exclude_unset)\n            for k, v in res.items()\n        }\n    return res",
                "async def serialize_response(\n    *,\n    field: ModelField = None,\n    response_content: Any,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    exclude_unset: bool = False,\n    is_coroutine: bool = True,\n) -> Any:\n    if field:\n        errors = []\n        response_content = _prepare_response_content(\n            response_content, by_alias=by_alias, exclude_unset=exclude_unset\n        )\n        if is_coroutine:\n            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n        else:\n            value, errors_ = await run_in_threadpool(\n                field.validate, response_content, {}, loc=(\"response\",)\n            )\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors, field.type_)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n        )\n    else:\n        return jsonable_encoder(response_content)",
                "async def run_endpoint_function(\n    *, dependant: Dependant, values: Dict[str, Any], is_coroutine: bool\n) -> Any:\n    # Only called by get_request_handler. Has been split into its own function to\n    # facilitate profiling endpoints, since inner functions are harder to profile.\n    assert dependant.call is not None, \"dependant.call must be a function\"\n\n    if is_coroutine:\n        return await dependant.call(**values)\n    else:\n        return await run_in_threadpool(dependant.call, **values)",
                "def get_request_handler(\n    dependant: Dependant,\n    body_field: ModelField = None,\n    status_code: int = 200,\n    response_class: Type[Response] = JSONResponse,\n    response_field: ModelField = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    dependency_overrides_provider: Any = None,\n) -> Callable:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(get_field_info(body_field), params.Form)\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logger.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n            raise RequestValidationError(errors, body=body)\n        else:\n            raw_response = await run_endpoint_function(\n                dependant=dependant, values=values, is_coroutine=is_coroutine\n            )\n\n            if isinstance(raw_response, Response):\n                if raw_response.background is None:\n                    raw_response.background = background_tasks\n                return raw_response\n            response_data = await serialize_response(\n                field=response_field,\n                response_content=raw_response,\n                include=response_model_include,\n                exclude=response_model_exclude,\n                by_alias=response_model_by_alias,\n                exclude_unset=response_model_exclude_unset,\n                is_coroutine=is_coroutine,\n            )\n            response = response_class(\n                content=response_data,\n                status_code=status_code,\n                background=background_tasks,\n            )\n            response.headers.raw.extend(sub_response.headers.raw)\n            if sub_response.status_code:\n                response.status_code = sub_response.status_code\n            return response\n\n    return app",
                "def get_websocket_app(\n    dependant: Dependant, dependency_overrides_provider: Any = None\n) -> Callable:\n    async def app(websocket: WebSocket) -> None:\n        solved_result = await solve_dependencies(\n            request=websocket,\n            dependant=dependant,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, _, _2, _3 = solved_result\n        if errors:\n            await websocket.close(code=WS_1008_POLICY_VIOLATION)\n            raise WebSocketRequestValidationError(errors)\n        assert dependant.call is not None, \"dependant.call must be a function\"\n        await dependant.call(**values)\n\n    return app",
                "async def app(request: Request) -> Response:\n    try:\n        body = None\n        if body_field:\n            if is_body_form:\n                body = await request.form()\n            else:\n                body_bytes = await request.body()\n                if body_bytes:\n                    body = await request.json()\n    except Exception as e:\n        logger.error(f\"Error getting request body: {e}\")\n        raise HTTPException(\n            status_code=400, detail=\"There was an error parsing the body\"\n        ) from e\n    solved_result = await solve_dependencies(\n        request=request,\n        dependant=dependant,\n        body=body,\n        dependency_overrides_provider=dependency_overrides_provider,\n    )\n    values, errors, background_tasks, sub_response, _ = solved_result\n    if errors:\n        raise RequestValidationError(errors, body=body)\n    else:\n        raw_response = await run_endpoint_function(\n            dependant=dependant, values=values, is_coroutine=is_coroutine\n        )\n\n        if isinstance(raw_response, Response):\n            if raw_response.background is None:\n                raw_response.background = background_tasks\n            return raw_response\n        response_data = await serialize_response(\n            field=response_field,\n            response_content=raw_response,\n            include=response_model_include,\n            exclude=response_model_exclude,\n            by_alias=response_model_by_alias,\n            exclude_unset=response_model_exclude_unset,\n            is_coroutine=is_coroutine,\n        )\n        response = response_class(\n            content=response_data,\n            status_code=status_code,\n            background=background_tasks,\n        )\n        response.headers.raw.extend(sub_response.headers.raw)\n        if sub_response.status_code:\n            response.status_code = sub_response.status_code\n        return response",
                "async def app(websocket: WebSocket) -> None:\n    solved_result = await solve_dependencies(\n        request=websocket,\n        dependant=dependant,\n        dependency_overrides_provider=dependency_overrides_provider,\n    )\n    values, errors, _, _2, _3 = solved_result\n    if errors:\n        await websocket.close(code=WS_1008_POLICY_VIOLATION)\n        raise WebSocketRequestValidationError(errors)\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    await dependant.call(**values)",
                "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    name: str = None,\n    dependency_overrides_provider: Any = None,\n) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.dependant = get_dependant(path=path, call=self.endpoint)\n    self.app = websocket_session(\n        get_websocket_app(\n            dependant=self.dependant,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n    )\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)",
                "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    name: str = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Optional[Type[Response]] = None,\n    dependency_overrides_provider: Any = None,\n    callbacks: Optional[List[\"APIRoute\"]] = None,\n) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n    if methods is None:\n        methods = [\"GET\"]\n    self.methods = set([method.upper() for method in methods])\n    self.unique_id = generate_operation_id_for_path(\n        name=self.name, path=self.path_format, method=list(methods)[0]\n    )\n    self.response_model = response_model\n    if self.response_model:\n        assert (\n            status_code not in STATUS_CODES_WITH_NO_BODY\n        ), f\"Status code {status_code} must not have a response body\"\n        response_name = \"Response_\" + self.unique_id\n        self.response_field = create_response_field(\n            name=response_name, type_=self.response_model\n        )\n        # Create a clone of the field, so that a Pydantic submodel is not returned\n        # as is just because it's an instance of a subclass of a more limited class\n        # e.g. UserInDB (containing hashed_password) could be a subclass of User\n        # that doesn't have the hashed_password. But because it's a subclass, it\n        # would pass the validation and be returned as is.\n        # By being a new field, no inheritance will be passed as is. A new model\n        # will be always created.\n        self.secure_cloned_response_field: Optional[\n            ModelField\n        ] = create_cloned_field(self.response_field)\n    else:\n        self.response_field = None  # type: ignore\n        self.secure_cloned_response_field = None\n    self.status_code = status_code\n    self.tags = tags or []\n    if dependencies:\n        self.dependencies = list(dependencies)\n    else:\n        self.dependencies = []\n    self.summary = summary\n    self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n    # if a \"form feed\" character (page break) is found in the description text,\n    # truncate description text to the content preceding the first \"form feed\"\n    self.description = self.description.split(\"\\f\")[0]\n    self.response_description = response_description\n    self.responses = responses or {}\n    response_fields = {}\n    for additional_status_code, response in self.responses.items():\n        assert isinstance(response, dict), \"An additional response must be a dict\"\n        model = response.get(\"model\")\n        if model:\n            assert (\n                additional_status_code not in STATUS_CODES_WITH_NO_BODY\n            ), f\"Status code {additional_status_code} must not have a response body\"\n            response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n            response_field = create_response_field(name=response_name, type_=model)\n            response_fields[additional_status_code] = response_field\n    if response_fields:\n        self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n    else:\n        self.response_fields = {}\n    self.deprecated = deprecated\n    self.operation_id = operation_id\n    self.response_model_include = response_model_include\n    self.response_model_exclude = response_model_exclude\n    self.response_model_by_alias = response_model_by_alias\n    self.response_model_exclude_unset = response_model_exclude_unset\n    self.include_in_schema = include_in_schema\n    self.response_class = response_class\n\n    assert callable(endpoint), f\"An endpoint must be a callable\"\n    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n    for depends in self.dependencies[::-1]:\n        self.dependant.dependencies.insert(\n            0,\n            get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n        )\n    self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.callbacks = callbacks\n    self.app = request_response(self.get_route_handler())",
                "def get_route_handler(self) -> Callable:\n    return get_request_handler(\n        dependant=self.dependant,\n        body_field=self.body_field,\n        status_code=self.status_code,\n        response_class=self.response_class or JSONResponse,\n        response_field=self.secure_cloned_response_field,\n        response_model_include=self.response_model_include,\n        response_model_exclude=self.response_model_exclude,\n        response_model_by_alias=self.response_model_by_alias,\n        response_model_exclude_unset=self.response_model_exclude_unset,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n    )",
                "def __init__(\n    self,\n    routes: List[routing.BaseRoute] = None,\n    redirect_slashes: bool = True,\n    default: ASGIApp = None,\n    dependency_overrides_provider: Any = None,\n    route_class: Type[APIRoute] = APIRoute,\n    default_response_class: Type[Response] = None,\n    on_startup: Sequence[Callable] = None,\n    on_shutdown: Sequence[Callable] = None,\n) -> None:\n    super().__init__(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n    )\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    route_class_override: Optional[Type[APIRoute]] = None,\n    callbacks: List[APIRoute] = None,\n) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    route_class = route_class_override or self.route_class\n    route = route_class(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n        callbacks=callbacks,\n    )\n    self.routes.append(route)",
                "def api_route(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(\n            path,\n            func,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags or [],\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses or {},\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=bool(\n                response_model_exclude_unset or response_model_skip_defaults\n            ),\n            include_in_schema=include_in_schema,\n            response_class=response_class or self.default_response_class,\n            name=name,\n            callbacks=callbacks,\n        )\n        return func\n\n    return decorator",
                "def add_api_websocket_route(\n    self, path: str, endpoint: Callable, name: str = None\n) -> None:\n    route = APIWebSocketRoute(\n        path,\n        endpoint=endpoint,\n        name=name,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n    )\n    self.routes.append(route)",
                "def websocket(self, path: str, name: str = None) -> Callable:\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n\n    return decorator",
                "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    default_response_class: Optional[Type[Response]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise Exception(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                dependencies=list(dependencies or [])\n                + list(route.dependencies or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                include_in_schema=route.include_in_schema,\n                response_class=route.response_class or default_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=route.callbacks,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=list(route.methods or []),\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)",
                "def get(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def put(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def post(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def delete(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def options(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def head(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def patch(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def trace(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                "def decorator(func: Callable) -> Callable:\n    self.add_api_route(\n        path,\n        func,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )\n    return func",
                "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
            ],
            "inscope_function_signatures": [
                "_prepare_response_content(res: Any) -> Any",
                "serialize_response() -> Any",
                "run_endpoint_function() -> Any",
                "get_request_handler(dependant: Dependant, body_field: ModelField=None, status_code: int=200, response_class: Type[Response]=JSONResponse, response_field: ModelField=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_exclude_unset: bool=False, dependency_overrides_provider: Any=None) -> Callable",
                "get_websocket_app(dependant: Dependant, dependency_overrides_provider: Any=None) -> Callable",
                "app(request: Request) -> Response",
                "app(websocket: WebSocket) -> None",
                "__init__(self, path: str, endpoint: Callable) -> None",
                "__init__(self, path: str, endpoint: Callable) -> None",
                "get_route_handler(self) -> Callable",
                "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None",
                "add_api_route(self, path: str, endpoint: Callable) -> None",
                "api_route(self, path: str) -> Callable",
                "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                "websocket(self, path: str, name: str=None) -> Callable",
                "include_router(self, router: 'APIRouter') -> None",
                "get(self, path: str) -> Callable",
                "put(self, path: str) -> Callable",
                "post(self, path: str) -> Callable",
                "delete(self, path: str) -> Callable",
                "options(self, path: str) -> Callable",
                "head(self, path: str) -> Callable",
                "patch(self, path: str) -> Callable",
                "trace(self, path: str) -> Callable",
                "decorator(func: Callable) -> Callable",
                "decorator(func: Callable) -> Callable"
            ],
            "variables_in_file": {
                "ImportError": [
                    45
                ],
                "Any": [
                    387,
                    260,
                    645,
                    134,
                    900,
                    394,
                    523,
                    652,
                    907,
                    798,
                    805,
                    52,
                    53,
                    951,
                    696,
                    444,
                    958,
                    703,
                    451,
                    196,
                    76,
                    849,
                    82,
                    594,
                    856,
                    601,
                    221,
                    747,
                    365,
                    112,
                    113,
                    242,
                    754,
                    249
                ],
                "bool": [
                    256,
                    257,
                    258,
                    132,
                    133,
                    395,
                    908,
                    653,
                    400,
                    401,
                    402,
                    403,
                    657,
                    658,
                    659,
                    660,
                    785,
                    912,
                    913,
                    914,
                    915,
                    806,
                    810,
                    683,
                    811,
                    429,
                    812,
                    813,
                    938,
                    52,
                    959,
                    704,
                    963,
                    452,
                    708,
                    709,
                    710,
                    711,
                    457,
                    458,
                    459,
                    460,
                    836,
                    965,
                    79,
                    80,
                    81,
                    857,
                    602,
                    861,
                    606,
                    607,
                    608,
                    609,
                    734,
                    762,
                    862,
                    863,
                    486,
                    864,
                    363,
                    887,
                    112,
                    760,
                    989,
                    755,
                    964,
                    759,
                    632,
                    761,
                    250,
                    966
                ],
                "isinstance": [
                    96,
                    65,
                    577,
                    581,
                    542,
                    169,
                    138,
                    54,
                    310,
                    569,
                    61,
                    94
                ],
                "res": [
                    65,
                    68,
                    70,
                    54,
                    56,
                    58,
                    61,
                    63
                ],
                "BaseModel": [
                    54
                ],
                "PYDANTIC_1": [
                    55
                ],
                "res.dict": [
                    56,
                    58
                ],
                "by_alias": [
                    56,
                    59,
                    104,
                    86
                ],
                "exclude_unset": [
                    67,
                    105,
                    86,
                    56,
                    59,
                    63
                ],
                "list": [
                    96,
                    573,
                    550,
                    551,
                    298,
                    271,
                    61
                ],
                "_prepare_response_content": [
                    67,
                    85,
                    63
                ],
                "item": [
                    63
                ],
                "dict": [
                    65,
                    310
                ],
                "k": [
                    67,
                    68
                ],
                "v": [
                    67,
                    68
                ],
                "res.items": [
                    68
                ],
                "ModelField": [
                    320,
                    129,
                    290,
                    75,
                    126
                ],
                "Union": [
                    130,
                    131,
                    394,
                    523,
                    396,
                    652,
                    398,
                    399,
                    655,
                    656,
                    907,
                    910,
                    911,
                    805,
                    808,
                    809,
                    958,
                    703,
                    320,
                    961,
                    706,
                    451,
                    707,
                    962,
                    455,
                    456,
                    77,
                    78,
                    856,
                    601,
                    859,
                    604,
                    605,
                    860,
                    754,
                    757,
                    758,
                    249,
                    252,
                    254,
                    255
                ],
                "SetIntStr": [
                    130,
                    131,
                    398,
                    399,
                    655,
                    656,
                    910,
                    911,
                    808,
                    809,
                    961,
                    706,
                    707,
                    962,
                    455,
                    456,
                    77,
                    78,
                    859,
                    604,
                    605,
                    860,
                    757,
                    758,
                    254,
                    255
                ],
                "DictIntStrAny": [
                    130,
                    131,
                    398,
                    399,
                    655,
                    656,
                    910,
                    911,
                    808,
                    809,
                    961,
                    706,
                    707,
                    962,
                    455,
                    456,
                    77,
                    78,
                    859,
                    604,
                    605,
                    860,
                    757,
                    758,
                    254,
                    255
                ],
                "set": [
                    962,
                    131,
                    707,
                    456,
                    809,
                    269,
                    78,
                    399,
                    656,
                    911,
                    758,
                    860,
                    605,
                    255
                ],
                "field": [
                    99,
                    89,
                    83,
                    92
                ],
                "errors": [
                    97,
                    98,
                    99,
                    161,
                    162,
                    163,
                    204,
                    205,
                    207,
                    84,
                    95
                ],
                "response_content": [
                    108,
                    85,
                    86,
                    89,
                    92
                ],
                "is_coroutine": [
                    166,
                    137,
                    180,
                    118,
                    88
                ],
                "value": [
                    89,
                    91,
                    101
                ],
                "errors_": [
                    96,
                    97,
                    89,
                    91,
                    94,
                    95
                ],
                "field.validate": [
                    89,
                    92
                ],
                "run_in_threadpool": [
                    121,
                    91
                ],
                "ErrorWrapper": [
                    94
                ],
                "errors.append": [
                    95
                ],
                "errors.extend": [
                    97
                ],
                "ValidationError": [
                    99
                ],
                "field.type_": [
                    99
                ],
                "jsonable_encoder": [
                    108,
                    100
                ],
                "include": [
                    102
                ],
                "exclude": [
                    103
                ],
                "Dependant": [
                    112,
                    196,
                    125
                ],
                "Dict": [
                    320,
                    451,
                    805,
                    394,
                    523,
                    652,
                    907,
                    112,
                    601,
                    754,
                    856,
                    249,
                    958,
                    703
                ],
                "str": [
                    520,
                    521,
                    523,
                    592,
                    596,
                    598,
                    599,
                    600,
                    601,
                    603,
                    611,
                    112,
                    643,
                    647,
                    649,
                    650,
                    651,
                    652,
                    654,
                    662,
                    694,
                    698,
                    700,
                    701,
                    702,
                    703,
                    705,
                    713,
                    217,
                    220,
                    745,
                    749,
                    239,
                    751,
                    752,
                    753,
                    754,
                    756,
                    244,
                    246,
                    247,
                    248,
                    249,
                    251,
                    764,
                    252,
                    253,
                    796,
                    800,
                    802,
                    803,
                    804,
                    805,
                    807,
                    815,
                    320,
                    847,
                    851,
                    853,
                    854,
                    855,
                    856,
                    858,
                    866,
                    384,
                    898,
                    389,
                    902,
                    391,
                    392,
                    393,
                    394,
                    904,
                    396,
                    397,
                    905,
                    906,
                    907,
                    909,
                    405,
                    917,
                    949,
                    953,
                    442,
                    955,
                    956,
                    957,
                    446,
                    958,
                    448,
                    449,
                    450,
                    451,
                    960,
                    453,
                    454,
                    968,
                    462,
                    499,
                    509
                ],
                "dependant.call": [
                    136,
                    137,
                    208,
                    209,
                    116,
                    119,
                    121
                ],
                "dependant": [
                    166,
                    136,
                    137,
                    201,
                    208,
                    209,
                    116,
                    119,
                    121,
                    157
                ],
                "values": [
                    161,
                    166,
                    204,
                    209,
                    119,
                    121
                ],
                "int": [
                    388,
                    901,
                    646,
                    394,
                    523,
                    652,
                    907,
                    799,
                    805,
                    952,
                    697,
                    445,
                    958,
                    703,
                    320,
                    451,
                    850,
                    595,
                    856,
                    601,
                    748,
                    754,
                    243,
                    249,
                    127
                ],
                "Type": [
                    128,
                    259,
                    387,
                    645,
                    900,
                    524,
                    404,
                    661,
                    406,
                    916,
                    798,
                    814,
                    951,
                    696,
                    444,
                    967,
                    712,
                    461,
                    849,
                    594,
                    865,
                    610,
                    747,
                    366,
                    367,
                    242,
                    763
                ],
                "Response": [
                    128,
                    865,
                    610,
                    259,
                    967,
                    712,
                    169,
                    140,
                    461,
                    524,
                    367,
                    814,
                    404,
                    661,
                    916,
                    763
                ],
                "JSONResponse": [
                    128,
                    349
                ],
                "asyncio.iscoroutinefunction": [
                    137
                ],
                "asyncio": [
                    137
                ],
                "is_body_form": [
                    144,
                    138
                ],
                "body_field": [
                    138,
                    143
                ],
                "get_field_info": [
                    138
                ],
                "params.Form": [
                    138
                ],
                "params": [
                    801,
                    390,
                    903,
                    648,
                    138,
                    522,
                    750,
                    852,
                    245,
                    597,
                    954,
                    699,
                    447
                ],
                "Request": [
                    140
                ],
                "body": [
                    163,
                    142,
                    145,
                    149,
                    158
                ],
                "request.form": [
                    145
                ],
                "request": [
                    145,
                    147,
                    156,
                    149
                ],
                "body_bytes": [
                    147,
                    148
                ],
                "request.body": [
                    147
                ],
                "request.json": [
                    149
                ],
                "Exception": [
                    536,
                    150
                ],
                "logger.error": [
                    151
                ],
                "logger": [
                    151
                ],
                "e": [
                    154,
                    151
                ],
                "HTTPException": [
                    152
                ],
                "solved_result": [
                    161,
                    155,
                    204,
                    199
                ],
                "solve_dependencies": [
                    155,
                    199
                ],
                "dependency_overrides_provider": [
                    230,
                    202,
                    340,
                    378,
                    159
                ],
                "background_tasks": [
                    185,
                    161,
                    171
                ],
                "sub_response": [
                    161,
                    187,
                    188,
                    189
                ],
                "_": [
                    161,
                    204
                ],
                "RequestValidationError": [
                    163
                ],
                "raw_response": [
                    165,
                    169,
                    170,
                    171,
                    172,
                    175
                ],
                "run_endpoint_function": [
                    165
                ],
                "raw_response.background": [
                    170,
                    171
                ],
                "response_data": [
                    173,
                    183
                ],
                "serialize_response": [
                    173
                ],
                "response_field": [
                    318,
                    317,
                    174
                ],
                "response_model_include": [
                    833,
                    483,
                    325,
                    935,
                    680,
                    426,
                    782,
                    176,
                    884,
                    629,
                    986,
                    731
                ],
                "response_model_exclude": [
                    834,
                    484,
                    326,
                    936,
                    681,
                    427,
                    783,
                    177,
                    885,
                    630,
                    987,
                    732
                ],
                "response_model_by_alias": [
                    835,
                    485,
                    327,
                    937,
                    682,
                    428,
                    784,
                    178,
                    886,
                    631,
                    988,
                    733
                ],
                "response_model_exclude_unset": [
                    837,
                    487,
                    328,
                    939,
                    684,
                    430,
                    786,
                    179,
                    888,
                    633,
                    990,
                    735
                ],
                "response": [
                    311,
                    309,
                    182,
                    310,
                    187,
                    189,
                    190
                ],
                "response_class": [
                    993,
                    738,
                    840,
                    330,
                    490,
                    942,
                    687,
                    433,
                    789,
                    182,
                    891,
                    636
                ],
                "status_code": [
                    416,
                    772,
                    295,
                    874,
                    619,
                    976,
                    721,
                    276,
                    277,
                    823,
                    184,
                    473,
                    925,
                    670
                ],
                "response.headers.raw.extend": [
                    187
                ],
                "response.headers.raw": [
                    187
                ],
                "response.headers": [
                    187
                ],
                "sub_response.headers.raw": [
                    187
                ],
                "sub_response.headers": [
                    187
                ],
                "sub_response.status_code": [
                    188,
                    189
                ],
                "response.status_code": [
                    189
                ],
                "app": [
                    192,
                    211
                ],
                "Callable": [
                    385,
                    510,
                    135,
                    919,
                    664,
                    817,
                    197,
                    970,
                    715,
                    464,
                    468,
                    344,
                    218,
                    868,
                    613,
                    240,
                    368,
                    369,
                    499,
                    509,
                    766
                ],
                "WebSocket": [
                    198
                ],
                "websocket": [
                    200,
                    206
                ],
                "_2": [
                    204
                ],
                "_3": [
                    204
                ],
                "websocket.close": [
                    206
                ],
                "WS_1008_POLICY_VIOLATION": [
                    206
                ],
                "WebSocketRequestValidationError": [
                    207
                ],
                "routing.WebSocketRoute": [
                    581,
                    214
                ],
                "routing": [
                    581,
                    359,
                    362,
                    236,
                    214,
                    569
                ],
                "self.path": [
                    263,
                    223
                ],
                "self": [
                    544,
                    570,
                    578,
                    582,
                    586,
                    588,
                    616,
                    636,
                    667,
                    687,
                    718,
                    223,
                    224,
                    225,
                    226,
                    227,
                    738,
                    229,
                    233,
                    769,
                    263,
                    264,
                    265,
                    266,
                    269,
                    270,
                    271,
                    273,
                    274,
                    789,
                    278,
                    279,
                    280,
                    289,
                    291,
                    293,
                    294,
                    295,
                    296,
                    298,
                    300,
                    301,
                    302,
                    305,
                    306,
                    307,
                    820,
                    309,
                    316,
                    320,
                    322,
                    323,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    330,
                    840,
                    333,
                    334,
                    335,
                    337,
                    339,
                    340,
                    341,
                    342,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    871,
                    378,
                    379,
                    380,
                    891,
                    922,
                    411,
                    942,
                    433,
                    435,
                    438,
                    973,
                    469,
                    993,
                    490,
                    505,
                    507,
                    511
                ],
                "path": [
                    770,
                    263,
                    266,
                    533,
                    535,
                    923,
                    668,
                    413,
                    821,
                    974,
                    719,
                    470,
                    223,
                    226,
                    872,
                    233,
                    617,
                    502,
                    511
                ],
                "self.endpoint": [
                    224,
                    226,
                    264,
                    333,
                    302
                ],
                "endpoint": [
                    224,
                    225,
                    264,
                    265,
                    332,
                    503,
                    414
                ],
                "self.name": [
                    225,
                    265,
                    271
                ],
                "name": [
                    225,
                    994,
                    739,
                    265,
                    841,
                    491,
                    943,
                    688,
                    434,
                    534,
                    790,
                    504,
                    537,
                    892,
                    637,
                    511
                ],
                "get_name": [
                    225,
                    265
                ],
                "self.dependant": [
                    226,
                    229,
                    333,
                    335,
                    339,
                    346
                ],
                "get_dependant": [
                    226,
                    333
                ],
                "self.app": [
                    227,
                    342
                ],
                "websocket_session": [
                    227
                ],
                "get_websocket_app": [
                    228
                ],
                "self.path_regex": [
                    233,
                    266
                ],
                "self.path_format": [
                    233,
                    266,
                    333,
                    271,
                    337
                ],
                "self.param_convertors": [
                    233,
                    266
                ],
                "compile_path": [
                    233,
                    266
                ],
                "routing.Route": [
                    569,
                    236
                ],
                "List": [
                    261,
                    389,
                    647,
                    902,
                    521,
                    396,
                    918,
                    663,
                    407,
                    800,
                    816,
                    953,
                    698,
                    446,
                    453,
                    969,
                    714,
                    463,
                    851,
                    596,
                    867,
                    612,
                    362,
                    749,
                    244,
                    252,
                    765
                ],
                "Sequence": [
                    801,
                    390,
                    903,
                    648,
                    522,
                    750,
                    368,
                    369,
                    852,
                    245,
                    597,
                    954,
                    699,
                    447
                ],
                "params.Depends": [
                    801,
                    390,
                    903,
                    648,
                    522,
                    750,
                    852,
                    597,
                    245,
                    954,
                    699,
                    447
                ],
                "Optional": [
                    289,
                    259,
                    261,
                    396,
                    524,
                    406,
                    252
                ],
                "Set": [
                    396,
                    252
                ],
                "methods": [
                    481,
                    424,
                    267,
                    268,
                    269,
                    271
                ],
                "self.methods": [
                    269
                ],
                "method.upper": [
                    269
                ],
                "method": [
                    269
                ],
                "self.unique_id": [
                    339,
                    316,
                    270,
                    278
                ],
                "generate_operation_id_for_path": [
                    270
                ],
                "self.response_model": [
                    280,
                    273,
                    274
                ],
                "response_model": [
                    771,
                    873,
                    618,
                    975,
                    720,
                    273,
                    822,
                    472,
                    924,
                    669,
                    415
                ],
                "STATUS_CODES_WITH_NO_BODY": [
                    314,
                    276
                ],
                "response_name": [
                    280,
                    316,
                    317,
                    278
                ],
                "self.response_field": [
                    291,
                    293,
                    279
                ],
                "create_response_field": [
                    317,
                    279
                ],
                "self.secure_cloned_response_field": [
                    289,
                    294,
                    350
                ],
                "create_cloned_field": [
                    291
                ],
                "self.status_code": [
                    348,
                    295
                ],
                "self.tags": [
                    296
                ],
                "tags": [
                    417,
                    549,
                    773,
                    296,
                    875,
                    620,
                    977,
                    722,
                    824,
                    474,
                    926,
                    671
                ],
                "dependencies": [
                    672,
                    418,
                    550,
                    774,
                    297,
                    298,
                    876,
                    621,
                    978,
                    723,
                    825,
                    475,
                    927
                ],
                "self.dependencies": [
                    298,
                    300,
                    334
                ],
                "self.summary": [
                    301
                ],
                "summary": [
                    928,
                    673,
                    419,
                    775,
                    301,
                    622,
                    877,
                    979,
                    724,
                    826,
                    476
                ],
                "self.description": [
                    305,
                    302
                ],
                "description": [
                    929,
                    674,
                    420,
                    776,
                    302,
                    623,
                    878,
                    980,
                    725,
                    827,
                    477
                ],
                "inspect.cleandoc": [
                    302
                ],
                "inspect": [
                    302
                ],
                "self.endpoint.__doc__": [
                    302
                ],
                "self.description.split": [
                    305
                ],
                "self.response_description": [
                    306
                ],
                "response_description": [
                    930,
                    675,
                    421,
                    777,
                    879,
                    624,
                    306,
                    981,
                    726,
                    828,
                    478
                ],
                "self.responses": [
                    307,
                    309
                ],
                "responses": [
                    931,
                    676,
                    422,
                    778,
                    543,
                    880,
                    625,
                    307,
                    982,
                    727,
                    539,
                    540,
                    829,
                    479
                ],
                "response_fields": [
                    320,
                    308,
                    318,
                    319
                ],
                "additional_status_code": [
                    309,
                    314,
                    315,
                    316,
                    318
                ],
                "self.responses.items": [
                    309
                ],
                "model": [
                    312,
                    317,
                    311
                ],
                "response.get": [
                    311
                ],
                "self.response_fields": [
                    320,
                    322
                ],
                "self.deprecated": [
                    323
                ],
                "deprecated": [
                    480,
                    323,
                    932,
                    677,
                    423,
                    779,
                    881,
                    626,
                    983,
                    728,
                    830
                ],
                "self.operation_id": [
                    324
                ],
                "operation_id": [
                    832,
                    482,
                    324,
                    934,
                    679,
                    425,
                    781,
                    883,
                    628,
                    985,
                    730
                ],
                "self.response_model_include": [
                    325,
                    351
                ],
                "self.response_model_exclude": [
                    352,
                    326
                ],
                "self.response_model_by_alias": [
                    353,
                    327
                ],
                "self.response_model_exclude_unset": [
                    328,
                    354
                ],
                "self.include_in_schema": [
                    329
                ],
                "include_in_schema": [
                    992,
                    737,
                    839,
                    329,
                    489,
                    941,
                    686,
                    432,
                    788,
                    890,
                    635
                ],
                "self.response_class": [
                    330,
                    349
                ],
                "callable": [
                    332
                ],
                "depends": [
                    337,
                    334
                ],
                "self.dependant.dependencies.insert": [
                    335
                ],
                "self.dependant.dependencies": [
                    335
                ],
                "get_parameterless_sub_dependant": [
                    337
                ],
                "self.body_field": [
                    347,
                    339
                ],
                "get_body_field": [
                    339
                ],
                "self.dependency_overrides_provider": [
                    355,
                    435,
                    340,
                    505,
                    378
                ],
                "self.callbacks": [
                    341
                ],
                "callbacks": [
                    995,
                    740,
                    842,
                    492,
                    944,
                    689,
                    436,
                    341,
                    791,
                    893,
                    638
                ],
                "request_response": [
                    342
                ],
                "self.get_route_handler": [
                    342
                ],
                "get_request_handler": [
                    345
                ],
                "routing.Router": [
                    359
                ],
                "routing.BaseRoute": [
                    362
                ],
                "ASGIApp": [
                    364
                ],
                "APIRoute": [
                    867,
                    612,
                    663,
                    969,
                    714,
                    366,
                    463,
                    816,
                    406,
                    407,
                    918,
                    765,
                    542
                ],
                "__init__": [
                    371
                ],
                "super": [
                    371
                ],
                "routes": [
                    372
                ],
                "redirect_slashes": [
                    373
                ],
                "default": [
                    374
                ],
                "on_startup": [
                    375
                ],
                "on_shutdown": [
                    376
                ],
                "self.route_class": [
                    379,
                    411
                ],
                "route_class": [
                    412,
                    379,
                    411
                ],
                "self.default_response_class": [
                    993,
                    738,
                    840,
                    490,
                    942,
                    687,
                    433,
                    789,
                    380,
                    891,
                    636
                ],
                "default_response_class": [
                    380,
                    564
                ],
                "response_model_skip_defaults": [
                    786,
                    920,
                    665,
                    409,
                    939,
                    684,
                    430,
                    818,
                    837,
                    971,
                    716,
                    465,
                    990,
                    735,
                    869,
                    614,
                    487,
                    888,
                    633,
                    767
                ],
                "warning_response_model_skip_defaults_deprecated": [
                    768,
                    870,
                    615,
                    972,
                    717,
                    466,
                    819,
                    666,
                    921,
                    410
                ],
                "route_class_override": [
                    411
                ],
                "route": [
                    412,
                    541,
                    542,
                    543,
                    545,
                    546,
                    547,
                    548,
                    549,
                    551,
                    552,
                    553,
                    554,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    438,
                    566,
                    567,
                    569,
                    571,
                    572,
                    573,
                    574,
                    575,
                    577,
                    579,
                    581,
                    583,
                    501,
                    507
                ],
                "self.routes.append": [
                    507,
                    438
                ],
                "self.routes": [
                    507,
                    438
                ],
                "self.add_api_route": [
                    544,
                    469
                ],
                "func": [
                    512,
                    511,
                    494,
                    471
                ],
                "decorator": [
                    496,
                    514
                ],
                "APIWebSocketRoute": [
                    577,
                    501
                ],
                "self.add_api_websocket_route": [
                    578,
                    511
                ],
                "prefix": [
                    545,
                    579,
                    583,
                    526,
                    527,
                    528,
                    571
                ],
                "prefix.startswith": [
                    527
                ],
                "prefix.endswith": [
                    528
                ],
                "r": [
                    532,
                    533,
                    534
                ],
                "router.routes": [
                    532,
                    541
                ],
                "router": [
                    585,
                    587,
                    532,
                    541
                ],
                "getattr": [
                    533,
                    534
                ],
                "combined_responses": [
                    555,
                    543
                ],
                "route.responses": [
                    543
                ],
                "route.path": [
                    545,
                    579,
                    571,
                    583
                ],
                "route.endpoint": [
                    546,
                    579,
                    572,
                    583
                ],
                "route.response_model": [
                    547
                ],
                "route.status_code": [
                    548
                ],
                "route.tags": [
                    549
                ],
                "route.dependencies": [
                    551
                ],
                "route.summary": [
                    552
                ],
                "route.description": [
                    553
                ],
                "route.response_description": [
                    554
                ],
                "route.deprecated": [
                    556
                ],
                "route.methods": [
                    573,
                    557
                ],
                "route.operation_id": [
                    558
                ],
                "route.response_model_include": [
                    559
                ],
                "route.response_model_exclude": [
                    560
                ],
                "route.response_model_by_alias": [
                    561
                ],
                "route.response_model_exclude_unset": [
                    562
                ],
                "route.include_in_schema": [
                    563,
                    574
                ],
                "route.response_class": [
                    564
                ],
                "route.name": [
                    579,
                    565,
                    583,
                    575
                ],
                "type": [
                    566
                ],
                "route.callbacks": [
                    567
                ],
                "self.add_route": [
                    570
                ],
                "self.add_websocket_route": [
                    582
                ],
                "handler": [
                    585,
                    586,
                    587,
                    588
                ],
                "router.on_startup": [
                    585
                ],
                "self.add_event_handler": [
                    586,
                    588
                ],
                "router.on_shutdown": [
                    587
                ],
                "self.api_route": [
                    769,
                    871,
                    616,
                    973,
                    718,
                    820,
                    922,
                    667
                ]
            },
            "filtered_variables_in_file": {
                "Any": [
                    387,
                    260,
                    645,
                    134,
                    900,
                    394,
                    523,
                    652,
                    907,
                    798,
                    805,
                    52,
                    53,
                    951,
                    696,
                    444,
                    958,
                    703,
                    451,
                    196,
                    76,
                    849,
                    82,
                    594,
                    856,
                    601,
                    221,
                    747,
                    365,
                    112,
                    113,
                    242,
                    754,
                    249
                ],
                "res": [
                    65,
                    68,
                    70,
                    54,
                    56,
                    58,
                    61,
                    63
                ],
                "BaseModel": [
                    54
                ],
                "PYDANTIC_1": [
                    55
                ],
                "res.dict": [
                    56,
                    58
                ],
                "by_alias": [
                    56,
                    59,
                    104,
                    86
                ],
                "exclude_unset": [
                    67,
                    105,
                    86,
                    56,
                    59,
                    63
                ],
                "_prepare_response_content": [
                    67,
                    85,
                    63
                ],
                "item": [
                    63
                ],
                "k": [
                    67,
                    68
                ],
                "v": [
                    67,
                    68
                ],
                "res.items": [
                    68
                ],
                "ModelField": [
                    320,
                    129,
                    290,
                    75,
                    126
                ],
                "Union": [
                    130,
                    131,
                    394,
                    523,
                    396,
                    652,
                    398,
                    399,
                    655,
                    656,
                    907,
                    910,
                    911,
                    805,
                    808,
                    809,
                    958,
                    703,
                    320,
                    961,
                    706,
                    451,
                    707,
                    962,
                    455,
                    456,
                    77,
                    78,
                    856,
                    601,
                    859,
                    604,
                    605,
                    860,
                    754,
                    757,
                    758,
                    249,
                    252,
                    254,
                    255
                ],
                "SetIntStr": [
                    130,
                    131,
                    398,
                    399,
                    655,
                    656,
                    910,
                    911,
                    808,
                    809,
                    961,
                    706,
                    707,
                    962,
                    455,
                    456,
                    77,
                    78,
                    859,
                    604,
                    605,
                    860,
                    757,
                    758,
                    254,
                    255
                ],
                "DictIntStrAny": [
                    130,
                    131,
                    398,
                    399,
                    655,
                    656,
                    910,
                    911,
                    808,
                    809,
                    961,
                    706,
                    707,
                    962,
                    455,
                    456,
                    77,
                    78,
                    859,
                    604,
                    605,
                    860,
                    757,
                    758,
                    254,
                    255
                ],
                "field": [
                    99,
                    89,
                    83,
                    92
                ],
                "errors": [
                    97,
                    98,
                    99,
                    161,
                    162,
                    163,
                    204,
                    205,
                    207,
                    84,
                    95
                ],
                "response_content": [
                    108,
                    85,
                    86,
                    89,
                    92
                ],
                "is_coroutine": [
                    166,
                    137,
                    180,
                    118,
                    88
                ],
                "value": [
                    89,
                    91,
                    101
                ],
                "errors_": [
                    96,
                    97,
                    89,
                    91,
                    94,
                    95
                ],
                "field.validate": [
                    89,
                    92
                ],
                "run_in_threadpool": [
                    121,
                    91
                ],
                "ErrorWrapper": [
                    94
                ],
                "errors.append": [
                    95
                ],
                "errors.extend": [
                    97
                ],
                "ValidationError": [
                    99
                ],
                "field.type_": [
                    99
                ],
                "jsonable_encoder": [
                    108,
                    100
                ],
                "include": [
                    102
                ],
                "exclude": [
                    103
                ],
                "Dependant": [
                    112,
                    196,
                    125
                ],
                "Dict": [
                    320,
                    451,
                    805,
                    394,
                    523,
                    652,
                    907,
                    112,
                    601,
                    754,
                    856,
                    249,
                    958,
                    703
                ],
                "dependant.call": [
                    136,
                    137,
                    208,
                    209,
                    116,
                    119,
                    121
                ],
                "dependant": [
                    166,
                    136,
                    137,
                    201,
                    208,
                    209,
                    116,
                    119,
                    121,
                    157
                ],
                "values": [
                    161,
                    166,
                    204,
                    209,
                    119,
                    121
                ],
                "Type": [
                    128,
                    259,
                    387,
                    645,
                    900,
                    524,
                    404,
                    661,
                    406,
                    916,
                    798,
                    814,
                    951,
                    696,
                    444,
                    967,
                    712,
                    461,
                    849,
                    594,
                    865,
                    610,
                    747,
                    366,
                    367,
                    242,
                    763
                ],
                "Response": [
                    128,
                    865,
                    610,
                    259,
                    967,
                    712,
                    169,
                    140,
                    461,
                    524,
                    367,
                    814,
                    404,
                    661,
                    916,
                    763
                ],
                "JSONResponse": [
                    128,
                    349
                ],
                "asyncio.iscoroutinefunction": [
                    137
                ],
                "asyncio": [
                    137
                ],
                "is_body_form": [
                    144,
                    138
                ],
                "body_field": [
                    138,
                    143
                ],
                "get_field_info": [
                    138
                ],
                "params.Form": [
                    138
                ],
                "params": [
                    801,
                    390,
                    903,
                    648,
                    138,
                    522,
                    750,
                    852,
                    245,
                    597,
                    954,
                    699,
                    447
                ],
                "Request": [
                    140
                ],
                "body": [
                    163,
                    142,
                    145,
                    149,
                    158
                ],
                "request.form": [
                    145
                ],
                "request": [
                    145,
                    147,
                    156,
                    149
                ],
                "body_bytes": [
                    147,
                    148
                ],
                "request.body": [
                    147
                ],
                "request.json": [
                    149
                ],
                "logger.error": [
                    151
                ],
                "logger": [
                    151
                ],
                "e": [
                    154,
                    151
                ],
                "HTTPException": [
                    152
                ],
                "solved_result": [
                    161,
                    155,
                    204,
                    199
                ],
                "solve_dependencies": [
                    155,
                    199
                ],
                "dependency_overrides_provider": [
                    230,
                    202,
                    340,
                    378,
                    159
                ],
                "background_tasks": [
                    185,
                    161,
                    171
                ],
                "sub_response": [
                    161,
                    187,
                    188,
                    189
                ],
                "_": [
                    161,
                    204
                ],
                "RequestValidationError": [
                    163
                ],
                "raw_response": [
                    165,
                    169,
                    170,
                    171,
                    172,
                    175
                ],
                "run_endpoint_function": [
                    165
                ],
                "raw_response.background": [
                    170,
                    171
                ],
                "response_data": [
                    173,
                    183
                ],
                "serialize_response": [
                    173
                ],
                "response_field": [
                    318,
                    317,
                    174
                ],
                "response_model_include": [
                    833,
                    483,
                    325,
                    935,
                    680,
                    426,
                    782,
                    176,
                    884,
                    629,
                    986,
                    731
                ],
                "response_model_exclude": [
                    834,
                    484,
                    326,
                    936,
                    681,
                    427,
                    783,
                    177,
                    885,
                    630,
                    987,
                    732
                ],
                "response_model_by_alias": [
                    835,
                    485,
                    327,
                    937,
                    682,
                    428,
                    784,
                    178,
                    886,
                    631,
                    988,
                    733
                ],
                "response_model_exclude_unset": [
                    837,
                    487,
                    328,
                    939,
                    684,
                    430,
                    786,
                    179,
                    888,
                    633,
                    990,
                    735
                ],
                "response": [
                    311,
                    309,
                    182,
                    310,
                    187,
                    189,
                    190
                ],
                "response_class": [
                    993,
                    738,
                    840,
                    330,
                    490,
                    942,
                    687,
                    433,
                    789,
                    182,
                    891,
                    636
                ],
                "status_code": [
                    416,
                    772,
                    295,
                    874,
                    619,
                    976,
                    721,
                    276,
                    277,
                    823,
                    184,
                    473,
                    925,
                    670
                ],
                "response.headers.raw.extend": [
                    187
                ],
                "response.headers.raw": [
                    187
                ],
                "response.headers": [
                    187
                ],
                "sub_response.headers.raw": [
                    187
                ],
                "sub_response.headers": [
                    187
                ],
                "sub_response.status_code": [
                    188,
                    189
                ],
                "response.status_code": [
                    189
                ],
                "app": [
                    192,
                    211
                ],
                "Callable": [
                    385,
                    510,
                    135,
                    919,
                    664,
                    817,
                    197,
                    970,
                    715,
                    464,
                    468,
                    344,
                    218,
                    868,
                    613,
                    240,
                    368,
                    369,
                    499,
                    509,
                    766
                ],
                "WebSocket": [
                    198
                ],
                "websocket": [
                    200,
                    206
                ],
                "_2": [
                    204
                ],
                "_3": [
                    204
                ],
                "websocket.close": [
                    206
                ],
                "WS_1008_POLICY_VIOLATION": [
                    206
                ],
                "WebSocketRequestValidationError": [
                    207
                ],
                "routing.WebSocketRoute": [
                    581,
                    214
                ],
                "routing": [
                    581,
                    359,
                    362,
                    236,
                    214,
                    569
                ],
                "self.path": [
                    263,
                    223
                ],
                "self": [
                    544,
                    570,
                    578,
                    582,
                    586,
                    588,
                    616,
                    636,
                    667,
                    687,
                    718,
                    223,
                    224,
                    225,
                    226,
                    227,
                    738,
                    229,
                    233,
                    769,
                    263,
                    264,
                    265,
                    266,
                    269,
                    270,
                    271,
                    273,
                    274,
                    789,
                    278,
                    279,
                    280,
                    289,
                    291,
                    293,
                    294,
                    295,
                    296,
                    298,
                    300,
                    301,
                    302,
                    305,
                    306,
                    307,
                    820,
                    309,
                    316,
                    320,
                    322,
                    323,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    330,
                    840,
                    333,
                    334,
                    335,
                    337,
                    339,
                    340,
                    341,
                    342,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    871,
                    378,
                    379,
                    380,
                    891,
                    922,
                    411,
                    942,
                    433,
                    435,
                    438,
                    973,
                    469,
                    993,
                    490,
                    505,
                    507,
                    511
                ],
                "path": [
                    770,
                    263,
                    266,
                    533,
                    535,
                    923,
                    668,
                    413,
                    821,
                    974,
                    719,
                    470,
                    223,
                    226,
                    872,
                    233,
                    617,
                    502,
                    511
                ],
                "self.endpoint": [
                    224,
                    226,
                    264,
                    333,
                    302
                ],
                "endpoint": [
                    224,
                    225,
                    264,
                    265,
                    332,
                    503,
                    414
                ],
                "self.name": [
                    225,
                    265,
                    271
                ],
                "name": [
                    225,
                    994,
                    739,
                    265,
                    841,
                    491,
                    943,
                    688,
                    434,
                    534,
                    790,
                    504,
                    537,
                    892,
                    637,
                    511
                ],
                "get_name": [
                    225,
                    265
                ],
                "self.dependant": [
                    226,
                    229,
                    333,
                    335,
                    339,
                    346
                ],
                "get_dependant": [
                    226,
                    333
                ],
                "self.app": [
                    227,
                    342
                ],
                "websocket_session": [
                    227
                ],
                "get_websocket_app": [
                    228
                ],
                "self.path_regex": [
                    233,
                    266
                ],
                "self.path_format": [
                    233,
                    266,
                    333,
                    271,
                    337
                ],
                "self.param_convertors": [
                    233,
                    266
                ],
                "compile_path": [
                    233,
                    266
                ],
                "routing.Route": [
                    569,
                    236
                ],
                "List": [
                    261,
                    389,
                    647,
                    902,
                    521,
                    396,
                    918,
                    663,
                    407,
                    800,
                    816,
                    953,
                    698,
                    446,
                    453,
                    969,
                    714,
                    463,
                    851,
                    596,
                    867,
                    612,
                    362,
                    749,
                    244,
                    252,
                    765
                ],
                "Sequence": [
                    801,
                    390,
                    903,
                    648,
                    522,
                    750,
                    368,
                    369,
                    852,
                    245,
                    597,
                    954,
                    699,
                    447
                ],
                "params.Depends": [
                    801,
                    390,
                    903,
                    648,
                    522,
                    750,
                    852,
                    597,
                    245,
                    954,
                    699,
                    447
                ],
                "Optional": [
                    289,
                    259,
                    261,
                    396,
                    524,
                    406,
                    252
                ],
                "Set": [
                    396,
                    252
                ],
                "methods": [
                    481,
                    424,
                    267,
                    268,
                    269,
                    271
                ],
                "self.methods": [
                    269
                ],
                "method.upper": [
                    269
                ],
                "method": [
                    269
                ],
                "self.unique_id": [
                    339,
                    316,
                    270,
                    278
                ],
                "generate_operation_id_for_path": [
                    270
                ],
                "self.response_model": [
                    280,
                    273,
                    274
                ],
                "response_model": [
                    771,
                    873,
                    618,
                    975,
                    720,
                    273,
                    822,
                    472,
                    924,
                    669,
                    415
                ],
                "STATUS_CODES_WITH_NO_BODY": [
                    314,
                    276
                ],
                "response_name": [
                    280,
                    316,
                    317,
                    278
                ],
                "self.response_field": [
                    291,
                    293,
                    279
                ],
                "create_response_field": [
                    317,
                    279
                ],
                "self.secure_cloned_response_field": [
                    289,
                    294,
                    350
                ],
                "create_cloned_field": [
                    291
                ],
                "self.status_code": [
                    348,
                    295
                ],
                "self.tags": [
                    296
                ],
                "tags": [
                    417,
                    549,
                    773,
                    296,
                    875,
                    620,
                    977,
                    722,
                    824,
                    474,
                    926,
                    671
                ],
                "dependencies": [
                    672,
                    418,
                    550,
                    774,
                    297,
                    298,
                    876,
                    621,
                    978,
                    723,
                    825,
                    475,
                    927
                ],
                "self.dependencies": [
                    298,
                    300,
                    334
                ],
                "self.summary": [
                    301
                ],
                "summary": [
                    928,
                    673,
                    419,
                    775,
                    301,
                    622,
                    877,
                    979,
                    724,
                    826,
                    476
                ],
                "self.description": [
                    305,
                    302
                ],
                "description": [
                    929,
                    674,
                    420,
                    776,
                    302,
                    623,
                    878,
                    980,
                    725,
                    827,
                    477
                ],
                "inspect.cleandoc": [
                    302
                ],
                "inspect": [
                    302
                ],
                "self.endpoint.__doc__": [
                    302
                ],
                "self.description.split": [
                    305
                ],
                "self.response_description": [
                    306
                ],
                "response_description": [
                    930,
                    675,
                    421,
                    777,
                    879,
                    624,
                    306,
                    981,
                    726,
                    828,
                    478
                ],
                "self.responses": [
                    307,
                    309
                ],
                "responses": [
                    931,
                    676,
                    422,
                    778,
                    543,
                    880,
                    625,
                    307,
                    982,
                    727,
                    539,
                    540,
                    829,
                    479
                ],
                "response_fields": [
                    320,
                    308,
                    318,
                    319
                ],
                "additional_status_code": [
                    309,
                    314,
                    315,
                    316,
                    318
                ],
                "self.responses.items": [
                    309
                ],
                "model": [
                    312,
                    317,
                    311
                ],
                "response.get": [
                    311
                ],
                "self.response_fields": [
                    320,
                    322
                ],
                "self.deprecated": [
                    323
                ],
                "deprecated": [
                    480,
                    323,
                    932,
                    677,
                    423,
                    779,
                    881,
                    626,
                    983,
                    728,
                    830
                ],
                "self.operation_id": [
                    324
                ],
                "operation_id": [
                    832,
                    482,
                    324,
                    934,
                    679,
                    425,
                    781,
                    883,
                    628,
                    985,
                    730
                ],
                "self.response_model_include": [
                    325,
                    351
                ],
                "self.response_model_exclude": [
                    352,
                    326
                ],
                "self.response_model_by_alias": [
                    353,
                    327
                ],
                "self.response_model_exclude_unset": [
                    328,
                    354
                ],
                "self.include_in_schema": [
                    329
                ],
                "include_in_schema": [
                    992,
                    737,
                    839,
                    329,
                    489,
                    941,
                    686,
                    432,
                    788,
                    890,
                    635
                ],
                "self.response_class": [
                    330,
                    349
                ],
                "depends": [
                    337,
                    334
                ],
                "self.dependant.dependencies.insert": [
                    335
                ],
                "self.dependant.dependencies": [
                    335
                ],
                "get_parameterless_sub_dependant": [
                    337
                ],
                "self.body_field": [
                    347,
                    339
                ],
                "get_body_field": [
                    339
                ],
                "self.dependency_overrides_provider": [
                    355,
                    435,
                    340,
                    505,
                    378
                ],
                "self.callbacks": [
                    341
                ],
                "callbacks": [
                    995,
                    740,
                    842,
                    492,
                    944,
                    689,
                    436,
                    341,
                    791,
                    893,
                    638
                ],
                "request_response": [
                    342
                ],
                "self.get_route_handler": [
                    342
                ],
                "get_request_handler": [
                    345
                ],
                "routing.Router": [
                    359
                ],
                "routing.BaseRoute": [
                    362
                ],
                "ASGIApp": [
                    364
                ],
                "APIRoute": [
                    867,
                    612,
                    663,
                    969,
                    714,
                    366,
                    463,
                    816,
                    406,
                    407,
                    918,
                    765,
                    542
                ],
                "__init__": [
                    371
                ],
                "routes": [
                    372
                ],
                "redirect_slashes": [
                    373
                ],
                "default": [
                    374
                ],
                "on_startup": [
                    375
                ],
                "on_shutdown": [
                    376
                ],
                "self.route_class": [
                    379,
                    411
                ],
                "route_class": [
                    412,
                    379,
                    411
                ],
                "self.default_response_class": [
                    993,
                    738,
                    840,
                    490,
                    942,
                    687,
                    433,
                    789,
                    380,
                    891,
                    636
                ],
                "default_response_class": [
                    380,
                    564
                ],
                "response_model_skip_defaults": [
                    786,
                    920,
                    665,
                    409,
                    939,
                    684,
                    430,
                    818,
                    837,
                    971,
                    716,
                    465,
                    990,
                    735,
                    869,
                    614,
                    487,
                    888,
                    633,
                    767
                ],
                "warning_response_model_skip_defaults_deprecated": [
                    768,
                    870,
                    615,
                    972,
                    717,
                    466,
                    819,
                    666,
                    921,
                    410
                ],
                "route_class_override": [
                    411
                ],
                "route": [
                    412,
                    541,
                    542,
                    543,
                    545,
                    546,
                    547,
                    548,
                    549,
                    551,
                    552,
                    553,
                    554,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    438,
                    566,
                    567,
                    569,
                    571,
                    572,
                    573,
                    574,
                    575,
                    577,
                    579,
                    581,
                    583,
                    501,
                    507
                ],
                "self.routes.append": [
                    507,
                    438
                ],
                "self.routes": [
                    507,
                    438
                ],
                "self.add_api_route": [
                    544,
                    469
                ],
                "func": [
                    512,
                    511,
                    494,
                    471
                ],
                "decorator": [
                    496,
                    514
                ],
                "APIWebSocketRoute": [
                    577,
                    501
                ],
                "self.add_api_websocket_route": [
                    578,
                    511
                ],
                "prefix": [
                    545,
                    579,
                    583,
                    526,
                    527,
                    528,
                    571
                ],
                "prefix.startswith": [
                    527
                ],
                "prefix.endswith": [
                    528
                ],
                "r": [
                    532,
                    533,
                    534
                ],
                "router.routes": [
                    532,
                    541
                ],
                "router": [
                    585,
                    587,
                    532,
                    541
                ],
                "combined_responses": [
                    555,
                    543
                ],
                "route.responses": [
                    543
                ],
                "route.path": [
                    545,
                    579,
                    571,
                    583
                ],
                "route.endpoint": [
                    546,
                    579,
                    572,
                    583
                ],
                "route.response_model": [
                    547
                ],
                "route.status_code": [
                    548
                ],
                "route.tags": [
                    549
                ],
                "route.dependencies": [
                    551
                ],
                "route.summary": [
                    552
                ],
                "route.description": [
                    553
                ],
                "route.response_description": [
                    554
                ],
                "route.deprecated": [
                    556
                ],
                "route.methods": [
                    573,
                    557
                ],
                "route.operation_id": [
                    558
                ],
                "route.response_model_include": [
                    559
                ],
                "route.response_model_exclude": [
                    560
                ],
                "route.response_model_by_alias": [
                    561
                ],
                "route.response_model_exclude_unset": [
                    562
                ],
                "route.include_in_schema": [
                    563,
                    574
                ],
                "route.response_class": [
                    564
                ],
                "route.name": [
                    579,
                    565,
                    583,
                    575
                ],
                "route.callbacks": [
                    567
                ],
                "self.add_route": [
                    570
                ],
                "self.add_websocket_route": [
                    582
                ],
                "handler": [
                    585,
                    586,
                    587,
                    588
                ],
                "router.on_startup": [
                    585
                ],
                "self.add_event_handler": [
                    586,
                    588
                ],
                "router.on_shutdown": [
                    587
                ],
                "self.api_route": [
                    769,
                    871,
                    616,
                    973,
                    718,
                    820,
                    922,
                    667
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_1/tests/test_jsonable_encoder.py",
                "test_function": "test_encode_model_with_default",
                "test_function_code": "def test_encode_model_with_default():\n    model = ModelWithDefault(foo=\"foo\", bar=\"bar\")\n    assert jsonable_encoder(model) == {\"foo\": \"foo\", \"bar\": \"bar\", \"bla\": \"bla\"}\n    assert jsonable_encoder(model, exclude_unset=True) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n    assert jsonable_encoder(model, exclude_defaults=True) == {\"foo\": \"foo\"}\n    assert jsonable_encoder(model, exclude_unset=True, exclude_defaults=True) == {\n        \"foo\": \"foo\"\n    }",
                "test_error": "TypeError: jsonable_encoder() got an unexpected keyword argument 'exclude_defaults'",
                "full_test_error": "def test_encode_model_with_default():\n        model = ModelWithDefault(foo=\"foo\", bar=\"bar\")\n        assert jsonable_encoder(model) == {\"foo\": \"foo\", \"bar\": \"bar\", \"bla\": \"bla\"}\n        assert jsonable_encoder(model, exclude_unset=True) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n>       assert jsonable_encoder(model, exclude_defaults=True) == {\"foo\": \"foo\"}\nE       TypeError: jsonable_encoder() got an unexpected keyword argument 'exclude_defaults'\n\ntests/test_jsonable_encoder.py:134: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}