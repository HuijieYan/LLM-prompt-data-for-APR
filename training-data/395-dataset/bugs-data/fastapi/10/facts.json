{
    "1.1.1": "def serialize_response(\n    *,\n    field: Field = None,\n    response: Response,\n    include: Set[str] = None,\n    exclude: Set[str] = set(),\n    by_alias: bool = True,\n    skip_defaults: bool = False,\n) -> Any:\n    if field:\n        errors = []\n        value, errors_ = field.validate(response, {}, loc=(\"response\",))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            skip_defaults=skip_defaults,\n        )\n    else:\n        return jsonable_encoder(response)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/fastapi_10/fastapi/routing.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_return_defaults():\n    response = client.get(\"/\")\n    assert response.json() == {\"sub\": {}}"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/fastapi_10/tests/test_skip_defaults.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert {'sub': {'a': 'foo'}, 'x': None} == {'sub': {}}\nE         Differing items:\nE         {'sub': {'a': 'foo'}} != {'sub': {}}\nE         Left contains 1 more item:\nE         {'x': None}\nE         Full diff:\nE         - {'sub': {}}\nE         + {'sub': {'a': 'foo'}, 'x': None}"
        ]
    ],
    "2.1.2": [
        [
            "def test_return_defaults():\n        response = client.get(\"/\")\n>       assert response.json() == {\"sub\": {}}",
            "\ntests/test_skip_defaults.py:29: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "field": "<Field(Response_get__get type=Model default=None)>",
                "field.validate": "<bound method Field.validate of <Field(Response_get__get type=Model default=None)>>",
                "response": "<Model x=None sub=<SubModel a='foo'>>",
                "exclude": "set()",
                "by_alias": "True",
                "skip_defaults": "True"
            },
            {
                "errors": "[]",
                "value": "<Model x=None sub=<SubModel a='foo'>>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "field": "Field",
                "field.validate": "method",
                "response": "Model",
                "exclude": "set",
                "by_alias": "bool",
                "skip_defaults": "bool"
            },
            {
                "errors": "list",
                "value": "Model"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "field": "<Field(Response_get__get type=Model default=None)>",
                "field.validate": "<bound method Field.validate of <Field(Response_get__get type=Model default=None)>>",
                "response": "<Model x=None sub=<SubModel a='foo'>>",
                "skip_defaults": "True",
                "response.dict": "<bound method BaseModel.dict of <Model x=None sub=<SubModel a='foo'>>>",
                "exclude": "set()",
                "by_alias": "True"
            },
            {
                "errors": "[]",
                "value": "{'sub': {}}"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "field": "Field",
                "field.validate": "method",
                "response": "Model",
                "skip_defaults": "bool",
                "response.dict": "method",
                "exclude": "set",
                "by_alias": "bool"
            },
            {
                "errors": "list",
                "value": "dict"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}