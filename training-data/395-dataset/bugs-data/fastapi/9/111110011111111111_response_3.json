{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 549,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    from typing import Optional, Type\n    from fastapi import params, Form\n    from pydantic import BaseConfig, Field\n    from fastapi.dependencies.models import Dependant\n    from fastapi.routing import params as params_module\n    from pydantic.main import MetaModel\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    embed = getattr(first_param.schema, \"embed\", None)\n    if len(flat_dependant.body_params) == 1 and not embed:\n        return get_schema_compatible_field(field=first_param)\n    model_name = \"Body_\" + name\n    BodyModel = create_model(model_name)\n    for f in flat_dependant.body_params:\n        BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n    required = any(True for f in flat_dependant.body_params if f.required)\n    \n    media_types = set(f.schema.media_type for f in flat_dependant.body_params)\n    BodySchema: Type[params.Body] = params.Body\n    if len(media_types) == 1:\n        media_type = media_types.pop()\n        if media_type == 'application/x-www-form-urlencoded':\n            BodySchema = params.Form\n        elif media_type == 'multipart/form-data':\n            BodySchema = Form\n        else:\n            BodySchema = params.Body(media_type)\n    \n    field = Field(\n        name=\"body\",\n        type_=BodyModel,\n        default=None,\n        required=required,\n        model_config=BaseConfig,\n        class_validators={},\n        alias=\"body\",\n        schema=BodySchema,\n    )\n    return field"
        }
    ]
}