{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 549,
            "file_name": "dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    from typing import Optional, Type\n    from pydantic import create_model, BaseConfig\n    from fastapi.params import Dependant, Field\n    from fastapi.params import params\n    def get_flat_dependant(dependant):\n        for field in dependant.body_params:\n            yield field\n        for f in dependant.dependencies:\n            for sub_dependant in get_flat_dependant(f.dependant):\n                yield sub_dependant\n    \n    flat_dependant = list(get_flat_dependant(dependant))\n    if not flat_dependant:\n        return None\n    embed = getattr(flat_dependant[0].schema, \"embed\", None)\n    if len(flat_dependant) == 1 and not embed:\n        return get_schema_compatible_field(field=flat_dependant[0])\n    model_name = f\"Body_{name}\"\n    BodyModel = create_model(model_name,\n                             __base__=BaseModel)\n    for f in flat_dependant:\n        BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n    required = any(True for f in flat_dependant if f.required)\n    if any(isinstance(f.schema, params.File) for f in flat_dependant):\n        BodySchema: Type[params.Body] = params.File\n    elif any(isinstance(f.schema, params.Form) for f in flat_dependant):\n        BodySchema = params.Form\n    else:\n        BodySchema = params.Body\n    \n    field = Field(\n        name=\"body\",\n        type_=BodyModel,\n        default=None,\n        required=required,\n        model_config=BaseConfig,\n        class_validators={},\n        alias=\"body\",\n        schema=BodySchema(None),\n    )\n    return field"
        }
    ]
}