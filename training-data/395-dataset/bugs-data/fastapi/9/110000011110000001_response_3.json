{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 549,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    from pydantic import BaseModel\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    model_name = \"Body_\" + name\n    BodyModel = create_model(model_name, **{param.name: (param.type_, ...) for param in flat_dependant.body_params})\n    required = any(param.required for param in flat_dependant.body_params)\n    schema_content = {}\n    if any(isinstance(param.schema, params.File) for param in flat_dependant.body_params):\n        schema_content['application/octet-stream'] = {'schema': {'$ref': f'#/components/schemas/{model_name}'}}\n    elif any(isinstance(param.schema, params.Form) for param in flat_dependant.body_params):\n        schema_content['application/x-www-form-urlencoded'] = {'schema': {'$ref': f'#/components/schemas/{model_name}'}}\n    else:\n        schema_content['application/json'] = {'schema': {'$ref': f'#/components/schemas/{model_name}'}}\n    \n    field = {\n        'content': schema_content,\n        'required': required\n    }\n    return field"
        }
    ]
}