{
    "fastapi": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 51,
            "file_name": "fastapi/routing.py",
            "replace_code": "def serialize_response(\n    *,\n    field: ModelField = None,\n    response_content: Any,\n    instance: pydantic.BaseModel = None,\n    include: pydantic.SetIntStr = None,\n    exclude: pydantic.SetIntStr = None,\n    by_alias: bool = True,\n    exclude_unset: bool = False\n) -> Any:\n    from typing import Any\n    import pydantic\n    from starlette.datastructures import URL\n    from starlette.responses import JSONResponse\n    from uuid import UUID\n    if field:\n        value, errors = field.validate(response_content, {}, loc=(\"response\",))\n        if errors:\n            raise pydantic.ValidationError(errors, field.type_)\n        return pydantic.json.pydantic_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset\n        )\n    else:\n        return pydantic.json.pydantic_encoder(response_content)"
        }
    ]
}