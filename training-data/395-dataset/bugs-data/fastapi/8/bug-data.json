{
    "fastapi:8": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_8/fastapi/routing.py": {
            "buggy_functions": [
                {
                    "function_name": "add_api_route",
                    "function_code": "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> None:\n    route = self.route_class(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n    )\n    self.routes.append(route)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 328,
                    "end_line": 375,
                    "variables": {
                        "str": [
                            330,
                            335,
                            337,
                            338,
                            339,
                            340,
                            342,
                            343,
                            350
                        ],
                        "Callable": [
                            331
                        ],
                        "Type": [
                            349,
                            333
                        ],
                        "Any": [
                            340,
                            333
                        ],
                        "int": [
                            340,
                            334
                        ],
                        "List": [
                            342,
                            335
                        ],
                        "Sequence": [
                            336
                        ],
                        "params.Depends": [
                            336
                        ],
                        "params": [
                            336
                        ],
                        "Dict": [
                            340
                        ],
                        "Union": [
                            344,
                            345,
                            340,
                            342
                        ],
                        "bool": [
                            346,
                            347,
                            348,
                            341
                        ],
                        "Optional": [
                            342
                        ],
                        "Set": [
                            342
                        ],
                        "SetIntStr": [
                            344,
                            345
                        ],
                        "DictIntStrAny": [
                            344,
                            345
                        ],
                        "Response": [
                            349
                        ],
                        "set": [
                            345
                        ],
                        "route": [
                            352,
                            375
                        ],
                        "self.route_class": [
                            352
                        ],
                        "self": [
                            352,
                            373,
                            375
                        ],
                        "path": [
                            353
                        ],
                        "endpoint": [
                            354
                        ],
                        "response_model": [
                            355
                        ],
                        "status_code": [
                            356
                        ],
                        "tags": [
                            357
                        ],
                        "dependencies": [
                            358
                        ],
                        "summary": [
                            359
                        ],
                        "description": [
                            360
                        ],
                        "response_description": [
                            361
                        ],
                        "responses": [
                            362
                        ],
                        "deprecated": [
                            363
                        ],
                        "methods": [
                            364
                        ],
                        "operation_id": [
                            365
                        ],
                        "response_model_include": [
                            366
                        ],
                        "response_model_exclude": [
                            367
                        ],
                        "response_model_by_alias": [
                            368
                        ],
                        "response_model_skip_defaults": [
                            369
                        ],
                        "include_in_schema": [
                            370
                        ],
                        "response_class": [
                            371
                        ],
                        "name": [
                            372
                        ],
                        "self.dependency_overrides_provider": [
                            373
                        ],
                        "self.routes.append": [
                            375
                        ],
                        "self.routes": [
                            375
                        ]
                    },
                    "filtered_variables": {
                        "Callable": [
                            331
                        ],
                        "Type": [
                            349,
                            333
                        ],
                        "Any": [
                            340,
                            333
                        ],
                        "List": [
                            342,
                            335
                        ],
                        "Sequence": [
                            336
                        ],
                        "params.Depends": [
                            336
                        ],
                        "params": [
                            336
                        ],
                        "Dict": [
                            340
                        ],
                        "Union": [
                            344,
                            345,
                            340,
                            342
                        ],
                        "Optional": [
                            342
                        ],
                        "Set": [
                            342
                        ],
                        "SetIntStr": [
                            344,
                            345
                        ],
                        "DictIntStrAny": [
                            344,
                            345
                        ],
                        "Response": [
                            349
                        ],
                        "route": [
                            352,
                            375
                        ],
                        "self.route_class": [
                            352
                        ],
                        "self": [
                            352,
                            373,
                            375
                        ],
                        "path": [
                            353
                        ],
                        "endpoint": [
                            354
                        ],
                        "response_model": [
                            355
                        ],
                        "status_code": [
                            356
                        ],
                        "tags": [
                            357
                        ],
                        "dependencies": [
                            358
                        ],
                        "summary": [
                            359
                        ],
                        "description": [
                            360
                        ],
                        "response_description": [
                            361
                        ],
                        "responses": [
                            362
                        ],
                        "deprecated": [
                            363
                        ],
                        "methods": [
                            364
                        ],
                        "operation_id": [
                            365
                        ],
                        "response_model_include": [
                            366
                        ],
                        "response_model_exclude": [
                            367
                        ],
                        "response_model_by_alias": [
                            368
                        ],
                        "response_model_skip_defaults": [
                            369
                        ],
                        "include_in_schema": [
                            370
                        ],
                        "response_class": [
                            371
                        ],
                        "name": [
                            372
                        ],
                        "self.dependency_overrides_provider": [
                            373
                        ],
                        "self.routes.append": [
                            375
                        ],
                        "self.routes": [
                            375
                        ]
                    },
                    "diff_line_number": 350,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    route = self.route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_skip_defaults=route.response_model_skip_defaults, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.Depends": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SetIntStr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DictIntStrAny": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Response": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.route_class": {
                                    "variable_value": "<class 'fastapi.routing.APIRoute'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x1070a4460>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": "'/a/b/c/'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "endpoint": {
                                    "variable_value": "<function get_c at 0x1076703a0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "response_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "status_code": {
                                    "variable_value": "200",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tags": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "dependencies": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "summary": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "description": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "response_description": {
                                    "variable_value": "'Successful Response'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "responses": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "deprecated": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "methods": {
                                    "variable_value": "{'GET'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "operation_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response_model_include": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response_model_exclude": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "response_model_by_alias": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "response_model_skip_defaults": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "include_in_schema": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "response_class": {
                                    "variable_value": "<class 'starlette.responses.JSONResponse'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'get_c'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "self.dependency_overrides_provider": {
                                    "variable_value": "<fastapi.applications.FastAPI object at 0x107007f70>",
                                    "variable_type": "FastAPI",
                                    "variable_shape": null
                                },
                                "self.routes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.routes": {
                                    "variable_value": "[<starlette.routing.Route object at 0x107656670>, <starlette.routing.Route object at 0x1076566d0>, <starlette.routing.Route object at 0x107656dc0>, <starlette.routing.Route object at 0x10765f220>, <fastapi.routing.APIRoute object at 0x107674820>, <fastapi.routing.APIRoute object at 0x107674f40>]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.Depends": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Set": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SetIntStr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DictIntStrAny": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Response": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "APIRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route_class": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route_class_override": {
                                    "variable_value": "<class 'tests.test_custom_route_class.APIRouteC'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "self.route_class": {
                                    "variable_value": "<class 'fastapi.routing.APIRoute'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x102fa9a60>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": "'/a/b/c/'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "endpoint": {
                                    "variable_value": "<function get_c at 0x10361c310>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "response_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "status_code": {
                                    "variable_value": "200",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "tags": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "dependencies": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "summary": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "description": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "response_description": {
                                    "variable_value": "'Successful Response'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "responses": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "deprecated": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "methods": {
                                    "variable_value": "{'GET'}",
                                    "variable_type": "set",
                                    "variable_shape": "1"
                                },
                                "operation_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response_model_include": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "response_model_exclude": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "response_model_by_alias": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "response_model_skip_defaults": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "include_in_schema": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "response_class": {
                                    "variable_value": "<class 'starlette.responses.JSONResponse'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'get_c'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "self.dependency_overrides_provider": {
                                    "variable_value": "<fastapi.applications.FastAPI object at 0x103029ca0>",
                                    "variable_type": "FastAPI",
                                    "variable_shape": null
                                },
                                "self.routes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.routes": {
                                    "variable_value": "[<starlette.routing.Route object at 0x1035ff790>, <starlette.routing.Route object at 0x1035ff7f0>, <starlette.routing.Route object at 0x1035ffee0>, <starlette.routing.Route object at 0x10360a340>, <tests.test_custom_route_class.APIRouteA object at 0x103620940>, <tests.test_custom_route_class.APIRouteB object at 0x10361dee0>]",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "include_router",
                    "function_code": "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    default_response_class: Optional[Type[Response]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise Exception(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                dependencies=list(dependencies or [])\n                + list(route.dependencies or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_skip_defaults=route.response_model_skip_defaults,\n                include_in_schema=route.include_in_schema,\n                response_class=route.response_class or default_response_class,\n                name=route.name,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=list(route.methods or []),\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 440,
                    "end_line": 506,
                    "variables": {
                        "str": [
                            444,
                            445,
                            447
                        ],
                        "List": [
                            445
                        ],
                        "Sequence": [
                            446
                        ],
                        "params.Depends": [
                            446
                        ],
                        "params": [
                            446
                        ],
                        "Dict": [
                            447
                        ],
                        "Union": [
                            447
                        ],
                        "int": [
                            447
                        ],
                        "Any": [
                            447
                        ],
                        "Optional": [
                            448
                        ],
                        "Type": [
                            448
                        ],
                        "Response": [
                            448
                        ],
                        "prefix": [
                            450,
                            451,
                            452,
                            493,
                            469,
                            501,
                            505
                        ],
                        "prefix.startswith": [
                            451
                        ],
                        "prefix.endswith": [
                            452
                        ],
                        "r": [
                            456,
                            457,
                            458
                        ],
                        "router.routes": [
                            456,
                            465
                        ],
                        "router": [
                            456,
                            465
                        ],
                        "path": [
                            457,
                            459
                        ],
                        "getattr": [
                            457,
                            458
                        ],
                        "name": [
                            458,
                            461
                        ],
                        "Exception": [
                            460
                        ],
                        "responses": [
                            464,
                            467,
                            463
                        ],
                        "route": [
                            465,
                            466,
                            467,
                            469,
                            470,
                            471,
                            472,
                            473,
                            475,
                            476,
                            477,
                            478,
                            480,
                            481,
                            482,
                            483,
                            484,
                            485,
                            486,
                            487,
                            488,
                            489,
                            491,
                            493,
                            494,
                            495,
                            496,
                            497,
                            499,
                            501,
                            503,
                            505
                        ],
                        "isinstance": [
                            503,
                            466,
                            491,
                            499
                        ],
                        "APIRoute": [
                            466
                        ],
                        "combined_responses": [
                            467,
                            479
                        ],
                        "route.responses": [
                            467
                        ],
                        "self.add_api_route": [
                            468
                        ],
                        "self": [
                            504,
                            500,
                            468,
                            492
                        ],
                        "route.path": [
                            493,
                            505,
                            469,
                            501
                        ],
                        "route.endpoint": [
                            505,
                            501,
                            470,
                            494
                        ],
                        "route.response_model": [
                            471
                        ],
                        "route.status_code": [
                            472
                        ],
                        "route.tags": [
                            473
                        ],
                        "tags": [
                            473
                        ],
                        "list": [
                            474,
                            475,
                            495
                        ],
                        "dependencies": [
                            474
                        ],
                        "route.dependencies": [
                            475
                        ],
                        "route.summary": [
                            476
                        ],
                        "route.description": [
                            477
                        ],
                        "route.response_description": [
                            478
                        ],
                        "route.deprecated": [
                            480
                        ],
                        "route.methods": [
                            481,
                            495
                        ],
                        "route.operation_id": [
                            482
                        ],
                        "route.response_model_include": [
                            483
                        ],
                        "route.response_model_exclude": [
                            484
                        ],
                        "route.response_model_by_alias": [
                            485
                        ],
                        "route.response_model_skip_defaults": [
                            486
                        ],
                        "route.include_in_schema": [
                            496,
                            487
                        ],
                        "route.response_class": [
                            488
                        ],
                        "default_response_class": [
                            488
                        ],
                        "route.name": [
                            489,
                            505,
                            497,
                            501
                        ],
                        "routing.Route": [
                            491
                        ],
                        "routing": [
                            491,
                            503
                        ],
                        "self.add_route": [
                            492
                        ],
                        "APIWebSocketRoute": [
                            499
                        ],
                        "self.add_api_websocket_route": [
                            500
                        ],
                        "routing.WebSocketRoute": [
                            503
                        ],
                        "self.add_websocket_route": [
                            504
                        ]
                    },
                    "filtered_variables": {
                        "List": [
                            445
                        ],
                        "Sequence": [
                            446
                        ],
                        "params.Depends": [
                            446
                        ],
                        "params": [
                            446
                        ],
                        "Dict": [
                            447
                        ],
                        "Union": [
                            447
                        ],
                        "Any": [
                            447
                        ],
                        "Optional": [
                            448
                        ],
                        "Type": [
                            448
                        ],
                        "Response": [
                            448
                        ],
                        "prefix": [
                            450,
                            451,
                            452,
                            493,
                            469,
                            501,
                            505
                        ],
                        "prefix.startswith": [
                            451
                        ],
                        "prefix.endswith": [
                            452
                        ],
                        "r": [
                            456,
                            457,
                            458
                        ],
                        "router.routes": [
                            456,
                            465
                        ],
                        "router": [
                            456,
                            465
                        ],
                        "path": [
                            457,
                            459
                        ],
                        "name": [
                            458,
                            461
                        ],
                        "responses": [
                            464,
                            467,
                            463
                        ],
                        "route": [
                            465,
                            466,
                            467,
                            469,
                            470,
                            471,
                            472,
                            473,
                            475,
                            476,
                            477,
                            478,
                            480,
                            481,
                            482,
                            483,
                            484,
                            485,
                            486,
                            487,
                            488,
                            489,
                            491,
                            493,
                            494,
                            495,
                            496,
                            497,
                            499,
                            501,
                            503,
                            505
                        ],
                        "APIRoute": [
                            466
                        ],
                        "combined_responses": [
                            467,
                            479
                        ],
                        "route.responses": [
                            467
                        ],
                        "self.add_api_route": [
                            468
                        ],
                        "self": [
                            504,
                            500,
                            468,
                            492
                        ],
                        "route.path": [
                            493,
                            505,
                            469,
                            501
                        ],
                        "route.endpoint": [
                            505,
                            501,
                            470,
                            494
                        ],
                        "route.response_model": [
                            471
                        ],
                        "route.status_code": [
                            472
                        ],
                        "route.tags": [
                            473
                        ],
                        "tags": [
                            473
                        ],
                        "dependencies": [
                            474
                        ],
                        "route.dependencies": [
                            475
                        ],
                        "route.summary": [
                            476
                        ],
                        "route.description": [
                            477
                        ],
                        "route.response_description": [
                            478
                        ],
                        "route.deprecated": [
                            480
                        ],
                        "route.methods": [
                            481,
                            495
                        ],
                        "route.operation_id": [
                            482
                        ],
                        "route.response_model_include": [
                            483
                        ],
                        "route.response_model_exclude": [
                            484
                        ],
                        "route.response_model_by_alias": [
                            485
                        ],
                        "route.response_model_skip_defaults": [
                            486
                        ],
                        "route.include_in_schema": [
                            496,
                            487
                        ],
                        "route.response_class": [
                            488
                        ],
                        "default_response_class": [
                            488
                        ],
                        "route.name": [
                            489,
                            505,
                            497,
                            501
                        ],
                        "routing.Route": [
                            491
                        ],
                        "routing": [
                            491,
                            503
                        ],
                        "self.add_route": [
                            492
                        ],
                        "APIWebSocketRoute": [
                            499
                        ],
                        "self.add_api_websocket_route": [
                            500
                        ],
                        "routing.WebSocketRoute": [
                            503
                        ],
                        "self.add_websocket_route": [
                            504
                        ]
                    },
                    "diff_line_number": 489,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute) -> None:\n    super().__init__(routes=routes, redirect_slashes=redirect_slashes, default=default)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class",
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> None:\n    route = self.route_class(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name, dependency_overrides_provider=self.dependency_overrides_provider)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)\n        return func\n    return decorator",
                            "def add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name)\n    self.routes.append(route)",
                            "def websocket(self, path: str, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, 'path')\n            name = getattr(r, 'name', 'unknown')\n            if path is not None and (not path):\n                raise Exception(f'Prefix and path cannot be both empty (path operation: {name})')\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), dependencies=list(dependencies or []) + list(route.dependencies or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=combined_responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, response_model_include=route.response_model_include, response_model_exclude=route.response_model_exclude, response_model_by_alias=route.response_model_by_alias, response_model_skip_defaults=route.response_model_skip_defaults, include_in_schema=route.include_in_schema, response_class=route.response_class or default_response_class, name=route.name)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=list(route.methods or []), include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(prefix + route.path, route.endpoint, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)",
                            "def get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def put(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def delete(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def options(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def head(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def patch(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def trace(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], dependencies=dependencies, summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, response_model_include=response_model_include, response_model_exclude=response_model_exclude, response_model_by_alias=response_model_by_alias, response_model_skip_defaults=response_model_skip_defaults, include_in_schema=include_in_schema, response_class=response_class, name=name)\n    return func",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
                        ],
                        "constructor_variables": [
                            "route_class",
                            "dependency_overrides_provider"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute) -> None",
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                            "websocket(self, path: str, name: str=None) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.Depends": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Response": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'/a'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "prefix.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x110805c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "prefix.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x110805c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "r": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "router.routes": {
                                    "variable_value": "[<tests.test_custom_route_class.APIRouteA object at 0x110dc7b20>, <tests.test_custom_route_class.APIRouteA object at 0x110dd6d30>, <tests.test_custom_route_class.APIRouteA object at 0x110dda040>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "router": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x110dc7580>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "responses": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "APIRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "combined_responses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.responses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_api_route": {
                                    "variable_value": "<bound method APIRouter.add_api_route of <fastapi.routing.APIRouter object at 0x11080b430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x11080b430>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "route.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.endpoint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.status_code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.tags": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tags": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "dependencies": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.operation_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_include": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_by_alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_skip_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.include_in_schema": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_class": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "default_response_class": {
                                    "variable_value": "<class 'starlette.responses.JSONResponse'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "route.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing.Route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_route": {
                                    "variable_value": "<bound method Router.add_route of <fastapi.routing.APIRouter object at 0x11080b430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "APIWebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_api_websocket_route": {
                                    "variable_value": "<bound method APIRouter.add_api_websocket_route of <fastapi.routing.APIRouter object at 0x11080b430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "routing.WebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_websocket_route": {
                                    "variable_value": "<bound method Router.add_websocket_route of <fastapi.routing.APIRouter object at 0x11080b430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.Depends": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Response": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "'/a'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "prefix.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x106099bb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "prefix.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x106099bb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "r": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "router.routes": {
                                    "variable_value": "[<tests.test_custom_route_class.APIRouteA object at 0x106659b50>, <tests.test_custom_route_class.APIRouteB object at 0x106669d60>, <tests.test_custom_route_class.APIRouteC object at 0x10666e070>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "router": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x1066595b0>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "responses": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "APIRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "combined_responses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.responses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_api_route": {
                                    "variable_value": "<bound method APIRouter.add_api_route of <fastapi.routing.APIRouter object at 0x10609f430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x10609f430>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "route.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.endpoint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.status_code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.tags": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tags": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "dependencies": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.operation_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_include": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_exclude": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_by_alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model_skip_defaults": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.include_in_schema": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_class": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "default_response_class": {
                                    "variable_value": "<class 'starlette.responses.JSONResponse'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "route.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing.Route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_route": {
                                    "variable_value": "<bound method Router.add_route of <fastapi.routing.APIRouter object at 0x10609f430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "APIWebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_api_websocket_route": {
                                    "variable_value": "<bound method APIRouter.add_api_websocket_route of <fastapi.routing.APIRouter object at 0x10609f430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "routing.WebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_websocket_route": {
                                    "variable_value": "<bound method Router.add_websocket_route of <fastapi.routing.APIRouter object at 0x10609f430>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def serialize_response(\n    *,\n    field: Field = None,\n    response: Response,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    skip_defaults: bool = False,\n) -> Any:\n    if field:\n        errors = []\n        if skip_defaults and isinstance(response, BaseModel):\n            response = response.dict(skip_defaults=skip_defaults)\n        value, errors_ = field.validate(response, {}, loc=(\"response\",))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors, field.type_)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            skip_defaults=skip_defaults,\n        )\n    else:\n        return jsonable_encoder(response)",
                "def get_app(\n    dependant: Dependant,\n    body_field: Field = None,\n    status_code: int = 200,\n    response_class: Type[Response] = JSONResponse,\n    response_field: Field = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    dependency_overrides_provider: Any = None,\n) -> Callable:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(body_field.schema, params.Form)\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n            raise RequestValidationError(errors)\n        else:\n            assert dependant.call is not None, \"dependant.call must be a function\"\n            if is_coroutine:\n                raw_response = await dependant.call(**values)\n            else:\n                raw_response = await run_in_threadpool(dependant.call, **values)\n            if isinstance(raw_response, Response):\n                if raw_response.background is None:\n                    raw_response.background = background_tasks\n                return raw_response\n            response_data = serialize_response(\n                field=response_field,\n                response=raw_response,\n                include=response_model_include,\n                exclude=response_model_exclude,\n                by_alias=response_model_by_alias,\n                skip_defaults=response_model_skip_defaults,\n            )\n            response = response_class(\n                content=response_data,\n                status_code=status_code,\n                background=background_tasks,\n            )\n            response.headers.raw.extend(sub_response.headers.raw)\n            if sub_response.status_code:\n                response.status_code = sub_response.status_code\n            return response\n\n    return app",
                "def get_websocket_app(\n    dependant: Dependant, dependency_overrides_provider: Any = None\n) -> Callable:\n    async def app(websocket: WebSocket) -> None:\n        solved_result = await solve_dependencies(\n            request=websocket,\n            dependant=dependant,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, _, _2, _3 = solved_result\n        if errors:\n            await websocket.close(code=WS_1008_POLICY_VIOLATION)\n            raise WebSocketRequestValidationError(errors)\n        assert dependant.call is not None, \"dependant.call must be a function\"\n        await dependant.call(**values)\n\n    return app",
                "async def app(request: Request) -> Response:\n    try:\n        body = None\n        if body_field:\n            if is_body_form:\n                body = await request.form()\n            else:\n                body_bytes = await request.body()\n                if body_bytes:\n                    body = await request.json()\n    except Exception as e:\n        logging.error(f\"Error getting request body: {e}\")\n        raise HTTPException(\n            status_code=400, detail=\"There was an error parsing the body\"\n        ) from e\n    solved_result = await solve_dependencies(\n        request=request,\n        dependant=dependant,\n        body=body,\n        dependency_overrides_provider=dependency_overrides_provider,\n    )\n    values, errors, background_tasks, sub_response, _ = solved_result\n    if errors:\n        raise RequestValidationError(errors)\n    else:\n        assert dependant.call is not None, \"dependant.call must be a function\"\n        if is_coroutine:\n            raw_response = await dependant.call(**values)\n        else:\n            raw_response = await run_in_threadpool(dependant.call, **values)\n        if isinstance(raw_response, Response):\n            if raw_response.background is None:\n                raw_response.background = background_tasks\n            return raw_response\n        response_data = serialize_response(\n            field=response_field,\n            response=raw_response,\n            include=response_model_include,\n            exclude=response_model_exclude,\n            by_alias=response_model_by_alias,\n            skip_defaults=response_model_skip_defaults,\n        )\n        response = response_class(\n            content=response_data,\n            status_code=status_code,\n            background=background_tasks,\n        )\n        response.headers.raw.extend(sub_response.headers.raw)\n        if sub_response.status_code:\n            response.status_code = sub_response.status_code\n        return response",
                "async def app(websocket: WebSocket) -> None:\n    solved_result = await solve_dependencies(\n        request=websocket,\n        dependant=dependant,\n        dependency_overrides_provider=dependency_overrides_provider,\n    )\n    values, errors, _, _2, _3 = solved_result\n    if errors:\n        await websocket.close(code=WS_1008_POLICY_VIOLATION)\n        raise WebSocketRequestValidationError(errors)\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    await dependant.call(**values)",
                "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    name: str = None,\n    dependency_overrides_provider: Any = None,\n) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.dependant = get_dependant(path=path, call=self.endpoint)\n    self.app = websocket_session(\n        get_websocket_app(\n            dependant=self.dependant,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n    )\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)",
                "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    name: str = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Optional[Type[Response]] = None,\n    dependency_overrides_provider: Any = None,\n) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n    if methods is None:\n        methods = [\"GET\"]\n    self.methods = set([method.upper() for method in methods])\n    self.unique_id = generate_operation_id_for_path(\n        name=self.name, path=self.path_format, method=list(methods)[0]\n    )\n    self.response_model = response_model\n    if self.response_model:\n        response_name = \"Response_\" + self.unique_id\n        self.response_field: Optional[Field] = Field(\n            name=response_name,\n            type_=self.response_model,\n            class_validators={},\n            default=None,\n            required=False,\n            model_config=BaseConfig,\n            schema=Schema(None),\n        )\n        # Create a clone of the field, so that a Pydantic submodel is not returned\n        # as is just because it's an instance of a subclass of a more limited class\n        # e.g. UserInDB (containing hashed_password) could be a subclass of User\n        # that doesn't have the hashed_password. But because it's a subclass, it\n        # would pass the validation and be returned as is.\n        # By being a new field, no inheritance will be passed as is. A new model\n        # will be always created.\n        self.secure_cloned_response_field: Optional[Field] = create_cloned_field(\n            self.response_field\n        )\n    else:\n        self.response_field = None\n        self.secure_cloned_response_field = None\n    self.status_code = status_code\n    self.tags = tags or []\n    if dependencies:\n        self.dependencies = list(dependencies)\n    else:\n        self.dependencies = []\n    self.summary = summary\n    self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n    # if a \"form feed\" character (page break) is found in the description text,\n    # truncate description text to the content preceding the first \"form feed\"\n    self.description = self.description.split(\"\\f\")[0]\n    self.response_description = response_description\n    self.responses = responses or {}\n    response_fields = {}\n    for additional_status_code, response in self.responses.items():\n        assert isinstance(response, dict), \"An additional response must be a dict\"\n        model = response.get(\"model\")\n        if model:\n            assert lenient_issubclass(\n                model, BaseModel\n            ), \"A response model must be a Pydantic model\"\n            response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n            response_field = Field(\n                name=response_name,\n                type_=model,\n                class_validators=None,\n                default=None,\n                required=False,\n                model_config=BaseConfig,\n                schema=Schema(None),\n            )\n            response_fields[additional_status_code] = response_field\n    if response_fields:\n        self.response_fields: Dict[Union[int, str], Field] = response_fields\n    else:\n        self.response_fields = {}\n    self.deprecated = deprecated\n    self.operation_id = operation_id\n    self.response_model_include = response_model_include\n    self.response_model_exclude = response_model_exclude\n    self.response_model_by_alias = response_model_by_alias\n    self.response_model_skip_defaults = response_model_skip_defaults\n    self.include_in_schema = include_in_schema\n    self.response_class = response_class\n\n    assert inspect.isfunction(endpoint) or inspect.ismethod(\n        endpoint\n    ), f\"An endpoint must be a function or method\"\n    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n    for depends in self.dependencies[::-1]:\n        self.dependant.dependencies.insert(\n            0,\n            get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n        )\n    self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.app = request_response(\n        get_app(\n            dependant=self.dependant,\n            body_field=self.body_field,\n            status_code=self.status_code,\n            response_class=self.response_class or JSONResponse,\n            response_field=self.secure_cloned_response_field,\n            response_model_include=self.response_model_include,\n            response_model_exclude=self.response_model_exclude,\n            response_model_by_alias=self.response_model_by_alias,\n            response_model_skip_defaults=self.response_model_skip_defaults,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n        )\n    )",
                "def __init__(\n    self,\n    routes: List[routing.BaseRoute] = None,\n    redirect_slashes: bool = True,\n    default: ASGIApp = None,\n    dependency_overrides_provider: Any = None,\n    route_class: Type[APIRoute] = APIRoute,\n) -> None:\n    super().__init__(\n        routes=routes, redirect_slashes=redirect_slashes, default=default\n    )\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class",
                "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> None:\n    route = self.route_class(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n    )\n    self.routes.append(route)",
                "def api_route(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(\n            path,\n            func,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags or [],\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses or {},\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_skip_defaults=response_model_skip_defaults,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n        )\n        return func\n\n    return decorator",
                "def add_api_websocket_route(\n    self, path: str, endpoint: Callable, name: str = None\n) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name)\n    self.routes.append(route)",
                "def websocket(self, path: str, name: str = None) -> Callable:\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n\n    return decorator",
                "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    default_response_class: Optional[Type[Response]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise Exception(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                dependencies=list(dependencies or [])\n                + list(route.dependencies or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_skip_defaults=route.response_model_skip_defaults,\n                include_in_schema=route.include_in_schema,\n                response_class=route.response_class or default_response_class,\n                name=route.name,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=list(route.methods or []),\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )",
                "def get(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def put(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def post(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def delete(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def options(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def head(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def patch(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def trace(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )",
                "def decorator(func: Callable) -> Callable:\n    self.add_api_route(\n        path,\n        func,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_skip_defaults=response_model_skip_defaults,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n    )\n    return func",
                "def decorator(func: Callable) -> Callable:\n    self.add_api_websocket_route(path, func, name=name)\n    return func"
            ],
            "inscope_function_signatures": [
                "serialize_response() -> Any",
                "get_app(dependant: Dependant, body_field: Field=None, status_code: int=200, response_class: Type[Response]=JSONResponse, response_field: Field=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, dependency_overrides_provider: Any=None) -> Callable",
                "get_websocket_app(dependant: Dependant, dependency_overrides_provider: Any=None) -> Callable",
                "app(request: Request) -> Response",
                "app(websocket: WebSocket) -> None",
                "__init__(self, path: str, endpoint: Callable) -> None",
                "__init__(self, path: str, endpoint: Callable) -> None",
                "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute) -> None",
                "add_api_route(self, path: str, endpoint: Callable) -> None",
                "api_route(self, path: str) -> Callable",
                "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None",
                "websocket(self, path: str, name: str=None) -> Callable",
                "include_router(self, router: 'APIRouter') -> None",
                "get(self, path: str) -> Callable",
                "put(self, path: str) -> Callable",
                "post(self, path: str) -> Callable",
                "delete(self, path: str) -> Callable",
                "options(self, path: str) -> Callable",
                "head(self, path: str) -> Callable",
                "patch(self, path: str) -> Callable",
                "trace(self, path: str) -> Callable",
                "decorator(func: Callable) -> Callable",
                "decorator(func: Callable) -> Callable"
            ],
            "variables_in_file": {
                "Field": [
                    70,
                    39,
                    263,
                    73,
                    235,
                    274,
                    219
                ],
                "Response": [
                    448,
                    835,
                    615,
                    40,
                    72,
                    203,
                    747,
                    397,
                    527,
                    114,
                    659,
                    84,
                    791,
                    571,
                    349,
                    703
                ],
                "Union": [
                    388,
                    519,
                    392,
                    393,
                    522,
                    523,
                    651,
                    654,
                    655,
                    783,
                    274,
                    786,
                    787,
                    41,
                    42,
                    563,
                    566,
                    567,
                    695,
                    698,
                    699,
                    827,
                    830,
                    447,
                    831,
                    193,
                    196,
                    198,
                    199,
                    74,
                    75,
                    340,
                    342,
                    344,
                    345,
                    607,
                    610,
                    611,
                    739,
                    742,
                    743
                ],
                "SetIntStr": [
                    392,
                    393,
                    522,
                    523,
                    654,
                    655,
                    786,
                    787,
                    41,
                    42,
                    566,
                    567,
                    698,
                    699,
                    830,
                    831,
                    198,
                    199,
                    74,
                    75,
                    344,
                    345,
                    610,
                    611,
                    742,
                    743
                ],
                "DictIntStrAny": [
                    392,
                    393,
                    522,
                    523,
                    654,
                    655,
                    786,
                    787,
                    41,
                    42,
                    566,
                    567,
                    698,
                    699,
                    830,
                    831,
                    198,
                    199,
                    74,
                    75,
                    344,
                    345,
                    610,
                    611,
                    742,
                    743
                ],
                "bool": [
                    389,
                    520,
                    394,
                    395,
                    396,
                    524,
                    525,
                    526,
                    652,
                    656,
                    657,
                    658,
                    784,
                    788,
                    789,
                    790,
                    43,
                    44,
                    564,
                    568,
                    569,
                    570,
                    696,
                    700,
                    317,
                    701,
                    702,
                    828,
                    832,
                    194,
                    833,
                    834,
                    200,
                    201,
                    202,
                    76,
                    77,
                    341,
                    346,
                    347,
                    348,
                    608,
                    612,
                    613,
                    614,
                    740,
                    744,
                    745,
                    746
                ],
                "set": [
                    611,
                    199,
                    743,
                    393,
                    42,
                    75,
                    523,
                    655,
                    787,
                    212,
                    567,
                    345,
                    699,
                    831
                ],
                "field": [
                    56,
                    50,
                    46
                ],
                "errors": [
                    105,
                    106,
                    107,
                    47,
                    52,
                    148,
                    54,
                    55,
                    56,
                    149,
                    151
                ],
                "skip_defaults": [
                    48,
                    49,
                    62
                ],
                "isinstance": [
                    256,
                    503,
                    491,
                    48,
                    82,
                    51,
                    114,
                    53,
                    466,
                    499
                ],
                "response": [
                    256,
                    65,
                    257,
                    131,
                    133,
                    134,
                    48,
                    49,
                    50,
                    126,
                    255
                ],
                "BaseModel": [
                    48,
                    260
                ],
                "response.dict": [
                    49
                ],
                "value": [
                    50,
                    58
                ],
                "errors_": [
                    50,
                    51,
                    52,
                    53,
                    54
                ],
                "field.validate": [
                    50
                ],
                "ErrorWrapper": [
                    51
                ],
                "errors.append": [
                    52
                ],
                "list": [
                    495,
                    244,
                    53,
                    214,
                    474,
                    475
                ],
                "errors.extend": [
                    54
                ],
                "ValidationError": [
                    56
                ],
                "field.type_": [
                    56
                ],
                "jsonable_encoder": [
                    65,
                    57
                ],
                "include": [
                    59
                ],
                "exclude": [
                    60
                ],
                "by_alias": [
                    61
                ],
                "Any": [
                    512,
                    388,
                    644,
                    519,
                    776,
                    651,
                    140,
                    783,
                    165,
                    556,
                    45,
                    688,
                    563,
                    820,
                    695,
                    186,
                    827,
                    447,
                    319,
                    193,
                    204,
                    333,
                    78,
                    340,
                    600,
                    732,
                    607,
                    739,
                    381
                ],
                "Dependant": [
                    140,
                    69
                ],
                "int": [
                    513,
                    388,
                    645,
                    519,
                    777,
                    651,
                    783,
                    274,
                    557,
                    689,
                    563,
                    821,
                    695,
                    187,
                    827,
                    447,
                    193,
                    71,
                    334,
                    340,
                    601,
                    733,
                    607,
                    739,
                    382
                ],
                "Type": [
                    512,
                    644,
                    776,
                    397,
                    527,
                    659,
                    791,
                    556,
                    688,
                    820,
                    186,
                    571,
                    703,
                    320,
                    448,
                    835,
                    72,
                    203,
                    333,
                    600,
                    732,
                    349,
                    615,
                    747,
                    381
                ],
                "JSONResponse": [
                    72,
                    302
                ],
                "dependant.call": [
                    109,
                    111,
                    80,
                    81,
                    113,
                    152,
                    153
                ],
                "dependant": [
                    101,
                    109,
                    111,
                    80,
                    81,
                    113,
                    145,
                    152,
                    153
                ],
                "is_coroutine": [
                    81,
                    110
                ],
                "asyncio.iscoroutinefunction": [
                    81
                ],
                "asyncio": [
                    81
                ],
                "is_body_form": [
                    88,
                    82
                ],
                "body_field": [
                    82,
                    87
                ],
                "body_field.schema": [
                    82
                ],
                "params.Form": [
                    82
                ],
                "params": [
                    384,
                    515,
                    647,
                    779,
                    559,
                    336,
                    82,
                    691,
                    823,
                    603,
                    189,
                    446,
                    735
                ],
                "Request": [
                    84
                ],
                "body": [
                    89,
                    102,
                    93,
                    86
                ],
                "request.form": [
                    89
                ],
                "request": [
                    89,
                    91,
                    100,
                    93
                ],
                "body_bytes": [
                    91,
                    92
                ],
                "request.body": [
                    91
                ],
                "request.json": [
                    93
                ],
                "Exception": [
                    460,
                    94
                ],
                "logging.error": [
                    95
                ],
                "logging": [
                    95
                ],
                "e": [
                    98,
                    95
                ],
                "HTTPException": [
                    96
                ],
                "solved_result": [
                    105,
                    99,
                    148,
                    143
                ],
                "solve_dependencies": [
                    99,
                    143
                ],
                "dependency_overrides_provider": [
                    325,
                    103,
                    296,
                    174,
                    146
                ],
                "values": [
                    105,
                    111,
                    113,
                    148,
                    153
                ],
                "background_tasks": [
                    105,
                    129,
                    116
                ],
                "sub_response": [
                    105,
                    131,
                    132,
                    133
                ],
                "_": [
                    105,
                    148
                ],
                "RequestValidationError": [
                    107
                ],
                "raw_response": [
                    111,
                    113,
                    114,
                    115,
                    116,
                    117,
                    120
                ],
                "run_in_threadpool": [
                    113
                ],
                "raw_response.background": [
                    115,
                    116
                ],
                "response_data": [
                    118,
                    127
                ],
                "serialize_response": [
                    118
                ],
                "response_field": [
                    272,
                    263,
                    119
                ],
                "response_model_include": [
                    675,
                    631,
                    807,
                    587,
                    543,
                    366,
                    719,
                    851,
                    279,
                    121,
                    763,
                    415
                ],
                "response_model_exclude": [
                    544,
                    416,
                    676,
                    808,
                    588,
                    632,
                    367,
                    720,
                    852,
                    280,
                    122,
                    764
                ],
                "response_model_by_alias": [
                    417,
                    545,
                    677,
                    809,
                    589,
                    368,
                    633,
                    721,
                    853,
                    281,
                    123,
                    765
                ],
                "response_model_skip_defaults": [
                    418,
                    546,
                    678,
                    810,
                    590,
                    369,
                    722,
                    634,
                    854,
                    282,
                    124,
                    766
                ],
                "response_class": [
                    636,
                    768,
                    420,
                    548,
                    680,
                    812,
                    592,
                    371,
                    724,
                    856,
                    284,
                    126
                ],
                "status_code": [
                    128,
                    577,
                    356,
                    709,
                    841,
                    621,
                    241,
                    753,
                    533,
                    405,
                    665,
                    797
                ],
                "response.headers.raw.extend": [
                    131
                ],
                "response.headers.raw": [
                    131
                ],
                "response.headers": [
                    131
                ],
                "sub_response.headers.raw": [
                    131
                ],
                "sub_response.headers": [
                    131
                ],
                "sub_response.status_code": [
                    132,
                    133
                ],
                "response.status_code": [
                    133
                ],
                "app": [
                    136,
                    155
                ],
                "Callable": [
                    705,
                    162,
                    837,
                    617,
                    331,
                    428,
                    141,
                    749,
                    79,
                    400,
                    399,
                    434,
                    433,
                    529,
                    661,
                    184,
                    793,
                    573
                ],
                "WebSocket": [
                    142
                ],
                "websocket": [
                    144,
                    150
                ],
                "_2": [
                    148
                ],
                "_3": [
                    148
                ],
                "websocket.close": [
                    150
                ],
                "WS_1008_POLICY_VIOLATION": [
                    150
                ],
                "WebSocketRequestValidationError": [
                    151
                ],
                "routing.WebSocketRoute": [
                    158,
                    503
                ],
                "routing": [
                    491,
                    180,
                    503,
                    313,
                    316,
                    158
                ],
                "str": [
                    514,
                    516,
                    517,
                    518,
                    519,
                    521,
                    528,
                    554,
                    558,
                    560,
                    561,
                    562,
                    563,
                    565,
                    572,
                    598,
                    602,
                    604,
                    605,
                    606,
                    607,
                    609,
                    616,
                    642,
                    646,
                    648,
                    649,
                    650,
                    651,
                    653,
                    660,
                    161,
                    164,
                    686,
                    690,
                    692,
                    693,
                    694,
                    183,
                    695,
                    697,
                    188,
                    190,
                    191,
                    192,
                    193,
                    704,
                    195,
                    196,
                    197,
                    730,
                    734,
                    736,
                    737,
                    738,
                    739,
                    741,
                    748,
                    774,
                    778,
                    780,
                    781,
                    782,
                    783,
                    785,
                    274,
                    792,
                    818,
                    822,
                    824,
                    825,
                    826,
                    827,
                    829,
                    836,
                    330,
                    335,
                    337,
                    338,
                    339,
                    340,
                    342,
                    343,
                    350,
                    379,
                    383,
                    385,
                    386,
                    387,
                    388,
                    390,
                    391,
                    398,
                    428,
                    433,
                    444,
                    445,
                    447,
                    510
                ],
                "self.path": [
                    206,
                    167
                ],
                "self": [
                    530,
                    574,
                    618,
                    662,
                    167,
                    168,
                    169,
                    170,
                    171,
                    173,
                    177,
                    706,
                    206,
                    207,
                    208,
                    209,
                    212,
                    213,
                    214,
                    216,
                    217,
                    218,
                    219,
                    221,
                    235,
                    236,
                    750,
                    239,
                    240,
                    241,
                    242,
                    244,
                    246,
                    247,
                    248,
                    251,
                    252,
                    253,
                    255,
                    262,
                    274,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    794,
                    289,
                    290,
                    291,
                    293,
                    295,
                    296,
                    297,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    325,
                    326,
                    838,
                    352,
                    373,
                    375,
                    401,
                    431,
                    435,
                    468,
                    492,
                    500,
                    504
                ],
                "path": [
                    402,
                    531,
                    663,
                    795,
                    167,
                    170,
                    430,
                    177,
                    435,
                    575,
                    707,
                    839,
                    457,
                    459,
                    206,
                    209,
                    353,
                    619,
                    751
                ],
                "self.endpoint": [
                    289,
                    168,
                    170,
                    207,
                    248
                ],
                "endpoint": [
                    354,
                    168,
                    169,
                    430,
                    207,
                    208,
                    286,
                    287
                ],
                "self.name": [
                    208,
                    169,
                    214
                ],
                "name": [
                    769,
                    421,
                    549,
                    169,
                    458,
                    681,
                    461,
                    430,
                    813,
                    208,
                    593,
                    435,
                    372,
                    725,
                    857,
                    637
                ],
                "get_name": [
                    208,
                    169
                ],
                "self.dependant": [
                    289,
                    291,
                    295,
                    170,
                    299,
                    173
                ],
                "get_dependant": [
                    289,
                    170
                ],
                "self.app": [
                    297,
                    171
                ],
                "websocket_session": [
                    171
                ],
                "get_websocket_app": [
                    172
                ],
                "self.path_regex": [
                    177,
                    209
                ],
                "self.path_format": [
                    289,
                    293,
                    177,
                    209,
                    214
                ],
                "self.param_convertors": [
                    177,
                    209
                ],
                "compile_path": [
                    177,
                    209
                ],
                "routing.Route": [
                    491,
                    180
                ],
                "List": [
                    514,
                    196,
                    390,
                    646,
                    778,
                    558,
                    335,
                    690,
                    342,
                    316,
                    822,
                    602,
                    188,
                    445,
                    734,
                    383
                ],
                "Sequence": [
                    384,
                    515,
                    647,
                    779,
                    559,
                    336,
                    691,
                    823,
                    603,
                    189,
                    446,
                    735
                ],
                "params.Depends": [
                    384,
                    515,
                    647,
                    779,
                    559,
                    336,
                    691,
                    823,
                    603,
                    189,
                    446,
                    735
                ],
                "Dict": [
                    193,
                    739,
                    388,
                    519,
                    651,
                    607,
                    783,
                    274,
                    563,
                    340,
                    695,
                    827,
                    447
                ],
                "Optional": [
                    448,
                    196,
                    203,
                    235,
                    342,
                    219
                ],
                "Set": [
                    196,
                    342
                ],
                "methods": [
                    364,
                    210,
                    211,
                    212,
                    214,
                    413
                ],
                "self.methods": [
                    212
                ],
                "method.upper": [
                    212
                ],
                "method": [
                    212
                ],
                "self.unique_id": [
                    218,
                    213,
                    262,
                    295
                ],
                "generate_operation_id_for_path": [
                    213
                ],
                "self.response_model": [
                    216,
                    217,
                    221
                ],
                "response_model": [
                    576,
                    355,
                    708,
                    840,
                    620,
                    664,
                    752,
                    404,
                    532,
                    216,
                    796
                ],
                "response_name": [
                    264,
                    218,
                    220,
                    262
                ],
                "self.response_field": [
                    219,
                    236,
                    239
                ],
                "BaseConfig": [
                    225,
                    269
                ],
                "Schema": [
                    226,
                    270
                ],
                "self.secure_cloned_response_field": [
                    240,
                    235,
                    303
                ],
                "create_cloned_field": [
                    235
                ],
                "self.status_code": [
                    241,
                    301
                ],
                "self.tags": [
                    242
                ],
                "tags": [
                    578,
                    357,
                    710,
                    842,
                    622,
                    242,
                    754,
                    406,
                    534,
                    473,
                    666,
                    798
                ],
                "dependencies": [
                    579,
                    535,
                    358,
                    711,
                    843,
                    623,
                    243,
                    244,
                    755,
                    407,
                    474,
                    667,
                    799
                ],
                "self.dependencies": [
                    290,
                    244,
                    246
                ],
                "self.summary": [
                    247
                ],
                "summary": [
                    800,
                    580,
                    359,
                    712,
                    536,
                    844,
                    624,
                    756,
                    247,
                    408,
                    668
                ],
                "self.description": [
                    248,
                    251
                ],
                "description": [
                    801,
                    581,
                    360,
                    713,
                    845,
                    537,
                    625,
                    757,
                    248,
                    409,
                    669
                ],
                "inspect.cleandoc": [
                    248
                ],
                "inspect": [
                    248,
                    286
                ],
                "self.endpoint.__doc__": [
                    248
                ],
                "self.description.split": [
                    251
                ],
                "self.response_description": [
                    252
                ],
                "response_description": [
                    802,
                    582,
                    361,
                    714,
                    846,
                    626,
                    538,
                    758,
                    410,
                    252,
                    670
                ],
                "self.responses": [
                    253,
                    255
                ],
                "responses": [
                    803,
                    583,
                    362,
                    715,
                    463,
                    464,
                    847,
                    467,
                    627,
                    759,
                    539,
                    411,
                    253,
                    671
                ],
                "response_fields": [
                    272,
                    273,
                    274,
                    254
                ],
                "additional_status_code": [
                    272,
                    262,
                    255
                ],
                "self.responses.items": [
                    255
                ],
                "dict": [
                    256
                ],
                "model": [
                    257,
                    258,
                    260,
                    265
                ],
                "response.get": [
                    257
                ],
                "lenient_issubclass": [
                    259
                ],
                "self.response_fields": [
                    274,
                    276
                ],
                "self.deprecated": [
                    277
                ],
                "deprecated": [
                    672,
                    804,
                    584,
                    363,
                    716,
                    848,
                    628,
                    277,
                    760,
                    412,
                    540
                ],
                "self.operation_id": [
                    278
                ],
                "operation_id": [
                    674,
                    806,
                    542,
                    586,
                    365,
                    718,
                    850,
                    278,
                    630,
                    762,
                    414
                ],
                "self.response_model_include": [
                    304,
                    279
                ],
                "self.response_model_exclude": [
                    280,
                    305
                ],
                "self.response_model_by_alias": [
                    281,
                    306
                ],
                "self.response_model_skip_defaults": [
                    282,
                    307
                ],
                "self.include_in_schema": [
                    283
                ],
                "include_in_schema": [
                    547,
                    419,
                    679,
                    635,
                    811,
                    591,
                    370,
                    723,
                    855,
                    283,
                    767
                ],
                "self.response_class": [
                    284,
                    302
                ],
                "inspect.isfunction": [
                    286
                ],
                "inspect.ismethod": [
                    286
                ],
                "depends": [
                    290,
                    293
                ],
                "self.dependant.dependencies.insert": [
                    291
                ],
                "self.dependant.dependencies": [
                    291
                ],
                "get_parameterless_sub_dependant": [
                    293
                ],
                "self.body_field": [
                    300,
                    295
                ],
                "get_body_field": [
                    295
                ],
                "self.dependency_overrides_provider": [
                    296,
                    373,
                    308,
                    325
                ],
                "request_response": [
                    297
                ],
                "get_app": [
                    298
                ],
                "routing.Router": [
                    313
                ],
                "routing.BaseRoute": [
                    316
                ],
                "ASGIApp": [
                    318
                ],
                "APIRoute": [
                    320,
                    466
                ],
                "__init__": [
                    322
                ],
                "super": [
                    322
                ],
                "routes": [
                    323
                ],
                "redirect_slashes": [
                    323
                ],
                "default": [
                    323
                ],
                "self.route_class": [
                    352,
                    326
                ],
                "route_class": [
                    326
                ],
                "route": [
                    430,
                    431,
                    465,
                    466,
                    467,
                    469,
                    470,
                    471,
                    472,
                    473,
                    475,
                    476,
                    477,
                    478,
                    352,
                    480,
                    481,
                    482,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    491,
                    503,
                    493,
                    494,
                    495,
                    496,
                    497,
                    499,
                    501,
                    375,
                    505
                ],
                "self.routes.append": [
                    431,
                    375
                ],
                "self.routes": [
                    431,
                    375
                ],
                "self.add_api_route": [
                    401,
                    468
                ],
                "func": [
                    403,
                    436,
                    435,
                    423
                ],
                "decorator": [
                    425,
                    438
                ],
                "APIWebSocketRoute": [
                    499,
                    430
                ],
                "self.add_api_websocket_route": [
                    435,
                    500
                ],
                "prefix": [
                    450,
                    451,
                    452,
                    493,
                    469,
                    501,
                    505
                ],
                "prefix.startswith": [
                    451
                ],
                "prefix.endswith": [
                    452
                ],
                "r": [
                    456,
                    457,
                    458
                ],
                "router.routes": [
                    456,
                    465
                ],
                "router": [
                    456,
                    465
                ],
                "getattr": [
                    457,
                    458
                ],
                "combined_responses": [
                    467,
                    479
                ],
                "route.responses": [
                    467
                ],
                "route.path": [
                    493,
                    505,
                    469,
                    501
                ],
                "route.endpoint": [
                    505,
                    501,
                    470,
                    494
                ],
                "route.response_model": [
                    471
                ],
                "route.status_code": [
                    472
                ],
                "route.tags": [
                    473
                ],
                "route.dependencies": [
                    475
                ],
                "route.summary": [
                    476
                ],
                "route.description": [
                    477
                ],
                "route.response_description": [
                    478
                ],
                "route.deprecated": [
                    480
                ],
                "route.methods": [
                    481,
                    495
                ],
                "route.operation_id": [
                    482
                ],
                "route.response_model_include": [
                    483
                ],
                "route.response_model_exclude": [
                    484
                ],
                "route.response_model_by_alias": [
                    485
                ],
                "route.response_model_skip_defaults": [
                    486
                ],
                "route.include_in_schema": [
                    496,
                    487
                ],
                "route.response_class": [
                    488
                ],
                "default_response_class": [
                    488
                ],
                "route.name": [
                    489,
                    505,
                    497,
                    501
                ],
                "self.add_route": [
                    492
                ],
                "self.add_websocket_route": [
                    504
                ],
                "self.api_route": [
                    706,
                    838,
                    618,
                    750,
                    530,
                    662,
                    794,
                    574
                ]
            },
            "filtered_variables_in_file": {
                "Field": [
                    70,
                    39,
                    263,
                    73,
                    235,
                    274,
                    219
                ],
                "Response": [
                    448,
                    835,
                    615,
                    40,
                    72,
                    203,
                    747,
                    397,
                    527,
                    114,
                    659,
                    84,
                    791,
                    571,
                    349,
                    703
                ],
                "Union": [
                    388,
                    519,
                    392,
                    393,
                    522,
                    523,
                    651,
                    654,
                    655,
                    783,
                    274,
                    786,
                    787,
                    41,
                    42,
                    563,
                    566,
                    567,
                    695,
                    698,
                    699,
                    827,
                    830,
                    447,
                    831,
                    193,
                    196,
                    198,
                    199,
                    74,
                    75,
                    340,
                    342,
                    344,
                    345,
                    607,
                    610,
                    611,
                    739,
                    742,
                    743
                ],
                "SetIntStr": [
                    392,
                    393,
                    522,
                    523,
                    654,
                    655,
                    786,
                    787,
                    41,
                    42,
                    566,
                    567,
                    698,
                    699,
                    830,
                    831,
                    198,
                    199,
                    74,
                    75,
                    344,
                    345,
                    610,
                    611,
                    742,
                    743
                ],
                "DictIntStrAny": [
                    392,
                    393,
                    522,
                    523,
                    654,
                    655,
                    786,
                    787,
                    41,
                    42,
                    566,
                    567,
                    698,
                    699,
                    830,
                    831,
                    198,
                    199,
                    74,
                    75,
                    344,
                    345,
                    610,
                    611,
                    742,
                    743
                ],
                "field": [
                    56,
                    50,
                    46
                ],
                "errors": [
                    105,
                    106,
                    107,
                    47,
                    52,
                    148,
                    54,
                    55,
                    56,
                    149,
                    151
                ],
                "skip_defaults": [
                    48,
                    49,
                    62
                ],
                "response": [
                    256,
                    65,
                    257,
                    131,
                    133,
                    134,
                    48,
                    49,
                    50,
                    126,
                    255
                ],
                "BaseModel": [
                    48,
                    260
                ],
                "response.dict": [
                    49
                ],
                "value": [
                    50,
                    58
                ],
                "errors_": [
                    50,
                    51,
                    52,
                    53,
                    54
                ],
                "field.validate": [
                    50
                ],
                "ErrorWrapper": [
                    51
                ],
                "errors.append": [
                    52
                ],
                "errors.extend": [
                    54
                ],
                "ValidationError": [
                    56
                ],
                "field.type_": [
                    56
                ],
                "jsonable_encoder": [
                    65,
                    57
                ],
                "include": [
                    59
                ],
                "exclude": [
                    60
                ],
                "by_alias": [
                    61
                ],
                "Any": [
                    512,
                    388,
                    644,
                    519,
                    776,
                    651,
                    140,
                    783,
                    165,
                    556,
                    45,
                    688,
                    563,
                    820,
                    695,
                    186,
                    827,
                    447,
                    319,
                    193,
                    204,
                    333,
                    78,
                    340,
                    600,
                    732,
                    607,
                    739,
                    381
                ],
                "Dependant": [
                    140,
                    69
                ],
                "Type": [
                    512,
                    644,
                    776,
                    397,
                    527,
                    659,
                    791,
                    556,
                    688,
                    820,
                    186,
                    571,
                    703,
                    320,
                    448,
                    835,
                    72,
                    203,
                    333,
                    600,
                    732,
                    349,
                    615,
                    747,
                    381
                ],
                "JSONResponse": [
                    72,
                    302
                ],
                "dependant.call": [
                    109,
                    111,
                    80,
                    81,
                    113,
                    152,
                    153
                ],
                "dependant": [
                    101,
                    109,
                    111,
                    80,
                    81,
                    113,
                    145,
                    152,
                    153
                ],
                "is_coroutine": [
                    81,
                    110
                ],
                "asyncio.iscoroutinefunction": [
                    81
                ],
                "asyncio": [
                    81
                ],
                "is_body_form": [
                    88,
                    82
                ],
                "body_field": [
                    82,
                    87
                ],
                "body_field.schema": [
                    82
                ],
                "params.Form": [
                    82
                ],
                "params": [
                    384,
                    515,
                    647,
                    779,
                    559,
                    336,
                    82,
                    691,
                    823,
                    603,
                    189,
                    446,
                    735
                ],
                "Request": [
                    84
                ],
                "body": [
                    89,
                    102,
                    93,
                    86
                ],
                "request.form": [
                    89
                ],
                "request": [
                    89,
                    91,
                    100,
                    93
                ],
                "body_bytes": [
                    91,
                    92
                ],
                "request.body": [
                    91
                ],
                "request.json": [
                    93
                ],
                "logging.error": [
                    95
                ],
                "logging": [
                    95
                ],
                "e": [
                    98,
                    95
                ],
                "HTTPException": [
                    96
                ],
                "solved_result": [
                    105,
                    99,
                    148,
                    143
                ],
                "solve_dependencies": [
                    99,
                    143
                ],
                "dependency_overrides_provider": [
                    325,
                    103,
                    296,
                    174,
                    146
                ],
                "values": [
                    105,
                    111,
                    113,
                    148,
                    153
                ],
                "background_tasks": [
                    105,
                    129,
                    116
                ],
                "sub_response": [
                    105,
                    131,
                    132,
                    133
                ],
                "_": [
                    105,
                    148
                ],
                "RequestValidationError": [
                    107
                ],
                "raw_response": [
                    111,
                    113,
                    114,
                    115,
                    116,
                    117,
                    120
                ],
                "run_in_threadpool": [
                    113
                ],
                "raw_response.background": [
                    115,
                    116
                ],
                "response_data": [
                    118,
                    127
                ],
                "serialize_response": [
                    118
                ],
                "response_field": [
                    272,
                    263,
                    119
                ],
                "response_model_include": [
                    675,
                    631,
                    807,
                    587,
                    543,
                    366,
                    719,
                    851,
                    279,
                    121,
                    763,
                    415
                ],
                "response_model_exclude": [
                    544,
                    416,
                    676,
                    808,
                    588,
                    632,
                    367,
                    720,
                    852,
                    280,
                    122,
                    764
                ],
                "response_model_by_alias": [
                    417,
                    545,
                    677,
                    809,
                    589,
                    368,
                    633,
                    721,
                    853,
                    281,
                    123,
                    765
                ],
                "response_model_skip_defaults": [
                    418,
                    546,
                    678,
                    810,
                    590,
                    369,
                    722,
                    634,
                    854,
                    282,
                    124,
                    766
                ],
                "response_class": [
                    636,
                    768,
                    420,
                    548,
                    680,
                    812,
                    592,
                    371,
                    724,
                    856,
                    284,
                    126
                ],
                "status_code": [
                    128,
                    577,
                    356,
                    709,
                    841,
                    621,
                    241,
                    753,
                    533,
                    405,
                    665,
                    797
                ],
                "response.headers.raw.extend": [
                    131
                ],
                "response.headers.raw": [
                    131
                ],
                "response.headers": [
                    131
                ],
                "sub_response.headers.raw": [
                    131
                ],
                "sub_response.headers": [
                    131
                ],
                "sub_response.status_code": [
                    132,
                    133
                ],
                "response.status_code": [
                    133
                ],
                "app": [
                    136,
                    155
                ],
                "Callable": [
                    705,
                    162,
                    837,
                    617,
                    331,
                    428,
                    141,
                    749,
                    79,
                    400,
                    399,
                    434,
                    433,
                    529,
                    661,
                    184,
                    793,
                    573
                ],
                "WebSocket": [
                    142
                ],
                "websocket": [
                    144,
                    150
                ],
                "_2": [
                    148
                ],
                "_3": [
                    148
                ],
                "websocket.close": [
                    150
                ],
                "WS_1008_POLICY_VIOLATION": [
                    150
                ],
                "WebSocketRequestValidationError": [
                    151
                ],
                "routing.WebSocketRoute": [
                    158,
                    503
                ],
                "routing": [
                    491,
                    180,
                    503,
                    313,
                    316,
                    158
                ],
                "self.path": [
                    206,
                    167
                ],
                "self": [
                    530,
                    574,
                    618,
                    662,
                    167,
                    168,
                    169,
                    170,
                    171,
                    173,
                    177,
                    706,
                    206,
                    207,
                    208,
                    209,
                    212,
                    213,
                    214,
                    216,
                    217,
                    218,
                    219,
                    221,
                    235,
                    236,
                    750,
                    239,
                    240,
                    241,
                    242,
                    244,
                    246,
                    247,
                    248,
                    251,
                    252,
                    253,
                    255,
                    262,
                    274,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    794,
                    289,
                    290,
                    291,
                    293,
                    295,
                    296,
                    297,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    325,
                    326,
                    838,
                    352,
                    373,
                    375,
                    401,
                    431,
                    435,
                    468,
                    492,
                    500,
                    504
                ],
                "path": [
                    402,
                    531,
                    663,
                    795,
                    167,
                    170,
                    430,
                    177,
                    435,
                    575,
                    707,
                    839,
                    457,
                    459,
                    206,
                    209,
                    353,
                    619,
                    751
                ],
                "self.endpoint": [
                    289,
                    168,
                    170,
                    207,
                    248
                ],
                "endpoint": [
                    354,
                    168,
                    169,
                    430,
                    207,
                    208,
                    286,
                    287
                ],
                "self.name": [
                    208,
                    169,
                    214
                ],
                "name": [
                    769,
                    421,
                    549,
                    169,
                    458,
                    681,
                    461,
                    430,
                    813,
                    208,
                    593,
                    435,
                    372,
                    725,
                    857,
                    637
                ],
                "get_name": [
                    208,
                    169
                ],
                "self.dependant": [
                    289,
                    291,
                    295,
                    170,
                    299,
                    173
                ],
                "get_dependant": [
                    289,
                    170
                ],
                "self.app": [
                    297,
                    171
                ],
                "websocket_session": [
                    171
                ],
                "get_websocket_app": [
                    172
                ],
                "self.path_regex": [
                    177,
                    209
                ],
                "self.path_format": [
                    289,
                    293,
                    177,
                    209,
                    214
                ],
                "self.param_convertors": [
                    177,
                    209
                ],
                "compile_path": [
                    177,
                    209
                ],
                "routing.Route": [
                    491,
                    180
                ],
                "List": [
                    514,
                    196,
                    390,
                    646,
                    778,
                    558,
                    335,
                    690,
                    342,
                    316,
                    822,
                    602,
                    188,
                    445,
                    734,
                    383
                ],
                "Sequence": [
                    384,
                    515,
                    647,
                    779,
                    559,
                    336,
                    691,
                    823,
                    603,
                    189,
                    446,
                    735
                ],
                "params.Depends": [
                    384,
                    515,
                    647,
                    779,
                    559,
                    336,
                    691,
                    823,
                    603,
                    189,
                    446,
                    735
                ],
                "Dict": [
                    193,
                    739,
                    388,
                    519,
                    651,
                    607,
                    783,
                    274,
                    563,
                    340,
                    695,
                    827,
                    447
                ],
                "Optional": [
                    448,
                    196,
                    203,
                    235,
                    342,
                    219
                ],
                "Set": [
                    196,
                    342
                ],
                "methods": [
                    364,
                    210,
                    211,
                    212,
                    214,
                    413
                ],
                "self.methods": [
                    212
                ],
                "method.upper": [
                    212
                ],
                "method": [
                    212
                ],
                "self.unique_id": [
                    218,
                    213,
                    262,
                    295
                ],
                "generate_operation_id_for_path": [
                    213
                ],
                "self.response_model": [
                    216,
                    217,
                    221
                ],
                "response_model": [
                    576,
                    355,
                    708,
                    840,
                    620,
                    664,
                    752,
                    404,
                    532,
                    216,
                    796
                ],
                "response_name": [
                    264,
                    218,
                    220,
                    262
                ],
                "self.response_field": [
                    219,
                    236,
                    239
                ],
                "BaseConfig": [
                    225,
                    269
                ],
                "Schema": [
                    226,
                    270
                ],
                "self.secure_cloned_response_field": [
                    240,
                    235,
                    303
                ],
                "create_cloned_field": [
                    235
                ],
                "self.status_code": [
                    241,
                    301
                ],
                "self.tags": [
                    242
                ],
                "tags": [
                    578,
                    357,
                    710,
                    842,
                    622,
                    242,
                    754,
                    406,
                    534,
                    473,
                    666,
                    798
                ],
                "dependencies": [
                    579,
                    535,
                    358,
                    711,
                    843,
                    623,
                    243,
                    244,
                    755,
                    407,
                    474,
                    667,
                    799
                ],
                "self.dependencies": [
                    290,
                    244,
                    246
                ],
                "self.summary": [
                    247
                ],
                "summary": [
                    800,
                    580,
                    359,
                    712,
                    536,
                    844,
                    624,
                    756,
                    247,
                    408,
                    668
                ],
                "self.description": [
                    248,
                    251
                ],
                "description": [
                    801,
                    581,
                    360,
                    713,
                    845,
                    537,
                    625,
                    757,
                    248,
                    409,
                    669
                ],
                "inspect.cleandoc": [
                    248
                ],
                "inspect": [
                    248,
                    286
                ],
                "self.endpoint.__doc__": [
                    248
                ],
                "self.description.split": [
                    251
                ],
                "self.response_description": [
                    252
                ],
                "response_description": [
                    802,
                    582,
                    361,
                    714,
                    846,
                    626,
                    538,
                    758,
                    410,
                    252,
                    670
                ],
                "self.responses": [
                    253,
                    255
                ],
                "responses": [
                    803,
                    583,
                    362,
                    715,
                    463,
                    464,
                    847,
                    467,
                    627,
                    759,
                    539,
                    411,
                    253,
                    671
                ],
                "response_fields": [
                    272,
                    273,
                    274,
                    254
                ],
                "additional_status_code": [
                    272,
                    262,
                    255
                ],
                "self.responses.items": [
                    255
                ],
                "model": [
                    257,
                    258,
                    260,
                    265
                ],
                "response.get": [
                    257
                ],
                "lenient_issubclass": [
                    259
                ],
                "self.response_fields": [
                    274,
                    276
                ],
                "self.deprecated": [
                    277
                ],
                "deprecated": [
                    672,
                    804,
                    584,
                    363,
                    716,
                    848,
                    628,
                    277,
                    760,
                    412,
                    540
                ],
                "self.operation_id": [
                    278
                ],
                "operation_id": [
                    674,
                    806,
                    542,
                    586,
                    365,
                    718,
                    850,
                    278,
                    630,
                    762,
                    414
                ],
                "self.response_model_include": [
                    304,
                    279
                ],
                "self.response_model_exclude": [
                    280,
                    305
                ],
                "self.response_model_by_alias": [
                    281,
                    306
                ],
                "self.response_model_skip_defaults": [
                    282,
                    307
                ],
                "self.include_in_schema": [
                    283
                ],
                "include_in_schema": [
                    547,
                    419,
                    679,
                    635,
                    811,
                    591,
                    370,
                    723,
                    855,
                    283,
                    767
                ],
                "self.response_class": [
                    284,
                    302
                ],
                "inspect.isfunction": [
                    286
                ],
                "inspect.ismethod": [
                    286
                ],
                "depends": [
                    290,
                    293
                ],
                "self.dependant.dependencies.insert": [
                    291
                ],
                "self.dependant.dependencies": [
                    291
                ],
                "get_parameterless_sub_dependant": [
                    293
                ],
                "self.body_field": [
                    300,
                    295
                ],
                "get_body_field": [
                    295
                ],
                "self.dependency_overrides_provider": [
                    296,
                    373,
                    308,
                    325
                ],
                "request_response": [
                    297
                ],
                "get_app": [
                    298
                ],
                "routing.Router": [
                    313
                ],
                "routing.BaseRoute": [
                    316
                ],
                "ASGIApp": [
                    318
                ],
                "APIRoute": [
                    320,
                    466
                ],
                "__init__": [
                    322
                ],
                "routes": [
                    323
                ],
                "redirect_slashes": [
                    323
                ],
                "default": [
                    323
                ],
                "self.route_class": [
                    352,
                    326
                ],
                "route_class": [
                    326
                ],
                "route": [
                    430,
                    431,
                    465,
                    466,
                    467,
                    469,
                    470,
                    471,
                    472,
                    473,
                    475,
                    476,
                    477,
                    478,
                    352,
                    480,
                    481,
                    482,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    491,
                    503,
                    493,
                    494,
                    495,
                    496,
                    497,
                    499,
                    501,
                    375,
                    505
                ],
                "self.routes.append": [
                    431,
                    375
                ],
                "self.routes": [
                    431,
                    375
                ],
                "self.add_api_route": [
                    401,
                    468
                ],
                "func": [
                    403,
                    436,
                    435,
                    423
                ],
                "decorator": [
                    425,
                    438
                ],
                "APIWebSocketRoute": [
                    499,
                    430
                ],
                "self.add_api_websocket_route": [
                    435,
                    500
                ],
                "prefix": [
                    450,
                    451,
                    452,
                    493,
                    469,
                    501,
                    505
                ],
                "prefix.startswith": [
                    451
                ],
                "prefix.endswith": [
                    452
                ],
                "r": [
                    456,
                    457,
                    458
                ],
                "router.routes": [
                    456,
                    465
                ],
                "router": [
                    456,
                    465
                ],
                "combined_responses": [
                    467,
                    479
                ],
                "route.responses": [
                    467
                ],
                "route.path": [
                    493,
                    505,
                    469,
                    501
                ],
                "route.endpoint": [
                    505,
                    501,
                    470,
                    494
                ],
                "route.response_model": [
                    471
                ],
                "route.status_code": [
                    472
                ],
                "route.tags": [
                    473
                ],
                "route.dependencies": [
                    475
                ],
                "route.summary": [
                    476
                ],
                "route.description": [
                    477
                ],
                "route.response_description": [
                    478
                ],
                "route.deprecated": [
                    480
                ],
                "route.methods": [
                    481,
                    495
                ],
                "route.operation_id": [
                    482
                ],
                "route.response_model_include": [
                    483
                ],
                "route.response_model_exclude": [
                    484
                ],
                "route.response_model_by_alias": [
                    485
                ],
                "route.response_model_skip_defaults": [
                    486
                ],
                "route.include_in_schema": [
                    496,
                    487
                ],
                "route.response_class": [
                    488
                ],
                "default_response_class": [
                    488
                ],
                "route.name": [
                    489,
                    505,
                    497,
                    501
                ],
                "self.add_route": [
                    492
                ],
                "self.add_websocket_route": [
                    504
                ],
                "self.api_route": [
                    706,
                    838,
                    618,
                    750,
                    530,
                    662,
                    794,
                    574
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/fastapi_8/tests/test_custom_route_class.py",
                "test_function": "test_route_classes",
                "test_function_code": "def test_route_classes():\n    routes = {}\n    r: APIRoute\n    for r in app.router.routes:\n        routes[r.path] = r\n    assert routes[\"/a/\"].x_type == \"A\"\n    assert routes[\"/a/b/\"].x_type == \"B\"\n    assert routes[\"/a/b/c/\"].x_type == \"C\"",
                "test_error": "AttributeError: 'APIRoute' object has no attribute 'x_type'",
                "full_test_error": "def test_route_classes():\n        routes = {}\n        r: APIRoute\n        for r in app.router.routes:\n            routes[r.path] = r\n>       assert routes[\"/a/\"].x_type == \"A\"\nE       AttributeError: 'APIRoute' object has no attribute 'x_type'\n\ntests/test_custom_route_class.py:112: AttributeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}