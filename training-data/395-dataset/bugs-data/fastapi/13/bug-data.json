{
    "fastapi:13": {
        "/Volumes/SSD2T/bgp_envs/repos/fastapi_13/fastapi/routing.py": {
            "buggy_functions": [
                {
                    "function_name": "include_router",
                    "function_code": "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            if responses is None:\n                responses = {}\n            responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                include_in_schema=route.include_in_schema,\n                content_type=route.content_type,\n                name=route.name,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=route.methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 275,
                    "end_line": 321,
                    "variables": {
                        "str": [
                            280,
                            281,
                            279
                        ],
                        "List": [
                            280
                        ],
                        "Dict": [
                            281
                        ],
                        "Union": [
                            281
                        ],
                        "int": [
                            281
                        ],
                        "Any": [
                            281
                        ],
                        "prefix": [
                            320,
                            294,
                            312,
                            283,
                            284,
                            285
                        ],
                        "prefix.startswith": [
                            284
                        ],
                        "prefix.endswith": [
                            285
                        ],
                        "route": [
                            288,
                            289,
                            292,
                            294,
                            295,
                            296,
                            297,
                            298,
                            299,
                            300,
                            301,
                            303,
                            304,
                            305,
                            306,
                            307,
                            308,
                            310,
                            312,
                            313,
                            314,
                            315,
                            316,
                            318,
                            320
                        ],
                        "router.routes": [
                            288
                        ],
                        "router": [
                            288
                        ],
                        "isinstance": [
                            318,
                            289,
                            310
                        ],
                        "APIRoute": [
                            289
                        ],
                        "responses": [
                            290,
                            291,
                            292,
                            302
                        ],
                        "route.responses": [
                            292
                        ],
                        "self.add_api_route": [
                            293
                        ],
                        "self": [
                            319,
                            293,
                            311
                        ],
                        "route.path": [
                            312,
                            320,
                            294
                        ],
                        "route.endpoint": [
                            320,
                            313,
                            295
                        ],
                        "route.response_model": [
                            296
                        ],
                        "route.status_code": [
                            297
                        ],
                        "route.tags": [
                            298
                        ],
                        "tags": [
                            298
                        ],
                        "route.summary": [
                            299
                        ],
                        "route.description": [
                            300
                        ],
                        "route.response_description": [
                            301
                        ],
                        "route.deprecated": [
                            303
                        ],
                        "route.methods": [
                            304,
                            314
                        ],
                        "route.operation_id": [
                            305
                        ],
                        "route.include_in_schema": [
                            306,
                            315
                        ],
                        "route.content_type": [
                            307
                        ],
                        "route.name": [
                            320,
                            308,
                            316
                        ],
                        "routing.Route": [
                            310
                        ],
                        "routing": [
                            318,
                            310
                        ],
                        "self.add_route": [
                            311
                        ],
                        "routing.WebSocketRoute": [
                            318
                        ],
                        "self.add_websocket_route": [
                            319
                        ]
                    },
                    "filtered_variables": {
                        "List": [
                            280
                        ],
                        "Dict": [
                            281
                        ],
                        "Union": [
                            281
                        ],
                        "Any": [
                            281
                        ],
                        "prefix": [
                            320,
                            294,
                            312,
                            283,
                            284,
                            285
                        ],
                        "prefix.startswith": [
                            284
                        ],
                        "prefix.endswith": [
                            285
                        ],
                        "route": [
                            288,
                            289,
                            292,
                            294,
                            295,
                            296,
                            297,
                            298,
                            299,
                            300,
                            301,
                            303,
                            304,
                            305,
                            306,
                            307,
                            308,
                            310,
                            312,
                            313,
                            314,
                            315,
                            316,
                            318,
                            320
                        ],
                        "router.routes": [
                            288
                        ],
                        "router": [
                            288
                        ],
                        "APIRoute": [
                            289
                        ],
                        "responses": [
                            290,
                            291,
                            292,
                            302
                        ],
                        "route.responses": [
                            292
                        ],
                        "self.add_api_route": [
                            293
                        ],
                        "self": [
                            319,
                            293,
                            311
                        ],
                        "route.path": [
                            312,
                            320,
                            294
                        ],
                        "route.endpoint": [
                            320,
                            313,
                            295
                        ],
                        "route.response_model": [
                            296
                        ],
                        "route.status_code": [
                            297
                        ],
                        "route.tags": [
                            298
                        ],
                        "tags": [
                            298
                        ],
                        "route.summary": [
                            299
                        ],
                        "route.description": [
                            300
                        ],
                        "route.response_description": [
                            301
                        ],
                        "route.deprecated": [
                            303
                        ],
                        "route.methods": [
                            304,
                            314
                        ],
                        "route.operation_id": [
                            305
                        ],
                        "route.include_in_schema": [
                            306,
                            315
                        ],
                        "route.content_type": [
                            307
                        ],
                        "route.name": [
                            320,
                            308,
                            316
                        ],
                        "routing.Route": [
                            310
                        ],
                        "routing": [
                            318,
                            310
                        ],
                        "self.add_route": [
                            311
                        ],
                        "routing.WebSocketRoute": [
                            318
                        ],
                        "self.add_websocket_route": [
                            319
                        ]
                    },
                    "diff_line_number": 287,
                    "class_data": {
                        "signature": "class APIRouter(routing.Router)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> None:\n    route = APIRoute(path, endpoint=endpoint, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)\n    self.routes.append(route)",
                            "def api_route(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)\n        return func\n    return decorator",
                            "def include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None) -> None:\n    if prefix:\n        assert prefix.startswith('/'), \"A path prefix must start with '/'\"\n        assert not prefix.endswith('/'), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            if responses is None:\n                responses = {}\n            responses = {**responses, **route.responses}\n            self.add_api_route(prefix + route.path, route.endpoint, response_model=route.response_model, status_code=route.status_code, tags=(route.tags or []) + (tags or []), summary=route.summary, description=route.description, response_description=route.response_description, responses=responses, deprecated=route.deprecated, methods=route.methods, operation_id=route.operation_id, include_in_schema=route.include_in_schema, content_type=route.content_type, name=route.name)\n        elif isinstance(route, routing.Route):\n            self.add_route(prefix + route.path, route.endpoint, methods=route.methods, include_in_schema=route.include_in_schema, name=route.name)\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(prefix + route.path, route.endpoint, name=route.name)",
                            "def get(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['GET'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def put(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PUT'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def post(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['POST'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def delete(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['DELETE'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def options(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['OPTIONS'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def head(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['HEAD'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def patch(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['PATCH'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def trace(self, path: str, *, response_model: Type[BaseModel]=None, status_code: int=200, tags: List[str]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, include_in_schema: bool=True, content_type: Type[Response]=JSONResponse, name: str=None) -> Callable:\n    return self.api_route(path=path, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=['TRACE'], operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)",
                            "def decorator(func: Callable) -> Callable:\n    self.add_api_route(path, func, response_model=response_model, status_code=status_code, tags=tags or [], summary=summary, description=description, response_description=response_description, responses=responses or {}, deprecated=deprecated, methods=methods, operation_id=operation_id, include_in_schema=include_in_schema, content_type=content_type, name=name)\n    return func"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "add_api_route(self, path: str, endpoint: Callable) -> None",
                            "api_route(self, path: str) -> Callable",
                            "include_router(self, router: 'APIRouter') -> None",
                            "get(self, path: str) -> Callable",
                            "put(self, path: str) -> Callable",
                            "post(self, path: str) -> Callable",
                            "delete(self, path: str) -> Callable",
                            "options(self, path: str) -> Callable",
                            "head(self, path: str) -> Callable",
                            "patch(self, path: str) -> Callable",
                            "trace(self, path: str) -> Callable",
                            "decorator(func: Callable) -> Callable"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "prefix.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1005322f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "prefix.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1005322f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "router.routes": {
                                    "variable_value": "[<fastapi.routing.APIRoute object at 0x102609430>, <fastapi.routing.APIRoute object at 0x102609640>, <fastapi.routing.APIRoute object at 0x102609850>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "router": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x102601eb0>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "APIRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "responses": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "route.responses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_api_route": {
                                    "variable_value": "<bound method APIRouter.add_api_route of <fastapi.routing.APIRouter object at 0x10205f370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x10205f370>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "route.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.endpoint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.status_code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.tags": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tags": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.operation_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.include_in_schema": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.content_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing.Route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_route": {
                                    "variable_value": "<bound method Router.add_route of <fastapi.routing.APIRouter object at 0x10205f370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "routing.WebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_websocket_route": {
                                    "variable_value": "<bound method Router.add_websocket_route of <fastapi.routing.APIRouter object at 0x10205f370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "prefix.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1005322f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "prefix.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1005322f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "route": {
                                    "variable_value": "<fastapi.routing.APIRoute object at 0x102609850>",
                                    "variable_type": "APIRoute",
                                    "variable_shape": null
                                },
                                "router.routes": {
                                    "variable_value": "[<fastapi.routing.APIRoute object at 0x102609430>, <fastapi.routing.APIRoute object at 0x102609640>, <fastapi.routing.APIRoute object at 0x102609850>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "router": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x102601eb0>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "APIRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "responses": {
                                    "variable_value": "{501: {'description': 'Error 3'}, 502: {'description': 'Error 2'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "route.responses": {
                                    "variable_value": "{501: {'description': 'Error 3'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.add_api_route": {
                                    "variable_value": "<bound method APIRouter.add_api_route of <fastapi.routing.APIRouter object at 0x10205f370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x10205f370>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "route.path": {
                                    "variable_value": "'/c'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "route.endpoint": {
                                    "variable_value": "<function c at 0x10260edc0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "route.response_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.status_code": {
                                    "variable_value": "200",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "route.tags": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "tags": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.summary": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.description": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.response_description": {
                                    "variable_value": "'Successful Response'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "route.deprecated": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.methods": {
                                    "variable_value": "['GET']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "route.operation_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.include_in_schema": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "route.content_type": {
                                    "variable_value": "<class 'starlette.responses.JSONResponse'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "route.name": {
                                    "variable_value": "'c'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "routing.Route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_route": {
                                    "variable_value": "<bound method Router.add_route of <fastapi.routing.APIRouter object at 0x10205f370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "routing.WebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_websocket_route": {
                                    "variable_value": "<bound method Router.add_websocket_route of <fastapi.routing.APIRouter object at 0x10205f370>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "prefix.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1056202f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "prefix.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1056202f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "responses": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "router.routes": {
                                    "variable_value": "[<fastapi.routing.APIRoute object at 0x1076f3490>, <fastapi.routing.APIRoute object at 0x1076f36a0>, <fastapi.routing.APIRoute object at 0x1076f38b0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "router": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x1076ecfd0>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "APIRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "combined_responses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.responses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_api_route": {
                                    "variable_value": "<bound method APIRouter.add_api_route of <fastapi.routing.APIRouter object at 0x1070a8ee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x1070a8ee0>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "route.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.endpoint": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.status_code": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.tags": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tags": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.response_description": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.methods": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.operation_id": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.include_in_schema": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.content_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "route.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing.Route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_route": {
                                    "variable_value": "<bound method Router.add_route of <fastapi.routing.APIRouter object at 0x1070a8ee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "routing.WebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_websocket_route": {
                                    "variable_value": "<bound method Router.add_websocket_route of <fastapi.routing.APIRouter object at 0x1070a8ee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "prefix.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1056202f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "prefix.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1056202f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "responses": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "route": {
                                    "variable_value": "<fastapi.routing.APIRoute object at 0x1076f38b0>",
                                    "variable_type": "APIRoute",
                                    "variable_shape": null
                                },
                                "router.routes": {
                                    "variable_value": "[<fastapi.routing.APIRoute object at 0x1076f3490>, <fastapi.routing.APIRoute object at 0x1076f36a0>, <fastapi.routing.APIRoute object at 0x1076f38b0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "router": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x1076ecfd0>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "APIRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "combined_responses": {
                                    "variable_value": "{501: {'description': 'Error 3'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "route.responses": {
                                    "variable_value": "{501: {'description': 'Error 3'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.add_api_route": {
                                    "variable_value": "<bound method APIRouter.add_api_route of <fastapi.routing.APIRouter object at 0x1070a8ee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.routing.APIRouter object at 0x1070a8ee0>",
                                    "variable_type": "APIRouter",
                                    "variable_shape": null
                                },
                                "route.path": {
                                    "variable_value": "'/c'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "route.endpoint": {
                                    "variable_value": "<function c at 0x1076f8ca0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "route.response_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.status_code": {
                                    "variable_value": "200",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "route.tags": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "tags": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.summary": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.description": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.response_description": {
                                    "variable_value": "'Successful Response'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "route.deprecated": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.methods": {
                                    "variable_value": "['GET']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "route.operation_id": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "route.include_in_schema": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "route.content_type": {
                                    "variable_value": "<class 'starlette.responses.JSONResponse'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "route.name": {
                                    "variable_value": "'c'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "routing.Route": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "routing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_route": {
                                    "variable_value": "<bound method Router.add_route of <fastapi.routing.APIRouter object at 0x1070a8ee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "routing.WebSocketRoute": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.add_websocket_route": {
                                    "variable_value": "<bound method Router.add_websocket_route of <fastapi.routing.APIRouter object at 0x1070a8ee0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def serialize_response(*, field: Field = None, response: Response) -> Any:\n    encoded = jsonable_encoder(response)\n    if field:\n        errors = []\n        value, errors_ = field.validate(encoded, {}, loc=(\"response\",))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors)\n        return jsonable_encoder(value)\n    else:\n        return encoded",
                "def get_app(\n    dependant: Dependant,\n    body_field: Field = None,\n    status_code: int = 200,\n    content_type: Type[Response] = JSONResponse,\n    response_field: Field = None,\n) -> Callable:\n    assert dependant.call is not None, \"dependant.call must me a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(body_field.schema, params.Form)\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    raw_body = await request.form()\n                    form_fields = {}\n                    for field, value in raw_body.items():\n                        form_fields[field] = value\n                    if form_fields:\n                        body = form_fields\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(\"Error getting request body\", e)\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            )\n        values, errors, background_tasks = await solve_dependencies(\n            request=request, dependant=dependant, body=body\n        )\n        if errors:\n            errors_out = ValidationError(errors)\n            raise HTTPException(\n                status_code=HTTP_422_UNPROCESSABLE_ENTITY, detail=errors_out.errors()\n            )\n        else:\n            assert dependant.call is not None, \"dependant.call must me a function\"\n            if is_coroutine:\n                raw_response = await dependant.call(**values)\n            else:\n                raw_response = await run_in_threadpool(dependant.call, **values)\n            if isinstance(raw_response, Response):\n                if raw_response.background is None:\n                    raw_response.background = background_tasks\n                return raw_response\n            response_data = serialize_response(\n                field=response_field, response=raw_response\n            )\n            return content_type(\n                content=response_data,\n                status_code=status_code,\n                background=background_tasks,\n            )\n\n    return app",
                "async def app(request: Request) -> Response:\n    try:\n        body = None\n        if body_field:\n            if is_body_form:\n                raw_body = await request.form()\n                form_fields = {}\n                for field, value in raw_body.items():\n                    form_fields[field] = value\n                if form_fields:\n                    body = form_fields\n            else:\n                body_bytes = await request.body()\n                if body_bytes:\n                    body = await request.json()\n    except Exception as e:\n        logging.error(\"Error getting request body\", e)\n        raise HTTPException(\n            status_code=400, detail=\"There was an error parsing the body\"\n        )\n    values, errors, background_tasks = await solve_dependencies(\n        request=request, dependant=dependant, body=body\n    )\n    if errors:\n        errors_out = ValidationError(errors)\n        raise HTTPException(\n            status_code=HTTP_422_UNPROCESSABLE_ENTITY, detail=errors_out.errors()\n        )\n    else:\n        assert dependant.call is not None, \"dependant.call must me a function\"\n        if is_coroutine:\n            raw_response = await dependant.call(**values)\n        else:\n            raw_response = await run_in_threadpool(dependant.call, **values)\n        if isinstance(raw_response, Response):\n            if raw_response.background is None:\n                raw_response.background = background_tasks\n            return raw_response\n        response_data = serialize_response(\n            field=response_field, response=raw_response\n        )\n        return content_type(\n            content=response_data,\n            status_code=status_code,\n            background=background_tasks,\n        )",
                "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    name: str = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n) -> None:\n    assert path.startswith(\"/\"), \"Routed paths must always start with '/'\"\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.response_model = response_model\n    if self.response_model:\n        assert lenient_issubclass(\n            content_type, JSONResponse\n        ), \"To declare a type the response must be a JSON response\"\n        response_name = \"Response_\" + self.name\n        self.response_field: Optional[Field] = Field(\n            name=response_name,\n            type_=self.response_model,\n            class_validators=[],\n            default=None,\n            required=False,\n            model_config=UnconstrainedConfig,\n            schema=Schema(None),\n        )\n    else:\n        self.response_field = None\n    self.status_code = status_code\n    self.tags = tags or []\n    self.summary = summary\n    self.description = description or self.endpoint.__doc__\n    self.response_description = response_description\n    self.responses = responses or {}\n    response_fields = {}\n    for additional_status_code, response in self.responses.items():\n        assert isinstance(response, dict), \"An additional response must be a dict\"\n        model = response.get(\"model\")\n        if model:\n            assert lenient_issubclass(\n                model, BaseModel\n            ), \"A response model must be a Pydantic model\"\n            response_name = f\"Response_{additional_status_code}_{self.name}\"\n            response_field = Field(\n                name=response_name,\n                type_=model,\n                class_validators=None,\n                default=None,\n                required=False,\n                model_config=UnconstrainedConfig,\n                schema=Schema(None),\n            )\n            response_fields[additional_status_code] = response_field\n    if response_fields:\n        self.response_fields: Dict[Union[int, str], Field] = response_fields\n    else:\n        self.response_fields = {}\n    self.deprecated = deprecated\n    if methods is None:\n        methods = [\"GET\"]\n    self.methods = methods\n    self.operation_id = operation_id\n    self.include_in_schema = include_in_schema\n    self.content_type = content_type\n\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n    assert inspect.isfunction(endpoint) or inspect.ismethod(\n        endpoint\n    ), f\"An endpoint must be a function or method\"\n    self.dependant = get_dependant(path=path, call=self.endpoint)\n    self.body_field = get_body_field(dependant=self.dependant, name=self.name)\n    self.app = request_response(\n        get_app(\n            dependant=self.dependant,\n            body_field=self.body_field,\n            status_code=self.status_code,\n            content_type=self.content_type,\n            response_field=self.response_field,\n        )\n    )",
                "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> None:\n    route = APIRoute(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )\n    self.routes.append(route)",
                "def api_route(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(\n            path,\n            func,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags or [],\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses or {},\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            include_in_schema=include_in_schema,\n            content_type=content_type,\n            name=name,\n        )\n        return func\n\n    return decorator",
                "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            if responses is None:\n                responses = {}\n            responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                include_in_schema=route.include_in_schema,\n                content_type=route.content_type,\n                name=route.name,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=route.methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )",
                "def get(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def put(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def post(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def delete(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def options(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def head(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def patch(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def trace(\n    self,\n    path: str,\n    *,\n    response_model: Type[BaseModel] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    include_in_schema: bool = True,\n    content_type: Type[Response] = JSONResponse,\n    name: str = None,\n) -> Callable:\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )",
                "def decorator(func: Callable) -> Callable:\n    self.add_api_route(\n        path,\n        func,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        include_in_schema=include_in_schema,\n        content_type=content_type,\n        name=name,\n    )\n    return func"
            ],
            "inscope_function_signatures": [
                "serialize_response() -> Any",
                "get_app(dependant: Dependant, body_field: Field=None, status_code: int=200, content_type: Type[Response]=JSONResponse, response_field: Field=None) -> Callable",
                "app(request: Request) -> Response",
                "__init__(self, path: str, endpoint: Callable) -> None",
                "add_api_route(self, path: str, endpoint: Callable) -> None",
                "api_route(self, path: str) -> Callable",
                "include_router(self, router: 'APIRouter') -> None",
                "get(self, path: str) -> Callable",
                "put(self, path: str) -> Callable",
                "post(self, path: str) -> Callable",
                "delete(self, path: str) -> Callable",
                "options(self, path: str) -> Callable",
                "head(self, path: str) -> Callable",
                "patch(self, path: str) -> Callable",
                "trace(self, path: str) -> Callable",
                "decorator(func: Callable) -> Callable"
            ],
            "variables_in_file": {
                "Field": [
                    131,
                    168,
                    42,
                    45,
                    24,
                    157
                ],
                "Response": [
                    439,
                    44,
                    473,
                    337,
                    51,
                    371,
                    85,
                    213,
                    119,
                    24,
                    405,
                    250,
                    507,
                    541,
                    575
                ],
                "encoded": [
                    25,
                    28,
                    37
                ],
                "jsonable_encoder": [
                    25,
                    35
                ],
                "response": [
                    25,
                    149,
                    150,
                    151
                ],
                "field": [
                    26,
                    59,
                    28,
                    58
                ],
                "errors": [
                    32,
                    33,
                    34,
                    71,
                    74,
                    75,
                    27,
                    30
                ],
                "value": [
                    59,
                    58,
                    35,
                    28
                ],
                "errors_": [
                    32,
                    28,
                    29,
                    30,
                    31
                ],
                "field.validate": [
                    28
                ],
                "isinstance": [
                    289,
                    49,
                    85,
                    150,
                    310,
                    29,
                    318,
                    31
                ],
                "ErrorWrapper": [
                    29
                ],
                "errors.append": [
                    30
                ],
                "list": [
                    31
                ],
                "errors.extend": [
                    32
                ],
                "ValidationError": [
                    34,
                    75
                ],
                "Any": [
                    333,
                    537,
                    367,
                    208,
                    113,
                    401,
                    435,
                    245,
                    469,
                    503,
                    24,
                    281,
                    571
                ],
                "Dependant": [
                    41
                ],
                "int": [
                    396,
                    401,
                    532,
                    281,
                    537,
                    168,
                    43,
                    430,
                    435,
                    566,
                    571,
                    328,
                    203,
                    333,
                    208,
                    464,
                    469,
                    362,
                    108,
                    367,
                    240,
                    113,
                    498,
                    245,
                    503
                ],
                "Type": [
                    395,
                    531,
                    405,
                    541,
                    44,
                    429,
                    565,
                    439,
                    575,
                    327,
                    202,
                    463,
                    337,
                    213,
                    473,
                    361,
                    107,
                    239,
                    497,
                    371,
                    119,
                    250,
                    507
                ],
                "JSONResponse": [
                    128,
                    439,
                    44,
                    337,
                    371,
                    213,
                    405,
                    119,
                    473,
                    250,
                    507,
                    541,
                    575
                ],
                "dependant.call": [
                    47,
                    48,
                    80,
                    82,
                    84
                ],
                "dependant": [
                    72,
                    47,
                    48,
                    80,
                    82,
                    84
                ],
                "is_coroutine": [
                    48,
                    81
                ],
                "asyncio.iscoroutinefunction": [
                    48
                ],
                "asyncio": [
                    48
                ],
                "is_body_form": [
                    49,
                    55
                ],
                "body_field": [
                    49,
                    54
                ],
                "body_field.schema": [
                    49
                ],
                "params.Form": [
                    49
                ],
                "params": [
                    49
                ],
                "Request": [
                    51
                ],
                "body": [
                    72,
                    65,
                    61,
                    53
                ],
                "raw_body": [
                    56,
                    58
                ],
                "request.form": [
                    56
                ],
                "request": [
                    56,
                    65,
                    72,
                    63
                ],
                "form_fields": [
                    57,
                    59,
                    60,
                    61
                ],
                "raw_body.items": [
                    58
                ],
                "body_bytes": [
                    64,
                    63
                ],
                "request.body": [
                    63
                ],
                "request.json": [
                    65
                ],
                "Exception": [
                    66
                ],
                "logging.error": [
                    67
                ],
                "logging": [
                    67
                ],
                "e": [
                    67
                ],
                "HTTPException": [
                    68,
                    76
                ],
                "values": [
                    82,
                    84,
                    71
                ],
                "background_tasks": [
                    95,
                    87,
                    71
                ],
                "solve_dependencies": [
                    71
                ],
                "errors_out": [
                    75,
                    77
                ],
                "HTTP_422_UNPROCESSABLE_ENTITY": [
                    77
                ],
                "errors_out.errors": [
                    77
                ],
                "raw_response": [
                    82,
                    84,
                    85,
                    86,
                    87,
                    88,
                    90
                ],
                "run_in_threadpool": [
                    84
                ],
                "raw_response.background": [
                    86,
                    87
                ],
                "response_data": [
                    89,
                    93
                ],
                "serialize_response": [
                    89
                ],
                "response_field": [
                    90,
                    157,
                    166
                ],
                "content_type": [
                    128,
                    353,
                    387,
                    421,
                    230,
                    455,
                    489,
                    523,
                    268,
                    557,
                    591,
                    177,
                    92
                ],
                "status_code": [
                    513,
                    258,
                    547,
                    581,
                    142,
                    343,
                    377,
                    411,
                    220,
                    445,
                    94,
                    479
                ],
                "app": [
                    98
                ],
                "Callable": [
                    509,
                    577,
                    200,
                    105,
                    46,
                    339,
                    373,
                    407,
                    441,
                    475,
                    252,
                    253,
                    543
                ],
                "routing.Route": [
                    101,
                    310
                ],
                "routing": [
                    318,
                    196,
                    101,
                    310
                ],
                "str": [
                    529,
                    533,
                    534,
                    535,
                    536,
                    537,
                    539,
                    542,
                    563,
                    567,
                    568,
                    569,
                    570,
                    571,
                    573,
                    576,
                    104,
                    109,
                    110,
                    111,
                    112,
                    113,
                    115,
                    116,
                    117,
                    168,
                    199,
                    204,
                    205,
                    206,
                    207,
                    208,
                    210,
                    211,
                    214,
                    237,
                    241,
                    242,
                    243,
                    244,
                    245,
                    247,
                    248,
                    251,
                    279,
                    280,
                    281,
                    325,
                    329,
                    330,
                    331,
                    332,
                    333,
                    335,
                    338,
                    359,
                    363,
                    364,
                    365,
                    366,
                    367,
                    369,
                    372,
                    393,
                    397,
                    398,
                    399,
                    400,
                    401,
                    403,
                    406,
                    427,
                    431,
                    432,
                    433,
                    434,
                    435,
                    437,
                    440,
                    461,
                    465,
                    466,
                    467,
                    468,
                    469,
                    471,
                    474,
                    495,
                    499,
                    500,
                    501,
                    502,
                    503,
                    505,
                    508
                ],
                "BaseModel": [
                    327,
                    361,
                    202,
                    107,
                    395,
                    429,
                    239,
                    463,
                    497,
                    531,
                    565,
                    154
                ],
                "List": [
                    567,
                    329,
                    363,
                    204,
                    109,
                    397,
                    431,
                    241,
                    210,
                    465,
                    116,
                    499,
                    533,
                    247,
                    280
                ],
                "Dict": [
                    168,
                    333,
                    537,
                    367,
                    208,
                    113,
                    401,
                    435,
                    245,
                    469,
                    503,
                    281,
                    571
                ],
                "Union": [
                    168,
                    333,
                    537,
                    367,
                    208,
                    113,
                    401,
                    435,
                    245,
                    469,
                    503,
                    281,
                    571
                ],
                "bool": [
                    402,
                    404,
                    538,
                    540,
                    436,
                    438,
                    572,
                    574,
                    334,
                    336,
                    209,
                    212,
                    470,
                    472,
                    368,
                    114,
                    370,
                    118,
                    246,
                    504,
                    249,
                    506
                ],
                "path.startswith": [
                    121
                ],
                "path": [
                    545,
                    579,
                    217,
                    409,
                    511,
                    179,
                    341,
                    183,
                    121,
                    122,
                    443,
                    375,
                    477,
                    255
                ],
                "self.path": [
                    122
                ],
                "self": [
                    130,
                    131,
                    133,
                    510,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    149,
                    408,
                    156,
                    544,
                    293,
                    168,
                    170,
                    171,
                    174,
                    175,
                    176,
                    177,
                    179,
                    183,
                    184,
                    185,
                    311,
                    187,
                    188,
                    189,
                    190,
                    191,
                    319,
                    442,
                    578,
                    340,
                    476,
                    233,
                    374,
                    254,
                    122,
                    123,
                    124,
                    125,
                    126
                ],
                "self.endpoint": [
                    145,
                    123,
                    183
                ],
                "endpoint": [
                    180,
                    181,
                    218,
                    123,
                    124
                ],
                "self.name": [
                    184,
                    156,
                    130,
                    124
                ],
                "name": [
                    354,
                    388,
                    422,
                    231,
                    456,
                    490,
                    524,
                    269,
                    558,
                    592,
                    124
                ],
                "get_name": [
                    124
                ],
                "self.response_model": [
                    125,
                    126,
                    133
                ],
                "response_model": [
                    512,
                    257,
                    546,
                    580,
                    342,
                    376,
                    410,
                    219,
                    444,
                    125,
                    478
                ],
                "lenient_issubclass": [
                    153,
                    127
                ],
                "response_name": [
                    156,
                    130,
                    132,
                    158
                ],
                "self.response_field": [
                    131,
                    141,
                    191
                ],
                "Optional": [
                    131
                ],
                "UnconstrainedConfig": [
                    137,
                    163
                ],
                "Schema": [
                    138,
                    164
                ],
                "self.status_code": [
                    189,
                    142
                ],
                "self.tags": [
                    143
                ],
                "tags": [
                    480,
                    514,
                    259,
                    548,
                    582,
                    298,
                    143,
                    344,
                    378,
                    412,
                    221,
                    446
                ],
                "self.summary": [
                    144
                ],
                "summary": [
                    481,
                    515,
                    260,
                    549,
                    583,
                    144,
                    345,
                    379,
                    413,
                    222,
                    447
                ],
                "self.description": [
                    145
                ],
                "description": [
                    448,
                    482,
                    516,
                    261,
                    550,
                    584,
                    145,
                    346,
                    380,
                    414,
                    223
                ],
                "self.endpoint.__doc__": [
                    145
                ],
                "self.response_description": [
                    146
                ],
                "response_description": [
                    224,
                    449,
                    483,
                    517,
                    262,
                    551,
                    585,
                    146,
                    347,
                    381,
                    415
                ],
                "self.responses": [
                    147,
                    149
                ],
                "responses": [
                    416,
                    225,
                    290,
                    291,
                    292,
                    450,
                    484,
                    263,
                    518,
                    552,
                    586,
                    302,
                    147,
                    348,
                    382
                ],
                "response_fields": [
                    168,
                    148,
                    166,
                    167
                ],
                "additional_status_code": [
                    156,
                    149,
                    166
                ],
                "self.responses.items": [
                    149
                ],
                "dict": [
                    150
                ],
                "model": [
                    152,
                    159,
                    154,
                    151
                ],
                "response.get": [
                    151
                ],
                "self.response_fields": [
                    168,
                    170
                ],
                "self.deprecated": [
                    171
                ],
                "deprecated": [
                    417,
                    226,
                    451,
                    485,
                    519,
                    264,
                    553,
                    171,
                    587,
                    349,
                    383
                ],
                "methods": [
                    227,
                    265,
                    172,
                    173,
                    174
                ],
                "self.methods": [
                    174
                ],
                "self.operation_id": [
                    175
                ],
                "operation_id": [
                    385,
                    419,
                    228,
                    453,
                    487,
                    521,
                    266,
                    555,
                    589,
                    175,
                    351
                ],
                "self.include_in_schema": [
                    176
                ],
                "include_in_schema": [
                    352,
                    386,
                    420,
                    229,
                    454,
                    488,
                    522,
                    267,
                    556,
                    590,
                    176
                ],
                "self.content_type": [
                    177,
                    190
                ],
                "self.path_regex": [
                    179
                ],
                "self.path_format": [
                    179
                ],
                "self.param_convertors": [
                    179
                ],
                "compile_path": [
                    179
                ],
                "inspect.isfunction": [
                    180
                ],
                "inspect": [
                    180
                ],
                "inspect.ismethod": [
                    180
                ],
                "self.dependant": [
                    184,
                    187,
                    183
                ],
                "get_dependant": [
                    183
                ],
                "self.body_field": [
                    184,
                    188
                ],
                "get_body_field": [
                    184
                ],
                "self.app": [
                    185
                ],
                "request_response": [
                    185
                ],
                "get_app": [
                    186
                ],
                "routing.Router": [
                    196
                ],
                "route": [
                    288,
                    289,
                    292,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    310,
                    312,
                    313,
                    314,
                    315,
                    316,
                    318,
                    320,
                    216,
                    233
                ],
                "APIRoute": [
                    216,
                    289
                ],
                "self.routes.append": [
                    233
                ],
                "self.routes": [
                    233
                ],
                "self.add_api_route": [
                    293,
                    254
                ],
                "func": [
                    256,
                    271
                ],
                "decorator": [
                    273
                ],
                "prefix": [
                    320,
                    294,
                    312,
                    283,
                    284,
                    285
                ],
                "prefix.startswith": [
                    284
                ],
                "prefix.endswith": [
                    285
                ],
                "router.routes": [
                    288
                ],
                "router": [
                    288
                ],
                "route.responses": [
                    292
                ],
                "route.path": [
                    312,
                    320,
                    294
                ],
                "route.endpoint": [
                    320,
                    313,
                    295
                ],
                "route.response_model": [
                    296
                ],
                "route.status_code": [
                    297
                ],
                "route.tags": [
                    298
                ],
                "route.summary": [
                    299
                ],
                "route.description": [
                    300
                ],
                "route.response_description": [
                    301
                ],
                "route.deprecated": [
                    303
                ],
                "route.methods": [
                    304,
                    314
                ],
                "route.operation_id": [
                    305
                ],
                "route.include_in_schema": [
                    306,
                    315
                ],
                "route.content_type": [
                    307
                ],
                "route.name": [
                    320,
                    308,
                    316
                ],
                "self.add_route": [
                    311
                ],
                "routing.WebSocketRoute": [
                    318
                ],
                "self.add_websocket_route": [
                    319
                ],
                "self.api_route": [
                    544,
                    578,
                    340,
                    374,
                    408,
                    442,
                    476,
                    510
                ]
            },
            "filtered_variables_in_file": {
                "Field": [
                    131,
                    168,
                    42,
                    45,
                    24,
                    157
                ],
                "Response": [
                    439,
                    44,
                    473,
                    337,
                    51,
                    371,
                    85,
                    213,
                    119,
                    24,
                    405,
                    250,
                    507,
                    541,
                    575
                ],
                "encoded": [
                    25,
                    28,
                    37
                ],
                "jsonable_encoder": [
                    25,
                    35
                ],
                "response": [
                    25,
                    149,
                    150,
                    151
                ],
                "field": [
                    26,
                    59,
                    28,
                    58
                ],
                "errors": [
                    32,
                    33,
                    34,
                    71,
                    74,
                    75,
                    27,
                    30
                ],
                "value": [
                    59,
                    58,
                    35,
                    28
                ],
                "errors_": [
                    32,
                    28,
                    29,
                    30,
                    31
                ],
                "field.validate": [
                    28
                ],
                "ErrorWrapper": [
                    29
                ],
                "errors.append": [
                    30
                ],
                "errors.extend": [
                    32
                ],
                "ValidationError": [
                    34,
                    75
                ],
                "Any": [
                    333,
                    537,
                    367,
                    208,
                    113,
                    401,
                    435,
                    245,
                    469,
                    503,
                    24,
                    281,
                    571
                ],
                "Dependant": [
                    41
                ],
                "Type": [
                    395,
                    531,
                    405,
                    541,
                    44,
                    429,
                    565,
                    439,
                    575,
                    327,
                    202,
                    463,
                    337,
                    213,
                    473,
                    361,
                    107,
                    239,
                    497,
                    371,
                    119,
                    250,
                    507
                ],
                "JSONResponse": [
                    128,
                    439,
                    44,
                    337,
                    371,
                    213,
                    405,
                    119,
                    473,
                    250,
                    507,
                    541,
                    575
                ],
                "dependant.call": [
                    47,
                    48,
                    80,
                    82,
                    84
                ],
                "dependant": [
                    72,
                    47,
                    48,
                    80,
                    82,
                    84
                ],
                "is_coroutine": [
                    48,
                    81
                ],
                "asyncio.iscoroutinefunction": [
                    48
                ],
                "asyncio": [
                    48
                ],
                "is_body_form": [
                    49,
                    55
                ],
                "body_field": [
                    49,
                    54
                ],
                "body_field.schema": [
                    49
                ],
                "params.Form": [
                    49
                ],
                "params": [
                    49
                ],
                "Request": [
                    51
                ],
                "body": [
                    72,
                    65,
                    61,
                    53
                ],
                "raw_body": [
                    56,
                    58
                ],
                "request.form": [
                    56
                ],
                "request": [
                    56,
                    65,
                    72,
                    63
                ],
                "form_fields": [
                    57,
                    59,
                    60,
                    61
                ],
                "raw_body.items": [
                    58
                ],
                "body_bytes": [
                    64,
                    63
                ],
                "request.body": [
                    63
                ],
                "request.json": [
                    65
                ],
                "logging.error": [
                    67
                ],
                "logging": [
                    67
                ],
                "e": [
                    67
                ],
                "HTTPException": [
                    68,
                    76
                ],
                "values": [
                    82,
                    84,
                    71
                ],
                "background_tasks": [
                    95,
                    87,
                    71
                ],
                "solve_dependencies": [
                    71
                ],
                "errors_out": [
                    75,
                    77
                ],
                "HTTP_422_UNPROCESSABLE_ENTITY": [
                    77
                ],
                "errors_out.errors": [
                    77
                ],
                "raw_response": [
                    82,
                    84,
                    85,
                    86,
                    87,
                    88,
                    90
                ],
                "run_in_threadpool": [
                    84
                ],
                "raw_response.background": [
                    86,
                    87
                ],
                "response_data": [
                    89,
                    93
                ],
                "serialize_response": [
                    89
                ],
                "response_field": [
                    90,
                    157,
                    166
                ],
                "content_type": [
                    128,
                    353,
                    387,
                    421,
                    230,
                    455,
                    489,
                    523,
                    268,
                    557,
                    591,
                    177,
                    92
                ],
                "status_code": [
                    513,
                    258,
                    547,
                    581,
                    142,
                    343,
                    377,
                    411,
                    220,
                    445,
                    94,
                    479
                ],
                "app": [
                    98
                ],
                "Callable": [
                    509,
                    577,
                    200,
                    105,
                    46,
                    339,
                    373,
                    407,
                    441,
                    475,
                    252,
                    253,
                    543
                ],
                "routing.Route": [
                    101,
                    310
                ],
                "routing": [
                    318,
                    196,
                    101,
                    310
                ],
                "BaseModel": [
                    327,
                    361,
                    202,
                    107,
                    395,
                    429,
                    239,
                    463,
                    497,
                    531,
                    565,
                    154
                ],
                "List": [
                    567,
                    329,
                    363,
                    204,
                    109,
                    397,
                    431,
                    241,
                    210,
                    465,
                    116,
                    499,
                    533,
                    247,
                    280
                ],
                "Dict": [
                    168,
                    333,
                    537,
                    367,
                    208,
                    113,
                    401,
                    435,
                    245,
                    469,
                    503,
                    281,
                    571
                ],
                "Union": [
                    168,
                    333,
                    537,
                    367,
                    208,
                    113,
                    401,
                    435,
                    245,
                    469,
                    503,
                    281,
                    571
                ],
                "path.startswith": [
                    121
                ],
                "path": [
                    545,
                    579,
                    217,
                    409,
                    511,
                    179,
                    341,
                    183,
                    121,
                    122,
                    443,
                    375,
                    477,
                    255
                ],
                "self.path": [
                    122
                ],
                "self": [
                    130,
                    131,
                    133,
                    510,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    149,
                    408,
                    156,
                    544,
                    293,
                    168,
                    170,
                    171,
                    174,
                    175,
                    176,
                    177,
                    179,
                    183,
                    184,
                    185,
                    311,
                    187,
                    188,
                    189,
                    190,
                    191,
                    319,
                    442,
                    578,
                    340,
                    476,
                    233,
                    374,
                    254,
                    122,
                    123,
                    124,
                    125,
                    126
                ],
                "self.endpoint": [
                    145,
                    123,
                    183
                ],
                "endpoint": [
                    180,
                    181,
                    218,
                    123,
                    124
                ],
                "self.name": [
                    184,
                    156,
                    130,
                    124
                ],
                "name": [
                    354,
                    388,
                    422,
                    231,
                    456,
                    490,
                    524,
                    269,
                    558,
                    592,
                    124
                ],
                "get_name": [
                    124
                ],
                "self.response_model": [
                    125,
                    126,
                    133
                ],
                "response_model": [
                    512,
                    257,
                    546,
                    580,
                    342,
                    376,
                    410,
                    219,
                    444,
                    125,
                    478
                ],
                "lenient_issubclass": [
                    153,
                    127
                ],
                "response_name": [
                    156,
                    130,
                    132,
                    158
                ],
                "self.response_field": [
                    131,
                    141,
                    191
                ],
                "Optional": [
                    131
                ],
                "UnconstrainedConfig": [
                    137,
                    163
                ],
                "Schema": [
                    138,
                    164
                ],
                "self.status_code": [
                    189,
                    142
                ],
                "self.tags": [
                    143
                ],
                "tags": [
                    480,
                    514,
                    259,
                    548,
                    582,
                    298,
                    143,
                    344,
                    378,
                    412,
                    221,
                    446
                ],
                "self.summary": [
                    144
                ],
                "summary": [
                    481,
                    515,
                    260,
                    549,
                    583,
                    144,
                    345,
                    379,
                    413,
                    222,
                    447
                ],
                "self.description": [
                    145
                ],
                "description": [
                    448,
                    482,
                    516,
                    261,
                    550,
                    584,
                    145,
                    346,
                    380,
                    414,
                    223
                ],
                "self.endpoint.__doc__": [
                    145
                ],
                "self.response_description": [
                    146
                ],
                "response_description": [
                    224,
                    449,
                    483,
                    517,
                    262,
                    551,
                    585,
                    146,
                    347,
                    381,
                    415
                ],
                "self.responses": [
                    147,
                    149
                ],
                "responses": [
                    416,
                    225,
                    290,
                    291,
                    292,
                    450,
                    484,
                    263,
                    518,
                    552,
                    586,
                    302,
                    147,
                    348,
                    382
                ],
                "response_fields": [
                    168,
                    148,
                    166,
                    167
                ],
                "additional_status_code": [
                    156,
                    149,
                    166
                ],
                "self.responses.items": [
                    149
                ],
                "model": [
                    152,
                    159,
                    154,
                    151
                ],
                "response.get": [
                    151
                ],
                "self.response_fields": [
                    168,
                    170
                ],
                "self.deprecated": [
                    171
                ],
                "deprecated": [
                    417,
                    226,
                    451,
                    485,
                    519,
                    264,
                    553,
                    171,
                    587,
                    349,
                    383
                ],
                "methods": [
                    227,
                    265,
                    172,
                    173,
                    174
                ],
                "self.methods": [
                    174
                ],
                "self.operation_id": [
                    175
                ],
                "operation_id": [
                    385,
                    419,
                    228,
                    453,
                    487,
                    521,
                    266,
                    555,
                    589,
                    175,
                    351
                ],
                "self.include_in_schema": [
                    176
                ],
                "include_in_schema": [
                    352,
                    386,
                    420,
                    229,
                    454,
                    488,
                    522,
                    267,
                    556,
                    590,
                    176
                ],
                "self.content_type": [
                    177,
                    190
                ],
                "self.path_regex": [
                    179
                ],
                "self.path_format": [
                    179
                ],
                "self.param_convertors": [
                    179
                ],
                "compile_path": [
                    179
                ],
                "inspect.isfunction": [
                    180
                ],
                "inspect": [
                    180
                ],
                "inspect.ismethod": [
                    180
                ],
                "self.dependant": [
                    184,
                    187,
                    183
                ],
                "get_dependant": [
                    183
                ],
                "self.body_field": [
                    184,
                    188
                ],
                "get_body_field": [
                    184
                ],
                "self.app": [
                    185
                ],
                "request_response": [
                    185
                ],
                "get_app": [
                    186
                ],
                "routing.Router": [
                    196
                ],
                "route": [
                    288,
                    289,
                    292,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    310,
                    312,
                    313,
                    314,
                    315,
                    316,
                    318,
                    320,
                    216,
                    233
                ],
                "APIRoute": [
                    216,
                    289
                ],
                "self.routes.append": [
                    233
                ],
                "self.routes": [
                    233
                ],
                "self.add_api_route": [
                    293,
                    254
                ],
                "func": [
                    256,
                    271
                ],
                "decorator": [
                    273
                ],
                "prefix": [
                    320,
                    294,
                    312,
                    283,
                    284,
                    285
                ],
                "prefix.startswith": [
                    284
                ],
                "prefix.endswith": [
                    285
                ],
                "router.routes": [
                    288
                ],
                "router": [
                    288
                ],
                "route.responses": [
                    292
                ],
                "route.path": [
                    312,
                    320,
                    294
                ],
                "route.endpoint": [
                    320,
                    313,
                    295
                ],
                "route.response_model": [
                    296
                ],
                "route.status_code": [
                    297
                ],
                "route.tags": [
                    298
                ],
                "route.summary": [
                    299
                ],
                "route.description": [
                    300
                ],
                "route.response_description": [
                    301
                ],
                "route.deprecated": [
                    303
                ],
                "route.methods": [
                    304,
                    314
                ],
                "route.operation_id": [
                    305
                ],
                "route.include_in_schema": [
                    306,
                    315
                ],
                "route.content_type": [
                    307
                ],
                "route.name": [
                    320,
                    308,
                    316
                ],
                "self.add_route": [
                    311
                ],
                "routing.WebSocketRoute": [
                    318
                ],
                "self.add_websocket_route": [
                    319
                ],
                "self.api_route": [
                    544,
                    578,
                    340,
                    374,
                    408,
                    442,
                    476,
                    510
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/fastapi_13/tests/test_additional_responses_router.py",
                "test_function": "test_openapi_schema",
                "test_function_code": "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == openapi_schema",
                "test_error": "AssertionError: assert {'info': {'title': 'Fast API', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/a': {'get': {'operationId': 'a_a_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'}},\\n                          'summary': 'A Get'}},\\n           '/b': {'get': {'operationId': 'b_b_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'B Get'}},\\n           '/c': {'get': {'operationId': 'c_c_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 3'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'C Get'}}}} == {'info': {'title': 'Fast API', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/a': {'get': {'operationId': 'a_a_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'}},\\n                          'summary': 'A Get'}},\\n           '/b': {'get': {'operationId': 'b_b_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'B Get'}},\\n           '/c': {'get': {'operationId': 'c_c_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 3'}},\\n                          'summary': 'C Get'}}}}   Common items:   {'info': {'title': 'Fast API', 'version': '0.1.0'}, 'openapi': '3.0.2'}   Differing items:   {'paths': {'/a': {'get': {'operationId': 'a_a_get', 'responses': {'200': {'content': {...}, 'description': 'Successful...: 'Successful Response'}, '501': {'description': 'Error 3'}, '502': {'description': 'Error 2'}}, 'summary': 'C Get'}}}} != {'paths': {'/a': {'get': {'operationId': 'a_a_get', 'responses': {'200': {'content': {...}, 'description': 'Successful...': {'content': {...}, 'description': 'Successful Response'}, '501': {'description': 'Error 3'}}, 'summary': 'C Get'}}}}   Full diff:     {      'info': {'title': 'Fast API',               'version': '0.1.0'},      'openapi': '3.0.2',      'paths': {'/a': {'get': {'operationId': 'a_a_get',                               'responses': {'200': {'content': {'application/json': {'schema': {}}},                                                     'description': 'Successful '                                                                    'Response'},                                             '501': {'description': 'Error 1'}},                               'summary': 'A Get'}},                '/b': {'get': {'operationId': 'b_b_get',                               'responses': {'200': {'content': {'application/json': {'schema': {}}},                                                     'description': 'Successful '                                                                    'Response'},   +                                         '501': {'description': 'Error 1'},                                             '502': {'description': 'Error 2'}},                               'summary': 'B Get'}},                '/c': {'get': {'operationId': 'c_c_get',                               'responses': {'200': {'content': {'application/json': {'schema': {}}},                                                     'description': 'Successful '                                                                    'Response'},   -                                         '501': {'description': 'Error 3'}},   ?                                                                          -   +                                         '501': {'description': 'Error 3'},   +                                         '502': {'description': 'Error 2'}},                               'summary': 'C Get'}}},     }",
                "full_test_error": "def test_openapi_schema():\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200\n>       assert response.json() == openapi_schema\nE       AssertionError: assert {'info': {'title': 'Fast API', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/a': {'get': {'operationId': 'a_a_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'}},\\n                          'summary': 'A Get'}},\\n           '/b': {'get': {'operationId': 'b_b_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'B Get'}},\\n           '/c': {'get': {'operationId': 'c_c_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 3'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'C Get'}}}} == {'info': {'title': 'Fast API', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/a': {'get': {'operationId': 'a_a_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'}},\\n                          'summary': 'A Get'}},\\n           '/b': {'get': {'operationId': 'b_b_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'B Get'}},\\n           '/c': {'get': {'operationId': 'c_c_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 3'}},\\n                          'summary': 'C Get'}}}}\nE         Common items:\nE         {'info': {'title': 'Fast API', 'version': '0.1.0'}, 'openapi': '3.0.2'}\nE         Differing items:\nE         {'paths': {'/a': {'get': {'operationId': 'a_a_get', 'responses': {'200': {'content': {...}, 'description': 'Successful...: 'Successful Response'}, '501': {'description': 'Error 3'}, '502': {'description': 'Error 2'}}, 'summary': 'C Get'}}}} != {'paths': {'/a': {'get': {'operationId': 'a_a_get', 'responses': {'200': {'content': {...}, 'description': 'Successful...': {'content': {...}, 'description': 'Successful Response'}, '501': {'description': 'Error 3'}}, 'summary': 'C Get'}}}}\nE         Full diff:\nE           {\nE            'info': {'title': 'Fast API',\nE                     'version': '0.1.0'},\nE            'openapi': '3.0.2',\nE            'paths': {'/a': {'get': {'operationId': 'a_a_get',\nE                                     'responses': {'200': {'content': {'application/json': {'schema': {}}},\nE                                                           'description': 'Successful '\nE                                                                          'Response'},\nE                                                   '501': {'description': 'Error 1'}},\nE                                     'summary': 'A Get'}},\nE                      '/b': {'get': {'operationId': 'b_b_get',\nE                                     'responses': {'200': {'content': {'application/json': {'schema': {}}},\nE                                                           'description': 'Successful '\nE                                                                          'Response'},\nE         +                                         '501': {'description': 'Error 1'},\nE                                                   '502': {'description': 'Error 2'}},\nE                                     'summary': 'B Get'}},\nE                      '/c': {'get': {'operationId': 'c_c_get',\nE                                     'responses': {'200': {'content': {'application/json': {'schema': {}}},\nE                                                           'description': 'Successful '\nE                                                                          'Response'},\nE         -                                         '501': {'description': 'Error 3'}},\nE         ?                                                                          -\nE         +                                         '501': {'description': 'Error 3'},\nE         +                                         '502': {'description': 'Error 2'}},\nE                                     'summary': 'C Get'}}},\nE           }\n\ntests/test_additional_responses_router.py:77: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}