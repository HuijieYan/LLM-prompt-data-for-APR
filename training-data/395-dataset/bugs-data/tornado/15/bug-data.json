{
    "tornado:15": {
        "/Volumes/SSD2T/bgp_envs/repos/tornado_15/setup.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "\"static/dir/index.html\",\n            \"templates/utf8.html\",",
                    "start_line": 149,
                    "end_line": 150
                }
            ],
            "inscope_functions": [
                "def run(self):\n    try:\n        build_ext.run(self)\n    except Exception:\n        e = sys.exc_info()[1]\n        sys.stdout.write('%s\\n' % str(e))\n        warnings.warn(self.warning_message % (\"Extension modules\",\n                                              \"There was an issue with \"\n                                              \"your platform configuration\"\n                                              \" - see above.\"))",
                "def build_extension(self, ext):\n    name = ext.name\n    try:\n        build_ext.build_extension(self, ext)\n    except Exception:\n        e = sys.exc_info()[1]\n        sys.stdout.write('%s\\n' % str(e))\n        warnings.warn(self.warning_message % (\"The %s extension \"\n                                              \"module\" % (name,),\n                                              \"The output above \"\n                                              \"this warning shows how \"\n                                              \"the compilation \"\n                                              \"failed.\"))"
            ],
            "inscope_function_signatures": [
                "run(self)",
                "build_extension(self, ext)"
            ],
            "variables_in_file": {
                "ImportError": [
                    26
                ],
                "setuptools": [
                    122,
                    27
                ],
                "build_ext": [
                    88,
                    76,
                    39
                ],
                "warning_message": [
                    45
                ],
                "build_ext.run": [
                    76
                ],
                "self": [
                    80,
                    88,
                    76,
                    92
                ],
                "Exception": [
                    89,
                    77
                ],
                "e": [
                    90,
                    91,
                    78,
                    79
                ],
                "sys.exc_info": [
                    90,
                    78
                ],
                "sys": [
                    78,
                    79,
                    90,
                    91,
                    125,
                    127
                ],
                "sys.stdout.write": [
                    91,
                    79
                ],
                "sys.stdout": [
                    91,
                    79
                ],
                "str": [
                    91,
                    79
                ],
                "warnings.warn": [
                    80,
                    92
                ],
                "warnings": [
                    80,
                    92
                ],
                "self.warning_message": [
                    80,
                    92
                ],
                "name": [
                    93,
                    86
                ],
                "ext.name": [
                    86
                ],
                "ext": [
                    88,
                    86
                ],
                "build_ext.build_extension": [
                    88
                ],
                "kwargs": [
                    100,
                    132,
                    105,
                    172,
                    111,
                    119
                ],
                "version": [
                    136,
                    102
                ],
                "open": [
                    104
                ],
                "f": [
                    104,
                    105
                ],
                "f.read": [
                    105
                ],
                "platform.python_implementation": [
                    107
                ],
                "platform": [
                    107
                ],
                "os.environ.get": [
                    116,
                    108
                ],
                "os.environ": [
                    116,
                    108
                ],
                "os": [
                    116,
                    108
                ],
                "Extension": [
                    112
                ],
                "custom_build_ext": [
                    119
                ],
                "install_requires": [
                    132,
                    131,
                    124,
                    126
                ],
                "sys.version_info": [
                    125,
                    127
                ],
                "install_requires.append": [
                    131,
                    126
                ],
                "setup": [
                    134
                ]
            },
            "filtered_variables_in_file": {
                "setuptools": [
                    122,
                    27
                ],
                "build_ext": [
                    88,
                    76,
                    39
                ],
                "warning_message": [
                    45
                ],
                "build_ext.run": [
                    76
                ],
                "self": [
                    80,
                    88,
                    76,
                    92
                ],
                "e": [
                    90,
                    91,
                    78,
                    79
                ],
                "sys.exc_info": [
                    90,
                    78
                ],
                "sys": [
                    78,
                    79,
                    90,
                    91,
                    125,
                    127
                ],
                "sys.stdout.write": [
                    91,
                    79
                ],
                "sys.stdout": [
                    91,
                    79
                ],
                "warnings.warn": [
                    80,
                    92
                ],
                "warnings": [
                    80,
                    92
                ],
                "self.warning_message": [
                    80,
                    92
                ],
                "name": [
                    93,
                    86
                ],
                "ext.name": [
                    86
                ],
                "ext": [
                    88,
                    86
                ],
                "build_ext.build_extension": [
                    88
                ],
                "kwargs": [
                    100,
                    132,
                    105,
                    172,
                    111,
                    119
                ],
                "version": [
                    136,
                    102
                ],
                "f": [
                    104,
                    105
                ],
                "f.read": [
                    105
                ],
                "platform.python_implementation": [
                    107
                ],
                "platform": [
                    107
                ],
                "os.environ.get": [
                    116,
                    108
                ],
                "os.environ": [
                    116,
                    108
                ],
                "os": [
                    116,
                    108
                ],
                "Extension": [
                    112
                ],
                "custom_build_ext": [
                    119
                ],
                "install_requires": [
                    132,
                    131,
                    124,
                    126
                ],
                "sys.version_info": [
                    125,
                    127
                ],
                "install_requires.append": [
                    131,
                    126
                ],
                "setup": [
                    134
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/tornado_15/tornado/web.py": {
            "buggy_functions": [
                {
                    "function_name": "validate_absolute_path",
                    "function_code": "def validate_absolute_path(self, root, absolute_path):\n    \"\"\"Validate and return the absolute path.\n\n    ``root`` is the configured path for the `StaticFileHandler`,\n    and ``path`` is the result of `get_absolute_path`\n\n    This is an instance method called during request processing,\n    so it may raise `HTTPError` or use methods like\n    `RequestHandler.redirect` (return None after redirecting to\n    halt further processing).  This is where 404 errors for missing files\n    are generated.\n\n    This method may modify the path before returning it, but note that\n    any such modifications will not be understood by `make_static_url`.\n\n    In instance methods, this method's result is available as\n    ``self.absolute_path``.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    root = os.path.abspath(root)\n    # os.path.abspath strips a trailing /\n    # it needs to be temporarily added back for requests to root/\n    if not (absolute_path + os.path.sep).startswith(root):\n        raise HTTPError(403, \"%s is not in root static directory\",\n                        self.path)\n    if (os.path.isdir(absolute_path) and\n            self.default_filename is not None):\n        # need to look at the request.path here for when path is empty\n        # but there is some prefix to the path that was already\n        # trimmed by the routing\n        if not self.request.path.endswith(\"/\"):\n            self.redirect(self.request.path + \"/\", permanent=True)\n            return\n        absolute_path = os.path.join(absolute_path, self.default_filename)\n    if not os.path.exists(absolute_path):\n        raise HTTPError(404)\n    if not os.path.isfile(absolute_path):\n        raise HTTPError(403, \"%s is not a file\", self.path)\n    return absolute_path\n",
                    "decorators": [],
                    "docstring": "Validate and return the absolute path.\n\n``root`` is the configured path for the `StaticFileHandler`,\nand ``path`` is the result of `get_absolute_path`\n\nThis is an instance method called during request processing,\nso it may raise `HTTPError` or use methods like\n`RequestHandler.redirect` (return None after redirecting to\nhalt further processing).  This is where 404 errors for missing files\nare generated.\n\nThis method may modify the path before returning it, but note that\nany such modifications will not be understood by `make_static_url`.\n\nIn instance methods, this method's result is available as\n``self.absolute_path``.\n\n.. versionadded:: 3.1",
                    "start_line": 2359,
                    "end_line": 2398,
                    "variables": {
                        "root": [
                            2379,
                            2382
                        ],
                        "os.path.abspath": [
                            2379
                        ],
                        "os.path": [
                            2379,
                            2382,
                            2385,
                            2393,
                            2394,
                            2396
                        ],
                        "os": [
                            2379,
                            2382,
                            2385,
                            2393,
                            2394,
                            2396
                        ],
                        "startswith": [
                            2382
                        ],
                        "absolute_path": [
                            2382,
                            2385,
                            2393,
                            2394,
                            2396,
                            2398
                        ],
                        "os.path.sep": [
                            2382
                        ],
                        "HTTPError": [
                            2395,
                            2397,
                            2383
                        ],
                        "self.path": [
                            2384,
                            2397
                        ],
                        "self": [
                            2384,
                            2386,
                            2390,
                            2391,
                            2393,
                            2397
                        ],
                        "os.path.isdir": [
                            2385
                        ],
                        "self.default_filename": [
                            2393,
                            2386
                        ],
                        "self.request.path.endswith": [
                            2390
                        ],
                        "self.request.path": [
                            2390,
                            2391
                        ],
                        "self.request": [
                            2390,
                            2391
                        ],
                        "self.redirect": [
                            2391
                        ],
                        "os.path.join": [
                            2393
                        ],
                        "os.path.exists": [
                            2394
                        ],
                        "os.path.isfile": [
                            2396
                        ]
                    },
                    "filtered_variables": {
                        "root": [
                            2379,
                            2382
                        ],
                        "os.path.abspath": [
                            2379
                        ],
                        "os.path": [
                            2379,
                            2382,
                            2385,
                            2393,
                            2394,
                            2396
                        ],
                        "os": [
                            2379,
                            2382,
                            2385,
                            2393,
                            2394,
                            2396
                        ],
                        "startswith": [
                            2382
                        ],
                        "absolute_path": [
                            2382,
                            2385,
                            2393,
                            2394,
                            2396,
                            2398
                        ],
                        "os.path.sep": [
                            2382
                        ],
                        "HTTPError": [
                            2395,
                            2397,
                            2383
                        ],
                        "self.path": [
                            2384,
                            2397
                        ],
                        "self": [
                            2384,
                            2386,
                            2390,
                            2391,
                            2393,
                            2397
                        ],
                        "os.path.isdir": [
                            2385
                        ],
                        "self.default_filename": [
                            2393,
                            2386
                        ],
                        "self.request.path.endswith": [
                            2390
                        ],
                        "self.request.path": [
                            2390,
                            2391
                        ],
                        "self.request": [
                            2390,
                            2391
                        ],
                        "self.redirect": [
                            2391
                        ],
                        "os.path.join": [
                            2393
                        ],
                        "os.path.exists": [
                            2394
                        ],
                        "os.path.isfile": [
                            2396
                        ]
                    },
                    "diff_line_number": 2379,
                    "class_data": {
                        "signature": "class StaticFileHandler(RequestHandler)",
                        "docstring": "A simple handler that can serve static content from a directory.\n\nA `StaticFileHandler` is configured automatically if you pass the\n``static_path`` keyword argument to `Application`.  This handler\ncan be customized with the ``static_url_prefix``, ``static_handler_class``,\nand ``static_handler_args`` settings.\n\nTo map an additional path to this handler for a static data directory\nyou would add a line to your application like::\n\n    application = web.Application([\n        (r\"/content/(.*)\", web.StaticFileHandler, {\"path\": \"/var/www\"}),\n    ])\n\nThe handler constructor requires a ``path`` argument, which specifies the\nlocal root directory of the content to be served.\n\nNote that a capture group in the regex is required to parse the value for\nthe ``path`` argument to the get() method (different than the constructor\nargument above); see `URLSpec` for details.\n\nTo maximize the effectiveness of browser caching, this class supports\nversioned urls (by default using the argument ``?v=``).  If a version\nis given, we instruct the browser to cache this file indefinitely.\n`make_static_url` (also available as `RequestHandler.static_url`) can\nbe used to construct a versioned url.\n\nThis handler is intended primarily for use in development and light-duty\nfile serving; for heavy traffic it will be more efficient to use\na dedicated static file server (such as nginx or Apache).  We support\nthe HTTP ``Accept-Ranges`` mechanism to return partial content (because\nsome browsers require this functionality to be present to seek in\nHTML5 audio or video), but this handler should not be used with\nfiles that are too large to fit comfortably in memory.\n\n**Subclassing notes**\n\nThis class is designed to be extensible by subclassing, but because\nof the way static urls are generated with class methods rather than\ninstance methods, the inheritance patterns are somewhat unusual.\nBe sure to use the ``@classmethod`` decorator when overriding a\nclass method.  Instance methods may use the attributes ``self.path``\n``self.absolute_path``, and ``self.modified``.\n\nSubclasses should only override methods discussed in this section;\noverriding other methods is error-prone.  Overriding\n``StaticFileHandler.get`` is particularly problematic due to the\ntight coupling with ``compute_etag`` and other methods.\n\nTo change the way static urls are generated (e.g. to match the behavior\nof another server or CDN), override `make_static_url`, `parse_url_path`,\n`get_cache_time`, and/or `get_version`.\n\nTo replace all interaction with the filesystem (e.g. to serve\nstatic content from a database), override `get_content`,\n`get_content_size`, `get_modified_time`, `get_absolute_path`, and\n`validate_absolute_path`.\n\n.. versionchanged:: 3.1\n   Many of the methods for subclasses were added in Tornado 3.1.",
                        "constructor_docstring": null,
                        "functions": [
                            "def initialize(self, path, default_filename=None):\n    self.root = path\n    self.default_filename = default_filename",
                            "@classmethod\ndef reset(cls):\n    with cls._lock:\n        cls._static_hashes = {}",
                            "def head(self, path):\n    return self.get(path, include_body=False)",
                            "@gen.coroutine\ndef get(self, path, include_body=True):\n    self.path = self.parse_url_path(path)\n    del path\n    absolute_path = self.get_absolute_path(self.root, self.path)\n    self.absolute_path = self.validate_absolute_path(self.root, absolute_path)\n    if self.absolute_path is None:\n        return\n    self.modified = self.get_modified_time()\n    self.set_headers()\n    if self.should_return_304():\n        self.set_status(304)\n        return\n    request_range = None\n    range_header = self.request.headers.get('Range')\n    if range_header:\n        request_range = httputil._parse_request_range(range_header)\n    size = self.get_content_size()\n    if request_range:\n        start, end = request_range\n        if start is not None and start >= size or end == 0:\n            self.set_status(416)\n            self.set_header('Content-Type', 'text/plain')\n            self.set_header('Content-Range', 'bytes */%s' % (size,))\n            return\n        if start is not None and start < 0:\n            start += size\n        if end is not None and end > size:\n            end = size\n        if size != (end or size) - (start or 0):\n            self.set_status(206)\n            self.set_header('Content-Range', httputil._get_content_range(start, end, size))\n    else:\n        start = end = None\n    if start is not None and end is not None:\n        content_length = end - start\n    elif end is not None:\n        content_length = end\n    elif start is not None:\n        content_length = size - start\n    else:\n        content_length = size\n    self.set_header('Content-Length', content_length)\n    if include_body:\n        content = self.get_content(self.absolute_path, start, end)\n        if isinstance(content, bytes):\n            content = [content]\n        for chunk in content:\n            try:\n                self.write(chunk)\n                yield self.flush()\n            except iostream.StreamClosedError:\n                return\n    else:\n        assert self.request.method == 'HEAD'",
                            "def compute_etag(self):\n    \"\"\"Sets the ``Etag`` header based on static url version.\n\n    This allows efficient ``If-None-Match`` checks against cached\n    versions, and sends the correct ``Etag`` for a partial response\n    (i.e. the same ``Etag`` as the full file).\n\n    .. versionadded:: 3.1\n    \"\"\"\n    version_hash = self._get_cached_version(self.absolute_path)\n    if not version_hash:\n        return None\n    return '\"%s\"' % (version_hash,)",
                            "def set_headers(self):\n    \"\"\"Sets the content and caching headers on the response.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    self.set_header('Accept-Ranges', 'bytes')\n    self.set_etag_header()\n    if self.modified is not None:\n        self.set_header('Last-Modified', self.modified)\n    content_type = self.get_content_type()\n    if content_type:\n        self.set_header('Content-Type', content_type)\n    cache_time = self.get_cache_time(self.path, self.modified, content_type)\n    if cache_time > 0:\n        self.set_header('Expires', datetime.datetime.utcnow() + datetime.timedelta(seconds=cache_time))\n        self.set_header('Cache-Control', 'max-age=' + str(cache_time))\n    self.set_extra_headers(self.path)",
                            "def should_return_304(self):\n    \"\"\"Returns True if the headers indicate that we should return 304.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    if self.check_etag_header():\n        return True\n    ims_value = self.request.headers.get('If-Modified-Since')\n    if ims_value is not None:\n        date_tuple = email.utils.parsedate(ims_value)\n        if date_tuple is not None:\n            if_since = datetime.datetime(*date_tuple[:6])\n            if if_since >= self.modified:\n                return True\n    return False",
                            "@classmethod\ndef get_absolute_path(cls, root, path):\n    \"\"\"Returns the absolute location of ``path`` relative to ``root``.\n\n    ``root`` is the path configured for this `StaticFileHandler`\n    (in most cases the ``static_path`` `Application` setting).\n\n    This class method may be overridden in subclasses.  By default\n    it returns a filesystem path, but other strings may be used\n    as long as they are unique and understood by the subclass's\n    overridden `get_content`.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    abspath = os.path.abspath(os.path.join(root, path))\n    return abspath",
                            "def validate_absolute_path(self, root, absolute_path):\n    \"\"\"Validate and return the absolute path.\n\n    ``root`` is the configured path for the `StaticFileHandler`,\n    and ``path`` is the result of `get_absolute_path`\n\n    This is an instance method called during request processing,\n    so it may raise `HTTPError` or use methods like\n    `RequestHandler.redirect` (return None after redirecting to\n    halt further processing).  This is where 404 errors for missing files\n    are generated.\n\n    This method may modify the path before returning it, but note that\n    any such modifications will not be understood by `make_static_url`.\n\n    In instance methods, this method's result is available as\n    ``self.absolute_path``.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    root = os.path.abspath(root)\n    if not (absolute_path + os.path.sep).startswith(root):\n        raise HTTPError(403, '%s is not in root static directory', self.path)\n    if os.path.isdir(absolute_path) and self.default_filename is not None:\n        if not self.request.path.endswith('/'):\n            self.redirect(self.request.path + '/', permanent=True)\n            return\n        absolute_path = os.path.join(absolute_path, self.default_filename)\n    if not os.path.exists(absolute_path):\n        raise HTTPError(404)\n    if not os.path.isfile(absolute_path):\n        raise HTTPError(403, '%s is not a file', self.path)\n    return absolute_path",
                            "@classmethod\ndef get_content(cls, abspath, start=None, end=None):\n    \"\"\"Retrieve the content of the requested resource which is located\n    at the given absolute path.\n\n    This class method may be overridden by subclasses.  Note that its\n    signature is different from other overridable class methods\n    (no ``settings`` argument); this is deliberate to ensure that\n    ``abspath`` is able to stand on its own as a cache key.\n\n    This method should either return a byte string or an iterator\n    of byte strings.  The latter is preferred for large files\n    as it helps reduce memory fragmentation.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    with open(abspath, 'rb') as file:\n        if start is not None:\n            file.seek(start)\n        if end is not None:\n            remaining = end - (start or 0)\n        else:\n            remaining = None\n        while True:\n            chunk_size = 64 * 1024\n            if remaining is not None and remaining < chunk_size:\n                chunk_size = remaining\n            chunk = file.read(chunk_size)\n            if chunk:\n                if remaining is not None:\n                    remaining -= len(chunk)\n                yield chunk\n            else:\n                if remaining is not None:\n                    assert remaining == 0\n                return",
                            "@classmethod\ndef get_content_version(cls, abspath):\n    \"\"\"Returns a version string for the resource at the given path.\n\n    This class method may be overridden by subclasses.  The\n    default implementation is a hash of the file's contents.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    data = cls.get_content(abspath)\n    hasher = hashlib.md5()\n    if isinstance(data, bytes):\n        hasher.update(data)\n    else:\n        for chunk in data:\n            hasher.update(chunk)\n    return hasher.hexdigest()",
                            "def _stat(self):\n    if not hasattr(self, '_stat_result'):\n        self._stat_result = os.stat(self.absolute_path)\n    return self._stat_result",
                            "def get_content_size(self):\n    \"\"\"Retrieve the total size of the resource at the given path.\n\n    This method may be overridden by subclasses.\n\n    .. versionadded:: 3.1\n\n    .. versionchanged:: 4.0\n       This method is now always called, instead of only when\n       partial results are requested.\n    \"\"\"\n    stat_result = self._stat()\n    return stat_result[stat.ST_SIZE]",
                            "def get_modified_time(self):\n    \"\"\"Returns the time that ``self.absolute_path`` was last modified.\n\n    May be overridden in subclasses.  Should return a `~datetime.datetime`\n    object or None.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    stat_result = self._stat()\n    modified = datetime.datetime.utcfromtimestamp(stat_result[stat.ST_MTIME])\n    return modified",
                            "def get_content_type(self):\n    \"\"\"Returns the ``Content-Type`` header to be used for this request.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    mime_type, encoding = mimetypes.guess_type(self.absolute_path)\n    return mime_type",
                            "def set_extra_headers(self, path):\n    \"\"\"For subclass to add extra headers to the response\"\"\"\n    pass",
                            "def get_cache_time(self, path, modified, mime_type):\n    \"\"\"Override to customize cache control behavior.\n\n    Return a positive number of seconds to make the result\n    cacheable for that amount of time or 0 to mark resource as\n    cacheable for an unspecified amount of time (subject to\n    browser heuristics).\n\n    By default returns cache expiry of 10 years for resources requested\n    with ``v`` argument.\n    \"\"\"\n    return self.CACHE_MAX_AGE if 'v' in self.request.arguments else 0",
                            "@classmethod\ndef make_static_url(cls, settings, path, include_version=True):\n    \"\"\"Constructs a versioned url for the given path.\n\n    This method may be overridden in subclasses (but note that it\n    is a class method rather than an instance method).  Subclasses\n    are only required to implement the signature\n    ``make_static_url(cls, settings, path)``; other keyword\n    arguments may be passed through `~RequestHandler.static_url`\n    but are not standard.\n\n    ``settings`` is the `Application.settings` dictionary.  ``path``\n    is the static path being requested.  The url returned should be\n    relative to the current host.\n\n    ``include_version`` determines whether the generated URL should\n    include the query string containing the version hash of the\n    file corresponding to the given ``path``.\n\n    \"\"\"\n    url = settings.get('static_url_prefix', '/static/') + path\n    if not include_version:\n        return url\n    version_hash = cls.get_version(settings, path)\n    if not version_hash:\n        return url\n    return '%s?v=%s' % (url, version_hash)",
                            "def parse_url_path(self, url_path):\n    \"\"\"Converts a static URL path into a filesystem path.\n\n    ``url_path`` is the path component of the URL with\n    ``static_url_prefix`` removed.  The return value should be\n    filesystem path relative to ``static_path``.\n\n    This is the inverse of `make_static_url`.\n    \"\"\"\n    if os.path.sep != '/':\n        url_path = url_path.replace('/', os.path.sep)\n    return url_path",
                            "@classmethod\ndef get_version(cls, settings, path):\n    \"\"\"Generate the version string to be used in static URLs.\n\n    ``settings`` is the `Application.settings` dictionary and ``path``\n    is the relative location of the requested asset on the filesystem.\n    The returned value should be a string, or ``None`` if no version\n    could be determined.\n\n    .. versionchanged:: 3.1\n       This method was previously recommended for subclasses to override;\n       `get_content_version` is now preferred as it allows the base\n       class to handle caching of the result.\n    \"\"\"\n    abs_path = cls.get_absolute_path(settings['static_path'], path)\n    return cls._get_cached_version(abs_path)",
                            "@classmethod\ndef _get_cached_version(cls, abs_path):\n    with cls._lock:\n        hashes = cls._static_hashes\n        if abs_path not in hashes:\n            try:\n                hashes[abs_path] = cls.get_content_version(abs_path)\n            except Exception:\n                gen_log.error('Could not open static file %r', abs_path)\n                hashes[abs_path] = None\n        hsh = hashes.get(abs_path)\n        if hsh:\n            return hsh\n    return None"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "CACHE_MAX_AGE",
                            "_static_hashes",
                            "_lock"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "initialize(self, path, default_filename=None)",
                            "reset(cls)",
                            "head(self, path)",
                            "get(self, path, include_body=True)",
                            "compute_etag(self)",
                            "set_headers(self)",
                            "should_return_304(self)",
                            "get_absolute_path(cls, root, path)",
                            "validate_absolute_path(self, root, absolute_path)",
                            "get_content(cls, abspath, start=None, end=None)",
                            "get_content_version(cls, abspath)",
                            "_stat(self)",
                            "get_content_size(self)",
                            "get_modified_time(self)",
                            "get_content_type(self)",
                            "set_extra_headers(self, path)",
                            "get_cache_time(self, path, modified, mime_type)",
                            "make_static_url(cls, settings, path, include_version=True)",
                            "parse_url_path(self, url_path)",
                            "get_version(cls, settings, path)",
                            "_get_cached_version(cls, abs_path)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "root": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/tornado_15/tornado/test/static'",
                                    "variable_type": "str",
                                    "variable_shape": "60"
                                },
                                "os.path.abspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "absolute_path": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/tornado_15/tornado/test/static_foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "68"
                                },
                                "os.path.sep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTPError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.path": {
                                    "variable_value": "'../static_foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "self": {
                                    "variable_value": "<tornado.web.StaticFileHandler object at 0x10b438610>",
                                    "variable_type": "StaticFileHandler",
                                    "variable_shape": null
                                },
                                "os.path.isdir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.default_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.request.path.endswith": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.request.path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "HTTPServerRequest(protocol='http', host='localhost:55429', method='GET', uri='/static/../static_foo.txt', version='HTTP/1.1', remote_ip='127.0.0.1', headers={'Connection': 'close', 'Host': 'localhost:55429', 'Accept-Encoding': 'gzip'})",
                                    "variable_type": "HTTPServerRequest",
                                    "variable_shape": null
                                },
                                "self.redirect": {
                                    "variable_value": "<bound method RequestHandler.redirect of <tornado.web.StaticFileHandler object at 0x10b438610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "root": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/tornado_15/tornado/test/static'",
                                    "variable_type": "str",
                                    "variable_shape": "60"
                                },
                                "os.path.abspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.sep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "absolute_path": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/tornado_15/tornado/test/static_foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "68"
                                },
                                "HTTPError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.path": {
                                    "variable_value": "'../static_foo.txt'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "self": {
                                    "variable_value": "<tornado.web.StaticFileHandler object at 0x10f292510>",
                                    "variable_type": "StaticFileHandler",
                                    "variable_shape": null
                                },
                                "os.path.isdir": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.default_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.request.path.endswith": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.request.path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.request": {
                                    "variable_value": "HTTPServerRequest(protocol='http', host='localhost:55432', method='GET', uri='/static/../static_foo.txt', version='HTTP/1.1', remote_ip='127.0.0.1', headers={'Connection': 'close', 'Host': 'localhost:55432', 'Accept-Encoding': 'gzip'})",
                                    "variable_type": "HTTPServerRequest",
                                    "variable_shape": null
                                },
                                "self.redirect": {
                                    "variable_value": "<bound method RequestHandler.redirect of <tornado.web.StaticFileHandler object at 0x10f292510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.exists": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.isfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def asynchronous(method):\n    \"\"\"Wrap request handler methods with this if they are asynchronous.\n\n    This decorator is for callback-style asynchronous methods; for\n    coroutines, use the ``@gen.coroutine`` decorator without\n    ``@asynchronous``. (It is legal for legacy reasons to use the two\n    decorators together provided ``@asynchronous`` is first, but\n    ``@asynchronous`` will be ignored in this case)\n\n    This decorator should only be applied to the :ref:`HTTP verb\n    methods <verbs>`; its behavior is undefined for any other method.\n    This decorator does not *make* a method asynchronous; it tells\n    the framework that the method *is* asynchronous.  For this decorator\n    to be useful the method must (at least sometimes) do something\n    asynchronous.\n\n    If this decorator is given, the response is not finished when the\n    method returns. It is up to the request handler to call\n    `self.finish() <RequestHandler.finish>` to finish the HTTP\n    request. Without this decorator, the request is automatically\n    finished when the ``get()`` or ``post()`` method returns. Example:\n\n    .. testcode::\n\n       class MyRequestHandler(RequestHandler):\n           @asynchronous\n           def get(self):\n              http = httpclient.AsyncHTTPClient()\n              http.fetch(\"http://friendfeed.com/\", self._on_download)\n\n           def _on_download(self, response):\n              self.write(\"Downloaded!\")\n              self.finish()\n\n    .. testoutput::\n       :hide:\n\n    .. versionadded:: 3.1\n       The ability to use ``@gen.coroutine`` without ``@asynchronous``.\n\n    \"\"\"\n    # Delay the IOLoop import because it's not available on app engine.\n    from tornado.ioloop import IOLoop\n\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self._auto_finish = False\n        with stack_context.ExceptionStackContext(\n                self._stack_context_handle_exception):\n            result = method(self, *args, **kwargs)\n            if is_future(result):\n                # If @asynchronous is used with @gen.coroutine, (but\n                # not @gen.engine), we can automatically finish the\n                # request when the future resolves.  Additionally,\n                # the Future will swallow any exceptions so we need\n                # to throw them back out to the stack context to finish\n                # the request.\n                def future_complete(f):\n                    f.result()\n                    if not self._finished:\n                        self.finish()\n                IOLoop.current().add_future(result, future_complete)\n                # Once we have done this, hide the Future from our\n                # caller (i.e. RequestHandler._when_complete), which\n                # would otherwise set up its own callback and\n                # exception handler (resulting in exceptions being\n                # logged twice).\n                return None\n            return result\n    return wrapper",
                "def stream_request_body(cls):\n    \"\"\"Apply to `RequestHandler` subclasses to enable streaming body support.\n\n    This decorator implies the following changes:\n\n    * `.HTTPServerRequest.body` is undefined, and body arguments will not\n      be included in `RequestHandler.get_argument`.\n    * `RequestHandler.prepare` is called when the request headers have been\n      read instead of after the entire body has been read.\n    * The subclass must define a method ``data_received(self, data):``, which\n      will be called zero or more times as data is available.  Note that\n      if the request has an empty body, ``data_received`` may not be called.\n    * ``prepare`` and ``data_received`` may return Futures (such as via\n      ``@gen.coroutine``, in which case the next method will not be called\n      until those futures have completed.\n    * The regular HTTP method (``post``, ``put``, etc) will be called after\n      the entire body has been read.\n\n    There is a subtle interaction between ``data_received`` and asynchronous\n    ``prepare``: The first call to ``data_received`` may occur at any point\n    after the call to ``prepare`` has returned *or yielded*.\n    \"\"\"\n    if not issubclass(cls, RequestHandler):\n        raise TypeError(\"expected subclass of RequestHandler, got %r\", cls)\n    cls._stream_request_body = True\n    return cls",
                "def _has_stream_request_body(cls):\n    if not issubclass(cls, RequestHandler):\n        raise TypeError(\"expected subclass of RequestHandler, got %r\", cls)\n    return getattr(cls, '_stream_request_body', False)",
                "def removeslash(method):\n    \"\"\"Use this decorator to remove trailing slashes from the request path.\n\n    For example, a request to ``/foo/`` would redirect to ``/foo`` with this\n    decorator. Your request handler mapping should use a regular expression\n    like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endswith(\"/\"):\n            if self.request.method in (\"GET\", \"HEAD\"):\n                uri = self.request.path.rstrip(\"/\")\n                if uri:  # don't try to redirect '/' to ''\n                    if self.request.query:\n                        uri += \"?\" + self.request.query\n                    self.redirect(uri, permanent=True)\n                    return\n            else:\n                raise HTTPError(404)\n        return method(self, *args, **kwargs)\n    return wrapper",
                "def addslash(method):\n    \"\"\"Use this decorator to add a missing trailing slash to the request path.\n\n    For example, a request to ``/foo`` would redirect to ``/foo/`` with this\n    decorator. Your request handler mapping should use a regular expression\n    like ``r'/foo/?'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            if self.request.method in (\"GET\", \"HEAD\"):\n                uri = self.request.path + \"/\"\n                if self.request.query:\n                    uri += \"?\" + self.request.query\n                self.redirect(uri, permanent=True)\n                return\n            raise HTTPError(404)\n        return method(self, *args, **kwargs)\n    return wrapper",
                "def authenticated(method):\n    \"\"\"Decorate methods with this to require that the user be logged in.\n\n    If the user is not logged in, they will be redirected to the configured\n    `login url <RequestHandler.get_login_url>`.\n\n    If you configure a login url with a query parameter, Tornado will\n    assume you know what you're doing and use it as-is.  If not, it\n    will add a `next` parameter so the login page knows where to send\n    you once you're logged in.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.current_user:\n            if self.request.method in (\"GET\", \"HEAD\"):\n                url = self.get_login_url()\n                if \"?\" not in url:\n                    if urlparse.urlsplit(url).scheme:\n                        # if login url is absolute, make next absolute too\n                        next_url = self.request.full_url()\n                    else:\n                        next_url = self.request.uri\n                    url += \"?\" + urlencode(dict(next=next_url))\n                self.redirect(url)\n                return\n            raise HTTPError(403)\n        return method(self, *args, **kwargs)\n    return wrapper",
                "def create_signed_value(secret, name, value, version=None, clock=None,\n                        key_version=None):\n    if version is None:\n        version = DEFAULT_SIGNED_VALUE_VERSION\n    if clock is None:\n        clock = time.time\n\n    timestamp = utf8(str(int(clock())))\n    value = base64.b64encode(utf8(value))\n    if version == 1:\n        signature = _create_signature_v1(secret, name, value, timestamp)\n        value = b\"|\".join([value, timestamp, signature])\n        return value\n    elif version == 2:\n        # The v2 format consists of a version number and a series of\n        # length-prefixed fields \"%d:%s\", the last of which is a\n        # signature, all separated by pipes.  All numbers are in\n        # decimal format with no leading zeros.  The signature is an\n        # HMAC-SHA256 of the whole string up to that point, including\n        # the final pipe.\n        #\n        # The fields are:\n        # - format version (i.e. 2; no length prefix)\n        # - key version (integer, default is 0)\n        # - timestamp (integer seconds since epoch)\n        # - name (not encoded; assumed to be ~alphanumeric)\n        # - value (base64-encoded)\n        # - signature (hex-encoded; no length prefix)\n        def format_field(s):\n            return utf8(\"%d:\" % len(s)) + utf8(s)\n        to_sign = b\"|\".join([\n            b\"2\",\n            format_field(str(key_version or 0)),\n            format_field(timestamp),\n            format_field(name),\n            format_field(value),\n            b''])\n\n        if isinstance(secret, dict):\n            assert key_version is not None, 'Key version must be set when sign key dict is used'\n            assert version >= 2, 'Version must be at least 2 for key version support'\n            secret = secret[key_version]\n\n        signature = _create_signature_v2(secret, to_sign)\n        return to_sign + signature\n    else:\n        raise ValueError(\"Unsupported version %d\" % version)",
                "def _get_version(value):\n    # Figures out what version value is.  Version 1 did not include an\n    # explicit version field and started with arbitrary base64 data,\n    # which makes this tricky.\n    m = _signed_value_version_re.match(value)\n    if m is None:\n        version = 1\n    else:\n        try:\n            version = int(m.group(1))\n            if version > 999:\n                # Certain payloads from the version-less v1 format may\n                # be parsed as valid integers.  Due to base64 padding\n                # restrictions, this can only happen for numbers whose\n                # length is a multiple of 4, so we can treat all\n                # numbers up to 999 as versions, and for the rest we\n                # fall back to v1 format.\n                version = 1\n        except ValueError:\n            version = 1\n    return version",
                "def decode_signed_value(secret, name, value, max_age_days=31,\n                        clock=None, min_version=None):\n    if clock is None:\n        clock = time.time\n    if min_version is None:\n        min_version = DEFAULT_SIGNED_VALUE_MIN_VERSION\n    if min_version > 2:\n        raise ValueError(\"Unsupported min_version %d\" % min_version)\n    if not value:\n        return None\n\n    value = utf8(value)\n    version = _get_version(value)\n\n    if version < min_version:\n        return None\n    if version == 1:\n        return _decode_signed_value_v1(secret, name, value,\n                                       max_age_days, clock)\n    elif version == 2:\n        return _decode_signed_value_v2(secret, name, value,\n                                       max_age_days, clock)\n    else:\n        return None",
                "def _decode_signed_value_v1(secret, name, value, max_age_days, clock):\n    parts = utf8(value).split(b\"|\")\n    if len(parts) != 3:\n        return None\n    signature = _create_signature_v1(secret, name, parts[0], parts[1])\n    if not _time_independent_equals(parts[2], signature):\n        gen_log.warning(\"Invalid cookie signature %r\", value)\n        return None\n    timestamp = int(parts[1])\n    if timestamp < clock() - max_age_days * 86400:\n        gen_log.warning(\"Expired cookie %r\", value)\n        return None\n    if timestamp > clock() + 31 * 86400:\n        # _cookie_signature does not hash a delimiter between the\n        # parts of the cookie, so an attacker could transfer trailing\n        # digits from the payload to the timestamp without altering the\n        # signature.  For backwards compatibility, sanity-check timestamp\n        # here instead of modifying _cookie_signature.\n        gen_log.warning(\"Cookie timestamp in future; possible tampering %r\",\n                        value)\n        return None\n    if parts[1].startswith(b\"0\"):\n        gen_log.warning(\"Tampered cookie %r\", value)\n        return None\n    try:\n        return base64.b64decode(parts[0])\n    except Exception:\n        return None",
                "def _decode_fields_v2(value):\n    def _consume_field(s):\n        length, _, rest = s.partition(b':')\n        n = int(length)\n        field_value = rest[:n]\n        # In python 3, indexing bytes returns small integers; we must\n        # use a slice to get a byte string as in python 2.\n        if rest[n:n + 1] != b'|':\n            raise ValueError(\"malformed v2 signed value field\")\n        rest = rest[n + 1:]\n        return field_value, rest\n\n    rest = value[2:]  # remove version number\n    key_version, rest = _consume_field(rest)\n    timestamp, rest = _consume_field(rest)\n    name_field, rest = _consume_field(rest)\n    value_field, passed_sig = _consume_field(rest)\n    return int(key_version), timestamp, name_field, value_field, passed_sig",
                "def _decode_signed_value_v2(secret, name, value, max_age_days, clock):\n    try:\n        key_version, timestamp, name_field, value_field, passed_sig = _decode_fields_v2(value)\n    except ValueError:\n        return None\n    signed_string = value[:-len(passed_sig)]\n\n    if isinstance(secret, dict):\n        try:\n            secret = secret[key_version]\n        except KeyError:\n            return None\n\n    expected_sig = _create_signature_v2(secret, signed_string)\n    if not _time_independent_equals(passed_sig, expected_sig):\n        return None\n    if name_field != utf8(name):\n        return None\n    timestamp = int(timestamp)\n    if timestamp < clock() - max_age_days * 86400:\n        # The signature has expired.\n        return None\n    try:\n        return base64.b64decode(value_field)\n    except Exception:\n        return None",
                "def get_signature_key_version(value):\n    value = utf8(value)\n    version = _get_version(value)\n    if version < 2:\n        return None\n    try:\n        key_version, _, _, _, _ = _decode_fields_v2(value)\n    except ValueError:\n        return None\n\n    return key_version",
                "def _create_signature_v1(secret, *parts):\n    hash = hmac.new(utf8(secret), digestmod=hashlib.sha1)\n    for part in parts:\n        hash.update(utf8(part))\n    return utf8(hash.hexdigest())",
                "def _create_signature_v2(secret, s):\n    hash = hmac.new(utf8(secret), digestmod=hashlib.sha256)\n    hash.update(utf8(s))\n    return utf8(hash.hexdigest())",
                "def _unquote_or_none(s):\n    \"\"\"None-safe wrapper around url_unescape to handle unamteched optional\n    groups correctly.\n\n    Note that args are passed as bytes so the handler can decide what\n    encoding to use.\n    \"\"\"\n    if s is None:\n        return s\n    return escape.url_unescape(s, encoding=None, plus=False)",
                "def __init__(self, application, request, **kwargs):\n    super(RequestHandler, self).__init__()\n\n    self.application = application\n    self.request = request\n    self._headers_written = False\n    self._finished = False\n    self._auto_finish = True\n    self._transforms = None  # will be set in _execute\n    self._prepared_future = None\n    self.path_args = None\n    self.path_kwargs = None\n    self.ui = ObjectDict((n, self._ui_method(m)) for n, m in\n                         application.ui_methods.items())\n    # UIModules are available as both `modules` and `_tt_modules` in the\n    # template namespace.  Historically only `modules` was available\n    # but could be clobbered by user additions to the namespace.\n    # The template {% module %} directive looks in `_tt_modules` to avoid\n    # possible conflicts.\n    self.ui[\"_tt_modules\"] = _UIModuleNamespace(self,\n                                                application.ui_modules)\n    self.ui[\"modules\"] = self.ui[\"_tt_modules\"]\n    self.clear()\n    self.request.connection.set_close_callback(self.on_connection_close)\n    self.initialize(**kwargs)",
                "def initialize(self):\n    \"\"\"Hook for subclass initialization.\n\n    A dictionary passed as the third argument of a url spec will be\n    supplied as keyword arguments to initialize().\n\n    Example::\n\n        class ProfileHandler(RequestHandler):\n            def initialize(self, database):\n                self.database = database\n\n            def get(self, username):\n                ...\n\n        app = Application([\n            (r'/user/(.*)', ProfileHandler, dict(database=database)),\n            ])\n    \"\"\"\n    pass",
                "@property\ndef settings(self):\n    \"\"\"An alias for `self.application.settings <Application.settings>`.\"\"\"\n    return self.application.settings",
                "def head(self, *args, **kwargs):\n    raise HTTPError(405)",
                "def get(self, *args, **kwargs):\n    raise HTTPError(405)",
                "def post(self, *args, **kwargs):\n    raise HTTPError(405)",
                "def delete(self, *args, **kwargs):\n    raise HTTPError(405)",
                "def patch(self, *args, **kwargs):\n    raise HTTPError(405)",
                "def put(self, *args, **kwargs):\n    raise HTTPError(405)",
                "def options(self, *args, **kwargs):\n    raise HTTPError(405)",
                "def prepare(self):\n    \"\"\"Called at the beginning of a request before  `get`/`post`/etc.\n\n    Override this method to perform common initialization regardless\n    of the request method.\n\n    Asynchronous support: Decorate this method with `.gen.coroutine`\n    or `.return_future` to make it asynchronous (the\n    `asynchronous` decorator cannot be used on `prepare`).\n    If this method returns a `.Future` execution will not proceed\n    until the `.Future` is done.\n\n    .. versionadded:: 3.1\n       Asynchronous support.\n    \"\"\"\n    pass",
                "def on_finish(self):\n    \"\"\"Called after the end of a request.\n\n    Override this method to perform cleanup, logging, etc.\n    This method is a counterpart to `prepare`.  ``on_finish`` may\n    not produce any output, as it is called after the response\n    has been sent to the client.\n    \"\"\"\n    pass",
                "def on_connection_close(self):\n    \"\"\"Called in async handlers if the client closed the connection.\n\n    Override this to clean up resources associated with\n    long-lived connections.  Note that this method is called only if\n    the connection was closed during asynchronous processing; if you\n    need to do cleanup after every request override `on_finish`\n    instead.\n\n    Proxies may keep a connection open for a time (perhaps\n    indefinitely) after the client has gone away, so this method\n    may not be called promptly after the end user closes their\n    connection.\n    \"\"\"\n    if _has_stream_request_body(self.__class__):\n        if not self.request.body.done():\n            self.request.body.set_exception(iostream.StreamClosedError())\n            self.request.body.exception()",
                "def clear(self):\n    \"\"\"Resets all headers and content for this response.\"\"\"\n    self._headers = httputil.HTTPHeaders({\n        \"Server\": \"TornadoServer/%s\" % tornado.version,\n        \"Content-Type\": \"text/html; charset=UTF-8\",\n        \"Date\": httputil.format_timestamp(time.time()),\n    })\n    self.set_default_headers()\n    self._write_buffer = []\n    self._status_code = 200\n    self._reason = httputil.responses[200]",
                "def set_default_headers(self):\n    \"\"\"Override this to set HTTP headers at the beginning of the request.\n\n    For example, this is the place to set a custom ``Server`` header.\n    Note that setting such headers in the normal flow of request\n    processing may not do what you want, since headers may be reset\n    during error handling.\n    \"\"\"\n    pass",
                "def set_status(self, status_code, reason=None):\n    \"\"\"Sets the status code for our response.\n\n    :arg int status_code: Response status code. If ``reason`` is ``None``,\n        it must be present in `httplib.responses <http.client.responses>`.\n    :arg string reason: Human-readable reason phrase describing the status\n        code. If ``None``, it will be filled in from\n        `httplib.responses <http.client.responses>`.\n    \"\"\"\n    self._status_code = status_code\n    if reason is not None:\n        self._reason = escape.native_str(reason)\n    else:\n        try:\n            self._reason = httputil.responses[status_code]\n        except KeyError:\n            raise ValueError(\"unknown status code %d\", status_code)",
                "def get_status(self):\n    \"\"\"Returns the status code for our response.\"\"\"\n    return self._status_code",
                "def set_header(self, name, value):\n    \"\"\"Sets the given response header name and value.\n\n    If a datetime is given, we automatically format it according to the\n    HTTP specification. If the value is not a string, we convert it to\n    a string. All header values are then encoded as UTF-8.\n    \"\"\"\n    self._headers[name] = self._convert_header_value(value)",
                "def add_header(self, name, value):\n    \"\"\"Adds the given response header and value.\n\n    Unlike `set_header`, `add_header` may be called multiple times\n    to return multiple values for the same header.\n    \"\"\"\n    self._headers.add(name, self._convert_header_value(value))",
                "def clear_header(self, name):\n    \"\"\"Clears an outgoing header, undoing a previous `set_header` call.\n\n    Note that this method does not apply to multi-valued headers\n    set by `add_header`.\n    \"\"\"\n    if name in self._headers:\n        del self._headers[name]",
                "def _convert_header_value(self, value):\n    if isinstance(value, bytes):\n        pass\n    elif isinstance(value, unicode_type):\n        value = value.encode('utf-8')\n    elif isinstance(value, numbers.Integral):\n        # return immediately since we know the converted value will be safe\n        return str(value)\n    elif isinstance(value, datetime.datetime):\n        return httputil.format_timestamp(value)\n    else:\n        raise TypeError(\"Unsupported header value %r\" % value)\n    # If \\n is allowed into the header, it is possible to inject\n    # additional headers or split the request. Also cap length to\n    # prevent obviously erroneous values.\n    if (len(value) > 4000 or\n            RequestHandler._INVALID_HEADER_CHAR_RE.search(value)):\n        raise ValueError(\"Unsafe header value %r\", value)\n    return value",
                "def get_argument(self, name, default=_ARG_DEFAULT, strip=True):\n    \"\"\"Returns the value of the argument with the given name.\n\n    If default is not provided, the argument is considered to be\n    required, and we raise a `MissingArgumentError` if it is missing.\n\n    If the argument appears in the url more than once, we return the\n    last value.\n\n    The returned value is always unicode.\n    \"\"\"\n    return self._get_argument(name, default, self.request.arguments, strip)",
                "def get_arguments(self, name, strip=True):\n    \"\"\"Returns a list of the arguments with the given name.\n\n    If the argument is not present, returns an empty list.\n\n    The returned values are always unicode.\n    \"\"\"\n\n    # Make sure `get_arguments` isn't accidentally being called with a\n    # positional argument that's assumed to be a default (like in\n    # `get_argument`.)\n    assert isinstance(strip, bool)\n\n    return self._get_arguments(name, self.request.arguments, strip)",
                "def get_body_argument(self, name, default=_ARG_DEFAULT, strip=True):\n    \"\"\"Returns the value of the argument with the given name\n    from the request body.\n\n    If default is not provided, the argument is considered to be\n    required, and we raise a `MissingArgumentError` if it is missing.\n\n    If the argument appears in the url more than once, we return the\n    last value.\n\n    The returned value is always unicode.\n\n    .. versionadded:: 3.2\n    \"\"\"\n    return self._get_argument(name, default, self.request.body_arguments,\n                              strip)",
                "def get_body_arguments(self, name, strip=True):\n    \"\"\"Returns a list of the body arguments with the given name.\n\n    If the argument is not present, returns an empty list.\n\n    The returned values are always unicode.\n\n    .. versionadded:: 3.2\n    \"\"\"\n    return self._get_arguments(name, self.request.body_arguments, strip)",
                "def get_query_argument(self, name, default=_ARG_DEFAULT, strip=True):\n    \"\"\"Returns the value of the argument with the given name\n    from the request query string.\n\n    If default is not provided, the argument is considered to be\n    required, and we raise a `MissingArgumentError` if it is missing.\n\n    If the argument appears in the url more than once, we return the\n    last value.\n\n    The returned value is always unicode.\n\n    .. versionadded:: 3.2\n    \"\"\"\n    return self._get_argument(name, default,\n                              self.request.query_arguments, strip)",
                "def get_query_arguments(self, name, strip=True):\n    \"\"\"Returns a list of the query arguments with the given name.\n\n    If the argument is not present, returns an empty list.\n\n    The returned values are always unicode.\n\n    .. versionadded:: 3.2\n    \"\"\"\n    return self._get_arguments(name, self.request.query_arguments, strip)",
                "def _get_argument(self, name, default, source, strip=True):\n    args = self._get_arguments(name, source, strip=strip)\n    if not args:\n        if default is self._ARG_DEFAULT:\n            raise MissingArgumentError(name)\n        return default\n    return args[-1]",
                "def _get_arguments(self, name, source, strip=True):\n    values = []\n    for v in source.get(name, []):\n        v = self.decode_argument(v, name=name)\n        if isinstance(v, unicode_type):\n            # Get rid of any weird control chars (unless decoding gave\n            # us bytes, in which case leave it alone)\n            v = RequestHandler._remove_control_chars_regex.sub(\" \", v)\n        if strip:\n            v = v.strip()\n        values.append(v)\n    return values",
                "def decode_argument(self, value, name=None):\n    \"\"\"Decodes an argument from the request.\n\n    The argument has been percent-decoded and is now a byte string.\n    By default, this method decodes the argument as utf-8 and returns\n    a unicode string, but this may be overridden in subclasses.\n\n    This method is used as a filter for both `get_argument()` and for\n    values extracted from the url and passed to `get()`/`post()`/etc.\n\n    The name of the argument is provided if known, but may be None\n    (e.g. for unnamed groups in the url regex).\n    \"\"\"\n    try:\n        return _unicode(value)\n    except UnicodeDecodeError:\n        raise HTTPError(400, \"Invalid unicode in %s: %r\" %\n                        (name or \"url\", value[:40]))",
                "@property\ndef cookies(self):\n    \"\"\"An alias for\n    `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.\"\"\"\n    return self.request.cookies",
                "def get_cookie(self, name, default=None):\n    \"\"\"Gets the value of the cookie with the given name, else default.\"\"\"\n    if self.request.cookies is not None and name in self.request.cookies:\n        return self.request.cookies[name].value\n    return default",
                "def set_cookie(self, name, value, domain=None, expires=None, path=\"/\",\n               expires_days=None, **kwargs):\n    \"\"\"Sets the given cookie name/value with the given options.\n\n    Additional keyword arguments are set on the Cookie.Morsel\n    directly.\n    See http://docs.python.org/library/cookie.html#morsel-objects\n    for available attributes.\n    \"\"\"\n    # The cookie library only accepts type str, in both python 2 and 3\n    name = escape.native_str(name)\n    value = escape.native_str(value)\n    if re.search(r\"[\\x00-\\x20]\", name + value):\n        # Don't let us accidentally inject bad stuff\n        raise ValueError(\"Invalid cookie %r: %r\" % (name, value))\n    if not hasattr(self, \"_new_cookie\"):\n        self._new_cookie = Cookie.SimpleCookie()\n    if name in self._new_cookie:\n        del self._new_cookie[name]\n    self._new_cookie[name] = value\n    morsel = self._new_cookie[name]\n    if domain:\n        morsel[\"domain\"] = domain\n    if expires_days is not None and not expires:\n        expires = datetime.datetime.utcnow() + datetime.timedelta(\n            days=expires_days)\n    if expires:\n        morsel[\"expires\"] = httputil.format_timestamp(expires)\n    if path:\n        morsel[\"path\"] = path\n    for k, v in kwargs.items():\n        if k == 'max_age':\n            k = 'max-age'\n\n        # skip falsy values for httponly and secure flags because\n        # SimpleCookie sets them regardless\n        if k in ['httponly', 'secure'] and not v:\n            continue\n\n        morsel[k] = v",
                "def clear_cookie(self, name, path=\"/\", domain=None):\n    \"\"\"Deletes the cookie with the given name.\n\n    Due to limitations of the cookie protocol, you must pass the same\n    path and domain to clear a cookie as were used when that cookie\n    was set (but there is no way to find out on the server side\n    which values were used for a given cookie).\n    \"\"\"\n    expires = datetime.datetime.utcnow() - datetime.timedelta(days=365)\n    self.set_cookie(name, value=\"\", path=path, expires=expires,\n                    domain=domain)",
                "def clear_all_cookies(self, path=\"/\", domain=None):\n    \"\"\"Deletes all the cookies the user sent with this request.\n\n    See `clear_cookie` for more information on the path and domain\n    parameters.\n\n    .. versionchanged:: 3.2\n\n       Added the ``path`` and ``domain`` parameters.\n    \"\"\"\n    for name in self.request.cookies:\n        self.clear_cookie(name, path=path, domain=domain)",
                "def set_secure_cookie(self, name, value, expires_days=30, version=None,\n                      **kwargs):\n    \"\"\"Signs and timestamps a cookie so it cannot be forged.\n\n    You must specify the ``cookie_secret`` setting in your Application\n    to use this method. It should be a long, random sequence of bytes\n    to be used as the HMAC secret for the signature.\n\n    To read a cookie set with this method, use `get_secure_cookie()`.\n\n    Note that the ``expires_days`` parameter sets the lifetime of the\n    cookie in the browser, but is independent of the ``max_age_days``\n    parameter to `get_secure_cookie`.\n\n    Secure cookies may contain arbitrary byte values, not just unicode\n    strings (unlike regular cookies)\n\n    .. versionchanged:: 3.2.1\n\n       Added the ``version`` argument.  Introduced cookie version 2\n       and made it the default.\n    \"\"\"\n    self.set_cookie(name, self.create_signed_value(name, value,\n                                                   version=version),\n                    expires_days=expires_days, **kwargs)",
                "def create_signed_value(self, name, value, version=None):\n    \"\"\"Signs and timestamps a string so it cannot be forged.\n\n    Normally used via set_secure_cookie, but provided as a separate\n    method for non-cookie uses.  To decode a value not stored\n    as a cookie use the optional value argument to get_secure_cookie.\n\n    .. versionchanged:: 3.2.1\n\n       Added the ``version`` argument.  Introduced cookie version 2\n       and made it the default.\n    \"\"\"\n    self.require_setting(\"cookie_secret\", \"secure cookies\")\n    secret = self.application.settings[\"cookie_secret\"]\n    key_version = None\n    if isinstance(secret, dict):\n        if self.application.settings.get(\"key_version\") is None:\n            raise Exception(\"key_version setting must be used for secret_key dicts\")\n        key_version = self.application.settings[\"key_version\"]\n\n    return create_signed_value(secret, name, value, version=version,\n                               key_version=key_version)",
                "def get_secure_cookie(self, name, value=None, max_age_days=31,\n                      min_version=None):\n    \"\"\"Returns the given signed cookie if it validates, or None.\n\n    The decoded cookie value is returned as a byte string (unlike\n    `get_cookie`).\n\n    .. versionchanged:: 3.2.1\n\n       Added the ``min_version`` argument.  Introduced cookie version 2;\n       both versions 1 and 2 are accepted by default.\n    \"\"\"\n    self.require_setting(\"cookie_secret\", \"secure cookies\")\n    if value is None:\n        value = self.get_cookie(name)\n    return decode_signed_value(self.application.settings[\"cookie_secret\"],\n                               name, value, max_age_days=max_age_days,\n                               min_version=min_version)",
                "def get_secure_cookie_key_version(self, name, value=None):\n    \"\"\"Returns the signing key version of the secure cookie.\n\n    The version is returned as int.\n    \"\"\"\n    self.require_setting(\"cookie_secret\", \"secure cookies\")\n    if value is None:\n        value = self.get_cookie(name)\n    return get_signature_key_version(value)",
                "def redirect(self, url, permanent=False, status=None):\n    \"\"\"Sends a redirect to the given (optionally relative) URL.\n\n    If the ``status`` argument is specified, that value is used as the\n    HTTP status code; otherwise either 301 (permanent) or 302\n    (temporary) is chosen based on the ``permanent`` argument.\n    The default is 302 (temporary).\n    \"\"\"\n    if self._headers_written:\n        raise Exception(\"Cannot redirect after headers have been written\")\n    if status is None:\n        status = 301 if permanent else 302\n    else:\n        assert isinstance(status, int) and 300 <= status <= 399\n    self.set_status(status)\n    self.set_header(\"Location\", utf8(url))\n    self.finish()",
                "def write(self, chunk):\n    \"\"\"Writes the given chunk to the output buffer.\n\n    To write the output to the network, use the flush() method below.\n\n    If the given chunk is a dictionary, we write it as JSON and set\n    the Content-Type of the response to be ``application/json``.\n    (if you want to send JSON as a different ``Content-Type``, call\n    set_header *after* calling write()).\n\n    Note that lists are not converted to JSON because of a potential\n    cross-site security vulnerability.  All JSON output should be\n    wrapped in a dictionary.  More details at\n    http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and\n    https://github.com/facebook/tornado/issues/1009\n    \"\"\"\n    if self._finished:\n        raise RuntimeError(\"Cannot write() after finish()\")\n    if not isinstance(chunk, (bytes, unicode_type, dict)):\n        message = \"write() only accepts bytes, unicode, and dict objects\"\n        if isinstance(chunk, list):\n            message += \". Lists not accepted for security reasons; see http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler.write\"\n        raise TypeError(message)\n    if isinstance(chunk, dict):\n        chunk = escape.json_encode(chunk)\n        self.set_header(\"Content-Type\", \"application/json; charset=UTF-8\")\n    chunk = utf8(chunk)\n    self._write_buffer.append(chunk)",
                "def render(self, template_name, **kwargs):\n    \"\"\"Renders the template with the given arguments as the response.\"\"\"\n    html = self.render_string(template_name, **kwargs)\n\n    # Insert the additional JS and CSS added by the modules on the page\n    js_embed = []\n    js_files = []\n    css_embed = []\n    css_files = []\n    html_heads = []\n    html_bodies = []\n    for module in getattr(self, \"_active_modules\", {}).values():\n        embed_part = module.embedded_javascript()\n        if embed_part:\n            js_embed.append(utf8(embed_part))\n        file_part = module.javascript_files()\n        if file_part:\n            if isinstance(file_part, (unicode_type, bytes)):\n                js_files.append(file_part)\n            else:\n                js_files.extend(file_part)\n        embed_part = module.embedded_css()\n        if embed_part:\n            css_embed.append(utf8(embed_part))\n        file_part = module.css_files()\n        if file_part:\n            if isinstance(file_part, (unicode_type, bytes)):\n                css_files.append(file_part)\n            else:\n                css_files.extend(file_part)\n        head_part = module.html_head()\n        if head_part:\n            html_heads.append(utf8(head_part))\n        body_part = module.html_body()\n        if body_part:\n            html_bodies.append(utf8(body_part))\n\n    def is_absolute(path):\n        return any(path.startswith(x) for x in [\"/\", \"http:\", \"https:\"])\n    if js_files:\n        # Maintain order of JavaScript files given by modules\n        paths = []\n        unique_paths = set()\n        for path in js_files:\n            if not is_absolute(path):\n                path = self.static_url(path)\n            if path not in unique_paths:\n                paths.append(path)\n                unique_paths.add(path)\n        js = ''.join('<script src=\"' + escape.xhtml_escape(p) +\n                     '\" type=\"text/javascript\"></script>'\n                     for p in paths)\n        sloc = html.rindex(b'</body>')\n        html = html[:sloc] + utf8(js) + b'\\n' + html[sloc:]\n    if js_embed:\n        js = b'<script type=\"text/javascript\">\\n//<![CDATA[\\n' + \\\n            b'\\n'.join(js_embed) + b'\\n//]]>\\n</script>'\n        sloc = html.rindex(b'</body>')\n        html = html[:sloc] + js + b'\\n' + html[sloc:]\n    if css_files:\n        paths = []\n        unique_paths = set()\n        for path in css_files:\n            if not is_absolute(path):\n                path = self.static_url(path)\n            if path not in unique_paths:\n                paths.append(path)\n                unique_paths.add(path)\n        css = ''.join('<link href=\"' + escape.xhtml_escape(p) + '\" '\n                      'type=\"text/css\" rel=\"stylesheet\"/>'\n                      for p in paths)\n        hloc = html.index(b'</head>')\n        html = html[:hloc] + utf8(css) + b'\\n' + html[hloc:]\n    if css_embed:\n        css = b'<style type=\"text/css\">\\n' + b'\\n'.join(css_embed) + \\\n            b'\\n</style>'\n        hloc = html.index(b'</head>')\n        html = html[:hloc] + css + b'\\n' + html[hloc:]\n    if html_heads:\n        hloc = html.index(b'</head>')\n        html = html[:hloc] + b''.join(html_heads) + b'\\n' + html[hloc:]\n    if html_bodies:\n        hloc = html.index(b'</body>')\n        html = html[:hloc] + b''.join(html_bodies) + b'\\n' + html[hloc:]\n    self.finish(html)",
                "def render_string(self, template_name, **kwargs):\n    \"\"\"Generate the given template with the given arguments.\n\n    We return the generated byte string (in utf8). To generate and\n    write a template as a response, use render() above.\n    \"\"\"\n    # If no template_path is specified, use the path of the calling file\n    template_path = self.get_template_path()\n    if not template_path:\n        frame = sys._getframe(0)\n        web_file = frame.f_code.co_filename\n        while frame.f_code.co_filename == web_file:\n            frame = frame.f_back\n        template_path = os.path.dirname(frame.f_code.co_filename)\n    with RequestHandler._template_loader_lock:\n        if template_path not in RequestHandler._template_loaders:\n            loader = self.create_template_loader(template_path)\n            RequestHandler._template_loaders[template_path] = loader\n        else:\n            loader = RequestHandler._template_loaders[template_path]\n    t = loader.load(template_name)\n    namespace = self.get_template_namespace()\n    namespace.update(kwargs)\n    return t.generate(**namespace)",
                "def get_template_namespace(self):\n    \"\"\"Returns a dictionary to be used as the default template namespace.\n\n    May be overridden by subclasses to add or modify values.\n\n    The results of this method will be combined with additional\n    defaults in the `tornado.template` module and keyword arguments\n    to `render` or `render_string`.\n    \"\"\"\n    namespace = dict(\n        handler=self,\n        request=self.request,\n        current_user=self.current_user,\n        locale=self.locale,\n        _=self.locale.translate,\n        pgettext=self.locale.pgettext,\n        static_url=self.static_url,\n        xsrf_form_html=self.xsrf_form_html,\n        reverse_url=self.reverse_url\n    )\n    namespace.update(self.ui)\n    return namespace",
                "def create_template_loader(self, template_path):\n    \"\"\"Returns a new template loader for the given path.\n\n    May be overridden by subclasses.  By default returns a\n    directory-based loader on the given path, using the\n    ``autoescape`` application setting.  If a ``template_loader``\n    application setting is supplied, uses that instead.\n    \"\"\"\n    settings = self.application.settings\n    if \"template_loader\" in settings:\n        return settings[\"template_loader\"]\n    kwargs = {}\n    if \"autoescape\" in settings:\n        # autoescape=None means \"no escaping\", so we have to be sure\n        # to only pass this kwarg if the user asked for it.\n        kwargs[\"autoescape\"] = settings[\"autoescape\"]\n    return template.Loader(template_path, **kwargs)",
                "def flush(self, include_footers=False, callback=None):\n    \"\"\"Flushes the current output buffer to the network.\n\n    The ``callback`` argument, if given, can be used for flow control:\n    it will be run when all flushed data has been written to the socket.\n    Note that only one flush callback can be outstanding at a time;\n    if another flush occurs before the previous flush's callback\n    has been run, the previous callback will be discarded.\n\n    .. versionchanged:: 4.0\n       Now returns a `.Future` if no callback is given.\n    \"\"\"\n    chunk = b\"\".join(self._write_buffer)\n    self._write_buffer = []\n    if not self._headers_written:\n        self._headers_written = True\n        for transform in self._transforms:\n            self._status_code, self._headers, chunk = \\\n                transform.transform_first_chunk(\n                    self._status_code, self._headers,\n                    chunk, include_footers)\n        # Ignore the chunk and only write the headers for HEAD requests\n        if self.request.method == \"HEAD\":\n            chunk = None\n\n        # Finalize the cookie headers (which have been stored in a side\n        # object so an outgoing cookie could be overwritten before it\n        # is sent).\n        if hasattr(self, \"_new_cookie\"):\n            for cookie in self._new_cookie.values():\n                self.add_header(\"Set-Cookie\", cookie.OutputString(None))\n\n        start_line = httputil.ResponseStartLine('',\n                                                self._status_code,\n                                                self._reason)\n        return self.request.connection.write_headers(\n            start_line, self._headers, chunk, callback=callback)\n    else:\n        for transform in self._transforms:\n            chunk = transform.transform_chunk(chunk, include_footers)\n        # Ignore the chunk and only write the headers for HEAD requests\n        if self.request.method != \"HEAD\":\n            return self.request.connection.write(chunk, callback=callback)\n        else:\n            future = Future()\n            future.set_result(None)\n            return future",
                "def finish(self, chunk=None):\n    \"\"\"Finishes this response, ending the HTTP request.\"\"\"\n    if self._finished:\n        raise RuntimeError(\"finish() called twice\")\n\n    if chunk is not None:\n        self.write(chunk)\n\n    # Automatically support ETags and add the Content-Length header if\n    # we have not flushed any content yet.\n    if not self._headers_written:\n        if (self._status_code == 200 and\n            self.request.method in (\"GET\", \"HEAD\") and\n                \"Etag\" not in self._headers):\n            self.set_etag_header()\n            if self.check_etag_header():\n                self._write_buffer = []\n                self.set_status(304)\n        if self._status_code == 304:\n            assert not self._write_buffer, \"Cannot send body with 304\"\n            self._clear_headers_for_304()\n        elif \"Content-Length\" not in self._headers:\n            content_length = sum(len(part) for part in self._write_buffer)\n            self.set_header(\"Content-Length\", content_length)\n\n    if hasattr(self.request, \"connection\"):\n        # Now that the request is finished, clear the callback we\n        # set on the HTTPConnection (which would otherwise prevent the\n        # garbage collection of the RequestHandler when there\n        # are keepalive connections)\n        self.request.connection.set_close_callback(None)\n\n    self.flush(include_footers=True)\n    self.request.finish()\n    self._log()\n    self._finished = True\n    self.on_finish()\n    # Break up a reference cycle between this handler and the\n    # _ui_module closures to allow for faster GC on CPython.\n    self.ui = None",
                "def send_error(self, status_code=500, **kwargs):\n    \"\"\"Sends the given HTTP error code to the browser.\n\n    If `flush()` has already been called, it is not possible to send\n    an error, so this method will simply terminate the response.\n    If output has been written but not yet flushed, it will be discarded\n    and replaced with the error page.\n\n    Override `write_error()` to customize the error page that is returned.\n    Additional keyword arguments are passed through to `write_error`.\n    \"\"\"\n    if self._headers_written:\n        gen_log.error(\"Cannot send error response after headers written\")\n        if not self._finished:\n            # If we get an error between writing headers and finishing,\n            # we are unlikely to be able to finish due to a\n            # Content-Length mismatch. Try anyway to release the\n            # socket.\n            try:\n                self.finish()\n            except Exception:\n                gen_log.error(\"Failed to flush partial response\",\n                              exc_info=True)\n        return\n    self.clear()\n\n    reason = kwargs.get('reason')\n    if 'exc_info' in kwargs:\n        exception = kwargs['exc_info'][1]\n        if isinstance(exception, HTTPError) and exception.reason:\n            reason = exception.reason\n    self.set_status(status_code, reason=reason)\n    try:\n        self.write_error(status_code, **kwargs)\n    except Exception:\n        app_log.error(\"Uncaught exception in write_error\", exc_info=True)\n    if not self._finished:\n        self.finish()",
                "def write_error(self, status_code, **kwargs):\n    \"\"\"Override to implement custom error pages.\n\n    ``write_error`` may call `write`, `render`, `set_header`, etc\n    to produce output as usual.\n\n    If this error was caused by an uncaught exception (including\n    HTTPError), an ``exc_info`` triple will be available as\n    ``kwargs[\"exc_info\"]``.  Note that this exception may not be\n    the \"current\" exception for purposes of methods like\n    ``sys.exc_info()`` or ``traceback.format_exc``.\n    \"\"\"\n    if self.settings.get(\"serve_traceback\") and \"exc_info\" in kwargs:\n        # in debug mode, try to send a traceback\n        self.set_header('Content-Type', 'text/plain')\n        for line in traceback.format_exception(*kwargs[\"exc_info\"]):\n            self.write(line)\n        self.finish()\n    else:\n        self.finish(\"<html><title>%(code)d: %(message)s</title>\"\n                    \"<body>%(code)d: %(message)s</body></html>\" % {\n                        \"code\": status_code,\n                        \"message\": self._reason,\n                    })",
                "@property\ndef locale(self):\n    \"\"\"The locale for the current session.\n\n    Determined by either `get_user_locale`, which you can override to\n    set the locale based on, e.g., a user preference stored in a\n    database, or `get_browser_locale`, which uses the ``Accept-Language``\n    header.\n\n    .. versionchanged: 4.1\n       Added a property setter.\n    \"\"\"\n    if not hasattr(self, \"_locale\"):\n        self._locale = self.get_user_locale()\n        if not self._locale:\n            self._locale = self.get_browser_locale()\n            assert self._locale\n    return self._locale",
                "@locale.setter\ndef locale(self, value):\n    self._locale = value",
                "def get_user_locale(self):\n    \"\"\"Override to determine the locale from the authenticated user.\n\n    If None is returned, we fall back to `get_browser_locale()`.\n\n    This method should return a `tornado.locale.Locale` object,\n    most likely obtained via a call like ``tornado.locale.get(\"en\")``\n    \"\"\"\n    return None",
                "def get_browser_locale(self, default=\"en_US\"):\n    \"\"\"Determines the user's locale from ``Accept-Language`` header.\n\n    See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\n    \"\"\"\n    if \"Accept-Language\" in self.request.headers:\n        languages = self.request.headers[\"Accept-Language\"].split(\",\")\n        locales = []\n        for language in languages:\n            parts = language.strip().split(\";\")\n            if len(parts) > 1 and parts[1].startswith(\"q=\"):\n                try:\n                    score = float(parts[1][2:])\n                except (ValueError, TypeError):\n                    score = 0.0\n            else:\n                score = 1.0\n            locales.append((parts[0], score))\n        if locales:\n            locales.sort(key=lambda pair: pair[1], reverse=True)\n            codes = [l[0] for l in locales]\n            return locale.get(*codes)\n    return locale.get(default)",
                "@property\ndef current_user(self):\n    \"\"\"The authenticated user for this request.\n\n    This is a cached version of `get_current_user`, which you can\n    override to set the user based on, e.g., a cookie. If that\n    method is not overridden, this method always returns None.\n\n    We lazy-load the current user the first time this method is called\n    and cache the result after that.\n    \"\"\"\n    if not hasattr(self, \"_current_user\"):\n        self._current_user = self.get_current_user()\n    return self._current_user",
                "@current_user.setter\ndef current_user(self, value):\n    self._current_user = value",
                "def get_current_user(self):\n    \"\"\"Override to determine the current user from, e.g., a cookie.\"\"\"\n    return None",
                "def get_login_url(self):\n    \"\"\"Override to customize the login URL based on the request.\n\n    By default, we use the ``login_url`` application setting.\n    \"\"\"\n    self.require_setting(\"login_url\", \"@tornado.web.authenticated\")\n    return self.application.settings[\"login_url\"]",
                "def get_template_path(self):\n    \"\"\"Override to customize template path for each handler.\n\n    By default, we use the ``template_path`` application setting.\n    Return None to load templates relative to the calling file.\n    \"\"\"\n    return self.application.settings.get(\"template_path\")",
                "@property\ndef xsrf_token(self):\n    \"\"\"The XSRF-prevention token for the current user/session.\n\n    To prevent cross-site request forgery, we set an '_xsrf' cookie\n    and include the same '_xsrf' value as an argument with all POST\n    requests. If the two do not match, we reject the form submission\n    as a potential forgery.\n\n    See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n\n    .. versionchanged:: 3.2.2\n       The xsrf token will now be have a random mask applied in every\n       request, which makes it safe to include the token in pages\n       that are compressed.  See http://breachattack.com for more\n       information on the issue fixed by this change.  Old (version 1)\n       cookies will be converted to version 2 when this method is called\n       unless the ``xsrf_cookie_version`` `Application` setting is\n       set to 1.\n    \"\"\"\n    if not hasattr(self, \"_xsrf_token\"):\n        version, token, timestamp = self._get_raw_xsrf_token()\n        output_version = self.settings.get(\"xsrf_cookie_version\", 2)\n        if output_version == 1:\n            self._xsrf_token = binascii.b2a_hex(token)\n        elif output_version == 2:\n            mask = os.urandom(4)\n            self._xsrf_token = b\"|\".join([\n                b\"2\",\n                binascii.b2a_hex(mask),\n                binascii.b2a_hex(_websocket_mask(mask, token)),\n                utf8(str(int(timestamp)))])\n        else:\n            raise ValueError(\"unknown xsrf cookie version %d\",\n                             output_version)\n        if version is None:\n            expires_days = 30 if self.current_user else None\n            self.set_cookie(\"_xsrf\", self._xsrf_token,\n                            expires_days=expires_days)\n    return self._xsrf_token",
                "def _get_raw_xsrf_token(self):\n    \"\"\"Read or generate the xsrf token in its raw form.\n\n    The raw_xsrf_token is a tuple containing:\n\n    * version: the version of the cookie from which this token was read,\n      or None if we generated a new token in this request.\n    * token: the raw token data; random (non-ascii) bytes.\n    * timestamp: the time this token was generated (will not be accurate\n      for version 1 cookies)\n    \"\"\"\n    if not hasattr(self, '_raw_xsrf_token'):\n        cookie = self.get_cookie(\"_xsrf\")\n        if cookie:\n            version, token, timestamp = self._decode_xsrf_token(cookie)\n        else:\n            version, token, timestamp = None, None, None\n        if token is None:\n            version = None\n            token = os.urandom(16)\n            timestamp = time.time()\n        self._raw_xsrf_token = (version, token, timestamp)\n    return self._raw_xsrf_token",
                "def _decode_xsrf_token(self, cookie):\n    \"\"\"Convert a cookie string into a the tuple form returned by\n    _get_raw_xsrf_token.\n    \"\"\"\n\n    try:\n        m = _signed_value_version_re.match(utf8(cookie))\n\n        if m:\n            version = int(m.group(1))\n            if version == 2:\n                _, mask, masked_token, timestamp = cookie.split(\"|\")\n\n                mask = binascii.a2b_hex(utf8(mask))\n                token = _websocket_mask(\n                    mask, binascii.a2b_hex(utf8(masked_token)))\n                timestamp = int(timestamp)\n                return version, token, timestamp\n            else:\n                # Treat unknown versions as not present instead of failing.\n                raise Exception(\"Unknown xsrf cookie version\")\n        else:\n            version = 1\n            try:\n                token = binascii.a2b_hex(utf8(cookie))\n            except (binascii.Error, TypeError):\n                token = utf8(cookie)\n            # We don't have a usable timestamp in older versions.\n            timestamp = int(time.time())\n            return (version, token, timestamp)\n    except Exception:\n        # Catch exceptions and return nothing instead of failing.\n        gen_log.debug(\"Uncaught exception in _decode_xsrf_token\",\n                      exc_info=True)\n        return None, None, None",
                "def check_xsrf_cookie(self):\n    \"\"\"Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.\n\n    To prevent cross-site request forgery, we set an ``_xsrf``\n    cookie and include the same value as a non-cookie\n    field with all ``POST`` requests. If the two do not match, we\n    reject the form submission as a potential forgery.\n\n    The ``_xsrf`` value may be set as either a form field named ``_xsrf``\n    or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``\n    (the latter is accepted for compatibility with Django).\n\n    See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n\n    Prior to release 1.1.1, this check was ignored if the HTTP header\n    ``X-Requested-With: XMLHTTPRequest`` was present.  This exception\n    has been shown to be insecure and has been removed.  For more\n    information please see\n    http://www.djangoproject.com/weblog/2011/feb/08/security/\n    http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails\n\n    .. versionchanged:: 3.2.2\n       Added support for cookie version 2.  Both versions 1 and 2 are\n       supported.\n    \"\"\"\n    token = (self.get_argument(\"_xsrf\", None) or\n             self.request.headers.get(\"X-Xsrftoken\") or\n             self.request.headers.get(\"X-Csrftoken\"))\n    if not token:\n        raise HTTPError(403, \"'_xsrf' argument missing from POST\")\n    _, token, _ = self._decode_xsrf_token(token)\n    _, expected_token, _ = self._get_raw_xsrf_token()\n    if not _time_independent_equals(utf8(token), utf8(expected_token)):\n        raise HTTPError(403, \"XSRF cookie does not match POST argument\")",
                "def xsrf_form_html(self):\n    \"\"\"An HTML ``<input/>`` element to be included with all POST forms.\n\n    It defines the ``_xsrf`` input value, which we check on all POST\n    requests to prevent cross-site request forgery. If you have set\n    the ``xsrf_cookies`` application setting, you must include this\n    HTML within all of your HTML forms.\n\n    In a template, this method should be called with ``{% module\n    xsrf_form_html() %}``\n\n    See `check_xsrf_cookie()` above for more information.\n    \"\"\"\n    return '<input type=\"hidden\" name=\"_xsrf\" value=\"' + \\\n        escape.xhtml_escape(self.xsrf_token) + '\"/>'",
                "def static_url(self, path, include_host=None, **kwargs):\n    \"\"\"Returns a static URL for the given relative static file path.\n\n    This method requires you set the ``static_path`` setting in your\n    application (which specifies the root directory of your static\n    files).\n\n    This method returns a versioned url (by default appending\n    ``?v=<signature>``), which allows the static files to be\n    cached indefinitely.  This can be disabled by passing\n    ``include_version=False`` (in the default implementation;\n    other static file implementations are not required to support\n    this, but they may support other options).\n\n    By default this method returns URLs relative to the current\n    host, but if ``include_host`` is true the URL returned will be\n    absolute.  If this handler has an ``include_host`` attribute,\n    that value will be used as the default for all `static_url`\n    calls that do not pass ``include_host`` as a keyword argument.\n\n    \"\"\"\n    self.require_setting(\"static_path\", \"static_url\")\n    get_url = self.settings.get(\"static_handler_class\",\n                                StaticFileHandler).make_static_url\n\n    if include_host is None:\n        include_host = getattr(self, \"include_host\", False)\n\n    if include_host:\n        base = self.request.protocol + \"://\" + self.request.host\n    else:\n        base = \"\"\n\n    return base + get_url(self.settings, path, **kwargs)",
                "def require_setting(self, name, feature=\"this feature\"):\n    \"\"\"Raises an exception if the given app setting is not defined.\"\"\"\n    if not self.application.settings.get(name):\n        raise Exception(\"You must define the '%s' setting in your \"\n                        \"application to use %s\" % (name, feature))",
                "def reverse_url(self, name, *args):\n    \"\"\"Alias for `Application.reverse_url`.\"\"\"\n    return self.application.reverse_url(name, *args)",
                "def compute_etag(self):\n    \"\"\"Computes the etag header to be used for this request.\n\n    By default uses a hash of the content written so far.\n\n    May be overridden to provide custom etag implementations,\n    or may return None to disable tornado's default etag support.\n    \"\"\"\n    hasher = hashlib.sha1()\n    for part in self._write_buffer:\n        hasher.update(part)\n    return '\"%s\"' % hasher.hexdigest()",
                "def set_etag_header(self):\n    \"\"\"Sets the response's Etag header using ``self.compute_etag()``.\n\n    Note: no header will be set if ``compute_etag()`` returns ``None``.\n\n    This method is called automatically when the request is finished.\n    \"\"\"\n    etag = self.compute_etag()\n    if etag is not None:\n        self.set_header(\"Etag\", etag)",
                "def check_etag_header(self):\n    \"\"\"Checks the ``Etag`` header against requests's ``If-None-Match``.\n\n    Returns ``True`` if the request's Etag matches and a 304 should be\n    returned. For example::\n\n        self.set_etag_header()\n        if self.check_etag_header():\n            self.set_status(304)\n            return\n\n    This method is called automatically when the request is finished,\n    but may be called earlier for applications that override\n    `compute_etag` and want to do an early check for ``If-None-Match``\n    before completing the request.  The ``Etag`` header should be set\n    (perhaps with `set_etag_header`) before calling this method.\n    \"\"\"\n    computed_etag = utf8(self._headers.get(\"Etag\", \"\"))\n    # Find all weak and strong etag values from If-None-Match header\n    # because RFC 7232 allows multiple etag values in a single header.\n    etags = re.findall(\n        br'\\*|(?:W/)?\"[^\"]*\"',\n        utf8(self.request.headers.get(\"If-None-Match\", \"\"))\n    )\n    if not computed_etag or not etags:\n        return False\n\n    match = False\n    if etags[0] == b'*':\n        match = True\n    else:\n        # Use a weak comparison when comparing entity-tags.\n        val = lambda x: x[2:] if x.startswith(b'W/') else x\n        for etag in etags:\n            if val(etag) == val(computed_etag):\n                match = True\n                break\n    return match",
                "def _stack_context_handle_exception(self, type, value, traceback):\n    try:\n        # For historical reasons _handle_request_exception only takes\n        # the exception value instead of the full triple,\n        # so re-raise the exception to ensure that it's in\n        # sys.exc_info()\n        raise_exc_info((type, value, traceback))\n    except Exception:\n        self._handle_request_exception(value)\n    return True",
                "@gen.coroutine\ndef _execute(self, transforms, *args, **kwargs):\n    \"\"\"Executes this request with the given output transforms.\"\"\"\n    self._transforms = transforms\n    try:\n        if self.request.method not in self.SUPPORTED_METHODS:\n            raise HTTPError(405)\n        self.path_args = [self.decode_argument(arg) for arg in args]\n        self.path_kwargs = dict((k, self.decode_argument(v, name=k))\n                                for (k, v) in kwargs.items())\n        # If XSRF cookies are turned on, reject form submissions without\n        # the proper cookie\n        if self.request.method not in (\"GET\", \"HEAD\", \"OPTIONS\") and \\\n                self.application.settings.get(\"xsrf_cookies\"):\n            self.check_xsrf_cookie()\n\n        result = self.prepare()\n        if is_future(result):\n            result = yield result\n        if result is not None:\n            raise TypeError(\"Expected None, got %r\" % result)\n        if self._prepared_future is not None:\n            # Tell the Application we've finished with prepare()\n            # and are ready for the body to arrive.\n            self._prepared_future.set_result(None)\n        if self._finished:\n            return\n\n        if _has_stream_request_body(self.__class__):\n            # In streaming mode request.body is a Future that signals\n            # the body has been completely received.  The Future has no\n            # result; the data has been passed to self.data_received\n            # instead.\n            try:\n                yield self.request.body\n            except iostream.StreamClosedError:\n                return\n\n        method = getattr(self, self.request.method.lower())\n        result = method(*self.path_args, **self.path_kwargs)\n        if is_future(result):\n            result = yield result\n        if result is not None:\n            raise TypeError(\"Expected None, got %r\" % result)\n        if self._auto_finish and not self._finished:\n            self.finish()\n    except Exception as e:\n        try:\n            self._handle_request_exception(e)\n        except Exception:\n            app_log.error(\"Exception in exception handler\", exc_info=True)\n        if (self._prepared_future is not None and\n                not self._prepared_future.done()):\n            # In case we failed before setting _prepared_future, do it\n            # now (to unblock the HTTP server).  Note that this is not\n            # in a finally block to avoid GC issues prior to Python 3.4.\n            self._prepared_future.set_result(None)",
                "def data_received(self, chunk):\n    \"\"\"Implement this method to handle streamed request data.\n\n    Requires the `.stream_request_body` decorator.\n    \"\"\"\n    raise NotImplementedError()",
                "def _log(self):\n    \"\"\"Logs the current request.\n\n    Sort of deprecated since this functionality was moved to the\n    Application, but left in place for the benefit of existing apps\n    that have overridden this method.\n    \"\"\"\n    self.application.log_request(self)",
                "def _request_summary(self):\n    return \"%s %s (%s)\" % (self.request.method, self.request.uri,\n                           self.request.remote_ip)",
                "def _handle_request_exception(self, e):\n    if isinstance(e, Finish):\n        # Not an error; just finish the request without logging.\n        if not self._finished:\n            self.finish()\n        return\n    try:\n        self.log_exception(*sys.exc_info())\n    except Exception:\n        # An error here should still get a best-effort send_error()\n        # to avoid leaking the connection.\n        app_log.error(\"Error in exception logger\", exc_info=True)\n    if self._finished:\n        # Extra errors after the request has been finished should\n        # be logged, but there is no reason to continue to try and\n        # send a response.\n        return\n    if isinstance(e, HTTPError):\n        if e.status_code not in httputil.responses and not e.reason:\n            gen_log.error(\"Bad HTTP status code: %d\", e.status_code)\n            self.send_error(500, exc_info=sys.exc_info())\n        else:\n            self.send_error(e.status_code, exc_info=sys.exc_info())\n    else:\n        self.send_error(500, exc_info=sys.exc_info())",
                "def log_exception(self, typ, value, tb):\n    \"\"\"Override to customize logging of uncaught exceptions.\n\n    By default logs instances of `HTTPError` as warnings without\n    stack traces (on the ``tornado.general`` logger), and all\n    other exceptions as errors with stack traces (on the\n    ``tornado.application`` logger).\n\n    .. versionadded:: 3.1\n    \"\"\"\n    if isinstance(value, HTTPError):\n        if value.log_message:\n            format = \"%d %s: \" + value.log_message\n            args = ([value.status_code, self._request_summary()] +\n                    list(value.args))\n            gen_log.warning(format, *args)\n    else:\n        app_log.error(\"Uncaught exception %s\\n%r\", self._request_summary(),\n                      self.request, exc_info=(typ, value, tb))",
                "def _ui_module(self, name, module):\n    def render(*args, **kwargs):\n        if not hasattr(self, \"_active_modules\"):\n            self._active_modules = {}\n        if name not in self._active_modules:\n            self._active_modules[name] = module(self)\n        rendered = self._active_modules[name].render(*args, **kwargs)\n        return rendered\n    return render",
                "def _ui_method(self, method):\n    return lambda *args, **kwargs: method(self, *args, **kwargs)",
                "def _clear_headers_for_304(self):\n    # 304 responses should not contain entity headers (defined in\n    # http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.1)\n    # not explicitly allowed by\n    # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5\n    headers = [\"Allow\", \"Content-Encoding\", \"Content-Language\",\n               \"Content-Length\", \"Content-MD5\", \"Content-Range\",\n               \"Content-Type\", \"Last-Modified\"]\n    for h in headers:\n        self.clear_header(h)",
                "@functools.wraps(method)\ndef wrapper(self, *args, **kwargs):\n    self._auto_finish = False\n    with stack_context.ExceptionStackContext(\n            self._stack_context_handle_exception):\n        result = method(self, *args, **kwargs)\n        if is_future(result):\n            # If @asynchronous is used with @gen.coroutine, (but\n            # not @gen.engine), we can automatically finish the\n            # request when the future resolves.  Additionally,\n            # the Future will swallow any exceptions so we need\n            # to throw them back out to the stack context to finish\n            # the request.\n            def future_complete(f):\n                f.result()\n                if not self._finished:\n                    self.finish()\n            IOLoop.current().add_future(result, future_complete)\n            # Once we have done this, hide the Future from our\n            # caller (i.e. RequestHandler._when_complete), which\n            # would otherwise set up its own callback and\n            # exception handler (resulting in exceptions being\n            # logged twice).\n            return None\n        return result",
                "@functools.wraps(method)\ndef wrapper(self, *args, **kwargs):\n    if self.request.path.endswith(\"/\"):\n        if self.request.method in (\"GET\", \"HEAD\"):\n            uri = self.request.path.rstrip(\"/\")\n            if uri:  # don't try to redirect '/' to ''\n                if self.request.query:\n                    uri += \"?\" + self.request.query\n                self.redirect(uri, permanent=True)\n                return\n        else:\n            raise HTTPError(404)\n    return method(self, *args, **kwargs)",
                "@functools.wraps(method)\ndef wrapper(self, *args, **kwargs):\n    if not self.request.path.endswith(\"/\"):\n        if self.request.method in (\"GET\", \"HEAD\"):\n            uri = self.request.path + \"/\"\n            if self.request.query:\n                uri += \"?\" + self.request.query\n            self.redirect(uri, permanent=True)\n            return\n        raise HTTPError(404)\n    return method(self, *args, **kwargs)",
                "def __init__(self, handlers=None, default_host=\"\", transforms=None,\n             **settings):\n    if transforms is None:\n        self.transforms = []\n        if settings.get(\"compress_response\") or settings.get(\"gzip\"):\n            self.transforms.append(GZipContentEncoding)\n    else:\n        self.transforms = transforms\n    self.handlers = []\n    self.named_handlers = {}\n    self.default_host = default_host\n    self.settings = settings\n    self.ui_modules = {'linkify': _linkify,\n                       'xsrf_form_html': _xsrf_form_html,\n                       'Template': TemplateModule,\n                       }\n    self.ui_methods = {}\n    self._load_ui_modules(settings.get(\"ui_modules\", {}))\n    self._load_ui_methods(settings.get(\"ui_methods\", {}))\n    if self.settings.get(\"static_path\"):\n        path = self.settings[\"static_path\"]\n        handlers = list(handlers or [])\n        static_url_prefix = settings.get(\"static_url_prefix\",\n                                         \"/static/\")\n        static_handler_class = settings.get(\"static_handler_class\",\n                                            StaticFileHandler)\n        static_handler_args = settings.get(\"static_handler_args\", {})\n        static_handler_args['path'] = path\n        for pattern in [re.escape(static_url_prefix) + r\"(.*)\",\n                        r\"/(favicon\\.ico)\", r\"/(robots\\.txt)\"]:\n            handlers.insert(0, (pattern, static_handler_class,\n                                static_handler_args))\n    if handlers:\n        self.add_handlers(\".*$\", handlers)\n\n    if self.settings.get('debug'):\n        self.settings.setdefault('autoreload', True)\n        self.settings.setdefault('compiled_template_cache', False)\n        self.settings.setdefault('static_hash_cache', False)\n        self.settings.setdefault('serve_traceback', True)\n\n    # Automatically reload modified modules\n    if self.settings.get('autoreload'):\n        from tornado import autoreload\n        autoreload.start()",
                "def listen(self, port, address=\"\", **kwargs):\n    \"\"\"Starts an HTTP server for this application on the given port.\n\n    This is a convenience alias for creating an `.HTTPServer`\n    object and calling its listen method.  Keyword arguments not\n    supported by `HTTPServer.listen <.TCPServer.listen>` are passed to the\n    `.HTTPServer` constructor.  For advanced uses\n    (e.g. multi-process mode), do not use this method; create an\n    `.HTTPServer` and call its\n    `.TCPServer.bind`/`.TCPServer.start` methods directly.\n\n    Note that after calling this method you still need to call\n    ``IOLoop.current().start()`` to start the server.\n    \"\"\"\n    # import is here rather than top level because HTTPServer\n    # is not importable on appengine\n    from tornado.httpserver import HTTPServer\n    server = HTTPServer(self, **kwargs)\n    server.listen(port, address)",
                "def add_handlers(self, host_pattern, host_handlers):\n    \"\"\"Appends the given handlers to our handler list.\n\n    Host patterns are processed sequentially in the order they were\n    added. All matching patterns will be considered.\n    \"\"\"\n    if not host_pattern.endswith(\"$\"):\n        host_pattern += \"$\"\n    handlers = []\n    # The handlers with the wildcard host_pattern are a special\n    # case - they're added in the constructor but should have lower\n    # precedence than the more-precise handlers added later.\n    # If a wildcard handler group exists, it should always be last\n    # in the list, so insert new groups just before it.\n    if self.handlers and self.handlers[-1][0].pattern == '.*$':\n        self.handlers.insert(-1, (re.compile(host_pattern), handlers))\n    else:\n        self.handlers.append((re.compile(host_pattern), handlers))\n\n    for spec in host_handlers:\n        if isinstance(spec, (tuple, list)):\n            assert len(spec) in (2, 3, 4)\n            spec = URLSpec(*spec)\n        handlers.append(spec)\n        if spec.name:\n            if spec.name in self.named_handlers:\n                app_log.warning(\n                    \"Multiple handlers named %s; replacing previous value\",\n                    spec.name)\n            self.named_handlers[spec.name] = spec",
                "def add_transform(self, transform_class):\n    self.transforms.append(transform_class)",
                "def _get_host_handlers(self, request):\n    host = split_host_and_port(request.host.lower())[0]\n    matches = []\n    for pattern, handlers in self.handlers:\n        if pattern.match(host):\n            matches.extend(handlers)\n    # Look for default host if not behind load balancer (for debugging)\n    if not matches and \"X-Real-Ip\" not in request.headers:\n        for pattern, handlers in self.handlers:\n            if pattern.match(self.default_host):\n                matches.extend(handlers)\n    return matches or None",
                "def _load_ui_methods(self, methods):\n    if isinstance(methods, types.ModuleType):\n        self._load_ui_methods(dict((n, getattr(methods, n))\n                                   for n in dir(methods)))\n    elif isinstance(methods, list):\n        for m in methods:\n            self._load_ui_methods(m)\n    else:\n        for name, fn in methods.items():\n            if not name.startswith(\"_\") and hasattr(fn, \"__call__\") \\\n                    and name[0].lower() == name[0]:\n                self.ui_methods[name] = fn",
                "def _load_ui_modules(self, modules):\n    if isinstance(modules, types.ModuleType):\n        self._load_ui_modules(dict((n, getattr(modules, n))\n                                   for n in dir(modules)))\n    elif isinstance(modules, list):\n        for m in modules:\n            self._load_ui_modules(m)\n    else:\n        assert isinstance(modules, dict)\n        for name, cls in modules.items():\n            try:\n                if issubclass(cls, UIModule):\n                    self.ui_modules[name] = cls\n            except TypeError:\n                pass",
                "def start_request(self, server_conn, request_conn):\n    # Modern HTTPServer interface\n    return _RequestDispatcher(self, request_conn)",
                "def __call__(self, request):\n    # Legacy HTTPServer interface\n    dispatcher = _RequestDispatcher(self, None)\n    dispatcher.set_request(request)\n    return dispatcher.execute()",
                "def reverse_url(self, name, *args):\n    \"\"\"Returns a URL path for handler named ``name``\n\n    The handler must be added to the application as a named `URLSpec`.\n\n    Args will be substituted for capturing groups in the `URLSpec` regex.\n    They will be converted to strings if necessary, encoded as utf8,\n    and url-escaped.\n    \"\"\"\n    if name in self.named_handlers:\n        return self.named_handlers[name].reverse(*args)\n    raise KeyError(\"%s not found in named urls\" % name)",
                "def log_request(self, handler):\n    \"\"\"Writes a completed HTTP request to the logs.\n\n    By default writes to the python root logger.  To change\n    this behavior either subclass Application and override this method,\n    or pass a function in the application settings dictionary as\n    ``log_function``.\n    \"\"\"\n    if \"log_function\" in self.settings:\n        self.settings[\"log_function\"](handler)\n        return\n    if handler.get_status() < 400:\n        log_method = access_log.info\n    elif handler.get_status() < 500:\n        log_method = access_log.warning\n    else:\n        log_method = access_log.error\n    request_time = 1000.0 * handler.request.request_time()\n    log_method(\"%d %s %.2fms\", handler.get_status(),\n               handler._request_summary(), request_time)",
                "def __init__(self, application, connection):\n    self.application = application\n    self.connection = connection\n    self.request = None\n    self.chunks = []\n    self.handler_class = None\n    self.handler_kwargs = None\n    self.path_args = []\n    self.path_kwargs = {}",
                "def headers_received(self, start_line, headers):\n    self.set_request(httputil.HTTPServerRequest(\n        connection=self.connection, start_line=start_line,\n        headers=headers))\n    if self.stream_request_body:\n        self.request.body = Future()\n        return self.execute()",
                "def set_request(self, request):\n    self.request = request\n    self._find_handler()\n    self.stream_request_body = _has_stream_request_body(self.handler_class)",
                "def _find_handler(self):\n    # Identify the handler to use as soon as we have the request.\n    # Save url path arguments for later.\n    app = self.application\n    handlers = app._get_host_handlers(self.request)\n    if not handlers:\n        self.handler_class = RedirectHandler\n        self.handler_kwargs = dict(url=\"%s://%s/\"\n                                   % (self.request.protocol,\n                                      app.default_host))\n        return\n    for spec in handlers:\n        match = spec.regex.match(self.request.path)\n        if match:\n            self.handler_class = spec.handler_class\n            self.handler_kwargs = spec.kwargs\n            if spec.regex.groups:\n                # Pass matched groups to the handler.  Since\n                # match.groups() includes both named and\n                # unnamed groups, we want to use either groups\n                # or groupdict but not both.\n                if spec.regex.groupindex:\n                    self.path_kwargs = dict(\n                        (str(k), _unquote_or_none(v))\n                        for (k, v) in match.groupdict().items())\n                else:\n                    self.path_args = [_unquote_or_none(s)\n                                      for s in match.groups()]\n            return\n    if app.settings.get('default_handler_class'):\n        self.handler_class = app.settings['default_handler_class']\n        self.handler_kwargs = app.settings.get(\n            'default_handler_args', {})\n    else:\n        self.handler_class = ErrorHandler\n        self.handler_kwargs = dict(status_code=404)",
                "def data_received(self, data):\n    if self.stream_request_body:\n        return self.handler.data_received(data)\n    else:\n        self.chunks.append(data)",
                "def finish(self):\n    if self.stream_request_body:\n        self.request.body.set_result(None)\n    else:\n        self.request.body = b''.join(self.chunks)\n        self.request._parse_body()\n        self.execute()",
                "def on_connection_close(self):\n    if self.stream_request_body:\n        self.handler.on_connection_close()\n    else:\n        self.chunks = None",
                "def execute(self):\n    # If template cache is disabled (usually in the debug mode),\n    # re-compile templates and reload static files on every\n    # request so you don't need to restart to see changes\n    if not self.application.settings.get(\"compiled_template_cache\", True):\n        with RequestHandler._template_loader_lock:\n            for loader in RequestHandler._template_loaders.values():\n                loader.reset()\n    if not self.application.settings.get('static_hash_cache', True):\n        StaticFileHandler.reset()\n\n    self.handler = self.handler_class(self.application, self.request,\n                                      **self.handler_kwargs)\n    transforms = [t(self.request) for t in self.application.transforms]\n\n    if self.stream_request_body:\n        self.handler._prepared_future = Future()\n    # Note that if an exception escapes handler._execute it will be\n    # trapped in the Future it returns (which we are ignoring here,\n    # leaving it to be logged when the Future is GC'd).\n    # However, that shouldn't happen because _execute has a blanket\n    # except handler, and we cannot easily access the IOLoop here to\n    # call add_future (because of the requirement to remain compatible\n    # with WSGI)\n    f = self.handler._execute(transforms, *self.path_args,\n                              **self.path_kwargs)\n    # If we are streaming the request body, then execute() is finished\n    # when the handler has prepared to receive the body.  If not,\n    # it doesn't matter when execute() finishes (so we return None)\n    return self.handler._prepared_future",
                "def __init__(self, status_code, log_message=None, *args, **kwargs):\n    self.status_code = status_code\n    self.log_message = log_message\n    self.args = args\n    self.reason = kwargs.get('reason', None)\n    if log_message and not args:\n        self.log_message = log_message.replace('%', '%%')",
                "def __str__(self):\n    message = \"HTTP %d: %s\" % (\n        self.status_code,\n        self.reason or httputil.responses.get(self.status_code, 'Unknown'))\n    if self.log_message:\n        return message + \" (\" + (self.log_message % self.args) + \")\"\n    else:\n        return message",
                "def __init__(self, arg_name):\n    super(MissingArgumentError, self).__init__(\n        400, 'Missing argument %s' % arg_name)\n    self.arg_name = arg_name",
                "def initialize(self, status_code):\n    self.set_status(status_code)",
                "def prepare(self):\n    raise HTTPError(self._status_code)",
                "def check_xsrf_cookie(self):\n    # POSTs to an ErrorHandler don't actually have side effects,\n    # so we don't need to check the xsrf token.  This allows POSTs\n    # to the wrong url to return a 404 instead of 403.\n    pass",
                "def initialize(self, url, permanent=True):\n    self._url = url\n    self._permanent = permanent",
                "def get(self):\n    self.redirect(self._url, permanent=self._permanent)",
                "def initialize(self, path, default_filename=None):\n    self.root = path\n    self.default_filename = default_filename",
                "@classmethod\ndef reset(cls):\n    with cls._lock:\n        cls._static_hashes = {}",
                "def head(self, path):\n    return self.get(path, include_body=False)",
                "@gen.coroutine\ndef get(self, path, include_body=True):\n    # Set up our path instance variables.\n    self.path = self.parse_url_path(path)\n    del path  # make sure we don't refer to path instead of self.path again\n    absolute_path = self.get_absolute_path(self.root, self.path)\n    self.absolute_path = self.validate_absolute_path(\n        self.root, absolute_path)\n    if self.absolute_path is None:\n        return\n\n    self.modified = self.get_modified_time()\n    self.set_headers()\n\n    if self.should_return_304():\n        self.set_status(304)\n        return\n\n    request_range = None\n    range_header = self.request.headers.get(\"Range\")\n    if range_header:\n        # As per RFC 2616 14.16, if an invalid Range header is specified,\n        # the request will be treated as if the header didn't exist.\n        request_range = httputil._parse_request_range(range_header)\n\n    size = self.get_content_size()\n    if request_range:\n        start, end = request_range\n        if (start is not None and start >= size) or end == 0:\n            # As per RFC 2616 14.35.1, a range is not satisfiable only: if\n            # the first requested byte is equal to or greater than the\n            # content, or when a suffix with length 0 is specified\n            self.set_status(416)  # Range Not Satisfiable\n            self.set_header(\"Content-Type\", \"text/plain\")\n            self.set_header(\"Content-Range\", \"bytes */%s\" % (size, ))\n            return\n        if start is not None and start < 0:\n            start += size\n        if end is not None and end > size:\n            # Clients sometimes blindly use a large range to limit their\n            # download size; cap the endpoint at the actual file size.\n            end = size\n        # Note: only return HTTP 206 if less than the entire range has been\n        # requested. Not only is this semantically correct, but Chrome\n        # refuses to play audio if it gets an HTTP 206 in response to\n        # ``Range: bytes=0-``.\n        if size != (end or size) - (start or 0):\n            self.set_status(206)  # Partial Content\n            self.set_header(\"Content-Range\",\n                            httputil._get_content_range(start, end, size))\n    else:\n        start = end = None\n\n    if start is not None and end is not None:\n        content_length = end - start\n    elif end is not None:\n        content_length = end\n    elif start is not None:\n        content_length = size - start\n    else:\n        content_length = size\n    self.set_header(\"Content-Length\", content_length)\n\n    if include_body:\n        content = self.get_content(self.absolute_path, start, end)\n        if isinstance(content, bytes):\n            content = [content]\n        for chunk in content:\n            try:\n                self.write(chunk)\n                yield self.flush()\n            except iostream.StreamClosedError:\n                return\n    else:\n        assert self.request.method == \"HEAD\"",
                "def compute_etag(self):\n    \"\"\"Sets the ``Etag`` header based on static url version.\n\n    This allows efficient ``If-None-Match`` checks against cached\n    versions, and sends the correct ``Etag`` for a partial response\n    (i.e. the same ``Etag`` as the full file).\n\n    .. versionadded:: 3.1\n    \"\"\"\n    version_hash = self._get_cached_version(self.absolute_path)\n    if not version_hash:\n        return None\n    return '\"%s\"' % (version_hash, )",
                "def set_headers(self):\n    \"\"\"Sets the content and caching headers on the response.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    self.set_header(\"Accept-Ranges\", \"bytes\")\n    self.set_etag_header()\n\n    if self.modified is not None:\n        self.set_header(\"Last-Modified\", self.modified)\n\n    content_type = self.get_content_type()\n    if content_type:\n        self.set_header(\"Content-Type\", content_type)\n\n    cache_time = self.get_cache_time(self.path, self.modified,\n                                     content_type)\n    if cache_time > 0:\n        self.set_header(\"Expires\", datetime.datetime.utcnow() +\n                        datetime.timedelta(seconds=cache_time))\n        self.set_header(\"Cache-Control\", \"max-age=\" + str(cache_time))\n\n    self.set_extra_headers(self.path)",
                "def should_return_304(self):\n    \"\"\"Returns True if the headers indicate that we should return 304.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    if self.check_etag_header():\n        return True\n\n    # Check the If-Modified-Since, and don't send the result if the\n    # content has not been modified\n    ims_value = self.request.headers.get(\"If-Modified-Since\")\n    if ims_value is not None:\n        date_tuple = email.utils.parsedate(ims_value)\n        if date_tuple is not None:\n            if_since = datetime.datetime(*date_tuple[:6])\n            if if_since >= self.modified:\n                return True\n\n    return False",
                "@classmethod\ndef get_absolute_path(cls, root, path):\n    \"\"\"Returns the absolute location of ``path`` relative to ``root``.\n\n    ``root`` is the path configured for this `StaticFileHandler`\n    (in most cases the ``static_path`` `Application` setting).\n\n    This class method may be overridden in subclasses.  By default\n    it returns a filesystem path, but other strings may be used\n    as long as they are unique and understood by the subclass's\n    overridden `get_content`.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    abspath = os.path.abspath(os.path.join(root, path))\n    return abspath",
                "def validate_absolute_path(self, root, absolute_path):\n    \"\"\"Validate and return the absolute path.\n\n    ``root`` is the configured path for the `StaticFileHandler`,\n    and ``path`` is the result of `get_absolute_path`\n\n    This is an instance method called during request processing,\n    so it may raise `HTTPError` or use methods like\n    `RequestHandler.redirect` (return None after redirecting to\n    halt further processing).  This is where 404 errors for missing files\n    are generated.\n\n    This method may modify the path before returning it, but note that\n    any such modifications will not be understood by `make_static_url`.\n\n    In instance methods, this method's result is available as\n    ``self.absolute_path``.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    root = os.path.abspath(root)\n    # os.path.abspath strips a trailing /\n    # it needs to be temporarily added back for requests to root/\n    if not (absolute_path + os.path.sep).startswith(root):\n        raise HTTPError(403, \"%s is not in root static directory\",\n                        self.path)\n    if (os.path.isdir(absolute_path) and\n            self.default_filename is not None):\n        # need to look at the request.path here for when path is empty\n        # but there is some prefix to the path that was already\n        # trimmed by the routing\n        if not self.request.path.endswith(\"/\"):\n            self.redirect(self.request.path + \"/\", permanent=True)\n            return\n        absolute_path = os.path.join(absolute_path, self.default_filename)\n    if not os.path.exists(absolute_path):\n        raise HTTPError(404)\n    if not os.path.isfile(absolute_path):\n        raise HTTPError(403, \"%s is not a file\", self.path)\n    return absolute_path",
                "@classmethod\ndef get_content(cls, abspath, start=None, end=None):\n    \"\"\"Retrieve the content of the requested resource which is located\n    at the given absolute path.\n\n    This class method may be overridden by subclasses.  Note that its\n    signature is different from other overridable class methods\n    (no ``settings`` argument); this is deliberate to ensure that\n    ``abspath`` is able to stand on its own as a cache key.\n\n    This method should either return a byte string or an iterator\n    of byte strings.  The latter is preferred for large files\n    as it helps reduce memory fragmentation.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    with open(abspath, \"rb\") as file:\n        if start is not None:\n            file.seek(start)\n        if end is not None:\n            remaining = end - (start or 0)\n        else:\n            remaining = None\n        while True:\n            chunk_size = 64 * 1024\n            if remaining is not None and remaining < chunk_size:\n                chunk_size = remaining\n            chunk = file.read(chunk_size)\n            if chunk:\n                if remaining is not None:\n                    remaining -= len(chunk)\n                yield chunk\n            else:\n                if remaining is not None:\n                    assert remaining == 0\n                return",
                "@classmethod\ndef get_content_version(cls, abspath):\n    \"\"\"Returns a version string for the resource at the given path.\n\n    This class method may be overridden by subclasses.  The\n    default implementation is a hash of the file's contents.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    data = cls.get_content(abspath)\n    hasher = hashlib.md5()\n    if isinstance(data, bytes):\n        hasher.update(data)\n    else:\n        for chunk in data:\n            hasher.update(chunk)\n    return hasher.hexdigest()",
                "def _stat(self):\n    if not hasattr(self, '_stat_result'):\n        self._stat_result = os.stat(self.absolute_path)\n    return self._stat_result",
                "def get_content_size(self):\n    \"\"\"Retrieve the total size of the resource at the given path.\n\n    This method may be overridden by subclasses.\n\n    .. versionadded:: 3.1\n\n    .. versionchanged:: 4.0\n       This method is now always called, instead of only when\n       partial results are requested.\n    \"\"\"\n    stat_result = self._stat()\n    return stat_result[stat.ST_SIZE]",
                "def get_modified_time(self):\n    \"\"\"Returns the time that ``self.absolute_path`` was last modified.\n\n    May be overridden in subclasses.  Should return a `~datetime.datetime`\n    object or None.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    stat_result = self._stat()\n    modified = datetime.datetime.utcfromtimestamp(\n        stat_result[stat.ST_MTIME])\n    return modified",
                "def get_content_type(self):\n    \"\"\"Returns the ``Content-Type`` header to be used for this request.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    mime_type, encoding = mimetypes.guess_type(self.absolute_path)\n    return mime_type",
                "def set_extra_headers(self, path):\n    \"\"\"For subclass to add extra headers to the response\"\"\"\n    pass",
                "def get_cache_time(self, path, modified, mime_type):\n    \"\"\"Override to customize cache control behavior.\n\n    Return a positive number of seconds to make the result\n    cacheable for that amount of time or 0 to mark resource as\n    cacheable for an unspecified amount of time (subject to\n    browser heuristics).\n\n    By default returns cache expiry of 10 years for resources requested\n    with ``v`` argument.\n    \"\"\"\n    return self.CACHE_MAX_AGE if \"v\" in self.request.arguments else 0",
                "@classmethod\ndef make_static_url(cls, settings, path, include_version=True):\n    \"\"\"Constructs a versioned url for the given path.\n\n    This method may be overridden in subclasses (but note that it\n    is a class method rather than an instance method).  Subclasses\n    are only required to implement the signature\n    ``make_static_url(cls, settings, path)``; other keyword\n    arguments may be passed through `~RequestHandler.static_url`\n    but are not standard.\n\n    ``settings`` is the `Application.settings` dictionary.  ``path``\n    is the static path being requested.  The url returned should be\n    relative to the current host.\n\n    ``include_version`` determines whether the generated URL should\n    include the query string containing the version hash of the\n    file corresponding to the given ``path``.\n\n    \"\"\"\n    url = settings.get('static_url_prefix', '/static/') + path\n    if not include_version:\n        return url\n\n    version_hash = cls.get_version(settings, path)\n    if not version_hash:\n        return url\n\n    return '%s?v=%s' % (url, version_hash)",
                "def parse_url_path(self, url_path):\n    \"\"\"Converts a static URL path into a filesystem path.\n\n    ``url_path`` is the path component of the URL with\n    ``static_url_prefix`` removed.  The return value should be\n    filesystem path relative to ``static_path``.\n\n    This is the inverse of `make_static_url`.\n    \"\"\"\n    if os.path.sep != \"/\":\n        url_path = url_path.replace(\"/\", os.path.sep)\n    return url_path",
                "@classmethod\ndef get_version(cls, settings, path):\n    \"\"\"Generate the version string to be used in static URLs.\n\n    ``settings`` is the `Application.settings` dictionary and ``path``\n    is the relative location of the requested asset on the filesystem.\n    The returned value should be a string, or ``None`` if no version\n    could be determined.\n\n    .. versionchanged:: 3.1\n       This method was previously recommended for subclasses to override;\n       `get_content_version` is now preferred as it allows the base\n       class to handle caching of the result.\n    \"\"\"\n    abs_path = cls.get_absolute_path(settings['static_path'], path)\n    return cls._get_cached_version(abs_path)",
                "@classmethod\ndef _get_cached_version(cls, abs_path):\n    with cls._lock:\n        hashes = cls._static_hashes\n        if abs_path not in hashes:\n            try:\n                hashes[abs_path] = cls.get_content_version(abs_path)\n            except Exception:\n                gen_log.error(\"Could not open static file %r\", abs_path)\n                hashes[abs_path] = None\n        hsh = hashes.get(abs_path)\n        if hsh:\n            return hsh\n    return None",
                "def initialize(self, fallback):\n    self.fallback = fallback",
                "def prepare(self):\n    self.fallback(self.request)\n    self._finished = True",
                "def __init__(self, request):\n    pass",
                "def transform_first_chunk(self, status_code, headers, chunk, finishing):\n    return status_code, headers, chunk",
                "def transform_chunk(self, chunk, finishing):\n    return chunk",
                "def __init__(self, request):\n    self._gzipping = \"gzip\" in request.headers.get(\"Accept-Encoding\", \"\")",
                "def _compressible_type(self, ctype):\n    return ctype.startswith('text/') or ctype in self.CONTENT_TYPES",
                "def transform_first_chunk(self, status_code, headers, chunk, finishing):\n    if 'Vary' in headers:\n        headers['Vary'] += b', Accept-Encoding'\n    else:\n        headers['Vary'] = b'Accept-Encoding'\n    if self._gzipping:\n        ctype = _unicode(headers.get(\"Content-Type\", \"\")).split(\";\")[0]\n        self._gzipping = self._compressible_type(ctype) and \\\n            (not finishing or len(chunk) >= self.MIN_LENGTH) and \\\n            (\"Content-Encoding\" not in headers)\n    if self._gzipping:\n        headers[\"Content-Encoding\"] = \"gzip\"\n        self._gzip_value = BytesIO()\n        self._gzip_file = gzip.GzipFile(mode=\"w\", fileobj=self._gzip_value)\n        chunk = self.transform_chunk(chunk, finishing)\n        if \"Content-Length\" in headers:\n            # The original content length is no longer correct.\n            # If this is the last (and only) chunk, we can set the new\n            # content-length; otherwise we remove it and fall back to\n            # chunked encoding.\n            if finishing:\n                headers[\"Content-Length\"] = str(len(chunk))\n            else:\n                del headers[\"Content-Length\"]\n    return status_code, headers, chunk",
                "def transform_chunk(self, chunk, finishing):\n    if self._gzipping:\n        self._gzip_file.write(chunk)\n        if finishing:\n            self._gzip_file.close()\n        else:\n            self._gzip_file.flush()\n        chunk = self._gzip_value.getvalue()\n        self._gzip_value.truncate(0)\n        self._gzip_value.seek(0)\n    return chunk",
                "@functools.wraps(method)\ndef wrapper(self, *args, **kwargs):\n    if not self.current_user:\n        if self.request.method in (\"GET\", \"HEAD\"):\n            url = self.get_login_url()\n            if \"?\" not in url:\n                if urlparse.urlsplit(url).scheme:\n                    # if login url is absolute, make next absolute too\n                    next_url = self.request.full_url()\n                else:\n                    next_url = self.request.uri\n                url += \"?\" + urlencode(dict(next=next_url))\n            self.redirect(url)\n            return\n        raise HTTPError(403)\n    return method(self, *args, **kwargs)",
                "def __init__(self, handler):\n    self.handler = handler\n    self.request = handler.request\n    self.ui = handler.ui\n    self.locale = handler.locale",
                "@property\ndef current_user(self):\n    return self.handler.current_user",
                "def render(self, *args, **kwargs):\n    \"\"\"Override in subclasses to return this module's output.\"\"\"\n    raise NotImplementedError()",
                "def embedded_javascript(self):\n    \"\"\"Override to return a JavaScript string\n    to be embedded in the page.\"\"\"\n    return None",
                "def javascript_files(self):\n    \"\"\"Override to return a list of JavaScript files needed by this module.\n\n    If the return values are relative paths, they will be passed to\n    `RequestHandler.static_url`; otherwise they will be used as-is.\n    \"\"\"\n    return None",
                "def embedded_css(self):\n    \"\"\"Override to return a CSS string\n    that will be embedded in the page.\"\"\"\n    return None",
                "def css_files(self):\n    \"\"\"Override to returns a list of CSS files required by this module.\n\n    If the return values are relative paths, they will be passed to\n    `RequestHandler.static_url`; otherwise they will be used as-is.\n    \"\"\"\n    return None",
                "def html_head(self):\n    \"\"\"Override to return an HTML string that will be put in the <head/>\n    element.\n    \"\"\"\n    return None",
                "def html_body(self):\n    \"\"\"Override to return an HTML string that will be put at the end of\n    the <body/> element.\n    \"\"\"\n    return None",
                "def render_string(self, path, **kwargs):\n    \"\"\"Renders a template and returns it as a string.\"\"\"\n    return self.handler.render_string(path, **kwargs)",
                "def render(self, text, **kwargs):\n    return escape.linkify(text, **kwargs)",
                "def render(self):\n    return self.handler.xsrf_form_html()",
                "def __init__(self, handler):\n    super(TemplateModule, self).__init__(handler)\n    # keep resources in both a list and a dict to preserve order\n    self._resource_list = []\n    self._resource_dict = {}",
                "def render(self, path, **kwargs):\n    def set_resources(**kwargs):\n        if path not in self._resource_dict:\n            self._resource_list.append(kwargs)\n            self._resource_dict[path] = kwargs\n        else:\n            if self._resource_dict[path] != kwargs:\n                raise ValueError(\"set_resources called with different \"\n                                 \"resources for the same template\")\n        return \"\"\n    return self.render_string(path, set_resources=set_resources,\n                              **kwargs)",
                "def _get_resources(self, key):\n    return (r[key] for r in self._resource_list if key in r)",
                "def embedded_javascript(self):\n    return \"\\n\".join(self._get_resources(\"embedded_javascript\"))",
                "def javascript_files(self):\n    result = []\n    for f in self._get_resources(\"javascript_files\"):\n        if isinstance(f, (unicode_type, bytes)):\n            result.append(f)\n        else:\n            result.extend(f)\n    return result",
                "def embedded_css(self):\n    return \"\\n\".join(self._get_resources(\"embedded_css\"))",
                "def css_files(self):\n    result = []\n    for f in self._get_resources(\"css_files\"):\n        if isinstance(f, (unicode_type, bytes)):\n            result.append(f)\n        else:\n            result.extend(f)\n    return result",
                "def html_head(self):\n    return \"\".join(self._get_resources(\"html_head\"))",
                "def html_body(self):\n    return \"\".join(self._get_resources(\"html_body\"))",
                "def __init__(self, handler, ui_modules):\n    self.handler = handler\n    self.ui_modules = ui_modules",
                "def __getitem__(self, key):\n    return self.handler._ui_module(key, self.ui_modules[key])",
                "def __getattr__(self, key):\n    try:\n        return self[key]\n    except KeyError as e:\n        raise AttributeError(str(e))",
                "def __init__(self, pattern, handler, kwargs=None, name=None):\n    \"\"\"Parameters:\n\n    * ``pattern``: Regular expression to be matched.  Any groups\n      in the regex will be passed in to the handler's get/post/etc\n      methods as arguments.\n\n    * ``handler``: `RequestHandler` subclass to be invoked.\n\n    * ``kwargs`` (optional): A dictionary of additional arguments\n      to be passed to the handler's constructor.\n\n    * ``name`` (optional): A name for this handler.  Used by\n      `Application.reverse_url`.\n    \"\"\"\n    if not pattern.endswith('$'):\n        pattern += '$'\n    self.regex = re.compile(pattern)\n    assert len(self.regex.groupindex) in (0, self.regex.groups), \\\n        (\"groups in url regexes must either be all named or all \"\n         \"positional: %r\" % self.regex.pattern)\n\n    if isinstance(handler, str):\n        # import the Module and instantiate the class\n        # Must be a fully qualified name (module.ClassName)\n        handler = import_object(handler)\n\n    self.handler_class = handler\n    self.kwargs = kwargs or {}\n    self.name = name\n    self._path, self._group_count = self._find_groups()",
                "def __repr__(self):\n    return '%s(%r, %s, kwargs=%r, name=%r)' % \\\n        (self.__class__.__name__, self.regex.pattern,\n         self.handler_class, self.kwargs, self.name)",
                "def _find_groups(self):\n    \"\"\"Returns a tuple (reverse string, group count) for a url.\n\n    For example: Given the url pattern /([0-9]{4})/([a-z-]+)/, this method\n    would return ('/%s/%s/', 2).\n    \"\"\"\n    pattern = self.regex.pattern\n    if pattern.startswith('^'):\n        pattern = pattern[1:]\n    if pattern.endswith('$'):\n        pattern = pattern[:-1]\n\n    if self.regex.groups != pattern.count('('):\n        # The pattern is too complicated for our simplistic matching,\n        # so we can't support reversing it.\n        return (None, None)\n\n    pieces = []\n    for fragment in pattern.split('('):\n        if ')' in fragment:\n            paren_loc = fragment.index(')')\n            if paren_loc >= 0:\n                pieces.append('%s' + fragment[paren_loc + 1:])\n        else:\n            pieces.append(fragment)\n\n    return (''.join(pieces), self.regex.groups)",
                "def reverse(self, *args):\n    assert self._path is not None, \\\n        \"Cannot reverse url regex \" + self.regex.pattern\n    assert len(args) == self._group_count, \"required number of arguments \"\\\n        \"not found\"\n    if not len(args):\n        return self._path\n    converted_args = []\n    for a in args:\n        if not isinstance(a, (unicode_type, bytes)):\n            a = str(a)\n        converted_args.append(escape.url_escape(utf8(a), plus=False))\n    return self._path % tuple(converted_args)",
                "def _time_independent_equals(a, b):\n    if len(a) != len(b):\n        return False\n    result = 0\n    if isinstance(a[0], int):  # python3 byte strings\n        for x, y in zip(a, b):\n            result |= x ^ y\n    else:  # python2\n        for x, y in zip(a, b):\n            result |= ord(x) ^ ord(y)\n    return result == 0",
                "def _consume_field(s):\n    length, _, rest = s.partition(b':')\n    n = int(length)\n    field_value = rest[:n]\n    # In python 3, indexing bytes returns small integers; we must\n    # use a slice to get a byte string as in python 2.\n    if rest[n:n + 1] != b'|':\n        raise ValueError(\"malformed v2 signed value field\")\n    rest = rest[n + 1:]\n    return field_value, rest",
                "def is_absolute(path):\n    return any(path.startswith(x) for x in [\"/\", \"http:\", \"https:\"])",
                "def render(*args, **kwargs):\n    if not hasattr(self, \"_active_modules\"):\n        self._active_modules = {}\n    if name not in self._active_modules:\n        self._active_modules[name] = module(self)\n    rendered = self._active_modules[name].render(*args, **kwargs)\n    return rendered",
                "def set_resources(**kwargs):\n    if path not in self._resource_dict:\n        self._resource_list.append(kwargs)\n        self._resource_dict[path] = kwargs\n    else:\n        if self._resource_dict[path] != kwargs:\n            raise ValueError(\"set_resources called with different \"\n                             \"resources for the same template\")\n    return \"\"",
                "def format_field(s):\n    return utf8(\"%d:\" % len(s)) + utf8(s)",
                "def future_complete(f):\n    f.result()\n    if not self._finished:\n        self.finish()"
            ],
            "inscope_function_signatures": [
                "asynchronous(method)",
                "stream_request_body(cls)",
                "_has_stream_request_body(cls)",
                "removeslash(method)",
                "addslash(method)",
                "authenticated(method)",
                "create_signed_value(secret, name, value, version=None, clock=None, key_version=None)",
                "_get_version(value)",
                "decode_signed_value(secret, name, value, max_age_days=31, clock=None, min_version=None)",
                "_decode_signed_value_v1(secret, name, value, max_age_days, clock)",
                "_decode_fields_v2(value)",
                "_decode_signed_value_v2(secret, name, value, max_age_days, clock)",
                "get_signature_key_version(value)",
                "_create_signature_v1(secret, *parts)",
                "_create_signature_v2(secret, s)",
                "_unquote_or_none(s)",
                "__init__(self, application, request, **kwargs)",
                "initialize(self)",
                "settings(self)",
                "head(self, *args, **kwargs)",
                "get(self, *args, **kwargs)",
                "post(self, *args, **kwargs)",
                "delete(self, *args, **kwargs)",
                "patch(self, *args, **kwargs)",
                "put(self, *args, **kwargs)",
                "options(self, *args, **kwargs)",
                "prepare(self)",
                "on_finish(self)",
                "on_connection_close(self)",
                "clear(self)",
                "set_default_headers(self)",
                "set_status(self, status_code, reason=None)",
                "get_status(self)",
                "set_header(self, name, value)",
                "add_header(self, name, value)",
                "clear_header(self, name)",
                "_convert_header_value(self, value)",
                "get_argument(self, name, default=_ARG_DEFAULT, strip=True)",
                "get_arguments(self, name, strip=True)",
                "get_body_argument(self, name, default=_ARG_DEFAULT, strip=True)",
                "get_body_arguments(self, name, strip=True)",
                "get_query_argument(self, name, default=_ARG_DEFAULT, strip=True)",
                "get_query_arguments(self, name, strip=True)",
                "_get_argument(self, name, default, source, strip=True)",
                "_get_arguments(self, name, source, strip=True)",
                "decode_argument(self, value, name=None)",
                "cookies(self)",
                "get_cookie(self, name, default=None)",
                "set_cookie(self, name, value, domain=None, expires=None, path='/', expires_days=None, **kwargs)",
                "clear_cookie(self, name, path='/', domain=None)",
                "clear_all_cookies(self, path='/', domain=None)",
                "set_secure_cookie(self, name, value, expires_days=30, version=None, **kwargs)",
                "create_signed_value(self, name, value, version=None)",
                "get_secure_cookie(self, name, value=None, max_age_days=31, min_version=None)",
                "get_secure_cookie_key_version(self, name, value=None)",
                "redirect(self, url, permanent=False, status=None)",
                "write(self, chunk)",
                "render(self, template_name, **kwargs)",
                "render_string(self, template_name, **kwargs)",
                "get_template_namespace(self)",
                "create_template_loader(self, template_path)",
                "flush(self, include_footers=False, callback=None)",
                "finish(self, chunk=None)",
                "send_error(self, status_code=500, **kwargs)",
                "write_error(self, status_code, **kwargs)",
                "locale(self)",
                "locale(self, value)",
                "get_user_locale(self)",
                "get_browser_locale(self, default='en_US')",
                "current_user(self)",
                "current_user(self, value)",
                "get_current_user(self)",
                "get_login_url(self)",
                "get_template_path(self)",
                "xsrf_token(self)",
                "_get_raw_xsrf_token(self)",
                "_decode_xsrf_token(self, cookie)",
                "check_xsrf_cookie(self)",
                "xsrf_form_html(self)",
                "static_url(self, path, include_host=None, **kwargs)",
                "require_setting(self, name, feature='this feature')",
                "reverse_url(self, name, *args)",
                "compute_etag(self)",
                "set_etag_header(self)",
                "check_etag_header(self)",
                "_stack_context_handle_exception(self, type, value, traceback)",
                "_execute(self, transforms, *args, **kwargs)",
                "data_received(self, chunk)",
                "_log(self)",
                "_request_summary(self)",
                "_handle_request_exception(self, e)",
                "log_exception(self, typ, value, tb)",
                "_ui_module(self, name, module)",
                "_ui_method(self, method)",
                "_clear_headers_for_304(self)",
                "wrapper(self, *args, **kwargs)",
                "wrapper(self, *args, **kwargs)",
                "wrapper(self, *args, **kwargs)",
                "__init__(self, handlers=None, default_host='', transforms=None, **settings)",
                "listen(self, port, address='', **kwargs)",
                "add_handlers(self, host_pattern, host_handlers)",
                "add_transform(self, transform_class)",
                "_get_host_handlers(self, request)",
                "_load_ui_methods(self, methods)",
                "_load_ui_modules(self, modules)",
                "start_request(self, server_conn, request_conn)",
                "__call__(self, request)",
                "reverse_url(self, name, *args)",
                "log_request(self, handler)",
                "__init__(self, application, connection)",
                "headers_received(self, start_line, headers)",
                "set_request(self, request)",
                "_find_handler(self)",
                "data_received(self, data)",
                "finish(self)",
                "on_connection_close(self)",
                "execute(self)",
                "__init__(self, status_code, log_message=None, *args, **kwargs)",
                "__str__(self)",
                "__init__(self, arg_name)",
                "initialize(self, status_code)",
                "prepare(self)",
                "check_xsrf_cookie(self)",
                "initialize(self, url, permanent=True)",
                "get(self)",
                "initialize(self, path, default_filename=None)",
                "reset(cls)",
                "head(self, path)",
                "get(self, path, include_body=True)",
                "compute_etag(self)",
                "set_headers(self)",
                "should_return_304(self)",
                "get_absolute_path(cls, root, path)",
                "validate_absolute_path(self, root, absolute_path)",
                "get_content(cls, abspath, start=None, end=None)",
                "get_content_version(cls, abspath)",
                "_stat(self)",
                "get_content_size(self)",
                "get_modified_time(self)",
                "get_content_type(self)",
                "set_extra_headers(self, path)",
                "get_cache_time(self, path, modified, mime_type)",
                "make_static_url(cls, settings, path, include_version=True)",
                "parse_url_path(self, url_path)",
                "get_version(cls, settings, path)",
                "_get_cached_version(cls, abs_path)",
                "initialize(self, fallback)",
                "prepare(self)",
                "__init__(self, request)",
                "transform_first_chunk(self, status_code, headers, chunk, finishing)",
                "transform_chunk(self, chunk, finishing)",
                "__init__(self, request)",
                "_compressible_type(self, ctype)",
                "transform_first_chunk(self, status_code, headers, chunk, finishing)",
                "transform_chunk(self, chunk, finishing)",
                "wrapper(self, *args, **kwargs)",
                "__init__(self, handler)",
                "current_user(self)",
                "render(self, *args, **kwargs)",
                "embedded_javascript(self)",
                "javascript_files(self)",
                "embedded_css(self)",
                "css_files(self)",
                "html_head(self)",
                "html_body(self)",
                "render_string(self, path, **kwargs)",
                "render(self, text, **kwargs)",
                "render(self)",
                "__init__(self, handler)",
                "render(self, path, **kwargs)",
                "_get_resources(self, key)",
                "embedded_javascript(self)",
                "javascript_files(self)",
                "embedded_css(self)",
                "css_files(self)",
                "html_head(self)",
                "html_body(self)",
                "__init__(self, handler, ui_modules)",
                "__getitem__(self, key)",
                "__getattr__(self, key)",
                "__init__(self, pattern, handler, kwargs=None, name=None)",
                "__repr__(self)",
                "_find_groups(self)",
                "reverse(self, *args)",
                "_time_independent_equals(a, b)",
                "_consume_field(s)",
                "is_absolute(path)",
                "render(*args, **kwargs)",
                "set_resources(**kwargs)",
                "format_field(s)",
                "future_complete(f)"
            ],
            "variables_in_file": {
                "ImportError": [
                    106,
                    101,
                    111
                ],
                "MIN_SUPPORTED_SIGNED_VALUE_VERSION": [
                    115
                ],
                "MAX_SUPPORTED_SIGNED_VALUE_VERSION": [
                    123
                ],
                "DEFAULT_SIGNED_VALUE_VERSION": [
                    2984,
                    131
                ],
                "DEFAULT_SIGNED_VALUE_MIN_VERSION": [
                    139,
                    3062
                ],
                "object": [
                    2881,
                    2721,
                    2865,
                    148,
                    2612
                ],
                "SUPPORTED_METHODS": [
                    154
                ],
                "_template_loaders": [
                    157
                ],
                "_template_loader_lock": [
                    158
                ],
                "threading.Lock": [
                    2194,
                    158
                ],
                "threading": [
                    2194,
                    158
                ],
                "_remove_control_chars_regex": [
                    159
                ],
                "re.compile": [
                    1805,
                    1807,
                    2900,
                    3031,
                    350,
                    159
                ],
                "re": [
                    1344,
                    522,
                    1805,
                    1807,
                    2900,
                    3031,
                    1752,
                    350,
                    159
                ],
                "__init__": [
                    162,
                    2092,
                    2813
                ],
                "super": [
                    162,
                    2092,
                    2813
                ],
                "RequestHandler": [
                    2112,
                    162,
                    803,
                    802,
                    805,
                    807,
                    1997,
                    1998,
                    368,
                    1617,
                    2097,
                    2129,
                    1624,
                    473,
                    2588
                ],
                "self": [
                    2048,
                    2049,
                    2050,
                    2052,
                    2056,
                    2057,
                    2058,
                    2059,
                    2092,
                    2094,
                    2100,
                    2103,
                    2122,
                    2123,
                    2126,
                    2197,
                    2198,
                    2206,
                    162,
                    2211,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    2213,
                    2214,
                    2215,
                    2216,
                    2219,
                    2220,
                    180,
                    2222,
                    182,
                    183,
                    184,
                    185,
                    2227,
                    2233,
                    2240,
                    2241,
                    2242,
                    2255,
                    2256,
                    211,
                    2269,
                    2272,
                    2277,
                    2278,
                    2282,
                    2293,
                    2303,
                    2304,
                    2306,
                    2307,
                    2309,
                    2311,
                    2313,
                    2316,
                    2318,
                    2320,
                    275,
                    276,
                    277,
                    278,
                    2327,
                    282,
                    2332,
                    287,
                    288,
                    289,
                    290,
                    2337,
                    311,
                    313,
                    316,
                    322,
                    331,
                    2384,
                    2386,
                    339,
                    2390,
                    2391,
                    2393,
                    347,
                    348,
                    2397,
                    385,
                    400,
                    2456,
                    2457,
                    2458,
                    416,
                    2471,
                    428,
                    2482,
                    444,
                    445,
                    2492,
                    456,
                    459,
                    461,
                    2510,
                    469,
                    502,
                    506,
                    507,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    2605,
                    2960,
                    560,
                    2608,
                    2609,
                    573,
                    574,
                    598,
                    2647,
                    2650,
                    2657,
                    2659,
                    2660,
                    614,
                    615,
                    2662,
                    2664,
                    618,
                    2665,
                    620,
                    2666,
                    2679,
                    2680,
                    2682,
                    2684,
                    637,
                    2685,
                    639,
                    640,
                    2686,
                    2687,
                    649,
                    651,
                    2704,
                    2705,
                    2706,
                    2710,
                    663,
                    2712,
                    2714,
                    669,
                    670,
                    671,
                    2717,
                    2731,
                    2732,
                    2733,
                    2734,
                    689,
                    2738,
                    698,
                    700,
                    704,
                    713,
                    2784,
                    2794,
                    747,
                    2813,
                    766,
                    2815,
                    2816,
                    2820,
                    2821,
                    2822,
                    2824,
                    2828,
                    2832,
                    786,
                    2835,
                    2839,
                    795,
                    2847,
                    2851,
                    804,
                    809,
                    2859,
                    2862,
                    2868,
                    2869,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    831,
                    2872,
                    833,
                    2876,
                    844,
                    2900,
                    2901,
                    2903,
                    2910,
                    2911,
                    2912,
                    2913,
                    866,
                    867,
                    868,
                    869,
                    870,
                    871,
                    2917,
                    873,
                    2918,
                    876,
                    2926,
                    882,
                    883,
                    884,
                    2932,
                    887,
                    888,
                    889,
                    890,
                    892,
                    895,
                    896,
                    2946,
                    2949,
                    2950,
                    2951,
                    904,
                    2954,
                    908,
                    912,
                    913,
                    914,
                    915,
                    916,
                    917,
                    918,
                    919,
                    920,
                    921,
                    922,
                    923,
                    924,
                    925,
                    927,
                    932,
                    934,
                    935,
                    936,
                    937,
                    938,
                    941,
                    2223,
                    954,
                    956,
                    962,
                    967,
                    974,
                    976,
                    979,
                    980,
                    994,
                    996,
                    998,
                    999,
                    1001,
                    1004,
                    1019,
                    1020,
                    1021,
                    1022,
                    1023,
                    1024,
                    1028,
                    1045,
                    1046,
                    1075,
                    1076,
                    1077,
                    1081,
                    1092,
                    1093,
                    1101,
                    1123,
                    1124,
                    1125,
                    1127,
                    1130,
                    1139,
                    1140,
                    1142,
                    1155,
                    1156,
                    1158,
                    1165,
                    1166,
                    1229,
                    1230,
                    1231,
                    1234,
                    1235,
                    1253,
                    1276,
                    1277,
                    1281,
                    1284,
                    1288,
                    1292,
                    1298,
                    1309,
                    1320,
                    1322,
                    1341,
                    1346,
                    1371,
                    1377,
                    1379,
                    1381,
                    1382,
                    1386,
                    1387,
                    1388,
                    1390,
                    1395,
                    1398,
                    1399,
                    1402,
                    1408,
                    1412,
                    1413,
                    1418,
                    1419,
                    1422,
                    1425,
                    1426,
                    1430,
                    1446,
                    1449,
                    1450,
                    1455,
                    1456,
                    1459,
                    1464,
                    1472,
                    1474,
                    1476,
                    1491,
                    1495,
                    1496,
                    1500,
                    1501,
                    1502,
                    1503,
                    1504,
                    1509,
                    1520,
                    1569,
                    1571,
                    1572,
                    1582,
                    1583,
                    1638,
                    1639,
                    1640,
                    1642,
                    1643,
                    1644,
                    1648,
                    1661,
                    1662,
                    1663,
                    1664,
                    1665,
                    1666,
                    1669,
                    1727,
                    1729,
                    1731,
                    1732,
                    1733,
                    1734,
                    1735,
                    1736,
                    1740,
                    1741,
                    1742,
                    1743,
                    1744,
                    1757,
                    1759,
                    1760,
                    1761,
                    1762,
                    1763,
                    1766,
                    1787,
                    1804,
                    1805,
                    1807,
                    1815,
                    1819,
                    1822,
                    1827,
                    1832,
                    1833,
                    1839,
                    1843,
                    1848,
                    1852,
                    1856,
                    1862,
                    1868,
                    1872,
                    1885,
                    1886,
                    1897,
                    1898,
                    1913,
                    1914,
                    1915,
                    1916,
                    1917,
                    1918,
                    1919,
                    1920,
                    1923,
                    1924,
                    1926,
                    1927,
                    1928,
                    1931,
                    1932,
                    1933,
                    1938,
                    1939,
                    1941,
                    1942,
                    1943,
                    1947,
                    1949,
                    1950,
                    1957,
                    1961,
                    1965,
                    1966,
                    1969,
                    1970,
                    1973,
                    1974,
                    1976,
                    1979,
                    1980,
                    1982,
                    1983,
                    1984,
                    1987,
                    1988,
                    1990,
                    1996,
                    2000,
                    2003,
                    2004,
                    2005,
                    2007,
                    2008,
                    2016,
                    2017,
                    2021,
                    2047
                ],
                "self.application": [
                    640,
                    1292,
                    1298,
                    1938,
                    164,
                    1446,
                    1093,
                    844,
                    1101,
                    1996,
                    2000,
                    211,
                    2003,
                    2005,
                    615,
                    618,
                    1387,
                    620,
                    1913
                ],
                "application": [
                    1913,
                    164,
                    181,
                    174
                ],
                "self.request": [
                    896,
                    385,
                    1408,
                    1664,
                    1284,
                    1412,
                    1665,
                    1927,
                    1931,
                    400,
                    2705,
                    914,
                    1939,
                    276,
                    277,
                    278,
                    1045,
                    1046,
                    1943,
                    2710,
                    1947,
                    2332,
                    2712,
                    927,
                    416,
                    1915,
                    932,
                    165,
                    935,
                    1449,
                    1450,
                    428,
                    2732,
                    1663,
                    2608,
                    2227,
                    824,
                    184,
                    1980,
                    573,
                    445,
                    1982,
                    1983,
                    1346,
                    456,
                    1230,
                    1231,
                    2510,
                    2003,
                    2005,
                    2390,
                    2391,
                    1496,
                    1379,
                    1638,
                    1639,
                    1640,
                    1386,
                    1642,
                    876,
                    1643,
                    2282,
                    502,
                    889,
                    506,
                    507,
                    1661,
                    1662,
                    895
                ],
                "request": [
                    1825,
                    165,
                    1831,
                    1931,
                    1873,
                    2647
                ],
                "self._headers_written": [
                    868,
                    869,
                    166,
                    912,
                    663,
                    954
                ],
                "self._finished": [
                    167,
                    904,
                    937,
                    1418,
                    1582,
                    1455,
                    689,
                    2609,
                    979,
                    1399,
                    1464,
                    956
                ],
                "self._auto_finish": [
                    168,
                    1569,
                    1418
                ],
                "self._transforms": [
                    169,
                    892,
                    870,
                    1377
                ],
                "self._prepared_future": [
                    170,
                    1425,
                    1426,
                    1395,
                    1398,
                    1430
                ],
                "self.path_args": [
                    2016,
                    1381,
                    1413,
                    1961,
                    171,
                    1919
                ],
                "self.path_kwargs": [
                    1920,
                    2017,
                    1413,
                    1382,
                    1957,
                    172
                ],
                "self.ui": [
                    833,
                    173,
                    941,
                    2733,
                    180,
                    182
                ],
                "ObjectDict": [
                    173
                ],
                "n": [
                    3116,
                    173,
                    3117,
                    1839,
                    1840,
                    3120,
                    3122,
                    1852,
                    1853
                ],
                "self._ui_method": [
                    173
                ],
                "m": [
                    1856,
                    3043,
                    173,
                    1842,
                    1843,
                    1174,
                    1176,
                    1177,
                    3039,
                    3038,
                    1855
                ],
                "application.ui_methods.items": [
                    174
                ],
                "application.ui_methods": [
                    174
                ],
                "_UIModuleNamespace": [
                    180
                ],
                "application.ui_modules": [
                    181
                ],
                "self.clear": [
                    967,
                    183
                ],
                "self.request.connection.set_close_callback": [
                    184,
                    932
                ],
                "self.request.connection": [
                    184,
                    889,
                    932,
                    896
                ],
                "self.on_connection_close": [
                    184
                ],
                "self.initialize": [
                    185
                ],
                "kwargs": [
                    2050,
                    1669,
                    2821,
                    2822,
                    1288,
                    2824,
                    2829,
                    540,
                    2717,
                    1572,
                    810,
                    185,
                    704,
                    969,
                    970,
                    971,
                    847,
                    976,
                    851,
                    852,
                    600,
                    2911,
                    1504,
                    2784,
                    994,
                    997,
                    1509,
                    1383,
                    2789,
                    1648,
                    1787
                ],
                "self.application.settings": [
                    640,
                    1093,
                    615,
                    618,
                    1387,
                    620,
                    844,
                    1101,
                    1292,
                    1996,
                    2000,
                    211
                ],
                "property": [
                    1064,
                    1103,
                    208,
                    1007,
                    498,
                    2736
                ],
                "HTTPError": [
                    1668,
                    2716,
                    2083,
                    2103,
                    1469,
                    972,
                    2383,
                    1488,
                    1233,
                    1237,
                    214,
                    217,
                    2395,
                    220,
                    2397,
                    223,
                    226,
                    1380,
                    229,
                    232,
                    495,
                    1647
                ],
                "_has_stream_request_body": [
                    1402,
                    275,
                    1933
                ],
                "self.__class__": [
                    1402,
                    275,
                    2917
                ],
                "self.request.body.done": [
                    276
                ],
                "self.request.body": [
                    1408,
                    1927,
                    276,
                    277,
                    278,
                    1980,
                    1982
                ],
                "self.request.body.set_exception": [
                    277
                ],
                "iostream.StreamClosedError": [
                    1409,
                    277,
                    2279
                ],
                "iostream": [
                    1409,
                    277,
                    2279
                ],
                "self.request.body.exception": [
                    278
                ],
                "self._headers": [
                    923,
                    871,
                    873,
                    331,
                    339,
                    915,
                    282,
                    347,
                    348,
                    1341,
                    890
                ],
                "httputil.HTTPHeaders": [
                    282
                ],
                "httputil": [
                    2231,
                    290,
                    1923,
                    361,
                    1673,
                    2057,
                    2257,
                    886,
                    1911,
                    537,
                    282,
                    316,
                    285,
                    1470
                ],
                "tornado.version": [
                    283
                ],
                "tornado": [
                    283
                ],
                "httputil.format_timestamp": [
                    361,
                    285,
                    537
                ],
                "time.time": [
                    2986,
                    1196,
                    1164,
                    3060,
                    285
                ],
                "time": [
                    2986,
                    1196,
                    1164,
                    3060,
                    285
                ],
                "self.set_default_headers": [
                    287
                ],
                "self._write_buffer": [
                    288,
                    866,
                    867,
                    924,
                    918,
                    921,
                    700,
                    1309
                ],
                "self._status_code": [
                    289,
                    322,
                    871,
                    873,
                    887,
                    913,
                    2103,
                    311,
                    920
                ],
                "self._reason": [
                    290,
                    1004,
                    888,
                    313,
                    316
                ],
                "httputil.responses": [
                    2057,
                    290,
                    316,
                    1470
                ],
                "status_code": [
                    1003,
                    2623,
                    974,
                    976,
                    2100,
                    2676,
                    311,
                    316,
                    318,
                    2047
                ],
                "reason": [
                    969,
                    973,
                    974,
                    312,
                    313
                ],
                "escape.native_str": [
                    520,
                    313,
                    521
                ],
                "escape": [
                    770,
                    1253,
                    2789,
                    520,
                    521,
                    751,
                    2959,
                    697,
                    313,
                    3196
                ],
                "KeyError": [
                    2877,
                    317,
                    3143,
                    1887
                ],
                "ValueError": [
                    3136,
                    3168,
                    2825,
                    524,
                    3052,
                    1136,
                    369,
                    3121,
                    3027,
                    3064,
                    1053,
                    318
                ],
                "name": [
                    385,
                    641,
                    3074,
                    3077,
                    520,
                    522,
                    651,
                    524,
                    1292,
                    1294,
                    527,
                    400,
                    528,
                    529,
                    530,
                    1298,
                    3087,
                    416,
                    428,
                    2991,
                    560,
                    1845,
                    1846,
                    1847,
                    1848,
                    444,
                    573,
                    574,
                    1859,
                    1862,
                    3015,
                    456,
                    331,
                    459,
                    3149,
                    462,
                    339,
                    468,
                    469,
                    598,
                    347,
                    348,
                    1885,
                    1502,
                    1503,
                    1504,
                    1886,
                    1887,
                    2912,
                    622,
                    496,
                    506,
                    507,
                    639
                ],
                "self._convert_header_value": [
                    339,
                    331
                ],
                "value": [
                    641,
                    3074,
                    1028,
                    3077,
                    521,
                    522,
                    650,
                    524,
                    651,
                    652,
                    3084,
                    529,
                    3089,
                    3093,
                    3102,
                    3105,
                    2989,
                    2991,
                    2992,
                    2993,
                    3125,
                    1081,
                    3135,
                    3138,
                    3016,
                    331,
                    1488,
                    1489,
                    1490,
                    339,
                    1491,
                    1492,
                    598,
                    1496,
                    1369,
                    3162,
                    1371,
                    3163,
                    3038,
                    3167,
                    353,
                    355,
                    356,
                    357,
                    359,
                    360,
                    361,
                    363,
                    493,
                    622,
                    367,
                    368,
                    369,
                    370,
                    496,
                    3065,
                    507,
                    3068,
                    3069,
                    638,
                    639
                ],
                "self._headers.add": [
                    339
                ],
                "_INVALID_HEADER_CHAR_RE": [
                    350
                ],
                "isinstance": [
                    2957,
                    398,
                    2448,
                    1810,
                    2840,
                    668,
                    2972,
                    2852,
                    1453,
                    1838,
                    1841,
                    691,
                    693,
                    696,
                    1851,
                    1469,
                    1854,
                    1858,
                    3140,
                    3019,
                    972,
                    719,
                    1488,
                    470,
                    728,
                    2905,
                    353,
                    2273,
                    355,
                    357,
                    360,
                    617
                ],
                "bytes": [
                    353,
                    2273,
                    2852,
                    2957,
                    719,
                    2448,
                    2840,
                    691,
                    728
                ],
                "unicode_type": [
                    355,
                    2852,
                    2957,
                    719,
                    2840,
                    691,
                    470,
                    728
                ],
                "value.encode": [
                    356
                ],
                "numbers.Integral": [
                    357
                ],
                "numbers": [
                    357
                ],
                "str": [
                    3013,
                    1958,
                    359,
                    2988,
                    2318,
                    1134,
                    2958,
                    2673,
                    2905,
                    2878
                ],
                "datetime.datetime": [
                    2336,
                    360,
                    2316,
                    559,
                    2483,
                    534
                ],
                "datetime": [
                    2336,
                    360,
                    2316,
                    2317,
                    559,
                    2483,
                    534
                ],
                "TypeError": [
                    1863,
                    1193,
                    1417,
                    363,
                    1394,
                    1618,
                    695,
                    1625,
                    1053
                ],
                "len": [
                    3010,
                    3138,
                    2660,
                    2951,
                    2953,
                    3085,
                    367,
                    2673,
                    1811,
                    2901,
                    2969,
                    1050,
                    924,
                    2430
                ],
                "RequestHandler._INVALID_HEADER_CHAR_RE.search": [
                    368
                ],
                "RequestHandler._INVALID_HEADER_CHAR_RE": [
                    368
                ],
                "_ARG_DEFAULT": [
                    402,
                    372,
                    430,
                    374
                ],
                "self._get_argument": [
                    416,
                    385,
                    444
                ],
                "default": [
                    416,
                    385,
                    1062,
                    461,
                    508,
                    463,
                    444
                ],
                "self.request.arguments": [
                    400,
                    385,
                    2510
                ],
                "strip": [
                    385,
                    417,
                    456,
                    459,
                    428,
                    398,
                    400,
                    474,
                    445
                ],
                "bool": [
                    398
                ],
                "self._get_arguments": [
                    400,
                    459,
                    428,
                    456
                ],
                "self.request.body_arguments": [
                    416,
                    428
                ],
                "self.request.query_arguments": [
                    456,
                    445
                ],
                "args": [
                    2049,
                    2051,
                    1669,
                    2951,
                    2953,
                    2956,
                    1298,
                    2717,
                    1572,
                    459,
                    460,
                    464,
                    1491,
                    1493,
                    1886,
                    1504,
                    1381,
                    1509,
                    1648
                ],
                "source": [
                    459,
                    468
                ],
                "self._ARG_DEFAULT": [
                    461
                ],
                "MissingArgumentError": [
                    2092,
                    462
                ],
                "values": [
                    713,
                    467,
                    476,
                    477
                ],
                "v": [
                    546,
                    549,
                    1382,
                    1383,
                    1958,
                    1959,
                    468,
                    469,
                    470,
                    473,
                    475,
                    476,
                    540
                ],
                "source.get": [
                    468
                ],
                "self.decode_argument": [
                    1381,
                    469,
                    1382
                ],
                "RequestHandler._remove_control_chars_regex.sub": [
                    473
                ],
                "RequestHandler._remove_control_chars_regex": [
                    473
                ],
                "v.strip": [
                    475
                ],
                "values.append": [
                    476
                ],
                "_unicode": [
                    2658,
                    493
                ],
                "UnicodeDecodeError": [
                    494
                ],
                "self.request.cookies": [
                    506,
                    507,
                    573,
                    502
                ],
                "re.search": [
                    522
                ],
                "hasattr": [
                    1123,
                    1155,
                    525,
                    882,
                    1075,
                    2965,
                    1846,
                    2456,
                    1019,
                    1500,
                    927
                ],
                "self._new_cookie": [
                    526,
                    527,
                    528,
                    529,
                    530,
                    883
                ],
                "Cookie.SimpleCookie": [
                    526
                ],
                "Cookie": [
                    526
                ],
                "morsel": [
                    549,
                    530,
                    532,
                    537,
                    539
                ],
                "domain": [
                    561,
                    531,
                    532,
                    574
                ],
                "expires_days": [
                    1139,
                    1141,
                    533,
                    535,
                    600
                ],
                "expires": [
                    559,
                    560,
                    533,
                    534,
                    536,
                    537
                ],
                "datetime.datetime.utcnow": [
                    2316,
                    534,
                    559
                ],
                "datetime.timedelta": [
                    2317,
                    534,
                    559
                ],
                "path": [
                    768,
                    769,
                    2820,
                    2822,
                    1288,
                    2569,
                    2824,
                    2828,
                    2197,
                    538,
                    539,
                    2206,
                    2211,
                    2212,
                    560,
                    2356,
                    574,
                    1744,
                    1751,
                    2784,
                    740,
                    2532,
                    2536,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    764,
                    765,
                    766,
                    767
                ],
                "k": [
                    546,
                    549,
                    1382,
                    1383,
                    1958,
                    1959,
                    540,
                    541,
                    542
                ],
                "kwargs.items": [
                    540,
                    1383
                ],
                "self.set_cookie": [
                    560,
                    1140,
                    598
                ],
                "self.clear_cookie": [
                    574
                ],
                "self.create_signed_value": [
                    598
                ],
                "version": [
                    3073,
                    3076,
                    1158,
                    1160,
                    1162,
                    1165,
                    1177,
                    1178,
                    1185,
                    1190,
                    2983,
                    2984,
                    1197,
                    2990,
                    2994,
                    3021,
                    3027,
                    599,
                    3163,
                    3164,
                    3040,
                    3043,
                    1124,
                    3044,
                    3051,
                    3053,
                    622,
                    3054,
                    1138,
                    3069,
                    3071
                ],
                "self.require_setting": [
                    1092,
                    614,
                    649,
                    1276,
                    637
                ],
                "secret": [
                    3074,
                    3140,
                    3077,
                    3142,
                    615,
                    3175,
                    617,
                    3146,
                    3019,
                    622,
                    2991,
                    3022,
                    3024,
                    3087,
                    3182
                ],
                "key_version": [
                    3171,
                    3013,
                    3142,
                    616,
                    3020,
                    620,
                    3022,
                    623,
                    3126,
                    3130,
                    3167,
                    3135
                ],
                "dict": [
                    1858,
                    3140,
                    1957,
                    1382,
                    617,
                    3019,
                    1839,
                    1970,
                    691,
                    822,
                    1942,
                    696,
                    2713,
                    1852
                ],
                "self.application.settings.get": [
                    618,
                    1387,
                    1996,
                    1292,
                    1101,
                    2000
                ],
                "Exception": [
                    963,
                    1188,
                    3109,
                    2024,
                    619,
                    1420,
                    1293,
                    1198,
                    1423,
                    2064,
                    977,
                    2579,
                    1460,
                    3157,
                    664,
                    1370
                ],
                "create_signed_value": [
                    622
                ],
                "self.get_cookie": [
                    651,
                    1156,
                    639
                ],
                "decode_signed_value": [
                    640
                ],
                "max_age_days": [
                    641,
                    3075,
                    3078,
                    3152,
                    3092
                ],
                "min_version": [
                    642,
                    3061,
                    3062,
                    3063,
                    3064,
                    3071
                ],
                "get_signature_key_version": [
                    652
                ],
                "status": [
                    665,
                    666,
                    668,
                    669
                ],
                "permanent": [
                    666,
                    2123
                ],
                "int": [
                    1184,
                    3043,
                    2972,
                    1196,
                    2988,
                    1134,
                    3116,
                    3151,
                    3091,
                    1177,
                    3130,
                    668
                ],
                "self.set_status": [
                    2240,
                    974,
                    2223,
                    2255,
                    2100,
                    919,
                    669
                ],
                "self.set_header": [
                    2241,
                    2242,
                    2307,
                    996,
                    2311,
                    1322,
                    2316,
                    2318,
                    2256,
                    2269,
                    698,
                    925,
                    670,
                    2303
                ],
                "utf8": [
                    774,
                    3084,
                    2959,
                    1174,
                    1181,
                    670,
                    1183,
                    1192,
                    1194,
                    2988,
                    2989,
                    699,
                    1341,
                    1346,
                    3010,
                    716,
                    3149,
                    1236,
                    725,
                    3162,
                    734,
                    737,
                    3175,
                    3177,
                    3178,
                    1134,
                    3182,
                    3183,
                    3184,
                    755,
                    3068
                ],
                "url": [
                    2532,
                    2534,
                    2122,
                    2538,
                    2540,
                    2706,
                    2707,
                    2708,
                    2962,
                    2713,
                    2714,
                    670
                ],
                "self.finish": [
                    962,
                    999,
                    1001,
                    1419,
                    1583,
                    1456,
                    786,
                    980,
                    671
                ],
                "RuntimeError": [
                    905,
                    690
                ],
                "chunk": [
                    896,
                    2688,
                    907,
                    908,
                    2451,
                    2452,
                    691,
                    693,
                    696,
                    697,
                    699,
                    700,
                    2623,
                    2626,
                    2685,
                    866,
                    2275,
                    2660,
                    2277,
                    871,
                    874,
                    2666,
                    877,
                    2673,
                    2676,
                    2680,
                    890,
                    2427,
                    2428,
                    893,
                    2430,
                    2431
                ],
                "message": [
                    2055,
                    2059,
                    2061,
                    692,
                    694,
                    695
                ],
                "list": [
                    1745,
                    1810,
                    1841,
                    1492,
                    693,
                    1854
                ],
                "escape.json_encode": [
                    697
                ],
                "self._write_buffer.append": [
                    700
                ],
                "html": [
                    704,
                    773,
                    774,
                    778,
                    779,
                    781,
                    782,
                    784,
                    785,
                    754,
                    755,
                    786,
                    759,
                    760
                ],
                "self.render_string": [
                    704,
                    2828
                ],
                "template_name": [
                    704,
                    808
                ],
                "js_embed": [
                    707,
                    716,
                    756,
                    758
                ],
                "js_files": [
                    708,
                    741,
                    745,
                    720,
                    722
                ],
                "css_embed": [
                    725,
                    776,
                    709,
                    775
                ],
                "css_files": [
                    710,
                    761,
                    729,
                    731,
                    764
                ],
                "html_heads": [
                    780,
                    782,
                    734,
                    711
                ],
                "html_bodies": [
                    712,
                    737,
                    785,
                    783
                ],
                "module": [
                    713,
                    714,
                    1503,
                    717,
                    723,
                    726,
                    732,
                    735
                ],
                "getattr": [
                    1281,
                    1412,
                    713,
                    1839,
                    1626,
                    1852
                ],
                "embed_part": [
                    714,
                    715,
                    716,
                    723,
                    724,
                    725
                ],
                "module.embedded_javascript": [
                    714
                ],
                "js_embed.append": [
                    716
                ],
                "file_part": [
                    717,
                    718,
                    719,
                    720,
                    722,
                    726,
                    727,
                    728,
                    729,
                    731
                ],
                "module.javascript_files": [
                    717
                ],
                "js_files.append": [
                    720
                ],
                "js_files.extend": [
                    722
                ],
                "module.embedded_css": [
                    723
                ],
                "css_embed.append": [
                    725
                ],
                "module.css_files": [
                    726
                ],
                "css_files.append": [
                    729
                ],
                "css_files.extend": [
                    731
                ],
                "head_part": [
                    732,
                    733,
                    734
                ],
                "module.html_head": [
                    732
                ],
                "html_heads.append": [
                    734
                ],
                "body_part": [
                    736,
                    737,
                    735
                ],
                "module.html_body": [
                    735
                ],
                "html_bodies.append": [
                    737
                ],
                "any": [
                    740
                ],
                "path.startswith": [
                    740
                ],
                "x": [
                    2976,
                    2977,
                    740,
                    1356,
                    2973,
                    2974
                ],
                "paths": [
                    768,
                    772,
                    743,
                    749,
                    753,
                    762
                ],
                "unique_paths": [
                    769,
                    744,
                    748,
                    750,
                    763,
                    767
                ],
                "set": [
                    744,
                    2641,
                    763
                ],
                "is_absolute": [
                    746,
                    765
                ],
                "self.static_url": [
                    747,
                    829,
                    766
                ],
                "paths.append": [
                    768,
                    749
                ],
                "unique_paths.add": [
                    769,
                    750
                ],
                "js": [
                    760,
                    755,
                    757,
                    751
                ],
                "join": [
                    770,
                    866,
                    2946,
                    3011,
                    776,
                    1130,
                    2859,
                    782,
                    751,
                    2862,
                    785,
                    2992,
                    2835,
                    758,
                    1982,
                    2847
                ],
                "escape.xhtml_escape": [
                    770,
                    1253,
                    751
                ],
                "p": [
                    753,
                    770,
                    772,
                    751
                ],
                "sloc": [
                    760,
                    754,
                    755,
                    759
                ],
                "html.rindex": [
                    754,
                    759
                ],
                "css": [
                    776,
                    770,
                    779,
                    774
                ],
                "hloc": [
                    773,
                    774,
                    778,
                    779,
                    781,
                    782,
                    784,
                    785
                ],
                "html.index": [
                    784,
                    778,
                    781,
                    773
                ],
                "template_path": [
                    801,
                    803,
                    804,
                    805,
                    807,
                    852,
                    795,
                    796
                ],
                "self.get_template_path": [
                    795
                ],
                "frame": [
                    800,
                    801,
                    797,
                    798,
                    799
                ],
                "sys._getframe": [
                    797
                ],
                "sys": [
                    1472,
                    1474,
                    1476,
                    1459,
                    797
                ],
                "web_file": [
                    798,
                    799
                ],
                "frame.f_code.co_filename": [
                    801,
                    798,
                    799
                ],
                "frame.f_code": [
                    801,
                    798,
                    799
                ],
                "frame.f_back": [
                    800
                ],
                "os.path.dirname": [
                    801
                ],
                "os.path": [
                    801,
                    2379,
                    2382,
                    2385,
                    2356,
                    2551,
                    2552,
                    2393,
                    2394,
                    2396
                ],
                "os": [
                    801,
                    1129,
                    2457,
                    2379,
                    1163,
                    2382,
                    2385,
                    2356,
                    2551,
                    2552,
                    2393,
                    2394,
                    2396
                ],
                "RequestHandler._template_loader_lock": [
                    802,
                    1997
                ],
                "RequestHandler._template_loaders": [
                    803,
                    805,
                    1998,
                    807
                ],
                "loader": [
                    804,
                    805,
                    807,
                    808,
                    1998,
                    1999
                ],
                "self.create_template_loader": [
                    804
                ],
                "t": [
                    808,
                    811,
                    2005
                ],
                "loader.load": [
                    808
                ],
                "namespace": [
                    833,
                    834,
                    809,
                    810,
                    811,
                    822
                ],
                "self.get_template_namespace": [
                    809
                ],
                "namespace.update": [
                    833,
                    810
                ],
                "t.generate": [
                    811
                ],
                "self.current_user": [
                    2704,
                    825,
                    1139
                ],
                "self.locale": [
                    826,
                    827,
                    828,
                    2734
                ],
                "self.locale.translate": [
                    827
                ],
                "self.locale.pgettext": [
                    828
                ],
                "self.xsrf_form_html": [
                    830
                ],
                "self.reverse_url": [
                    831
                ],
                "settings": [
                    1728,
                    2532,
                    1735,
                    2536,
                    2569,
                    844,
                    845,
                    846,
                    1741,
                    848,
                    1742,
                    1746,
                    851,
                    1748,
                    1750
                ],
                "template.Loader": [
                    852
                ],
                "template": [
                    852
                ],
                "transform": [
                    872,
                    892,
                    893,
                    870
                ],
                "transform.transform_first_chunk": [
                    872
                ],
                "include_footers": [
                    874,
                    893
                ],
                "self.request.method": [
                    1379,
                    1412,
                    1639,
                    1449,
                    1386,
                    2282,
                    876,
                    2705,
                    914,
                    1662,
                    895
                ],
                "cookie": [
                    1156,
                    1157,
                    1158,
                    1192,
                    1194,
                    883,
                    884,
                    1174,
                    1179
                ],
                "self._new_cookie.values": [
                    883
                ],
                "self.add_header": [
                    884
                ],
                "cookie.OutputString": [
                    884
                ],
                "start_line": [
                    890,
                    1924,
                    886
                ],
                "httputil.ResponseStartLine": [
                    886
                ],
                "self.request.connection.write_headers": [
                    889
                ],
                "callback": [
                    896,
                    890
                ],
                "transform.transform_chunk": [
                    893
                ],
                "self.request.connection.write": [
                    896
                ],
                "future": [
                    898,
                    899,
                    900
                ],
                "Future": [
                    2008,
                    898,
                    1927
                ],
                "future.set_result": [
                    899
                ],
                "self.write": [
                    908,
                    2277,
                    998
                ],
                "self.set_etag_header": [
                    2304,
                    916
                ],
                "self.check_etag_header": [
                    917,
                    2327
                ],
                "self._clear_headers_for_304": [
                    922
                ],
                "content_length": [
                    2268,
                    2262,
                    2264,
                    2266,
                    2269,
                    924,
                    925
                ],
                "sum": [
                    924
                ],
                "part": [
                    3176,
                    3177,
                    924,
                    1309,
                    1310
                ],
                "self.flush": [
                    2278,
                    934
                ],
                "self.request.finish": [
                    935
                ],
                "self._log": [
                    936
                ],
                "self.on_finish": [
                    938
                ],
                "gen_log.error": [
                    955,
                    964,
                    2580,
                    1471
                ],
                "gen_log": [
                    3105,
                    964,
                    1200,
                    3089,
                    2580,
                    1493,
                    3093,
                    955,
                    3101,
                    1471
                ],
                "kwargs.get": [
                    969,
                    2050
                ],
                "exception": [
                    971,
                    972,
                    973
                ],
                "exception.reason": [
                    972,
                    973
                ],
                "self.write_error": [
                    976
                ],
                "app_log.error": [
                    1424,
                    978,
                    1495,
                    1463
                ],
                "app_log": [
                    1463,
                    1424,
                    978,
                    1495,
                    1816
                ],
                "self.settings.get": [
                    994,
                    1125,
                    1766,
                    1743,
                    1277,
                    1759
                ],
                "self.settings": [
                    1760,
                    1761,
                    994,
                    1762,
                    1763,
                    1125,
                    1766,
                    1735,
                    1288,
                    1897,
                    1898,
                    1743,
                    1744,
                    1277,
                    1759
                ],
                "line": [
                    997,
                    998
                ],
                "traceback.format_exception": [
                    997
                ],
                "traceback": [
                    1369,
                    997
                ],
                "self._locale": [
                    1024,
                    1028,
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "self.get_user_locale": [
                    1020
                ],
                "self.get_browser_locale": [
                    1022
                ],
                "locale.setter": [
                    1026
                ],
                "locale": [
                    1026,
                    1061,
                    1062
                ],
                "self.request.headers": [
                    1346,
                    1230,
                    1231,
                    2227,
                    1045,
                    1046,
                    2332
                ],
                "languages": [
                    1048,
                    1046
                ],
                "split": [
                    1049,
                    2658,
                    3084,
                    1046
                ],
                "locales": [
                    1057,
                    1058,
                    1059,
                    1060,
                    1047
                ],
                "language": [
                    1048,
                    1049
                ],
                "parts": [
                    3104,
                    1057,
                    3108,
                    3176,
                    3084,
                    3085,
                    3087,
                    3088,
                    3091,
                    1049,
                    1050,
                    1052
                ],
                "language.strip": [
                    1049
                ],
                "startswith": [
                    3104,
                    1050,
                    2382
                ],
                "score": [
                    1056,
                    1057,
                    1052,
                    1054
                ],
                "float": [
                    1052
                ],
                "locales.append": [
                    1057
                ],
                "locales.sort": [
                    1059
                ],
                "pair": [
                    1059
                ],
                "codes": [
                    1060,
                    1061
                ],
                "l": [
                    1060
                ],
                "locale.get": [
                    1061,
                    1062
                ],
                "self._current_user": [
                    1081,
                    1076,
                    1077
                ],
                "self.get_current_user": [
                    1076
                ],
                "current_user.setter": [
                    1079
                ],
                "current_user": [
                    1079
                ],
                "token": [
                    1185,
                    1124,
                    1158,
                    1127,
                    1160,
                    1161,
                    1192,
                    1163,
                    1194,
                    1133,
                    1165,
                    1197,
                    1229,
                    1232,
                    1234,
                    1236,
                    1182
                ],
                "timestamp": [
                    1158,
                    1160,
                    1164,
                    1165,
                    3091,
                    3092,
                    3095,
                    1179,
                    1184,
                    1185,
                    1196,
                    1197,
                    2988,
                    2991,
                    2992,
                    3127,
                    3130,
                    3135,
                    3014,
                    3151,
                    3152,
                    1124,
                    1134
                ],
                "self._get_raw_xsrf_token": [
                    1235,
                    1124
                ],
                "output_version": [
                    1128,
                    1137,
                    1125,
                    1126
                ],
                "self._xsrf_token": [
                    1130,
                    1140,
                    1142,
                    1127
                ],
                "binascii.b2a_hex": [
                    1132,
                    1133,
                    1127
                ],
                "binascii": [
                    1127,
                    1192,
                    1193,
                    1132,
                    1133,
                    1181,
                    1183
                ],
                "mask": [
                    1129,
                    1132,
                    1133,
                    1179,
                    1181,
                    1183
                ],
                "os.urandom": [
                    1129,
                    1163
                ],
                "_websocket_mask": [
                    1133,
                    1182
                ],
                "self._decode_xsrf_token": [
                    1234,
                    1158
                ],
                "self._raw_xsrf_token": [
                    1165,
                    1166
                ],
                "_signed_value_version_re.match": [
                    3038,
                    1174
                ],
                "_signed_value_version_re": [
                    3038,
                    1174,
                    3031
                ],
                "m.group": [
                    1177,
                    3043
                ],
                "_": [
                    3115,
                    1234,
                    1235,
                    1179,
                    3167
                ],
                "masked_token": [
                    1179,
                    1183
                ],
                "cookie.split": [
                    1179
                ],
                "binascii.a2b_hex": [
                    1192,
                    1181,
                    1183
                ],
                "binascii.Error": [
                    1193
                ],
                "gen_log.debug": [
                    1200
                ],
                "self.get_argument": [
                    1229
                ],
                "self.request.headers.get": [
                    1346,
                    1230,
                    1231,
                    2227,
                    2332
                ],
                "expected_token": [
                    1235,
                    1236
                ],
                "_time_independent_equals": [
                    3088,
                    3147,
                    1236,
                    2966
                ],
                "self.xsrf_token": [
                    1253
                ],
                "get_url": [
                    1288,
                    1277
                ],
                "make_static_url": [
                    1277
                ],
                "StaticFileHandler": [
                    2001,
                    1749,
                    1278
                ],
                "include_host": [
                    1280,
                    1281,
                    1283
                ],
                "base": [
                    1288,
                    1284,
                    1286
                ],
                "self.request.protocol": [
                    1284,
                    1943
                ],
                "self.request.host": [
                    1284
                ],
                "feature": [
                    1294
                ],
                "self.application.reverse_url": [
                    1298
                ],
                "hasher": [
                    2447,
                    2449,
                    2452,
                    2453,
                    1308,
                    1310,
                    1311
                ],
                "hashlib.sha1": [
                    1308,
                    3175
                ],
                "hashlib": [
                    1308,
                    3175,
                    3182,
                    2447
                ],
                "hasher.update": [
                    2449,
                    2452,
                    1310
                ],
                "hasher.hexdigest": [
                    2453,
                    1311
                ],
                "etag": [
                    1320,
                    1321,
                    1322,
                    1357,
                    1358
                ],
                "self.compute_etag": [
                    1320
                ],
                "computed_etag": [
                    1348,
                    1341,
                    1358
                ],
                "self._headers.get": [
                    1341
                ],
                "etags": [
                    1344,
                    1352,
                    1348,
                    1357
                ],
                "re.findall": [
                    1344
                ],
                "match": [
                    1351,
                    1959,
                    1353,
                    1962,
                    1359,
                    1361,
                    1947,
                    1948
                ],
                "val": [
                    1356,
                    1358
                ],
                "x.startswith": [
                    1356
                ],
                "raise_exc_info": [
                    1369
                ],
                "type": [
                    1369
                ],
                "self._handle_request_exception": [
                    1371,
                    1422
                ],
                "transforms": [
                    2016,
                    1377,
                    1731,
                    2005,
                    1726
                ],
                "self.SUPPORTED_METHODS": [
                    1379
                ],
                "arg": [
                    1381
                ],
                "self.check_xsrf_cookie": [
                    1388
                ],
                "result": [
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    2838,
                    2841,
                    2843,
                    2844,
                    2971,
                    2974,
                    2977,
                    2850,
                    2978,
                    1572,
                    1573,
                    2853,
                    2855,
                    2856,
                    1584,
                    1591,
                    1390,
                    1391,
                    1392,
                    1393,
                    1394
                ],
                "self.prepare": [
                    1390
                ],
                "is_future": [
                    1573,
                    1414,
                    1391
                ],
                "self._prepared_future.set_result": [
                    1430,
                    1398
                ],
                "method": [
                    1412,
                    1509,
                    1413,
                    1572,
                    1636,
                    1669,
                    2702,
                    1648,
                    1659,
                    2717,
                    1567
                ],
                "self.request.method.lower": [
                    1412
                ],
                "e": [
                    1474,
                    1453,
                    1422,
                    2878,
                    1469,
                    1470,
                    1471
                ],
                "self._prepared_future.done": [
                    1426
                ],
                "gen.coroutine": [
                    2208,
                    1374
                ],
                "gen": [
                    2208,
                    1374
                ],
                "NotImplementedError": [
                    1437,
                    2742
                ],
                "self.application.log_request": [
                    1446
                ],
                "self.request.uri": [
                    2712,
                    1449
                ],
                "self.request.remote_ip": [
                    1450
                ],
                "Finish": [
                    1453
                ],
                "self.log_exception": [
                    1459
                ],
                "sys.exc_info": [
                    1472,
                    1474,
                    1459,
                    1476
                ],
                "e.status_code": [
                    1474,
                    1470,
                    1471
                ],
                "e.reason": [
                    1470
                ],
                "self.send_error": [
                    1472,
                    1474,
                    1476
                ],
                "value.log_message": [
                    1489,
                    1490
                ],
                "format": [
                    1490,
                    1493
                ],
                "value.status_code": [
                    1491
                ],
                "self._request_summary": [
                    1491,
                    1495
                ],
                "value.args": [
                    1492
                ],
                "gen_log.warning": [
                    3105,
                    3089,
                    3093,
                    1493,
                    3101
                ],
                "typ": [
                    1496
                ],
                "tb": [
                    1496
                ],
                "self._active_modules": [
                    1504,
                    1501,
                    1502,
                    1503
                ],
                "rendered": [
                    1504,
                    1505
                ],
                "render": [
                    1504,
                    1506
                ],
                "headers": [
                    2656,
                    2658,
                    1925,
                    2661,
                    2663,
                    2667,
                    1516,
                    1519,
                    2673,
                    2675,
                    2676,
                    2653,
                    2654,
                    2623
                ],
                "h": [
                    1520,
                    1519
                ],
                "self.clear_header": [
                    1520
                ],
                "stack_context.ExceptionStackContext": [
                    1570
                ],
                "stack_context": [
                    1570
                ],
                "self._stack_context_handle_exception": [
                    1571
                ],
                "f.result": [
                    1581
                ],
                "f": [
                    2016,
                    2851,
                    2852,
                    2853,
                    2855,
                    1581,
                    2839,
                    2840,
                    2841,
                    2843
                ],
                "add_future": [
                    1584
                ],
                "IOLoop.current": [
                    1584
                ],
                "IOLoop": [
                    1584
                ],
                "future_complete": [
                    1584
                ],
                "functools.wraps": [
                    1659,
                    1636,
                    2702,
                    1567
                ],
                "functools": [
                    1659,
                    1636,
                    2702,
                    1567
                ],
                "wrapper": [
                    1592,
                    1649,
                    2718,
                    1670
                ],
                "issubclass": [
                    1624,
                    1617,
                    1861
                ],
                "cls": [
                    2569,
                    2570,
                    2446,
                    2574,
                    2575,
                    2578,
                    2202,
                    2203,
                    1859,
                    1861,
                    1862,
                    1617,
                    1618,
                    1619,
                    1620,
                    1624,
                    1625,
                    1626,
                    2536
                ],
                "cls._stream_request_body": [
                    1619
                ],
                "self.request.path.endswith": [
                    2390,
                    1661,
                    1638
                ],
                "self.request.path": [
                    1638,
                    1640,
                    2390,
                    2391,
                    1947,
                    1661,
                    1663
                ],
                "uri": [
                    1665,
                    1666,
                    1640,
                    1641,
                    1643,
                    1644,
                    1663
                ],
                "self.request.path.rstrip": [
                    1640
                ],
                "self.request.query": [
                    1664,
                    1665,
                    1642,
                    1643
                ],
                "self.redirect": [
                    1666,
                    1644,
                    2126,
                    2391,
                    2714
                ],
                "httputil.HTTPServerConnectionDelegate": [
                    1673
                ],
                "self.transforms": [
                    1729,
                    1731,
                    1822,
                    1727
                ],
                "settings.get": [
                    1728,
                    2532,
                    1741,
                    1742,
                    1746,
                    1748,
                    1750
                ],
                "self.transforms.append": [
                    1729,
                    1822
                ],
                "GZipContentEncoding": [
                    1729
                ],
                "self.handlers": [
                    1827,
                    1732,
                    1832,
                    1804,
                    1805,
                    1807
                ],
                "self.named_handlers": [
                    1733,
                    1815,
                    1819,
                    1885,
                    1886
                ],
                "self.default_host": [
                    1833,
                    1734
                ],
                "default_host": [
                    1734
                ],
                "self.ui_modules": [
                    1736,
                    2872,
                    2869,
                    1862
                ],
                "_linkify": [
                    1736
                ],
                "_xsrf_form_html": [
                    1737
                ],
                "TemplateModule": [
                    1738,
                    2813
                ],
                "self.ui_methods": [
                    1848,
                    1740
                ],
                "self._load_ui_modules": [
                    1856,
                    1852,
                    1741
                ],
                "self._load_ui_methods": [
                    1843,
                    1742,
                    1839
                ],
                "handlers": [
                    1827,
                    1829,
                    1798,
                    1832,
                    1834,
                    1805,
                    1807,
                    1745,
                    1939,
                    1940,
                    1813,
                    1754,
                    1756,
                    1757,
                    1946
                ],
                "static_url_prefix": [
                    1752,
                    1746
                ],
                "static_handler_class": [
                    1754,
                    1748
                ],
                "static_handler_args": [
                    1755,
                    1750,
                    1751
                ],
                "pattern": [
                    1827,
                    1828,
                    1832,
                    1833,
                    1804,
                    2926,
                    2927,
                    2928,
                    2929,
                    2898,
                    2899,
                    2900,
                    2930,
                    2932,
                    1752,
                    1754,
                    2938
                ],
                "re.escape": [
                    1752
                ],
                "handlers.insert": [
                    1754
                ],
                "self.add_handlers": [
                    1757
                ],
                "self.settings.setdefault": [
                    1760,
                    1761,
                    1762,
                    1763
                ],
                "autoreload.start": [
                    1768
                ],
                "autoreload": [
                    1768
                ],
                "server": [
                    1787,
                    1788
                ],
                "HTTPServer": [
                    1787
                ],
                "server.listen": [
                    1788
                ],
                "port": [
                    1788
                ],
                "address": [
                    1788
                ],
                "host_pattern.endswith": [
                    1796
                ],
                "host_pattern": [
                    1805,
                    1796,
                    1797,
                    1807
                ],
                "self.handlers.insert": [
                    1805
                ],
                "self.handlers.append": [
                    1807
                ],
                "spec": [
                    1947,
                    1956,
                    1809,
                    1810,
                    1811,
                    1812,
                    1813,
                    1814,
                    1815,
                    1951,
                    1818,
                    1819,
                    1949,
                    1950,
                    1946
                ],
                "host_handlers": [
                    1809
                ],
                "tuple": [
                    2960,
                    1810
                ],
                "URLSpec": [
                    2962,
                    1812
                ],
                "handlers.append": [
                    1813
                ],
                "spec.name": [
                    1818,
                    1819,
                    1814,
                    1815
                ],
                "app_log.warning": [
                    1816
                ],
                "transform_class": [
                    1822
                ],
                "host": [
                    1825,
                    1828
                ],
                "split_host_and_port": [
                    1825
                ],
                "request.host.lower": [
                    1825
                ],
                "request.host": [
                    1825
                ],
                "matches": [
                    1826,
                    1829,
                    1831,
                    1834,
                    1835
                ],
                "pattern.match": [
                    1833,
                    1828
                ],
                "matches.extend": [
                    1834,
                    1829
                ],
                "request.headers": [
                    2647,
                    1831
                ],
                "methods": [
                    1838,
                    1839,
                    1840,
                    1841,
                    1842,
                    1845
                ],
                "types.ModuleType": [
                    1851,
                    1838
                ],
                "types": [
                    1851,
                    1838
                ],
                "dir": [
                    1840,
                    1853
                ],
                "fn": [
                    1848,
                    1845,
                    1846
                ],
                "methods.items": [
                    1845
                ],
                "name.startswith": [
                    1846
                ],
                "lower": [
                    1847
                ],
                "modules": [
                    1858,
                    1859,
                    1851,
                    1852,
                    1853,
                    1854,
                    1855
                ],
                "modules.items": [
                    1859
                ],
                "UIModule": [
                    2792,
                    2797,
                    2787,
                    1861
                ],
                "_RequestDispatcher": [
                    1872,
                    1868
                ],
                "request_conn": [
                    1868
                ],
                "dispatcher": [
                    1872,
                    1873,
                    1874
                ],
                "dispatcher.set_request": [
                    1873
                ],
                "dispatcher.execute": [
                    1874
                ],
                "reverse": [
                    1886
                ],
                "handler": [
                    1898,
                    2731,
                    1900,
                    2732,
                    1902,
                    2733,
                    2734,
                    1906,
                    1907,
                    1908,
                    2868,
                    2905,
                    2908,
                    2813,
                    2910
                ],
                "handler.get_status": [
                    1907,
                    1900,
                    1902
                ],
                "log_method": [
                    1905,
                    1907,
                    1901,
                    1903
                ],
                "access_log.info": [
                    1901
                ],
                "access_log": [
                    1905,
                    1901,
                    1903
                ],
                "access_log.warning": [
                    1903
                ],
                "access_log.error": [
                    1905
                ],
                "request_time": [
                    1906,
                    1908
                ],
                "handler.request.request_time": [
                    1906
                ],
                "handler.request": [
                    1906,
                    2732
                ],
                "handler._request_summary": [
                    1908
                ],
                "httputil.HTTPMessageDelegate": [
                    1911
                ],
                "self.connection": [
                    1914,
                    1924
                ],
                "connection": [
                    1914
                ],
                "self.chunks": [
                    1976,
                    1916,
                    1990,
                    1982
                ],
                "self.handler_class": [
                    2918,
                    1917,
                    1933,
                    1965,
                    1969,
                    2003,
                    1941,
                    1949,
                    2910
                ],
                "self.handler_kwargs": [
                    1966,
                    1970,
                    1918,
                    2004,
                    1942,
                    1950
                ],
                "self.set_request": [
                    1923
                ],
                "httputil.HTTPServerRequest": [
                    1923
                ],
                "self.stream_request_body": [
                    1987,
                    1926,
                    1933,
                    1973,
                    2007,
                    1979
                ],
                "self.execute": [
                    1928,
                    1984
                ],
                "self._find_handler": [
                    1932
                ],
                "app": [
                    1964,
                    1965,
                    1966,
                    1938,
                    1939,
                    1944
                ],
                "app._get_host_handlers": [
                    1939
                ],
                "RedirectHandler": [
                    1941
                ],
                "app.default_host": [
                    1944
                ],
                "spec.regex.match": [
                    1947
                ],
                "spec.regex": [
                    1947,
                    1956,
                    1951
                ],
                "spec.handler_class": [
                    1949
                ],
                "spec.kwargs": [
                    1950
                ],
                "spec.regex.groups": [
                    1951
                ],
                "spec.regex.groupindex": [
                    1956
                ],
                "_unquote_or_none": [
                    1961,
                    1958
                ],
                "items": [
                    1959
                ],
                "match.groupdict": [
                    1959
                ],
                "s": [
                    3010,
                    1961,
                    1962,
                    3115,
                    3183,
                    3194,
                    3195,
                    3196
                ],
                "match.groups": [
                    1962
                ],
                "app.settings.get": [
                    1964,
                    1966
                ],
                "app.settings": [
                    1964,
                    1965,
                    1966
                ],
                "ErrorHandler": [
                    1969
                ],
                "self.handler.data_received": [
                    1974
                ],
                "self.handler": [
                    2016,
                    2784,
                    1988,
                    2021,
                    2794,
                    2731,
                    2738,
                    2003,
                    2868,
                    2872,
                    1974,
                    2008
                ],
                "data": [
                    2446,
                    2448,
                    2449,
                    2451,
                    1974,
                    1976
                ],
                "self.chunks.append": [
                    1976
                ],
                "self.request.body.set_result": [
                    1980
                ],
                "self.request._parse_body": [
                    1983
                ],
                "self.handler.on_connection_close": [
                    1988
                ],
                "RequestHandler._template_loaders.values": [
                    1998
                ],
                "loader.reset": [
                    1999
                ],
                "StaticFileHandler.reset": [
                    2001
                ],
                "self.application.transforms": [
                    2005
                ],
                "self.handler._prepared_future": [
                    2008,
                    2021
                ],
                "self.handler._execute": [
                    2016
                ],
                "self.status_code": [
                    2056,
                    2057,
                    2047
                ],
                "self.log_message": [
                    2048,
                    2058,
                    2059,
                    2052
                ],
                "log_message": [
                    2048,
                    2051,
                    2052
                ],
                "self.args": [
                    2049,
                    2059
                ],
                "self.reason": [
                    2057,
                    2050
                ],
                "log_message.replace": [
                    2052
                ],
                "httputil.responses.get": [
                    2057
                ],
                "arg_name": [
                    2093,
                    2094
                ],
                "self.arg_name": [
                    2094
                ],
                "self._url": [
                    2122,
                    2126
                ],
                "self._permanent": [
                    2123,
                    2126
                ],
                "CACHE_MAX_AGE": [
                    2191
                ],
                "_static_hashes": [
                    2193
                ],
                "_lock": [
                    2194
                ],
                "self.root": [
                    2215,
                    2197,
                    2213
                ],
                "self.default_filename": [
                    2393,
                    2386,
                    2198
                ],
                "default_filename": [
                    2198
                ],
                "cls._lock": [
                    2202,
                    2574
                ],
                "cls._static_hashes": [
                    2203,
                    2575
                ],
                "classmethod": [
                    2400,
                    2437,
                    2342,
                    2572,
                    2512,
                    2200,
                    2555
                ],
                "self.get": [
                    2206
                ],
                "self.path": [
                    2211,
                    2213,
                    2313,
                    2320,
                    2384,
                    2397
                ],
                "self.parse_url_path": [
                    2211
                ],
                "absolute_path": [
                    2213,
                    2215,
                    2382,
                    2385,
                    2393,
                    2394,
                    2396,
                    2398
                ],
                "self.get_absolute_path": [
                    2213
                ],
                "self.absolute_path": [
                    2272,
                    2214,
                    2216,
                    2293,
                    2457,
                    2492
                ],
                "self.validate_absolute_path": [
                    2214
                ],
                "self.modified": [
                    2337,
                    2306,
                    2307,
                    2313,
                    2219
                ],
                "self.get_modified_time": [
                    2219
                ],
                "self.set_headers": [
                    2220
                ],
                "self.should_return_304": [
                    2222
                ],
                "request_range": [
                    2234,
                    2226,
                    2235,
                    2231
                ],
                "range_header": [
                    2227,
                    2228,
                    2231
                ],
                "httputil._parse_request_range": [
                    2231
                ],
                "size": [
                    2242,
                    2245,
                    2246,
                    2249,
                    2254,
                    2257,
                    2268,
                    2233,
                    2266,
                    2236
                ],
                "self.get_content_size": [
                    2233
                ],
                "start": [
                    2272,
                    2244,
                    2245,
                    2254,
                    2257,
                    2417,
                    2259,
                    2418,
                    2261,
                    2262,
                    2420,
                    2265,
                    2266,
                    2235,
                    2236
                ],
                "end": [
                    2272,
                    2246,
                    2249,
                    2254,
                    2257,
                    2259,
                    2419,
                    2261,
                    2262,
                    2263,
                    2264,
                    2420,
                    2235,
                    2236
                ],
                "httputil._get_content_range": [
                    2257
                ],
                "include_body": [
                    2271
                ],
                "content": [
                    2272,
                    2273,
                    2274,
                    2275
                ],
                "self.get_content": [
                    2272
                ],
                "version_hash": [
                    2536,
                    2537,
                    2540,
                    2293,
                    2294,
                    2296
                ],
                "self._get_cached_version": [
                    2293
                ],
                "content_type": [
                    2314,
                    2309,
                    2310,
                    2311
                ],
                "self.get_content_type": [
                    2309
                ],
                "cache_time": [
                    2313,
                    2315,
                    2317,
                    2318
                ],
                "self.get_cache_time": [
                    2313
                ],
                "self.set_extra_headers": [
                    2320
                ],
                "ims_value": [
                    2332,
                    2333,
                    2334
                ],
                "date_tuple": [
                    2336,
                    2334,
                    2335
                ],
                "email.utils.parsedate": [
                    2334
                ],
                "email.utils": [
                    2334
                ],
                "email": [
                    2334
                ],
                "if_since": [
                    2336,
                    2337
                ],
                "abspath": [
                    2416,
                    2356,
                    2357,
                    2446
                ],
                "os.path.abspath": [
                    2379,
                    2356
                ],
                "os.path.join": [
                    2393,
                    2356
                ],
                "root": [
                    2379,
                    2356,
                    2382
                ],
                "os.path.sep": [
                    2552,
                    2382,
                    2551
                ],
                "os.path.isdir": [
                    2385
                ],
                "os.path.exists": [
                    2394
                ],
                "os.path.isfile": [
                    2396
                ],
                "open": [
                    2416
                ],
                "file": [
                    2416,
                    2418,
                    2427
                ],
                "file.seek": [
                    2418
                ],
                "remaining": [
                    2433,
                    2434,
                    2420,
                    2422,
                    2425,
                    2426,
                    2429,
                    2430
                ],
                "chunk_size": [
                    2424,
                    2425,
                    2426,
                    2427
                ],
                "file.read": [
                    2427
                ],
                "cls.get_content": [
                    2446
                ],
                "hashlib.md5": [
                    2447
                ],
                "self._stat_result": [
                    2457,
                    2458
                ],
                "os.stat": [
                    2457
                ],
                "stat_result": [
                    2472,
                    2482,
                    2484,
                    2471
                ],
                "self._stat": [
                    2482,
                    2471
                ],
                "stat.ST_SIZE": [
                    2472
                ],
                "stat": [
                    2472,
                    2484
                ],
                "modified": [
                    2483,
                    2485
                ],
                "datetime.datetime.utcfromtimestamp": [
                    2483
                ],
                "stat.ST_MTIME": [
                    2484
                ],
                "mime_type": [
                    2492,
                    2493
                ],
                "encoding": [
                    2492
                ],
                "mimetypes.guess_type": [
                    2492
                ],
                "mimetypes": [
                    2492
                ],
                "self.CACHE_MAX_AGE": [
                    2510
                ],
                "include_version": [
                    2533
                ],
                "cls.get_version": [
                    2536
                ],
                "url_path": [
                    2552,
                    2553
                ],
                "url_path.replace": [
                    2552
                ],
                "abs_path": [
                    2569,
                    2570,
                    2576,
                    2578,
                    2580,
                    2581,
                    2582
                ],
                "cls.get_absolute_path": [
                    2569
                ],
                "cls._get_cached_version": [
                    2570
                ],
                "hashes": [
                    2575,
                    2576,
                    2578,
                    2581,
                    2582
                ],
                "cls.get_content_version": [
                    2578
                ],
                "hsh": [
                    2584,
                    2582,
                    2583
                ],
                "hashes.get": [
                    2582
                ],
                "self.fallback": [
                    2608,
                    2605
                ],
                "fallback": [
                    2605
                ],
                "OutputTransform": [
                    2629
                ],
                "CONTENT_TYPES": [
                    2641
                ],
                "MIN_LENGTH": [
                    2644
                ],
                "self._gzipping": [
                    2657,
                    2659,
                    2662,
                    2647,
                    2679
                ],
                "request.headers.get": [
                    2647
                ],
                "ctype.startswith": [
                    2650
                ],
                "ctype": [
                    2650,
                    2659,
                    2658
                ],
                "self.CONTENT_TYPES": [
                    2650
                ],
                "headers.get": [
                    2658
                ],
                "self._compressible_type": [
                    2659
                ],
                "finishing": [
                    2672,
                    2681,
                    2666,
                    2660
                ],
                "self.MIN_LENGTH": [
                    2660
                ],
                "self._gzip_value": [
                    2664,
                    2665,
                    2685,
                    2686,
                    2687
                ],
                "BytesIO": [
                    2664
                ],
                "self._gzip_file": [
                    2680,
                    2665,
                    2682,
                    2684
                ],
                "gzip.GzipFile": [
                    2665
                ],
                "gzip": [
                    2665
                ],
                "self.transform_chunk": [
                    2666
                ],
                "self._gzip_file.write": [
                    2680
                ],
                "self._gzip_file.close": [
                    2682
                ],
                "self._gzip_file.flush": [
                    2684
                ],
                "self._gzip_value.getvalue": [
                    2685
                ],
                "self._gzip_value.truncate": [
                    2686
                ],
                "self._gzip_value.seek": [
                    2687
                ],
                "self.get_login_url": [
                    2706
                ],
                "scheme": [
                    2708
                ],
                "urlparse.urlsplit": [
                    2708
                ],
                "urlparse": [
                    2708
                ],
                "next_url": [
                    2712,
                    2713,
                    2710
                ],
                "self.request.full_url": [
                    2710
                ],
                "urlencode": [
                    2713
                ],
                "handler.ui": [
                    2733
                ],
                "handler.locale": [
                    2734
                ],
                "self.handler.current_user": [
                    2738
                ],
                "self.handler.render_string": [
                    2784
                ],
                "escape.linkify": [
                    2789
                ],
                "text": [
                    2789
                ],
                "self.handler.xsrf_form_html": [
                    2794
                ],
                "self._resource_list": [
                    2832,
                    2821,
                    2815
                ],
                "self._resource_dict": [
                    2816,
                    2824,
                    2820,
                    2822
                ],
                "self._resource_list.append": [
                    2821
                ],
                "set_resources": [
                    2828
                ],
                "r": [
                    2832
                ],
                "key": [
                    2832,
                    2872,
                    2876
                ],
                "self._get_resources": [
                    2851,
                    2859,
                    2862,
                    2835,
                    2839,
                    2847
                ],
                "result.append": [
                    2841,
                    2853
                ],
                "result.extend": [
                    2843,
                    2855
                ],
                "ui_modules": [
                    2869
                ],
                "self.handler._ui_module": [
                    2872
                ],
                "AttributeError": [
                    2878
                ],
                "pattern.endswith": [
                    2929,
                    2898
                ],
                "self.regex": [
                    2946,
                    2917,
                    2950,
                    2926,
                    2900,
                    2901,
                    2932,
                    2903
                ],
                "self.regex.groupindex": [
                    2901
                ],
                "self.regex.groups": [
                    2946,
                    2932,
                    2901
                ],
                "self.regex.pattern": [
                    2950,
                    2917,
                    2926,
                    2903
                ],
                "import_object": [
                    2908
                ],
                "self.kwargs": [
                    2918,
                    2911
                ],
                "self.name": [
                    2912,
                    2918
                ],
                "self._path": [
                    2960,
                    2913,
                    2954,
                    2949
                ],
                "self._group_count": [
                    2913,
                    2951
                ],
                "self._find_groups": [
                    2913
                ],
                "self.__class__.__name__": [
                    2917
                ],
                "pattern.startswith": [
                    2927
                ],
                "pattern.count": [
                    2932
                ],
                "pieces": [
                    2944,
                    2937,
                    2946,
                    2942
                ],
                "fragment": [
                    2944,
                    2938,
                    2939,
                    2940,
                    2942
                ],
                "pattern.split": [
                    2938
                ],
                "paren_loc": [
                    2940,
                    2941,
                    2942
                ],
                "fragment.index": [
                    2940
                ],
                "pieces.append": [
                    2944,
                    2942
                ],
                "converted_args": [
                    2960,
                    2955,
                    2959
                ],
                "a": [
                    2976,
                    2956,
                    2957,
                    2958,
                    2959,
                    2969,
                    2972,
                    2973
                ],
                "converted_args.append": [
                    2959
                ],
                "escape.url_escape": [
                    2959
                ],
                "hmac": [
                    3182,
                    2965,
                    2966,
                    3175
                ],
                "hmac.compare_digest": [
                    2966
                ],
                "b": [
                    2976,
                    2969,
                    2973
                ],
                "y": [
                    2976,
                    2977,
                    2973,
                    2974
                ],
                "zip": [
                    2976,
                    2973
                ],
                "ord": [
                    2977
                ],
                "clock": [
                    3075,
                    3078,
                    2985,
                    2986,
                    2988,
                    3152,
                    3059,
                    3060,
                    3092,
                    3095
                ],
                "base64.b64encode": [
                    2989
                ],
                "base64": [
                    3108,
                    2989,
                    3156
                ],
                "signature": [
                    3087,
                    2992,
                    3025,
                    3024,
                    2991,
                    3088
                ],
                "_create_signature_v1": [
                    3087,
                    2991
                ],
                "to_sign": [
                    3024,
                    3025,
                    3011
                ],
                "format_field": [
                    3016,
                    3013,
                    3014,
                    3015
                ],
                "_create_signature_v2": [
                    3024,
                    3146
                ],
                "_get_version": [
                    3163,
                    3069
                ],
                "_decode_signed_value_v1": [
                    3074
                ],
                "_decode_signed_value_v2": [
                    3077
                ],
                "base64.b64decode": [
                    3108,
                    3156
                ],
                "length": [
                    3115,
                    3116
                ],
                "rest": [
                    3115,
                    3117,
                    3120,
                    3122,
                    3123,
                    3125,
                    3126,
                    3127,
                    3128,
                    3129
                ],
                "s.partition": [
                    3115
                ],
                "field_value": [
                    3123,
                    3117
                ],
                "_consume_field": [
                    3128,
                    3129,
                    3126,
                    3127
                ],
                "name_field": [
                    3128,
                    3130,
                    3149,
                    3135
                ],
                "value_field": [
                    3129,
                    3130,
                    3156,
                    3135
                ],
                "passed_sig": [
                    3138,
                    3147,
                    3129,
                    3130,
                    3135
                ],
                "_decode_fields_v2": [
                    3167,
                    3135
                ],
                "signed_string": [
                    3138,
                    3146
                ],
                "expected_sig": [
                    3146,
                    3147
                ],
                "hash": [
                    3175,
                    3177,
                    3178,
                    3182,
                    3183,
                    3184
                ],
                "hmac.new": [
                    3182,
                    3175
                ],
                "hash.update": [
                    3177,
                    3183
                ],
                "hash.hexdigest": [
                    3184,
                    3178
                ],
                "hashlib.sha256": [
                    3182
                ],
                "escape.url_unescape": [
                    3196
                ]
            },
            "filtered_variables_in_file": {
                "MIN_SUPPORTED_SIGNED_VALUE_VERSION": [
                    115
                ],
                "MAX_SUPPORTED_SIGNED_VALUE_VERSION": [
                    123
                ],
                "DEFAULT_SIGNED_VALUE_VERSION": [
                    2984,
                    131
                ],
                "DEFAULT_SIGNED_VALUE_MIN_VERSION": [
                    139,
                    3062
                ],
                "SUPPORTED_METHODS": [
                    154
                ],
                "_template_loaders": [
                    157
                ],
                "_template_loader_lock": [
                    158
                ],
                "threading.Lock": [
                    2194,
                    158
                ],
                "threading": [
                    2194,
                    158
                ],
                "_remove_control_chars_regex": [
                    159
                ],
                "re.compile": [
                    1805,
                    1807,
                    2900,
                    3031,
                    350,
                    159
                ],
                "re": [
                    1344,
                    522,
                    1805,
                    1807,
                    2900,
                    3031,
                    1752,
                    350,
                    159
                ],
                "__init__": [
                    162,
                    2092,
                    2813
                ],
                "RequestHandler": [
                    2112,
                    162,
                    803,
                    802,
                    805,
                    807,
                    1997,
                    1998,
                    368,
                    1617,
                    2097,
                    2129,
                    1624,
                    473,
                    2588
                ],
                "self": [
                    2048,
                    2049,
                    2050,
                    2052,
                    2056,
                    2057,
                    2058,
                    2059,
                    2092,
                    2094,
                    2100,
                    2103,
                    2122,
                    2123,
                    2126,
                    2197,
                    2198,
                    2206,
                    162,
                    2211,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    2213,
                    2214,
                    2215,
                    2216,
                    2219,
                    2220,
                    180,
                    2222,
                    182,
                    183,
                    184,
                    185,
                    2227,
                    2233,
                    2240,
                    2241,
                    2242,
                    2255,
                    2256,
                    211,
                    2269,
                    2272,
                    2277,
                    2278,
                    2282,
                    2293,
                    2303,
                    2304,
                    2306,
                    2307,
                    2309,
                    2311,
                    2313,
                    2316,
                    2318,
                    2320,
                    275,
                    276,
                    277,
                    278,
                    2327,
                    282,
                    2332,
                    287,
                    288,
                    289,
                    290,
                    2337,
                    311,
                    313,
                    316,
                    322,
                    331,
                    2384,
                    2386,
                    339,
                    2390,
                    2391,
                    2393,
                    347,
                    348,
                    2397,
                    385,
                    400,
                    2456,
                    2457,
                    2458,
                    416,
                    2471,
                    428,
                    2482,
                    444,
                    445,
                    2492,
                    456,
                    459,
                    461,
                    2510,
                    469,
                    502,
                    506,
                    507,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    2605,
                    2960,
                    560,
                    2608,
                    2609,
                    573,
                    574,
                    598,
                    2647,
                    2650,
                    2657,
                    2659,
                    2660,
                    614,
                    615,
                    2662,
                    2664,
                    618,
                    2665,
                    620,
                    2666,
                    2679,
                    2680,
                    2682,
                    2684,
                    637,
                    2685,
                    639,
                    640,
                    2686,
                    2687,
                    649,
                    651,
                    2704,
                    2705,
                    2706,
                    2710,
                    663,
                    2712,
                    2714,
                    669,
                    670,
                    671,
                    2717,
                    2731,
                    2732,
                    2733,
                    2734,
                    689,
                    2738,
                    698,
                    700,
                    704,
                    713,
                    2784,
                    2794,
                    747,
                    2813,
                    766,
                    2815,
                    2816,
                    2820,
                    2821,
                    2822,
                    2824,
                    2828,
                    2832,
                    786,
                    2835,
                    2839,
                    795,
                    2847,
                    2851,
                    804,
                    809,
                    2859,
                    2862,
                    2868,
                    2869,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    831,
                    2872,
                    833,
                    2876,
                    844,
                    2900,
                    2901,
                    2903,
                    2910,
                    2911,
                    2912,
                    2913,
                    866,
                    867,
                    868,
                    869,
                    870,
                    871,
                    2917,
                    873,
                    2918,
                    876,
                    2926,
                    882,
                    883,
                    884,
                    2932,
                    887,
                    888,
                    889,
                    890,
                    892,
                    895,
                    896,
                    2946,
                    2949,
                    2950,
                    2951,
                    904,
                    2954,
                    908,
                    912,
                    913,
                    914,
                    915,
                    916,
                    917,
                    918,
                    919,
                    920,
                    921,
                    922,
                    923,
                    924,
                    925,
                    927,
                    932,
                    934,
                    935,
                    936,
                    937,
                    938,
                    941,
                    2223,
                    954,
                    956,
                    962,
                    967,
                    974,
                    976,
                    979,
                    980,
                    994,
                    996,
                    998,
                    999,
                    1001,
                    1004,
                    1019,
                    1020,
                    1021,
                    1022,
                    1023,
                    1024,
                    1028,
                    1045,
                    1046,
                    1075,
                    1076,
                    1077,
                    1081,
                    1092,
                    1093,
                    1101,
                    1123,
                    1124,
                    1125,
                    1127,
                    1130,
                    1139,
                    1140,
                    1142,
                    1155,
                    1156,
                    1158,
                    1165,
                    1166,
                    1229,
                    1230,
                    1231,
                    1234,
                    1235,
                    1253,
                    1276,
                    1277,
                    1281,
                    1284,
                    1288,
                    1292,
                    1298,
                    1309,
                    1320,
                    1322,
                    1341,
                    1346,
                    1371,
                    1377,
                    1379,
                    1381,
                    1382,
                    1386,
                    1387,
                    1388,
                    1390,
                    1395,
                    1398,
                    1399,
                    1402,
                    1408,
                    1412,
                    1413,
                    1418,
                    1419,
                    1422,
                    1425,
                    1426,
                    1430,
                    1446,
                    1449,
                    1450,
                    1455,
                    1456,
                    1459,
                    1464,
                    1472,
                    1474,
                    1476,
                    1491,
                    1495,
                    1496,
                    1500,
                    1501,
                    1502,
                    1503,
                    1504,
                    1509,
                    1520,
                    1569,
                    1571,
                    1572,
                    1582,
                    1583,
                    1638,
                    1639,
                    1640,
                    1642,
                    1643,
                    1644,
                    1648,
                    1661,
                    1662,
                    1663,
                    1664,
                    1665,
                    1666,
                    1669,
                    1727,
                    1729,
                    1731,
                    1732,
                    1733,
                    1734,
                    1735,
                    1736,
                    1740,
                    1741,
                    1742,
                    1743,
                    1744,
                    1757,
                    1759,
                    1760,
                    1761,
                    1762,
                    1763,
                    1766,
                    1787,
                    1804,
                    1805,
                    1807,
                    1815,
                    1819,
                    1822,
                    1827,
                    1832,
                    1833,
                    1839,
                    1843,
                    1848,
                    1852,
                    1856,
                    1862,
                    1868,
                    1872,
                    1885,
                    1886,
                    1897,
                    1898,
                    1913,
                    1914,
                    1915,
                    1916,
                    1917,
                    1918,
                    1919,
                    1920,
                    1923,
                    1924,
                    1926,
                    1927,
                    1928,
                    1931,
                    1932,
                    1933,
                    1938,
                    1939,
                    1941,
                    1942,
                    1943,
                    1947,
                    1949,
                    1950,
                    1957,
                    1961,
                    1965,
                    1966,
                    1969,
                    1970,
                    1973,
                    1974,
                    1976,
                    1979,
                    1980,
                    1982,
                    1983,
                    1984,
                    1987,
                    1988,
                    1990,
                    1996,
                    2000,
                    2003,
                    2004,
                    2005,
                    2007,
                    2008,
                    2016,
                    2017,
                    2021,
                    2047
                ],
                "self.application": [
                    640,
                    1292,
                    1298,
                    1938,
                    164,
                    1446,
                    1093,
                    844,
                    1101,
                    1996,
                    2000,
                    211,
                    2003,
                    2005,
                    615,
                    618,
                    1387,
                    620,
                    1913
                ],
                "application": [
                    1913,
                    164,
                    181,
                    174
                ],
                "self.request": [
                    896,
                    385,
                    1408,
                    1664,
                    1284,
                    1412,
                    1665,
                    1927,
                    1931,
                    400,
                    2705,
                    914,
                    1939,
                    276,
                    277,
                    278,
                    1045,
                    1046,
                    1943,
                    2710,
                    1947,
                    2332,
                    2712,
                    927,
                    416,
                    1915,
                    932,
                    165,
                    935,
                    1449,
                    1450,
                    428,
                    2732,
                    1663,
                    2608,
                    2227,
                    824,
                    184,
                    1980,
                    573,
                    445,
                    1982,
                    1983,
                    1346,
                    456,
                    1230,
                    1231,
                    2510,
                    2003,
                    2005,
                    2390,
                    2391,
                    1496,
                    1379,
                    1638,
                    1639,
                    1640,
                    1386,
                    1642,
                    876,
                    1643,
                    2282,
                    502,
                    889,
                    506,
                    507,
                    1661,
                    1662,
                    895
                ],
                "request": [
                    1825,
                    165,
                    1831,
                    1931,
                    1873,
                    2647
                ],
                "self._headers_written": [
                    868,
                    869,
                    166,
                    912,
                    663,
                    954
                ],
                "self._finished": [
                    167,
                    904,
                    937,
                    1418,
                    1582,
                    1455,
                    689,
                    2609,
                    979,
                    1399,
                    1464,
                    956
                ],
                "self._auto_finish": [
                    168,
                    1569,
                    1418
                ],
                "self._transforms": [
                    169,
                    892,
                    870,
                    1377
                ],
                "self._prepared_future": [
                    170,
                    1425,
                    1426,
                    1395,
                    1398,
                    1430
                ],
                "self.path_args": [
                    2016,
                    1381,
                    1413,
                    1961,
                    171,
                    1919
                ],
                "self.path_kwargs": [
                    1920,
                    2017,
                    1413,
                    1382,
                    1957,
                    172
                ],
                "self.ui": [
                    833,
                    173,
                    941,
                    2733,
                    180,
                    182
                ],
                "ObjectDict": [
                    173
                ],
                "n": [
                    3116,
                    173,
                    3117,
                    1839,
                    1840,
                    3120,
                    3122,
                    1852,
                    1853
                ],
                "self._ui_method": [
                    173
                ],
                "m": [
                    1856,
                    3043,
                    173,
                    1842,
                    1843,
                    1174,
                    1176,
                    1177,
                    3039,
                    3038,
                    1855
                ],
                "application.ui_methods.items": [
                    174
                ],
                "application.ui_methods": [
                    174
                ],
                "_UIModuleNamespace": [
                    180
                ],
                "application.ui_modules": [
                    181
                ],
                "self.clear": [
                    967,
                    183
                ],
                "self.request.connection.set_close_callback": [
                    184,
                    932
                ],
                "self.request.connection": [
                    184,
                    889,
                    932,
                    896
                ],
                "self.on_connection_close": [
                    184
                ],
                "self.initialize": [
                    185
                ],
                "kwargs": [
                    2050,
                    1669,
                    2821,
                    2822,
                    1288,
                    2824,
                    2829,
                    540,
                    2717,
                    1572,
                    810,
                    185,
                    704,
                    969,
                    970,
                    971,
                    847,
                    976,
                    851,
                    852,
                    600,
                    2911,
                    1504,
                    2784,
                    994,
                    997,
                    1509,
                    1383,
                    2789,
                    1648,
                    1787
                ],
                "self.application.settings": [
                    640,
                    1093,
                    615,
                    618,
                    1387,
                    620,
                    844,
                    1101,
                    1292,
                    1996,
                    2000,
                    211
                ],
                "HTTPError": [
                    1668,
                    2716,
                    2083,
                    2103,
                    1469,
                    972,
                    2383,
                    1488,
                    1233,
                    1237,
                    214,
                    217,
                    2395,
                    220,
                    2397,
                    223,
                    226,
                    1380,
                    229,
                    232,
                    495,
                    1647
                ],
                "_has_stream_request_body": [
                    1402,
                    275,
                    1933
                ],
                "self.__class__": [
                    1402,
                    275,
                    2917
                ],
                "self.request.body.done": [
                    276
                ],
                "self.request.body": [
                    1408,
                    1927,
                    276,
                    277,
                    278,
                    1980,
                    1982
                ],
                "self.request.body.set_exception": [
                    277
                ],
                "iostream.StreamClosedError": [
                    1409,
                    277,
                    2279
                ],
                "iostream": [
                    1409,
                    277,
                    2279
                ],
                "self.request.body.exception": [
                    278
                ],
                "self._headers": [
                    923,
                    871,
                    873,
                    331,
                    339,
                    915,
                    282,
                    347,
                    348,
                    1341,
                    890
                ],
                "httputil.HTTPHeaders": [
                    282
                ],
                "httputil": [
                    2231,
                    290,
                    1923,
                    361,
                    1673,
                    2057,
                    2257,
                    886,
                    1911,
                    537,
                    282,
                    316,
                    285,
                    1470
                ],
                "tornado.version": [
                    283
                ],
                "tornado": [
                    283
                ],
                "httputil.format_timestamp": [
                    361,
                    285,
                    537
                ],
                "time.time": [
                    2986,
                    1196,
                    1164,
                    3060,
                    285
                ],
                "time": [
                    2986,
                    1196,
                    1164,
                    3060,
                    285
                ],
                "self.set_default_headers": [
                    287
                ],
                "self._write_buffer": [
                    288,
                    866,
                    867,
                    924,
                    918,
                    921,
                    700,
                    1309
                ],
                "self._status_code": [
                    289,
                    322,
                    871,
                    873,
                    887,
                    913,
                    2103,
                    311,
                    920
                ],
                "self._reason": [
                    290,
                    1004,
                    888,
                    313,
                    316
                ],
                "httputil.responses": [
                    2057,
                    290,
                    316,
                    1470
                ],
                "status_code": [
                    1003,
                    2623,
                    974,
                    976,
                    2100,
                    2676,
                    311,
                    316,
                    318,
                    2047
                ],
                "reason": [
                    969,
                    973,
                    974,
                    312,
                    313
                ],
                "escape.native_str": [
                    520,
                    313,
                    521
                ],
                "escape": [
                    770,
                    1253,
                    2789,
                    520,
                    521,
                    751,
                    2959,
                    697,
                    313,
                    3196
                ],
                "name": [
                    385,
                    641,
                    3074,
                    3077,
                    520,
                    522,
                    651,
                    524,
                    1292,
                    1294,
                    527,
                    400,
                    528,
                    529,
                    530,
                    1298,
                    3087,
                    416,
                    428,
                    2991,
                    560,
                    1845,
                    1846,
                    1847,
                    1848,
                    444,
                    573,
                    574,
                    1859,
                    1862,
                    3015,
                    456,
                    331,
                    459,
                    3149,
                    462,
                    339,
                    468,
                    469,
                    598,
                    347,
                    348,
                    1885,
                    1502,
                    1503,
                    1504,
                    1886,
                    1887,
                    2912,
                    622,
                    496,
                    506,
                    507,
                    639
                ],
                "self._convert_header_value": [
                    339,
                    331
                ],
                "value": [
                    641,
                    3074,
                    1028,
                    3077,
                    521,
                    522,
                    650,
                    524,
                    651,
                    652,
                    3084,
                    529,
                    3089,
                    3093,
                    3102,
                    3105,
                    2989,
                    2991,
                    2992,
                    2993,
                    3125,
                    1081,
                    3135,
                    3138,
                    3016,
                    331,
                    1488,
                    1489,
                    1490,
                    339,
                    1491,
                    1492,
                    598,
                    1496,
                    1369,
                    3162,
                    1371,
                    3163,
                    3038,
                    3167,
                    353,
                    355,
                    356,
                    357,
                    359,
                    360,
                    361,
                    363,
                    493,
                    622,
                    367,
                    368,
                    369,
                    370,
                    496,
                    3065,
                    507,
                    3068,
                    3069,
                    638,
                    639
                ],
                "self._headers.add": [
                    339
                ],
                "_INVALID_HEADER_CHAR_RE": [
                    350
                ],
                "unicode_type": [
                    355,
                    2852,
                    2957,
                    719,
                    2840,
                    691,
                    470,
                    728
                ],
                "value.encode": [
                    356
                ],
                "numbers.Integral": [
                    357
                ],
                "numbers": [
                    357
                ],
                "datetime.datetime": [
                    2336,
                    360,
                    2316,
                    559,
                    2483,
                    534
                ],
                "datetime": [
                    2336,
                    360,
                    2316,
                    2317,
                    559,
                    2483,
                    534
                ],
                "RequestHandler._INVALID_HEADER_CHAR_RE.search": [
                    368
                ],
                "RequestHandler._INVALID_HEADER_CHAR_RE": [
                    368
                ],
                "_ARG_DEFAULT": [
                    402,
                    372,
                    430,
                    374
                ],
                "self._get_argument": [
                    416,
                    385,
                    444
                ],
                "default": [
                    416,
                    385,
                    1062,
                    461,
                    508,
                    463,
                    444
                ],
                "self.request.arguments": [
                    400,
                    385,
                    2510
                ],
                "strip": [
                    385,
                    417,
                    456,
                    459,
                    428,
                    398,
                    400,
                    474,
                    445
                ],
                "self._get_arguments": [
                    400,
                    459,
                    428,
                    456
                ],
                "self.request.body_arguments": [
                    416,
                    428
                ],
                "self.request.query_arguments": [
                    456,
                    445
                ],
                "args": [
                    2049,
                    2051,
                    1669,
                    2951,
                    2953,
                    2956,
                    1298,
                    2717,
                    1572,
                    459,
                    460,
                    464,
                    1491,
                    1493,
                    1886,
                    1504,
                    1381,
                    1509,
                    1648
                ],
                "source": [
                    459,
                    468
                ],
                "self._ARG_DEFAULT": [
                    461
                ],
                "MissingArgumentError": [
                    2092,
                    462
                ],
                "values": [
                    713,
                    467,
                    476,
                    477
                ],
                "v": [
                    546,
                    549,
                    1382,
                    1383,
                    1958,
                    1959,
                    468,
                    469,
                    470,
                    473,
                    475,
                    476,
                    540
                ],
                "source.get": [
                    468
                ],
                "self.decode_argument": [
                    1381,
                    469,
                    1382
                ],
                "RequestHandler._remove_control_chars_regex.sub": [
                    473
                ],
                "RequestHandler._remove_control_chars_regex": [
                    473
                ],
                "v.strip": [
                    475
                ],
                "values.append": [
                    476
                ],
                "_unicode": [
                    2658,
                    493
                ],
                "self.request.cookies": [
                    506,
                    507,
                    573,
                    502
                ],
                "re.search": [
                    522
                ],
                "self._new_cookie": [
                    526,
                    527,
                    528,
                    529,
                    530,
                    883
                ],
                "Cookie.SimpleCookie": [
                    526
                ],
                "Cookie": [
                    526
                ],
                "morsel": [
                    549,
                    530,
                    532,
                    537,
                    539
                ],
                "domain": [
                    561,
                    531,
                    532,
                    574
                ],
                "expires_days": [
                    1139,
                    1141,
                    533,
                    535,
                    600
                ],
                "expires": [
                    559,
                    560,
                    533,
                    534,
                    536,
                    537
                ],
                "datetime.datetime.utcnow": [
                    2316,
                    534,
                    559
                ],
                "datetime.timedelta": [
                    2317,
                    534,
                    559
                ],
                "path": [
                    768,
                    769,
                    2820,
                    2822,
                    1288,
                    2569,
                    2824,
                    2828,
                    2197,
                    538,
                    539,
                    2206,
                    2211,
                    2212,
                    560,
                    2356,
                    574,
                    1744,
                    1751,
                    2784,
                    740,
                    2532,
                    2536,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    764,
                    765,
                    766,
                    767
                ],
                "k": [
                    546,
                    549,
                    1382,
                    1383,
                    1958,
                    1959,
                    540,
                    541,
                    542
                ],
                "kwargs.items": [
                    540,
                    1383
                ],
                "self.set_cookie": [
                    560,
                    1140,
                    598
                ],
                "self.clear_cookie": [
                    574
                ],
                "self.create_signed_value": [
                    598
                ],
                "version": [
                    3073,
                    3076,
                    1158,
                    1160,
                    1162,
                    1165,
                    1177,
                    1178,
                    1185,
                    1190,
                    2983,
                    2984,
                    1197,
                    2990,
                    2994,
                    3021,
                    3027,
                    599,
                    3163,
                    3164,
                    3040,
                    3043,
                    1124,
                    3044,
                    3051,
                    3053,
                    622,
                    3054,
                    1138,
                    3069,
                    3071
                ],
                "self.require_setting": [
                    1092,
                    614,
                    649,
                    1276,
                    637
                ],
                "secret": [
                    3074,
                    3140,
                    3077,
                    3142,
                    615,
                    3175,
                    617,
                    3146,
                    3019,
                    622,
                    2991,
                    3022,
                    3024,
                    3087,
                    3182
                ],
                "key_version": [
                    3171,
                    3013,
                    3142,
                    616,
                    3020,
                    620,
                    3022,
                    623,
                    3126,
                    3130,
                    3167,
                    3135
                ],
                "self.application.settings.get": [
                    618,
                    1387,
                    1996,
                    1292,
                    1101,
                    2000
                ],
                "create_signed_value": [
                    622
                ],
                "self.get_cookie": [
                    651,
                    1156,
                    639
                ],
                "decode_signed_value": [
                    640
                ],
                "max_age_days": [
                    641,
                    3075,
                    3078,
                    3152,
                    3092
                ],
                "min_version": [
                    642,
                    3061,
                    3062,
                    3063,
                    3064,
                    3071
                ],
                "get_signature_key_version": [
                    652
                ],
                "status": [
                    665,
                    666,
                    668,
                    669
                ],
                "permanent": [
                    666,
                    2123
                ],
                "self.set_status": [
                    2240,
                    974,
                    2223,
                    2255,
                    2100,
                    919,
                    669
                ],
                "self.set_header": [
                    2241,
                    2242,
                    2307,
                    996,
                    2311,
                    1322,
                    2316,
                    2318,
                    2256,
                    2269,
                    698,
                    925,
                    670,
                    2303
                ],
                "utf8": [
                    774,
                    3084,
                    2959,
                    1174,
                    1181,
                    670,
                    1183,
                    1192,
                    1194,
                    2988,
                    2989,
                    699,
                    1341,
                    1346,
                    3010,
                    716,
                    3149,
                    1236,
                    725,
                    3162,
                    734,
                    737,
                    3175,
                    3177,
                    3178,
                    1134,
                    3182,
                    3183,
                    3184,
                    755,
                    3068
                ],
                "url": [
                    2532,
                    2534,
                    2122,
                    2538,
                    2540,
                    2706,
                    2707,
                    2708,
                    2962,
                    2713,
                    2714,
                    670
                ],
                "self.finish": [
                    962,
                    999,
                    1001,
                    1419,
                    1583,
                    1456,
                    786,
                    980,
                    671
                ],
                "chunk": [
                    896,
                    2688,
                    907,
                    908,
                    2451,
                    2452,
                    691,
                    693,
                    696,
                    697,
                    699,
                    700,
                    2623,
                    2626,
                    2685,
                    866,
                    2275,
                    2660,
                    2277,
                    871,
                    874,
                    2666,
                    877,
                    2673,
                    2676,
                    2680,
                    890,
                    2427,
                    2428,
                    893,
                    2430,
                    2431
                ],
                "message": [
                    2055,
                    2059,
                    2061,
                    692,
                    694,
                    695
                ],
                "escape.json_encode": [
                    697
                ],
                "self._write_buffer.append": [
                    700
                ],
                "html": [
                    704,
                    773,
                    774,
                    778,
                    779,
                    781,
                    782,
                    784,
                    785,
                    754,
                    755,
                    786,
                    759,
                    760
                ],
                "self.render_string": [
                    704,
                    2828
                ],
                "template_name": [
                    704,
                    808
                ],
                "js_embed": [
                    707,
                    716,
                    756,
                    758
                ],
                "js_files": [
                    708,
                    741,
                    745,
                    720,
                    722
                ],
                "css_embed": [
                    725,
                    776,
                    709,
                    775
                ],
                "css_files": [
                    710,
                    761,
                    729,
                    731,
                    764
                ],
                "html_heads": [
                    780,
                    782,
                    734,
                    711
                ],
                "html_bodies": [
                    712,
                    737,
                    785,
                    783
                ],
                "module": [
                    713,
                    714,
                    1503,
                    717,
                    723,
                    726,
                    732,
                    735
                ],
                "embed_part": [
                    714,
                    715,
                    716,
                    723,
                    724,
                    725
                ],
                "module.embedded_javascript": [
                    714
                ],
                "js_embed.append": [
                    716
                ],
                "file_part": [
                    717,
                    718,
                    719,
                    720,
                    722,
                    726,
                    727,
                    728,
                    729,
                    731
                ],
                "module.javascript_files": [
                    717
                ],
                "js_files.append": [
                    720
                ],
                "js_files.extend": [
                    722
                ],
                "module.embedded_css": [
                    723
                ],
                "css_embed.append": [
                    725
                ],
                "module.css_files": [
                    726
                ],
                "css_files.append": [
                    729
                ],
                "css_files.extend": [
                    731
                ],
                "head_part": [
                    732,
                    733,
                    734
                ],
                "module.html_head": [
                    732
                ],
                "html_heads.append": [
                    734
                ],
                "body_part": [
                    736,
                    737,
                    735
                ],
                "module.html_body": [
                    735
                ],
                "html_bodies.append": [
                    737
                ],
                "path.startswith": [
                    740
                ],
                "x": [
                    2976,
                    2977,
                    740,
                    1356,
                    2973,
                    2974
                ],
                "paths": [
                    768,
                    772,
                    743,
                    749,
                    753,
                    762
                ],
                "unique_paths": [
                    769,
                    744,
                    748,
                    750,
                    763,
                    767
                ],
                "is_absolute": [
                    746,
                    765
                ],
                "self.static_url": [
                    747,
                    829,
                    766
                ],
                "paths.append": [
                    768,
                    749
                ],
                "unique_paths.add": [
                    769,
                    750
                ],
                "js": [
                    760,
                    755,
                    757,
                    751
                ],
                "join": [
                    770,
                    866,
                    2946,
                    3011,
                    776,
                    1130,
                    2859,
                    782,
                    751,
                    2862,
                    785,
                    2992,
                    2835,
                    758,
                    1982,
                    2847
                ],
                "escape.xhtml_escape": [
                    770,
                    1253,
                    751
                ],
                "p": [
                    753,
                    770,
                    772,
                    751
                ],
                "sloc": [
                    760,
                    754,
                    755,
                    759
                ],
                "html.rindex": [
                    754,
                    759
                ],
                "css": [
                    776,
                    770,
                    779,
                    774
                ],
                "hloc": [
                    773,
                    774,
                    778,
                    779,
                    781,
                    782,
                    784,
                    785
                ],
                "html.index": [
                    784,
                    778,
                    781,
                    773
                ],
                "template_path": [
                    801,
                    803,
                    804,
                    805,
                    807,
                    852,
                    795,
                    796
                ],
                "self.get_template_path": [
                    795
                ],
                "frame": [
                    800,
                    801,
                    797,
                    798,
                    799
                ],
                "sys._getframe": [
                    797
                ],
                "sys": [
                    1472,
                    1474,
                    1476,
                    1459,
                    797
                ],
                "web_file": [
                    798,
                    799
                ],
                "frame.f_code.co_filename": [
                    801,
                    798,
                    799
                ],
                "frame.f_code": [
                    801,
                    798,
                    799
                ],
                "frame.f_back": [
                    800
                ],
                "os.path.dirname": [
                    801
                ],
                "os.path": [
                    801,
                    2379,
                    2382,
                    2385,
                    2356,
                    2551,
                    2552,
                    2393,
                    2394,
                    2396
                ],
                "os": [
                    801,
                    1129,
                    2457,
                    2379,
                    1163,
                    2382,
                    2385,
                    2356,
                    2551,
                    2552,
                    2393,
                    2394,
                    2396
                ],
                "RequestHandler._template_loader_lock": [
                    802,
                    1997
                ],
                "RequestHandler._template_loaders": [
                    803,
                    805,
                    1998,
                    807
                ],
                "loader": [
                    804,
                    805,
                    807,
                    808,
                    1998,
                    1999
                ],
                "self.create_template_loader": [
                    804
                ],
                "t": [
                    808,
                    811,
                    2005
                ],
                "loader.load": [
                    808
                ],
                "namespace": [
                    833,
                    834,
                    809,
                    810,
                    811,
                    822
                ],
                "self.get_template_namespace": [
                    809
                ],
                "namespace.update": [
                    833,
                    810
                ],
                "t.generate": [
                    811
                ],
                "self.current_user": [
                    2704,
                    825,
                    1139
                ],
                "self.locale": [
                    826,
                    827,
                    828,
                    2734
                ],
                "self.locale.translate": [
                    827
                ],
                "self.locale.pgettext": [
                    828
                ],
                "self.xsrf_form_html": [
                    830
                ],
                "self.reverse_url": [
                    831
                ],
                "settings": [
                    1728,
                    2532,
                    1735,
                    2536,
                    2569,
                    844,
                    845,
                    846,
                    1741,
                    848,
                    1742,
                    1746,
                    851,
                    1748,
                    1750
                ],
                "template.Loader": [
                    852
                ],
                "template": [
                    852
                ],
                "transform": [
                    872,
                    892,
                    893,
                    870
                ],
                "transform.transform_first_chunk": [
                    872
                ],
                "include_footers": [
                    874,
                    893
                ],
                "self.request.method": [
                    1379,
                    1412,
                    1639,
                    1449,
                    1386,
                    2282,
                    876,
                    2705,
                    914,
                    1662,
                    895
                ],
                "cookie": [
                    1156,
                    1157,
                    1158,
                    1192,
                    1194,
                    883,
                    884,
                    1174,
                    1179
                ],
                "self._new_cookie.values": [
                    883
                ],
                "self.add_header": [
                    884
                ],
                "cookie.OutputString": [
                    884
                ],
                "start_line": [
                    890,
                    1924,
                    886
                ],
                "httputil.ResponseStartLine": [
                    886
                ],
                "self.request.connection.write_headers": [
                    889
                ],
                "callback": [
                    896,
                    890
                ],
                "transform.transform_chunk": [
                    893
                ],
                "self.request.connection.write": [
                    896
                ],
                "future": [
                    898,
                    899,
                    900
                ],
                "Future": [
                    2008,
                    898,
                    1927
                ],
                "future.set_result": [
                    899
                ],
                "self.write": [
                    908,
                    2277,
                    998
                ],
                "self.set_etag_header": [
                    2304,
                    916
                ],
                "self.check_etag_header": [
                    917,
                    2327
                ],
                "self._clear_headers_for_304": [
                    922
                ],
                "content_length": [
                    2268,
                    2262,
                    2264,
                    2266,
                    2269,
                    924,
                    925
                ],
                "part": [
                    3176,
                    3177,
                    924,
                    1309,
                    1310
                ],
                "self.flush": [
                    2278,
                    934
                ],
                "self.request.finish": [
                    935
                ],
                "self._log": [
                    936
                ],
                "self.on_finish": [
                    938
                ],
                "gen_log.error": [
                    955,
                    964,
                    2580,
                    1471
                ],
                "gen_log": [
                    3105,
                    964,
                    1200,
                    3089,
                    2580,
                    1493,
                    3093,
                    955,
                    3101,
                    1471
                ],
                "kwargs.get": [
                    969,
                    2050
                ],
                "exception": [
                    971,
                    972,
                    973
                ],
                "exception.reason": [
                    972,
                    973
                ],
                "self.write_error": [
                    976
                ],
                "app_log.error": [
                    1424,
                    978,
                    1495,
                    1463
                ],
                "app_log": [
                    1463,
                    1424,
                    978,
                    1495,
                    1816
                ],
                "self.settings.get": [
                    994,
                    1125,
                    1766,
                    1743,
                    1277,
                    1759
                ],
                "self.settings": [
                    1760,
                    1761,
                    994,
                    1762,
                    1763,
                    1125,
                    1766,
                    1735,
                    1288,
                    1897,
                    1898,
                    1743,
                    1744,
                    1277,
                    1759
                ],
                "line": [
                    997,
                    998
                ],
                "traceback.format_exception": [
                    997
                ],
                "traceback": [
                    1369,
                    997
                ],
                "self._locale": [
                    1024,
                    1028,
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "self.get_user_locale": [
                    1020
                ],
                "self.get_browser_locale": [
                    1022
                ],
                "locale.setter": [
                    1026
                ],
                "locale": [
                    1026,
                    1061,
                    1062
                ],
                "self.request.headers": [
                    1346,
                    1230,
                    1231,
                    2227,
                    1045,
                    1046,
                    2332
                ],
                "languages": [
                    1048,
                    1046
                ],
                "split": [
                    1049,
                    2658,
                    3084,
                    1046
                ],
                "locales": [
                    1057,
                    1058,
                    1059,
                    1060,
                    1047
                ],
                "language": [
                    1048,
                    1049
                ],
                "parts": [
                    3104,
                    1057,
                    3108,
                    3176,
                    3084,
                    3085,
                    3087,
                    3088,
                    3091,
                    1049,
                    1050,
                    1052
                ],
                "language.strip": [
                    1049
                ],
                "startswith": [
                    3104,
                    1050,
                    2382
                ],
                "score": [
                    1056,
                    1057,
                    1052,
                    1054
                ],
                "locales.append": [
                    1057
                ],
                "locales.sort": [
                    1059
                ],
                "pair": [
                    1059
                ],
                "codes": [
                    1060,
                    1061
                ],
                "l": [
                    1060
                ],
                "locale.get": [
                    1061,
                    1062
                ],
                "self._current_user": [
                    1081,
                    1076,
                    1077
                ],
                "self.get_current_user": [
                    1076
                ],
                "current_user.setter": [
                    1079
                ],
                "current_user": [
                    1079
                ],
                "token": [
                    1185,
                    1124,
                    1158,
                    1127,
                    1160,
                    1161,
                    1192,
                    1163,
                    1194,
                    1133,
                    1165,
                    1197,
                    1229,
                    1232,
                    1234,
                    1236,
                    1182
                ],
                "timestamp": [
                    1158,
                    1160,
                    1164,
                    1165,
                    3091,
                    3092,
                    3095,
                    1179,
                    1184,
                    1185,
                    1196,
                    1197,
                    2988,
                    2991,
                    2992,
                    3127,
                    3130,
                    3135,
                    3014,
                    3151,
                    3152,
                    1124,
                    1134
                ],
                "self._get_raw_xsrf_token": [
                    1235,
                    1124
                ],
                "output_version": [
                    1128,
                    1137,
                    1125,
                    1126
                ],
                "self._xsrf_token": [
                    1130,
                    1140,
                    1142,
                    1127
                ],
                "binascii.b2a_hex": [
                    1132,
                    1133,
                    1127
                ],
                "binascii": [
                    1127,
                    1192,
                    1193,
                    1132,
                    1133,
                    1181,
                    1183
                ],
                "mask": [
                    1129,
                    1132,
                    1133,
                    1179,
                    1181,
                    1183
                ],
                "os.urandom": [
                    1129,
                    1163
                ],
                "_websocket_mask": [
                    1133,
                    1182
                ],
                "self._decode_xsrf_token": [
                    1234,
                    1158
                ],
                "self._raw_xsrf_token": [
                    1165,
                    1166
                ],
                "_signed_value_version_re.match": [
                    3038,
                    1174
                ],
                "_signed_value_version_re": [
                    3038,
                    1174,
                    3031
                ],
                "m.group": [
                    1177,
                    3043
                ],
                "_": [
                    3115,
                    1234,
                    1235,
                    1179,
                    3167
                ],
                "masked_token": [
                    1179,
                    1183
                ],
                "cookie.split": [
                    1179
                ],
                "binascii.a2b_hex": [
                    1192,
                    1181,
                    1183
                ],
                "binascii.Error": [
                    1193
                ],
                "gen_log.debug": [
                    1200
                ],
                "self.get_argument": [
                    1229
                ],
                "self.request.headers.get": [
                    1346,
                    1230,
                    1231,
                    2227,
                    2332
                ],
                "expected_token": [
                    1235,
                    1236
                ],
                "_time_independent_equals": [
                    3088,
                    3147,
                    1236,
                    2966
                ],
                "self.xsrf_token": [
                    1253
                ],
                "get_url": [
                    1288,
                    1277
                ],
                "make_static_url": [
                    1277
                ],
                "StaticFileHandler": [
                    2001,
                    1749,
                    1278
                ],
                "include_host": [
                    1280,
                    1281,
                    1283
                ],
                "base": [
                    1288,
                    1284,
                    1286
                ],
                "self.request.protocol": [
                    1284,
                    1943
                ],
                "self.request.host": [
                    1284
                ],
                "feature": [
                    1294
                ],
                "self.application.reverse_url": [
                    1298
                ],
                "hasher": [
                    2447,
                    2449,
                    2452,
                    2453,
                    1308,
                    1310,
                    1311
                ],
                "hashlib.sha1": [
                    1308,
                    3175
                ],
                "hashlib": [
                    1308,
                    3175,
                    3182,
                    2447
                ],
                "hasher.update": [
                    2449,
                    2452,
                    1310
                ],
                "hasher.hexdigest": [
                    2453,
                    1311
                ],
                "etag": [
                    1320,
                    1321,
                    1322,
                    1357,
                    1358
                ],
                "self.compute_etag": [
                    1320
                ],
                "computed_etag": [
                    1348,
                    1341,
                    1358
                ],
                "self._headers.get": [
                    1341
                ],
                "etags": [
                    1344,
                    1352,
                    1348,
                    1357
                ],
                "re.findall": [
                    1344
                ],
                "match": [
                    1351,
                    1959,
                    1353,
                    1962,
                    1359,
                    1361,
                    1947,
                    1948
                ],
                "val": [
                    1356,
                    1358
                ],
                "x.startswith": [
                    1356
                ],
                "raise_exc_info": [
                    1369
                ],
                "self._handle_request_exception": [
                    1371,
                    1422
                ],
                "transforms": [
                    2016,
                    1377,
                    1731,
                    2005,
                    1726
                ],
                "self.SUPPORTED_METHODS": [
                    1379
                ],
                "arg": [
                    1381
                ],
                "self.check_xsrf_cookie": [
                    1388
                ],
                "result": [
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    2838,
                    2841,
                    2843,
                    2844,
                    2971,
                    2974,
                    2977,
                    2850,
                    2978,
                    1572,
                    1573,
                    2853,
                    2855,
                    2856,
                    1584,
                    1591,
                    1390,
                    1391,
                    1392,
                    1393,
                    1394
                ],
                "self.prepare": [
                    1390
                ],
                "is_future": [
                    1573,
                    1414,
                    1391
                ],
                "self._prepared_future.set_result": [
                    1430,
                    1398
                ],
                "method": [
                    1412,
                    1509,
                    1413,
                    1572,
                    1636,
                    1669,
                    2702,
                    1648,
                    1659,
                    2717,
                    1567
                ],
                "self.request.method.lower": [
                    1412
                ],
                "e": [
                    1474,
                    1453,
                    1422,
                    2878,
                    1469,
                    1470,
                    1471
                ],
                "self._prepared_future.done": [
                    1426
                ],
                "gen.coroutine": [
                    2208,
                    1374
                ],
                "gen": [
                    2208,
                    1374
                ],
                "self.application.log_request": [
                    1446
                ],
                "self.request.uri": [
                    2712,
                    1449
                ],
                "self.request.remote_ip": [
                    1450
                ],
                "Finish": [
                    1453
                ],
                "self.log_exception": [
                    1459
                ],
                "sys.exc_info": [
                    1472,
                    1474,
                    1459,
                    1476
                ],
                "e.status_code": [
                    1474,
                    1470,
                    1471
                ],
                "e.reason": [
                    1470
                ],
                "self.send_error": [
                    1472,
                    1474,
                    1476
                ],
                "value.log_message": [
                    1489,
                    1490
                ],
                "value.status_code": [
                    1491
                ],
                "self._request_summary": [
                    1491,
                    1495
                ],
                "value.args": [
                    1492
                ],
                "gen_log.warning": [
                    3105,
                    3089,
                    3093,
                    1493,
                    3101
                ],
                "typ": [
                    1496
                ],
                "tb": [
                    1496
                ],
                "self._active_modules": [
                    1504,
                    1501,
                    1502,
                    1503
                ],
                "rendered": [
                    1504,
                    1505
                ],
                "render": [
                    1504,
                    1506
                ],
                "headers": [
                    2656,
                    2658,
                    1925,
                    2661,
                    2663,
                    2667,
                    1516,
                    1519,
                    2673,
                    2675,
                    2676,
                    2653,
                    2654,
                    2623
                ],
                "h": [
                    1520,
                    1519
                ],
                "self.clear_header": [
                    1520
                ],
                "stack_context.ExceptionStackContext": [
                    1570
                ],
                "stack_context": [
                    1570
                ],
                "self._stack_context_handle_exception": [
                    1571
                ],
                "f.result": [
                    1581
                ],
                "f": [
                    2016,
                    2851,
                    2852,
                    2853,
                    2855,
                    1581,
                    2839,
                    2840,
                    2841,
                    2843
                ],
                "add_future": [
                    1584
                ],
                "IOLoop.current": [
                    1584
                ],
                "IOLoop": [
                    1584
                ],
                "future_complete": [
                    1584
                ],
                "functools.wraps": [
                    1659,
                    1636,
                    2702,
                    1567
                ],
                "functools": [
                    1659,
                    1636,
                    2702,
                    1567
                ],
                "wrapper": [
                    1592,
                    1649,
                    2718,
                    1670
                ],
                "cls": [
                    2569,
                    2570,
                    2446,
                    2574,
                    2575,
                    2578,
                    2202,
                    2203,
                    1859,
                    1861,
                    1862,
                    1617,
                    1618,
                    1619,
                    1620,
                    1624,
                    1625,
                    1626,
                    2536
                ],
                "cls._stream_request_body": [
                    1619
                ],
                "self.request.path.endswith": [
                    2390,
                    1661,
                    1638
                ],
                "self.request.path": [
                    1638,
                    1640,
                    2390,
                    2391,
                    1947,
                    1661,
                    1663
                ],
                "uri": [
                    1665,
                    1666,
                    1640,
                    1641,
                    1643,
                    1644,
                    1663
                ],
                "self.request.path.rstrip": [
                    1640
                ],
                "self.request.query": [
                    1664,
                    1665,
                    1642,
                    1643
                ],
                "self.redirect": [
                    1666,
                    1644,
                    2126,
                    2391,
                    2714
                ],
                "httputil.HTTPServerConnectionDelegate": [
                    1673
                ],
                "self.transforms": [
                    1729,
                    1731,
                    1822,
                    1727
                ],
                "settings.get": [
                    1728,
                    2532,
                    1741,
                    1742,
                    1746,
                    1748,
                    1750
                ],
                "self.transforms.append": [
                    1729,
                    1822
                ],
                "GZipContentEncoding": [
                    1729
                ],
                "self.handlers": [
                    1827,
                    1732,
                    1832,
                    1804,
                    1805,
                    1807
                ],
                "self.named_handlers": [
                    1733,
                    1815,
                    1819,
                    1885,
                    1886
                ],
                "self.default_host": [
                    1833,
                    1734
                ],
                "default_host": [
                    1734
                ],
                "self.ui_modules": [
                    1736,
                    2872,
                    2869,
                    1862
                ],
                "_linkify": [
                    1736
                ],
                "_xsrf_form_html": [
                    1737
                ],
                "TemplateModule": [
                    1738,
                    2813
                ],
                "self.ui_methods": [
                    1848,
                    1740
                ],
                "self._load_ui_modules": [
                    1856,
                    1852,
                    1741
                ],
                "self._load_ui_methods": [
                    1843,
                    1742,
                    1839
                ],
                "handlers": [
                    1827,
                    1829,
                    1798,
                    1832,
                    1834,
                    1805,
                    1807,
                    1745,
                    1939,
                    1940,
                    1813,
                    1754,
                    1756,
                    1757,
                    1946
                ],
                "static_url_prefix": [
                    1752,
                    1746
                ],
                "static_handler_class": [
                    1754,
                    1748
                ],
                "static_handler_args": [
                    1755,
                    1750,
                    1751
                ],
                "pattern": [
                    1827,
                    1828,
                    1832,
                    1833,
                    1804,
                    2926,
                    2927,
                    2928,
                    2929,
                    2898,
                    2899,
                    2900,
                    2930,
                    2932,
                    1752,
                    1754,
                    2938
                ],
                "re.escape": [
                    1752
                ],
                "handlers.insert": [
                    1754
                ],
                "self.add_handlers": [
                    1757
                ],
                "self.settings.setdefault": [
                    1760,
                    1761,
                    1762,
                    1763
                ],
                "autoreload.start": [
                    1768
                ],
                "autoreload": [
                    1768
                ],
                "server": [
                    1787,
                    1788
                ],
                "HTTPServer": [
                    1787
                ],
                "server.listen": [
                    1788
                ],
                "port": [
                    1788
                ],
                "address": [
                    1788
                ],
                "host_pattern.endswith": [
                    1796
                ],
                "host_pattern": [
                    1805,
                    1796,
                    1797,
                    1807
                ],
                "self.handlers.insert": [
                    1805
                ],
                "self.handlers.append": [
                    1807
                ],
                "spec": [
                    1947,
                    1956,
                    1809,
                    1810,
                    1811,
                    1812,
                    1813,
                    1814,
                    1815,
                    1951,
                    1818,
                    1819,
                    1949,
                    1950,
                    1946
                ],
                "host_handlers": [
                    1809
                ],
                "URLSpec": [
                    2962,
                    1812
                ],
                "handlers.append": [
                    1813
                ],
                "spec.name": [
                    1818,
                    1819,
                    1814,
                    1815
                ],
                "app_log.warning": [
                    1816
                ],
                "transform_class": [
                    1822
                ],
                "host": [
                    1825,
                    1828
                ],
                "split_host_and_port": [
                    1825
                ],
                "request.host.lower": [
                    1825
                ],
                "request.host": [
                    1825
                ],
                "matches": [
                    1826,
                    1829,
                    1831,
                    1834,
                    1835
                ],
                "pattern.match": [
                    1833,
                    1828
                ],
                "matches.extend": [
                    1834,
                    1829
                ],
                "request.headers": [
                    2647,
                    1831
                ],
                "methods": [
                    1838,
                    1839,
                    1840,
                    1841,
                    1842,
                    1845
                ],
                "types.ModuleType": [
                    1851,
                    1838
                ],
                "types": [
                    1851,
                    1838
                ],
                "fn": [
                    1848,
                    1845,
                    1846
                ],
                "methods.items": [
                    1845
                ],
                "name.startswith": [
                    1846
                ],
                "lower": [
                    1847
                ],
                "modules": [
                    1858,
                    1859,
                    1851,
                    1852,
                    1853,
                    1854,
                    1855
                ],
                "modules.items": [
                    1859
                ],
                "UIModule": [
                    2792,
                    2797,
                    2787,
                    1861
                ],
                "_RequestDispatcher": [
                    1872,
                    1868
                ],
                "request_conn": [
                    1868
                ],
                "dispatcher": [
                    1872,
                    1873,
                    1874
                ],
                "dispatcher.set_request": [
                    1873
                ],
                "dispatcher.execute": [
                    1874
                ],
                "reverse": [
                    1886
                ],
                "handler": [
                    1898,
                    2731,
                    1900,
                    2732,
                    1902,
                    2733,
                    2734,
                    1906,
                    1907,
                    1908,
                    2868,
                    2905,
                    2908,
                    2813,
                    2910
                ],
                "handler.get_status": [
                    1907,
                    1900,
                    1902
                ],
                "log_method": [
                    1905,
                    1907,
                    1901,
                    1903
                ],
                "access_log.info": [
                    1901
                ],
                "access_log": [
                    1905,
                    1901,
                    1903
                ],
                "access_log.warning": [
                    1903
                ],
                "access_log.error": [
                    1905
                ],
                "request_time": [
                    1906,
                    1908
                ],
                "handler.request.request_time": [
                    1906
                ],
                "handler.request": [
                    1906,
                    2732
                ],
                "handler._request_summary": [
                    1908
                ],
                "httputil.HTTPMessageDelegate": [
                    1911
                ],
                "self.connection": [
                    1914,
                    1924
                ],
                "connection": [
                    1914
                ],
                "self.chunks": [
                    1976,
                    1916,
                    1990,
                    1982
                ],
                "self.handler_class": [
                    2918,
                    1917,
                    1933,
                    1965,
                    1969,
                    2003,
                    1941,
                    1949,
                    2910
                ],
                "self.handler_kwargs": [
                    1966,
                    1970,
                    1918,
                    2004,
                    1942,
                    1950
                ],
                "self.set_request": [
                    1923
                ],
                "httputil.HTTPServerRequest": [
                    1923
                ],
                "self.stream_request_body": [
                    1987,
                    1926,
                    1933,
                    1973,
                    2007,
                    1979
                ],
                "self.execute": [
                    1928,
                    1984
                ],
                "self._find_handler": [
                    1932
                ],
                "app": [
                    1964,
                    1965,
                    1966,
                    1938,
                    1939,
                    1944
                ],
                "app._get_host_handlers": [
                    1939
                ],
                "RedirectHandler": [
                    1941
                ],
                "app.default_host": [
                    1944
                ],
                "spec.regex.match": [
                    1947
                ],
                "spec.regex": [
                    1947,
                    1956,
                    1951
                ],
                "spec.handler_class": [
                    1949
                ],
                "spec.kwargs": [
                    1950
                ],
                "spec.regex.groups": [
                    1951
                ],
                "spec.regex.groupindex": [
                    1956
                ],
                "_unquote_or_none": [
                    1961,
                    1958
                ],
                "items": [
                    1959
                ],
                "match.groupdict": [
                    1959
                ],
                "s": [
                    3010,
                    1961,
                    1962,
                    3115,
                    3183,
                    3194,
                    3195,
                    3196
                ],
                "match.groups": [
                    1962
                ],
                "app.settings.get": [
                    1964,
                    1966
                ],
                "app.settings": [
                    1964,
                    1965,
                    1966
                ],
                "ErrorHandler": [
                    1969
                ],
                "self.handler.data_received": [
                    1974
                ],
                "self.handler": [
                    2016,
                    2784,
                    1988,
                    2021,
                    2794,
                    2731,
                    2738,
                    2003,
                    2868,
                    2872,
                    1974,
                    2008
                ],
                "data": [
                    2446,
                    2448,
                    2449,
                    2451,
                    1974,
                    1976
                ],
                "self.chunks.append": [
                    1976
                ],
                "self.request.body.set_result": [
                    1980
                ],
                "self.request._parse_body": [
                    1983
                ],
                "self.handler.on_connection_close": [
                    1988
                ],
                "RequestHandler._template_loaders.values": [
                    1998
                ],
                "loader.reset": [
                    1999
                ],
                "StaticFileHandler.reset": [
                    2001
                ],
                "self.application.transforms": [
                    2005
                ],
                "self.handler._prepared_future": [
                    2008,
                    2021
                ],
                "self.handler._execute": [
                    2016
                ],
                "self.status_code": [
                    2056,
                    2057,
                    2047
                ],
                "self.log_message": [
                    2048,
                    2058,
                    2059,
                    2052
                ],
                "log_message": [
                    2048,
                    2051,
                    2052
                ],
                "self.args": [
                    2049,
                    2059
                ],
                "self.reason": [
                    2057,
                    2050
                ],
                "log_message.replace": [
                    2052
                ],
                "httputil.responses.get": [
                    2057
                ],
                "arg_name": [
                    2093,
                    2094
                ],
                "self.arg_name": [
                    2094
                ],
                "self._url": [
                    2122,
                    2126
                ],
                "self._permanent": [
                    2123,
                    2126
                ],
                "CACHE_MAX_AGE": [
                    2191
                ],
                "_static_hashes": [
                    2193
                ],
                "_lock": [
                    2194
                ],
                "self.root": [
                    2215,
                    2197,
                    2213
                ],
                "self.default_filename": [
                    2393,
                    2386,
                    2198
                ],
                "default_filename": [
                    2198
                ],
                "cls._lock": [
                    2202,
                    2574
                ],
                "cls._static_hashes": [
                    2203,
                    2575
                ],
                "self.get": [
                    2206
                ],
                "self.path": [
                    2211,
                    2213,
                    2313,
                    2320,
                    2384,
                    2397
                ],
                "self.parse_url_path": [
                    2211
                ],
                "absolute_path": [
                    2213,
                    2215,
                    2382,
                    2385,
                    2393,
                    2394,
                    2396,
                    2398
                ],
                "self.get_absolute_path": [
                    2213
                ],
                "self.absolute_path": [
                    2272,
                    2214,
                    2216,
                    2293,
                    2457,
                    2492
                ],
                "self.validate_absolute_path": [
                    2214
                ],
                "self.modified": [
                    2337,
                    2306,
                    2307,
                    2313,
                    2219
                ],
                "self.get_modified_time": [
                    2219
                ],
                "self.set_headers": [
                    2220
                ],
                "self.should_return_304": [
                    2222
                ],
                "request_range": [
                    2234,
                    2226,
                    2235,
                    2231
                ],
                "range_header": [
                    2227,
                    2228,
                    2231
                ],
                "httputil._parse_request_range": [
                    2231
                ],
                "size": [
                    2242,
                    2245,
                    2246,
                    2249,
                    2254,
                    2257,
                    2268,
                    2233,
                    2266,
                    2236
                ],
                "self.get_content_size": [
                    2233
                ],
                "start": [
                    2272,
                    2244,
                    2245,
                    2254,
                    2257,
                    2417,
                    2259,
                    2418,
                    2261,
                    2262,
                    2420,
                    2265,
                    2266,
                    2235,
                    2236
                ],
                "end": [
                    2272,
                    2246,
                    2249,
                    2254,
                    2257,
                    2259,
                    2419,
                    2261,
                    2262,
                    2263,
                    2264,
                    2420,
                    2235,
                    2236
                ],
                "httputil._get_content_range": [
                    2257
                ],
                "include_body": [
                    2271
                ],
                "content": [
                    2272,
                    2273,
                    2274,
                    2275
                ],
                "self.get_content": [
                    2272
                ],
                "version_hash": [
                    2536,
                    2537,
                    2540,
                    2293,
                    2294,
                    2296
                ],
                "self._get_cached_version": [
                    2293
                ],
                "content_type": [
                    2314,
                    2309,
                    2310,
                    2311
                ],
                "self.get_content_type": [
                    2309
                ],
                "cache_time": [
                    2313,
                    2315,
                    2317,
                    2318
                ],
                "self.get_cache_time": [
                    2313
                ],
                "self.set_extra_headers": [
                    2320
                ],
                "ims_value": [
                    2332,
                    2333,
                    2334
                ],
                "date_tuple": [
                    2336,
                    2334,
                    2335
                ],
                "email.utils.parsedate": [
                    2334
                ],
                "email.utils": [
                    2334
                ],
                "email": [
                    2334
                ],
                "if_since": [
                    2336,
                    2337
                ],
                "abspath": [
                    2416,
                    2356,
                    2357,
                    2446
                ],
                "os.path.abspath": [
                    2379,
                    2356
                ],
                "os.path.join": [
                    2393,
                    2356
                ],
                "root": [
                    2379,
                    2356,
                    2382
                ],
                "os.path.sep": [
                    2552,
                    2382,
                    2551
                ],
                "os.path.isdir": [
                    2385
                ],
                "os.path.exists": [
                    2394
                ],
                "os.path.isfile": [
                    2396
                ],
                "file": [
                    2416,
                    2418,
                    2427
                ],
                "file.seek": [
                    2418
                ],
                "remaining": [
                    2433,
                    2434,
                    2420,
                    2422,
                    2425,
                    2426,
                    2429,
                    2430
                ],
                "chunk_size": [
                    2424,
                    2425,
                    2426,
                    2427
                ],
                "file.read": [
                    2427
                ],
                "cls.get_content": [
                    2446
                ],
                "hashlib.md5": [
                    2447
                ],
                "self._stat_result": [
                    2457,
                    2458
                ],
                "os.stat": [
                    2457
                ],
                "stat_result": [
                    2472,
                    2482,
                    2484,
                    2471
                ],
                "self._stat": [
                    2482,
                    2471
                ],
                "stat.ST_SIZE": [
                    2472
                ],
                "stat": [
                    2472,
                    2484
                ],
                "modified": [
                    2483,
                    2485
                ],
                "datetime.datetime.utcfromtimestamp": [
                    2483
                ],
                "stat.ST_MTIME": [
                    2484
                ],
                "mime_type": [
                    2492,
                    2493
                ],
                "encoding": [
                    2492
                ],
                "mimetypes.guess_type": [
                    2492
                ],
                "mimetypes": [
                    2492
                ],
                "self.CACHE_MAX_AGE": [
                    2510
                ],
                "include_version": [
                    2533
                ],
                "cls.get_version": [
                    2536
                ],
                "url_path": [
                    2552,
                    2553
                ],
                "url_path.replace": [
                    2552
                ],
                "abs_path": [
                    2569,
                    2570,
                    2576,
                    2578,
                    2580,
                    2581,
                    2582
                ],
                "cls.get_absolute_path": [
                    2569
                ],
                "cls._get_cached_version": [
                    2570
                ],
                "hashes": [
                    2575,
                    2576,
                    2578,
                    2581,
                    2582
                ],
                "cls.get_content_version": [
                    2578
                ],
                "hsh": [
                    2584,
                    2582,
                    2583
                ],
                "hashes.get": [
                    2582
                ],
                "self.fallback": [
                    2608,
                    2605
                ],
                "fallback": [
                    2605
                ],
                "OutputTransform": [
                    2629
                ],
                "CONTENT_TYPES": [
                    2641
                ],
                "MIN_LENGTH": [
                    2644
                ],
                "self._gzipping": [
                    2657,
                    2659,
                    2662,
                    2647,
                    2679
                ],
                "request.headers.get": [
                    2647
                ],
                "ctype.startswith": [
                    2650
                ],
                "ctype": [
                    2650,
                    2659,
                    2658
                ],
                "self.CONTENT_TYPES": [
                    2650
                ],
                "headers.get": [
                    2658
                ],
                "self._compressible_type": [
                    2659
                ],
                "finishing": [
                    2672,
                    2681,
                    2666,
                    2660
                ],
                "self.MIN_LENGTH": [
                    2660
                ],
                "self._gzip_value": [
                    2664,
                    2665,
                    2685,
                    2686,
                    2687
                ],
                "BytesIO": [
                    2664
                ],
                "self._gzip_file": [
                    2680,
                    2665,
                    2682,
                    2684
                ],
                "gzip.GzipFile": [
                    2665
                ],
                "gzip": [
                    2665
                ],
                "self.transform_chunk": [
                    2666
                ],
                "self._gzip_file.write": [
                    2680
                ],
                "self._gzip_file.close": [
                    2682
                ],
                "self._gzip_file.flush": [
                    2684
                ],
                "self._gzip_value.getvalue": [
                    2685
                ],
                "self._gzip_value.truncate": [
                    2686
                ],
                "self._gzip_value.seek": [
                    2687
                ],
                "self.get_login_url": [
                    2706
                ],
                "scheme": [
                    2708
                ],
                "urlparse.urlsplit": [
                    2708
                ],
                "urlparse": [
                    2708
                ],
                "next_url": [
                    2712,
                    2713,
                    2710
                ],
                "self.request.full_url": [
                    2710
                ],
                "urlencode": [
                    2713
                ],
                "handler.ui": [
                    2733
                ],
                "handler.locale": [
                    2734
                ],
                "self.handler.current_user": [
                    2738
                ],
                "self.handler.render_string": [
                    2784
                ],
                "escape.linkify": [
                    2789
                ],
                "text": [
                    2789
                ],
                "self.handler.xsrf_form_html": [
                    2794
                ],
                "self._resource_list": [
                    2832,
                    2821,
                    2815
                ],
                "self._resource_dict": [
                    2816,
                    2824,
                    2820,
                    2822
                ],
                "self._resource_list.append": [
                    2821
                ],
                "set_resources": [
                    2828
                ],
                "r": [
                    2832
                ],
                "key": [
                    2832,
                    2872,
                    2876
                ],
                "self._get_resources": [
                    2851,
                    2859,
                    2862,
                    2835,
                    2839,
                    2847
                ],
                "result.append": [
                    2841,
                    2853
                ],
                "result.extend": [
                    2843,
                    2855
                ],
                "ui_modules": [
                    2869
                ],
                "self.handler._ui_module": [
                    2872
                ],
                "pattern.endswith": [
                    2929,
                    2898
                ],
                "self.regex": [
                    2946,
                    2917,
                    2950,
                    2926,
                    2900,
                    2901,
                    2932,
                    2903
                ],
                "self.regex.groupindex": [
                    2901
                ],
                "self.regex.groups": [
                    2946,
                    2932,
                    2901
                ],
                "self.regex.pattern": [
                    2950,
                    2917,
                    2926,
                    2903
                ],
                "import_object": [
                    2908
                ],
                "self.kwargs": [
                    2918,
                    2911
                ],
                "self.name": [
                    2912,
                    2918
                ],
                "self._path": [
                    2960,
                    2913,
                    2954,
                    2949
                ],
                "self._group_count": [
                    2913,
                    2951
                ],
                "self._find_groups": [
                    2913
                ],
                "self.__class__.__name__": [
                    2917
                ],
                "pattern.startswith": [
                    2927
                ],
                "pattern.count": [
                    2932
                ],
                "pieces": [
                    2944,
                    2937,
                    2946,
                    2942
                ],
                "fragment": [
                    2944,
                    2938,
                    2939,
                    2940,
                    2942
                ],
                "pattern.split": [
                    2938
                ],
                "paren_loc": [
                    2940,
                    2941,
                    2942
                ],
                "fragment.index": [
                    2940
                ],
                "pieces.append": [
                    2944,
                    2942
                ],
                "converted_args": [
                    2960,
                    2955,
                    2959
                ],
                "a": [
                    2976,
                    2956,
                    2957,
                    2958,
                    2959,
                    2969,
                    2972,
                    2973
                ],
                "converted_args.append": [
                    2959
                ],
                "escape.url_escape": [
                    2959
                ],
                "hmac": [
                    3182,
                    2965,
                    2966,
                    3175
                ],
                "hmac.compare_digest": [
                    2966
                ],
                "b": [
                    2976,
                    2969,
                    2973
                ],
                "y": [
                    2976,
                    2977,
                    2973,
                    2974
                ],
                "clock": [
                    3075,
                    3078,
                    2985,
                    2986,
                    2988,
                    3152,
                    3059,
                    3060,
                    3092,
                    3095
                ],
                "base64.b64encode": [
                    2989
                ],
                "base64": [
                    3108,
                    2989,
                    3156
                ],
                "signature": [
                    3087,
                    2992,
                    3025,
                    3024,
                    2991,
                    3088
                ],
                "_create_signature_v1": [
                    3087,
                    2991
                ],
                "to_sign": [
                    3024,
                    3025,
                    3011
                ],
                "format_field": [
                    3016,
                    3013,
                    3014,
                    3015
                ],
                "_create_signature_v2": [
                    3024,
                    3146
                ],
                "_get_version": [
                    3163,
                    3069
                ],
                "_decode_signed_value_v1": [
                    3074
                ],
                "_decode_signed_value_v2": [
                    3077
                ],
                "base64.b64decode": [
                    3108,
                    3156
                ],
                "length": [
                    3115,
                    3116
                ],
                "rest": [
                    3115,
                    3117,
                    3120,
                    3122,
                    3123,
                    3125,
                    3126,
                    3127,
                    3128,
                    3129
                ],
                "s.partition": [
                    3115
                ],
                "field_value": [
                    3123,
                    3117
                ],
                "_consume_field": [
                    3128,
                    3129,
                    3126,
                    3127
                ],
                "name_field": [
                    3128,
                    3130,
                    3149,
                    3135
                ],
                "value_field": [
                    3129,
                    3130,
                    3156,
                    3135
                ],
                "passed_sig": [
                    3138,
                    3147,
                    3129,
                    3130,
                    3135
                ],
                "_decode_fields_v2": [
                    3167,
                    3135
                ],
                "signed_string": [
                    3138,
                    3146
                ],
                "expected_sig": [
                    3146,
                    3147
                ],
                "hmac.new": [
                    3182,
                    3175
                ],
                "hash.update": [
                    3177,
                    3183
                ],
                "hash.hexdigest": [
                    3184,
                    3178
                ],
                "hashlib.sha256": [
                    3182
                ],
                "escape.url_unescape": [
                    3196
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/tornado_15/tornado/test/web_test.py",
                "test_function": "test_path_traversal_protection",
                "test_function_code": "    def test_path_traversal_protection(self):\n        with ExpectLog(gen_log, \".*not in root static directory\"):\n            response = self.get_and_head('/static/../static_foo.txt')\n        # Attempted path traversal should result in 403, not 200\n        # (which means the check failed and the file was served)\n        # or 404 (which means that the file didn't exist and\n        # is probably a packaging error).\n        self.assertEqual(response.code, 403)",
                "test_error": "Exception: did not get expected log message",
                "full_test_error": "self = <tornado.test.web_test.StaticFileTest testMethod=test_path_traversal_protection>\n\n    def test_path_traversal_protection(self):\n        with ExpectLog(gen_log, \".*not in root static directory\"):\n>           response = self.get_and_head('/static/../static_foo.txt')\n\ntornado/test/web_test.py:1186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tornado.testing.ExpectLog object at 0x1051d9710>, typ = None\nvalue = None, tb = None\n\n    def __exit__(self, typ, value, tb):\n        self.logger.removeFilter(self)\n        if not typ and self.required and not self.matched:\n>           raise Exception(\"did not get expected log message\")\nE           Exception: did not get expected log message\n\ntornado/testing.py:613: Exception",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}