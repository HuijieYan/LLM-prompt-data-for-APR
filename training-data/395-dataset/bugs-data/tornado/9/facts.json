{
    "1.1.1": "def url_concat(url, args):\n    \n    parsed_url = urlparse(url)\n    if isinstance(args, dict):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args.items())\n    elif isinstance(args, list) or isinstance(args, tuple):\n        parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n        parsed_query.extend(args)\n    else:\n        err = \"'args' parameter should be dict, list or tuple. Not {0}\".format(\n            type(args))\n        raise TypeError(err)\n    final_query = urlencode(parsed_query)\n    url = urlunparse((\n        parsed_url[0],\n        parsed_url[1],\n        parsed_url[2],\n        parsed_url[3],\n        final_query,\n        parsed_url[5]))\n    return url\n",
    "1.1.2": "Concatenate url and arguments regardless of whether\nurl has existing query parameters.\n\n``args`` may be either a dictionary or a list of key-value pairs\n(the latter allows for multiple values with the same key.\n\n>>> url_concat(\"http://example.com/foo\", dict(c=\"d\"))\n'http://example.com/foo?c=d'\n>>> url_concat(\"http://example.com/foo?a=b\", dict(c=\"d\"))\n'http://example.com/foo?a=b&c=d'\n>>> url_concat(\"http://example.com/foo?a=b\", [(\"c\", \"d\"), (\"c\", \"d2\")])\n'http://example.com/foo?a=b&c=d&c=d2'",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/tornado_9/tornado/httputil.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_url_concat_none_params(self):\n        url = url_concat(\n            \"https://localhost/path?r=1&t=2\",\n            None,\n        )\n        self.assertEqual(url, \"https://localhost/path?r=1&t=2\")"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/tornado_9/tornado/test/httputil_test.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: 'args' parameter should be dict, list or tuple. Not <class 'NoneType'>"
        ]
    ],
    "2.1.2": [
        [
            "self = <tornado.test.httputil_test.TestUrlConcat testMethod=test_url_concat_none_params>\n\n    def test_url_concat_none_params(self):\n        url = url_concat(\n            \"https://localhost/path?r=1&t=2\",\n>           None,\n        )\n\ntornado/test/httputil_test.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nurl = 'https://localhost/path?r=1&t=2', args = None\n\n    def url_concat(url, args):\n        \"\"\"Concatenate url and arguments regardless of whether\n        url has existing query parameters.\n    \n        ``args`` may be either a dictionary or a list of key-value pairs\n        (the latter allows for multiple values with the same key.\n    \n        >>> url_concat(\"http://example.com/foo\", dict(c=\"d\"))\n        'http://example.com/foo?c=d'\n        >>> url_concat(\"http://example.com/foo?a=b\", dict(c=\"d\"))\n        'http://example.com/foo?a=b&c=d'\n        >>> url_concat(\"http://example.com/foo?a=b\", [(\"c\", \"d\"), (\"c\", \"d2\")])\n        'http://example.com/foo?a=b&c=d&c=d2'\n        \"\"\"\n        parsed_url = urlparse(url)\n        if isinstance(args, dict):\n            parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n            parsed_query.extend(args.items())\n        elif isinstance(args, list) or isinstance(args, tuple):\n            parsed_query = parse_qsl(parsed_url.query, keep_blank_values=True)\n            parsed_query.extend(args)\n        else:\n            err = \"'args' parameter should be dict, list or tuple. Not {0}\".format(\n                type(args))\n>           raise TypeError(err)",
            "\ntornado/httputil.py:616: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "url": "'https://localhost/path?r=1&t=2'"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "url": "str"
            },
            {}
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}