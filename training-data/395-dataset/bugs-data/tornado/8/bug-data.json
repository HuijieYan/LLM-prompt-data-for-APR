{
    "tornado:8": {
        "/Volumes/SSD2T/bgp_envs/repos/tornado_8/tornado/websocket.py": {
            "buggy_functions": [
                {
                    "function_name": "accept_connection",
                    "function_code": "def accept_connection(self):\n    try:\n        self._handle_websocket_headers()\n        self._accept_connection()\n    except ValueError:\n        gen_log.debug(\"Malformed WebSocket request received\",\n                      exc_info=True)\n        self._abort()\n        return\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 616,
                    "end_line": 624,
                    "variables": {
                        "self._handle_websocket_headers": [
                            618
                        ],
                        "self": [
                            618,
                            619,
                            623
                        ],
                        "self._accept_connection": [
                            619
                        ],
                        "ValueError": [
                            620
                        ],
                        "gen_log.debug": [
                            621
                        ],
                        "gen_log": [
                            621
                        ],
                        "self._abort": [
                            623
                        ]
                    },
                    "filtered_variables": {
                        "self._handle_websocket_headers": [
                            618
                        ],
                        "self": [
                            618,
                            619,
                            623
                        ],
                        "self._accept_connection": [
                            619
                        ],
                        "gen_log.debug": [
                            621
                        ],
                        "gen_log": [
                            621
                        ],
                        "self._abort": [
                            623
                        ]
                    },
                    "diff_line_number": 618,
                    "class_data": {
                        "signature": "class WebSocketProtocol13(WebSocketProtocol)",
                        "docstring": "Implementation of the WebSocket protocol from RFC 6455.\n\nThis class supports versions 7 and 8 of the protocol in addition to the\nfinal version 13.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, handler, mask_outgoing=False, compression_options=None):\n    WebSocketProtocol.__init__(self, handler)\n    self.mask_outgoing = mask_outgoing\n    self._final_frame = False\n    self._frame_opcode = None\n    self._masked_frame = None\n    self._frame_mask = None\n    self._frame_length = None\n    self._fragmented_message_buffer = None\n    self._fragmented_message_opcode = None\n    self._waiting = None\n    self._compression_options = compression_options\n    self._decompressor = None\n    self._compressor = None\n    self._frame_compressed = None\n    self._message_bytes_in = 0\n    self._message_bytes_out = 0\n    self._wire_bytes_in = 0\n    self._wire_bytes_out = 0\n    self.ping_callback = None\n    self.last_ping = 0\n    self.last_pong = 0",
                            "def accept_connection(self):\n    try:\n        self._handle_websocket_headers()\n        self._accept_connection()\n    except ValueError:\n        gen_log.debug('Malformed WebSocket request received', exc_info=True)\n        self._abort()\n        return",
                            "def _handle_websocket_headers(self):\n    \"\"\"Verifies all invariant- and required headers\n\n    If a header is missing or have an incorrect value ValueError will be\n    raised\n    \"\"\"\n    fields = ('Host', 'Sec-Websocket-Key', 'Sec-Websocket-Version')\n    if not all(map(lambda f: self.request.headers.get(f), fields)):\n        raise ValueError('Missing/Invalid WebSocket headers')",
                            "@staticmethod\ndef compute_accept_value(key):\n    \"\"\"Computes the value for the Sec-WebSocket-Accept header,\n    given the value for Sec-WebSocket-Key.\n    \"\"\"\n    sha1 = hashlib.sha1()\n    sha1.update(utf8(key))\n    sha1.update(b'258EAFA5-E914-47DA-95CA-C5AB0DC85B11')\n    return native_str(base64.b64encode(sha1.digest()))",
                            "def _challenge_response(self):\n    return WebSocketProtocol13.compute_accept_value(self.request.headers.get('Sec-Websocket-Key'))",
                            "def _accept_connection(self):\n    subprotocols = self.request.headers.get('Sec-WebSocket-Protocol', '')\n    subprotocols = [s.strip() for s in subprotocols.split(',')]\n    if subprotocols:\n        selected = self.handler.select_subprotocol(subprotocols)\n        if selected:\n            assert selected in subprotocols\n            self.handler.set_header('Sec-WebSocket-Protocol', selected)\n    extensions = self._parse_extensions_header(self.request.headers)\n    for ext in extensions:\n        if ext[0] == 'permessage-deflate' and self._compression_options is not None:\n            self._create_compressors('server', ext[1], self._compression_options)\n            if 'client_max_window_bits' in ext[1] and ext[1]['client_max_window_bits'] is None:\n                del ext[1]['client_max_window_bits']\n            self.handler.set_header('Sec-WebSocket-Extensions', httputil._encode_header('permessage-deflate', ext[1]))\n            break\n    self.handler.clear_header('Content-Type')\n    self.handler.set_status(101)\n    self.handler.set_header('Upgrade', 'websocket')\n    self.handler.set_header('Connection', 'Upgrade')\n    self.handler.set_header('Sec-WebSocket-Accept', self._challenge_response())\n    self.handler.finish()\n    self.handler._attach_stream()\n    self.stream = self.handler.stream\n    self.start_pinging()\n    self._run_callback(self.handler.open, *self.handler.open_args, **self.handler.open_kwargs)\n    self._receive_frame()",
                            "def _parse_extensions_header(self, headers):\n    extensions = headers.get('Sec-WebSocket-Extensions', '')\n    if extensions:\n        return [httputil._parse_header(e.strip()) for e in extensions.split(',')]\n    return []",
                            "def _process_server_headers(self, key, headers):\n    \"\"\"Process the headers sent by the server to this client connection.\n\n    'key' is the websocket handshake challenge/response key.\n    \"\"\"\n    assert headers['Upgrade'].lower() == 'websocket'\n    assert headers['Connection'].lower() == 'upgrade'\n    accept = self.compute_accept_value(key)\n    assert headers['Sec-Websocket-Accept'] == accept\n    extensions = self._parse_extensions_header(headers)\n    for ext in extensions:\n        if ext[0] == 'permessage-deflate' and self._compression_options is not None:\n            self._create_compressors('client', ext[1])\n        else:\n            raise ValueError('unsupported extension %r', ext)",
                            "def _get_compressor_options(self, side, agreed_parameters, compression_options=None):\n    \"\"\"Converts a websocket agreed_parameters set to keyword arguments\n    for our compressor objects.\n    \"\"\"\n    options = dict(persistent=side + '_no_context_takeover' not in agreed_parameters)\n    wbits_header = agreed_parameters.get(side + '_max_window_bits', None)\n    if wbits_header is None:\n        options['max_wbits'] = zlib.MAX_WBITS\n    else:\n        options['max_wbits'] = int(wbits_header)\n    options['compression_options'] = compression_options\n    return options",
                            "def _create_compressors(self, side, agreed_parameters, compression_options=None):\n    allowed_keys = set(['server_no_context_takeover', 'client_no_context_takeover', 'server_max_window_bits', 'client_max_window_bits'])\n    for key in agreed_parameters:\n        if key not in allowed_keys:\n            raise ValueError('unsupported compression parameter %r' % key)\n    other_side = 'client' if side == 'server' else 'server'\n    self._compressor = _PerMessageDeflateCompressor(**self._get_compressor_options(side, agreed_parameters, compression_options))\n    self._decompressor = _PerMessageDeflateDecompressor(**self._get_compressor_options(other_side, agreed_parameters, compression_options))",
                            "def _write_frame(self, fin, opcode, data, flags=0):\n    if fin:\n        finbit = self.FIN\n    else:\n        finbit = 0\n    frame = struct.pack('B', finbit | opcode | flags)\n    l = len(data)\n    if self.mask_outgoing:\n        mask_bit = 128\n    else:\n        mask_bit = 0\n    if l < 126:\n        frame += struct.pack('B', l | mask_bit)\n    elif l <= 65535:\n        frame += struct.pack('!BH', 126 | mask_bit, l)\n    else:\n        frame += struct.pack('!BQ', 127 | mask_bit, l)\n    if self.mask_outgoing:\n        mask = os.urandom(4)\n        data = mask + _websocket_mask(mask, data)\n    frame += data\n    self._wire_bytes_out += len(frame)\n    return self.stream.write(frame)",
                            "def write_message(self, message, binary=False):\n    \"\"\"Sends the given message to the client of this Web Socket.\"\"\"\n    if binary:\n        opcode = 2\n    else:\n        opcode = 1\n    message = tornado.escape.utf8(message)\n    assert isinstance(message, bytes)\n    self._message_bytes_out += len(message)\n    flags = 0\n    if self._compressor:\n        message = self._compressor.compress(message)\n        flags |= self.RSV1\n    return self._write_frame(True, opcode, message, flags=flags)",
                            "def write_ping(self, data):\n    \"\"\"Send ping frame.\"\"\"\n    assert isinstance(data, bytes)\n    self._write_frame(True, 9, data)",
                            "def _receive_frame(self):\n    try:\n        self.stream.read_bytes(2, self._on_frame_start)\n    except StreamClosedError:\n        self._abort()",
                            "def _on_frame_start(self, data):\n    self._wire_bytes_in += len(data)\n    header, payloadlen = struct.unpack('BB', data)\n    self._final_frame = header & self.FIN\n    reserved_bits = header & self.RSV_MASK\n    self._frame_opcode = header & self.OPCODE_MASK\n    self._frame_opcode_is_control = self._frame_opcode & 8\n    if self._decompressor is not None and self._frame_opcode != 0:\n        self._frame_compressed = bool(reserved_bits & self.RSV1)\n        reserved_bits &= ~self.RSV1\n    if reserved_bits:\n        self._abort()\n        return\n    self._masked_frame = bool(payloadlen & 128)\n    payloadlen = payloadlen & 127\n    if self._frame_opcode_is_control and payloadlen >= 126:\n        self._abort()\n        return\n    try:\n        if payloadlen < 126:\n            self._frame_length = payloadlen\n            if self._masked_frame:\n                self.stream.read_bytes(4, self._on_masking_key)\n            else:\n                self._read_frame_data(False)\n        elif payloadlen == 126:\n            self.stream.read_bytes(2, self._on_frame_length_16)\n        elif payloadlen == 127:\n            self.stream.read_bytes(8, self._on_frame_length_64)\n    except StreamClosedError:\n        self._abort()",
                            "def _read_frame_data(self, masked):\n    new_len = self._frame_length\n    if self._fragmented_message_buffer is not None:\n        new_len += len(self._fragmented_message_buffer)\n    if new_len > (self.handler.max_message_size or 10 * 1024 * 1024):\n        self.close(1009, 'message too big')\n        return\n    self.stream.read_bytes(self._frame_length, self._on_masked_frame_data if masked else self._on_frame_data)",
                            "def _on_frame_length_16(self, data):\n    self._wire_bytes_in += len(data)\n    self._frame_length = struct.unpack('!H', data)[0]\n    try:\n        if self._masked_frame:\n            self.stream.read_bytes(4, self._on_masking_key)\n        else:\n            self._read_frame_data(False)\n    except StreamClosedError:\n        self._abort()",
                            "def _on_frame_length_64(self, data):\n    self._wire_bytes_in += len(data)\n    self._frame_length = struct.unpack('!Q', data)[0]\n    try:\n        if self._masked_frame:\n            self.stream.read_bytes(4, self._on_masking_key)\n        else:\n            self._read_frame_data(False)\n    except StreamClosedError:\n        self._abort()",
                            "def _on_masking_key(self, data):\n    self._wire_bytes_in += len(data)\n    self._frame_mask = data\n    try:\n        self._read_frame_data(True)\n    except StreamClosedError:\n        self._abort()",
                            "def _on_masked_frame_data(self, data):\n    self._on_frame_data(_websocket_mask(self._frame_mask, data))",
                            "def _on_frame_data(self, data):\n    handled_future = None\n    self._wire_bytes_in += len(data)\n    if self._frame_opcode_is_control:\n        if not self._final_frame:\n            self._abort()\n            return\n        opcode = self._frame_opcode\n    elif self._frame_opcode == 0:\n        if self._fragmented_message_buffer is None:\n            self._abort()\n            return\n        self._fragmented_message_buffer += data\n        if self._final_frame:\n            opcode = self._fragmented_message_opcode\n            data = self._fragmented_message_buffer\n            self._fragmented_message_buffer = None\n    else:\n        if self._fragmented_message_buffer is not None:\n            self._abort()\n            return\n        if self._final_frame:\n            opcode = self._frame_opcode\n        else:\n            self._fragmented_message_opcode = self._frame_opcode\n            self._fragmented_message_buffer = data\n    if self._final_frame:\n        handled_future = self._handle_message(opcode, data)\n    if not self.client_terminated:\n        if handled_future:\n            handled_future.add_done_callback(lambda future: self._receive_frame())\n        else:\n            self._receive_frame()",
                            "def _handle_message(self, opcode, data):\n    \"\"\"Execute on_message, returning its Future if it is a coroutine.\"\"\"\n    if self.client_terminated:\n        return\n    if self._frame_compressed:\n        data = self._decompressor.decompress(data)\n    if opcode == 1:\n        self._message_bytes_in += len(data)\n        try:\n            decoded = data.decode('utf-8')\n        except UnicodeDecodeError:\n            self._abort()\n            return\n        return self._run_callback(self.handler.on_message, decoded)\n    elif opcode == 2:\n        self._message_bytes_in += len(data)\n        return self._run_callback(self.handler.on_message, data)\n    elif opcode == 8:\n        self.client_terminated = True\n        if len(data) >= 2:\n            self.handler.close_code = struct.unpack('>H', data[:2])[0]\n        if len(data) > 2:\n            self.handler.close_reason = to_unicode(data[2:])\n        self.close(self.handler.close_code)\n    elif opcode == 9:\n        try:\n            self._write_frame(True, 10, data)\n        except StreamClosedError:\n            self._abort()\n        self._run_callback(self.handler.on_ping, data)\n    elif opcode == 10:\n        self.last_pong = IOLoop.current().time()\n        return self._run_callback(self.handler.on_pong, data)\n    else:\n        self._abort()",
                            "def close(self, code=None, reason=None):\n    \"\"\"Closes the WebSocket connection.\"\"\"\n    if not self.server_terminated:\n        if not self.stream.closed():\n            if code is None and reason is not None:\n                code = 1000\n            if code is None:\n                close_data = b''\n            else:\n                close_data = struct.pack('>H', code)\n            if reason is not None:\n                close_data += utf8(reason)\n            try:\n                self._write_frame(True, 8, close_data)\n            except StreamClosedError:\n                self._abort()\n        self.server_terminated = True\n    if self.client_terminated:\n        if self._waiting is not None:\n            self.stream.io_loop.remove_timeout(self._waiting)\n            self._waiting = None\n        self.stream.close()\n    elif self._waiting is None:\n        self._waiting = self.stream.io_loop.add_timeout(self.stream.io_loop.time() + 5, self._abort)",
                            "@property\ndef ping_interval(self):\n    interval = self.handler.ping_interval\n    if interval is not None:\n        return interval\n    return 0",
                            "@property\ndef ping_timeout(self):\n    timeout = self.handler.ping_timeout\n    if timeout is not None:\n        return timeout\n    return max(3 * self.ping_interval, 30)",
                            "def start_pinging(self):\n    \"\"\"Start sending periodic pings to keep the connection alive\"\"\"\n    if self.ping_interval > 0:\n        self.last_ping = self.last_pong = IOLoop.current().time()\n        self.ping_callback = PeriodicCallback(self.periodic_ping, self.ping_interval * 1000)\n        self.ping_callback.start()",
                            "def periodic_ping(self):\n    \"\"\"Send a ping to keep the websocket alive\n\n    Called periodically if the websocket_ping_interval is set and non-zero.\n    \"\"\"\n    if self.stream.closed() and self.ping_callback is not None:\n        self.ping_callback.stop()\n        return\n    now = IOLoop.current().time()\n    since_last_pong = now - self.last_pong\n    since_last_ping = now - self.last_ping\n    if since_last_ping < 2 * self.ping_interval and since_last_pong > self.ping_timeout:\n        self.close()\n        return\n    self.write_ping(b'')\n    self.last_ping = now"
                        ],
                        "constructor_variables": [
                            "_message_bytes_out",
                            "_frame_compressed",
                            "last_pong",
                            "_message_bytes_in",
                            "_decompressor",
                            "_compression_options",
                            "_wire_bytes_in",
                            "_compressor",
                            "mask_outgoing",
                            "_final_frame",
                            "_masked_frame",
                            "_wire_bytes_out",
                            "ping_callback",
                            "_frame_opcode",
                            "last_ping",
                            "_fragmented_message_opcode",
                            "_fragmented_message_buffer",
                            "_frame_mask",
                            "_waiting",
                            "_frame_length"
                        ],
                        "class_level_variables": [
                            "FIN",
                            "RSV1",
                            "RSV2",
                            "RSV3",
                            "RSV_MASK",
                            "OPCODE_MASK"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, handler, mask_outgoing=False, compression_options=None)",
                            "accept_connection(self)",
                            "_handle_websocket_headers(self)",
                            "compute_accept_value(key)",
                            "_challenge_response(self)",
                            "_accept_connection(self)",
                            "_parse_extensions_header(self, headers)",
                            "_process_server_headers(self, key, headers)",
                            "_get_compressor_options(self, side, agreed_parameters, compression_options=None)",
                            "_create_compressors(self, side, agreed_parameters, compression_options=None)",
                            "_write_frame(self, fin, opcode, data, flags=0)",
                            "write_message(self, message, binary=False)",
                            "write_ping(self, data)",
                            "_receive_frame(self)",
                            "_on_frame_start(self, data)",
                            "_read_frame_data(self, masked)",
                            "_on_frame_length_16(self, data)",
                            "_on_frame_length_64(self, data)",
                            "_on_masking_key(self, data)",
                            "_on_masked_frame_data(self, data)",
                            "_on_frame_data(self, data)",
                            "_handle_message(self, opcode, data)",
                            "close(self, code=None, reason=None)",
                            "ping_interval(self)",
                            "ping_timeout(self)",
                            "start_pinging(self)",
                            "periodic_ping(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self._handle_websocket_headers": {
                                    "variable_value": "<bound method WebSocketProtocol13._handle_websocket_headers of <tornado.websocket.WebSocketProtocol13 object at 0x10eb22ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.websocket.WebSocketProtocol13 object at 0x10eb22ad0>",
                                    "variable_type": "WebSocketProtocol13",
                                    "variable_shape": null
                                },
                                "self._accept_connection": {
                                    "variable_value": "<bound method WebSocketProtocol13._accept_connection of <tornado.websocket.WebSocketProtocol13 object at 0x10eb22ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "gen_log.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "gen_log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._abort": {
                                    "variable_value": "<bound method WebSocketProtocol._abort of <tornado.websocket.WebSocketProtocol13 object at 0x10eb22ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._handle_websocket_headers": {
                                    "variable_value": "<bound method WebSocketProtocol13._handle_websocket_headers of <tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>",
                                    "variable_type": "WebSocketProtocol13",
                                    "variable_shape": null
                                },
                                "self.handler.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.handler": {
                                    "variable_value": "<tornado.test.websocket_test.EchoHandler object at 0x10863ffd0>",
                                    "variable_type": "EchoHandler",
                                    "variable_shape": null
                                },
                                "log_msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.handler.finish": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "gen_log.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "gen_log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._accept_connection": {
                                    "variable_value": "<bound method WebSocketProtocol13._accept_connection of <tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._abort": {
                                    "variable_value": "<bound method WebSocketProtocol._abort of <tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._handle_websocket_headers": {
                                    "variable_value": "<bound method WebSocketProtocol13._handle_websocket_headers of <tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>",
                                    "variable_type": "WebSocketProtocol13",
                                    "variable_shape": null
                                },
                                "self.handler.set_status": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.handler": {
                                    "variable_value": "<tornado.test.websocket_test.EchoHandler object at 0x10863ffd0>",
                                    "variable_type": "EchoHandler",
                                    "variable_shape": null
                                },
                                "log_msg": {
                                    "variable_value": "'Missing/Invalid WebSocket headers'",
                                    "variable_type": "str",
                                    "variable_shape": "33"
                                },
                                "self.handler.finish": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "gen_log.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "gen_log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._accept_connection": {
                                    "variable_value": "<bound method WebSocketProtocol13._accept_connection of <tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._abort": {
                                    "variable_value": "<bound method WebSocketProtocol._abort of <tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _raise_not_supported_for_websockets(*args, **kwargs):\n    raise RuntimeError(\"Method not supported for Web Sockets\")",
                "def websocket_connect(url, callback=None, connect_timeout=None,\n                      on_message_callback=None, compression_options=None,\n                      ping_interval=None, ping_timeout=None,\n                      max_message_size=None):\n    \"\"\"Client-side websocket support.\n\n    Takes a url and returns a Future whose result is a\n    `WebSocketClientConnection`.\n\n    ``compression_options`` is interpreted in the same way as the\n    return value of `.WebSocketHandler.get_compression_options`.\n\n    The connection supports two styles of operation. In the coroutine\n    style, the application typically calls\n    `~.WebSocketClientConnection.read_message` in a loop::\n\n        conn = yield websocket_connect(url)\n        while True:\n            msg = yield conn.read_message()\n            if msg is None: break\n            # Do something with msg\n\n    In the callback style, pass an ``on_message_callback`` to\n    ``websocket_connect``. In both styles, a message of ``None``\n    indicates that the connection has been closed.\n\n    .. versionchanged:: 3.2\n       Also accepts ``HTTPRequest`` objects in place of urls.\n\n    .. versionchanged:: 4.1\n       Added ``compression_options`` and ``on_message_callback``.\n\n    .. versionchanged:: 4.5\n       Added the ``ping_interval``, ``ping_timeout``, and ``max_message_size``\n       arguments, which have the same meaning as in `WebSocketHandler`.\n\n    .. versionchanged:: 5.0\n       The ``io_loop`` argument (deprecated since version 4.1) has been removed.\n    \"\"\"\n    if isinstance(url, httpclient.HTTPRequest):\n        assert connect_timeout is None\n        request = url\n        # Copy and convert the headers dict/object (see comments in\n        # AsyncHTTPClient.fetch)\n        request.headers = httputil.HTTPHeaders(request.headers)\n    else:\n        request = httpclient.HTTPRequest(url, connect_timeout=connect_timeout)\n    request = httpclient._RequestProxy(\n        request, httpclient.HTTPRequest._DEFAULTS)\n    conn = WebSocketClientConnection(request,\n                                     on_message_callback=on_message_callback,\n                                     compression_options=compression_options,\n                                     ping_interval=ping_interval,\n                                     ping_timeout=ping_timeout,\n                                     max_message_size=max_message_size)\n    if callback is not None:\n        IOLoop.current().add_future(conn.connect_future, callback)\n    return conn.connect_future",
                "def __init__(self, application, request, **kwargs):\n    super(WebSocketHandler, self).__init__(application, request, **kwargs)\n    self.ws_connection = None\n    self.close_code = None\n    self.close_reason = None\n    self.stream = None\n    self._on_close_called = False",
                "@tornado.web.asynchronous\ndef get(self, *args, **kwargs):\n    self.open_args = args\n    self.open_kwargs = kwargs\n\n    # Upgrade header should be present and should be equal to WebSocket\n    if self.request.headers.get(\"Upgrade\", \"\").lower() != 'websocket':\n        self.set_status(400)\n        log_msg = \"Can \\\"Upgrade\\\" only to \\\"WebSocket\\\".\"\n        self.finish(log_msg)\n        gen_log.debug(log_msg)\n        return\n\n    # Connection header should be upgrade.\n    # Some proxy servers/load balancers\n    # might mess with it.\n    headers = self.request.headers\n    connection = map(lambda s: s.strip().lower(),\n                     headers.get(\"Connection\", \"\").split(\",\"))\n    if 'upgrade' not in connection:\n        self.set_status(400)\n        log_msg = \"\\\"Connection\\\" must be \\\"Upgrade\\\".\"\n        self.finish(log_msg)\n        gen_log.debug(log_msg)\n        return\n\n    # Handle WebSocket Origin naming convention differences\n    # The difference between version 8 and 13 is that in 8 the\n    # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n    # simply \"Origin\".\n    if \"Origin\" in self.request.headers:\n        origin = self.request.headers.get(\"Origin\")\n    else:\n        origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n\n    # If there was an origin header, check to make sure it matches\n    # according to check_origin. When the origin is None, we assume it\n    # did not come from a browser and that it can be passed on.\n    if origin is not None and not self.check_origin(origin):\n        self.set_status(403)\n        log_msg = \"Cross origin websockets not allowed\"\n        self.finish(log_msg)\n        gen_log.debug(log_msg)\n        return\n\n    self.ws_connection = self.get_websocket_protocol()\n    if self.ws_connection:\n        self.ws_connection.accept_connection()\n    else:\n        self.set_status(426, \"Upgrade Required\")\n        self.set_header(\"Sec-WebSocket-Version\", \"7, 8, 13\")\n        self.finish()",
                "@property\ndef ping_interval(self):\n    \"\"\"The interval for websocket keep-alive pings.\n\n    Set websocket_ping_interval = 0 to disable pings.\n    \"\"\"\n    return self.settings.get('websocket_ping_interval', None)",
                "@property\ndef ping_timeout(self):\n    \"\"\"If no ping is received in this many seconds,\n    close the websocket connection (VPNs, etc. can fail to cleanly close ws connections).\n    Default is max of 3 pings or 30 seconds.\n    \"\"\"\n    return self.settings.get('websocket_ping_timeout', None)",
                "@property\ndef max_message_size(self):\n    \"\"\"Maximum allowed message size.\n\n    If the remote peer sends a message larger than this, the connection\n    will be closed.\n\n    Default is 10MiB.\n    \"\"\"\n    return self.settings.get('websocket_max_message_size', None)",
                "def write_message(self, message, binary=False):\n    \"\"\"Sends the given message to the client of this Web Socket.\n\n    The message may be either a string or a dict (which will be\n    encoded as json).  If the ``binary`` argument is false, the\n    message will be sent as utf8; in binary mode any byte string\n    is allowed.\n\n    If the connection is already closed, raises `WebSocketClosedError`.\n\n    .. versionchanged:: 3.2\n       `WebSocketClosedError` was added (previously a closed connection\n       would raise an `AttributeError`)\n\n    .. versionchanged:: 4.3\n       Returns a `.Future` which can be used for flow control.\n    \"\"\"\n    if self.ws_connection is None:\n        raise WebSocketClosedError()\n    if isinstance(message, dict):\n        message = tornado.escape.json_encode(message)\n    return self.ws_connection.write_message(message, binary=binary)",
                "def select_subprotocol(self, subprotocols):\n    \"\"\"Invoked when a new WebSocket requests specific subprotocols.\n\n    ``subprotocols`` is a list of strings identifying the\n    subprotocols proposed by the client.  This method may be\n    overridden to return one of those strings to select it, or\n    ``None`` to not select a subprotocol.  Failure to select a\n    subprotocol does not automatically abort the connection,\n    although clients may close the connection if none of their\n    proposed subprotocols was selected.\n    \"\"\"\n    return None",
                "def get_compression_options(self):\n    \"\"\"Override to return compression options for the connection.\n\n    If this method returns None (the default), compression will\n    be disabled.  If it returns a dict (even an empty one), it\n    will be enabled.  The contents of the dict may be used to\n    control the following compression options:\n\n    ``compression_level`` specifies the compression level.\n\n    ``mem_level`` specifies the amount of memory used for the internal compression state.\n\n     These parameters are documented in details here:\n     https://docs.python.org/3.6/library/zlib.html#zlib.compressobj\n\n    .. versionadded:: 4.1\n\n    .. versionchanged:: 4.5\n\n       Added ``compression_level`` and ``mem_level``.\n    \"\"\"\n    # TODO: Add wbits option.\n    return None",
                "def open(self, *args, **kwargs):\n    \"\"\"Invoked when a new WebSocket is opened.\n\n    The arguments to `open` are extracted from the `tornado.web.URLSpec`\n    regular expression, just like the arguments to\n    `tornado.web.RequestHandler.get`.\n    \"\"\"\n    pass",
                "def on_message(self, message):\n    \"\"\"Handle incoming messages on the WebSocket\n\n    This method must be overridden.\n\n    .. versionchanged:: 4.5\n\n       ``on_message`` can be a coroutine.\n    \"\"\"\n    raise NotImplementedError",
                "def ping(self, data):\n    \"\"\"Send ping frame to the remote end.\"\"\"\n    if self.ws_connection is None:\n        raise WebSocketClosedError()\n    self.ws_connection.write_ping(data)",
                "def on_pong(self, data):\n    \"\"\"Invoked when the response to a ping frame is received.\"\"\"\n    pass",
                "def on_ping(self, data):\n    \"\"\"Invoked when the a ping frame is received.\"\"\"\n    pass",
                "def on_close(self):\n    \"\"\"Invoked when the WebSocket is closed.\n\n    If the connection was closed cleanly and a status code or reason\n    phrase was supplied, these values will be available as the attributes\n    ``self.close_code`` and ``self.close_reason``.\n\n    .. versionchanged:: 4.0\n\n       Added ``close_code`` and ``close_reason`` attributes.\n    \"\"\"\n    pass",
                "def close(self, code=None, reason=None):\n    \"\"\"Closes this Web Socket.\n\n    Once the close handshake is successful the socket will be closed.\n\n    ``code`` may be a numeric status code, taken from the values\n    defined in `RFC 6455 section 7.4.1\n    <https://tools.ietf.org/html/rfc6455#section-7.4.1>`_.\n    ``reason`` may be a textual message about why the connection is\n    closing.  These values are made available to the client, but are\n    not otherwise interpreted by the websocket protocol.\n\n    .. versionchanged:: 4.0\n\n       Added the ``code`` and ``reason`` arguments.\n    \"\"\"\n    if self.ws_connection:\n        self.ws_connection.close(code, reason)\n        self.ws_connection = None",
                "def check_origin(self, origin):\n    \"\"\"Override to enable support for allowing alternate origins.\n\n    The ``origin`` argument is the value of the ``Origin`` HTTP\n    header, the url responsible for initiating this request.  This\n    method is not called for clients that do not send this header;\n    such requests are always allowed (because all browsers that\n    implement WebSockets support this header, and non-browser\n    clients do not have the same cross-site security concerns).\n\n    Should return True to accept the request or False to reject it.\n    By default, rejects all requests with an origin on a host other\n    than this one.\n\n    This is a security protection against cross site scripting attacks on\n    browsers, since WebSockets are allowed to bypass the usual same-origin\n    policies and don't use CORS headers.\n\n    .. warning::\n\n       This is an important security measure; don't disable it\n       without understanding the security implications. In\n       particular, if your authentication is cookie-based, you\n       must either restrict the origins allowed by\n       ``check_origin()`` or implement your own XSRF-like\n       protection for websocket connections. See `these\n       <https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html>`_\n       `articles\n       <https://devcenter.heroku.com/articles/websocket-security>`_\n       for more.\n\n    To accept all cross-origin traffic (which was the default prior to\n    Tornado 4.0), simply override this method to always return true::\n\n        def check_origin(self, origin):\n            return True\n\n    To allow connections from any subdomain of your site, you might\n    do something like::\n\n        def check_origin(self, origin):\n            parsed_origin = urllib.parse.urlparse(origin)\n            return parsed_origin.netloc.endswith(\".mydomain.com\")\n\n    .. versionadded:: 4.0\n\n    \"\"\"\n    parsed_origin = urlparse(origin)\n    origin = parsed_origin.netloc\n    origin = origin.lower()\n\n    host = self.request.headers.get(\"Host\")\n\n    # Check to see that origin matches host directly, including ports\n    return origin == host",
                "def set_nodelay(self, value):\n    \"\"\"Set the no-delay flag for this stream.\n\n    By default, small messages may be delayed and/or combined to minimize\n    the number of packets sent.  This can sometimes cause 200-500ms delays\n    due to the interaction between Nagle's algorithm and TCP delayed\n    ACKs.  To reduce this delay (at the expense of possibly increasing\n    bandwidth usage), call ``self.set_nodelay(True)`` once the websocket\n    connection is established.\n\n    See `.BaseIOStream.set_nodelay` for additional details.\n\n    .. versionadded:: 3.1\n    \"\"\"\n    self.stream.set_nodelay(value)",
                "def on_connection_close(self):\n    if self.ws_connection:\n        self.ws_connection.on_connection_close()\n        self.ws_connection = None\n    if not self._on_close_called:\n        self._on_close_called = True\n        self.on_close()\n        self._break_cycles()",
                "def _break_cycles(self):\n    # WebSocketHandlers call finish() early, but we don't want to\n    # break up reference cycles (which makes it impossible to call\n    # self.render_string) until after we've really closed the\n    # connection (if it was established in the first place,\n    # indicated by status code 101).\n    if self.get_status() != 101 or self._on_close_called:\n        super(WebSocketHandler, self)._break_cycles()",
                "def send_error(self, *args, **kwargs):\n    if self.stream is None:\n        super(WebSocketHandler, self).send_error(*args, **kwargs)\n    else:\n        # If we get an uncaught exception during the handshake,\n        # we have no choice but to abruptly close the connection.\n        # TODO: for uncaught exceptions after the handshake,\n        # we can close the connection more gracefully.\n        self.stream.close()",
                "def get_websocket_protocol(self):\n    websocket_version = self.request.headers.get(\"Sec-WebSocket-Version\")\n    if websocket_version in (\"7\", \"8\", \"13\"):\n        return WebSocketProtocol13(\n            self, compression_options=self.get_compression_options())",
                "def _attach_stream(self):\n    self.stream = self.request.connection.detach()\n    self.stream.set_close_callback(self.on_connection_close)\n    # disable non-WS methods\n    for method in [\"write\", \"redirect\", \"set_header\", \"set_cookie\",\n                   \"set_status\", \"flush\", \"finish\"]:\n        setattr(self, method, _raise_not_supported_for_websockets)",
                "def __init__(self, handler):\n    self.handler = handler\n    self.request = handler.request\n    self.stream = handler.stream\n    self.client_terminated = False\n    self.server_terminated = False",
                "def _run_callback(self, callback, *args, **kwargs):\n    \"\"\"Runs the given callback with exception handling.\n\n    If the callback is a coroutine, returns its Future. On error, aborts the\n    websocket connection and returns None.\n    \"\"\"\n    try:\n        result = callback(*args, **kwargs)\n    except Exception:\n        app_log.error(\"Uncaught exception in %s\",\n                      getattr(self.request, 'path', None), exc_info=True)\n        self._abort()\n    else:\n        if result is not None:\n            result = gen.convert_yielded(result)\n            self.stream.io_loop.add_future(result, lambda f: f.result())\n        return result",
                "def on_connection_close(self):\n    self._abort()",
                "def _abort(self):\n    \"\"\"Instantly aborts the WebSocket connection by closing the socket\"\"\"\n    self.client_terminated = True\n    self.server_terminated = True\n    self.stream.close()  # forcibly tear down the connection\n    self.close()  # let the subclass cleanup",
                "def __init__(self, persistent, max_wbits, compression_options=None):\n    if max_wbits is None:\n        max_wbits = zlib.MAX_WBITS\n    # There is no symbolic constant for the minimum wbits value.\n    if not (8 <= max_wbits <= zlib.MAX_WBITS):\n        raise ValueError(\"Invalid max_wbits value %r; allowed range 8-%d\",\n                         max_wbits, zlib.MAX_WBITS)\n    self._max_wbits = max_wbits\n\n    if compression_options is None or 'compression_level' not in compression_options:\n        self._compression_level = tornado.web.GZipContentEncoding.GZIP_LEVEL\n    else:\n        self._compression_level = compression_options['compression_level']\n\n    if compression_options is None or 'mem_level' not in compression_options:\n        self._mem_level = 8\n    else:\n        self._mem_level = compression_options['mem_level']\n\n    if persistent:\n        self._compressor = self._create_compressor()\n    else:\n        self._compressor = None",
                "def _create_compressor(self):\n    return zlib.compressobj(self._compression_level, zlib.DEFLATED, -self._max_wbits, self._mem_level)",
                "def compress(self, data):\n    compressor = self._compressor or self._create_compressor()\n    data = (compressor.compress(data) +\n            compressor.flush(zlib.Z_SYNC_FLUSH))\n    assert data.endswith(b'\\x00\\x00\\xff\\xff')\n    return data[:-4]",
                "def __init__(self, persistent, max_wbits, compression_options=None):\n    if max_wbits is None:\n        max_wbits = zlib.MAX_WBITS\n    if not (8 <= max_wbits <= zlib.MAX_WBITS):\n        raise ValueError(\"Invalid max_wbits value %r; allowed range 8-%d\",\n                         max_wbits, zlib.MAX_WBITS)\n    self._max_wbits = max_wbits\n    if persistent:\n        self._decompressor = self._create_decompressor()\n    else:\n        self._decompressor = None",
                "def _create_decompressor(self):\n    return zlib.decompressobj(-self._max_wbits)",
                "def decompress(self, data):\n    decompressor = self._decompressor or self._create_decompressor()\n    return decompressor.decompress(data + b'\\x00\\x00\\xff\\xff')",
                "def __init__(self, handler, mask_outgoing=False,\n             compression_options=None):\n    WebSocketProtocol.__init__(self, handler)\n    self.mask_outgoing = mask_outgoing\n    self._final_frame = False\n    self._frame_opcode = None\n    self._masked_frame = None\n    self._frame_mask = None\n    self._frame_length = None\n    self._fragmented_message_buffer = None\n    self._fragmented_message_opcode = None\n    self._waiting = None\n    self._compression_options = compression_options\n    self._decompressor = None\n    self._compressor = None\n    self._frame_compressed = None\n    # The total uncompressed size of all messages received or sent.\n    # Unicode messages are encoded to utf8.\n    # Only for testing; subject to change.\n    self._message_bytes_in = 0\n    self._message_bytes_out = 0\n    # The total size of all packets received or sent.  Includes\n    # the effect of compression, frame overhead, and control frames.\n    self._wire_bytes_in = 0\n    self._wire_bytes_out = 0\n    self.ping_callback = None\n    self.last_ping = 0\n    self.last_pong = 0",
                "def accept_connection(self):\n    try:\n        self._handle_websocket_headers()\n        self._accept_connection()\n    except ValueError:\n        gen_log.debug(\"Malformed WebSocket request received\",\n                      exc_info=True)\n        self._abort()\n        return",
                "def _handle_websocket_headers(self):\n    \"\"\"Verifies all invariant- and required headers\n\n    If a header is missing or have an incorrect value ValueError will be\n    raised\n    \"\"\"\n    fields = (\"Host\", \"Sec-Websocket-Key\", \"Sec-Websocket-Version\")\n    if not all(map(lambda f: self.request.headers.get(f), fields)):\n        raise ValueError(\"Missing/Invalid WebSocket headers\")",
                "@staticmethod\ndef compute_accept_value(key):\n    \"\"\"Computes the value for the Sec-WebSocket-Accept header,\n    given the value for Sec-WebSocket-Key.\n    \"\"\"\n    sha1 = hashlib.sha1()\n    sha1.update(utf8(key))\n    sha1.update(b\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\")  # Magic value\n    return native_str(base64.b64encode(sha1.digest()))",
                "def _challenge_response(self):\n    return WebSocketProtocol13.compute_accept_value(\n        self.request.headers.get(\"Sec-Websocket-Key\"))",
                "def _accept_connection(self):\n    subprotocols = self.request.headers.get(\"Sec-WebSocket-Protocol\", '')\n    subprotocols = [s.strip() for s in subprotocols.split(',')]\n    if subprotocols:\n        selected = self.handler.select_subprotocol(subprotocols)\n        if selected:\n            assert selected in subprotocols\n            self.handler.set_header(\"Sec-WebSocket-Protocol\", selected)\n\n    extensions = self._parse_extensions_header(self.request.headers)\n    for ext in extensions:\n        if (ext[0] == 'permessage-deflate' and\n                self._compression_options is not None):\n            # TODO: negotiate parameters if compression_options\n            # specifies limits.\n            self._create_compressors('server', ext[1], self._compression_options)\n            if ('client_max_window_bits' in ext[1] and\n                    ext[1]['client_max_window_bits'] is None):\n                # Don't echo an offered client_max_window_bits\n                # parameter with no value.\n                del ext[1]['client_max_window_bits']\n            self.handler.set_header(\"Sec-WebSocket-Extensions\",\n                                    httputil._encode_header(\n                                        'permessage-deflate', ext[1]))\n            break\n\n    self.handler.clear_header(\"Content-Type\")\n    self.handler.set_status(101)\n    self.handler.set_header(\"Upgrade\", \"websocket\")\n    self.handler.set_header(\"Connection\", \"Upgrade\")\n    self.handler.set_header(\"Sec-WebSocket-Accept\", self._challenge_response())\n    self.handler.finish()\n\n    self.handler._attach_stream()\n    self.stream = self.handler.stream\n\n    self.start_pinging()\n    self._run_callback(self.handler.open, *self.handler.open_args,\n                       **self.handler.open_kwargs)\n    self._receive_frame()",
                "def _parse_extensions_header(self, headers):\n    extensions = headers.get(\"Sec-WebSocket-Extensions\", '')\n    if extensions:\n        return [httputil._parse_header(e.strip())\n                for e in extensions.split(',')]\n    return []",
                "def _process_server_headers(self, key, headers):\n    \"\"\"Process the headers sent by the server to this client connection.\n\n    'key' is the websocket handshake challenge/response key.\n    \"\"\"\n    assert headers['Upgrade'].lower() == 'websocket'\n    assert headers['Connection'].lower() == 'upgrade'\n    accept = self.compute_accept_value(key)\n    assert headers['Sec-Websocket-Accept'] == accept\n\n    extensions = self._parse_extensions_header(headers)\n    for ext in extensions:\n        if (ext[0] == 'permessage-deflate' and\n                self._compression_options is not None):\n            self._create_compressors('client', ext[1])\n        else:\n            raise ValueError(\"unsupported extension %r\", ext)",
                "def _get_compressor_options(self, side, agreed_parameters, compression_options=None):\n    \"\"\"Converts a websocket agreed_parameters set to keyword arguments\n    for our compressor objects.\n    \"\"\"\n    options = dict(\n        persistent=(side + '_no_context_takeover') not in agreed_parameters)\n    wbits_header = agreed_parameters.get(side + '_max_window_bits', None)\n    if wbits_header is None:\n        options['max_wbits'] = zlib.MAX_WBITS\n    else:\n        options['max_wbits'] = int(wbits_header)\n    options['compression_options'] = compression_options\n    return options",
                "def _create_compressors(self, side, agreed_parameters, compression_options=None):\n    # TODO: handle invalid parameters gracefully\n    allowed_keys = set(['server_no_context_takeover',\n                        'client_no_context_takeover',\n                        'server_max_window_bits',\n                        'client_max_window_bits'])\n    for key in agreed_parameters:\n        if key not in allowed_keys:\n            raise ValueError(\"unsupported compression parameter %r\" % key)\n    other_side = 'client' if (side == 'server') else 'server'\n    self._compressor = _PerMessageDeflateCompressor(\n        **self._get_compressor_options(side, agreed_parameters, compression_options))\n    self._decompressor = _PerMessageDeflateDecompressor(\n        **self._get_compressor_options(other_side, agreed_parameters, compression_options))",
                "def _write_frame(self, fin, opcode, data, flags=0):\n    if fin:\n        finbit = self.FIN\n    else:\n        finbit = 0\n    frame = struct.pack(\"B\", finbit | opcode | flags)\n    l = len(data)\n    if self.mask_outgoing:\n        mask_bit = 0x80\n    else:\n        mask_bit = 0\n    if l < 126:\n        frame += struct.pack(\"B\", l | mask_bit)\n    elif l <= 0xFFFF:\n        frame += struct.pack(\"!BH\", 126 | mask_bit, l)\n    else:\n        frame += struct.pack(\"!BQ\", 127 | mask_bit, l)\n    if self.mask_outgoing:\n        mask = os.urandom(4)\n        data = mask + _websocket_mask(mask, data)\n    frame += data\n    self._wire_bytes_out += len(frame)\n    return self.stream.write(frame)",
                "def write_message(self, message, binary=False):\n    \"\"\"Sends the given message to the client of this Web Socket.\"\"\"\n    if binary:\n        opcode = 0x2\n    else:\n        opcode = 0x1\n    message = tornado.escape.utf8(message)\n    assert isinstance(message, bytes)\n    self._message_bytes_out += len(message)\n    flags = 0\n    if self._compressor:\n        message = self._compressor.compress(message)\n        flags |= self.RSV1\n    return self._write_frame(True, opcode, message, flags=flags)",
                "def write_ping(self, data):\n    \"\"\"Send ping frame.\"\"\"\n    assert isinstance(data, bytes)\n    self._write_frame(True, 0x9, data)",
                "def _receive_frame(self):\n    try:\n        self.stream.read_bytes(2, self._on_frame_start)\n    except StreamClosedError:\n        self._abort()",
                "def _on_frame_start(self, data):\n    self._wire_bytes_in += len(data)\n    header, payloadlen = struct.unpack(\"BB\", data)\n    self._final_frame = header & self.FIN\n    reserved_bits = header & self.RSV_MASK\n    self._frame_opcode = header & self.OPCODE_MASK\n    self._frame_opcode_is_control = self._frame_opcode & 0x8\n    if self._decompressor is not None and self._frame_opcode != 0:\n        self._frame_compressed = bool(reserved_bits & self.RSV1)\n        reserved_bits &= ~self.RSV1\n    if reserved_bits:\n        # client is using as-yet-undefined extensions; abort\n        self._abort()\n        return\n    self._masked_frame = bool(payloadlen & 0x80)\n    payloadlen = payloadlen & 0x7f\n    if self._frame_opcode_is_control and payloadlen >= 126:\n        # control frames must have payload < 126\n        self._abort()\n        return\n    try:\n        if payloadlen < 126:\n            self._frame_length = payloadlen\n            if self._masked_frame:\n                self.stream.read_bytes(4, self._on_masking_key)\n            else:\n                self._read_frame_data(False)\n        elif payloadlen == 126:\n            self.stream.read_bytes(2, self._on_frame_length_16)\n        elif payloadlen == 127:\n            self.stream.read_bytes(8, self._on_frame_length_64)\n    except StreamClosedError:\n        self._abort()",
                "def _read_frame_data(self, masked):\n    new_len = self._frame_length\n    if self._fragmented_message_buffer is not None:\n        new_len += len(self._fragmented_message_buffer)\n    if new_len > (self.handler.max_message_size or 10 * 1024 * 1024):\n        self.close(1009, \"message too big\")\n        return\n    self.stream.read_bytes(\n        self._frame_length,\n        self._on_masked_frame_data if masked else self._on_frame_data)",
                "def _on_frame_length_16(self, data):\n    self._wire_bytes_in += len(data)\n    self._frame_length = struct.unpack(\"!H\", data)[0]\n    try:\n        if self._masked_frame:\n            self.stream.read_bytes(4, self._on_masking_key)\n        else:\n            self._read_frame_data(False)\n    except StreamClosedError:\n        self._abort()",
                "def _on_frame_length_64(self, data):\n    self._wire_bytes_in += len(data)\n    self._frame_length = struct.unpack(\"!Q\", data)[0]\n    try:\n        if self._masked_frame:\n            self.stream.read_bytes(4, self._on_masking_key)\n        else:\n            self._read_frame_data(False)\n    except StreamClosedError:\n        self._abort()",
                "def _on_masking_key(self, data):\n    self._wire_bytes_in += len(data)\n    self._frame_mask = data\n    try:\n        self._read_frame_data(True)\n    except StreamClosedError:\n        self._abort()",
                "def _on_masked_frame_data(self, data):\n    # Don't touch _wire_bytes_in; we'll do it in _on_frame_data.\n    self._on_frame_data(_websocket_mask(self._frame_mask, data))",
                "def _on_frame_data(self, data):\n    handled_future = None\n\n    self._wire_bytes_in += len(data)\n    if self._frame_opcode_is_control:\n        # control frames may be interleaved with a series of fragmented\n        # data frames, so control frames must not interact with\n        # self._fragmented_*\n        if not self._final_frame:\n            # control frames must not be fragmented\n            self._abort()\n            return\n        opcode = self._frame_opcode\n    elif self._frame_opcode == 0:  # continuation frame\n        if self._fragmented_message_buffer is None:\n            # nothing to continue\n            self._abort()\n            return\n        self._fragmented_message_buffer += data\n        if self._final_frame:\n            opcode = self._fragmented_message_opcode\n            data = self._fragmented_message_buffer\n            self._fragmented_message_buffer = None\n    else:  # start of new data message\n        if self._fragmented_message_buffer is not None:\n            # can't start new message until the old one is finished\n            self._abort()\n            return\n        if self._final_frame:\n            opcode = self._frame_opcode\n        else:\n            self._fragmented_message_opcode = self._frame_opcode\n            self._fragmented_message_buffer = data\n\n    if self._final_frame:\n        handled_future = self._handle_message(opcode, data)\n\n    if not self.client_terminated:\n        if handled_future:\n            # on_message is a coroutine, process more frames once it's done.\n            handled_future.add_done_callback(\n                lambda future: self._receive_frame())\n        else:\n            self._receive_frame()",
                "def _handle_message(self, opcode, data):\n    \"\"\"Execute on_message, returning its Future if it is a coroutine.\"\"\"\n    if self.client_terminated:\n        return\n\n    if self._frame_compressed:\n        data = self._decompressor.decompress(data)\n\n    if opcode == 0x1:\n        # UTF-8 data\n        self._message_bytes_in += len(data)\n        try:\n            decoded = data.decode(\"utf-8\")\n        except UnicodeDecodeError:\n            self._abort()\n            return\n        return self._run_callback(self.handler.on_message, decoded)\n    elif opcode == 0x2:\n        # Binary data\n        self._message_bytes_in += len(data)\n        return self._run_callback(self.handler.on_message, data)\n    elif opcode == 0x8:\n        # Close\n        self.client_terminated = True\n        if len(data) >= 2:\n            self.handler.close_code = struct.unpack('>H', data[:2])[0]\n        if len(data) > 2:\n            self.handler.close_reason = to_unicode(data[2:])\n        # Echo the received close code, if any (RFC 6455 section 5.5.1).\n        self.close(self.handler.close_code)\n    elif opcode == 0x9:\n        # Ping\n        try:\n            self._write_frame(True, 0xA, data)\n        except StreamClosedError:\n            self._abort()\n        self._run_callback(self.handler.on_ping, data)\n    elif opcode == 0xA:\n        # Pong\n        self.last_pong = IOLoop.current().time()\n        return self._run_callback(self.handler.on_pong, data)\n    else:\n        self._abort()",
                "def close(self, code=None, reason=None):\n    \"\"\"Closes the WebSocket connection.\"\"\"\n    if not self.server_terminated:\n        if not self.stream.closed():\n            if code is None and reason is not None:\n                code = 1000  # \"normal closure\" status code\n            if code is None:\n                close_data = b''\n            else:\n                close_data = struct.pack('>H', code)\n            if reason is not None:\n                close_data += utf8(reason)\n            try:\n                self._write_frame(True, 0x8, close_data)\n            except StreamClosedError:\n                self._abort()\n        self.server_terminated = True\n    if self.client_terminated:\n        if self._waiting is not None:\n            self.stream.io_loop.remove_timeout(self._waiting)\n            self._waiting = None\n        self.stream.close()\n    elif self._waiting is None:\n        # Give the client a few seconds to complete a clean shutdown,\n        # otherwise just close the connection.\n        self._waiting = self.stream.io_loop.add_timeout(\n            self.stream.io_loop.time() + 5, self._abort)",
                "@property\ndef ping_interval(self):\n    interval = self.handler.ping_interval\n    if interval is not None:\n        return interval\n    return 0",
                "@property\ndef ping_timeout(self):\n    timeout = self.handler.ping_timeout\n    if timeout is not None:\n        return timeout\n    return max(3 * self.ping_interval, 30)",
                "def start_pinging(self):\n    \"\"\"Start sending periodic pings to keep the connection alive\"\"\"\n    if self.ping_interval > 0:\n        self.last_ping = self.last_pong = IOLoop.current().time()\n        self.ping_callback = PeriodicCallback(\n            self.periodic_ping, self.ping_interval * 1000)\n        self.ping_callback.start()",
                "def periodic_ping(self):\n    \"\"\"Send a ping to keep the websocket alive\n\n    Called periodically if the websocket_ping_interval is set and non-zero.\n    \"\"\"\n    if self.stream.closed() and self.ping_callback is not None:\n        self.ping_callback.stop()\n        return\n\n    # Check for timeout on pong. Make sure that we really have\n    # sent a recent ping in case the machine with both server and\n    # client has been suspended since the last ping.\n    now = IOLoop.current().time()\n    since_last_pong = now - self.last_pong\n    since_last_ping = now - self.last_ping\n    if (since_last_ping < 2 * self.ping_interval and\n            since_last_pong > self.ping_timeout):\n        self.close()\n        return\n\n    self.write_ping(b'')\n    self.last_ping = now",
                "def __init__(self, request, on_message_callback=None,\n             compression_options=None, ping_interval=None, ping_timeout=None,\n             max_message_size=None):\n    self.compression_options = compression_options\n    self.connect_future = TracebackFuture()\n    self.protocol = None\n    self.read_future = None\n    self.read_queue = collections.deque()\n    self.key = base64.b64encode(os.urandom(16))\n    self._on_message_callback = on_message_callback\n    self.close_code = self.close_reason = None\n    self.ping_interval = ping_interval\n    self.ping_timeout = ping_timeout\n    self.max_message_size = max_message_size\n\n    scheme, sep, rest = request.url.partition(':')\n    scheme = {'ws': 'http', 'wss': 'https'}[scheme]\n    request.url = scheme + sep + rest\n    request.headers.update({\n        'Upgrade': 'websocket',\n        'Connection': 'Upgrade',\n        'Sec-WebSocket-Key': self.key,\n        'Sec-WebSocket-Version': '13',\n    })\n    if self.compression_options is not None:\n        # Always offer to let the server set our max_wbits (and even though\n        # we don't offer it, we will accept a client_no_context_takeover\n        # from the server).\n        # TODO: set server parameters for deflate extension\n        # if requested in self.compression_options.\n        request.headers['Sec-WebSocket-Extensions'] = (\n            'permessage-deflate; client_max_window_bits')\n\n    self.tcp_client = TCPClient()\n    super(WebSocketClientConnection, self).__init__(\n        None, request, lambda: None, self._on_http_response,\n        104857600, self.tcp_client, 65536, 104857600)",
                "def close(self, code=None, reason=None):\n    \"\"\"Closes the websocket connection.\n\n    ``code`` and ``reason`` are documented under\n    `WebSocketHandler.close`.\n\n    .. versionadded:: 3.2\n\n    .. versionchanged:: 4.0\n\n       Added the ``code`` and ``reason`` arguments.\n    \"\"\"\n    if self.protocol is not None:\n        self.protocol.close(code, reason)\n        self.protocol = None",
                "def on_connection_close(self):\n    if not self.connect_future.done():\n        self.connect_future.set_exception(StreamClosedError())\n    self.on_message(None)\n    self.tcp_client.close()\n    super(WebSocketClientConnection, self).on_connection_close()",
                "def _on_http_response(self, response):\n    if not self.connect_future.done():\n        if response.error:\n            self.connect_future.set_exception(response.error)\n        else:\n            self.connect_future.set_exception(WebSocketError(\n                \"Non-websocket response\"))",
                "def headers_received(self, start_line, headers):\n    if start_line.code != 101:\n        return super(WebSocketClientConnection, self).headers_received(\n            start_line, headers)\n\n    self.headers = headers\n    self.protocol = self.get_websocket_protocol()\n    self.protocol._process_server_headers(self.key, self.headers)\n    self.protocol.start_pinging()\n    self.protocol._receive_frame()\n\n    if self._timeout is not None:\n        self.io_loop.remove_timeout(self._timeout)\n        self._timeout = None\n\n    self.stream = self.connection.detach()\n    self.stream.set_close_callback(self.on_connection_close)\n    # Once we've taken over the connection, clear the final callback\n    # we set on the http request.  This deactivates the error handling\n    # in simple_httpclient that would otherwise interfere with our\n    # ability to see exceptions.\n    self.final_callback = None\n\n    self.connect_future.set_result(self)",
                "def write_message(self, message, binary=False):\n    \"\"\"Sends a message to the WebSocket server.\"\"\"\n    return self.protocol.write_message(message, binary)",
                "def read_message(self, callback=None):\n    \"\"\"Reads a message from the WebSocket server.\n\n    If on_message_callback was specified at WebSocket\n    initialization, this function will never return messages\n\n    Returns a future whose result is the message, or None\n    if the connection is closed.  If a callback argument\n    is given it will be called with the future when it is\n    ready.\n    \"\"\"\n    assert self.read_future is None\n    future = TracebackFuture()\n    if self.read_queue:\n        future.set_result(self.read_queue.popleft())\n    else:\n        self.read_future = future\n    if callback is not None:\n        self.io_loop.add_future(future, callback)\n    return future",
                "def on_message(self, message):\n    if self._on_message_callback:\n        self._on_message_callback(message)\n    elif self.read_future is not None:\n        self.read_future.set_result(message)\n        self.read_future = None\n    else:\n        self.read_queue.append(message)",
                "def on_pong(self, data):\n    pass",
                "def on_ping(self, data):\n    pass",
                "def get_websocket_protocol(self):\n    return WebSocketProtocol13(self, mask_outgoing=True,\n                               compression_options=self.compression_options)"
            ],
            "inscope_function_signatures": [
                "_raise_not_supported_for_websockets(*args, **kwargs)",
                "websocket_connect(url, callback=None, connect_timeout=None, on_message_callback=None, compression_options=None, ping_interval=None, ping_timeout=None, max_message_size=None)",
                "__init__(self, application, request, **kwargs)",
                "get(self, *args, **kwargs)",
                "ping_interval(self)",
                "ping_timeout(self)",
                "max_message_size(self)",
                "write_message(self, message, binary=False)",
                "select_subprotocol(self, subprotocols)",
                "get_compression_options(self)",
                "open(self, *args, **kwargs)",
                "on_message(self, message)",
                "ping(self, data)",
                "on_pong(self, data)",
                "on_ping(self, data)",
                "on_close(self)",
                "close(self, code=None, reason=None)",
                "check_origin(self, origin)",
                "set_nodelay(self, value)",
                "on_connection_close(self)",
                "_break_cycles(self)",
                "send_error(self, *args, **kwargs)",
                "get_websocket_protocol(self)",
                "_attach_stream(self)",
                "__init__(self, handler)",
                "_run_callback(self, callback, *args, **kwargs)",
                "on_connection_close(self)",
                "_abort(self)",
                "__init__(self, persistent, max_wbits, compression_options=None)",
                "_create_compressor(self)",
                "compress(self, data)",
                "__init__(self, persistent, max_wbits, compression_options=None)",
                "_create_decompressor(self)",
                "decompress(self, data)",
                "__init__(self, handler, mask_outgoing=False, compression_options=None)",
                "accept_connection(self)",
                "_handle_websocket_headers(self)",
                "compute_accept_value(key)",
                "_challenge_response(self)",
                "_accept_connection(self)",
                "_parse_extensions_header(self, headers)",
                "_process_server_headers(self, key, headers)",
                "_get_compressor_options(self, side, agreed_parameters, compression_options=None)",
                "_create_compressors(self, side, agreed_parameters, compression_options=None)",
                "_write_frame(self, fin, opcode, data, flags=0)",
                "write_message(self, message, binary=False)",
                "write_ping(self, data)",
                "_receive_frame(self)",
                "_on_frame_start(self, data)",
                "_read_frame_data(self, masked)",
                "_on_frame_length_16(self, data)",
                "_on_frame_length_64(self, data)",
                "_on_masking_key(self, data)",
                "_on_masked_frame_data(self, data)",
                "_on_frame_data(self, data)",
                "_handle_message(self, opcode, data)",
                "close(self, code=None, reason=None)",
                "ping_interval(self)",
                "ping_timeout(self)",
                "start_pinging(self)",
                "periodic_ping(self)",
                "__init__(self, request, on_message_callback=None, compression_options=None, ping_interval=None, ping_timeout=None, max_message_size=None)",
                "close(self, code=None, reason=None)",
                "on_connection_close(self)",
                "_on_http_response(self, response)",
                "headers_received(self, start_line, headers)",
                "write_message(self, message, binary=False)",
                "read_message(self, callback=None)",
                "on_message(self, message)",
                "on_pong(self, data)",
                "on_ping(self, data)",
                "get_websocket_protocol(self)"
            ],
            "variables_in_file": {
                "PY3": [
                    41
                ],
                "xrange": [
                    43
                ],
                "range": [
                    43
                ],
                "Exception": [
                    48,
                    495
                ],
                "WebSocketError": [
                    52,
                    1109
                ],
                "tornado.web.RequestHandler": [
                    60
                ],
                "tornado.web": [
                    60,
                    149,
                    527
                ],
                "tornado": [
                    775,
                    527,
                    149,
                    251,
                    60
                ],
                "__init__": [
                    1077,
                    142
                ],
                "super": [
                    450,
                    1102,
                    142,
                    1077,
                    1114,
                    446
                ],
                "WebSocketHandler": [
                    450,
                    446,
                    142
                ],
                "self": [
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    151,
                    152,
                    155,
                    156,
                    158,
                    165,
                    169,
                    171,
                    179,
                    180,
                    182,
                    187,
                    188,
                    190,
                    194,
                    195,
                    196,
                    198,
                    199,
                    200,
                    210,
                    218,
                    229,
                    248,
                    252,
                    313,
                    315,
                    354,
                    355,
                    356,
                    409,
                    428,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    445,
                    446,
                    449,
                    450,
                    456,
                    459,
                    462,
                    465,
                    466,
                    470,
                    481,
                    482,
                    483,
                    484,
                    485,
                    497,
                    498,
                    502,
                    506,
                    510,
                    511,
                    512,
                    513,
                    524,
                    527,
                    529,
                    532,
                    534,
                    537,
                    539,
                    542,
                    545,
                    559,
                    561,
                    563,
                    566,
                    569,
                    589,
                    590,
                    591,
                    592,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    602,
                    606,
                    607,
                    610,
                    611,
                    612,
                    613,
                    614,
                    618,
                    619,
                    623,
                    633,
                    648,
                    651,
                    654,
                    657,
                    659,
                    662,
                    665,
                    671,
                    676,
                    677,
                    678,
                    679,
                    680,
                    681,
                    683,
                    684,
                    686,
                    687,
                    688,
                    689,
                    705,
                    708,
                    711,
                    712,
                    740,
                    741,
                    742,
                    743,
                    747,
                    752,
                    762,
                    766,
                    767,
                    777,
                    779,
                    780,
                    781,
                    782,
                    787,
                    791,
                    793,
                    796,
                    798,
                    799,
                    800,
                    801,
                    802,
                    803,
                    804,
                    807,
                    809,
                    811,
                    813,
                    817,
                    818,
                    819,
                    821,
                    823,
                    825,
                    827,
                    830,
                    831,
                    832,
                    833,
                    834,
                    836,
                    837,
                    838,
                    841,
                    842,
                    844,
                    845,
                    847,
                    849,
                    852,
                    853,
                    855,
                    856,
                    858,
                    860,
                    863,
                    864,
                    866,
                    868,
                    872,
                    877,
                    878,
                    882,
                    884,
                    886,
                    887,
                    888,
                    890,
                    892,
                    893,
                    894,
                    895,
                    896,
                    898,
                    900,
                    902,
                    903,
                    905,
                    906,
                    908,
                    909,
                    911,
                    915,
                    917,
                    921,
                    924,
                    925,
                    929,
                    933,
                    935,
                    938,
                    939,
                    942,
                    944,
                    946,
                    948,
                    952,
                    954,
                    955,
                    958,
                    959,
                    961,
                    965,
                    966,
                    976,
                    978,
                    979,
                    980,
                    981,
                    982,
                    983,
                    984,
                    985,
                    988,
                    989,
                    993,
                    1000,
                    1003,
                    1007,
                    1008,
                    1009,
                    1010,
                    1011,
                    1018,
                    1019,
                    1026,
                    1027,
                    1028,
                    1029,
                    1030,
                    1033,
                    1034,
                    1046,
                    1047,
                    1048,
                    1049,
                    1050,
                    1051,
                    1052,
                    1053,
                    1054,
                    1055,
                    1056,
                    1064,
                    1067,
                    1076,
                    1077,
                    1078,
                    1079,
                    1093,
                    1094,
                    1095,
                    1098,
                    1099,
                    1100,
                    1101,
                    1102,
                    1105,
                    1107,
                    1109,
                    1114,
                    1117,
                    1118,
                    1119,
                    1120,
                    1121,
                    1123,
                    1124,
                    1125,
                    1127,
                    1128,
                    1133,
                    1135,
                    1139,
                    1152,
                    1154,
                    1155,
                    1157,
                    1159,
                    1163,
                    1164,
                    1165,
                    1166,
                    1167,
                    1169,
                    1178,
                    1179
                ],
                "application": [
                    142
                ],
                "request": [
                    1058,
                    1060,
                    1061,
                    1223,
                    1226,
                    1228,
                    1229,
                    142,
                    1230,
                    1231,
                    1073,
                    1078
                ],
                "kwargs": [
                    152,
                    450,
                    142,
                    494
                ],
                "self.ws_connection": [
                    194,
                    195,
                    196,
                    354,
                    355,
                    356,
                    143,
                    431,
                    432,
                    433,
                    248,
                    313,
                    315,
                    252
                ],
                "self.close_code": [
                    144,
                    1053
                ],
                "self.close_reason": [
                    145,
                    1053
                ],
                "self.stream": [
                    512,
                    146,
                    791,
                    428,
                    684,
                    819,
                    823,
                    825,
                    449,
                    836,
                    966,
                    456,
                    845,
                    465,
                    466,
                    982,
                    856,
                    984,
                    988,
                    989,
                    483,
                    1127,
                    1128,
                    502,
                    1018,
                    767
                ],
                "self._on_close_called": [
                    434,
                    147,
                    435,
                    445
                ],
                "self.open_args": [
                    151
                ],
                "args": [
                    450,
                    494,
                    151
                ],
                "self.open_kwargs": [
                    152
                ],
                "lower": [
                    704,
                    155,
                    166,
                    703
                ],
                "self.request.headers.get": [
                    648,
                    459,
                    651,
                    633,
                    180,
                    182,
                    409,
                    155
                ],
                "self.request.headers": [
                    165,
                    648,
                    459,
                    651,
                    633,
                    179,
                    180,
                    659,
                    182,
                    409,
                    155
                ],
                "self.request": [
                    482,
                    165,
                    648,
                    459,
                    651,
                    465,
                    497,
                    179,
                    180,
                    633,
                    182,
                    659,
                    409,
                    155
                ],
                "self.set_status": [
                    169,
                    188,
                    156,
                    198
                ],
                "log_msg": [
                    191,
                    170,
                    171,
                    172,
                    189,
                    190,
                    157,
                    158,
                    159
                ],
                "self.finish": [
                    200,
                    171,
                    190,
                    158
                ],
                "gen_log.debug": [
                    191,
                    172,
                    621,
                    159
                ],
                "gen_log": [
                    191,
                    172,
                    621,
                    159
                ],
                "headers": [
                    704,
                    706,
                    708,
                    165,
                    167,
                    692,
                    1115,
                    1117,
                    703
                ],
                "connection": [
                    168,
                    166
                ],
                "map": [
                    633,
                    166
                ],
                "s.strip": [
                    652,
                    166
                ],
                "s": [
                    652,
                    166
                ],
                "split": [
                    167
                ],
                "headers.get": [
                    692,
                    167
                ],
                "origin": [
                    407,
                    180,
                    405,
                    406,
                    182,
                    187,
                    412
                ],
                "self.check_origin": [
                    187
                ],
                "self.get_websocket_protocol": [
                    194,
                    1118
                ],
                "self.ws_connection.accept_connection": [
                    196
                ],
                "self.set_header": [
                    199
                ],
                "tornado.web.asynchronous": [
                    149
                ],
                "stream": [
                    202
                ],
                "self.settings.get": [
                    218,
                    210,
                    229
                ],
                "self.settings": [
                    218,
                    210,
                    229
                ],
                "property": [
                    998,
                    204,
                    212,
                    220,
                    991
                ],
                "WebSocketClosedError": [
                    249,
                    314
                ],
                "isinstance": [
                    776,
                    250,
                    786,
                    1221
                ],
                "message": [
                    775,
                    776,
                    777,
                    780,
                    1164,
                    782,
                    1166,
                    1169,
                    1139,
                    250,
                    251,
                    252
                ],
                "dict": [
                    720,
                    250
                ],
                "tornado.escape.json_encode": [
                    251
                ],
                "tornado.escape": [
                    251,
                    775
                ],
                "self.ws_connection.write_message": [
                    252
                ],
                "binary": [
                    1139,
                    771,
                    252
                ],
                "NotImplementedError": [
                    309
                ],
                "self.ws_connection.write_ping": [
                    315
                ],
                "data": [
                    892,
                    906,
                    909,
                    786,
                    787,
                    796,
                    797,
                    925,
                    929,
                    546,
                    931,
                    548,
                    549,
                    938,
                    939,
                    943,
                    944,
                    945,
                    946,
                    952,
                    570,
                    315,
                    955,
                    959,
                    841,
                    842,
                    852,
                    853,
                    863,
                    864,
                    872,
                    877,
                    751,
                    764,
                    765,
                    895
                ],
                "self.ws_connection.close": [
                    355
                ],
                "code": [
                    355,
                    1094,
                    967,
                    968,
                    969,
                    972
                ],
                "reason": [
                    355,
                    1094,
                    967,
                    973,
                    974
                ],
                "parsed_origin": [
                    405,
                    406
                ],
                "urlparse": [
                    405
                ],
                "parsed_origin.netloc": [
                    406
                ],
                "origin.lower": [
                    407
                ],
                "host": [
                    409,
                    412
                ],
                "self.stream.set_nodelay": [
                    428
                ],
                "value": [
                    428
                ],
                "self.ws_connection.on_connection_close": [
                    432
                ],
                "self.on_close": [
                    436
                ],
                "self._break_cycles": [
                    437
                ],
                "self.get_status": [
                    445
                ],
                "_break_cycles": [
                    446
                ],
                "send_error": [
                    450
                ],
                "self.stream.close": [
                    456,
                    512,
                    984
                ],
                "websocket_version": [
                    459,
                    460
                ],
                "WebSocketProtocol13": [
                    1178,
                    461,
                    647
                ],
                "self.get_compression_options": [
                    462
                ],
                "self.request.connection.detach": [
                    465
                ],
                "self.request.connection": [
                    465
                ],
                "self.stream.set_close_callback": [
                    1128,
                    466
                ],
                "self.on_connection_close": [
                    1128,
                    466
                ],
                "method": [
                    468,
                    470
                ],
                "setattr": [
                    470
                ],
                "_raise_not_supported_for_websockets": [
                    470
                ],
                "RuntimeError": [
                    474
                ],
                "object": [
                    552,
                    516,
                    477
                ],
                "self.handler": [
                    654,
                    657,
                    671,
                    676,
                    677,
                    678,
                    679,
                    680,
                    681,
                    935,
                    683,
                    684,
                    939,
                    687,
                    688,
                    944,
                    946,
                    948,
                    955,
                    959,
                    833,
                    481,
                    993,
                    1000
                ],
                "handler": [
                    481,
                    482,
                    483,
                    589
                ],
                "handler.request": [
                    482
                ],
                "handler.stream": [
                    483
                ],
                "self.client_terminated": [
                    484,
                    942,
                    911,
                    980,
                    921,
                    510
                ],
                "self.server_terminated": [
                    965,
                    979,
                    485,
                    511
                ],
                "result": [
                    494,
                    500,
                    501,
                    502,
                    503
                ],
                "callback": [
                    1158,
                    1159,
                    494,
                    1237,
                    1238
                ],
                "app_log.error": [
                    496
                ],
                "app_log": [
                    496
                ],
                "getattr": [
                    497
                ],
                "self._abort": [
                    954,
                    961,
                    868,
                    900,
                    933,
                    807,
                    813,
                    623,
                    849,
                    498,
                    978,
                    884,
                    793,
                    506,
                    827,
                    860,
                    989,
                    890
                ],
                "gen.convert_yielded": [
                    501
                ],
                "gen": [
                    501
                ],
                "self.stream.io_loop.add_future": [
                    502
                ],
                "self.stream.io_loop": [
                    989,
                    988,
                    982,
                    502
                ],
                "f.result": [
                    502
                ],
                "f": [
                    633,
                    502
                ],
                "self.close": [
                    513,
                    834,
                    948,
                    1030
                ],
                "max_wbits": [
                    518,
                    519,
                    521,
                    554,
                    523,
                    524,
                    555,
                    556,
                    558,
                    559
                ],
                "zlib.MAX_WBITS": [
                    519,
                    521,
                    523,
                    556,
                    555,
                    558,
                    724
                ],
                "zlib": [
                    547,
                    519,
                    521,
                    523,
                    555,
                    556,
                    558,
                    724,
                    566,
                    542
                ],
                "ValueError": [
                    738,
                    714,
                    522,
                    620,
                    557,
                    634
                ],
                "self._max_wbits": [
                    566,
                    524,
                    542,
                    559
                ],
                "compression_options": [
                    741,
                    743,
                    727,
                    526,
                    529,
                    1233,
                    531,
                    534,
                    599,
                    1046
                ],
                "self._compression_level": [
                    529,
                    542,
                    527
                ],
                "tornado.web.GZipContentEncoding.GZIP_LEVEL": [
                    527
                ],
                "tornado.web.GZipContentEncoding": [
                    527
                ],
                "self._mem_level": [
                    532,
                    534,
                    542
                ],
                "persistent": [
                    536,
                    560
                ],
                "self._compressor": [
                    545,
                    740,
                    779,
                    780,
                    537,
                    601,
                    539
                ],
                "self._create_compressor": [
                    537,
                    545
                ],
                "zlib.compressobj": [
                    542
                ],
                "zlib.DEFLATED": [
                    542
                ],
                "compressor": [
                    545,
                    546,
                    547
                ],
                "compressor.compress": [
                    546
                ],
                "compressor.flush": [
                    547
                ],
                "zlib.Z_SYNC_FLUSH": [
                    547
                ],
                "data.endswith": [
                    548
                ],
                "self._decompressor": [
                    802,
                    742,
                    561,
                    563,
                    600,
                    569,
                    925
                ],
                "self._create_decompressor": [
                    561,
                    569
                ],
                "zlib.decompressobj": [
                    566
                ],
                "decompressor": [
                    569,
                    570
                ],
                "decompressor.decompress": [
                    570
                ],
                "WebSocketProtocol": [
                    589,
                    573
                ],
                "FIN": [
                    580
                ],
                "RSV1": [
                    584,
                    581
                ],
                "RSV2": [
                    584,
                    582
                ],
                "RSV3": [
                    584,
                    583
                ],
                "RSV_MASK": [
                    584
                ],
                "OPCODE_MASK": [
                    585
                ],
                "WebSocketProtocol.__init__": [
                    589
                ],
                "self.mask_outgoing": [
                    752,
                    762,
                    590
                ],
                "mask_outgoing": [
                    590
                ],
                "self._final_frame": [
                    902,
                    908,
                    591,
                    882,
                    893,
                    798
                ],
                "self._frame_opcode": [
                    800,
                    801,
                    802,
                    903,
                    905,
                    592,
                    886,
                    887
                ],
                "self._masked_frame": [
                    809,
                    844,
                    593,
                    818,
                    855
                ],
                "self._frame_mask": [
                    864,
                    594,
                    872
                ],
                "self._frame_length": [
                    837,
                    842,
                    817,
                    595,
                    853,
                    830
                ],
                "self._fragmented_message_buffer": [
                    832,
                    896,
                    898,
                    906,
                    596,
                    895,
                    888,
                    892,
                    831
                ],
                "self._fragmented_message_opcode": [
                    905,
                    597,
                    894
                ],
                "self._waiting": [
                    983,
                    981,
                    982,
                    598,
                    985,
                    988
                ],
                "self._compression_options": [
                    665,
                    711,
                    662,
                    599
                ],
                "self._frame_compressed": [
                    602,
                    803,
                    924
                ],
                "self._message_bytes_in": [
                    929,
                    938,
                    606
                ],
                "self._message_bytes_out": [
                    777,
                    607
                ],
                "self._wire_bytes_in": [
                    610,
                    841,
                    877,
                    852,
                    796,
                    863
                ],
                "self._wire_bytes_out": [
                    611,
                    766
                ],
                "self.ping_callback": [
                    612,
                    1009,
                    1011,
                    1018,
                    1019
                ],
                "self.last_ping": [
                    1008,
                    1034,
                    1027,
                    613
                ],
                "self.last_pong": [
                    1008,
                    1026,
                    958,
                    614
                ],
                "self._handle_websocket_headers": [
                    618
                ],
                "self._accept_connection": [
                    619
                ],
                "fields": [
                    632,
                    633
                ],
                "all": [
                    633
                ],
                "sha1": [
                    641,
                    642,
                    643,
                    644
                ],
                "hashlib.sha1": [
                    641
                ],
                "hashlib": [
                    641
                ],
                "sha1.update": [
                    642,
                    643
                ],
                "utf8": [
                    642,
                    974
                ],
                "key": [
                    736,
                    705,
                    642,
                    738,
                    737
                ],
                "native_str": [
                    644
                ],
                "base64.b64encode": [
                    1051,
                    644
                ],
                "base64": [
                    1051,
                    644
                ],
                "sha1.digest": [
                    644
                ],
                "staticmethod": [
                    636
                ],
                "WebSocketProtocol13.compute_accept_value": [
                    647
                ],
                "subprotocols": [
                    651,
                    652,
                    653,
                    654,
                    656
                ],
                "subprotocols.split": [
                    652
                ],
                "selected": [
                    656,
                    657,
                    654,
                    655
                ],
                "self.handler.select_subprotocol": [
                    654
                ],
                "self.handler.set_header": [
                    678,
                    679,
                    680,
                    657,
                    671
                ],
                "extensions": [
                    708,
                    709,
                    659,
                    692,
                    660,
                    693,
                    695
                ],
                "self._parse_extensions_header": [
                    659,
                    708
                ],
                "ext": [
                    673,
                    709,
                    710,
                    712,
                    714,
                    660,
                    661,
                    665,
                    666,
                    667,
                    670
                ],
                "self._create_compressors": [
                    712,
                    665
                ],
                "httputil._encode_header": [
                    672
                ],
                "httputil": [
                    672,
                    1226,
                    694
                ],
                "self.handler.clear_header": [
                    676
                ],
                "self.handler.set_status": [
                    677
                ],
                "self._challenge_response": [
                    680
                ],
                "self.handler.finish": [
                    681
                ],
                "self.handler._attach_stream": [
                    683
                ],
                "self.handler.stream": [
                    684
                ],
                "self.start_pinging": [
                    686
                ],
                "self._run_callback": [
                    935,
                    939,
                    687,
                    955,
                    959
                ],
                "self.handler.open": [
                    687
                ],
                "self.handler.open_args": [
                    687
                ],
                "self.handler.open_kwargs": [
                    688
                ],
                "self._receive_frame": [
                    689,
                    915,
                    917
                ],
                "httputil._parse_header": [
                    694
                ],
                "e.strip": [
                    694
                ],
                "e": [
                    694,
                    695
                ],
                "extensions.split": [
                    695
                ],
                "accept": [
                    705,
                    706
                ],
                "self.compute_accept_value": [
                    705
                ],
                "options": [
                    720,
                    724,
                    726,
                    727,
                    728
                ],
                "side": [
                    721,
                    722,
                    739,
                    741
                ],
                "agreed_parameters": [
                    736,
                    741,
                    743,
                    721,
                    722
                ],
                "wbits_header": [
                    722,
                    723,
                    726
                ],
                "agreed_parameters.get": [
                    722
                ],
                "int": [
                    726
                ],
                "allowed_keys": [
                    737,
                    732
                ],
                "set": [
                    732
                ],
                "other_side": [
                    739,
                    743
                ],
                "_PerMessageDeflateCompressor": [
                    740
                ],
                "self._get_compressor_options": [
                    741,
                    743
                ],
                "_PerMessageDeflateDecompressor": [
                    742
                ],
                "fin": [
                    746
                ],
                "finbit": [
                    747,
                    749,
                    750
                ],
                "self.FIN": [
                    747,
                    798
                ],
                "frame": [
                    750,
                    757,
                    759,
                    761,
                    765,
                    766,
                    767
                ],
                "struct.pack": [
                    972,
                    750,
                    757,
                    759,
                    761
                ],
                "struct": [
                    842,
                    972,
                    750,
                    944,
                    757,
                    853,
                    759,
                    761,
                    797
                ],
                "opcode": [
                    772,
                    774,
                    903,
                    936,
                    940,
                    909,
                    782,
                    750,
                    949,
                    886,
                    956,
                    894,
                    927
                ],
                "flags": [
                    778,
                    781,
                    750,
                    782
                ],
                "l": [
                    751,
                    756,
                    757,
                    758,
                    759,
                    761
                ],
                "len": [
                    832,
                    929,
                    777,
                    841,
                    938,
                    877,
                    751,
                    943,
                    945,
                    852,
                    796,
                    766,
                    863
                ],
                "mask_bit": [
                    753,
                    755,
                    757,
                    759,
                    761
                ],
                "mask": [
                    763,
                    764
                ],
                "os.urandom": [
                    1051,
                    763
                ],
                "os": [
                    1051,
                    763
                ],
                "_websocket_mask": [
                    872,
                    764
                ],
                "self.stream.write": [
                    767
                ],
                "tornado.escape.utf8": [
                    775
                ],
                "bytes": [
                    776,
                    786
                ],
                "self._compressor.compress": [
                    780
                ],
                "self.RSV1": [
                    803,
                    804,
                    781
                ],
                "self._write_frame": [
                    952,
                    787,
                    782,
                    976
                ],
                "self.stream.read_bytes": [
                    836,
                    791,
                    845,
                    819,
                    823,
                    856,
                    825
                ],
                "self._on_frame_start": [
                    791
                ],
                "StreamClosedError": [
                    867,
                    1099,
                    848,
                    977,
                    792,
                    953,
                    826,
                    859
                ],
                "header": [
                    800,
                    797,
                    798,
                    799
                ],
                "payloadlen": [
                    809,
                    810,
                    811,
                    816,
                    817,
                    822,
                    824,
                    797
                ],
                "struct.unpack": [
                    944,
                    842,
                    853,
                    797
                ],
                "reserved_bits": [
                    803,
                    804,
                    805,
                    799
                ],
                "self.RSV_MASK": [
                    799
                ],
                "self.OPCODE_MASK": [
                    800
                ],
                "self._frame_opcode_is_control": [
                    801,
                    811,
                    878
                ],
                "bool": [
                    809,
                    803
                ],
                "self._on_masking_key": [
                    856,
                    819,
                    845
                ],
                "self._read_frame_data": [
                    858,
                    821,
                    866,
                    847
                ],
                "self._on_frame_length_16": [
                    823
                ],
                "self._on_frame_length_64": [
                    825
                ],
                "new_len": [
                    832,
                    833,
                    830
                ],
                "self.handler.max_message_size": [
                    833
                ],
                "masked": [
                    838
                ],
                "self._on_masked_frame_data": [
                    838
                ],
                "self._on_frame_data": [
                    872,
                    838
                ],
                "handled_future": [
                    912,
                    914,
                    875,
                    909
                ],
                "self._handle_message": [
                    909
                ],
                "handled_future.add_done_callback": [
                    914
                ],
                "self._decompressor.decompress": [
                    925
                ],
                "decoded": [
                    931,
                    935
                ],
                "data.decode": [
                    931
                ],
                "UnicodeDecodeError": [
                    932
                ],
                "self.handler.on_message": [
                    939,
                    935
                ],
                "self.handler.close_code": [
                    944,
                    948
                ],
                "self.handler.close_reason": [
                    946
                ],
                "to_unicode": [
                    946
                ],
                "self.handler.on_ping": [
                    955
                ],
                "time": [
                    1008,
                    1025,
                    958
                ],
                "IOLoop.current": [
                    1008,
                    1025,
                    1238,
                    958
                ],
                "IOLoop": [
                    1008,
                    1025,
                    1238,
                    958
                ],
                "self.handler.on_pong": [
                    959
                ],
                "self.stream.closed": [
                    1018,
                    966
                ],
                "close_data": [
                    976,
                    970,
                    972,
                    974
                ],
                "self.stream.io_loop.remove_timeout": [
                    982
                ],
                "self.stream.io_loop.add_timeout": [
                    988
                ],
                "self.stream.io_loop.time": [
                    989
                ],
                "interval": [
                    993,
                    994,
                    995
                ],
                "self.handler.ping_interval": [
                    993
                ],
                "timeout": [
                    1000,
                    1001,
                    1002
                ],
                "self.handler.ping_timeout": [
                    1000
                ],
                "max": [
                    1003
                ],
                "self.ping_interval": [
                    1028,
                    1003,
                    1007,
                    1010,
                    1054
                ],
                "PeriodicCallback": [
                    1009
                ],
                "self.periodic_ping": [
                    1010
                ],
                "self.ping_callback.start": [
                    1011
                ],
                "self.ping_callback.stop": [
                    1019
                ],
                "now": [
                    1025,
                    1026,
                    1027,
                    1034
                ],
                "since_last_pong": [
                    1026,
                    1029
                ],
                "since_last_ping": [
                    1027,
                    1028
                ],
                "self.ping_timeout": [
                    1029,
                    1055
                ],
                "self.write_ping": [
                    1033
                ],
                "simple_httpclient._HTTPConnection": [
                    1037
                ],
                "simple_httpclient": [
                    1037
                ],
                "self.compression_options": [
                    1067,
                    1179,
                    1046
                ],
                "self.connect_future": [
                    1098,
                    1099,
                    1135,
                    1105,
                    1107,
                    1109,
                    1047
                ],
                "TracebackFuture": [
                    1153,
                    1047
                ],
                "self.protocol": [
                    1120,
                    1121,
                    1093,
                    1094,
                    1095,
                    1139,
                    1048,
                    1118,
                    1119
                ],
                "self.read_future": [
                    1152,
                    1157,
                    1165,
                    1166,
                    1167,
                    1049
                ],
                "self.read_queue": [
                    1169,
                    1050,
                    1155,
                    1154
                ],
                "collections.deque": [
                    1050
                ],
                "collections": [
                    1050
                ],
                "self.key": [
                    1064,
                    1051,
                    1119
                ],
                "self._on_message_callback": [
                    1164,
                    1163,
                    1052
                ],
                "on_message_callback": [
                    1232,
                    1052
                ],
                "ping_interval": [
                    1234,
                    1054
                ],
                "ping_timeout": [
                    1235,
                    1055
                ],
                "self.max_message_size": [
                    1056
                ],
                "max_message_size": [
                    1056,
                    1236
                ],
                "scheme": [
                    1058,
                    1059,
                    1060
                ],
                "sep": [
                    1058,
                    1060
                ],
                "rest": [
                    1058,
                    1060
                ],
                "request.url.partition": [
                    1058
                ],
                "request.url": [
                    1058,
                    1060
                ],
                "request.headers.update": [
                    1061
                ],
                "request.headers": [
                    1073,
                    1226,
                    1061
                ],
                "self.tcp_client": [
                    1076,
                    1101,
                    1079
                ],
                "TCPClient": [
                    1076
                ],
                "WebSocketClientConnection": [
                    1114,
                    1077,
                    1102,
                    1231
                ],
                "self._on_http_response": [
                    1078
                ],
                "self.protocol.close": [
                    1094
                ],
                "self.connect_future.done": [
                    1105,
                    1098
                ],
                "self.connect_future.set_exception": [
                    1107,
                    1099,
                    1109
                ],
                "self.on_message": [
                    1100
                ],
                "self.tcp_client.close": [
                    1101
                ],
                "on_connection_close": [
                    1102
                ],
                "response.error": [
                    1106,
                    1107
                ],
                "response": [
                    1106,
                    1107
                ],
                "start_line.code": [
                    1113
                ],
                "start_line": [
                    1113,
                    1115
                ],
                "headers_received": [
                    1114
                ],
                "self.headers": [
                    1117,
                    1119
                ],
                "self.protocol._process_server_headers": [
                    1119
                ],
                "self.protocol.start_pinging": [
                    1120
                ],
                "self.protocol._receive_frame": [
                    1121
                ],
                "self._timeout": [
                    1123,
                    1124,
                    1125
                ],
                "self.io_loop.remove_timeout": [
                    1124
                ],
                "self.io_loop": [
                    1124,
                    1159
                ],
                "self.connection.detach": [
                    1127
                ],
                "self.connection": [
                    1127
                ],
                "self.final_callback": [
                    1133
                ],
                "self.connect_future.set_result": [
                    1135
                ],
                "self.protocol.write_message": [
                    1139
                ],
                "future": [
                    1153,
                    1155,
                    1157,
                    1159,
                    1160
                ],
                "future.set_result": [
                    1155
                ],
                "self.read_queue.popleft": [
                    1155
                ],
                "self.io_loop.add_future": [
                    1159
                ],
                "self.read_future.set_result": [
                    1166
                ],
                "self.read_queue.append": [
                    1169
                ],
                "url": [
                    1228,
                    1221,
                    1223
                ],
                "httpclient.HTTPRequest": [
                    1228,
                    1221,
                    1230
                ],
                "httpclient": [
                    1229,
                    1228,
                    1221,
                    1230
                ],
                "connect_timeout": [
                    1228,
                    1222
                ],
                "httputil.HTTPHeaders": [
                    1226
                ],
                "httpclient._RequestProxy": [
                    1229
                ],
                "httpclient.HTTPRequest._DEFAULTS": [
                    1230
                ],
                "conn": [
                    1239,
                    1238,
                    1231
                ],
                "add_future": [
                    1238
                ],
                "conn.connect_future": [
                    1238,
                    1239
                ]
            },
            "filtered_variables_in_file": {
                "PY3": [
                    41
                ],
                "xrange": [
                    43
                ],
                "WebSocketError": [
                    52,
                    1109
                ],
                "tornado.web.RequestHandler": [
                    60
                ],
                "tornado.web": [
                    60,
                    149,
                    527
                ],
                "tornado": [
                    775,
                    527,
                    149,
                    251,
                    60
                ],
                "__init__": [
                    1077,
                    142
                ],
                "WebSocketHandler": [
                    450,
                    446,
                    142
                ],
                "self": [
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    151,
                    152,
                    155,
                    156,
                    158,
                    165,
                    169,
                    171,
                    179,
                    180,
                    182,
                    187,
                    188,
                    190,
                    194,
                    195,
                    196,
                    198,
                    199,
                    200,
                    210,
                    218,
                    229,
                    248,
                    252,
                    313,
                    315,
                    354,
                    355,
                    356,
                    409,
                    428,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    445,
                    446,
                    449,
                    450,
                    456,
                    459,
                    462,
                    465,
                    466,
                    470,
                    481,
                    482,
                    483,
                    484,
                    485,
                    497,
                    498,
                    502,
                    506,
                    510,
                    511,
                    512,
                    513,
                    524,
                    527,
                    529,
                    532,
                    534,
                    537,
                    539,
                    542,
                    545,
                    559,
                    561,
                    563,
                    566,
                    569,
                    589,
                    590,
                    591,
                    592,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    602,
                    606,
                    607,
                    610,
                    611,
                    612,
                    613,
                    614,
                    618,
                    619,
                    623,
                    633,
                    648,
                    651,
                    654,
                    657,
                    659,
                    662,
                    665,
                    671,
                    676,
                    677,
                    678,
                    679,
                    680,
                    681,
                    683,
                    684,
                    686,
                    687,
                    688,
                    689,
                    705,
                    708,
                    711,
                    712,
                    740,
                    741,
                    742,
                    743,
                    747,
                    752,
                    762,
                    766,
                    767,
                    777,
                    779,
                    780,
                    781,
                    782,
                    787,
                    791,
                    793,
                    796,
                    798,
                    799,
                    800,
                    801,
                    802,
                    803,
                    804,
                    807,
                    809,
                    811,
                    813,
                    817,
                    818,
                    819,
                    821,
                    823,
                    825,
                    827,
                    830,
                    831,
                    832,
                    833,
                    834,
                    836,
                    837,
                    838,
                    841,
                    842,
                    844,
                    845,
                    847,
                    849,
                    852,
                    853,
                    855,
                    856,
                    858,
                    860,
                    863,
                    864,
                    866,
                    868,
                    872,
                    877,
                    878,
                    882,
                    884,
                    886,
                    887,
                    888,
                    890,
                    892,
                    893,
                    894,
                    895,
                    896,
                    898,
                    900,
                    902,
                    903,
                    905,
                    906,
                    908,
                    909,
                    911,
                    915,
                    917,
                    921,
                    924,
                    925,
                    929,
                    933,
                    935,
                    938,
                    939,
                    942,
                    944,
                    946,
                    948,
                    952,
                    954,
                    955,
                    958,
                    959,
                    961,
                    965,
                    966,
                    976,
                    978,
                    979,
                    980,
                    981,
                    982,
                    983,
                    984,
                    985,
                    988,
                    989,
                    993,
                    1000,
                    1003,
                    1007,
                    1008,
                    1009,
                    1010,
                    1011,
                    1018,
                    1019,
                    1026,
                    1027,
                    1028,
                    1029,
                    1030,
                    1033,
                    1034,
                    1046,
                    1047,
                    1048,
                    1049,
                    1050,
                    1051,
                    1052,
                    1053,
                    1054,
                    1055,
                    1056,
                    1064,
                    1067,
                    1076,
                    1077,
                    1078,
                    1079,
                    1093,
                    1094,
                    1095,
                    1098,
                    1099,
                    1100,
                    1101,
                    1102,
                    1105,
                    1107,
                    1109,
                    1114,
                    1117,
                    1118,
                    1119,
                    1120,
                    1121,
                    1123,
                    1124,
                    1125,
                    1127,
                    1128,
                    1133,
                    1135,
                    1139,
                    1152,
                    1154,
                    1155,
                    1157,
                    1159,
                    1163,
                    1164,
                    1165,
                    1166,
                    1167,
                    1169,
                    1178,
                    1179
                ],
                "application": [
                    142
                ],
                "request": [
                    1058,
                    1060,
                    1061,
                    1223,
                    1226,
                    1228,
                    1229,
                    142,
                    1230,
                    1231,
                    1073,
                    1078
                ],
                "kwargs": [
                    152,
                    450,
                    142,
                    494
                ],
                "self.ws_connection": [
                    194,
                    195,
                    196,
                    354,
                    355,
                    356,
                    143,
                    431,
                    432,
                    433,
                    248,
                    313,
                    315,
                    252
                ],
                "self.close_code": [
                    144,
                    1053
                ],
                "self.close_reason": [
                    145,
                    1053
                ],
                "self.stream": [
                    512,
                    146,
                    791,
                    428,
                    684,
                    819,
                    823,
                    825,
                    449,
                    836,
                    966,
                    456,
                    845,
                    465,
                    466,
                    982,
                    856,
                    984,
                    988,
                    989,
                    483,
                    1127,
                    1128,
                    502,
                    1018,
                    767
                ],
                "self._on_close_called": [
                    434,
                    147,
                    435,
                    445
                ],
                "self.open_args": [
                    151
                ],
                "args": [
                    450,
                    494,
                    151
                ],
                "self.open_kwargs": [
                    152
                ],
                "lower": [
                    704,
                    155,
                    166,
                    703
                ],
                "self.request.headers.get": [
                    648,
                    459,
                    651,
                    633,
                    180,
                    182,
                    409,
                    155
                ],
                "self.request.headers": [
                    165,
                    648,
                    459,
                    651,
                    633,
                    179,
                    180,
                    659,
                    182,
                    409,
                    155
                ],
                "self.request": [
                    482,
                    165,
                    648,
                    459,
                    651,
                    465,
                    497,
                    179,
                    180,
                    633,
                    182,
                    659,
                    409,
                    155
                ],
                "self.set_status": [
                    169,
                    188,
                    156,
                    198
                ],
                "log_msg": [
                    191,
                    170,
                    171,
                    172,
                    189,
                    190,
                    157,
                    158,
                    159
                ],
                "self.finish": [
                    200,
                    171,
                    190,
                    158
                ],
                "gen_log.debug": [
                    191,
                    172,
                    621,
                    159
                ],
                "gen_log": [
                    191,
                    172,
                    621,
                    159
                ],
                "headers": [
                    704,
                    706,
                    708,
                    165,
                    167,
                    692,
                    1115,
                    1117,
                    703
                ],
                "connection": [
                    168,
                    166
                ],
                "s.strip": [
                    652,
                    166
                ],
                "s": [
                    652,
                    166
                ],
                "split": [
                    167
                ],
                "headers.get": [
                    692,
                    167
                ],
                "origin": [
                    407,
                    180,
                    405,
                    406,
                    182,
                    187,
                    412
                ],
                "self.check_origin": [
                    187
                ],
                "self.get_websocket_protocol": [
                    194,
                    1118
                ],
                "self.ws_connection.accept_connection": [
                    196
                ],
                "self.set_header": [
                    199
                ],
                "tornado.web.asynchronous": [
                    149
                ],
                "stream": [
                    202
                ],
                "self.settings.get": [
                    218,
                    210,
                    229
                ],
                "self.settings": [
                    218,
                    210,
                    229
                ],
                "WebSocketClosedError": [
                    249,
                    314
                ],
                "message": [
                    775,
                    776,
                    777,
                    780,
                    1164,
                    782,
                    1166,
                    1169,
                    1139,
                    250,
                    251,
                    252
                ],
                "tornado.escape.json_encode": [
                    251
                ],
                "tornado.escape": [
                    251,
                    775
                ],
                "self.ws_connection.write_message": [
                    252
                ],
                "binary": [
                    1139,
                    771,
                    252
                ],
                "self.ws_connection.write_ping": [
                    315
                ],
                "data": [
                    892,
                    906,
                    909,
                    786,
                    787,
                    796,
                    797,
                    925,
                    929,
                    546,
                    931,
                    548,
                    549,
                    938,
                    939,
                    943,
                    944,
                    945,
                    946,
                    952,
                    570,
                    315,
                    955,
                    959,
                    841,
                    842,
                    852,
                    853,
                    863,
                    864,
                    872,
                    877,
                    751,
                    764,
                    765,
                    895
                ],
                "self.ws_connection.close": [
                    355
                ],
                "code": [
                    355,
                    1094,
                    967,
                    968,
                    969,
                    972
                ],
                "reason": [
                    355,
                    1094,
                    967,
                    973,
                    974
                ],
                "parsed_origin": [
                    405,
                    406
                ],
                "urlparse": [
                    405
                ],
                "parsed_origin.netloc": [
                    406
                ],
                "origin.lower": [
                    407
                ],
                "host": [
                    409,
                    412
                ],
                "self.stream.set_nodelay": [
                    428
                ],
                "value": [
                    428
                ],
                "self.ws_connection.on_connection_close": [
                    432
                ],
                "self.on_close": [
                    436
                ],
                "self._break_cycles": [
                    437
                ],
                "self.get_status": [
                    445
                ],
                "_break_cycles": [
                    446
                ],
                "send_error": [
                    450
                ],
                "self.stream.close": [
                    456,
                    512,
                    984
                ],
                "websocket_version": [
                    459,
                    460
                ],
                "WebSocketProtocol13": [
                    1178,
                    461,
                    647
                ],
                "self.get_compression_options": [
                    462
                ],
                "self.request.connection.detach": [
                    465
                ],
                "self.request.connection": [
                    465
                ],
                "self.stream.set_close_callback": [
                    1128,
                    466
                ],
                "self.on_connection_close": [
                    1128,
                    466
                ],
                "method": [
                    468,
                    470
                ],
                "_raise_not_supported_for_websockets": [
                    470
                ],
                "self.handler": [
                    654,
                    657,
                    671,
                    676,
                    677,
                    678,
                    679,
                    680,
                    681,
                    935,
                    683,
                    684,
                    939,
                    687,
                    688,
                    944,
                    946,
                    948,
                    955,
                    959,
                    833,
                    481,
                    993,
                    1000
                ],
                "handler": [
                    481,
                    482,
                    483,
                    589
                ],
                "handler.request": [
                    482
                ],
                "handler.stream": [
                    483
                ],
                "self.client_terminated": [
                    484,
                    942,
                    911,
                    980,
                    921,
                    510
                ],
                "self.server_terminated": [
                    965,
                    979,
                    485,
                    511
                ],
                "result": [
                    494,
                    500,
                    501,
                    502,
                    503
                ],
                "callback": [
                    1158,
                    1159,
                    494,
                    1237,
                    1238
                ],
                "app_log.error": [
                    496
                ],
                "app_log": [
                    496
                ],
                "self._abort": [
                    954,
                    961,
                    868,
                    900,
                    933,
                    807,
                    813,
                    623,
                    849,
                    498,
                    978,
                    884,
                    793,
                    506,
                    827,
                    860,
                    989,
                    890
                ],
                "gen.convert_yielded": [
                    501
                ],
                "gen": [
                    501
                ],
                "self.stream.io_loop.add_future": [
                    502
                ],
                "self.stream.io_loop": [
                    989,
                    988,
                    982,
                    502
                ],
                "f.result": [
                    502
                ],
                "f": [
                    633,
                    502
                ],
                "self.close": [
                    513,
                    834,
                    948,
                    1030
                ],
                "max_wbits": [
                    518,
                    519,
                    521,
                    554,
                    523,
                    524,
                    555,
                    556,
                    558,
                    559
                ],
                "zlib.MAX_WBITS": [
                    519,
                    521,
                    523,
                    556,
                    555,
                    558,
                    724
                ],
                "zlib": [
                    547,
                    519,
                    521,
                    523,
                    555,
                    556,
                    558,
                    724,
                    566,
                    542
                ],
                "self._max_wbits": [
                    566,
                    524,
                    542,
                    559
                ],
                "compression_options": [
                    741,
                    743,
                    727,
                    526,
                    529,
                    1233,
                    531,
                    534,
                    599,
                    1046
                ],
                "self._compression_level": [
                    529,
                    542,
                    527
                ],
                "tornado.web.GZipContentEncoding.GZIP_LEVEL": [
                    527
                ],
                "tornado.web.GZipContentEncoding": [
                    527
                ],
                "self._mem_level": [
                    532,
                    534,
                    542
                ],
                "persistent": [
                    536,
                    560
                ],
                "self._compressor": [
                    545,
                    740,
                    779,
                    780,
                    537,
                    601,
                    539
                ],
                "self._create_compressor": [
                    537,
                    545
                ],
                "zlib.compressobj": [
                    542
                ],
                "zlib.DEFLATED": [
                    542
                ],
                "compressor": [
                    545,
                    546,
                    547
                ],
                "compressor.compress": [
                    546
                ],
                "compressor.flush": [
                    547
                ],
                "zlib.Z_SYNC_FLUSH": [
                    547
                ],
                "data.endswith": [
                    548
                ],
                "self._decompressor": [
                    802,
                    742,
                    561,
                    563,
                    600,
                    569,
                    925
                ],
                "self._create_decompressor": [
                    561,
                    569
                ],
                "zlib.decompressobj": [
                    566
                ],
                "decompressor": [
                    569,
                    570
                ],
                "decompressor.decompress": [
                    570
                ],
                "WebSocketProtocol": [
                    589,
                    573
                ],
                "FIN": [
                    580
                ],
                "RSV1": [
                    584,
                    581
                ],
                "RSV2": [
                    584,
                    582
                ],
                "RSV3": [
                    584,
                    583
                ],
                "RSV_MASK": [
                    584
                ],
                "OPCODE_MASK": [
                    585
                ],
                "WebSocketProtocol.__init__": [
                    589
                ],
                "self.mask_outgoing": [
                    752,
                    762,
                    590
                ],
                "mask_outgoing": [
                    590
                ],
                "self._final_frame": [
                    902,
                    908,
                    591,
                    882,
                    893,
                    798
                ],
                "self._frame_opcode": [
                    800,
                    801,
                    802,
                    903,
                    905,
                    592,
                    886,
                    887
                ],
                "self._masked_frame": [
                    809,
                    844,
                    593,
                    818,
                    855
                ],
                "self._frame_mask": [
                    864,
                    594,
                    872
                ],
                "self._frame_length": [
                    837,
                    842,
                    817,
                    595,
                    853,
                    830
                ],
                "self._fragmented_message_buffer": [
                    832,
                    896,
                    898,
                    906,
                    596,
                    895,
                    888,
                    892,
                    831
                ],
                "self._fragmented_message_opcode": [
                    905,
                    597,
                    894
                ],
                "self._waiting": [
                    983,
                    981,
                    982,
                    598,
                    985,
                    988
                ],
                "self._compression_options": [
                    665,
                    711,
                    662,
                    599
                ],
                "self._frame_compressed": [
                    602,
                    803,
                    924
                ],
                "self._message_bytes_in": [
                    929,
                    938,
                    606
                ],
                "self._message_bytes_out": [
                    777,
                    607
                ],
                "self._wire_bytes_in": [
                    610,
                    841,
                    877,
                    852,
                    796,
                    863
                ],
                "self._wire_bytes_out": [
                    611,
                    766
                ],
                "self.ping_callback": [
                    612,
                    1009,
                    1011,
                    1018,
                    1019
                ],
                "self.last_ping": [
                    1008,
                    1034,
                    1027,
                    613
                ],
                "self.last_pong": [
                    1008,
                    1026,
                    958,
                    614
                ],
                "self._handle_websocket_headers": [
                    618
                ],
                "self._accept_connection": [
                    619
                ],
                "fields": [
                    632,
                    633
                ],
                "sha1": [
                    641,
                    642,
                    643,
                    644
                ],
                "hashlib.sha1": [
                    641
                ],
                "hashlib": [
                    641
                ],
                "sha1.update": [
                    642,
                    643
                ],
                "utf8": [
                    642,
                    974
                ],
                "key": [
                    736,
                    705,
                    642,
                    738,
                    737
                ],
                "native_str": [
                    644
                ],
                "base64.b64encode": [
                    1051,
                    644
                ],
                "base64": [
                    1051,
                    644
                ],
                "sha1.digest": [
                    644
                ],
                "WebSocketProtocol13.compute_accept_value": [
                    647
                ],
                "subprotocols": [
                    651,
                    652,
                    653,
                    654,
                    656
                ],
                "subprotocols.split": [
                    652
                ],
                "selected": [
                    656,
                    657,
                    654,
                    655
                ],
                "self.handler.select_subprotocol": [
                    654
                ],
                "self.handler.set_header": [
                    678,
                    679,
                    680,
                    657,
                    671
                ],
                "extensions": [
                    708,
                    709,
                    659,
                    692,
                    660,
                    693,
                    695
                ],
                "self._parse_extensions_header": [
                    659,
                    708
                ],
                "ext": [
                    673,
                    709,
                    710,
                    712,
                    714,
                    660,
                    661,
                    665,
                    666,
                    667,
                    670
                ],
                "self._create_compressors": [
                    712,
                    665
                ],
                "httputil._encode_header": [
                    672
                ],
                "httputil": [
                    672,
                    1226,
                    694
                ],
                "self.handler.clear_header": [
                    676
                ],
                "self.handler.set_status": [
                    677
                ],
                "self._challenge_response": [
                    680
                ],
                "self.handler.finish": [
                    681
                ],
                "self.handler._attach_stream": [
                    683
                ],
                "self.handler.stream": [
                    684
                ],
                "self.start_pinging": [
                    686
                ],
                "self._run_callback": [
                    935,
                    939,
                    687,
                    955,
                    959
                ],
                "self.handler.open": [
                    687
                ],
                "self.handler.open_args": [
                    687
                ],
                "self.handler.open_kwargs": [
                    688
                ],
                "self._receive_frame": [
                    689,
                    915,
                    917
                ],
                "httputil._parse_header": [
                    694
                ],
                "e.strip": [
                    694
                ],
                "e": [
                    694,
                    695
                ],
                "extensions.split": [
                    695
                ],
                "accept": [
                    705,
                    706
                ],
                "self.compute_accept_value": [
                    705
                ],
                "options": [
                    720,
                    724,
                    726,
                    727,
                    728
                ],
                "side": [
                    721,
                    722,
                    739,
                    741
                ],
                "agreed_parameters": [
                    736,
                    741,
                    743,
                    721,
                    722
                ],
                "wbits_header": [
                    722,
                    723,
                    726
                ],
                "agreed_parameters.get": [
                    722
                ],
                "allowed_keys": [
                    737,
                    732
                ],
                "other_side": [
                    739,
                    743
                ],
                "_PerMessageDeflateCompressor": [
                    740
                ],
                "self._get_compressor_options": [
                    741,
                    743
                ],
                "_PerMessageDeflateDecompressor": [
                    742
                ],
                "fin": [
                    746
                ],
                "finbit": [
                    747,
                    749,
                    750
                ],
                "self.FIN": [
                    747,
                    798
                ],
                "frame": [
                    750,
                    757,
                    759,
                    761,
                    765,
                    766,
                    767
                ],
                "struct.pack": [
                    972,
                    750,
                    757,
                    759,
                    761
                ],
                "struct": [
                    842,
                    972,
                    750,
                    944,
                    757,
                    853,
                    759,
                    761,
                    797
                ],
                "opcode": [
                    772,
                    774,
                    903,
                    936,
                    940,
                    909,
                    782,
                    750,
                    949,
                    886,
                    956,
                    894,
                    927
                ],
                "flags": [
                    778,
                    781,
                    750,
                    782
                ],
                "l": [
                    751,
                    756,
                    757,
                    758,
                    759,
                    761
                ],
                "mask_bit": [
                    753,
                    755,
                    757,
                    759,
                    761
                ],
                "mask": [
                    763,
                    764
                ],
                "os.urandom": [
                    1051,
                    763
                ],
                "os": [
                    1051,
                    763
                ],
                "_websocket_mask": [
                    872,
                    764
                ],
                "self.stream.write": [
                    767
                ],
                "tornado.escape.utf8": [
                    775
                ],
                "self._compressor.compress": [
                    780
                ],
                "self.RSV1": [
                    803,
                    804,
                    781
                ],
                "self._write_frame": [
                    952,
                    787,
                    782,
                    976
                ],
                "self.stream.read_bytes": [
                    836,
                    791,
                    845,
                    819,
                    823,
                    856,
                    825
                ],
                "self._on_frame_start": [
                    791
                ],
                "StreamClosedError": [
                    867,
                    1099,
                    848,
                    977,
                    792,
                    953,
                    826,
                    859
                ],
                "header": [
                    800,
                    797,
                    798,
                    799
                ],
                "payloadlen": [
                    809,
                    810,
                    811,
                    816,
                    817,
                    822,
                    824,
                    797
                ],
                "struct.unpack": [
                    944,
                    842,
                    853,
                    797
                ],
                "reserved_bits": [
                    803,
                    804,
                    805,
                    799
                ],
                "self.RSV_MASK": [
                    799
                ],
                "self.OPCODE_MASK": [
                    800
                ],
                "self._frame_opcode_is_control": [
                    801,
                    811,
                    878
                ],
                "self._on_masking_key": [
                    856,
                    819,
                    845
                ],
                "self._read_frame_data": [
                    858,
                    821,
                    866,
                    847
                ],
                "self._on_frame_length_16": [
                    823
                ],
                "self._on_frame_length_64": [
                    825
                ],
                "new_len": [
                    832,
                    833,
                    830
                ],
                "self.handler.max_message_size": [
                    833
                ],
                "masked": [
                    838
                ],
                "self._on_masked_frame_data": [
                    838
                ],
                "self._on_frame_data": [
                    872,
                    838
                ],
                "handled_future": [
                    912,
                    914,
                    875,
                    909
                ],
                "self._handle_message": [
                    909
                ],
                "handled_future.add_done_callback": [
                    914
                ],
                "self._decompressor.decompress": [
                    925
                ],
                "decoded": [
                    931,
                    935
                ],
                "data.decode": [
                    931
                ],
                "self.handler.on_message": [
                    939,
                    935
                ],
                "self.handler.close_code": [
                    944,
                    948
                ],
                "self.handler.close_reason": [
                    946
                ],
                "to_unicode": [
                    946
                ],
                "self.handler.on_ping": [
                    955
                ],
                "time": [
                    1008,
                    1025,
                    958
                ],
                "IOLoop.current": [
                    1008,
                    1025,
                    1238,
                    958
                ],
                "IOLoop": [
                    1008,
                    1025,
                    1238,
                    958
                ],
                "self.handler.on_pong": [
                    959
                ],
                "self.stream.closed": [
                    1018,
                    966
                ],
                "close_data": [
                    976,
                    970,
                    972,
                    974
                ],
                "self.stream.io_loop.remove_timeout": [
                    982
                ],
                "self.stream.io_loop.add_timeout": [
                    988
                ],
                "self.stream.io_loop.time": [
                    989
                ],
                "interval": [
                    993,
                    994,
                    995
                ],
                "self.handler.ping_interval": [
                    993
                ],
                "timeout": [
                    1000,
                    1001,
                    1002
                ],
                "self.handler.ping_timeout": [
                    1000
                ],
                "self.ping_interval": [
                    1028,
                    1003,
                    1007,
                    1010,
                    1054
                ],
                "PeriodicCallback": [
                    1009
                ],
                "self.periodic_ping": [
                    1010
                ],
                "self.ping_callback.start": [
                    1011
                ],
                "self.ping_callback.stop": [
                    1019
                ],
                "now": [
                    1025,
                    1026,
                    1027,
                    1034
                ],
                "since_last_pong": [
                    1026,
                    1029
                ],
                "since_last_ping": [
                    1027,
                    1028
                ],
                "self.ping_timeout": [
                    1029,
                    1055
                ],
                "self.write_ping": [
                    1033
                ],
                "simple_httpclient._HTTPConnection": [
                    1037
                ],
                "simple_httpclient": [
                    1037
                ],
                "self.compression_options": [
                    1067,
                    1179,
                    1046
                ],
                "self.connect_future": [
                    1098,
                    1099,
                    1135,
                    1105,
                    1107,
                    1109,
                    1047
                ],
                "TracebackFuture": [
                    1153,
                    1047
                ],
                "self.protocol": [
                    1120,
                    1121,
                    1093,
                    1094,
                    1095,
                    1139,
                    1048,
                    1118,
                    1119
                ],
                "self.read_future": [
                    1152,
                    1157,
                    1165,
                    1166,
                    1167,
                    1049
                ],
                "self.read_queue": [
                    1169,
                    1050,
                    1155,
                    1154
                ],
                "collections.deque": [
                    1050
                ],
                "collections": [
                    1050
                ],
                "self.key": [
                    1064,
                    1051,
                    1119
                ],
                "self._on_message_callback": [
                    1164,
                    1163,
                    1052
                ],
                "on_message_callback": [
                    1232,
                    1052
                ],
                "ping_interval": [
                    1234,
                    1054
                ],
                "ping_timeout": [
                    1235,
                    1055
                ],
                "self.max_message_size": [
                    1056
                ],
                "max_message_size": [
                    1056,
                    1236
                ],
                "scheme": [
                    1058,
                    1059,
                    1060
                ],
                "sep": [
                    1058,
                    1060
                ],
                "rest": [
                    1058,
                    1060
                ],
                "request.url.partition": [
                    1058
                ],
                "request.url": [
                    1058,
                    1060
                ],
                "request.headers.update": [
                    1061
                ],
                "request.headers": [
                    1073,
                    1226,
                    1061
                ],
                "self.tcp_client": [
                    1076,
                    1101,
                    1079
                ],
                "TCPClient": [
                    1076
                ],
                "WebSocketClientConnection": [
                    1114,
                    1077,
                    1102,
                    1231
                ],
                "self._on_http_response": [
                    1078
                ],
                "self.protocol.close": [
                    1094
                ],
                "self.connect_future.done": [
                    1105,
                    1098
                ],
                "self.connect_future.set_exception": [
                    1107,
                    1099,
                    1109
                ],
                "self.on_message": [
                    1100
                ],
                "self.tcp_client.close": [
                    1101
                ],
                "on_connection_close": [
                    1102
                ],
                "response.error": [
                    1106,
                    1107
                ],
                "response": [
                    1106,
                    1107
                ],
                "start_line.code": [
                    1113
                ],
                "start_line": [
                    1113,
                    1115
                ],
                "headers_received": [
                    1114
                ],
                "self.headers": [
                    1117,
                    1119
                ],
                "self.protocol._process_server_headers": [
                    1119
                ],
                "self.protocol.start_pinging": [
                    1120
                ],
                "self.protocol._receive_frame": [
                    1121
                ],
                "self._timeout": [
                    1123,
                    1124,
                    1125
                ],
                "self.io_loop.remove_timeout": [
                    1124
                ],
                "self.io_loop": [
                    1124,
                    1159
                ],
                "self.connection.detach": [
                    1127
                ],
                "self.connection": [
                    1127
                ],
                "self.final_callback": [
                    1133
                ],
                "self.connect_future.set_result": [
                    1135
                ],
                "self.protocol.write_message": [
                    1139
                ],
                "future": [
                    1153,
                    1155,
                    1157,
                    1159,
                    1160
                ],
                "future.set_result": [
                    1155
                ],
                "self.read_queue.popleft": [
                    1155
                ],
                "self.io_loop.add_future": [
                    1159
                ],
                "self.read_future.set_result": [
                    1166
                ],
                "self.read_queue.append": [
                    1169
                ],
                "url": [
                    1228,
                    1221,
                    1223
                ],
                "httpclient.HTTPRequest": [
                    1228,
                    1221,
                    1230
                ],
                "httpclient": [
                    1229,
                    1228,
                    1221,
                    1230
                ],
                "connect_timeout": [
                    1228,
                    1222
                ],
                "httputil.HTTPHeaders": [
                    1226
                ],
                "httpclient._RequestProxy": [
                    1229
                ],
                "httpclient.HTTPRequest._DEFAULTS": [
                    1230
                ],
                "conn": [
                    1239,
                    1238,
                    1231
                ],
                "add_future": [
                    1238
                ],
                "conn.connect_future": [
                    1238,
                    1239
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/tornado_8/tornado/test/websocket_test.py",
                "test_function": "test_missing_websocket_key",
                "test_function_code": "    def test_missing_websocket_key(self):\n        response = self.fetch('/echo',\n                              headers={'Connection': 'Upgrade',\n                                       'Upgrade': 'WebSocket',\n                                       'Sec-WebSocket-Version': '13'})\n        self.assertEqual(response.code, 400)",
                "test_error": "AssertionError: 500 != 400",
                "full_test_error": "self = <tornado.test.websocket_test.WebSocketTest testMethod=test_missing_websocket_key>\n\n    def test_missing_websocket_key(self):\n        response = self.fetch('/echo',\n                              headers={'Connection': 'Upgrade',\n                                       'Upgrade': 'WebSocket',\n                                       'Sec-WebSocket-Version': '13'})\n>       self.assertEqual(response.code, 400)\nE       AssertionError: 500 != 400\n\ntornado/test/websocket_test.py:201: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}