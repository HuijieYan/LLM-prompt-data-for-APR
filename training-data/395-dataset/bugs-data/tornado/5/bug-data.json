{
    "tornado:5": {
        "/Volumes/SSD2T/bgp_envs/repos/tornado_5/tornado/ioloop.py": {
            "buggy_functions": [
                {
                    "function_name": "_update_next",
                    "function_code": "def _update_next(self, current_time):\n    if self._next_timeout <= current_time:\n        callback_time_sec = self.callback_time / 1000.0\n        self._next_timeout += (math.floor((current_time - self._next_timeout) /\n                                          callback_time_sec) + 1) * callback_time_sec\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1219,
                    "end_line": 1223,
                    "variables": {
                        "self._next_timeout": [
                            1220,
                            1222
                        ],
                        "self": [
                            1220,
                            1221,
                            1222
                        ],
                        "current_time": [
                            1220,
                            1222
                        ],
                        "callback_time_sec": [
                            1221,
                            1223
                        ],
                        "self.callback_time": [
                            1221
                        ],
                        "math.floor": [
                            1222
                        ],
                        "math": [
                            1222
                        ]
                    },
                    "filtered_variables": {
                        "self._next_timeout": [
                            1220,
                            1222
                        ],
                        "self": [
                            1220,
                            1221,
                            1222
                        ],
                        "current_time": [
                            1220,
                            1222
                        ],
                        "callback_time_sec": [
                            1221,
                            1223
                        ],
                        "self.callback_time": [
                            1221
                        ],
                        "math.floor": [
                            1222
                        ],
                        "math": [
                            1222
                        ]
                    },
                    "diff_line_number": 1219,
                    "class_data": {
                        "signature": "class PeriodicCallback(object)",
                        "docstring": "Schedules the given callback to be called periodically.\n\nThe callback is called every ``callback_time`` milliseconds.\nNote that the timeout is given in milliseconds, while most other\ntime-related functions in Tornado use seconds.\n\nIf the callback runs for longer than ``callback_time`` milliseconds,\nsubsequent invocations will be skipped to get back on schedule.\n\n`start` must be called after the `PeriodicCallback` is created.\n\n.. versionchanged:: 5.0\n   The ``io_loop`` argument (deprecated since version 4.1) has been removed.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, callback, callback_time):\n    self.callback = callback\n    if callback_time <= 0:\n        raise ValueError('Periodic callback must have a positive callback_time')\n    self.callback_time = callback_time\n    self._running = False\n    self._timeout = None",
                            "def start(self):\n    \"\"\"Starts the timer.\"\"\"\n    self.io_loop = IOLoop.current()\n    self._running = True\n    self._next_timeout = self.io_loop.time()\n    self._schedule_next()",
                            "def stop(self):\n    \"\"\"Stops the timer.\"\"\"\n    self._running = False\n    if self._timeout is not None:\n        self.io_loop.remove_timeout(self._timeout)\n        self._timeout = None",
                            "def is_running(self):\n    \"\"\"Return True if this `.PeriodicCallback` has been started.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    return self._running",
                            "def _run(self):\n    if not self._running:\n        return\n    try:\n        return self.callback()\n    except Exception:\n        self.io_loop.handle_callback_exception(self.callback)\n    finally:\n        self._schedule_next()",
                            "def _schedule_next(self):\n    if self._running:\n        self._update_next(self.io_loop.time())\n        self._timeout = self.io_loop.add_timeout(self._next_timeout, self._run)",
                            "def _update_next(self, current_time):\n    if self._next_timeout <= current_time:\n        callback_time_sec = self.callback_time / 1000.0\n        self._next_timeout += (math.floor((current_time - self._next_timeout) / callback_time_sec) + 1) * callback_time_sec"
                        ],
                        "constructor_variables": [
                            "callback_time",
                            "_running",
                            "_timeout",
                            "callback"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, callback, callback_time)",
                            "start(self)",
                            "stop(self)",
                            "is_running(self)",
                            "_run(self)",
                            "_schedule_next(self)",
                            "_update_next(self, current_time)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self._next_timeout": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1008.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1008.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1009.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1009.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1007.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1007.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1008.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x10e7b1e10>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1008.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1008.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1020.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1008.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1020.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1019.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1030.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1019.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1030.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1027.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1040.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1027.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1040.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1038.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1050.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1038.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1010.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "910.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1020.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "910.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "callback_time_sec": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1020.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1020.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "callback_time_sec": {
                                    "variable_value": "10.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.callback_time": {
                                    "variable_value": "10000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<tornado.ioloop.PeriodicCallback object at 0x101f6a790>",
                                    "variable_type": "PeriodicCallback",
                                    "variable_shape": null
                                },
                                "self._next_timeout": {
                                    "variable_value": "1030.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "current_time": {
                                    "variable_value": "1020.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "math.floor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "math": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@classmethod\ndef configure(cls, impl, **kwargs):\n    if asyncio is not None:\n        from tornado.platform.asyncio import BaseAsyncIOLoop\n\n        if isinstance(impl, (str, unicode_type)):\n            impl = import_object(impl)\n        if not issubclass(impl, BaseAsyncIOLoop):\n            raise RuntimeError(\n                \"only AsyncIOLoop is allowed when asyncio is available\")\n    super(IOLoop, cls).configure(impl, **kwargs)",
                "@staticmethod\ndef instance():\n    \"\"\"Deprecated alias for `IOLoop.current()`.\n\n    .. versionchanged:: 5.0\n\n       Previously, this method returned a global singleton\n       `IOLoop`, in contrast with the per-thread `IOLoop` returned\n       by `current()`. In nearly all cases the two were the same\n       (when they differed, it was generally used from non-Tornado\n       threads to communicate back to the main thread's `IOLoop`).\n       This distinction is not present in `asyncio`, so in order\n       to facilitate integration with that package `instance()`\n       was changed to be an alias to `current()`. Applications\n       using the cross-thread communications aspect of\n       `instance()` should instead set their own global variable\n       to point to the `IOLoop` they want to use.\n\n    .. deprecated:: 5.0\n    \"\"\"\n    return IOLoop.current()",
                "def install(self):\n    \"\"\"Deprecated alias for `make_current()`.\n\n    .. versionchanged:: 5.0\n\n       Previously, this method would set this `IOLoop` as the\n       global singleton used by `IOLoop.instance()`. Now that\n       `instance()` is an alias for `current()`, `install()`\n       is an alias for `make_current()`.\n\n    .. deprecated:: 5.0\n    \"\"\"\n    self.make_current()",
                "@staticmethod\ndef clear_instance():\n    \"\"\"Deprecated alias for `clear_current()`.\n\n    .. versionchanged:: 5.0\n\n       Previously, this method would clear the `IOLoop` used as\n       the global singleton by `IOLoop.instance()`. Now that\n       `instance()` is an alias for `current()`,\n       `clear_instance()` is an alias for `clear_current()`.\n\n    .. deprecated:: 5.0\n\n    \"\"\"\n    IOLoop.clear_current()",
                "@staticmethod\ndef current(instance=True):\n    \"\"\"Returns the current thread's `IOLoop`.\n\n    If an `IOLoop` is currently running or has been marked as\n    current by `make_current`, returns that instance.  If there is\n    no current `IOLoop` and ``instance`` is true, creates one.\n\n    .. versionchanged:: 4.1\n       Added ``instance`` argument to control the fallback to\n       `IOLoop.instance()`.\n    .. versionchanged:: 5.0\n       On Python 3, control of the current `IOLoop` is delegated\n       to `asyncio`, with this and other methods as pass-through accessors.\n       The ``instance`` argument now controls whether an `IOLoop`\n       is created automatically when there is none, instead of\n       whether we fall back to `IOLoop.instance()` (which is now\n       an alias for this method). ``instance=False`` is deprecated,\n       since even if we do not create an `IOLoop`, this method\n       may initialize the asyncio loop.\n    \"\"\"\n    if asyncio is None:\n        current = getattr(IOLoop._current, \"instance\", None)\n        if current is None and instance:\n            current = IOLoop()\n            if IOLoop._current.instance is not current:\n                raise RuntimeError(\"new IOLoop did not become current\")\n    else:\n        try:\n            loop = asyncio.get_event_loop()\n        except (RuntimeError, AssertionError):\n            if not instance:\n                return None\n            raise\n        try:\n            return IOLoop._ioloop_for_asyncio[loop]\n        except KeyError:\n            if instance:\n                from tornado.platform.asyncio import AsyncIOMainLoop\n                current = AsyncIOMainLoop(make_current=True)\n            else:\n                current = None\n    return current",
                "def make_current(self):\n    \"\"\"Makes this the `IOLoop` for the current thread.\n\n    An `IOLoop` automatically becomes current for its thread\n    when it is started, but it is sometimes useful to call\n    `make_current` explicitly before starting the `IOLoop`,\n    so that code run at startup time can find the right\n    instance.\n\n    .. versionchanged:: 4.1\n       An `IOLoop` created while there is no current `IOLoop`\n       will automatically become current.\n\n    .. versionchanged:: 5.0\n       This method also sets the current `asyncio` event loop.\n    \"\"\"\n    # The asyncio event loops override this method.\n    assert asyncio is None\n    old = getattr(IOLoop._current, \"instance\", None)\n    if old is not None:\n        old.clear_current()\n    IOLoop._current.instance = self",
                "@staticmethod\ndef clear_current():\n    \"\"\"Clears the `IOLoop` for the current thread.\n\n    Intended primarily for use by test frameworks in between tests.\n\n    .. versionchanged:: 5.0\n       This method also clears the current `asyncio` event loop.\n    \"\"\"\n    old = IOLoop.current(instance=False)\n    if old is not None:\n        old._clear_current_hook()\n    if asyncio is None:\n        IOLoop._current.instance = None",
                "def _clear_current_hook(self):\n    \"\"\"Instance method called when an IOLoop ceases to be current.\n\n    May be overridden by subclasses as a counterpart to make_current.\n    \"\"\"\n    pass",
                "@classmethod\ndef configurable_base(cls):\n    return IOLoop",
                "@classmethod\ndef configurable_default(cls):\n    if asyncio is not None:\n        from tornado.platform.asyncio import AsyncIOLoop\n        return AsyncIOLoop\n    return PollIOLoop",
                "def initialize(self, make_current=None):\n    if make_current is None:\n        if IOLoop.current(instance=False) is None:\n            self.make_current()\n    elif make_current:\n        current = IOLoop.current(instance=False)\n        # AsyncIO loops can already be current by this point.\n        if current is not None and current is not self:\n            raise RuntimeError(\"current IOLoop already exists\")\n        self.make_current()",
                "def close(self, all_fds=False):\n    \"\"\"Closes the `IOLoop`, freeing any resources used.\n\n    If ``all_fds`` is true, all file descriptors registered on the\n    IOLoop will be closed (not just the ones created by the\n    `IOLoop` itself).\n\n    Many applications will only use a single `IOLoop` that runs for the\n    entire lifetime of the process.  In that case closing the `IOLoop`\n    is not necessary since everything will be cleaned up when the\n    process exits.  `IOLoop.close` is provided mainly for scenarios\n    such as unit tests, which create and destroy a large number of\n    ``IOLoops``.\n\n    An `IOLoop` must be completely stopped before it can be closed.  This\n    means that `IOLoop.stop()` must be called *and* `IOLoop.start()` must\n    be allowed to return before attempting to call `IOLoop.close()`.\n    Therefore the call to `close` will usually appear just after\n    the call to `start` rather than near the call to `stop`.\n\n    .. versionchanged:: 3.1\n       If the `IOLoop` implementation supports non-integer objects\n       for \"file descriptors\", those objects will have their\n       ``close`` method when ``all_fds`` is true.\n    \"\"\"\n    raise NotImplementedError()",
                "def add_handler(self, fd, handler, events):\n    \"\"\"Registers the given handler to receive the given events for ``fd``.\n\n    The ``fd`` argument may either be an integer file descriptor or\n    a file-like object with a ``fileno()`` method (and optionally a\n    ``close()`` method, which may be called when the `IOLoop` is shut\n    down).\n\n    The ``events`` argument is a bitwise or of the constants\n    ``IOLoop.READ``, ``IOLoop.WRITE``, and ``IOLoop.ERROR``.\n\n    When an event occurs, ``handler(fd, events)`` will be run.\n\n    .. versionchanged:: 4.0\n       Added the ability to pass file-like objects in addition to\n       raw file descriptors.\n    \"\"\"\n    raise NotImplementedError()",
                "def update_handler(self, fd, events):\n    \"\"\"Changes the events we listen for ``fd``.\n\n    .. versionchanged:: 4.0\n       Added the ability to pass file-like objects in addition to\n       raw file descriptors.\n    \"\"\"\n    raise NotImplementedError()",
                "def remove_handler(self, fd):\n    \"\"\"Stop listening for events on ``fd``.\n\n    .. versionchanged:: 4.0\n       Added the ability to pass file-like objects in addition to\n       raw file descriptors.\n    \"\"\"\n    raise NotImplementedError()",
                "def set_blocking_signal_threshold(self, seconds, action):\n    \"\"\"Sends a signal if the `IOLoop` is blocked for more than\n    ``s`` seconds.\n\n    Pass ``seconds=None`` to disable.  Requires Python 2.6 on a unixy\n    platform.\n\n    The action parameter is a Python signal handler.  Read the\n    documentation for the `signal` module for more information.\n    If ``action`` is None, the process will be killed if it is\n    blocked for too long.\n\n    .. deprecated:: 5.0\n\n       Not implemented on the `asyncio` event loop. Use the environment\n       variable ``PYTHONASYNCIODEBUG=1`` instead.\n    \"\"\"\n    raise NotImplementedError()",
                "def set_blocking_log_threshold(self, seconds):\n    \"\"\"Logs a stack trace if the `IOLoop` is blocked for more than\n    ``s`` seconds.\n\n    Equivalent to ``set_blocking_signal_threshold(seconds,\n    self.log_stack)``\n\n    .. deprecated:: 5.0\n\n       Not implemented on the `asyncio` event loop. Use the environment\n       variable ``PYTHONASYNCIODEBUG=1`` instead.\n    \"\"\"\n    self.set_blocking_signal_threshold(seconds, self.log_stack)",
                "def log_stack(self, signal, frame):\n    \"\"\"Signal handler to log the stack trace of the current thread.\n\n    For use with `set_blocking_signal_threshold`.\n    \"\"\"\n    gen_log.warning('IOLoop blocked for %f seconds in\\n%s',\n                    self._blocking_signal_threshold,\n                    ''.join(traceback.format_stack(frame)))",
                "def start(self):\n    \"\"\"Starts the I/O loop.\n\n    The loop will run until one of the callbacks calls `stop()`, which\n    will make the loop stop after the current event iteration completes.\n    \"\"\"\n    raise NotImplementedError()",
                "def _setup_logging(self):\n    \"\"\"The IOLoop catches and logs exceptions, so it's\n    important that log output be visible.  However, python's\n    default behavior for non-root loggers (prior to python\n    3.2) is to print an unhelpful \"no handlers could be\n    found\" message rather than the actual log entry, so we\n    must explicitly configure logging if we've made it this\n    far without anything.\n\n    This method should be called from start() in subclasses.\n    \"\"\"\n    if not any([logging.getLogger().handlers,\n                logging.getLogger('tornado').handlers,\n                logging.getLogger('tornado.application').handlers]):\n        logging.basicConfig()",
                "def stop(self):\n    \"\"\"Stop the I/O loop.\n\n    If the event loop is not currently running, the next call to `start()`\n    will return immediately.\n\n    To use asynchronous methods from otherwise-synchronous code (such as\n    unit tests), you can start and stop the event loop like this::\n\n      ioloop = IOLoop()\n      async_method(ioloop=ioloop, callback=ioloop.stop)\n      ioloop.start()\n\n    ``ioloop.start()`` will return after ``async_method`` has run\n    its callback, whether that callback was invoked before or\n    after ``ioloop.start``.\n\n    Note that even after `stop` has been called, the `IOLoop` is not\n    completely stopped until `IOLoop.start` has also returned.\n    Some work that was scheduled before the call to `stop` may still\n    be run before the `IOLoop` shuts down.\n    \"\"\"\n    raise NotImplementedError()",
                "def run_sync(self, func, timeout=None):\n    \"\"\"Starts the `IOLoop`, runs the given function, and stops the loop.\n\n    The function must return either a yieldable object or\n    ``None``. If the function returns a yieldable object, the\n    `IOLoop` will run until the yieldable is resolved (and\n    `run_sync()` will return the yieldable's result). If it raises\n    an exception, the `IOLoop` will stop and the exception will be\n    re-raised to the caller.\n\n    The keyword-only argument ``timeout`` may be used to set\n    a maximum duration for the function.  If the timeout expires,\n    a `tornado.util.TimeoutError` is raised.\n\n    This method is useful in conjunction with `tornado.gen.coroutine`\n    to allow asynchronous calls in a ``main()`` function::\n\n        @gen.coroutine\n        def main():\n            # do stuff...\n\n        if __name__ == '__main__':\n            IOLoop.current().run_sync(main)\n\n    .. versionchanged:: 4.3\n       Returning a non-``None``, non-yieldable value is now an error.\n\n    .. versionchanged:: 5.0\n       If a timeout occurs, the ``func`` coroutine will be cancelled.\n    \"\"\"\n    future_cell = [None]\n\n    def run():\n        try:\n            result = func()\n            if result is not None:\n                from tornado.gen import convert_yielded\n                result = convert_yielded(result)\n        except Exception:\n            future_cell[0] = Future()\n            future_set_exc_info(future_cell[0], sys.exc_info())\n        else:\n            if is_future(result):\n                future_cell[0] = result\n            else:\n                future_cell[0] = Future()\n                future_cell[0].set_result(result)\n        self.add_future(future_cell[0], lambda future: self.stop())\n    self.add_callback(run)\n    if timeout is not None:\n        def timeout_callback():\n            # If we can cancel the future, do so and wait on it. If not,\n            # Just stop the loop and return with the task still pending.\n            # (If we neither cancel nor wait for the task, a warning\n            # will be logged).\n            if not future_cell[0].cancel():\n                self.stop()\n        timeout_handle = self.add_timeout(self.time() + timeout, timeout_callback)\n    self.start()\n    if timeout is not None:\n        self.remove_timeout(timeout_handle)\n    if future_cell[0].cancelled() or not future_cell[0].done():\n        raise TimeoutError('Operation timed out after %s seconds' % timeout)\n    return future_cell[0].result()",
                "def time(self):\n    \"\"\"Returns the current time according to the `IOLoop`'s clock.\n\n    The return value is a floating-point number relative to an\n    unspecified time in the past.\n\n    By default, the `IOLoop`'s time function is `time.time`.  However,\n    it may be configured to use e.g. `time.monotonic` instead.\n    Calls to `add_timeout` that pass a number instead of a\n    `datetime.timedelta` should use this function to compute the\n    appropriate time, so they can work no matter what time function\n    is chosen.\n    \"\"\"\n    return time.time()",
                "def add_timeout(self, deadline, callback, *args, **kwargs):\n    \"\"\"Runs the ``callback`` at the time ``deadline`` from the I/O loop.\n\n    Returns an opaque handle that may be passed to\n    `remove_timeout` to cancel.\n\n    ``deadline`` may be a number denoting a time (on the same\n    scale as `IOLoop.time`, normally `time.time`), or a\n    `datetime.timedelta` object for a deadline relative to the\n    current time.  Since Tornado 4.0, `call_later` is a more\n    convenient alternative for the relative case since it does not\n    require a timedelta object.\n\n    Note that it is not safe to call `add_timeout` from other threads.\n    Instead, you must use `add_callback` to transfer control to the\n    `IOLoop`'s thread, and then call `add_timeout` from there.\n\n    Subclasses of IOLoop must implement either `add_timeout` or\n    `call_at`; the default implementations of each will call\n    the other.  `call_at` is usually easier to implement, but\n    subclasses that wish to maintain compatibility with Tornado\n    versions prior to 4.0 must use `add_timeout` instead.\n\n    .. versionchanged:: 4.0\n       Now passes through ``*args`` and ``**kwargs`` to the callback.\n    \"\"\"\n    if isinstance(deadline, numbers.Real):\n        return self.call_at(deadline, callback, *args, **kwargs)\n    elif isinstance(deadline, datetime.timedelta):\n        return self.call_at(self.time() + timedelta_to_seconds(deadline),\n                            callback, *args, **kwargs)\n    else:\n        raise TypeError(\"Unsupported deadline %r\" % deadline)",
                "def call_later(self, delay, callback, *args, **kwargs):\n    \"\"\"Runs the ``callback`` after ``delay`` seconds have passed.\n\n    Returns an opaque handle that may be passed to `remove_timeout`\n    to cancel.  Note that unlike the `asyncio` method of the same\n    name, the returned object does not have a ``cancel()`` method.\n\n    See `add_timeout` for comments on thread-safety and subclassing.\n\n    .. versionadded:: 4.0\n    \"\"\"\n    return self.call_at(self.time() + delay, callback, *args, **kwargs)",
                "def call_at(self, when, callback, *args, **kwargs):\n    \"\"\"Runs the ``callback`` at the absolute time designated by ``when``.\n\n    ``when`` must be a number using the same reference point as\n    `IOLoop.time`.\n\n    Returns an opaque handle that may be passed to `remove_timeout`\n    to cancel.  Note that unlike the `asyncio` method of the same\n    name, the returned object does not have a ``cancel()`` method.\n\n    See `add_timeout` for comments on thread-safety and subclassing.\n\n    .. versionadded:: 4.0\n    \"\"\"\n    return self.add_timeout(when, callback, *args, **kwargs)",
                "def remove_timeout(self, timeout):\n    \"\"\"Cancels a pending timeout.\n\n    The argument is a handle as returned by `add_timeout`.  It is\n    safe to call `remove_timeout` even if the callback has already\n    been run.\n    \"\"\"\n    raise NotImplementedError()",
                "def add_callback(self, callback, *args, **kwargs):\n    \"\"\"Calls the given callback on the next I/O loop iteration.\n\n    It is safe to call this method from any thread at any time,\n    except from a signal handler.  Note that this is the **only**\n    method in `IOLoop` that makes this thread-safety guarantee; all\n    other interaction with the `IOLoop` must be done from that\n    `IOLoop`'s thread.  `add_callback()` may be used to transfer\n    control from other threads to the `IOLoop`'s thread.\n\n    To add a callback from a signal handler, see\n    `add_callback_from_signal`.\n    \"\"\"\n    raise NotImplementedError()",
                "def add_callback_from_signal(self, callback, *args, **kwargs):\n    \"\"\"Calls the given callback on the next I/O loop iteration.\n\n    Safe for use from a Python signal handler; should not be used\n    otherwise.\n\n    Callbacks added with this method will be run without any\n    `.stack_context`, to avoid picking up the context of the function\n    that was interrupted by the signal.\n    \"\"\"\n    raise NotImplementedError()",
                "def spawn_callback(self, callback, *args, **kwargs):\n    \"\"\"Calls the given callback on the next IOLoop iteration.\n\n    Unlike all other callback-related methods on IOLoop,\n    ``spawn_callback`` does not associate the callback with its caller's\n    ``stack_context``, so it is suitable for fire-and-forget callbacks\n    that should not interfere with the caller.\n\n    .. versionadded:: 4.0\n    \"\"\"\n    with stack_context.NullContext():\n        self.add_callback(callback, *args, **kwargs)",
                "def add_future(self, future, callback):\n    \"\"\"Schedules a callback on the ``IOLoop`` when the given\n    `.Future` is finished.\n\n    The callback is invoked with one argument, the\n    `.Future`.\n    \"\"\"\n    assert is_future(future)\n    callback = stack_context.wrap(callback)\n    future_add_done_callback(\n        future, lambda future: self.add_callback(callback, future))",
                "def run_in_executor(self, executor, func, *args):\n    \"\"\"Runs a function in a ``concurrent.futures.Executor``. If\n    ``executor`` is ``None``, the IO loop's default executor will be used.\n\n    Use `functools.partial` to pass keyword arguments to ``func``.\n\n    .. versionadded:: 5.0\n    \"\"\"\n    if ThreadPoolExecutor is None:\n        raise RuntimeError(\n            \"concurrent.futures is required to use IOLoop.run_in_executor\")\n\n    if executor is None:\n        if not hasattr(self, '_executor'):\n            from tornado.process import cpu_count\n            self._executor = ThreadPoolExecutor(max_workers=(cpu_count() * 5))\n        executor = self._executor\n    c_future = executor.submit(func, *args)\n    # Concurrent Futures are not usable with await. Wrap this in a\n    # Tornado Future instead, using self.add_future for thread-safety.\n    t_future = Future()\n    self.add_future(c_future, lambda f: chain_future(f, t_future))\n    return t_future",
                "def set_default_executor(self, executor):\n    \"\"\"Sets the default executor to use with :meth:`run_in_executor`.\n\n    .. versionadded:: 5.0\n    \"\"\"\n    self._executor = executor",
                "def _run_callback(self, callback):\n    \"\"\"Runs a callback with error handling.\n\n    For use in subclasses.\n    \"\"\"\n    try:\n        ret = callback()\n        if ret is not None:\n            from tornado import gen\n            # Functions that return Futures typically swallow all\n            # exceptions and store them in the Future.  If a Future\n            # makes it out to the IOLoop, ensure its exception (if any)\n            # gets logged too.\n            try:\n                ret = gen.convert_yielded(ret)\n            except gen.BadYieldError:\n                # It's not unusual for add_callback to be used with\n                # methods returning a non-None and non-yieldable\n                # result, which should just be ignored.\n                pass\n            else:\n                self.add_future(ret, self._discard_future_result)\n    except Exception:\n        self.handle_callback_exception(callback)",
                "def _discard_future_result(self, future):\n    \"\"\"Avoid unhandled-exception warnings from spawned coroutines.\"\"\"\n    future.result()",
                "def handle_callback_exception(self, callback):\n    \"\"\"This method is called whenever a callback run by the `IOLoop`\n    throws an exception.\n\n    By default simply logs the exception as an error.  Subclasses\n    may override this method to customize reporting of exceptions.\n\n    The exception itself is not passed explicitly, but is available\n    in `sys.exc_info`.\n    \"\"\"\n    app_log.error(\"Exception in callback %r\", callback, exc_info=True)",
                "def split_fd(self, fd):\n    \"\"\"Returns an (fd, obj) pair from an ``fd`` parameter.\n\n    We accept both raw file descriptors and file-like objects as\n    input to `add_handler` and related methods.  When a file-like\n    object is passed, we must retain the object itself so we can\n    close it correctly when the `IOLoop` shuts down, but the\n    poller interfaces favor file descriptors (they will accept\n    file-like objects and call ``fileno()`` for you, but they\n    always return the descriptor itself).\n\n    This method is provided for use by `IOLoop` subclasses and should\n    not generally be used by application code.\n\n    .. versionadded:: 4.0\n    \"\"\"\n    try:\n        return fd.fileno(), fd\n    except AttributeError:\n        return fd, fd",
                "def close_fd(self, fd):\n    \"\"\"Utility method to close an ``fd``.\n\n    If ``fd`` is a file-like object, we close it directly; otherwise\n    we use `os.close`.\n\n    This method is provided for use by `IOLoop` subclasses (in\n    implementations of ``IOLoop.close(all_fds=True)`` and should\n    not generally be used by application code.\n\n    .. versionadded:: 4.0\n    \"\"\"\n    try:\n        try:\n            fd.close()\n        except AttributeError:\n            os.close(fd)\n    except OSError:\n        pass",
                "def initialize(self, impl, time_func=None, **kwargs):\n    super(PollIOLoop, self).initialize(**kwargs)\n    self._impl = impl\n    if hasattr(self._impl, 'fileno'):\n        set_close_exec(self._impl.fileno())\n    self.time_func = time_func or time.time\n    self._handlers = {}\n    self._events = {}\n    self._callbacks = collections.deque()\n    self._timeouts = []\n    self._cancellations = 0\n    self._running = False\n    self._stopped = False\n    self._closing = False\n    self._thread_ident = None\n    self._pid = os.getpid()\n    self._blocking_signal_threshold = None\n    self._timeout_counter = itertools.count()\n\n    # Create a pipe that we send bogus data to when we want to wake\n    # the I/O loop when it is idle\n    self._waker = Waker()\n    self.add_handler(self._waker.fileno(),\n                     lambda fd, events: self._waker.consume(),\n                     self.READ)",
                "@classmethod\ndef configurable_base(cls):\n    return PollIOLoop",
                "@classmethod\ndef configurable_default(cls):\n    if hasattr(select, \"epoll\"):\n        from tornado.platform.epoll import EPollIOLoop\n        return EPollIOLoop\n    if hasattr(select, \"kqueue\"):\n        # Python 2.6+ on BSD or Mac\n        from tornado.platform.kqueue import KQueueIOLoop\n        return KQueueIOLoop\n    from tornado.platform.select import SelectIOLoop\n    return SelectIOLoop",
                "def close(self, all_fds=False):\n    self._closing = True\n    self.remove_handler(self._waker.fileno())\n    if all_fds:\n        for fd, handler in list(self._handlers.values()):\n            self.close_fd(fd)\n    self._waker.close()\n    self._impl.close()\n    self._callbacks = None\n    self._timeouts = None\n    if hasattr(self, '_executor'):\n        self._executor.shutdown()",
                "def add_handler(self, fd, handler, events):\n    fd, obj = self.split_fd(fd)\n    self._handlers[fd] = (obj, stack_context.wrap(handler))\n    self._impl.register(fd, events | self.ERROR)",
                "def update_handler(self, fd, events):\n    fd, obj = self.split_fd(fd)\n    self._impl.modify(fd, events | self.ERROR)",
                "def remove_handler(self, fd):\n    fd, obj = self.split_fd(fd)\n    self._handlers.pop(fd, None)\n    self._events.pop(fd, None)\n    try:\n        self._impl.unregister(fd)\n    except Exception:\n        gen_log.debug(\"Error deleting fd from IOLoop\", exc_info=True)",
                "def set_blocking_signal_threshold(self, seconds, action):\n    if not hasattr(signal, \"setitimer\"):\n        gen_log.error(\"set_blocking_signal_threshold requires a signal module \"\n                      \"with the setitimer method\")\n        return\n    self._blocking_signal_threshold = seconds\n    if seconds is not None:\n        signal.signal(signal.SIGALRM,\n                      action if action is not None else signal.SIG_DFL)",
                "def start(self):\n    if self._running:\n        raise RuntimeError(\"IOLoop is already running\")\n    if os.getpid() != self._pid:\n        raise RuntimeError(\"Cannot share PollIOLoops across processes\")\n    self._setup_logging()\n    if self._stopped:\n        self._stopped = False\n        return\n    old_current = IOLoop.current(instance=False)\n    if old_current is not self:\n        self.make_current()\n    self._thread_ident = thread.get_ident()\n    self._running = True\n\n    # signal.set_wakeup_fd closes a race condition in event loops:\n    # a signal may arrive at the beginning of select/poll/etc\n    # before it goes into its interruptible sleep, so the signal\n    # will be consumed without waking the select.  The solution is\n    # for the (C, synchronous) signal handler to write to a pipe,\n    # which will then be seen by select.\n    #\n    # In python's signal handling semantics, this only matters on the\n    # main thread (fortunately, set_wakeup_fd only works on the main\n    # thread and will raise a ValueError otherwise).\n    #\n    # If someone has already set a wakeup fd, we don't want to\n    # disturb it.  This is an issue for twisted, which does its\n    # SIGCHLD processing in response to its own wakeup fd being\n    # written to.  As long as the wakeup fd is registered on the IOLoop,\n    # the loop will still wake up and everything should work.\n    old_wakeup_fd = None\n    if hasattr(signal, 'set_wakeup_fd') and os.name == 'posix':\n        # requires python 2.6+, unix.  set_wakeup_fd exists but crashes\n        # the python process on windows.\n        try:\n            old_wakeup_fd = signal.set_wakeup_fd(self._waker.write_fileno())\n            if old_wakeup_fd != -1:\n                # Already set, restore previous value.  This is a little racy,\n                # but there's no clean get_wakeup_fd and in real use the\n                # IOLoop is just started once at the beginning.\n                signal.set_wakeup_fd(old_wakeup_fd)\n                old_wakeup_fd = None\n        except ValueError:\n            # Non-main thread, or the previous value of wakeup_fd\n            # is no longer valid.\n            old_wakeup_fd = None\n\n    try:\n        while True:\n            # Prevent IO event starvation by delaying new callbacks\n            # to the next iteration of the event loop.\n            ncallbacks = len(self._callbacks)\n\n            # Add any timeouts that have come due to the callback list.\n            # Do not run anything until we have determined which ones\n            # are ready, so timeouts that call add_timeout cannot\n            # schedule anything in this iteration.\n            due_timeouts = []\n            if self._timeouts:\n                now = self.time()\n                while self._timeouts:\n                    if self._timeouts[0].callback is None:\n                        # The timeout was cancelled.  Note that the\n                        # cancellation check is repeated below for timeouts\n                        # that are cancelled by another timeout or callback.\n                        heapq.heappop(self._timeouts)\n                        self._cancellations -= 1\n                    elif self._timeouts[0].deadline <= now:\n                        due_timeouts.append(heapq.heappop(self._timeouts))\n                    else:\n                        break\n                if (self._cancellations > 512 and\n                        self._cancellations > (len(self._timeouts) >> 1)):\n                    # Clean up the timeout queue when it gets large and it's\n                    # more than half cancellations.\n                    self._cancellations = 0\n                    self._timeouts = [x for x in self._timeouts\n                                      if x.callback is not None]\n                    heapq.heapify(self._timeouts)\n\n            for i in range(ncallbacks):\n                self._run_callback(self._callbacks.popleft())\n            for timeout in due_timeouts:\n                if timeout.callback is not None:\n                    self._run_callback(timeout.callback)\n            # Closures may be holding on to a lot of memory, so allow\n            # them to be freed before we go into our poll wait.\n            due_timeouts = timeout = None\n\n            if self._callbacks:\n                # If any callbacks or timeouts called add_callback,\n                # we don't want to wait in poll() before we run them.\n                poll_timeout = 0.0\n            elif self._timeouts:\n                # If there are any timeouts, schedule the first one.\n                # Use self.time() instead of 'now' to account for time\n                # spent running callbacks.\n                poll_timeout = self._timeouts[0].deadline - self.time()\n                poll_timeout = max(0, min(poll_timeout, _POLL_TIMEOUT))\n            else:\n                # No timeouts and no callbacks, so use the default.\n                poll_timeout = _POLL_TIMEOUT\n\n            if not self._running:\n                break\n\n            if self._blocking_signal_threshold is not None:\n                # clear alarm so it doesn't fire while poll is waiting for\n                # events.\n                signal.setitimer(signal.ITIMER_REAL, 0, 0)\n\n            try:\n                event_pairs = self._impl.poll(poll_timeout)\n            except Exception as e:\n                # Depending on python version and IOLoop implementation,\n                # different exception types may be thrown and there are\n                # two ways EINTR might be signaled:\n                # * e.errno == errno.EINTR\n                # * e.args is like (errno.EINTR, 'Interrupted system call')\n                if errno_from_exception(e) == errno.EINTR:\n                    continue\n                else:\n                    raise\n\n            if self._blocking_signal_threshold is not None:\n                signal.setitimer(signal.ITIMER_REAL,\n                                 self._blocking_signal_threshold, 0)\n\n            # Pop one fd at a time from the set of pending fds and run\n            # its handler. Since that handler may perform actions on\n            # other file descriptors, there may be reentrant calls to\n            # this IOLoop that modify self._events\n            self._events.update(event_pairs)\n            while self._events:\n                fd, events = self._events.popitem()\n                try:\n                    fd_obj, handler_func = self._handlers[fd]\n                    handler_func(fd_obj, events)\n                except (OSError, IOError) as e:\n                    if errno_from_exception(e) == errno.EPIPE:\n                        # Happens when the client closes the connection\n                        pass\n                    else:\n                        self.handle_callback_exception(self._handlers.get(fd))\n                except Exception:\n                    self.handle_callback_exception(self._handlers.get(fd))\n            fd_obj = handler_func = None\n\n    finally:\n        # reset the stopped flag so another start/stop pair can be issued\n        self._stopped = False\n        if self._blocking_signal_threshold is not None:\n            signal.setitimer(signal.ITIMER_REAL, 0, 0)\n        if old_current is None:\n            IOLoop.clear_current()\n        elif old_current is not self:\n            old_current.make_current()\n        if old_wakeup_fd is not None:\n            signal.set_wakeup_fd(old_wakeup_fd)",
                "def stop(self):\n    self._running = False\n    self._stopped = True\n    self._waker.wake()",
                "def time(self):\n    return self.time_func()",
                "def call_at(self, deadline, callback, *args, **kwargs):\n    timeout = _Timeout(\n        deadline,\n        functools.partial(stack_context.wrap(callback), *args, **kwargs),\n        self)\n    heapq.heappush(self._timeouts, timeout)\n    return timeout",
                "def remove_timeout(self, timeout):\n    # Removing from a heap is complicated, so just leave the defunct\n    # timeout object in the queue (see discussion in\n    # http://docs.python.org/library/heapq.html).\n    # If this turns out to be a problem, we could add a garbage\n    # collection pass whenever there are too many dead timeouts.\n    timeout.callback = None\n    self._cancellations += 1",
                "def add_callback(self, callback, *args, **kwargs):\n    if self._closing:\n        return\n    # Blindly insert into self._callbacks. This is safe even\n    # from signal handlers because deque.append is atomic.\n    self._callbacks.append(functools.partial(\n        stack_context.wrap(callback), *args, **kwargs))\n    if thread.get_ident() != self._thread_ident:\n        # This will write one byte but Waker.consume() reads many\n        # at once, so it's ok to write even when not strictly\n        # necessary.\n        self._waker.wake()\n    else:\n        # If we're on the IOLoop's thread, we don't need to wake anyone.\n        pass",
                "def add_callback_from_signal(self, callback, *args, **kwargs):\n    with stack_context.NullContext():\n        self.add_callback(callback, *args, **kwargs)",
                "def __init__(self, deadline, callback, io_loop):\n    if not isinstance(deadline, numbers.Real):\n        raise TypeError(\"Unsupported deadline %r\" % deadline)\n    self.deadline = deadline\n    self.callback = callback\n    self.tdeadline = (deadline, next(io_loop._timeout_counter))",
                "def __lt__(self, other):\n    return self.tdeadline < other.tdeadline",
                "def __le__(self, other):\n    return self.tdeadline <= other.tdeadline",
                "def __init__(self, callback, callback_time):\n    self.callback = callback\n    if callback_time <= 0:\n        raise ValueError(\"Periodic callback must have a positive callback_time\")\n    self.callback_time = callback_time\n    self._running = False\n    self._timeout = None",
                "def start(self):\n    \"\"\"Starts the timer.\"\"\"\n    # Looking up the IOLoop here allows to first instantiate the\n    # PeriodicCallback in another thread, then start it using\n    # IOLoop.add_callback().\n    self.io_loop = IOLoop.current()\n    self._running = True\n    self._next_timeout = self.io_loop.time()\n    self._schedule_next()",
                "def stop(self):\n    \"\"\"Stops the timer.\"\"\"\n    self._running = False\n    if self._timeout is not None:\n        self.io_loop.remove_timeout(self._timeout)\n        self._timeout = None",
                "def is_running(self):\n    \"\"\"Return True if this `.PeriodicCallback` has been started.\n\n    .. versionadded:: 4.1\n    \"\"\"\n    return self._running",
                "def _run(self):\n    if not self._running:\n        return\n    try:\n        return self.callback()\n    except Exception:\n        self.io_loop.handle_callback_exception(self.callback)\n    finally:\n        self._schedule_next()",
                "def _schedule_next(self):\n    if self._running:\n        self._update_next(self.io_loop.time())\n        self._timeout = self.io_loop.add_timeout(self._next_timeout, self._run)",
                "def _update_next(self, current_time):\n    if self._next_timeout <= current_time:\n        callback_time_sec = self.callback_time / 1000.0\n        self._next_timeout += (math.floor((current_time - self._next_timeout) /\n                                          callback_time_sec) + 1) * callback_time_sec",
                "def run():\n    try:\n        result = func()\n        if result is not None:\n            from tornado.gen import convert_yielded\n            result = convert_yielded(result)\n    except Exception:\n        future_cell[0] = Future()\n        future_set_exc_info(future_cell[0], sys.exc_info())\n    else:\n        if is_future(result):\n            future_cell[0] = result\n        else:\n            future_cell[0] = Future()\n            future_cell[0].set_result(result)\n    self.add_future(future_cell[0], lambda future: self.stop())",
                "def timeout_callback():\n    # If we can cancel the future, do so and wait on it. If not,\n    # Just stop the loop and return with the task still pending.\n    # (If we neither cancel nor wait for the task, a warning\n    # will be logged).\n    if not future_cell[0].cancel():\n        self.stop()"
            ],
            "inscope_function_signatures": [
                "configure(cls, impl, **kwargs)",
                "instance()",
                "install(self)",
                "clear_instance()",
                "current(instance=True)",
                "make_current(self)",
                "clear_current()",
                "_clear_current_hook(self)",
                "configurable_base(cls)",
                "configurable_default(cls)",
                "initialize(self, make_current=None)",
                "close(self, all_fds=False)",
                "add_handler(self, fd, handler, events)",
                "update_handler(self, fd, events)",
                "remove_handler(self, fd)",
                "set_blocking_signal_threshold(self, seconds, action)",
                "set_blocking_log_threshold(self, seconds)",
                "log_stack(self, signal, frame)",
                "start(self)",
                "_setup_logging(self)",
                "stop(self)",
                "run_sync(self, func, timeout=None)",
                "time(self)",
                "add_timeout(self, deadline, callback, *args, **kwargs)",
                "call_later(self, delay, callback, *args, **kwargs)",
                "call_at(self, when, callback, *args, **kwargs)",
                "remove_timeout(self, timeout)",
                "add_callback(self, callback, *args, **kwargs)",
                "add_callback_from_signal(self, callback, *args, **kwargs)",
                "spawn_callback(self, callback, *args, **kwargs)",
                "add_future(self, future, callback)",
                "run_in_executor(self, executor, func, *args)",
                "set_default_executor(self, executor)",
                "_run_callback(self, callback)",
                "_discard_future_result(self, future)",
                "handle_callback_exception(self, callback)",
                "split_fd(self, fd)",
                "close_fd(self, fd)",
                "initialize(self, impl, time_func=None, **kwargs)",
                "configurable_base(cls)",
                "configurable_default(cls)",
                "close(self, all_fds=False)",
                "add_handler(self, fd, handler, events)",
                "update_handler(self, fd, events)",
                "remove_handler(self, fd)",
                "set_blocking_signal_threshold(self, seconds, action)",
                "start(self)",
                "stop(self)",
                "time(self)",
                "call_at(self, deadline, callback, *args, **kwargs)",
                "remove_timeout(self, timeout)",
                "add_callback(self, callback, *args, **kwargs)",
                "add_callback_from_signal(self, callback, *args, **kwargs)",
                "__init__(self, deadline, callback, io_loop)",
                "__lt__(self, other)",
                "__le__(self, other)",
                "__init__(self, callback, callback_time)",
                "start(self)",
                "stop(self)",
                "is_running(self)",
                "_run(self)",
                "_schedule_next(self)",
                "_update_next(self, current_time)",
                "run()",
                "timeout_callback()"
            ],
            "variables_in_file": {
                "ImportError": [
                    67,
                    77,
                    62
                ],
                "signal": [
                    962,
                    967,
                    1036,
                    1052,
                    917,
                    1079,
                    923,
                    924,
                    1085,
                    958,
                    63
                ],
                "ThreadPoolExecutor": [
                    737,
                    730,
                    68
                ],
                "PY3": [
                    70
                ],
                "asyncio": [
                    314,
                    332,
                    78,
                    274,
                    282,
                    348,
                    191
                ],
                "_POLL_TIMEOUT": [
                    81,
                    1028,
                    1025
                ],
                "Configurable": [
                    84
                ],
                "_EPOLLIN": [
                    168,
                    179
                ],
                "_EPOLLPRI": [
                    169
                ],
                "_EPOLLOUT": [
                    170,
                    180
                ],
                "_EPOLLERR": [
                    171,
                    181
                ],
                "_EPOLLHUP": [
                    172,
                    181
                ],
                "_EPOLLRDHUP": [
                    173
                ],
                "_EPOLLONESHOT": [
                    174
                ],
                "_EPOLLET": [
                    175
                ],
                "NONE": [
                    178
                ],
                "READ": [
                    179
                ],
                "WRITE": [
                    180
                ],
                "ERROR": [
                    181
                ],
                "_current": [
                    184
                ],
                "threading.local": [
                    184
                ],
                "threading": [
                    184
                ],
                "_ioloop_for_asyncio": [
                    187
                ],
                "dict": [
                    187
                ],
                "isinstance": [
                    624,
                    194,
                    1140,
                    626
                ],
                "impl": [
                    194,
                    195,
                    196,
                    199,
                    845
                ],
                "str": [
                    194
                ],
                "unicode_type": [
                    194
                ],
                "import_object": [
                    195
                ],
                "issubclass": [
                    196
                ],
                "BaseAsyncIOLoop": [
                    196
                ],
                "RuntimeError": [
                    928,
                    930,
                    197,
                    361,
                    279,
                    283,
                    731
                ],
                "configure": [
                    199
                ],
                "super": [
                    844,
                    199
                ],
                "IOLoop": [
                    288,
                    1185,
                    355,
                    836,
                    358,
                    199,
                    935,
                    329,
                    333,
                    315,
                    275,
                    277,
                    278,
                    344,
                    1081,
                    251,
                    221,
                    318
                ],
                "cls": [
                    199
                ],
                "kwargs": [
                    643,
                    708,
                    199,
                    1098,
                    1130,
                    844,
                    625,
                    659,
                    628,
                    1118
                ],
                "classmethod": [
                    869,
                    873,
                    342,
                    346,
                    189
                ],
                "IOLoop.current": [
                    1185,
                    355,
                    358,
                    935,
                    329,
                    221
                ],
                "staticmethod": [
                    320,
                    201,
                    237,
                    253
                ],
                "self.make_current": [
                    937,
                    362,
                    235,
                    356
                ],
                "self": [
                    1024,
                    1030,
                    1033,
                    1039,
                    1051,
                    1053,
                    1059,
                    1060,
                    1061,
                    1063,
                    1070,
                    1072,
                    565,
                    566,
                    1077,
                    1078,
                    1082,
                    574,
                    575,
                    576,
                    1088,
                    578,
                    1089,
                    1090,
                    1093,
                    1099,
                    1100,
                    1110,
                    1113,
                    1117,
                    1119,
                    1123,
                    1130,
                    625,
                    627,
                    1142,
                    1143,
                    1144,
                    1151,
                    1154,
                    643,
                    659,
                    1173,
                    1176,
                    1177,
                    1178,
                    1185,
                    1186,
                    1187,
                    1188,
                    1192,
                    1193,
                    1194,
                    1195,
                    1202,
                    1205,
                    1208,
                    1210,
                    1212,
                    1215,
                    1216,
                    1217,
                    708,
                    1220,
                    1221,
                    1222,
                    720,
                    735,
                    737,
                    738,
                    743,
                    235,
                    751,
                    774,
                    776,
                    318,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    854,
                    855,
                    856,
                    857,
                    858,
                    859,
                    860,
                    864,
                    865,
                    866,
                    867,
                    356,
                    360,
                    362,
                    886,
                    887,
                    889,
                    890,
                    891,
                    892,
                    893,
                    894,
                    895,
                    896,
                    899,
                    900,
                    901,
                    904,
                    905,
                    908,
                    909,
                    910,
                    912,
                    921,
                    927,
                    929,
                    931,
                    932,
                    933,
                    936,
                    937,
                    938,
                    939,
                    962,
                    459,
                    978,
                    467,
                    985,
                    986,
                    987,
                    988,
                    992,
                    993,
                    994,
                    995,
                    998,
                    999,
                    1002,
                    1003,
                    1005,
                    1008,
                    1011,
                    1016,
                    1020
                ],
                "IOLoop.clear_current": [
                    1081,
                    251
                ],
                "current": [
                    292,
                    294,
                    295,
                    358,
                    360,
                    275,
                    276,
                    277,
                    278
                ],
                "getattr": [
                    315,
                    275
                ],
                "IOLoop._current": [
                    333,
                    275,
                    278,
                    315,
                    318
                ],
                "instance": [
                    290,
                    276,
                    284
                ],
                "IOLoop._current.instance": [
                    318,
                    333,
                    278
                ],
                "loop": [
                    288,
                    282
                ],
                "asyncio.get_event_loop": [
                    282
                ],
                "AssertionError": [
                    283
                ],
                "IOLoop._ioloop_for_asyncio": [
                    288
                ],
                "KeyError": [
                    289
                ],
                "AsyncIOMainLoop": [
                    292
                ],
                "old": [
                    329,
                    330,
                    331,
                    315,
                    316,
                    317
                ],
                "old.clear_current": [
                    317
                ],
                "old._clear_current_hook": [
                    331
                ],
                "AsyncIOLoop": [
                    350
                ],
                "PollIOLoop": [
                    844,
                    871,
                    351
                ],
                "make_current": [
                    354,
                    357
                ],
                "NotImplementedError": [
                    417,
                    668,
                    516,
                    389,
                    426,
                    683,
                    695,
                    408,
                    476,
                    445
                ],
                "self.set_blocking_signal_threshold": [
                    459
                ],
                "seconds": [
                    921,
                    922,
                    459
                ],
                "self.log_stack": [
                    459
                ],
                "gen_log.warning": [
                    466
                ],
                "gen_log": [
                    466,
                    918,
                    914
                ],
                "self._blocking_signal_threshold": [
                    859,
                    1033,
                    467,
                    1078,
                    921,
                    1051,
                    1053
                ],
                "join": [
                    468
                ],
                "traceback.format_stack": [
                    468
                ],
                "traceback": [
                    468
                ],
                "frame": [
                    468
                ],
                "any": [
                    489
                ],
                "handlers": [
                    489,
                    490,
                    491
                ],
                "logging.getLogger": [
                    489,
                    490,
                    491
                ],
                "logging": [
                    489,
                    490,
                    491,
                    492
                ],
                "logging.basicConfig": [
                    492
                ],
                "future_cell": [
                    579,
                    548,
                    581,
                    557,
                    558,
                    561,
                    563,
                    564,
                    565,
                    573
                ],
                "result": [
                    581,
                    552,
                    553,
                    555,
                    560,
                    561,
                    564
                ],
                "func": [
                    552,
                    739
                ],
                "convert_yielded": [
                    555
                ],
                "Exception": [
                    775,
                    556,
                    1071,
                    1040,
                    913,
                    1209
                ],
                "Future": [
                    563,
                    557,
                    742
                ],
                "future_set_exc_info": [
                    558
                ],
                "sys.exc_info": [
                    558
                ],
                "sys": [
                    558
                ],
                "is_future": [
                    560,
                    717
                ],
                "set_result": [
                    564
                ],
                "self.add_future": [
                    565,
                    774,
                    743
                ],
                "self.stop": [
                    565,
                    574
                ],
                "self.add_callback": [
                    720,
                    1130,
                    708,
                    566
                ],
                "run": [
                    566
                ],
                "timeout": [
                    577,
                    580,
                    1096,
                    1100,
                    1101,
                    1009,
                    1010,
                    1011,
                    1109,
                    1014,
                    567,
                    575
                ],
                "cancel": [
                    573
                ],
                "timeout_handle": [
                    578,
                    575
                ],
                "self.add_timeout": [
                    659,
                    575
                ],
                "self.time": [
                    1024,
                    643,
                    627,
                    986,
                    575
                ],
                "timeout_callback": [
                    575
                ],
                "self.start": [
                    576
                ],
                "self.remove_timeout": [
                    578
                ],
                "cancelled": [
                    579
                ],
                "done": [
                    579
                ],
                "TimeoutError": [
                    580
                ],
                "time.time": [
                    848,
                    596
                ],
                "time": [
                    848,
                    596
                ],
                "deadline": [
                    1024,
                    994,
                    1097,
                    624,
                    625,
                    626,
                    627,
                    1140,
                    1141,
                    630,
                    1142,
                    1144
                ],
                "numbers.Real": [
                    624,
                    1140
                ],
                "numbers": [
                    624,
                    1140
                ],
                "self.call_at": [
                    625,
                    627,
                    643
                ],
                "callback": [
                    643,
                    708,
                    776,
                    1098,
                    1130,
                    718,
                    720,
                    625,
                    659,
                    628,
                    1143,
                    1173,
                    759,
                    792,
                    988,
                    1118
                ],
                "args": [
                    643,
                    708,
                    739,
                    1098,
                    1130,
                    625,
                    659,
                    628,
                    1118
                ],
                "datetime.timedelta": [
                    626
                ],
                "datetime": [
                    626
                ],
                "timedelta_to_seconds": [
                    627
                ],
                "TypeError": [
                    1141,
                    630
                ],
                "delay": [
                    643
                ],
                "when": [
                    659
                ],
                "stack_context.NullContext": [
                    1129,
                    707
                ],
                "stack_context": [
                    707,
                    900,
                    1129,
                    1098,
                    718,
                    1118
                ],
                "future": [
                    720,
                    780,
                    717
                ],
                "stack_context.wrap": [
                    1118,
                    1098,
                    900,
                    718
                ],
                "future_add_done_callback": [
                    719
                ],
                "executor": [
                    738,
                    739,
                    734,
                    751
                ],
                "hasattr": [
                    875,
                    878,
                    846,
                    735,
                    917,
                    958,
                    895
                ],
                "self._executor": [
                    896,
                    737,
                    738,
                    751
                ],
                "cpu_count": [
                    737
                ],
                "c_future": [
                    739,
                    743
                ],
                "executor.submit": [
                    739
                ],
                "t_future": [
                    744,
                    742,
                    743
                ],
                "chain_future": [
                    743
                ],
                "f": [
                    743
                ],
                "ret": [
                    760,
                    767,
                    774,
                    759
                ],
                "gen.convert_yielded": [
                    767
                ],
                "gen": [
                    768,
                    767
                ],
                "gen.BadYieldError": [
                    768
                ],
                "self._discard_future_result": [
                    774
                ],
                "self.handle_callback_exception": [
                    776,
                    1072,
                    1070
                ],
                "future.result": [
                    780
                ],
                "app_log.error": [
                    792
                ],
                "app_log": [
                    792
                ],
                "fd.fileno": [
                    811
                ],
                "fd": [
                    899,
                    900,
                    901,
                    904,
                    905,
                    908,
                    909,
                    910,
                    912,
                    1061,
                    1063,
                    811,
                    813,
                    1070,
                    1072,
                    829,
                    831,
                    889,
                    890
                ],
                "AttributeError": [
                    812,
                    830
                ],
                "fd.close": [
                    829
                ],
                "os.close": [
                    831
                ],
                "os": [
                    929,
                    858,
                    958,
                    831
                ],
                "OSError": [
                    832,
                    1065
                ],
                "initialize": [
                    844
                ],
                "self._impl": [
                    901,
                    905,
                    845,
                    846,
                    847,
                    912,
                    1039,
                    892
                ],
                "set_close_exec": [
                    847
                ],
                "self._impl.fileno": [
                    847
                ],
                "self.time_func": [
                    848,
                    1093
                ],
                "time_func": [
                    848
                ],
                "self._handlers": [
                    900,
                    1063,
                    909,
                    1070,
                    1072,
                    849,
                    889
                ],
                "self._events": [
                    1059,
                    1060,
                    1061,
                    910,
                    850
                ],
                "self._callbacks": [
                    1008,
                    978,
                    851,
                    1117,
                    1016,
                    893
                ],
                "collections.deque": [
                    851
                ],
                "collections": [
                    851
                ],
                "self._timeouts": [
                    992,
                    1024,
                    994,
                    995,
                    999,
                    1003,
                    1020,
                    1005,
                    1100,
                    852,
                    985,
                    987,
                    988,
                    894
                ],
                "self._cancellations": [
                    993,
                    998,
                    999,
                    1002,
                    853,
                    1110
                ],
                "self._running": [
                    1088,
                    1215,
                    1186,
                    1030,
                    1192,
                    939,
                    1202,
                    1205,
                    854,
                    1177,
                    927
                ],
                "self._stopped": [
                    1089,
                    932,
                    933,
                    1077,
                    855
                ],
                "self._closing": [
                    856,
                    1113,
                    886
                ],
                "self._thread_ident": [
                    857,
                    938,
                    1119
                ],
                "self._pid": [
                    929,
                    858
                ],
                "os.getpid": [
                    929,
                    858
                ],
                "self._timeout_counter": [
                    860
                ],
                "itertools.count": [
                    860
                ],
                "itertools": [
                    860
                ],
                "self._waker": [
                    864,
                    865,
                    866,
                    962,
                    1090,
                    1123,
                    887,
                    891
                ],
                "Waker": [
                    864
                ],
                "self.add_handler": [
                    865
                ],
                "self._waker.fileno": [
                    865,
                    887
                ],
                "self._waker.consume": [
                    866
                ],
                "self.READ": [
                    867
                ],
                "select": [
                    875,
                    878
                ],
                "EPollIOLoop": [
                    877
                ],
                "KQueueIOLoop": [
                    881
                ],
                "SelectIOLoop": [
                    883
                ],
                "self.remove_handler": [
                    887
                ],
                "all_fds": [
                    888
                ],
                "handler": [
                    889,
                    900
                ],
                "list": [
                    889
                ],
                "self._handlers.values": [
                    889
                ],
                "self.close_fd": [
                    890
                ],
                "self._waker.close": [
                    891
                ],
                "self._impl.close": [
                    892
                ],
                "self._executor.shutdown": [
                    896
                ],
                "obj": [
                    904,
                    908,
                    899,
                    900
                ],
                "self.split_fd": [
                    904,
                    899,
                    908
                ],
                "self._impl.register": [
                    901
                ],
                "events": [
                    1064,
                    905,
                    1061,
                    901
                ],
                "self.ERROR": [
                    905,
                    901
                ],
                "self._impl.modify": [
                    905
                ],
                "self._handlers.pop": [
                    909
                ],
                "self._events.pop": [
                    910
                ],
                "self._impl.unregister": [
                    912
                ],
                "gen_log.debug": [
                    914
                ],
                "gen_log.error": [
                    918
                ],
                "signal.signal": [
                    923
                ],
                "signal.SIGALRM": [
                    923
                ],
                "action": [
                    924
                ],
                "signal.SIG_DFL": [
                    924
                ],
                "self._setup_logging": [
                    931
                ],
                "old_current": [
                    935,
                    936,
                    1080,
                    1082,
                    1083
                ],
                "thread.get_ident": [
                    938,
                    1119
                ],
                "thread": [
                    938,
                    1119
                ],
                "old_wakeup_fd": [
                    962,
                    963,
                    967,
                    968,
                    972,
                    1085,
                    1084,
                    957
                ],
                "os.name": [
                    958
                ],
                "signal.set_wakeup_fd": [
                    962,
                    1085,
                    967
                ],
                "self._waker.write_fileno": [
                    962
                ],
                "ValueError": [
                    969,
                    1175
                ],
                "ncallbacks": [
                    978,
                    1007
                ],
                "len": [
                    978,
                    999
                ],
                "due_timeouts": [
                    984,
                    1009,
                    995,
                    1014
                ],
                "now": [
                    986,
                    994
                ],
                "heapq.heappop": [
                    992,
                    995
                ],
                "heapq": [
                    992,
                    995,
                    1100,
                    1005
                ],
                "due_timeouts.append": [
                    995
                ],
                "x": [
                    1003,
                    1004
                ],
                "x.callback": [
                    1004
                ],
                "heapq.heapify": [
                    1005
                ],
                "i": [
                    1007
                ],
                "range": [
                    1007
                ],
                "self._run_callback": [
                    1008,
                    1011
                ],
                "self._callbacks.popleft": [
                    1008
                ],
                "timeout.callback": [
                    1010,
                    1011,
                    1109
                ],
                "poll_timeout": [
                    1024,
                    1025,
                    1028,
                    1039,
                    1019
                ],
                "max": [
                    1025
                ],
                "min": [
                    1025
                ],
                "signal.setitimer": [
                    1036,
                    1052,
                    1079
                ],
                "signal.ITIMER_REAL": [
                    1036,
                    1052,
                    1079
                ],
                "event_pairs": [
                    1059,
                    1039
                ],
                "self._impl.poll": [
                    1039
                ],
                "errno_from_exception": [
                    1066,
                    1046
                ],
                "e": [
                    1066,
                    1046
                ],
                "errno.EINTR": [
                    1046
                ],
                "errno": [
                    1066,
                    1046
                ],
                "self._events.update": [
                    1059
                ],
                "self._events.popitem": [
                    1061
                ],
                "fd_obj": [
                    1064,
                    1073,
                    1063
                ],
                "handler_func": [
                    1064,
                    1073,
                    1063
                ],
                "IOError": [
                    1065
                ],
                "errno.EPIPE": [
                    1066
                ],
                "self._handlers.get": [
                    1072,
                    1070
                ],
                "old_current.make_current": [
                    1083
                ],
                "self._waker.wake": [
                    1090,
                    1123
                ],
                "_Timeout": [
                    1096
                ],
                "functools.partial": [
                    1098,
                    1117
                ],
                "functools": [
                    1098,
                    1117
                ],
                "heapq.heappush": [
                    1100
                ],
                "self._callbacks.append": [
                    1117
                ],
                "object": [
                    1133,
                    1157
                ],
                "__slots__": [
                    1137
                ],
                "self.deadline": [
                    1142
                ],
                "self.callback": [
                    1208,
                    1210,
                    1173,
                    1143
                ],
                "self.tdeadline": [
                    1144,
                    1154,
                    1151
                ],
                "next": [
                    1144
                ],
                "io_loop._timeout_counter": [
                    1144
                ],
                "io_loop": [
                    1144
                ],
                "other.tdeadline": [
                    1154,
                    1151
                ],
                "other": [
                    1154,
                    1151
                ],
                "callback_time": [
                    1176,
                    1174
                ],
                "self.callback_time": [
                    1176,
                    1221
                ],
                "self._timeout": [
                    1217,
                    1193,
                    1194,
                    1195,
                    1178
                ],
                "self.io_loop": [
                    1216,
                    1185,
                    1217,
                    1187,
                    1194,
                    1210
                ],
                "self._next_timeout": [
                    1217,
                    1187,
                    1220,
                    1222
                ],
                "self.io_loop.time": [
                    1216,
                    1187
                ],
                "self._schedule_next": [
                    1212,
                    1188
                ],
                "self.io_loop.remove_timeout": [
                    1194
                ],
                "self.io_loop.handle_callback_exception": [
                    1210
                ],
                "self._update_next": [
                    1216
                ],
                "self.io_loop.add_timeout": [
                    1217
                ],
                "self._run": [
                    1217
                ],
                "current_time": [
                    1220,
                    1222
                ],
                "callback_time_sec": [
                    1221,
                    1223
                ],
                "math.floor": [
                    1222
                ],
                "math": [
                    1222
                ]
            },
            "filtered_variables_in_file": {
                "signal": [
                    962,
                    967,
                    1036,
                    1052,
                    917,
                    1079,
                    923,
                    924,
                    1085,
                    958,
                    63
                ],
                "ThreadPoolExecutor": [
                    737,
                    730,
                    68
                ],
                "PY3": [
                    70
                ],
                "asyncio": [
                    314,
                    332,
                    78,
                    274,
                    282,
                    348,
                    191
                ],
                "_POLL_TIMEOUT": [
                    81,
                    1028,
                    1025
                ],
                "Configurable": [
                    84
                ],
                "_EPOLLIN": [
                    168,
                    179
                ],
                "_EPOLLPRI": [
                    169
                ],
                "_EPOLLOUT": [
                    170,
                    180
                ],
                "_EPOLLERR": [
                    171,
                    181
                ],
                "_EPOLLHUP": [
                    172,
                    181
                ],
                "_EPOLLRDHUP": [
                    173
                ],
                "_EPOLLONESHOT": [
                    174
                ],
                "_EPOLLET": [
                    175
                ],
                "NONE": [
                    178
                ],
                "READ": [
                    179
                ],
                "WRITE": [
                    180
                ],
                "ERROR": [
                    181
                ],
                "_current": [
                    184
                ],
                "threading.local": [
                    184
                ],
                "threading": [
                    184
                ],
                "_ioloop_for_asyncio": [
                    187
                ],
                "impl": [
                    194,
                    195,
                    196,
                    199,
                    845
                ],
                "unicode_type": [
                    194
                ],
                "import_object": [
                    195
                ],
                "BaseAsyncIOLoop": [
                    196
                ],
                "configure": [
                    199
                ],
                "IOLoop": [
                    288,
                    1185,
                    355,
                    836,
                    358,
                    199,
                    935,
                    329,
                    333,
                    315,
                    275,
                    277,
                    278,
                    344,
                    1081,
                    251,
                    221,
                    318
                ],
                "cls": [
                    199
                ],
                "kwargs": [
                    643,
                    708,
                    199,
                    1098,
                    1130,
                    844,
                    625,
                    659,
                    628,
                    1118
                ],
                "IOLoop.current": [
                    1185,
                    355,
                    358,
                    935,
                    329,
                    221
                ],
                "self.make_current": [
                    937,
                    362,
                    235,
                    356
                ],
                "self": [
                    1024,
                    1030,
                    1033,
                    1039,
                    1051,
                    1053,
                    1059,
                    1060,
                    1061,
                    1063,
                    1070,
                    1072,
                    565,
                    566,
                    1077,
                    1078,
                    1082,
                    574,
                    575,
                    576,
                    1088,
                    578,
                    1089,
                    1090,
                    1093,
                    1099,
                    1100,
                    1110,
                    1113,
                    1117,
                    1119,
                    1123,
                    1130,
                    625,
                    627,
                    1142,
                    1143,
                    1144,
                    1151,
                    1154,
                    643,
                    659,
                    1173,
                    1176,
                    1177,
                    1178,
                    1185,
                    1186,
                    1187,
                    1188,
                    1192,
                    1193,
                    1194,
                    1195,
                    1202,
                    1205,
                    1208,
                    1210,
                    1212,
                    1215,
                    1216,
                    1217,
                    708,
                    1220,
                    1221,
                    1222,
                    720,
                    735,
                    737,
                    738,
                    743,
                    235,
                    751,
                    774,
                    776,
                    318,
                    844,
                    845,
                    846,
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    854,
                    855,
                    856,
                    857,
                    858,
                    859,
                    860,
                    864,
                    865,
                    866,
                    867,
                    356,
                    360,
                    362,
                    886,
                    887,
                    889,
                    890,
                    891,
                    892,
                    893,
                    894,
                    895,
                    896,
                    899,
                    900,
                    901,
                    904,
                    905,
                    908,
                    909,
                    910,
                    912,
                    921,
                    927,
                    929,
                    931,
                    932,
                    933,
                    936,
                    937,
                    938,
                    939,
                    962,
                    459,
                    978,
                    467,
                    985,
                    986,
                    987,
                    988,
                    992,
                    993,
                    994,
                    995,
                    998,
                    999,
                    1002,
                    1003,
                    1005,
                    1008,
                    1011,
                    1016,
                    1020
                ],
                "IOLoop.clear_current": [
                    1081,
                    251
                ],
                "current": [
                    292,
                    294,
                    295,
                    358,
                    360,
                    275,
                    276,
                    277,
                    278
                ],
                "IOLoop._current": [
                    333,
                    275,
                    278,
                    315,
                    318
                ],
                "instance": [
                    290,
                    276,
                    284
                ],
                "IOLoop._current.instance": [
                    318,
                    333,
                    278
                ],
                "loop": [
                    288,
                    282
                ],
                "asyncio.get_event_loop": [
                    282
                ],
                "IOLoop._ioloop_for_asyncio": [
                    288
                ],
                "AsyncIOMainLoop": [
                    292
                ],
                "old": [
                    329,
                    330,
                    331,
                    315,
                    316,
                    317
                ],
                "old.clear_current": [
                    317
                ],
                "old._clear_current_hook": [
                    331
                ],
                "AsyncIOLoop": [
                    350
                ],
                "PollIOLoop": [
                    844,
                    871,
                    351
                ],
                "make_current": [
                    354,
                    357
                ],
                "self.set_blocking_signal_threshold": [
                    459
                ],
                "seconds": [
                    921,
                    922,
                    459
                ],
                "self.log_stack": [
                    459
                ],
                "gen_log.warning": [
                    466
                ],
                "gen_log": [
                    466,
                    918,
                    914
                ],
                "self._blocking_signal_threshold": [
                    859,
                    1033,
                    467,
                    1078,
                    921,
                    1051,
                    1053
                ],
                "join": [
                    468
                ],
                "traceback.format_stack": [
                    468
                ],
                "traceback": [
                    468
                ],
                "frame": [
                    468
                ],
                "handlers": [
                    489,
                    490,
                    491
                ],
                "logging.getLogger": [
                    489,
                    490,
                    491
                ],
                "logging": [
                    489,
                    490,
                    491,
                    492
                ],
                "logging.basicConfig": [
                    492
                ],
                "future_cell": [
                    579,
                    548,
                    581,
                    557,
                    558,
                    561,
                    563,
                    564,
                    565,
                    573
                ],
                "result": [
                    581,
                    552,
                    553,
                    555,
                    560,
                    561,
                    564
                ],
                "func": [
                    552,
                    739
                ],
                "convert_yielded": [
                    555
                ],
                "Future": [
                    563,
                    557,
                    742
                ],
                "future_set_exc_info": [
                    558
                ],
                "sys.exc_info": [
                    558
                ],
                "sys": [
                    558
                ],
                "is_future": [
                    560,
                    717
                ],
                "set_result": [
                    564
                ],
                "self.add_future": [
                    565,
                    774,
                    743
                ],
                "self.stop": [
                    565,
                    574
                ],
                "self.add_callback": [
                    720,
                    1130,
                    708,
                    566
                ],
                "run": [
                    566
                ],
                "timeout": [
                    577,
                    580,
                    1096,
                    1100,
                    1101,
                    1009,
                    1010,
                    1011,
                    1109,
                    1014,
                    567,
                    575
                ],
                "cancel": [
                    573
                ],
                "timeout_handle": [
                    578,
                    575
                ],
                "self.add_timeout": [
                    659,
                    575
                ],
                "self.time": [
                    1024,
                    643,
                    627,
                    986,
                    575
                ],
                "timeout_callback": [
                    575
                ],
                "self.start": [
                    576
                ],
                "self.remove_timeout": [
                    578
                ],
                "cancelled": [
                    579
                ],
                "done": [
                    579
                ],
                "time.time": [
                    848,
                    596
                ],
                "time": [
                    848,
                    596
                ],
                "deadline": [
                    1024,
                    994,
                    1097,
                    624,
                    625,
                    626,
                    627,
                    1140,
                    1141,
                    630,
                    1142,
                    1144
                ],
                "numbers.Real": [
                    624,
                    1140
                ],
                "numbers": [
                    624,
                    1140
                ],
                "self.call_at": [
                    625,
                    627,
                    643
                ],
                "callback": [
                    643,
                    708,
                    776,
                    1098,
                    1130,
                    718,
                    720,
                    625,
                    659,
                    628,
                    1143,
                    1173,
                    759,
                    792,
                    988,
                    1118
                ],
                "args": [
                    643,
                    708,
                    739,
                    1098,
                    1130,
                    625,
                    659,
                    628,
                    1118
                ],
                "datetime.timedelta": [
                    626
                ],
                "datetime": [
                    626
                ],
                "timedelta_to_seconds": [
                    627
                ],
                "delay": [
                    643
                ],
                "when": [
                    659
                ],
                "stack_context.NullContext": [
                    1129,
                    707
                ],
                "stack_context": [
                    707,
                    900,
                    1129,
                    1098,
                    718,
                    1118
                ],
                "future": [
                    720,
                    780,
                    717
                ],
                "stack_context.wrap": [
                    1118,
                    1098,
                    900,
                    718
                ],
                "future_add_done_callback": [
                    719
                ],
                "executor": [
                    738,
                    739,
                    734,
                    751
                ],
                "self._executor": [
                    896,
                    737,
                    738,
                    751
                ],
                "cpu_count": [
                    737
                ],
                "c_future": [
                    739,
                    743
                ],
                "executor.submit": [
                    739
                ],
                "t_future": [
                    744,
                    742,
                    743
                ],
                "chain_future": [
                    743
                ],
                "f": [
                    743
                ],
                "ret": [
                    760,
                    767,
                    774,
                    759
                ],
                "gen.convert_yielded": [
                    767
                ],
                "gen": [
                    768,
                    767
                ],
                "gen.BadYieldError": [
                    768
                ],
                "self._discard_future_result": [
                    774
                ],
                "self.handle_callback_exception": [
                    776,
                    1072,
                    1070
                ],
                "future.result": [
                    780
                ],
                "app_log.error": [
                    792
                ],
                "app_log": [
                    792
                ],
                "fd.fileno": [
                    811
                ],
                "fd": [
                    899,
                    900,
                    901,
                    904,
                    905,
                    908,
                    909,
                    910,
                    912,
                    1061,
                    1063,
                    811,
                    813,
                    1070,
                    1072,
                    829,
                    831,
                    889,
                    890
                ],
                "fd.close": [
                    829
                ],
                "os.close": [
                    831
                ],
                "os": [
                    929,
                    858,
                    958,
                    831
                ],
                "initialize": [
                    844
                ],
                "self._impl": [
                    901,
                    905,
                    845,
                    846,
                    847,
                    912,
                    1039,
                    892
                ],
                "set_close_exec": [
                    847
                ],
                "self._impl.fileno": [
                    847
                ],
                "self.time_func": [
                    848,
                    1093
                ],
                "time_func": [
                    848
                ],
                "self._handlers": [
                    900,
                    1063,
                    909,
                    1070,
                    1072,
                    849,
                    889
                ],
                "self._events": [
                    1059,
                    1060,
                    1061,
                    910,
                    850
                ],
                "self._callbacks": [
                    1008,
                    978,
                    851,
                    1117,
                    1016,
                    893
                ],
                "collections.deque": [
                    851
                ],
                "collections": [
                    851
                ],
                "self._timeouts": [
                    992,
                    1024,
                    994,
                    995,
                    999,
                    1003,
                    1020,
                    1005,
                    1100,
                    852,
                    985,
                    987,
                    988,
                    894
                ],
                "self._cancellations": [
                    993,
                    998,
                    999,
                    1002,
                    853,
                    1110
                ],
                "self._running": [
                    1088,
                    1215,
                    1186,
                    1030,
                    1192,
                    939,
                    1202,
                    1205,
                    854,
                    1177,
                    927
                ],
                "self._stopped": [
                    1089,
                    932,
                    933,
                    1077,
                    855
                ],
                "self._closing": [
                    856,
                    1113,
                    886
                ],
                "self._thread_ident": [
                    857,
                    938,
                    1119
                ],
                "self._pid": [
                    929,
                    858
                ],
                "os.getpid": [
                    929,
                    858
                ],
                "self._timeout_counter": [
                    860
                ],
                "itertools.count": [
                    860
                ],
                "itertools": [
                    860
                ],
                "self._waker": [
                    864,
                    865,
                    866,
                    962,
                    1090,
                    1123,
                    887,
                    891
                ],
                "Waker": [
                    864
                ],
                "self.add_handler": [
                    865
                ],
                "self._waker.fileno": [
                    865,
                    887
                ],
                "self._waker.consume": [
                    866
                ],
                "self.READ": [
                    867
                ],
                "select": [
                    875,
                    878
                ],
                "EPollIOLoop": [
                    877
                ],
                "KQueueIOLoop": [
                    881
                ],
                "SelectIOLoop": [
                    883
                ],
                "self.remove_handler": [
                    887
                ],
                "all_fds": [
                    888
                ],
                "handler": [
                    889,
                    900
                ],
                "self._handlers.values": [
                    889
                ],
                "self.close_fd": [
                    890
                ],
                "self._waker.close": [
                    891
                ],
                "self._impl.close": [
                    892
                ],
                "self._executor.shutdown": [
                    896
                ],
                "obj": [
                    904,
                    908,
                    899,
                    900
                ],
                "self.split_fd": [
                    904,
                    899,
                    908
                ],
                "self._impl.register": [
                    901
                ],
                "events": [
                    1064,
                    905,
                    1061,
                    901
                ],
                "self.ERROR": [
                    905,
                    901
                ],
                "self._impl.modify": [
                    905
                ],
                "self._handlers.pop": [
                    909
                ],
                "self._events.pop": [
                    910
                ],
                "self._impl.unregister": [
                    912
                ],
                "gen_log.debug": [
                    914
                ],
                "gen_log.error": [
                    918
                ],
                "signal.signal": [
                    923
                ],
                "signal.SIGALRM": [
                    923
                ],
                "action": [
                    924
                ],
                "signal.SIG_DFL": [
                    924
                ],
                "self._setup_logging": [
                    931
                ],
                "old_current": [
                    935,
                    936,
                    1080,
                    1082,
                    1083
                ],
                "thread.get_ident": [
                    938,
                    1119
                ],
                "thread": [
                    938,
                    1119
                ],
                "old_wakeup_fd": [
                    962,
                    963,
                    967,
                    968,
                    972,
                    1085,
                    1084,
                    957
                ],
                "os.name": [
                    958
                ],
                "signal.set_wakeup_fd": [
                    962,
                    1085,
                    967
                ],
                "self._waker.write_fileno": [
                    962
                ],
                "ncallbacks": [
                    978,
                    1007
                ],
                "due_timeouts": [
                    984,
                    1009,
                    995,
                    1014
                ],
                "now": [
                    986,
                    994
                ],
                "heapq.heappop": [
                    992,
                    995
                ],
                "heapq": [
                    992,
                    995,
                    1100,
                    1005
                ],
                "due_timeouts.append": [
                    995
                ],
                "x": [
                    1003,
                    1004
                ],
                "x.callback": [
                    1004
                ],
                "heapq.heapify": [
                    1005
                ],
                "i": [
                    1007
                ],
                "self._run_callback": [
                    1008,
                    1011
                ],
                "self._callbacks.popleft": [
                    1008
                ],
                "timeout.callback": [
                    1010,
                    1011,
                    1109
                ],
                "poll_timeout": [
                    1024,
                    1025,
                    1028,
                    1039,
                    1019
                ],
                "signal.setitimer": [
                    1036,
                    1052,
                    1079
                ],
                "signal.ITIMER_REAL": [
                    1036,
                    1052,
                    1079
                ],
                "event_pairs": [
                    1059,
                    1039
                ],
                "self._impl.poll": [
                    1039
                ],
                "errno_from_exception": [
                    1066,
                    1046
                ],
                "e": [
                    1066,
                    1046
                ],
                "errno.EINTR": [
                    1046
                ],
                "errno": [
                    1066,
                    1046
                ],
                "self._events.update": [
                    1059
                ],
                "self._events.popitem": [
                    1061
                ],
                "fd_obj": [
                    1064,
                    1073,
                    1063
                ],
                "handler_func": [
                    1064,
                    1073,
                    1063
                ],
                "errno.EPIPE": [
                    1066
                ],
                "self._handlers.get": [
                    1072,
                    1070
                ],
                "old_current.make_current": [
                    1083
                ],
                "self._waker.wake": [
                    1090,
                    1123
                ],
                "_Timeout": [
                    1096
                ],
                "functools.partial": [
                    1098,
                    1117
                ],
                "functools": [
                    1098,
                    1117
                ],
                "heapq.heappush": [
                    1100
                ],
                "self._callbacks.append": [
                    1117
                ],
                "__slots__": [
                    1137
                ],
                "self.deadline": [
                    1142
                ],
                "self.callback": [
                    1208,
                    1210,
                    1173,
                    1143
                ],
                "self.tdeadline": [
                    1144,
                    1154,
                    1151
                ],
                "io_loop._timeout_counter": [
                    1144
                ],
                "io_loop": [
                    1144
                ],
                "other.tdeadline": [
                    1154,
                    1151
                ],
                "other": [
                    1154,
                    1151
                ],
                "callback_time": [
                    1176,
                    1174
                ],
                "self.callback_time": [
                    1176,
                    1221
                ],
                "self._timeout": [
                    1217,
                    1193,
                    1194,
                    1195,
                    1178
                ],
                "self.io_loop": [
                    1216,
                    1185,
                    1217,
                    1187,
                    1194,
                    1210
                ],
                "self._next_timeout": [
                    1217,
                    1187,
                    1220,
                    1222
                ],
                "self.io_loop.time": [
                    1216,
                    1187
                ],
                "self._schedule_next": [
                    1212,
                    1188
                ],
                "self.io_loop.remove_timeout": [
                    1194
                ],
                "self.io_loop.handle_callback_exception": [
                    1210
                ],
                "self._update_next": [
                    1216
                ],
                "self.io_loop.add_timeout": [
                    1217
                ],
                "self._run": [
                    1217
                ],
                "current_time": [
                    1220,
                    1222
                ],
                "callback_time_sec": [
                    1221,
                    1223
                ],
                "math.floor": [
                    1222
                ],
                "math": [
                    1222
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/tornado_5/tornado/test/ioloop_test.py",
                "test_function": "test_clock_backwards",
                "test_function_code": "    def test_clock_backwards(self):\n        pc = PeriodicCallback(None, 10000)\n        # Backwards jumps are ignored, potentially resulting in a\n        # slightly slow schedule (although we assume that when\n        # time.time() and time.monotonic() are different, time.time()\n        # is getting adjusted by NTP and is therefore more accurate)\n        self.assertEqual(self.simulate_calls(pc, [-2, -1, -3, -2, 0]),\n                         [1010, 1020, 1030, 1040, 1050])\n\n        # For big jumps, we should perhaps alter the schedule, but we\n        # don't currently. This trace shows that we run callbacks\n        # every 10s of time.time(), but the first and second calls are\n        # 110s of real time apart because the backwards jump is\n        # ignored.\n        self.assertEqual(self.simulate_calls(pc, [-100, 0, 0]),\n                         [1010, 1020, 1030])",
                "test_error": "AssertionError: Lists differ: [1010.0, 1010.0, 1010.0, 1010.0, 1010.0] != [1010, 1020, 1030, 1040, 1050]\n\nFirst differing element 1:\n1010.0\n1020\n\n- [1010.0, 1010.0, 1010.0, 1010.0, 1010.0]\n+ [1010, 1020, 1030, 1040, 1050]",
                "full_test_error": "self = <tornado.test.ioloop_test.TestPeriodicCallbackMath testMethod=test_clock_backwards>\n\n    def test_clock_backwards(self):\n        pc = PeriodicCallback(None, 10000)\n        # Backwards jumps are ignored, potentially resulting in a\n        # slightly slow schedule (although we assume that when\n        # time.time() and time.monotonic() are different, time.time()\n        # is getting adjusted by NTP and is therefore more accurate)\n        self.assertEqual(self.simulate_calls(pc, [-2, -1, -3, -2, 0]),\n>                        [1010, 1020, 1030, 1040, 1050])\nE       AssertionError: Lists differ: [1010.0, 1010.0, 1010.0, 1010.0, 1010.0] != [1010, 1020, 1030, 1040, 1050]\nE       \nE       First differing element 1:\nE       1010.0\nE       1020\nE       \nE       - [1010.0, 1010.0, 1010.0, 1010.0, 1010.0]\nE       + [1010, 1020, 1030, 1040, 1050]\n\ntornado/test/ioloop_test.py:838: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}