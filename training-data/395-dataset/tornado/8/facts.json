{
    "1.1.1": "def accept_connection(self):\n    try:\n        self._handle_websocket_headers()\n        self._accept_connection()\n    except ValueError:\n        gen_log.debug(\"Malformed WebSocket request received\",\n                      exc_info=True)\n        self._abort()\n        return\n",
    "1.1.2": null,
    "1.2.1": "class WebSocketProtocol13(WebSocketProtocol)",
    "1.2.2": "Implementation of the WebSocket protocol from RFC 6455.\n\nThis class supports versions 7 and 8 of the protocol in addition to the\nfinal version 13.",
    "1.2.3": [
        "_handle_websocket_headers(self)",
        "_accept_connection(self)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "tornado/websocket.py",
    "1.3.2": [
        "_abort(self)",
        "_handle_websocket_headers(self)",
        "_accept_connection(self)"
    ],
    "1.4.1": [
        "    def test_missing_websocket_key(self):\n        response = self.fetch('/echo',\n                              headers={'Connection': 'Upgrade',\n                                       'Upgrade': 'WebSocket',\n                                       'Sec-WebSocket-Version': '13'})\n        self.assertEqual(response.code, 400)"
    ],
    "1.4.2": [
        "tornado/test/websocket_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: 500 != 400"
        ]
    ],
    "2.1.2": [
        [
            "self = <tornado.test.websocket_test.WebSocketTest testMethod=test_missing_websocket_key>\n\n    def test_missing_websocket_key(self):\n        response = self.fetch('/echo',\n                              headers={'Connection': 'Upgrade',\n                                       'Upgrade': 'WebSocket',\n                                       'Sec-WebSocket-Version': '13'})\n>       self.assertEqual(response.code, 400)",
            "\ntornado/test/websocket_test.py:201: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self": "<tornado.websocket.WebSocketProtocol13 object at 0x1086506d0>",
                "self.handler": "<tornado.test.websocket_test.EchoHandler object at 0x10863ffd0>"
            },
            {
                "log_msg": "'Missing/Invalid WebSocket headers'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self": "WebSocketProtocol13",
                "self.handler": "EchoHandler"
            },
            {
                "log_msg": "str"
            }
        ]
    ],
    "3.1.1": [
        "AttributeError if Websocket client misses required header\n"
    ],
    "3.1.2": [
        "If the client misses required header for websocket handshake, the server raises AttributeError.\n\nMinimal code for reproduce\n\nClient\nimport socket\n\nREQ_1 = ('GET /ws HTTP/1.1\\r\\n'\n         'Host: example.com:9221\\r\\n'\n         'Upgrade: websocket\\r\\n'\n         'Connection: Upgrade\\r\\n'\n        #  'Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\\n'\n         'Sec-WebSocket-Version: 13\\r\\n'\n         '\\r\\n')\nconn = socket.create_connection(('127.0.0.1', 9221))\nconn.send(REQ_1.encode('utf-8'))\nresp_1 = conn.recv(10 * 1024)\nServer\nimport tornado.ioloop\nimport tornado.web\nimport tornado.websocket\n\nclass WsHandler(tornado.websocket.WebSocketHandler):\n    pass\n\ndef make_app():\n    return tornado.web.Application([\n        (r'/ws', WsHandler),\n    ])\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(9221)\n    tornado.ioloop.IOLoop.current().start()\nTraceback\nERROR:tornado.application:Uncaught exception GET /ws (127.0.0.1)\nHTTPServerRequest(protocol='http', host='example.com:8000', method='GET', uri='/ws', version='HTTP/1.1', remote_ip='127.0.0.1', headers={'Host': 'example.com:8000', 'Upgrade': 'websocket', 'Connection': 'Upgrade', 'Sec-Websocket-Version': '13'})\nTraceback (most recent call last):\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 618, in accept_connection\n    self._handle_websocket_headers()\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 634, in _handle_websocket_headers\n    raise ValueError(\"Missing/Invalid WebSocket headers\")\nValueError: Missing/Invalid WebSocket headers\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/web.py\", line 1467, in _stack_context_handle_exception\n    raise_exc_info((type, value, traceback))\n  File \"<string>\", line 4, in raise_exc_info\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/web.py\", line 1669, in wrapper\n    result = method(self, *args, **kwargs)\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 196, in get\n    self.ws_connection.accept_connection()\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 623, in accept_connection\n    self._abort()\n  File \"/home/pjknkda/test/ws-invalid/python-env/lib/python3.6/site-packages/tornado/websocket.py\", line 512, in _abort\n    self.stream.close()  # forcibly tear down the connection\nAttributeError: 'NoneType' object has no attribute 'close'\nERROR:tornado.access:500 GET /ws (127.0.0.1) 4.13ms\nIt seems that WebSocketProtocol13.accept_connection calls WebSocketProtocol._abort immediately if there is missing required headers, however, it is before the handshake, thus there is yet no self.stream whereas the _abort function tries to self.stream.close(). Also, the _abort function calls self.close() and there is also the same buggy code which calls self.stream.close() without checking the nullity of self.stream.\n"
    ]
}