{
    "tornado": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 219,
            "file_name": "tornado/httpclient.py",
            "replace_code": "def close(self):\n\n    \"\"\"Destroys this HTTP client, freeing any file descriptors used.\n    \n    This method is **not needed in normal use** due to the way\n    that `AsyncHTTPClient` objects are transparently reused.\n    ``close()`` is generally only necessary when either the\n    `.IOLoop` is also being closed, or the ``force_instance=True``\n    argument was used when creating the `AsyncHTTPClient`.\n    \n    No other methods may be called on the `AsyncHTTPClient` after\n    ``close()``.\n    \n    \"\"\"\n    if hasattr(self, \"_closed\") and self._closed:\n        return\n    self._closed = True\n    if hasattr(self, \"_instance_cache\") and self._instance_cache is not None:\n        if self.io_loop in self._instance_cache and self._instance_cache[self.io_loop] is not self:\n            raise RuntimeError(\"inconsistent AsyncHTTPClient cache\")\n        del self._instance_cache[self.io_loop]"
        }
    ]
}