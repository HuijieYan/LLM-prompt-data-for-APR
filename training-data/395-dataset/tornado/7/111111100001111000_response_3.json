{
    "tornado": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 642,
            "file_name": "tornado/ioloop.py",
            "replace_code": "def run_in_executor(self, executor, func, *args):\n        if executor is None:\n            \n            # create new executor if it was not created before\n            if not hasattr(self, '_executor'):\n                from tornado.process import cpu_count\n                self._executor = concurrent.futures.ThreadPoolExecutor(max_workers=(cpu_count() * 5))\n            executor = self._executor\n\n        # need to wrap the results in tornado Future and return\n        c_future = executor.submit(func, *args)\n        t_future = Future()\n\n        # set(tornado) Future results with concurrent.futures.Future result  \n        def callback(future, future2):\n            exc = future.exception()\n            if exc is not None:\n                future2.set_exception(exc)\n            else:\n                future2.set_result(future.result())\n\n        # assigning both tornado and concurrent futures as callbacks\n        executor.add_done_callback(functools.partial(callback, future2=t_future))\n        return t_future",
            "import_list": [
                "import concurrent.futures",
                "import tornado.platform.asyncio",
                "from tornado.concurrent import Future",
                "from tornado.platform.asyncio import AsyncIOLoop",
                "import threading",
                "from tornado.process import cpu_count"
            ]
        }
    ]
}