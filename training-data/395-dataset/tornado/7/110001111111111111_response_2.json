{
    "tornado": [
        {
            "bugID": 7,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 642,
            "file_name": "tornado/ioloop.py",
            "replace_code": "def run_in_executor(self, executor, func, *args):\n    if ThreadPoolExecutor is None:\n        raise RuntimeError(\"concurrent.futures is required to use IOLoop.run_in_executor\")\n\n    if executor is None:\n        if not hasattr(self, '_executor'):\n            from tornado.process import cpu_count\n            self._executor = ThreadPoolExecutor(max_workers=(cpu_count() * 5))\n        executor = self._executor\n\n    c_future = executor.submit(func, *args)\n    t_future = Future()\n\n    def on_complete(f):\n        future_set_result(t_future, f.result())\n\n    c_future.add_done_callback(on_complete)\n\n    return t_future",
            "imports": [
                "from tornado.concurrent import Future, future_set_result",
                "from concurrent.futures import ThreadPoolExecutor",
                "from tornado.process import cpu_count"
            ]
        }
    ]
}