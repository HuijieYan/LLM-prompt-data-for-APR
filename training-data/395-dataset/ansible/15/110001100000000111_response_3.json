{
    "ansible": [
        {
            "bugID": 15,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 219,
            "file_name": "lib/ansible/modules/network/eos/eos_eapi.py",
            "replace_code": "def map_obj_to_commands(updates, module, warnings):\n    commands = list()\n    want, have = updates\n\n    if 'management api http-commands' not in commands:\n        commands.append('management api http-commands')\n\n    if want.get('http') is False:\n        commands.append('no protocol http')\n    elif want.get('http') and have.get('http') is False and want.get('http') in (False, None):\n        warnings.append('protocol http is not enabled, not configuring http port value')\n    else:\n        port = want.get('http_port') or 80\n        commands.append(f'protocol http port {port}')\n\n    if want.get('https') is False:\n        commands.append('no protocol https')\n    elif want.get('https') and have.get('https') is False and want.get('https') in (False, None):\n        warnings.append('protocol https is not enabled, not configuring https port value')\n    else:\n        port = want.get('https_port') or 443\n        commands.append(f'protocol https port {port}')\n\n    if want.get('local_http') is False:\n        commands.append('no protocol http localhost')\n    elif want.get('local_http') and have.get('local_http') is False and want.get('local_http') in (False, None):\n        warnings.append('protocol local_http is not enabled, not configuring local_http port value')\n    else:\n        port = want.get('local_http_port') or 8080\n        commands.append(f'protocol http localhost port {port}')\n\n    if want.get('socket') is False:\n        commands.append('no protocol unix-socket')\n    else:\n        commands.append('protocol unix-socket')\n\n    if needs_update('state') and not needs_update('vrf'):\n        if want['state'] == 'stopped':\n            commands.append('shutdown')\n        elif want['state'] == 'started':\n            commands.append('no shutdown')\n\n    if needs_update('vrf'):\n        commands.append(f'vrf {want[\"vrf\"]}')\n        if want['state'] == 'stopped':\n            commands.append('shutdown')\n        elif want['state'] == 'started':\n            commands.append('no shutdown')\n\n    return commands",
            "imports": []
        }
    ]
}