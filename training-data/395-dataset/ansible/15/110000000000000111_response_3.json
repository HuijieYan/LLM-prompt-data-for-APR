{
    "ansible": [
        {
            "bugID": 15,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 219,
            "file_name": "lib/ansible/modules/network/eos/eos_eapi.py",
            "replace_code": "def map_obj_to_commands(updates, module, warnings):\n    commands = []\n    want, have = updates\n\n    def needs_update(x):\n        return want.get(x) is not None and (want.get(x) != have.get(x))\n\n    def add(cmd):\n        if cmd not in commands:\n            commands.append(cmd)\n\n    http_enabled = want.get('http', False) and not want.get('http_port') is False\n    https_enabled = want.get('https', False) and not want.get('https_port') is False\n    local_http_enabled = want.get('local_http', False) and not want.get('local_http_port') is False\n    socket_enabled = want.get('socket', False)\n\n    if http_enabled:\n        port = want.get('http_port', 80)\n        add(f'protocol http port {port}')\n\n    if https_enabled:\n        port = want.get('https_port', 443)\n        add(f'protocol https port {port}')\n\n    if local_http_enabled:\n        port = want.get('local_http_port', 8080)\n        add(f'protocol http localhost port {port}')\n\n    if socket_enabled:\n        add('protocol unix-socket')\n\n    if needs_update('state') and not needs_update('vrf'):\n        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n\n    if needs_update('vrf'):\n        if want.get('vrf'):\n            add('vrf ' + want['vrf'])\n        add('vrf default no shutdown')\n\n    if 'vrf' in want and 'vrf' in have and needs_update('vrf') and want['state'] == have['state']:\n        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n\n    if commands and 'management api http-commands' not in commands:\n        commands.insert(0, 'management api http-commands')\n\n    return commands",
            "import_list": []
        }
    ]
}