{
    "ansible": [
        {
            "bugID": 15,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 219,
            "file_name": "lib/ansible/modules/network/eos/eos_eapi.py",
            "replace_code": "def map_obj_to_commands(updates, module, warnings):\n    commands = []\n\n    # Helper function to add a command to the list, checking for duplicates\n    def add(cmd):\n        if cmd not in commands:\n            commands.append(cmd)\n\n    want, have = updates\n\n    if want.get('http') is False or want.get('http_port') is False:\n        add('no protocol http')\n    elif want.get('http') and want.get('http_port'):\n        if have.get('http') is False and want.get('http') in (False, None):\n            warnings.append('protocol http is not enabled, not configuring http port value')\n        else:\n            port = want.get('http_port') or 80\n            add('protocol http port %s' % port)\n\n    if want.get('https') is False or want.get('https_port') is False:\n        add('no protocol https')\n    elif want.get('https') and want.get('https_port'):\n        if have.get('https') is False and want.get('https') in (False, None):\n            warnings.append('protocol https is not enabled, not configuring https port value')\n        else:\n            port = want.get('https_port') or 443\n            add('protocol https port %s' % port)\n\n    if want.get('local_http') is False or want.get('local_http_port') is False:\n        add('no protocol http localhost')\n    elif want.get('local_http') and want.get('local_http_port'):\n        if have.get('local_http') is False and want.get('local_http') in (False, None):\n            warnings.append('protocol local_http is not enabled, not configuring local_http port value')\n        else:\n            port = want.get('local_http_port') or 8080\n            add('protocol http localhost port %s' % port)\n\n    if want.get('socket') is False:\n        add('no protocol unix-socket')\n    else:\n        add('protocol unix-socket')\n\n    if updates.get('state') and not updates.get('vrf'):\n        if want.get('state') == 'stopped':\n            add('shutdown')\n        elif want.get('state') == 'started':\n            add('no shutdown')\n\n    if updates.get('vrf'):\n        add('vrf %s' % want.get('vrf'))\n        # switching operational vrfs here\n        # need to add the desired state as well\n        if want.get('state') == 'stopped':\n            add('shutdown')\n        elif want.get('state') == 'started':\n            add('no shutdown')\n\n    if 'management api http-commands' not in commands:\n        commands.insert(0, 'management api http-commands')\n\n    return commands",
            "import_list": []
        }
    ]
}