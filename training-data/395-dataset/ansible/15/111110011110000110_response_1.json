{
    "ansible": [
        {
            "bugID": 15,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 219,
            "file_name": "lib/ansible/modules/network/eos/eos_eapi.py",
            "replace_code": "def map_obj_to_commands(updates, module, warnings):\n\n    commands = []\n    want, have = updates\n    \n    def needs_update(x):\n        return want.get(x) is not None and (want.get(x) != have.get(x))\n    \n    def add(cmd):\n        if 'management api http-commands' not in commands:\n            commands.insert(0, 'management api http-commands')\n        commands.append(cmd)\n    \n    def protocol_update(protocol, port_key, default_port):\n        if needs_update(protocol) or needs_update(port_key):\n            if want[protocol]:\n                if have[protocol] is False and want[protocol] in (False, None):\n                    warnings.append(f'protocol {protocol} is not enabled, not configuring {protocol} port value')\n                else:\n                    port = want[port_key] or default_port\n                    add(f'protocol {protocol} port {port}')\n            else:\n                add(f'no protocol {protocol}')\n    \n    protocol_update('http', 'http_port', 80)\n    protocol_update('https', 'https_port', 443)\n    protocol_update('local_http', 'local_http_port', 8080)\n    \n    if needs_update('socket'):\n        if want['socket']:\n            add('protocol unix-socket')\n        else:\n            add('no protocol unix-socket')\n    \n    if needs_update('state') and not needs_update('vrf'):\n        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n    \n    if needs_update('vrf'):\n        add(f'vrf {want[\"vrf\"]}')\n        if want['state'] == 'stopped':\n            add('shutdown')\n        elif want['state'] == 'started':\n            add('no shutdown')\n    \n    return commands"
        }
    ]
}