{
    "ansible": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 650,
            "file_name": "lib/ansible/galaxy/collection.py",
            "replace_code": "def verify_collections(collections, search_paths, apis, validate_certs, ignore_errors, allow_pre_release=False):\n    with Display().display_progress():\n        with TempFile() as b_temp_path:\n            for collection in collections:\n                try:\n                    local_collection = None\n                    if not isinstance(collection, (list, tuple)) or len(collection) != 2:\n                        raise AnsibleError(message=\"Invalid collection format. Expected format is [namespace, name].\")\n\n                    namespace, name = collection\n                    collection_version = name\n\n                    # Verify local collection exists before downloading it from a galaxy server\n                    for search_path in search_paths:\n                        collection_path = os.path.join(search_path, namespace, name)\n                        if os.path.isdir(collection_path):\n                            local_collection = CollectionRequirement.from_path(collection_path, False)\n                            break\n                    if local_collection is None:\n                        raise AnsibleError(message=f'Collection {collection} is not installed in any of the collection paths.')\n\n                    # Download collection on a galaxy server for comparison\n                    try:\n                        remote_collection = CollectionRequirement.from_name(f\"{namespace}.{name}\", apis, collection_version, False, parent=None, allow_pre_release=allow_pre_release)\n                    except AnsibleError as e:\n                        if \"Failed to find collection\" in str(e):\n                            raise AnsibleError(f'Failed to find remote collection {namespace}.{name} on any of the galaxy servers')\n                        raise\n\n                    download_url = remote_collection.metadata.download_url\n                    headers = {}\n                    remote_collection.api._add_auth_token(headers, download_url, required=False)\n                    b_temp_tar_path = _download_file(download_url, b_temp_path, None, validate_certs, headers=headers)\n\n                    local_collection.verify(remote_collection, search_path, b_temp_tar_path)\n\n                except AnsibleError as err:\n                    if ignore_errors:\n                        Display().warning(f\"Failed to verify collection {collection} but skipping due to --ignore-errors being set. Error: {to_text(err)}\")\n                    else:\n                        raise",
            "imports": [
                "import os",
                "from urllib.parse import urlparse",
                "from ansible.errors import AnsibleError",
                "from ansible.utils.display import Display",
                "from ansible.utils.tempfile import TempFile"
            ]
        }
    ]
}