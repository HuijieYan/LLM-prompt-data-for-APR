{
    "1.1.1": "def _load_collections(self, attr, ds):\n    # this will only be called if someone specified a value; call the shared value\n    _ensure_default_collection(collection_list=ds)\n\n    if not ds:  # don't return an empty collection list, just return None\n        return None\n\n    return ds\n",
    "1.1.2": null,
    "1.2.1": "class CollectionSearch()",
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "lib/ansible/playbook/collectionsearch.py",
    "1.3.2": [
        "_ensure_default_collection(collection_list=None)"
    ],
    "1.4.1": [
        "def test_collection_static_warning(capsys):\n    \"\"\"Test that collection name is not templated.\n\n    Also, make sure that users see the warning message for the referenced name.\n    \"\"\"\n\n    collection_name = 'foo.{{bar}}'\n    cs = CollectionSearch()\n    assert collection_name in cs._load_collections(None, [collection_name])\n\n    std_out, std_err = capsys.readouterr()\n    assert '[WARNING]: \"collections\" is not templatable, but we found: %s' % collection_name in std_err\n    assert '' == std_out"
    ],
    "1.4.2": [
        "test/units/playbook/test_collectionsearch.py"
    ],
    "2.1.1": [
        [
            "E       assert ('[WARNING]: \"collections\" is not templatable, but we found: %s' % 'foo.{{bar}}') in ''"
        ]
    ],
    "2.1.2": [
        [
            "capsys = <_pytest.capture.CaptureFixture object at 0x10db76b10>\n\n    def test_collection_static_warning(capsys):\n        \"\"\"Test that collection name is not templated.\n    \n        Also, make sure that users see the warning message for the referenced name.\n        \"\"\"\n    \n        collection_name = 'foo.{{bar}}'\n        cs = CollectionSearch()\n        assert collection_name in cs._load_collections(None, [collection_name])\n    \n        std_out, std_err = capsys.readouterr()\n>       assert '[WARNING]: \"collections\" is not templatable, but we found: %s' % collection_name in std_err",
            "\ntest/units/playbook/test_collectionsearch.py:37: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "ds": {
                    "value": "['foo.{{bar}}']",
                    "shape": "1"
                }
            },
            {
                "ds": {
                    "value": "['foo.{{bar}}', 'ansible.legacy']",
                    "shape": "2"
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "ds": "list"
            },
            {
                "ds": "list"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "ds": {
                    "value": "['foo.{{bar}}']",
                    "shape": "1"
                }
            },
            {
                "ds": {
                    "value": "['foo.{{bar}}', 'ansible.legacy']",
                    "shape": "2"
                },
                "env": {
                    "value": "<jinja2.environment.Environment object at 0x10efb0a10>",
                    "shape": null
                },
                "collection_name": {
                    "value": "'ansible.legacy'",
                    "shape": "14"
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "ds": "list"
            },
            {
                "ds": "list",
                "env": "Environment",
                "collection_name": "str"
            }
        ]
    ],
    "3.1.1": [
        "Using a variable in FQCN of the collection called inside the playbook does not find the roles\n"
    ],
    "3.1.2": [
        "SUMMARY\nWhile trying to include roles from collections in a dynamic manner, I used a variable as name for the collection name (eg. my_namespace.{{ collection_var_name }}.role1 ). By doing so, the role is not found. Replacing the collection_var_name with the collection name correctly i can use the role without issues.\n\nISSUE TYPE\nBug Report\nCOMPONENT NAME\nCollections\n\nANSIBLE VERSION\n\nansible 2.9.6\n  configured module search path = [u'/Users/alexandruvinogradov/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /Users/alexandruvinogradov/Library/Python/2.7/lib/python/site-packages/ansible\n  executable location = /usr/local/bin/ansible\n  python version = 2.7.16 (default, Jan 27 2020, 04:46:15) [GCC 4.2.1 Compatible Apple LLVM 10.0.1 (clang-1001.0.37.14)]\n\nCONFIGURATION\nno modification\nOS / ENVIRONMENT\nMacOS Mojave 10.14.6\n\nSTEPS TO REPRODUCE\nUse the playbook below to try to execute role1 from a pre-created collection. Call the collection by passing the var collection_name to match the collection name.\nansible-playbook playbook.yml -e'{\"collection_name\":\"name\"}'\n\n---\n- hosts: all  \n  collections:\n   - namespace.{{ collection_name }}\n  tasks:\n    - import_role:\n        name: role1\nEXPECTED RESULTS\nThe expected behaviour would be that the role from the collection passed as variable gets executed. If i were to replace the variable in the playbook with the actual passed name, the role gets executed correctly.\n\nACTUAL RESULTS\nThe role is not recognized as part of the collection.\n\nERROR! the role 'role1' was not found\n\nThe error appears to be in 'playbook.yml': line 7, column 15, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n    - import_role:\n        name: role1\n              ^ here\n"
    ]
}