{
    "thefuck": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 107,
            "file_name": "thefuck/utils.py",
            "replace_code": "def get_all_executables():\n    tf_alias = shell.get_alias()\n    tf_entry_points = ['thefuck', 'fuck']\n\n    def _safe(fn, fallback):\n        try:\n            return fn()\n        except OSError:\n            return fallback\n\n    def get_exes():\n        return [exe.name.decode('utf8') if six.PY2 else exe.name\n                for path in os.environ.get('PATH', '').split(os.pathsep)\n                for exe in _safe(lambda: list(Path(path).iterdir()), [])\n                if not _safe(exe.is_dir, True)\n                and exe.name not in tf_entry_points]\n\n    def get_aliases():\n        return [alias.decode('utf8') if six.PY2 else alias\n                for alias in shell.get_aliases() if alias != tf_alias]\n\n    return get_exes() + get_aliases()",
            "import_list": [
                "import os",
                "from pathlib import Path",
                "import six",
                "from thefuck.shells import shell"
            ]
        }
    ]
}