{
    "1.1.1": "def cache(*depends_on):\n    \n    def _get_mtime(name):\n        path = os.path.join(os.path.expanduser('~'), name)\n        try:\n            return str(os.path.getmtime(path))\n        except OSError:\n            return '0'\n\n    @decorator\n    def _cache(fn, *args, **kwargs):\n        if cache.disabled:\n            return fn(*args, **kwargs)\n\n        cache_path = os.path.join(tempfile.gettempdir(), '.thefuck-cache')\n        key = '{}.{}'.format(fn.__module__, repr(fn).split('at')[0])\n\n        etag = '.'.join(_get_mtime(name) for name in depends_on)\n\n        with shelve.open(cache_path) as db:\n            if db.get(key, {}).get('etag') == etag:\n                return db[key]['value']\n            else:\n                value = fn(*args, **kwargs)\n                db[key] = {'etag': etag, 'value': value}\n                return value\n    return _cache\n",
    "1.1.2": "Caches function result in temporary file.\n\nCache will be expired when modification date of files from `depends_on`\nwill be changed.\n\nFunction wrapped in `cache` should be arguments agnostic.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "thefuck/utils.py",
    "1.3.2": [
        "cache(*depends_on)",
        "_get_mtime(name)",
        "_cache(fn, *args, **kwargs)"
    ],
    "1.4.1": [
        "    def test_when_etag_changed(self, shelve, fn, key):\n        shelve.update({key: {'etag': '-1', 'value': 'old-value'}})\n        assert fn() == 'test'\n        assert shelve == {key: {'etag': '0', 'value': 'test'}}",
        "    def test_with_filled_cache(self, shelve, fn, key):\n        cache_value = {key: {'etag': '0', 'value': 'new-value'}}\n        shelve.update(cache_value)\n        assert fn() == 'new-value'\n        assert shelve == cache_value",
        "    def test_with_blank_cache(self, shelve, fn, key):\n        assert shelve == {}\n        assert fn() == 'test'\n        assert shelve == {key: {'etag': '0', 'value': 'test'}}"
    ],
    "1.4.2": [
        "tests/test_utils.py",
        "tests/test_utils.py",
        "tests/test_utils.py"
    ],
    "2.1.1": [
        [
            "E       AttributeError: __enter__"
        ],
        [
            "E       AttributeError: __enter__"
        ],
        [
            "E       AttributeError: __enter__"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_utils.TestCache object at 0x110e29490>\nshelve = {'tests.test_utils.<function TestCache.fn.<locals>.fn ': {'etag': '-1', 'value': 'old-value'}}\nfn = <function TestCache.fn.<locals>.fn at 0x11104f320>\nkey = 'tests.test_utils.<function TestCache.fn.<locals>.fn '\n\n    def test_when_etag_changed(self, shelve, fn, key):\n        shelve.update({key: {'etag': '-1', 'value': 'old-value'}})\n>       assert fn() == 'test'\n\ntests/test_utils.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n<decorator-gen-4>:2: in fn\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <function TestCache.fn.<locals>.fn at 0x11104f0e0>, args = (), kwargs = {}\ncache_path = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/.thefuck-cache'\nkey = 'tests.test_utils.<function TestCache.fn.<locals>.fn ', etag = '0'\n\n    @decorator\n    def _cache(fn, *args, **kwargs):\n        if cache.disabled:\n            return fn(*args, **kwargs)\n    \n        cache_path = os.path.join(tempfile.gettempdir(), '.thefuck-cache')\n        key = '{}.{}'.format(fn.__module__, repr(fn).split('at')[0])\n    \n        etag = '.'.join(_get_mtime(name) for name in depends_on)\n    \n>       with shelve.open(cache_path) as db:",
            "\nthefuck/utils.py:183: AttributeError"
        ],
        [
            "self = <tests.test_utils.TestCache object at 0x1110910d0>\nshelve = {'tests.test_utils.<function TestCache.fn.<locals>.fn ': {'etag': '0', 'value': 'new-value'}}\nfn = <function TestCache.fn.<locals>.fn at 0x11104fcb0>\nkey = 'tests.test_utils.<function TestCache.fn.<locals>.fn '\n\n    def test_with_filled_cache(self, shelve, fn, key):\n        cache_value = {key: {'etag': '0', 'value': 'new-value'}}\n        shelve.update(cache_value)\n>       assert fn() == 'new-value'\n\ntests/test_utils.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n<decorator-gen-6>:2: in fn\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <function TestCache.fn.<locals>.fn at 0x11104fa70>, args = (), kwargs = {}\ncache_path = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/.thefuck-cache'\nkey = 'tests.test_utils.<function TestCache.fn.<locals>.fn ', etag = '0'\n\n    @decorator\n    def _cache(fn, *args, **kwargs):\n        if cache.disabled:\n            return fn(*args, **kwargs)\n    \n        cache_path = os.path.join(tempfile.gettempdir(), '.thefuck-cache')\n        key = '{}.{}'.format(fn.__module__, repr(fn).split('at')[0])\n    \n        etag = '.'.join(_get_mtime(name) for name in depends_on)\n    \n>       with shelve.open(cache_path) as db:",
            "\nthefuck/utils.py:183: AttributeError"
        ],
        [
            "self = <tests.test_utils.TestCache object at 0x1110a6750>, shelve = {}\nfn = <function TestCache.fn.<locals>.fn at 0x11104f950>\nkey = 'tests.test_utils.<function TestCache.fn.<locals>.fn '\n\n    def test_with_blank_cache(self, shelve, fn, key):\n        assert shelve == {}\n>       assert fn() == 'test'\n\ntests/test_utils.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n<decorator-gen-8>:2: in fn\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <function TestCache.fn.<locals>.fn at 0x11104f0e0>, args = (), kwargs = {}\ncache_path = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/.thefuck-cache'\nkey = 'tests.test_utils.<function TestCache.fn.<locals>.fn ', etag = '0'\n\n    @decorator\n    def _cache(fn, *args, **kwargs):\n        if cache.disabled:\n            return fn(*args, **kwargs)\n    \n        cache_path = os.path.join(tempfile.gettempdir(), '.thefuck-cache')\n        key = '{}.{}'.format(fn.__module__, repr(fn).split('at')[0])\n    \n        etag = '.'.join(_get_mtime(name) for name in depends_on)\n    \n>       with shelve.open(cache_path) as db:",
            "\nthefuck/utils.py:183: AttributeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "depends_on": "('~/.bashrc',)"
            },
            {
                "_get_mtime": "<function cache.<locals>._get_mtime at 0x10d2ef320>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "depends_on": "tuple"
            },
            {
                "_get_mtime": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "depends_on": "('~/.bashrc',)"
            },
            {
                "_get_mtime": "<function cache.<locals>._get_mtime at 0x10c943050>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "depends_on": "tuple"
            },
            {
                "_get_mtime": "function"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}