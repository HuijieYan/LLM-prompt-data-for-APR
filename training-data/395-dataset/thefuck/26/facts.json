{
    "1.1.1": "def get_new_command(command, settings):\n    cmds = command.script.split(' ')\n    machine = \"\"\n    if len(cmds) >= 3:\n        machine = cmds[2]\n    return shells.and_(\"vagrant up \" +  machine, command.script)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/thefuck_26/thefuck/rules/vagrant_up.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize('command, new_command', [\n    (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n    (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n    (Command(script='vagrant rdp',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n    (Command(script='vagrant rdp devbox',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command, None) == new_command",
        "@pytest.mark.parametrize('command, new_command', [\n    (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n    (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n    (Command(script='vagrant rdp',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n    (Command(script='vagrant rdp devbox',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command, None) == new_command",
        "@pytest.mark.parametrize('command, new_command', [\n    (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n    (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n    (Command(script='vagrant rdp',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n    (Command(script='vagrant rdp devbox',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command, None) == new_command",
        "@pytest.mark.parametrize('command, new_command', [\n    (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n    (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n    (Command(script='vagrant rdp',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n    (Command(script='vagrant rdp devbox',\n            stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command, None) == new_command"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_26/tests/rules/test_vagrant_up.py",
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_26/tests/rules/test_vagrant_up.py",
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_26/tests/rules/test_vagrant_up.py",
        "/Volumes/SSD2T/bgp_envs/repos/thefuck_26/tests/rules/test_vagrant_up.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert 'vagrant up  && vagrant ssh' == 'vagrant up && vagrant ssh'\nE         - vagrant up  && vagrant ssh\nE         ?            -\nE         + vagrant up && vagrant ssh"
        ],
        [
            "E       AssertionError: assert 'vagrant up devbox && vagrant ssh devbox' == ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']\nE        +  where 'vagrant up devbox && vagrant ssh devbox' = get_new_command(Command(script='vagrant ssh devbox', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), None)"
        ],
        [
            "E       AssertionError: assert 'vagrant up  && vagrant rdp' == 'vagrant up && vagrant rdp'\nE         - vagrant up  && vagrant rdp\nE         ?            -\nE         + vagrant up && vagrant rdp"
        ],
        [
            "E       AssertionError: assert 'vagrant up devbox && vagrant rdp devbox' == ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox']\nE        +  where 'vagrant up devbox && vagrant rdp devbox' = get_new_command(Command(script='vagrant rdp devbox', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.'), None)"
        ]
    ],
    "2.1.2": [
        [
            "command = Command(script='vagrant ssh', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.')\nnew_command = 'vagrant up && vagrant ssh'\n\n    @pytest.mark.parametrize('command, new_command', [\n        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n        (Command(script='vagrant rdp',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n        (Command(script='vagrant rdp devbox',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\n    def test_get_new_command(command, new_command):\n>       assert get_new_command(command, None) == new_command",
            "\ntests/rules/test_vagrant_up.py:33: AssertionError"
        ],
        [
            "command = Command(script='vagrant ssh devbox', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.')\nnew_command = ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']\n\n    @pytest.mark.parametrize('command, new_command', [\n        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n        (Command(script='vagrant rdp',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n        (Command(script='vagrant rdp devbox',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\n    def test_get_new_command(command, new_command):\n>       assert get_new_command(command, None) == new_command",
            "\ntests/rules/test_vagrant_up.py:33: AssertionError"
        ],
        [
            "command = Command(script='vagrant rdp', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')\nnew_command = 'vagrant up && vagrant rdp'\n\n    @pytest.mark.parametrize('command, new_command', [\n        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n        (Command(script='vagrant rdp',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n        (Command(script='vagrant rdp devbox',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\n    def test_get_new_command(command, new_command):\n>       assert get_new_command(command, None) == new_command",
            "\ntests/rules/test_vagrant_up.py:33: AssertionError"
        ],
        [
            "command = Command(script='vagrant rdp devbox', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')\nnew_command = ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox']\n\n    @pytest.mark.parametrize('command, new_command', [\n        (Command(script='vagrant ssh', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), 'vagrant up && vagrant ssh'),\n        (Command(script='vagrant ssh devbox', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.'), ['vagrant up devbox && vagrant ssh devbox', 'vagrant up && vagrant ssh devbox']),\n        (Command(script='vagrant rdp',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), 'vagrant up && vagrant rdp'),\n        (Command(script='vagrant rdp devbox',\n                stderr='VM must be created before running this command. Run `vagrant up` first.'), ['vagrant up devbox && vagrant rdp devbox', 'vagrant up && vagrant rdp devbox'])])\n    def test_get_new_command(command, new_command):\n>       assert get_new_command(command, None) == new_command",
            "\ntests/rules/test_vagrant_up.py:33: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "command.script": "'vagrant ssh'",
                "command": "Command(script='vagrant ssh', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.')"
            },
            {
                "cmds": "['vagrant', 'ssh']",
                "machine": "''"
            }
        ],
        [
            {
                "command.script": "'vagrant ssh devbox'",
                "command": "Command(script='vagrant ssh devbox', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.')"
            },
            {
                "cmds": "['vagrant', 'ssh', 'devbox']",
                "machine": "'devbox'"
            }
        ],
        [
            {
                "command.script": "'vagrant rdp'",
                "command": "Command(script='vagrant rdp', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')"
            },
            {
                "cmds": "['vagrant', 'rdp']",
                "machine": "''"
            }
        ],
        [
            {
                "command.script": "'vagrant rdp devbox'",
                "command": "Command(script='vagrant rdp devbox', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')"
            },
            {
                "cmds": "['vagrant', 'rdp', 'devbox']",
                "machine": "'devbox'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "machine": "str"
            }
        ],
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "machine": "str"
            }
        ],
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "machine": "str"
            }
        ],
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "machine": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "command.script": "'vagrant ssh'",
                "command": "Command(script='vagrant ssh', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.')"
            },
            {
                "cmds": "['vagrant', 'ssh']",
                "startAllInstances": "'vagrant up && vagrant ssh'"
            }
        ],
        [
            {
                "command.script": "'vagrant ssh devbox'",
                "command": "Command(script='vagrant ssh devbox', stdout='', stderr='VM must be running to open SSH connection. Run `vagrant up`\\nto start the virtual machine.')"
            },
            {
                "cmds": "['vagrant', 'ssh', 'devbox']",
                "machine": "'devbox'",
                "startAllInstances": "'vagrant up && vagrant ssh devbox'"
            }
        ],
        [
            {
                "command.script": "'vagrant rdp'",
                "command": "Command(script='vagrant rdp', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')"
            },
            {
                "cmds": "['vagrant', 'rdp']",
                "startAllInstances": "'vagrant up && vagrant rdp'"
            }
        ],
        [
            {
                "command.script": "'vagrant rdp devbox'",
                "command": "Command(script='vagrant rdp devbox', stdout='', stderr='VM must be created before running this command. Run `vagrant up` first.')"
            },
            {
                "cmds": "['vagrant', 'rdp', 'devbox']",
                "machine": "'devbox'",
                "startAllInstances": "'vagrant up && vagrant rdp devbox'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "startAllInstances": "str"
            }
        ],
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "machine": "str",
                "startAllInstances": "str"
            }
        ],
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "startAllInstances": "str"
            }
        ],
        [
            {
                "command.script": "str",
                "command": "Command"
            },
            {
                "cmds": "list",
                "machine": "str",
                "startAllInstances": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}