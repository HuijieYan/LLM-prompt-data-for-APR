{
    "thefuck": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 14,
            "file_name": "thefuck/rules/pip_unknown_command.py",
            "replace_code": "def get_new_command(command):\n    broken_cmd_match = re.search(r'ERROR: unknown command \"([a-z]+)\"', command.output)\n    if broken_cmd_match:\n        broken_cmd = broken_cmd_match.group(1)\n    else:\n        # Handle the case when there is no match for the pattern\n        return command.script\n\n    new_cmd_match = re.search(r'maybe you meant \"([a-z]+)\"', command.output)\n    if new_cmd_match:\n        new_cmd = new_cmd_match.group(1)\n    else:\n        # Handle the case when there is no match for the pattern\n        return command.script\n\n    return command.script.replace(broken_cmd, new_cmd)",
            "import_list": [
                "import re"
            ]
        }
    ]
}