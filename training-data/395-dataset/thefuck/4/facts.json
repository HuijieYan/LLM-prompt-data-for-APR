{
    "1.1.1": "@cache('~/.config/fish/config.fish')\ndef _get_aliases(overridden):\n    aliases = {}\n    proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    for alias in alias_out:\n        name, value = alias.replace('alias ', '', 1).split(' ', 1)\n        if name not in overridden:\n            aliases[name] = value\n    return aliases\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "thefuck/shells/fish.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader',\n                                       'alias_with_equal_sign': 'echo'}\n        assert shell.get_aliases() == {'func1': 'func1', 'func2': 'func2'}"
    ],
    "1.4.2": [
        "tests/shells/test_fish.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: not enough values to unpack (expected 2, got 1)"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.shells.test_fish.TestFish object at 0x10c2ba4d0>\nshell = <thefuck.shells.fish.Fish object at 0x10c4a8410>\n\n    def test_get_aliases(self, shell):\n>       assert shell.get_aliases() == {'fish_config': 'fish_config',\n                                       'fuck': 'fuck',\n                                       'funced': 'funced',\n                                       'funcsave': 'funcsave',\n                                       'history': 'history',\n                                       'll': 'll',\n                                       'math': 'math',\n                                       'popd': 'popd',\n                                       'pushd': 'pushd',\n                                       'ruby': 'ruby',\n                                       'g': 'git',\n                                       'fish_key_reader': '/usr/bin/fish_key_reader',\n                                       'alias_with_equal_sign': 'echo'}\n\ntests/shells/test_fish.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nthefuck/shells/fish.py:60: in get_aliases\n    raw_aliases = _get_aliases(overridden)\nthefuck/utils.py:37: in wrapper\n    value = fn(*args, **kwargs)\nthefuck/utils.py:265: in wrapper\n    return fn(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\noverridden = {'', 'cd', 'grep', 'ls', 'man', 'open'}\n\n    @cache('~/.config/fish/config.fish')\n    def _get_aliases(overridden):\n        aliases = {}\n        proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n        alias_out = proc.stdout.read().decode('utf-8').strip().split('\\n')\n        for alias in alias_out:\n>           name, value = alias.replace('alias ', '', 1).split(' ', 1)",
            "\nthefuck/shells/fish.py:25: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "overridden": {
                    "value": "{'', 'open', 'grep', 'ls', 'cd', 'man'}",
                    "shape": "6"
                }
            },
            {
                "aliases": {
                    "value": "{'fish_key_reader': '/usr/bin/fish_key_reader', 'g': 'git', 'alias_with_equal_sign': 'echo'}",
                    "shape": "3"
                },
                "proc": {
                    "value": "<MagicMock name='Popen()' id='4426950992'>",
                    "shape": null
                },
                "alias_out": {
                    "value": "'alias fish_key_reader /usr/bin/fish_key_reader\\nalias g git\\nalias alias_with_equal_sign=echo\\ninvalid_alias'",
                    "shape": "105"
                },
                "proc.stdout.read": {
                    "value": "<MagicMock name='Popen().stdout.read' id='4427052304'>",
                    "shape": "<MagicMock name='Popen().stdout.read.shape' id='4427409680'>"
                },
                "proc.stdout": {
                    "value": "<MagicMock name='Popen().stdout' id='4412490576'>",
                    "shape": "<MagicMock name='Popen().stdout.shape' id='4426806352'>"
                },
                "alias": {
                    "value": "'invalid_alias'",
                    "shape": "13"
                },
                "separator": {
                    "value": "'='",
                    "shape": "1"
                },
                "split_alias": {
                    "value": "['invalid_alias']",
                    "shape": "1"
                },
                "name": {
                    "value": "'alias_with_equal_sign'",
                    "shape": "21"
                },
                "value": {
                    "value": "'echo'",
                    "shape": "4"
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "overridden": "set"
            },
            {
                "aliases": "dict",
                "proc": "MagicMock",
                "alias_out": "str",
                "proc.stdout.read": "MagicMock",
                "proc.stdout": "MagicMock",
                "alias": "str",
                "separator": "str",
                "split_alias": "list",
                "name": "str",
                "value": "str"
            }
        ]
    ],
    "3.1.1": [
        "Not Running in Fish Shell\n"
    ],
    "3.1.2": [
        "The output of thefuck --version (something like The Fuck 3.1 using Python 3.5.0):\n\nThe Fuck 3.26 using Python 3.6.5\n\nYour shell and its version (bash, zsh, Windows PowerShell, etc.):\n\nFish v2.7.1 (works fine in Bash)\n\nYour system (Debian 7, ArchLinux, Windows, etc.):\n\nmacOS 10.13.5 Beta (17F45c)\n\nHow to reproduce the bug:\n\nRun 'fuck' command after entering any incorrect command in Fish shell.\n\nThe output of The Fuck with THEFUCK_DEBUG=true exported (typically execute export THEFUCK_DEBUG=true in your shell before The Fuck):\n\nDEBUG: Run with settings: {'alter_history': True,\n 'debug': True,\n 'env': {'GIT_TRACE': '1', 'LANG': 'C', 'LC_ALL': 'C'},\n 'exclude_rules': [],\n 'history_limit': None,\n 'instant_mode': False,\n 'no_colors': False,\n 'priority': {},\n 'repeat': False,\n 'require_confirmation': True,\n 'rules': [<const: All rules enabled>],\n 'slow_commands': ['lein', 'react-native', 'gradle', './gradlew', 'vagrant'],\n 'user_dir': PosixPath('/Users/user/.config/thefuck'),\n 'wait_command': 3,\n 'wait_slow_command': 15}\nDEBUG: Total took: 0:00:00.296931\nTraceback (most recent call last):\n  File \"/usr/local/bin/thefuck\", line 12, in <module>\n    sys.exit(main())\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/entrypoints/main.py\", line 25, in main\n    fix_command(known_args)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/entrypoints/fix_command.py\", line 36, in fix_command\n    command = types.Command.from_raw_script(raw_command)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/types.py\", line 81, in from_raw_script\n    expanded = shell.from_shell(script)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/shells/generic.py\", line 30, in from_shell\n    return self._expand_aliases(command_script)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/shells/fish.py\", line 65, in _expand_aliases\n    aliases = self.get_aliases()\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/shells/fish.py\", line 60, in get_aliases\n    raw_aliases = _get_aliases(overridden)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/utils.py\", line 33, in wrapper\n    memo[key] = fn(*args, **kwargs)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/utils.py\", line 267, in wrapper\n    return _cache.get_value(fn, depends_on, args, kwargs)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/utils.py\", line 243, in get_value\n    value = fn(*args, **kwargs)\n  File \"/usr/local/Cellar/thefuck/3.26/libexec/lib/python3.6/site-packages/thefuck/shells/fish.py\", line 25, in _get_aliases\n    name, value = alias.replace('alias ', '', 1).split(' ', 1)\nValueError: not enough values to unpack (expected 2, got 1)\nIf the bug only appears with a specific application, the output of that application and its version:\n\nN/A\n\nAnything else you think is relevant:\n\nN/A\n"
    ]
}