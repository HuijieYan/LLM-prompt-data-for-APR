{
    "1.1.1": "def match(command, settings):\n    return 'EDITOR' in os.environ and _search(command.stderr)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "thefuck/rules/fix_file.py",
    "1.3.2": [
        "_search(stderr)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "@pytest.mark.parametrize('test', tests)\ndef test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)"
    ],
    "1.4.2": [
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py",
        "tests/rules/test_fix_file.py"
    ],
    "2.1.1": [
        [
            "E       assert not <re.Match object; span=(26, 32), match='a.c:3:'>\nE        +  where <re.Match object; span=(26, 32), match='a.c:3:'> = match(Command(script='', stdout='', stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\"), None)\nE        +    where Command(script='', stdout='', stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\") = Command(stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 7), match='a.c:3:'>\nE        +  where <re.Match object; span=(1, 7), match='a.c:3:'> = match(Command(script='', stdout='', stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n') = Command(stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(14, 28), match='at a.pl line 3'>\nE        +  where <re.Match object; span=(14, 28), match='at a.pl line 3'> = match(Command(script='', stdout='', stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n') = Command(stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(31, 45), match='at a.pl line 2'>\nE        +  where <re.Match object; span=(31, 45), match='at a.pl line 2'> = match(Command(script='', stdout='', stderr='\\nSearch pattern not terminated at a.pl line 2.\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\nSearch pattern not terminated at a.pl line 2.\\n') = Command(stderr='\\nSearch pattern not terminated at a.pl line 2.\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 15), match='a.sh: line 2: '>\nE        +  where <re.Match object; span=(1, 15), match='a.sh: line 2: '> = match(Command(script='', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n') = Command(stderr='\\na.sh: line 2: foo: command not found\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 8), match='a.sh:2:'>\nE        +  where <re.Match object; span=(1, 8), match='a.sh:2:'> = match(Command(script='', stdout='', stderr='\\na.sh:2: command not found: foo\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\na.sh:2: command not found: foo\\n') = Command(stderr='\\na.sh:2: command not found: foo\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 15), match='a.sh: line 2: '>\nE        +  where <re.Match object; span=(1, 15), match='a.sh: line 2: '> = match(Command(script='', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n') = Command(stderr='\\na.sh: line 2: foo: command not found\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 8), match='a.rs:2:'>\nE        +  where <re.Match object; span=(1, 8), match='a.rs:2:'> = match(Command(script='', stdout='', stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n') = Command(stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(55, 72), match='   src/lib.rs:3:5'>\nE        +  where <re.Match object; span=(55, 72), match='   src/lib.rs:3:5'> = match(Command(script='', stdout='', stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 ...s:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 ...s:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n') = Command(stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/...rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')"
        ],
        [
            "E       assert not <re.Match object; span=(1, 22), match='  File \"a.py\", line 2'>\nE        +  where <re.Match object; span=(1, 22), match='  File \"a.py\", line 2'> = match(Command(script='', stdout='', stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n') = Command(stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n')"
        ],
        [
            "E       assert not <re.Match object; span=(36, 57), match='  File \"a.py\", line 8'>\nE        +  where <re.Match object; span=(36, 57), match='  File \"a.py\", line 8'> = match(Command(script='', stdout='', stderr='\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    ma...(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    ma...(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n') = Command(stderr='\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    match(\"foo\")\\n  File \"a.py\", line 5, in...r(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 8), match='a.rb:3:'>\nE        +  where <re.Match object; span=(1, 8), match='a.rb:3:'> = match(Command(script='', stdout='', stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n') = Command(stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n')"
        ],
        [
            "E       assert not <re.Match object; span=(1, 14), match='lua: a.lua:2:'>\nE        +  where <re.Match object; span=(1, 14), match='lua: a.lua:2:'> = match(Command(script='', stdout='', stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\"), None)\nE        +    where Command(script='', stdout='', stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\") = Command(stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\")"
        ],
        [
            "E       assert not <re.Match object; span=(29, 58), match='/tmp/fix-error/a.sh (line 2):'>\nE        +  where <re.Match object; span=(29, 58), match='/tmp/fix-error/a.sh (line 2):'> = match(Command(script='', stdout='', stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\"), None)\nE        +    where Command(script='', stdout='', stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\") = Command(stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\")"
        ],
        [
            "E       assert not <re.Match object; span=(1, 12), match='awk: ./a:2:'>\nE        +  where <re.Match object; span=(1, 12), match='awk: ./a:2:'> = match(Command(script='', stdout='', stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n') = Command(stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 15), match='llc: a.ll:1:1:'>\nE        +  where <re.Match object; span=(1, 15), match='llc: a.ll:1:1:'> = match(Command(script='', stdout='', stderr='\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n') = Command(stderr='\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n')"
        ],
        [
            "E       assert not <re.Match object; span=(21, 28), match='a.go:1:'>\nE        +  where <re.Match object; span=(21, 28), match='a.go:1:'> = match(Command(script='', stdout='', stderr=\"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\"), None)\nE        +    where Command(script='', stdout='', stderr=\"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\") = Command(stderr=\"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\")"
        ],
        [
            "E       assert not <re.Match object; span=(40, 51), match='Makefile:2:'>\nE        +  where <re.Match object; span=(40, 51), match='Makefile:2:'> = match(Command(script='', stdout='', stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\"), None)\nE        +    where Command(script='', stdout='', stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\") = Command(stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\")"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(1, 65), match='fatal: bad config file line 1 in /home/martin/.co>\nE        +  where <re.Match object; span=(1, 65), match='fatal: bad config file line 1 in /home/martin/.co> = match(Command(script='', stdout='', stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n') = Command(stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n')"
        ],
        [
            "E       AssertionError: assert not <re.Match object; span=(140, 191), match='    at /Users/pablo/Workspace/barebones/fuck.js:2>\nE        +  where <re.Match object; span=(140, 191), match='    at /Users/pablo/Workspace/barebones/fuck.js:2> = match(Command(script='', stdout='', stderr='\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg);  // this should r...s:310:12)\\n    at Function.Module.runMain (module.js:501:10)\\n    at startup (node.js:129:16)\\n    at node.js:814:3\\n'), None)\nE        +    where Command(script='', stdout='', stderr='\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg);  // this should r...s:310:12)\\n    at Function.Module.runMain (module.js:501:10)\\n    at startup (node.js:129:16)\\n    at node.js:814:3\\n') = Command(stderr='\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg);  // this should read console.log(arg);\\n^\\nReferenceEr...js:310:12)\\n    at Function.Module.runMain (module.js:501:10)\\n    at startup (node.js:129:16)\\n    at node.js:814:3\\n')"
        ]
    ],
    "2.1.2": [
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a1a6e10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a1a6d10>\ntest = ('gcc a.c', 'a.c', 3, 1, \"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a245790>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a245ed0>\ntest = ('clang a.c', 'a.c', 3, 1, '\\na.c:3:1: error: expected expression\\n}\\n^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a263f90>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a263690>\ntest = ('perl a.pl', 'a.pl', 3, None, '\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2acc10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2ac850>\ntest = ('perl a.pl', 'a.pl', 2, None, '\\nSearch pattern not terminated at a.pl line 2.\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a290ad0>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2909d0>\ntest = ('sh a.sh', 'a.sh', 2, None, '\\na.sh: line 2: foo: command not found\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2abb10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2aba50>\ntest = ('zsh a.sh', 'a.sh', 2, None, '\\na.sh:2: command not found: foo\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a295f50>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a295ad0>\ntest = ('bash a.sh', 'a.sh', 2, None, '\\na.sh: line 2: foo: command not found\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2a8450>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2a87d0>\ntest = ('rustc a.rs', 'a.rs', 2, 5, '\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2e5e50>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2e5c10>\ntest = ('cargo build', 'src/lib.rs', 3, 5, '\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 e...s:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2ef710>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2efe10>\ntest = ('python a.py', 'a.py', 2, None, '\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2ec290>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2ec850>\ntest = ('python a.py', 'a.py', 8, None, '\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    match(...(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2ef050>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2ef1d0>\ntest = ('ruby a.rb', 'a.rb', 3, None, '\\na.rb:3: syntax error, unexpected keyword_end\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2a5f50>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2a8610>\ntest = ('lua a.lua', 'a.lua', 2, None, \"\\nlua: a.lua:2: unexpected symbol near '+'\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2ab750>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2ab710>\ntest = ('fish a.sh', '/tmp/fix-error/a.sh', 2, None, \"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2ef090>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2ef410>\ntest = ('./a', './a', 2, None, '\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a26b790>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a26bc10>\ntest = ('llc a.ll', 'a.ll', 1, None, '\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2a8d90>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2a8810>\ntest = ('go build a.go', 'a.go', 1, None, \"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a263f90>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2631d0>\ntest = ('make', 'Makefile', 2, None, \"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\")\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2c2590>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2c2690>\ntest = ('git st', '/home/martin/.config/git/config', 1, None, '\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ],
        [
            "mocker = <pytest_mock.plugin.MockFixture object at 0x10a2ddd10>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10a2dda90>\ntest = ('node fuck.js asdf qwer', '/Users/pablo/Workspace/barebones/fuck.js', '2', 5, '\\n/Users/pablo/Workspace/barebones/fuc...s:310:12)\\n    at Function.Module.runMain (module.js:501:10)\\n    at startup (node.js:129:16)\\n    at node.js:814:3\\n')\n\n    @pytest.mark.parametrize('test', tests)\n    def test_not_file(mocker, monkeypatch, test):\n        mocker.patch('os.path.isfile', return_value=False)\n        monkeypatch.setenv('EDITOR', 'dummy_editor')\n    \n>       assert not match(Command(stderr=test[4]), None)",
            "\ntests/rules/test_fix_file.py:181: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "command.stderr": {
                    "value": "\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\"",
                    "shape": "86"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.c:3:1: error: expected expression\\n}\\n^\\n'",
                    "shape": "41"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n'",
                    "shape": "90"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nSearch pattern not terminated at a.pl line 2.\\n'",
                    "shape": "47"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nSearch pattern not terminated at a.pl line 2.\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh: line 2: foo: command not found\\n'",
                    "shape": "38"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh:2: command not found: foo\\n'",
                    "shape": "32"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.sh:2: command not found: foo\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n'",
                    "shape": "70"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n'",
                    "shape": "231"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n'",
                    "shape": "71"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    match(\"foo\")\\n  File \"a.py\", line 5, in match\\n    m = re.search(None, command)\\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\\n    return _compile(pattern, flags).search(string)\\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\\n    raise TypeError(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n'",
                    "shape": "450"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nTraceback (most recent call last) ... (\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rb:3: syntax error, unexpected keyword_end\\n'",
                    "shape": "46"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\"",
                    "shape": "42"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\")",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\"",
                    "shape": "95"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\")",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n'",
                    "shape": "106"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n'",
                    "shape": "53"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\"",
                    "shape": "61"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\")",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\"",
                    "shape": "115"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\")",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n'",
                    "shape": "66"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n')",
                    "shape": "3"
                }
            },
            {}
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n'",
                    "shape": "583"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n')",
                    "shape": "3"
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "command.stderr": {
                    "value": "\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\"",
                    "shape": "86"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\na.c: In function 'main':\\na.c:3:1: error: expected expression before '}' token\\n }\\n  ^\\n\")",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(26, 32), match='a.c:3:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.c:3:1: error: expected expression\\n}\\n^\\n'",
                    "shape": "41"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.c:3:1: error: expected expression\\n}\\n^\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 7), match='a.c:3:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n'",
                    "shape": "90"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nsyntax error at a.pl line 3, at EOF\\nExecution of a.pl aborted due to compilation errors.\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(14, 28), match='at a.pl line 3'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nSearch pattern not terminated at a.pl line 2.\\n'",
                    "shape": "47"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nSearch pattern not terminated at a.pl line 2.\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(31, 45), match='at a.pl line 2'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh: line 2: foo: command not found\\n'",
                    "shape": "38"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.sh: line 2: foo: command not found\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='a.sh: line 2: '>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.sh:2: command not found: foo\\n'",
                    "shape": "32"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.sh:2: command not found: foo\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.sh:2:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n'",
                    "shape": "70"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.rs:2:5: 2:6 error: unexpected token: `+`\\na.rs:2     +\\n           ^\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.rs:2:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n'",
                    "shape": "231"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\n   Compiling test v0.1.0 (file:///tmp/fix-error/test)\\n   src/lib.rs:3:5: 3:6 error: unexpected token: `+`\\n   src/lib.rs:3     +\\n                    ^\\nCould not compile `test`.\\n\\nTo learn more, run the command again with --verbose.\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(55, 72), match='   src/lib.rs:3:5'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n'",
                    "shape": "71"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\n  File \"a.py\", line 2\\n      +\\n          ^\\nSyntaxError: invalid syntax\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 22), match='  File \"a.py\", line 2'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nTraceback (most recent call last):\\n  File \"a.py\", line 8, in <module>\\n    match(\"foo\")\\n  File \"a.py\", line 5, in match\\n    m = re.search(None, command)\\n  File \"/usr/lib/python3.4/re.py\", line 170, in search\\n    return _compile(pattern, flags).search(string)\\n  File \"/usr/lib/python3.4/re.py\", line 293, in _compile\\n    raise TypeError(\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n'",
                    "shape": "450"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nTraceback (most recent call last) ... (\"first argument must be string or compiled pattern\")\\nTypeError: first argument must be string or compiled pattern\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(36, 57), match='  File \"a.py\", line 8'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\na.rb:3: syntax error, unexpected keyword_end\\n'",
                    "shape": "46"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\na.rb:3: syntax error, unexpected keyword_end\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 8), match='a.rb:3:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\"",
                    "shape": "42"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\nlua: a.lua:2: unexpected symbol near '+'\\n\")",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 14), match='lua: a.lua:2:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\"",
                    "shape": "95"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\nfish: Unknown command 'foo'\\n/tmp/fix-error/a.sh (line 2): foo\\n                              ^\\n\")",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(29, 58), match='/tmp/fix-error/a.sh (line 2):'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n'",
                    "shape": "106"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nawk: ./a:2: BEGIN { print \"Hello, world!\" + }\\nawk: ./a:2:                                 ^ syntax error\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 12), match='awk: ./a:2:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n'",
                    "shape": "53"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nllc: a.ll:1:1: error: expected top-level entity\\n+\\n^\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 15), match='llc: a.ll:1:1:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\"",
                    "shape": "61"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\ncan't load package:\\na.go:1:1: expected 'package', found '+'\\n\")",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(21, 28), match='a.go:1:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\"",
                    "shape": "115"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr=\"\\nbidule\\nmake: bidule: Command not found\\nMakefile:2: recipe for target 'target' failed\\nmake: *** [target] Error 127\\n\")",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(40, 51), match='Makefile:2:'>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n'",
                    "shape": "66"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\nfatal: bad config file line 1 in /home/martin/.config/git/config\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(1, 65), match='fatal: bad config file line 1 in /home/martin/.co>",
                    "shape": null
                }
            }
        ],
        [
            {
                "command.stderr": {
                    "value": "'\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n'",
                    "shape": "583"
                },
                "command": {
                    "value": "Command(script='', stdout='', stderr='\\n/Users/pablo/Workspace/barebones/fuck.js:2\\nconole.log(arg) ... (node.js:129:16)\\n    at node.js:814:3\\n')",
                    "shape": "3"
                }
            },
            {
                "m": {
                    "value": "<re.Match object; span=(140, 191), match='    at /Users/pablo/Workspace/barebones/fuck.js:2>",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ],
        [
            {
                "command.stderr": "str",
                "command": "Command"
            },
            {
                "m": "Match"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}