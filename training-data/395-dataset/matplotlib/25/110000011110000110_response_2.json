{
    "matplotlib": [
        {
            "bugID": 25,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1415,
            "file_name": "lib/matplotlib/collections.py",
            "replace_code": "def __init__(self,\n                 positions,  # Cannot be None.\n                 orientation=None,\n                 lineoffset=0,\n                 linelength=1,\n                 linewidth=None,\n                 color=None,\n                 linestyle='solid',\n                 antialiased=None,\n                 **kwargs\n                 ):\n        \"\"\"\n        Parameters\n        ----------\n        positions : 1D array-like object\n            Each value is an event.\n\n        orientation : {None, 'horizontal', 'vertical'}, optional\n            The orientation of the **collection** (the event bars are along\n            the orthogonal direction). Defaults to 'horizontal' if not\n            specified or None.\n\n        lineoffset : scalar, optional, default: 0\n            The offset of the center of the markers from the origin, in the\n            direction orthogonal to *orientation*.\n\n        linelength : scalar, optional, default: 1\n            The total height of the marker (i.e. the marker stretches from\n            ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n        linewidth : scalar or None, optional, default: None\n            If it is None, defaults to its rcParams setting, in sequence form.\n\n        color : color, sequence of colors or None, optional, default: None\n            If it is None, defaults to its rcParams setting, in sequence form.\n\n        linestyle : str or tuple, optional, default: 'solid'\n            Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n            '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n                (offset, onoffseq),\n\n            where *onoffseq* is an even length tuple of on and off ink\n            in points.\n\n        antialiased : {None, 1, 2}, optional\n            If it is None, defaults to its rcParams setting, in sequence form.\n\n        **kwargs : optional\n            Other keyword arguments are line collection properties.  See\n            :class:`~matplotlib.collections.LineCollection` for a list of\n            the valid properties.\n\n        Examples\n        --------\n\n        .. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py\n        \"\"\"\n\n        segment = (lineoffset + linelength / 2.,\n                   lineoffset - linelength / 2.)\n        if positions is None or len(positions) == 0:\n            segments = []\n        elif hasattr(positions, 'ndim') and positions.ndim > 1:\n            raise ValueError('positions cannot be an array with more than '\n                             'one dimension.')\n\n        # Convert positions to numpy array to ensure consistent behavior\n        positions = np.array(positions)\n\n        if (orientation is None or orientation.lower() == 'none' or\n                orientation.lower() == 'horizontal'):\n            positions.sort()\n            segments = [[(coord1, coord2) for coord2 in segment] for\n                        coord1 in positions]\n            self._is_horizontal = True\n        elif orientation.lower() == 'vertical':\n            positions.sort()\n            segments = [[(coord2, coord1) for coord2 in segment] for\n                        coord1 in positions]\n            self._is_horizontal = False\n        else:\n            cbook._check_in_list(['horizontal', 'vertical'],\n                                 orientation=orientation)\n\n        LineCollection.__init__(self,\n                                segments,\n                                linewidths=linewidth,\n                                colors=color,\n                                antialiaseds=antialiased,\n                                linestyles=linestyle,\n                                **kwargs)\n\n        self._linelength = linelength\n        self._lineoffset = lineoffset",
            "import_list": []
        }
    ]
}