{
    "matplotlib": [
        {
            "bugID": 25,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1415,
            "file_name": "lib/matplotlib/collections.py",
            "replace_code": "def __init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        positions : 1D array-like object\n            Each value is an event.\n        ...\n        Examples\n        ...\n        \"\"\"\n        segment = (lineoffset + linelength / 2., lineoffset - linelength / 2.)\n        \n        # Create a sorted copy of the positions array to avoid modifying the original array\n        sorted_positions = np.sort(positions)\n        \n        if positions is None or len(positions) == 0:\n            segments = []\n        elif hasattr(positions, 'ndim') and positions.ndim > 1:\n            raise ValueError('positions cannot be an array with more than one dimension.')\n        elif (orientation is None or orientation.lower() == 'none' or orientation.lower() == 'horizontal'):\n            segments = [[(coord1, coord2) for coord2 in segment] for coord1 in sorted_positions]\n            self._is_horizontal = True\n        elif orientation.lower() == 'vertical':\n            segments = [[(coord2, coord1) for coord2 in segment] for coord1 in sorted_positions]\n            self._is_horizontal = False\n        else:\n            cbook._check_in_list(['horizontal', 'vertical'], orientation=orientation)\n\n        LineCollection.__init__(self, segments, linewidths=linewidth, colors=color, antialiaseds=antialiased, linestyles=linestyle, **kwargs)\n\n        self._linelength = linelength\n        self._lineoffset = lineoffset",
            "imports": []
        }
    ]
}