{
    "matplotlib": [
        {
            "bugID": 25,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1415,
            "file_name": "lib/matplotlib/collections.py",
            "replace_code": "def __init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        positions : 1D array-like object\n            Each value is an event.\n        orientation : {None, 'horizontal', 'vertical'}, optional\n            The orientation of the **collection** (the event bars are along\n            the orthogonal direction). Defaults to 'horizontal' if not\n            specified or None.\n        lineoffset : scalar, optional, default: 0\n            The offset of the center of the markers from the origin, in the\n            direction orthogonal to *orientation*.\n        linelength : scalar, optional, default: 1\n            The total height of the marker (i.e. the marker stretches from\n            ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n        linewidth : scalar or None, optional, default: None\n            If it is None, defaults to its rcParams setting, in sequence form.\n        color : color, sequence of colors or None, optional, default: None\n            If it is None, defaults to its rcParams setting, in sequence form.\n        linestyle : str or tuple, optional, default: 'solid'\n            Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n            '-', '--', '-.', ':']. Dash tuples should be of the form::\n                (offset, onoffseq),\n            where *onoffseq* is an even length tuple of on and off ink\n            in points.\n        antialiased : {None, 1, 2}, optional\n            If it is None, defaults to its rcParams setting, in sequence form.\n        **kwargs : optional\n            Other keyword arguments are line collection properties.  See\n            :class:`~matplotlib.collections.LineCollection` for a list of\n            the valid properties.\n    \n\n        Examples\n        --------\n    \n        .. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py\n        \"\"\"\n        self._colors = mcolors.to_rgba_array(color, alpha=False)\n        self._linewidths = np.broadcast_to(linewidth, len(positions))\n        self._linestyles = linestyle\n        self.set_antialiased(antialiased)\n\n        self.set_segments(positions, orientation, lineoffset, linelength)",
            "imports": []
        }
    ]
}