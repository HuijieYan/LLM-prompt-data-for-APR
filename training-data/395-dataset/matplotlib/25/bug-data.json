{
    "matplotlib:25": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_25/lib/matplotlib/collections.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self,\n             positions,     # Cannot be None.\n             orientation=None,\n             lineoffset=0,\n             linelength=1,\n             linewidth=None,\n             color=None,\n             linestyle='solid',\n             antialiased=None,\n             **kwargs\n             ):\n    \"\"\"\n    Parameters\n    ----------\n    positions : 1D array-like object\n        Each value is an event.\n\n    orientation : {None, 'horizontal', 'vertical'}, optional\n        The orientation of the **collection** (the event bars are along\n        the orthogonal direction). Defaults to 'horizontal' if not\n        specified or None.\n\n    lineoffset : scalar, optional, default: 0\n        The offset of the center of the markers from the origin, in the\n        direction orthogonal to *orientation*.\n\n    linelength : scalar, optional, default: 1\n        The total height of the marker (i.e. the marker stretches from\n        ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n    linewidth : scalar or None, optional, default: None\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    color : color, sequence of colors or None, optional, default: None\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    linestyle : str or tuple, optional, default: 'solid'\n        Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n        '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n            (offset, onoffseq),\n\n        where *onoffseq* is an even length tuple of on and off ink\n        in points.\n\n    antialiased : {None, 1, 2}, optional\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    **kwargs : optional\n        Other keyword arguments are line collection properties.  See\n        :class:`~matplotlib.collections.LineCollection` for a list of\n        the valid properties.\n\n    Examples\n    --------\n\n    .. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py\n    \"\"\"\n\n    segment = (lineoffset + linelength / 2.,\n               lineoffset - linelength / 2.)\n    if positions is None or len(positions) == 0:\n        segments = []\n    elif hasattr(positions, 'ndim') and positions.ndim > 1:\n        raise ValueError('positions cannot be an array with more than '\n                         'one dimension.')\n    elif (orientation is None or orientation.lower() == 'none' or\n          orientation.lower() == 'horizontal'):\n        positions.sort()\n        segments = [[(coord1, coord2) for coord2 in segment] for\n                    coord1 in positions]\n        self._is_horizontal = True\n    elif orientation.lower() == 'vertical':\n        positions.sort()\n        segments = [[(coord2, coord1) for coord2 in segment] for\n                    coord1 in positions]\n        self._is_horizontal = False\n    else:\n        cbook._check_in_list(['horizontal', 'vertical'],\n                             orientation=orientation)\n\n    LineCollection.__init__(self,\n                            segments,\n                            linewidths=linewidth,\n                            colors=color,\n                            antialiaseds=antialiased,\n                            linestyles=linestyle,\n                            **kwargs)\n\n    self._linelength = linelength\n    self._lineoffset = lineoffset\n",
                    "decorators": [],
                    "docstring": "Parameters\n----------\npositions : 1D array-like object\n    Each value is an event.\n\norientation : {None, 'horizontal', 'vertical'}, optional\n    The orientation of the **collection** (the event bars are along\n    the orthogonal direction). Defaults to 'horizontal' if not\n    specified or None.\n\nlineoffset : scalar, optional, default: 0\n    The offset of the center of the markers from the origin, in the\n    direction orthogonal to *orientation*.\n\nlinelength : scalar, optional, default: 1\n    The total height of the marker (i.e. the marker stretches from\n    ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\nlinewidth : scalar or None, optional, default: None\n    If it is None, defaults to its rcParams setting, in sequence form.\n\ncolor : color, sequence of colors or None, optional, default: None\n    If it is None, defaults to its rcParams setting, in sequence form.\n\nlinestyle : str or tuple, optional, default: 'solid'\n    Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n    '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n        (offset, onoffseq),\n\n    where *onoffseq* is an even length tuple of on and off ink\n    in points.\n\nantialiased : {None, 1, 2}, optional\n    If it is None, defaults to its rcParams setting, in sequence form.\n\n**kwargs : optional\n    Other keyword arguments are line collection properties.  See\n    :class:`~matplotlib.collections.LineCollection` for a list of\n    the valid properties.\n\nExamples\n--------\n\n.. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py",
                    "start_line": 1415,
                    "end_line": 1505,
                    "variables": {
                        "segment": [
                            1489,
                            1474,
                            1484
                        ],
                        "lineoffset": [
                            1505,
                            1474,
                            1475
                        ],
                        "linelength": [
                            1504,
                            1474,
                            1475
                        ],
                        "positions": [
                            1476,
                            1478,
                            1483,
                            1485,
                            1488,
                            1490
                        ],
                        "len": [
                            1476
                        ],
                        "segments": [
                            1489,
                            1484,
                            1477,
                            1497
                        ],
                        "hasattr": [
                            1478
                        ],
                        "positions.ndim": [
                            1478
                        ],
                        "ValueError": [
                            1479
                        ],
                        "orientation": [
                            1481,
                            1482,
                            1494,
                            1487
                        ],
                        "orientation.lower": [
                            1481,
                            1482,
                            1487
                        ],
                        "positions.sort": [
                            1488,
                            1483
                        ],
                        "coord1": [
                            1489,
                            1490,
                            1484,
                            1485
                        ],
                        "coord2": [
                            1489,
                            1484
                        ],
                        "self._is_horizontal": [
                            1491,
                            1486
                        ],
                        "self": [
                            1504,
                            1505,
                            1486,
                            1491,
                            1496
                        ],
                        "cbook._check_in_list": [
                            1493
                        ],
                        "cbook": [
                            1493
                        ],
                        "LineCollection.__init__": [
                            1496
                        ],
                        "LineCollection": [
                            1496
                        ],
                        "linewidth": [
                            1498
                        ],
                        "color": [
                            1499
                        ],
                        "antialiased": [
                            1500
                        ],
                        "linestyle": [
                            1501
                        ],
                        "kwargs": [
                            1502
                        ],
                        "self._linelength": [
                            1504
                        ],
                        "self._lineoffset": [
                            1505
                        ]
                    },
                    "filtered_variables": {
                        "segment": [
                            1489,
                            1474,
                            1484
                        ],
                        "lineoffset": [
                            1505,
                            1474,
                            1475
                        ],
                        "linelength": [
                            1504,
                            1474,
                            1475
                        ],
                        "positions": [
                            1476,
                            1478,
                            1483,
                            1485,
                            1488,
                            1490
                        ],
                        "segments": [
                            1489,
                            1484,
                            1477,
                            1497
                        ],
                        "positions.ndim": [
                            1478
                        ],
                        "orientation": [
                            1481,
                            1482,
                            1494,
                            1487
                        ],
                        "orientation.lower": [
                            1481,
                            1482,
                            1487
                        ],
                        "positions.sort": [
                            1488,
                            1483
                        ],
                        "coord1": [
                            1489,
                            1490,
                            1484,
                            1485
                        ],
                        "coord2": [
                            1489,
                            1484
                        ],
                        "self._is_horizontal": [
                            1491,
                            1486
                        ],
                        "self": [
                            1504,
                            1505,
                            1486,
                            1491,
                            1496
                        ],
                        "cbook._check_in_list": [
                            1493
                        ],
                        "cbook": [
                            1493
                        ],
                        "LineCollection.__init__": [
                            1496
                        ],
                        "LineCollection": [
                            1496
                        ],
                        "linewidth": [
                            1498
                        ],
                        "color": [
                            1499
                        ],
                        "antialiased": [
                            1500
                        ],
                        "linestyle": [
                            1501
                        ],
                        "kwargs": [
                            1502
                        ],
                        "self._linelength": [
                            1504
                        ],
                        "self._lineoffset": [
                            1505
                        ]
                    },
                    "diff_line_number": 1473,
                    "class_data": {
                        "signature": "class EventCollection(LineCollection)",
                        "docstring": "A collection of discrete events.\n\nThe events are given by a 1-dimensional array, usually the position of\nsomething along an axis, such as time or length.  They do not have an\namplitude and are displayed as vertical or horizontal parallel bars.",
                        "constructor_docstring": "Parameters\n----------\npositions : 1D array-like object\n    Each value is an event.\n\norientation : {None, 'horizontal', 'vertical'}, optional\n    The orientation of the **collection** (the event bars are along\n    the orthogonal direction). Defaults to 'horizontal' if not\n    specified or None.\n\nlineoffset : scalar, optional, default: 0\n    The offset of the center of the markers from the origin, in the\n    direction orthogonal to *orientation*.\n\nlinelength : scalar, optional, default: 1\n    The total height of the marker (i.e. the marker stretches from\n    ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\nlinewidth : scalar or None, optional, default: None\n    If it is None, defaults to its rcParams setting, in sequence form.\n\ncolor : color, sequence of colors or None, optional, default: None\n    If it is None, defaults to its rcParams setting, in sequence form.\n\nlinestyle : str or tuple, optional, default: 'solid'\n    Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n    '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n        (offset, onoffseq),\n\n    where *onoffseq* is an even length tuple of on and off ink\n    in points.\n\nantialiased : {None, 1, 2}, optional\n    If it is None, defaults to its rcParams setting, in sequence form.\n\n**kwargs : optional\n    Other keyword arguments are line collection properties.  See\n    :class:`~matplotlib.collections.LineCollection` for a list of\n    the valid properties.\n\nExamples\n--------\n\n.. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py",
                        "functions": [
                            "def __init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    positions : 1D array-like object\n        Each value is an event.\n\n    orientation : {None, 'horizontal', 'vertical'}, optional\n        The orientation of the **collection** (the event bars are along\n        the orthogonal direction). Defaults to 'horizontal' if not\n        specified or None.\n\n    lineoffset : scalar, optional, default: 0\n        The offset of the center of the markers from the origin, in the\n        direction orthogonal to *orientation*.\n\n    linelength : scalar, optional, default: 1\n        The total height of the marker (i.e. the marker stretches from\n        ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n    linewidth : scalar or None, optional, default: None\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    color : color, sequence of colors or None, optional, default: None\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    linestyle : str or tuple, optional, default: 'solid'\n        Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n        '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n            (offset, onoffseq),\n\n        where *onoffseq* is an even length tuple of on and off ink\n        in points.\n\n    antialiased : {None, 1, 2}, optional\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    **kwargs : optional\n        Other keyword arguments are line collection properties.  See\n        :class:`~matplotlib.collections.LineCollection` for a list of\n        the valid properties.\n\n    Examples\n    --------\n\n    .. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py\n    \"\"\"\n    segment = (lineoffset + linelength / 2.0, lineoffset - linelength / 2.0)\n    if positions is None or len(positions) == 0:\n        segments = []\n    elif hasattr(positions, 'ndim') and positions.ndim > 1:\n        raise ValueError('positions cannot be an array with more than one dimension.')\n    elif orientation is None or orientation.lower() == 'none' or orientation.lower() == 'horizontal':\n        positions.sort()\n        segments = [[(coord1, coord2) for coord2 in segment] for coord1 in positions]\n        self._is_horizontal = True\n    elif orientation.lower() == 'vertical':\n        positions.sort()\n        segments = [[(coord2, coord1) for coord2 in segment] for coord1 in positions]\n        self._is_horizontal = False\n    else:\n        cbook._check_in_list(['horizontal', 'vertical'], orientation=orientation)\n    LineCollection.__init__(self, segments, linewidths=linewidth, colors=color, antialiaseds=antialiased, linestyles=linestyle, **kwargs)\n    self._linelength = linelength\n    self._lineoffset = lineoffset",
                            "def get_positions(self):\n    \"\"\"\n    return an array containing the floating-point values of the positions\n    \"\"\"\n    segments = self.get_segments()\n    pos = 0 if self.is_horizontal() else 1\n    return [segment[0, pos] for segment in self.get_segments()]",
                            "def set_positions(self, positions):\n    \"\"\"\n    set the positions of the events to the specified value\n    \"\"\"\n    if positions is None or (hasattr(positions, 'len') and len(positions) == 0):\n        self.set_segments([])\n        return\n    lineoffset = self.get_lineoffset()\n    linelength = self.get_linelength()\n    segment = (lineoffset + linelength / 2.0, lineoffset - linelength / 2.0)\n    positions = np.asanyarray(positions)\n    positions.sort()\n    if self.is_horizontal():\n        segments = [[(coord1, coord2) for coord2 in segment] for coord1 in positions]\n    else:\n        segments = [[(coord2, coord1) for coord2 in segment] for coord1 in positions]\n    self.set_segments(segments)",
                            "def add_positions(self, position):\n    \"\"\"\n    add one or more events at the specified positions\n    \"\"\"\n    if position is None or (hasattr(position, 'len') and len(position) == 0):\n        return\n    positions = self.get_positions()\n    positions = np.hstack([positions, np.asanyarray(position)])\n    self.set_positions(positions)",
                            "def is_horizontal(self):\n    \"\"\"\n    True if the eventcollection is horizontal, False if vertical\n    \"\"\"\n    return self._is_horizontal",
                            "def get_orientation(self):\n    \"\"\"\n    get the orientation of the event line, may be:\n    [ 'horizontal' | 'vertical' ]\n    \"\"\"\n    return 'horizontal' if self.is_horizontal() else 'vertical'",
                            "def switch_orientation(self):\n    \"\"\"\n    switch the orientation of the event line, either from vertical to\n    horizontal or vice versus\n    \"\"\"\n    segments = self.get_segments()\n    for i, segment in enumerate(segments):\n        segments[i] = np.fliplr(segment)\n    self.set_segments(segments)\n    self._is_horizontal = not self.is_horizontal()\n    self.stale = True",
                            "def set_orientation(self, orientation=None):\n    \"\"\"\n    set the orientation of the event line\n    [ 'horizontal' | 'vertical' | None ]\n    defaults to 'horizontal' if not specified or None\n    \"\"\"\n    if orientation is None or orientation.lower() == 'none' or orientation.lower() == 'horizontal':\n        is_horizontal = True\n    elif orientation.lower() == 'vertical':\n        is_horizontal = False\n    else:\n        cbook._check_in_list(['horizontal', 'vertical'], orientation=orientation)\n    if is_horizontal == self.is_horizontal():\n        return\n    self.switch_orientation()",
                            "def get_linelength(self):\n    \"\"\"\n    get the length of the lines used to mark each event\n    \"\"\"\n    return self._linelength",
                            "def set_linelength(self, linelength):\n    \"\"\"\n    set the length of the lines used to mark each event\n    \"\"\"\n    if linelength == self.get_linelength():\n        return\n    lineoffset = self.get_lineoffset()\n    segments = self.get_segments()\n    pos = 1 if self.is_horizontal() else 0\n    for segment in segments:\n        segment[0, pos] = lineoffset + linelength / 2.0\n        segment[1, pos] = lineoffset - linelength / 2.0\n    self.set_segments(segments)\n    self._linelength = linelength",
                            "def get_lineoffset(self):\n    \"\"\"\n    get the offset of the lines used to mark each event\n    \"\"\"\n    return self._lineoffset",
                            "def set_lineoffset(self, lineoffset):\n    \"\"\"\n    set the offset of the lines used to mark each event\n    \"\"\"\n    if lineoffset == self.get_lineoffset():\n        return\n    linelength = self.get_linelength()\n    segments = self.get_segments()\n    pos = 1 if self.is_horizontal() else 0\n    for segment in segments:\n        segment[0, pos] = lineoffset + linelength / 2.0\n        segment[1, pos] = lineoffset - linelength / 2.0\n    self.set_segments(segments)\n    self._lineoffset = lineoffset",
                            "def get_linewidth(self):\n    \"\"\"Get the width of the lines used to mark each event.\"\"\"\n    return super(EventCollection, self).get_linewidth()[0]",
                            "def get_linewidths(self):\n    return super(EventCollection, self).get_linewidth()",
                            "def get_color(self):\n    \"\"\"\n    get the color of the lines used to mark each event\n    \"\"\"\n    return self.get_colors()[0]"
                        ],
                        "constructor_variables": [
                            "_linelength",
                            "segment",
                            "_lineoffset",
                            "segments",
                            "_is_horizontal"
                        ],
                        "class_level_variables": [
                            "_edge_default",
                            "extend_positions",
                            "append_positions"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs)",
                            "get_positions(self)",
                            "set_positions(self, positions)",
                            "add_positions(self, position)",
                            "is_horizontal(self)",
                            "get_orientation(self)",
                            "switch_orientation(self)",
                            "set_orientation(self, orientation=None)",
                            "get_linelength(self)",
                            "set_linelength(self, linelength)",
                            "get_lineoffset(self)",
                            "set_lineoffset(self, lineoffset)",
                            "get_linewidth(self)",
                            "get_linewidths(self)",
                            "get_color(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "segment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lineoffset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "linelength": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "positions": {
                                    "variable_value": "array([ 3,  2,  1, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "segments": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "positions.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "orientation.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "positions.sort": {
                                    "variable_value": "<built-in method sort of numpy.ndarray object at 0x1131fd810>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "coord1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "coord2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._is_horizontal": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.collections.EventCollection object at 0x113b8e970>",
                                    "variable_type": "EventCollection",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "linewidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "antialiased": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linestyle": {
                                    "variable_value": "'solid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._linelength": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._lineoffset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "segment": {
                                    "variable_value": "(0.5, -0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "lineoffset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "linelength": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "positions": {
                                    "variable_value": "array([ 1,  2,  3, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "segments": {
                                    "variable_value": "[[(1, 0.5), (1, -0.5)], [(2, 0.5), (2, -0.5)], [(3, 0.5), (3, -0.5)], [(10, 0.5), (10, -0.5)]]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "positions.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "orientation.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "positions.sort": {
                                    "variable_value": "<built-in method sort of numpy.ndarray object at 0x1131fd810>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "coord1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "coord2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._is_horizontal": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.collections.EventCollection object at 0x113b8e970>",
                                    "variable_type": "EventCollection",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "linewidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "antialiased": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linestyle": {
                                    "variable_value": "'solid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._linelength": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._lineoffset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "positions": {
                                    "variable_value": "array([ 3,  2,  1, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "segment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lineoffset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "linelength": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "positions.size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "segments": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "positions.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "orientation.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "positions.sort": {
                                    "variable_value": "<built-in method sort of numpy.ndarray object at 0x1152f9810>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "coord1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "coord2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._is_horizontal": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.collections.EventCollection object at 0x115cbfd00>",
                                    "variable_type": "EventCollection",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "linewidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "antialiased": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linestyle": {
                                    "variable_value": "'solid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._linelength": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._lineoffset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "positions": {
                                    "variable_value": "array([ 1,  2,  3, 10])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "segment": {
                                    "variable_value": "(0.5, -0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "lineoffset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "linelength": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "positions.size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "segments": {
                                    "variable_value": "[[(1, 0.5), (1, -0.5)], [(2, 0.5), (2, -0.5)], [(3, 0.5), (3, -0.5)], [(10, 0.5), (10, -0.5)]]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "positions.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "orientation.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "positions.sort": {
                                    "variable_value": "<built-in method sort of numpy.ndarray object at 0x115cb0bd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "coord1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "coord2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._is_horizontal": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.collections.EventCollection object at 0x115cbfd00>",
                                    "variable_type": "EventCollection",
                                    "variable_shape": null
                                },
                                "cbook._check_in_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "LineCollection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "linewidth": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "color": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "antialiased": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linestyle": {
                                    "variable_value": "'solid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._linelength": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._lineoffset": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self,\n             edgecolors=None,\n             facecolors=None,\n             linewidths=None,\n             linestyles='solid',\n             capstyle=None,\n             joinstyle=None,\n             antialiaseds=None,\n             offsets=None,\n             transOffset=None,\n             norm=None,  # optional for ScalarMappable\n             cmap=None,  # ditto\n             pickradius=5.0,\n             hatch=None,\n             urls=None,\n             offset_position='screen',\n             zorder=1,\n             **kwargs\n             ):\n    \"\"\"\n    Create a Collection\n\n    %(Collection)s\n    \"\"\"\n    artist.Artist.__init__(self)\n    cm.ScalarMappable.__init__(self, norm, cmap)\n    # list of un-scaled dash patterns\n    # this is needed scaling the dash pattern by linewidth\n    self._us_linestyles = [(None, None)]\n    # list of dash patterns\n    self._linestyles = [(None, None)]\n    # list of unbroadcast/scaled linewidths\n    self._us_lw = [0]\n    self._linewidths = [0]\n    self._is_filled = True  # May be modified by set_facecolor().\n\n    self._hatch_color = mcolors.to_rgba(mpl.rcParams['hatch.color'])\n    self.set_facecolor(facecolors)\n    self.set_edgecolor(edgecolors)\n    self.set_linewidth(linewidths)\n    self.set_linestyle(linestyles)\n    self.set_antialiased(antialiaseds)\n    self.set_pickradius(pickradius)\n    self.set_urls(urls)\n    self.set_hatch(hatch)\n    self.set_offset_position(offset_position)\n    self.set_zorder(zorder)\n\n    if capstyle:\n        self.set_capstyle(capstyle)\n    else:\n        self._capstyle = None\n\n    if joinstyle:\n        self.set_joinstyle(joinstyle)\n    else:\n        self._joinstyle = None\n\n    self._offsets = np.zeros((1, 2))\n    self._uniform_offsets = None\n    if offsets is not None:\n        offsets = np.asanyarray(offsets, float)\n        # Broadcast (2,) -> (1, 2) but nothing else.\n        if offsets.shape == (2,):\n            offsets = offsets[None, :]\n        if transOffset is not None:\n            self._offsets = offsets\n            self._transOffset = transOffset\n        else:\n            self._uniform_offsets = offsets\n\n    self._path_effects = None\n    self.update(kwargs)\n    self._paths = None",
                "def get_paths(self):\n    return self._paths",
                "def set_paths(self):\n    raise NotImplementedError",
                "def get_transforms(self):\n    return self._transforms",
                "def get_offset_transform(self):\n    t = self._transOffset\n    if (not isinstance(t, transforms.Transform)\n            and hasattr(t, '_as_mpl_transform')):\n        t = t._as_mpl_transform(self.axes)\n    return t",
                "def get_datalim(self, transData):\n    transform = self.get_transform()\n    transOffset = self.get_offset_transform()\n    offsets = self._offsets\n    paths = self.get_paths()\n\n    if not transform.is_affine:\n        paths = [transform.transform_path_non_affine(p) for p in paths]\n        transform = transform.get_affine()\n    if not transOffset.is_affine:\n        offsets = transOffset.transform_non_affine(offsets)\n        transOffset = transOffset.get_affine()\n\n    if isinstance(offsets, np.ma.MaskedArray):\n        offsets = offsets.filled(np.nan)\n        # get_path_collection_extents handles nan but not masked arrays\n\n    if len(paths) and len(offsets):\n        result = mpath.get_path_collection_extents(\n            transform.frozen(), paths, self.get_transforms(),\n            offsets, transOffset.frozen())\n        result = result.inverse_transformed(transData)\n    else:\n        result = transforms.Bbox.null()\n    return result",
                "def get_window_extent(self, renderer):\n    # TODO: check to ensure that this does not fail for\n    # cases other than scatter plot legend\n    return self.get_datalim(transforms.IdentityTransform())",
                "def _prepare_points(self):\n    # Helper for drawing and hit testing.\n\n    transform = self.get_transform()\n    transOffset = self.get_offset_transform()\n    offsets = self._offsets\n    paths = self.get_paths()\n\n    if self.have_units():\n        paths = []\n        for path in self.get_paths():\n            vertices = path.vertices\n            xs, ys = vertices[:, 0], vertices[:, 1]\n            xs = self.convert_xunits(xs)\n            ys = self.convert_yunits(ys)\n            paths.append(mpath.Path(np.column_stack([xs, ys]), path.codes))\n        if offsets.size:\n            xs = self.convert_xunits(offsets[:, 0])\n            ys = self.convert_yunits(offsets[:, 1])\n            offsets = np.column_stack([xs, ys])\n\n    if not transform.is_affine:\n        paths = [transform.transform_path_non_affine(path)\n                 for path in paths]\n        transform = transform.get_affine()\n    if not transOffset.is_affine:\n        offsets = transOffset.transform_non_affine(offsets)\n        # This might have changed an ndarray into a masked array.\n        transOffset = transOffset.get_affine()\n\n    if isinstance(offsets, np.ma.MaskedArray):\n        offsets = offsets.filled(np.nan)\n        # Changing from a masked array to nan-filled ndarray\n        # is probably most efficient at this point.\n\n    return transform, transOffset, offsets, paths",
                "@artist.allow_rasterization\ndef draw(self, renderer):\n    if not self.get_visible():\n        return\n    renderer.open_group(self.__class__.__name__, self.get_gid())\n\n    self.update_scalarmappable()\n\n    transform, transOffset, offsets, paths = self._prepare_points()\n\n    gc = renderer.new_gc()\n    self._set_gc_clip(gc)\n    gc.set_snap(self.get_snap())\n\n    if self._hatch:\n        gc.set_hatch(self._hatch)\n        try:\n            gc.set_hatch_color(self._hatch_color)\n        except AttributeError:\n            # if we end up with a GC that does not have this method\n            cbook.warn_deprecated(\n                \"3.1\", message=\"Your backend does not support setting the \"\n                \"hatch color; such backends will become unsupported in \"\n                \"Matplotlib 3.3.\")\n\n    if self.get_sketch_params() is not None:\n        gc.set_sketch_params(*self.get_sketch_params())\n\n    if self.get_path_effects():\n        from matplotlib.patheffects import PathEffectRenderer\n        renderer = PathEffectRenderer(self.get_path_effects(), renderer)\n\n    # If the collection is made up of a single shape/color/stroke,\n    # it can be rendered once and blitted multiple times, using\n    # `draw_markers` rather than `draw_path_collection`.  This is\n    # *much* faster for Agg, and results in smaller file sizes in\n    # PDF/SVG/PS.\n\n    trans = self.get_transforms()\n    facecolors = self.get_facecolor()\n    edgecolors = self.get_edgecolor()\n    do_single_path_optimization = False\n    if (len(paths) == 1 and len(trans) <= 1 and\n        len(facecolors) == 1 and len(edgecolors) == 1 and\n        len(self._linewidths) == 1 and\n        self._linestyles == [(None, None)] and\n        len(self._antialiaseds) == 1 and len(self._urls) == 1 and\n        self.get_hatch() is None):\n        if len(trans):\n            combined_transform = (transforms.Affine2D(trans[0]) +\n                                  transform)\n        else:\n            combined_transform = transform\n        extents = paths[0].get_extents(combined_transform)\n        width, height = renderer.get_canvas_width_height()\n        if extents.width < width and extents.height < height:\n            do_single_path_optimization = True\n\n    if self._joinstyle:\n        gc.set_joinstyle(self._joinstyle)\n\n    if self._capstyle:\n        gc.set_capstyle(self._capstyle)\n\n    if do_single_path_optimization:\n        gc.set_foreground(tuple(edgecolors[0]))\n        gc.set_linewidth(self._linewidths[0])\n        gc.set_dashes(*self._linestyles[0])\n        gc.set_antialiased(self._antialiaseds[0])\n        gc.set_url(self._urls[0])\n        renderer.draw_markers(\n            gc, paths[0], combined_transform.frozen(),\n            mpath.Path(offsets), transOffset, tuple(facecolors[0]))\n    else:\n        renderer.draw_path_collection(\n            gc, transform.frozen(), paths,\n            self.get_transforms(), offsets, transOffset,\n            self.get_facecolor(), self.get_edgecolor(),\n            self._linewidths, self._linestyles,\n            self._antialiaseds, self._urls,\n            self._offset_position)\n\n    gc.restore()\n    renderer.close_group(self.__class__.__name__)\n    self.stale = False",
                "def set_pickradius(self, pr):\n    \"\"\"\n    Set the pick radius used for containment tests.\n\n    Parameters\n    ----------\n    d : float\n        Pick radius, in points.\n    \"\"\"\n    self._pickradius = pr",
                "def get_pickradius(self):\n    return self._pickradius",
                "def contains(self, mouseevent):\n    \"\"\"\n    Test whether the mouse event occurred in the collection.\n\n    Returns ``bool, dict(ind=itemlist)``, where every item in itemlist\n    contains the event.\n    \"\"\"\n    if self._contains is not None:\n        return self._contains(self, mouseevent)\n\n    if not self.get_visible():\n        return False, {}\n\n    pickradius = (\n        float(self._picker)\n        if isinstance(self._picker, Number) and\n           self._picker is not True  # the bool, not just nonzero or 1\n        else self._pickradius)\n\n    transform, transOffset, offsets, paths = self._prepare_points()\n\n    ind = _path.point_in_path_collection(\n        mouseevent.x, mouseevent.y, pickradius,\n        transform.frozen(), paths, self.get_transforms(),\n        offsets, transOffset, pickradius <= 0,\n        self.get_offset_position())\n\n    return len(ind) > 0, dict(ind=ind)",
                "def set_urls(self, urls):\n    \"\"\"\n    Parameters\n    ----------\n    urls : List[str] or None\n    \"\"\"\n    self._urls = urls if urls is not None else [None]\n    self.stale = True",
                "def get_urls(self):\n    return self._urls",
                "def set_hatch(self, hatch):\n    r\"\"\"\n    Set the hatching pattern\n\n    *hatch* can be one of::\n\n      /   - diagonal hatching\n      \\   - back diagonal\n      |   - vertical\n      -   - horizontal\n      +   - crossed\n      x   - crossed diagonal\n      o   - small circle\n      O   - large circle\n      .   - dots\n      *   - stars\n\n    Letters can be combined, in which case all the specified\n    hatchings are done.  If same letter repeats, it increases the\n    density of hatching of that pattern.\n\n    Hatching is supported in the PostScript, PDF, SVG and Agg\n    backends only.\n\n    Unlike other properties such as linewidth and colors, hatching\n    can only be specified for the collection as a whole, not separately\n    for each member.\n\n    Parameters\n    ----------\n    hatch : {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    \"\"\"\n    self._hatch = hatch\n    self.stale = True",
                "def get_hatch(self):\n    \"\"\"Return the current hatching pattern.\"\"\"\n    return self._hatch",
                "def set_offsets(self, offsets):\n    \"\"\"\n    Set the offsets for the collection.\n\n    Parameters\n    ----------\n    offsets : float or sequence of floats\n    \"\"\"\n    offsets = np.asanyarray(offsets, float)\n    if offsets.shape == (2,):  # Broadcast (2,) -> (1, 2) but nothing else.\n        offsets = offsets[None, :]\n    # This decision is based on how they are initialized above in __init__.\n    if self._uniform_offsets is None:\n        self._offsets = offsets\n    else:\n        self._uniform_offsets = offsets\n    self.stale = True",
                "def get_offsets(self):\n    \"\"\"Return the offsets for the collection.\"\"\"\n    # This decision is based on how they are initialized above in __init__.\n    if self._uniform_offsets is None:\n        return self._offsets\n    else:\n        return self._uniform_offsets",
                "def set_offset_position(self, offset_position):\n    \"\"\"\n    Set how offsets are applied.  If *offset_position* is 'screen'\n    (default) the offset is applied after the master transform has\n    been applied, that is, the offsets are in screen coordinates.\n    If offset_position is 'data', the offset is applied before the\n    master transform, i.e., the offsets are in data coordinates.\n\n    Parameters\n    ----------\n    offset_position : {'screen', 'data'}\n    \"\"\"\n    cbook._check_in_list(['screen', 'data'],\n                         offset_position=offset_position)\n    self._offset_position = offset_position\n    self.stale = True",
                "def get_offset_position(self):\n    \"\"\"\n    Returns how offsets are applied for the collection.  If\n    *offset_position* is 'screen', the offset is applied after the\n    master transform has been applied, that is, the offsets are in\n    screen coordinates.  If offset_position is 'data', the offset\n    is applied before the master transform, i.e., the offsets are\n    in data coordinates.\n    \"\"\"\n    return self._offset_position",
                "def set_linewidth(self, lw):\n    \"\"\"\n    Set the linewidth(s) for the collection.  *lw* can be a scalar\n    or a sequence; if it is a sequence the patches will cycle\n    through the sequence\n\n    Parameters\n    ----------\n    lw : float or sequence of floats\n    \"\"\"\n    if lw is None:\n        lw = mpl.rcParams['patch.linewidth']\n        if lw is None:\n            lw = mpl.rcParams['lines.linewidth']\n    # get the un-scaled/broadcast lw\n    self._us_lw = np.atleast_1d(np.asarray(lw))\n\n    # scale all of the dash patterns.\n    self._linewidths, self._linestyles = self._bcast_lwls(\n        self._us_lw, self._us_linestyles)\n    self.stale = True",
                "def set_linestyle(self, ls):\n    \"\"\"\n    Set the linestyle(s) for the collection.\n\n    ===========================   =================\n    linestyle                     description\n    ===========================   =================\n    ``'-'`` or ``'solid'``        solid line\n    ``'--'`` or  ``'dashed'``     dashed line\n    ``'-.'`` or  ``'dashdot'``    dash-dotted line\n    ``':'`` or ``'dotted'``       dotted line\n    ===========================   =================\n\n    Alternatively a dash tuple of the following form can be provided::\n\n        (offset, onoffseq),\n\n    where ``onoffseq`` is an even length tuple of on and off ink in points.\n\n    Parameters\n    ----------\n    ls : {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n        The line style.\n    \"\"\"\n    try:\n        if isinstance(ls, str):\n            ls = cbook.ls_mapper.get(ls, ls)\n            dashes = [mlines._get_dash_pattern(ls)]\n        else:\n            try:\n                dashes = [mlines._get_dash_pattern(ls)]\n            except ValueError:\n                dashes = [mlines._get_dash_pattern(x) for x in ls]\n\n    except ValueError:\n        raise ValueError(\n            'Do not know how to convert {!r} to dashes'.format(ls))\n\n    # get the list of raw 'unscaled' dash patterns\n    self._us_linestyles = dashes\n\n    # broadcast and scale the lw and dash patterns\n    self._linewidths, self._linestyles = self._bcast_lwls(\n        self._us_lw, self._us_linestyles)",
                "def set_capstyle(self, cs):\n    \"\"\"\n    Set the capstyle for the collection (for all its elements).\n\n    Parameters\n    ----------\n    cs : {'butt', 'round', 'projecting'}\n        The capstyle\n    \"\"\"\n    if cs in ('butt', 'round', 'projecting'):\n        self._capstyle = cs\n    else:\n        raise ValueError('Unrecognized cap style.  Found %s' % cs)",
                "def get_capstyle(self):\n    return self._capstyle",
                "def set_joinstyle(self, js):\n    \"\"\"\n    Set the joinstyle for the collection (for all its elements).\n\n    Parameters\n    ----------\n    js : {'miter', 'round', 'bevel'}\n        The joinstyle\n    \"\"\"\n    if js in ('miter', 'round', 'bevel'):\n        self._joinstyle = js\n    else:\n        raise ValueError('Unrecognized join style.  Found %s' % js)",
                "def get_joinstyle(self):\n    return self._joinstyle",
                "@staticmethod\ndef _bcast_lwls(linewidths, dashes):\n    \"\"\"\n    Internal helper function to broadcast + scale ls/lw\n\n    In the collection drawing code, the linewidth and linestyle are cycled\n    through as circular buffers (via ``v[i % len(v)]``).  Thus, if we are\n    going to scale the dash pattern at set time (not draw time) we need to\n    do the broadcasting now and expand both lists to be the same length.\n\n    Parameters\n    ----------\n    linewidths : list\n        line widths of collection\n    dashes : list\n        dash specification (offset, (dash pattern tuple))\n\n    Returns\n    -------\n    linewidths, dashes : list\n         Will be the same length, dashes are scaled by paired linewidth\n    \"\"\"\n    if mpl.rcParams['_internal.classic_mode']:\n        return linewidths, dashes\n    # make sure they are the same length so we can zip them\n    if len(dashes) != len(linewidths):\n        l_dashes = len(dashes)\n        l_lw = len(linewidths)\n        gcd = math.gcd(l_dashes, l_lw)\n        dashes = list(dashes) * (l_lw // gcd)\n        linewidths = list(linewidths) * (l_dashes // gcd)\n\n    # scale the dash patters\n    dashes = [mlines._scale_dashes(o, d, lw)\n              for (o, d), lw in zip(dashes, linewidths)]\n\n    return linewidths, dashes",
                "def set_antialiased(self, aa):\n    \"\"\"\n    Set the antialiasing state for rendering.\n\n    Parameters\n    ----------\n    aa : bool or sequence of bools\n    \"\"\"\n    if aa is None:\n        aa = mpl.rcParams['patch.antialiased']\n    self._antialiaseds = np.atleast_1d(np.asarray(aa, bool))\n    self.stale = True",
                "def set_color(self, c):\n    \"\"\"\n    Set both the edgecolor and the facecolor.\n\n    Parameters\n    ----------\n    c : color or sequence of rgba tuples\n\n    See Also\n    --------\n    Collection.set_facecolor, Collection.set_edgecolor\n        For setting the edge or face color individually.\n    \"\"\"\n    self.set_facecolor(c)\n    self.set_edgecolor(c)",
                "def _set_facecolor(self, c):\n    if c is None:\n        c = mpl.rcParams['patch.facecolor']\n\n    self._is_filled = True\n    try:\n        if c.lower() == 'none':\n            self._is_filled = False\n    except AttributeError:\n        pass\n    self._facecolors = mcolors.to_rgba_array(c, self._alpha)\n    self.stale = True",
                "def set_facecolor(self, c):\n    \"\"\"\n    Set the facecolor(s) of the collection.  *c* can be a\n    matplotlib color spec (all patches have same color), or a\n    sequence of specs; if it is a sequence the patches will\n    cycle through the sequence.\n\n    If *c* is 'none', the patch will not be filled.\n\n    Parameters\n    ----------\n    c : color or sequence of colors\n    \"\"\"\n    self._original_facecolor = c\n    self._set_facecolor(c)",
                "def get_facecolor(self):\n    return self._facecolors",
                "def get_edgecolor(self):\n    if cbook._str_equal(self._edgecolors, 'face'):\n        return self.get_facecolor()\n    else:\n        return self._edgecolors",
                "def _set_edgecolor(self, c):\n    set_hatch_color = True\n    if c is None:\n        if (mpl.rcParams['patch.force_edgecolor'] or\n                not self._is_filled or self._edge_default):\n            c = mpl.rcParams['patch.edgecolor']\n        else:\n            c = 'none'\n            set_hatch_color = False\n\n    self._is_stroked = True\n    try:\n        if c.lower() == 'none':\n            self._is_stroked = False\n    except AttributeError:\n        pass\n\n    try:\n        if c.lower() == 'face':   # Special case: lookup in \"get\" method.\n            self._edgecolors = 'face'\n            return\n    except AttributeError:\n        pass\n    self._edgecolors = mcolors.to_rgba_array(c, self._alpha)\n    if set_hatch_color and len(self._edgecolors):\n        self._hatch_color = tuple(self._edgecolors[0])\n    self.stale = True",
                "def set_edgecolor(self, c):\n    \"\"\"\n    Set the edgecolor(s) of the collection.\n\n    Parameters\n    ----------\n    c : color or sequence of colors or 'face'\n        The collection edgecolor(s).  If a sequence, the patches cycle\n        through it.  If 'face', match the facecolor.\n    \"\"\"\n    self._original_edgecolor = c\n    self._set_edgecolor(c)",
                "def set_alpha(self, alpha):\n    \"\"\"\n    Set the alpha transparencies of the collection.\n\n    Parameters\n    ----------\n    alpha : float or None\n    \"\"\"\n    if alpha is not None:\n        try:\n            float(alpha)\n        except TypeError:\n            raise TypeError('alpha must be a float or None')\n    self.update_dict['array'] = True\n    artist.Artist.set_alpha(self, alpha)\n    self._set_facecolor(self._original_facecolor)\n    self._set_edgecolor(self._original_edgecolor)",
                "def get_linewidth(self):\n    return self._linewidths",
                "def get_linestyle(self):\n    return self._linestyles",
                "def update_scalarmappable(self):\n    \"\"\"Update colors from the scalar mappable array, if it is not None.\"\"\"\n    if self._A is None:\n        return\n    if self._A.ndim > 1:\n        raise ValueError('Collections can only map rank 1 arrays')\n    if not self.check_update(\"array\"):\n        return\n    if self._is_filled:\n        self._facecolors = self.to_rgba(self._A, self._alpha)\n    elif self._is_stroked:\n        self._edgecolors = self.to_rgba(self._A, self._alpha)\n    self.stale = True",
                "def get_fill(self):\n    'return whether fill is set'\n    return self._is_filled",
                "def update_from(self, other):\n    'copy properties from other to self'\n\n    artist.Artist.update_from(self, other)\n    self._antialiaseds = other._antialiaseds\n    self._original_edgecolor = other._original_edgecolor\n    self._edgecolors = other._edgecolors\n    self._original_facecolor = other._original_facecolor\n    self._facecolors = other._facecolors\n    self._linewidths = other._linewidths\n    self._linestyles = other._linestyles\n    self._us_linestyles = other._us_linestyles\n    self._pickradius = other._pickradius\n    self._hatch = other._hatch\n\n    # update_from for scalarmappable\n    self._A = other._A\n    self.norm = other.norm\n    self.cmap = other.cmap\n    # self.update_dict = other.update_dict # do we need to copy this? -JJL\n    self.stale = True",
                "def get_sizes(self):\n    \"\"\"\n    Returns the sizes of the elements in the collection.  The\n    value represents the 'area' of the element.\n\n    Returns\n    -------\n    sizes : array\n        The 'area' of each element.\n    \"\"\"\n    return self._sizes",
                "def set_sizes(self, sizes, dpi=72.0):\n    \"\"\"\n    Set the sizes of each member of the collection.\n\n    Parameters\n    ----------\n    sizes : ndarray or None\n        The size to set for each element of the collection.  The\n        value is the 'area' of the element.\n    dpi : float\n        The dpi of the canvas. Defaults to 72.0.\n    \"\"\"\n    if sizes is None:\n        self._sizes = np.array([])\n        self._transforms = np.empty((0, 3, 3))\n    else:\n        self._sizes = np.asarray(sizes)\n        self._transforms = np.zeros((len(self._sizes), 3, 3))\n        scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor\n        self._transforms[:, 0, 0] = scale\n        self._transforms[:, 1, 1] = scale\n        self._transforms[:, 2, 2] = 1.0\n    self.stale = True",
                "@artist.allow_rasterization\ndef draw(self, renderer):\n    self.set_sizes(self._sizes, self.figure.dpi)\n    Collection.draw(self, renderer)",
                "@docstring.dedent_interpd\ndef __init__(self, paths, sizes=None, **kwargs):\n    \"\"\"\n    *paths* is a sequence of :class:`matplotlib.path.Path`\n    instances.\n\n    %(Collection)s\n    \"\"\"\n\n    Collection.__init__(self, **kwargs)\n    self.set_paths(paths)\n    self.set_sizes(sizes)\n    self.stale = True",
                "def set_paths(self, paths):\n    self._paths = paths\n    self.stale = True",
                "def get_paths(self):\n    return self._paths",
                "def legend_elements(self, prop=\"colors\", num=\"auto\",\n                 fmt=None, func=lambda x: x, **kwargs):\n    \"\"\"\n    Creates legend handles and labels for a PathCollection. This is useful\n    for obtaining a legend for a :meth:`~.Axes.scatter` plot. E.g.::\n\n        scatter = plt.scatter([1,2,3], [4,5,6], c=[7,2,3])\n        plt.legend(*scatter.legend_elements())\n\n    Also see the :ref:`automatedlegendcreation` example.\n\n    Parameters\n    ----------\n    prop : string, optional, default *\"colors\"*\n        Can be *\"colors\"* or *\"sizes\"*. In case of *\"colors\"*, the legend\n        handles will show the different colors of the collection. In case\n        of \"sizes\", the legend will show the different sizes.\n    num : int, None, \"auto\" (default), array-like, or `~.ticker.Locator`,\n        optional\n        Target number of elements to create.\n        If None, use all unique elements of the mappable array. If an\n        integer, target to use *num* elements in the normed range.\n        If *\"auto\"*, try to determine which option better suits the nature\n        of the data.\n        The number of created elements may slightly deviate from *num* due\n        to a `~.ticker.Locator` being used to find useful locations.\n        If a list or array, use exactly those elements for the legend.\n        Finally, a `~.ticker.Locator` can be provided.\n    fmt : string, `~matplotlib.ticker.Formatter`, or None (default)\n        The format or formatter to use for the labels. If a string must be\n        a valid input for a `~.StrMethodFormatter`. If None (the default),\n        use a `~.ScalarFormatter`.\n    func : function, default *lambda x: x*\n        Function to calculate the labels. Often the size (or color)\n        argument to :meth:`~.Axes.scatter` will have been pre-processed\n        by the user using a function *s = f(x)* to make the markers\n        visible; e.g. *size = np.log10(x)*. Providing the inverse of this\n        function here allows that pre-processing to be inverted, so that\n        the legend labels have the correct values;\n        e.g. *func = np.exp(x, 10)*.\n    kwargs : further parameters\n        Allowed kwargs are *color* and *size*. E.g. it may be useful to\n        set the color of the markers if *prop=\"sizes\"* is used; similarly\n        to set the size of the markers if *prop=\"colors\"* is used.\n        Any further parameters are passed onto the `.Line2D` instance.\n        This may be useful to e.g. specify a different *markeredgecolor* or\n        *alpha* for the legend handles.\n\n    Returns\n    -------\n    tuple (handles, labels)\n        with *handles* being a list of `.Line2D`  objects\n        and *labels* a matching list of strings.\n    \"\"\"\n    handles = []\n    labels = []\n    hasarray = self.get_array() is not None\n    if fmt is None:\n        fmt = mpl.ticker.ScalarFormatter(useOffset=False, useMathText=True)\n    elif isinstance(fmt, str):\n        fmt = mpl.ticker.StrMethodFormatter(fmt)\n    fmt.create_dummy_axis()\n\n    if prop == \"colors\":\n        if not hasarray:\n            warnings.warn(\"Collection without array used. Make sure to \"\n                          \"specify the values to be colormapped via the \"\n                          \"`c` argument.\")\n            return handles, labels\n        u = np.unique(self.get_array())\n        size = kwargs.pop(\"size\", mpl.rcParams[\"lines.markersize\"])\n    elif prop == \"sizes\":\n        u = np.unique(self.get_sizes())\n        color = kwargs.pop(\"color\", \"k\")\n    else:\n        raise ValueError(\"Valid values for `prop` are 'colors' or \"\n                         f\"'sizes'. You supplied '{prop}' instead.\")\n\n    fmt.set_bounds(func(u).min(), func(u).max())\n    if num == \"auto\":\n        num = 9\n        if len(u) <= num:\n            num = None\n    if num is None:\n        values = u\n        label_values = func(values)\n    else:\n        if prop == \"colors\":\n            arr = self.get_array()\n        elif prop == \"sizes\":\n            arr = self.get_sizes()\n        if isinstance(num, mpl.ticker.Locator):\n            loc = num\n        elif np.iterable(num):\n            loc = mpl.ticker.FixedLocator(num)\n        else:\n            num = int(num)\n            loc = mpl.ticker.MaxNLocator(nbins=num, min_n_ticks=num-1,\n                                         steps=[1, 2, 2.5, 3, 5, 6, 8, 10])\n        label_values = loc.tick_values(func(arr).min(), func(arr).max())\n        cond = ((label_values >= func(arr).min()) &\n                (label_values <= func(arr).max()))\n        label_values = label_values[cond]\n        xarr = np.linspace(arr.min(), arr.max(), 256)\n        values = np.interp(label_values, func(xarr), xarr)\n\n    kw = dict(markeredgewidth=self.get_linewidths()[0],\n              alpha=self.get_alpha())\n    kw.update(kwargs)\n\n    for val, lab in zip(values, label_values):\n        if prop == \"colors\":\n            color = self.cmap(self.norm(val))\n        elif prop == \"sizes\":\n            size = np.sqrt(val)\n            if np.isclose(size, 0.0):\n                continue\n        h = mlines.Line2D([0], [0], ls=\"\", color=color, ms=size,\n                          marker=self.get_paths()[0], **kw)\n        handles.append(h)\n        if hasattr(fmt, \"set_locs\"):\n            fmt.set_locs(label_values)\n        l = fmt(lab)\n        labels.append(l)\n\n    return handles, labels",
                "@docstring.dedent_interpd\ndef __init__(self, verts, sizes=None, closed=True, **kwargs):\n    \"\"\"\n    *verts* is a sequence of ( *verts0*, *verts1*, ...) where\n    *verts_i* is a sequence of *xy* tuples of vertices, or an\n    equivalent :mod:`numpy` array of shape (*nv*, 2).\n\n    *sizes* is *None* (default) or a sequence of floats that\n    scale the corresponding *verts_i*.  The scaling is applied\n    before the Artist master transform; if the latter is an identity\n    transform, then the overall scaling is such that if\n    *verts_i* specify a unit square, then *sizes_i* is the area\n    of that square in points^2.\n    If len(*sizes*) < *nv*, the additional values will be\n    taken cyclically from the array.\n\n    *closed*, when *True*, will explicitly close the polygon.\n\n    %(Collection)s\n    \"\"\"\n    Collection.__init__(self, **kwargs)\n    self.set_sizes(sizes)\n    self.set_verts(verts, closed)\n    self.stale = True",
                "def set_verts(self, verts, closed=True):\n    '''This allows one to delay initialization of the vertices.'''\n    if isinstance(verts, np.ma.MaskedArray):\n        verts = verts.astype(float).filled(np.nan)\n        # This is much faster than having Path do it one at a time.\n    if closed:\n        self._paths = []\n        for xy in verts:\n            if len(xy):\n                if isinstance(xy, np.ma.MaskedArray):\n                    xy = np.ma.concatenate([xy, xy[0:1]])\n                else:\n                    xy = np.asarray(xy)\n                    xy = np.concatenate([xy, xy[0:1]])\n                codes = np.empty(xy.shape[0], dtype=mpath.Path.code_type)\n                codes[:] = mpath.Path.LINETO\n                codes[0] = mpath.Path.MOVETO\n                codes[-1] = mpath.Path.CLOSEPOLY\n                self._paths.append(mpath.Path(xy, codes))\n            else:\n                self._paths.append(mpath.Path(xy))\n    else:\n        self._paths = [mpath.Path(xy) for xy in verts]\n    self.stale = True",
                "def set_verts_and_codes(self, verts, codes):\n    \"\"\"This allows one to initialize vertices with path codes.\"\"\"\n    if len(verts) != len(codes):\n        raise ValueError(\"'codes' must be a 1D list or array \"\n                         \"with the same length of 'verts'\")\n    self._paths = []\n    for xy, cds in zip(verts, codes):\n        if len(xy):\n            self._paths.append(mpath.Path(xy, cds))\n        else:\n            self._paths.append(mpath.Path(xy))\n    self.stale = True",
                "@docstring.dedent_interpd\ndef __init__(self, xranges, yrange, **kwargs):\n    \"\"\"\n    *xranges*\n        sequence of (*xmin*, *xwidth*)\n\n    *yrange*\n        *ymin*, *ywidth*\n\n    %(Collection)s\n    \"\"\"\n    ymin, ywidth = yrange\n    ymax = ymin + ywidth\n    verts = [[(xmin, ymin),\n              (xmin, ymax),\n              (xmin + xwidth, ymax),\n              (xmin + xwidth, ymin),\n              (xmin, ymin)] for xmin, xwidth in xranges]\n    PolyCollection.__init__(self, verts, **kwargs)",
                "@staticmethod\ndef span_where(x, ymin, ymax, where, **kwargs):\n    \"\"\"\n    Create a BrokenBarHCollection to plot horizontal bars from\n    over the regions in *x* where *where* is True.  The bars range\n    on the y-axis from *ymin* to *ymax*\n\n    A :class:`BrokenBarHCollection` is returned.  *kwargs* are\n    passed on to the collection.\n    \"\"\"\n    xranges = []\n    for ind0, ind1 in cbook.contiguous_regions(where):\n        xslice = x[ind0:ind1]\n        if not len(xslice):\n            continue\n        xranges.append((xslice[0], xslice[-1] - xslice[0]))\n\n    collection = BrokenBarHCollection(\n        xranges, [ymin, ymax - ymin], **kwargs)\n    return collection",
                "@docstring.dedent_interpd\ndef __init__(self,\n             numsides,\n             rotation=0,\n             sizes=(1,),\n             **kwargs):\n    \"\"\"\n    *numsides*\n        the number of sides of the polygon\n\n    *rotation*\n        the rotation of the polygon in radians\n\n    *sizes*\n        gives the area of the circle circumscribing the\n        regular polygon in points^2\n\n    %(Collection)s\n\n    Example: see :doc:`/gallery/event_handling/lasso_demo` for a\n    complete example::\n\n        offsets = np.random.rand(20,2)\n        facecolors = [cm.jet(x) for x in np.random.rand(20)]\n        black = (0,0,0,1)\n\n        collection = RegularPolyCollection(\n            numsides=5, # a pentagon\n            rotation=0, sizes=(50,),\n            facecolors=facecolors,\n            edgecolors=(black,),\n            linewidths=(1,),\n            offsets=offsets,\n            transOffset=ax.transData,\n            )\n    \"\"\"\n    Collection.__init__(self, **kwargs)\n    self.set_sizes(sizes)\n    self._numsides = numsides\n    self._paths = [self._path_generator(numsides)]\n    self._rotation = rotation\n    self.set_transform(transforms.IdentityTransform())",
                "def get_numsides(self):\n    return self._numsides",
                "def get_rotation(self):\n    return self._rotation",
                "@artist.allow_rasterization\ndef draw(self, renderer):\n    self.set_sizes(self._sizes, self.figure.dpi)\n    self._transforms = [\n        transforms.Affine2D(x).rotate(-self._rotation).get_matrix()\n        for x in self._transforms\n    ]\n    Collection.draw(self, renderer)",
                "def __init__(self, segments,     # Can be None.\n             linewidths=None,\n             colors=None,\n             antialiaseds=None,\n             linestyles='solid',\n             offsets=None,\n             transOffset=None,\n             norm=None,\n             cmap=None,\n             pickradius=5,\n             zorder=2,\n             facecolors='none',\n             **kwargs\n             ):\n    \"\"\"\n    Parameters\n    ----------\n    segments\n        A sequence of (*line0*, *line1*, *line2*), where::\n\n            linen = (x0, y0), (x1, y1), ... (xm, ym)\n\n        or the equivalent numpy array with two columns. Each line\n        can be a different length.\n\n    colors : sequence, optional\n        A sequence of RGBA tuples (e.g., arbitrary color\n        strings, etc, not allowed).\n\n    antialiaseds : sequence, optional\n        A sequence of ones or zeros.\n\n    linestyles : string, tuple, optional\n        Either one of [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ], or\n        a dash tuple. The dash tuple is::\n\n            (offset, onoffseq)\n\n        where ``onoffseq`` is an even length tuple of on and off ink\n        in points.\n\n    norm : Normalize, optional\n        `~.colors.Normalize` instance.\n\n    cmap : string or Colormap, optional\n        Colormap name or `~.colors.Colormap` instance.\n\n    pickradius : float, optional\n        The tolerance in points for mouse clicks picking a line.\n        Default is 5 pt.\n\n    zorder : int, optional\n       zorder of the LineCollection. Default is 2.\n\n    facecolors : optional\n       The facecolors of the LineCollection. Default is 'none'.\n       Setting to a value other than 'none' will lead to a filled\n       polygon being drawn between points on each line.\n\n    Notes\n    -----\n    If *linewidths*, *colors*, or *antialiaseds* is None, they\n    default to their rcParams setting, in sequence form.\n\n    If *offsets* and *transOffset* are not None, then\n    *offsets* are transformed by *transOffset* and applied after\n    the segments have been transformed to display coordinates.\n\n    If *offsets* is not None but *transOffset* is None, then the\n    *offsets* are added to the segments before any transformation.\n    In this case, a single offset can be specified as::\n\n        offsets=(xo,yo)\n\n    and this value will be added cumulatively to each successive\n    segment, so as to produce a set of successively offset curves.\n\n    The use of :class:`~matplotlib.cm.ScalarMappable` is optional.\n    If the :class:`~matplotlib.cm.ScalarMappable` array\n    :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to\n    :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at\n    draw time a call to scalar mappable will be made to set the colors.\n    \"\"\"\n    if colors is None:\n        colors = mpl.rcParams['lines.color']\n    if linewidths is None:\n        linewidths = (mpl.rcParams['lines.linewidth'],)\n    if antialiaseds is None:\n        antialiaseds = (mpl.rcParams['lines.antialiased'],)\n\n    colors = mcolors.to_rgba_array(colors)\n\n    Collection.__init__(\n        self,\n        edgecolors=colors,\n        facecolors=facecolors,\n        linewidths=linewidths,\n        linestyles=linestyles,\n        antialiaseds=antialiaseds,\n        offsets=offsets,\n        transOffset=transOffset,\n        norm=norm,\n        cmap=cmap,\n        pickradius=pickradius,\n        zorder=zorder,\n        **kwargs)\n\n    self.set_segments(segments)",
                "def set_segments(self, segments):\n    if segments is None:\n        return\n    _segments = []\n\n    for seg in segments:\n        if not isinstance(seg, np.ma.MaskedArray):\n            seg = np.asarray(seg, float)\n        _segments.append(seg)\n\n    if self._uniform_offsets is not None:\n        _segments = self._add_offsets(_segments)\n\n    self._paths = [mpath.Path(_seg) for _seg in _segments]\n    self.stale = True",
                "def get_segments(self):\n    \"\"\"\n    Returns\n    -------\n    segments : list\n        List of segments in the LineCollection. Each list item contains an\n        array of vertices.\n    \"\"\"\n    segments = []\n\n    for path in self._paths:\n        vertices = [vertex for vertex, _ in path.iter_segments()]\n        vertices = np.asarray(vertices)\n        segments.append(vertices)\n\n    return segments",
                "def _add_offsets(self, segs):\n    offsets = self._uniform_offsets\n    Nsegs = len(segs)\n    Noffs = offsets.shape[0]\n    if Noffs == 1:\n        for i in range(Nsegs):\n            segs[i] = segs[i] + i * offsets\n    else:\n        for i in range(Nsegs):\n            io = i % Noffs\n            segs[i] = segs[i] + offsets[io:io + 1]\n    return segs",
                "def set_color(self, c):\n    \"\"\"\n    Set the color(s) of the LineCollection.\n\n    Parameters\n    ----------\n    c : color or list of colors\n        Matplotlib color argument (all patches have same color), or a\n        sequence or rgba tuples; if it is a sequence the patches will\n        cycle through the sequence.\n    \"\"\"\n    self.set_edgecolor(c)\n    self.stale = True",
                "def get_color(self):\n    return self._edgecolors",
                "def __init__(self,\n             positions,     # Cannot be None.\n             orientation=None,\n             lineoffset=0,\n             linelength=1,\n             linewidth=None,\n             color=None,\n             linestyle='solid',\n             antialiased=None,\n             **kwargs\n             ):\n    \"\"\"\n    Parameters\n    ----------\n    positions : 1D array-like object\n        Each value is an event.\n\n    orientation : {None, 'horizontal', 'vertical'}, optional\n        The orientation of the **collection** (the event bars are along\n        the orthogonal direction). Defaults to 'horizontal' if not\n        specified or None.\n\n    lineoffset : scalar, optional, default: 0\n        The offset of the center of the markers from the origin, in the\n        direction orthogonal to *orientation*.\n\n    linelength : scalar, optional, default: 1\n        The total height of the marker (i.e. the marker stretches from\n        ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n    linewidth : scalar or None, optional, default: None\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    color : color, sequence of colors or None, optional, default: None\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    linestyle : str or tuple, optional, default: 'solid'\n        Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n        '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n            (offset, onoffseq),\n\n        where *onoffseq* is an even length tuple of on and off ink\n        in points.\n\n    antialiased : {None, 1, 2}, optional\n        If it is None, defaults to its rcParams setting, in sequence form.\n\n    **kwargs : optional\n        Other keyword arguments are line collection properties.  See\n        :class:`~matplotlib.collections.LineCollection` for a list of\n        the valid properties.\n\n    Examples\n    --------\n\n    .. plot:: gallery/lines_bars_and_markers/eventcollection_demo.py\n    \"\"\"\n\n    segment = (lineoffset + linelength / 2.,\n               lineoffset - linelength / 2.)\n    if positions is None or len(positions) == 0:\n        segments = []\n    elif hasattr(positions, 'ndim') and positions.ndim > 1:\n        raise ValueError('positions cannot be an array with more than '\n                         'one dimension.')\n    elif (orientation is None or orientation.lower() == 'none' or\n          orientation.lower() == 'horizontal'):\n        positions.sort()\n        segments = [[(coord1, coord2) for coord2 in segment] for\n                    coord1 in positions]\n        self._is_horizontal = True\n    elif orientation.lower() == 'vertical':\n        positions.sort()\n        segments = [[(coord2, coord1) for coord2 in segment] for\n                    coord1 in positions]\n        self._is_horizontal = False\n    else:\n        cbook._check_in_list(['horizontal', 'vertical'],\n                             orientation=orientation)\n\n    LineCollection.__init__(self,\n                            segments,\n                            linewidths=linewidth,\n                            colors=color,\n                            antialiaseds=antialiased,\n                            linestyles=linestyle,\n                            **kwargs)\n\n    self._linelength = linelength\n    self._lineoffset = lineoffset",
                "def get_positions(self):\n    '''\n    return an array containing the floating-point values of the positions\n    '''\n    segments = self.get_segments()\n    pos = 0 if self.is_horizontal() else 1\n    return [segment[0, pos] for segment in self.get_segments()]",
                "def set_positions(self, positions):\n    '''\n    set the positions of the events to the specified value\n    '''\n    if positions is None or (hasattr(positions, 'len') and\n                             len(positions) == 0):\n        self.set_segments([])\n        return\n\n    lineoffset = self.get_lineoffset()\n    linelength = self.get_linelength()\n    segment = (lineoffset + linelength / 2.,\n               lineoffset - linelength / 2.)\n    positions = np.asanyarray(positions)\n    positions.sort()\n    if self.is_horizontal():\n        segments = [[(coord1, coord2) for coord2 in segment] for\n                    coord1 in positions]\n    else:\n        segments = [[(coord2, coord1) for coord2 in segment] for\n                    coord1 in positions]\n    self.set_segments(segments)",
                "def add_positions(self, position):\n    '''\n    add one or more events at the specified positions\n    '''\n    if position is None or (hasattr(position, 'len') and\n                            len(position) == 0):\n        return\n    positions = self.get_positions()\n    positions = np.hstack([positions, np.asanyarray(position)])\n    self.set_positions(positions)",
                "def is_horizontal(self):\n    '''\n    True if the eventcollection is horizontal, False if vertical\n    '''\n    return self._is_horizontal",
                "def get_orientation(self):\n    '''\n    get the orientation of the event line, may be:\n    [ 'horizontal' | 'vertical' ]\n    '''\n    return 'horizontal' if self.is_horizontal() else 'vertical'",
                "def switch_orientation(self):\n    '''\n    switch the orientation of the event line, either from vertical to\n    horizontal or vice versus\n    '''\n    segments = self.get_segments()\n    for i, segment in enumerate(segments):\n        segments[i] = np.fliplr(segment)\n    self.set_segments(segments)\n    self._is_horizontal = not self.is_horizontal()\n    self.stale = True",
                "def set_orientation(self, orientation=None):\n    '''\n    set the orientation of the event line\n    [ 'horizontal' | 'vertical' | None ]\n    defaults to 'horizontal' if not specified or None\n    '''\n    if (orientation is None or orientation.lower() == 'none' or\n            orientation.lower() == 'horizontal'):\n        is_horizontal = True\n    elif orientation.lower() == 'vertical':\n        is_horizontal = False\n    else:\n        cbook._check_in_list(['horizontal', 'vertical'],\n                             orientation=orientation)\n    if is_horizontal == self.is_horizontal():\n        return\n    self.switch_orientation()",
                "def get_linelength(self):\n    '''\n    get the length of the lines used to mark each event\n    '''\n    return self._linelength",
                "def set_linelength(self, linelength):\n    '''\n    set the length of the lines used to mark each event\n    '''\n    if linelength == self.get_linelength():\n        return\n    lineoffset = self.get_lineoffset()\n    segments = self.get_segments()\n    pos = 1 if self.is_horizontal() else 0\n    for segment in segments:\n        segment[0, pos] = lineoffset + linelength / 2.\n        segment[1, pos] = lineoffset - linelength / 2.\n    self.set_segments(segments)\n    self._linelength = linelength",
                "def get_lineoffset(self):\n    '''\n    get the offset of the lines used to mark each event\n    '''\n    return self._lineoffset",
                "def set_lineoffset(self, lineoffset):\n    '''\n    set the offset of the lines used to mark each event\n    '''\n    if lineoffset == self.get_lineoffset():\n        return\n    linelength = self.get_linelength()\n    segments = self.get_segments()\n    pos = 1 if self.is_horizontal() else 0\n    for segment in segments:\n        segment[0, pos] = lineoffset + linelength / 2.\n        segment[1, pos] = lineoffset - linelength / 2.\n    self.set_segments(segments)\n    self._lineoffset = lineoffset",
                "def get_linewidth(self):\n    \"\"\"Get the width of the lines used to mark each event.\"\"\"\n    return super(EventCollection, self).get_linewidth()[0]",
                "def get_linewidths(self):\n    return super(EventCollection, self).get_linewidth()",
                "def get_color(self):\n    '''\n    get the color of the lines used to mark each event\n    '''\n    return self.get_colors()[0]",
                "@docstring.dedent_interpd\ndef __init__(self, sizes, **kwargs):\n    \"\"\"\n    *sizes*\n        Gives the area of the circle in points^2\n\n    %(Collection)s\n    \"\"\"\n    Collection.__init__(self, **kwargs)\n    self.set_sizes(sizes)\n    self.set_transform(transforms.IdentityTransform())\n    self._paths = [mpath.Path.unit_circle()]",
                "@docstring.dedent_interpd\ndef __init__(self, widths, heights, angles, units='points', **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    widths : array-like\n        The lengths of the first axes (e.g., major axis lengths).\n\n    heights : array-like\n        The lengths of second axes.\n\n    angles : array-like\n        The angles of the first axes, degrees CCW from the x-axis.\n\n    units : {'points', 'inches', 'dots', 'width', 'height', 'x', 'y', 'xy'}\n\n        The units in which majors and minors are given; 'width' and\n        'height' refer to the dimensions of the axes, while 'x'\n        and 'y' refer to the *offsets* data units. 'xy' differs\n        from all others in that the angle as plotted varies with\n        the aspect ratio, and equals the specified angle only when\n        the aspect ratio is unity.  Hence it behaves the same as\n        the :class:`~matplotlib.patches.Ellipse` with\n        ``axes.transData`` as its transform.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Additional kwargs inherited from the base :class:`Collection`.\n\n    %(Collection)s\n    \"\"\"\n    Collection.__init__(self, **kwargs)\n    self._widths = 0.5 * np.asarray(widths).ravel()\n    self._heights = 0.5 * np.asarray(heights).ravel()\n    self._angles = np.deg2rad(angles).ravel()\n    self._units = units\n    self.set_transform(transforms.IdentityTransform())\n    self._transforms = np.empty((0, 3, 3))\n    self._paths = [mpath.Path.unit_circle()]",
                "def _set_transforms(self):\n    \"\"\"Calculate transforms immediately before drawing.\"\"\"\n\n    ax = self.axes\n    fig = self.figure\n\n    if self._units == 'xy':\n        sc = 1\n    elif self._units == 'x':\n        sc = ax.bbox.width / ax.viewLim.width\n    elif self._units == 'y':\n        sc = ax.bbox.height / ax.viewLim.height\n    elif self._units == 'inches':\n        sc = fig.dpi\n    elif self._units == 'points':\n        sc = fig.dpi / 72.0\n    elif self._units == 'width':\n        sc = ax.bbox.width\n    elif self._units == 'height':\n        sc = ax.bbox.height\n    elif self._units == 'dots':\n        sc = 1.0\n    else:\n        raise ValueError('unrecognized units: %s' % self._units)\n\n    self._transforms = np.zeros((len(self._widths), 3, 3))\n    widths = self._widths * sc\n    heights = self._heights * sc\n    sin_angle = np.sin(self._angles)\n    cos_angle = np.cos(self._angles)\n    self._transforms[:, 0, 0] = widths * cos_angle\n    self._transforms[:, 0, 1] = heights * -sin_angle\n    self._transforms[:, 1, 0] = widths * sin_angle\n    self._transforms[:, 1, 1] = heights * cos_angle\n    self._transforms[:, 2, 2] = 1.0\n\n    _affine = transforms.Affine2D\n    if self._units == 'xy':\n        m = ax.transData.get_affine().get_matrix().copy()\n        m[:2, 2:] = 0\n        self.set_transform(_affine(m))",
                "@artist.allow_rasterization\ndef draw(self, renderer):\n    self._set_transforms()\n    Collection.draw(self, renderer)",
                "def __init__(self, patches, match_original=False, **kwargs):\n    \"\"\"\n    *patches*\n        a sequence of Patch objects.  This list may include\n        a heterogeneous assortment of different patch types.\n\n    *match_original*\n        If True, use the colors and linewidths of the original\n        patches.  If False, new colors may be assigned by\n        providing the standard collection arguments, facecolor,\n        edgecolor, linewidths, norm or cmap.\n\n    If any of *edgecolors*, *facecolors*, *linewidths*,\n    *antialiaseds* are None, they default to their\n    :data:`matplotlib.rcParams` patch setting, in sequence form.\n\n    The use of :class:`~matplotlib.cm.ScalarMappable` is optional.\n    If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not\n    None (i.e., a call to set_array has been made), at draw time a\n    call to scalar mappable will be made to set the face colors.\n    \"\"\"\n\n    if match_original:\n        def determine_facecolor(patch):\n            if patch.get_fill():\n                return patch.get_facecolor()\n            return [0, 0, 0, 0]\n\n        kwargs['facecolors'] = [determine_facecolor(p) for p in patches]\n        kwargs['edgecolors'] = [p.get_edgecolor() for p in patches]\n        kwargs['linewidths'] = [p.get_linewidth() for p in patches]\n        kwargs['linestyles'] = [p.get_linestyle() for p in patches]\n        kwargs['antialiaseds'] = [p.get_antialiased() for p in patches]\n\n    Collection.__init__(self, **kwargs)\n\n    self.set_paths(patches)",
                "def set_paths(self, patches):\n    paths = [p.get_transform().transform_path(p.get_path())\n             for p in patches]\n    self._paths = paths",
                "def __init__(self, triangulation, **kwargs):\n    Collection.__init__(self, **kwargs)\n    self._triangulation = triangulation\n    self._shading = 'gouraud'\n    self._is_filled = True\n\n    self._bbox = transforms.Bbox.unit()\n\n    # Unfortunately this requires a copy, unless Triangulation\n    # was rewritten.\n    xy = np.hstack((triangulation.x.reshape(-1, 1),\n                    triangulation.y.reshape(-1, 1)))\n    self._bbox.update_from_data_xy(xy)",
                "def get_paths(self):\n    if self._paths is None:\n        self.set_paths()\n    return self._paths",
                "def set_paths(self):\n    self._paths = self.convert_mesh_to_paths(self._triangulation)",
                "@staticmethod\ndef convert_mesh_to_paths(tri):\n    \"\"\"\n    Converts a given mesh into a sequence of `~.Path` objects.\n\n    This function is primarily of use to implementers of backends that do\n    not directly support meshes.\n    \"\"\"\n    triangles = tri.get_masked_triangles()\n    verts = np.stack((tri.x[triangles], tri.y[triangles]), axis=-1)\n    return [mpath.Path(x) for x in verts]",
                "@artist.allow_rasterization\ndef draw(self, renderer):\n    if not self.get_visible():\n        return\n    renderer.open_group(self.__class__.__name__)\n    transform = self.get_transform()\n\n    # Get a list of triangles and the color at each vertex.\n    tri = self._triangulation\n    triangles = tri.get_masked_triangles()\n\n    verts = np.stack((tri.x[triangles], tri.y[triangles]), axis=-1)\n\n    self.update_scalarmappable()\n    colors = self._facecolors[triangles]\n\n    gc = renderer.new_gc()\n    self._set_gc_clip(gc)\n    gc.set_linewidth(self.get_linewidth()[0])\n    renderer.draw_gouraud_triangles(gc, verts, colors, transform.frozen())\n    gc.restore()\n    renderer.close_group(self.__class__.__name__)",
                "def __init__(self, meshWidth, meshHeight, coordinates,\n             antialiased=True, shading='flat', **kwargs):\n    Collection.__init__(self, **kwargs)\n    self._meshWidth = meshWidth\n    self._meshHeight = meshHeight\n    # By converting to floats now, we can avoid that on every draw.\n    self._coordinates = np.asarray(coordinates, float).reshape(\n        (meshHeight + 1, meshWidth + 1, 2))\n    self._antialiased = antialiased\n    self._shading = shading\n\n    self._bbox = transforms.Bbox.unit()\n    self._bbox.update_from_data_xy(coordinates.reshape(\n        ((meshWidth + 1) * (meshHeight + 1), 2)))",
                "def get_paths(self):\n    if self._paths is None:\n        self.set_paths()\n    return self._paths",
                "def set_paths(self):\n    self._paths = self.convert_mesh_to_paths(\n        self._meshWidth, self._meshHeight, self._coordinates)\n    self.stale = True",
                "def get_datalim(self, transData):\n    return (self.get_transform() - transData).transform_bbox(self._bbox)",
                "@staticmethod\ndef convert_mesh_to_paths(meshWidth, meshHeight, coordinates):\n    \"\"\"\n    Converts a given mesh into a sequence of `~.Path` objects.\n\n    This function is primarily of use to implementers of backends that do\n    not directly support quadmeshes.\n    \"\"\"\n    if isinstance(coordinates, np.ma.MaskedArray):\n        c = coordinates.data\n    else:\n        c = coordinates\n    points = np.concatenate((\n                c[:-1, :-1],\n                c[:-1, 1:],\n                c[1:, 1:],\n                c[1:, :-1],\n                c[:-1, :-1]\n            ), axis=2)\n    points = points.reshape((meshWidth * meshHeight, 5, 2))\n    return [mpath.Path(x) for x in points]",
                "def convert_mesh_to_triangles(self, meshWidth, meshHeight, coordinates):\n    \"\"\"\n    Converts a given mesh into a sequence of triangles, each point\n    with its own color.  This is useful for experiments using\n    `draw_gouraud_triangle`.\n    \"\"\"\n    if isinstance(coordinates, np.ma.MaskedArray):\n        p = coordinates.data\n    else:\n        p = coordinates\n\n    p_a = p[:-1, :-1]\n    p_b = p[:-1, 1:]\n    p_c = p[1:, 1:]\n    p_d = p[1:, :-1]\n    p_center = (p_a + p_b + p_c + p_d) / 4.0\n\n    triangles = np.concatenate((\n            p_a, p_b, p_center,\n            p_b, p_c, p_center,\n            p_c, p_d, p_center,\n            p_d, p_a, p_center,\n        ), axis=2)\n    triangles = triangles.reshape((meshWidth * meshHeight * 4, 3, 2))\n\n    c = self.get_facecolor().reshape((meshHeight + 1, meshWidth + 1, 4))\n    c_a = c[:-1, :-1]\n    c_b = c[:-1, 1:]\n    c_c = c[1:, 1:]\n    c_d = c[1:, :-1]\n    c_center = (c_a + c_b + c_c + c_d) / 4.0\n\n    colors = np.concatenate((\n                    c_a, c_b, c_center,\n                    c_b, c_c, c_center,\n                    c_c, c_d, c_center,\n                    c_d, c_a, c_center,\n                ), axis=2)\n    colors = colors.reshape((meshWidth * meshHeight * 4, 3, 4))\n\n    return triangles, colors",
                "@artist.allow_rasterization\ndef draw(self, renderer):\n    if not self.get_visible():\n        return\n    renderer.open_group(self.__class__.__name__, self.get_gid())\n    transform = self.get_transform()\n    transOffset = self.get_offset_transform()\n    offsets = self._offsets\n\n    if self.have_units():\n        if len(self._offsets):\n            xs = self.convert_xunits(self._offsets[:, 0])\n            ys = self.convert_yunits(self._offsets[:, 1])\n            offsets = np.column_stack([xs, ys])\n\n    self.update_scalarmappable()\n\n    if not transform.is_affine:\n        coordinates = self._coordinates.reshape((-1, 2))\n        coordinates = transform.transform(coordinates)\n        coordinates = coordinates.reshape(self._coordinates.shape)\n        transform = transforms.IdentityTransform()\n    else:\n        coordinates = self._coordinates\n\n    if not transOffset.is_affine:\n        offsets = transOffset.transform_non_affine(offsets)\n        transOffset = transOffset.get_affine()\n\n    gc = renderer.new_gc()\n    self._set_gc_clip(gc)\n    gc.set_linewidth(self.get_linewidth()[0])\n\n    if self._shading == 'gouraud':\n        triangles, colors = self.convert_mesh_to_triangles(\n            self._meshWidth, self._meshHeight, coordinates)\n        renderer.draw_gouraud_triangles(\n            gc, triangles, colors, transform.frozen())\n    else:\n        renderer.draw_quad_mesh(\n            gc, transform.frozen(), self._meshWidth, self._meshHeight,\n            coordinates, offsets, transOffset, self.get_facecolor(),\n            self._antialiased, self.get_edgecolors())\n    gc.restore()\n    renderer.close_group(self.__class__.__name__)\n    self.stale = False",
                "def determine_facecolor(patch):\n    if patch.get_fill():\n        return patch.get_facecolor()\n    return [0, 0, 0, 0]"
            ],
            "inscope_function_signatures": [
                "__init__(self, edgecolors=None, facecolors=None, linewidths=None, linestyles='solid', capstyle=None, joinstyle=None, antialiaseds=None, offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5.0, hatch=None, urls=None, offset_position='screen', zorder=1, **kwargs)",
                "get_paths(self)",
                "set_paths(self)",
                "get_transforms(self)",
                "get_offset_transform(self)",
                "get_datalim(self, transData)",
                "get_window_extent(self, renderer)",
                "_prepare_points(self)",
                "draw(self, renderer)",
                "set_pickradius(self, pr)",
                "get_pickradius(self)",
                "contains(self, mouseevent)",
                "set_urls(self, urls)",
                "get_urls(self)",
                "set_hatch(self, hatch)",
                "get_hatch(self)",
                "set_offsets(self, offsets)",
                "get_offsets(self)",
                "set_offset_position(self, offset_position)",
                "get_offset_position(self)",
                "set_linewidth(self, lw)",
                "set_linestyle(self, ls)",
                "set_capstyle(self, cs)",
                "get_capstyle(self)",
                "set_joinstyle(self, js)",
                "get_joinstyle(self)",
                "_bcast_lwls(linewidths, dashes)",
                "set_antialiased(self, aa)",
                "set_color(self, c)",
                "_set_facecolor(self, c)",
                "set_facecolor(self, c)",
                "get_facecolor(self)",
                "get_edgecolor(self)",
                "_set_edgecolor(self, c)",
                "set_edgecolor(self, c)",
                "set_alpha(self, alpha)",
                "get_linewidth(self)",
                "get_linestyle(self)",
                "update_scalarmappable(self)",
                "get_fill(self)",
                "update_from(self, other)",
                "get_sizes(self)",
                "set_sizes(self, sizes, dpi=72.0)",
                "draw(self, renderer)",
                "__init__(self, paths, sizes=None, **kwargs)",
                "set_paths(self, paths)",
                "get_paths(self)",
                "legend_elements(self, prop='colors', num='auto', fmt=None, func=lambda x: x, **kwargs)",
                "__init__(self, verts, sizes=None, closed=True, **kwargs)",
                "set_verts(self, verts, closed=True)",
                "set_verts_and_codes(self, verts, codes)",
                "__init__(self, xranges, yrange, **kwargs)",
                "span_where(x, ymin, ymax, where, **kwargs)",
                "__init__(self, numsides, rotation=0, sizes=(1,), **kwargs)",
                "get_numsides(self)",
                "get_rotation(self)",
                "draw(self, renderer)",
                "__init__(self, segments, linewidths=None, colors=None, antialiaseds=None, linestyles='solid', offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5, zorder=2, facecolors='none', **kwargs)",
                "set_segments(self, segments)",
                "get_segments(self)",
                "_add_offsets(self, segs)",
                "set_color(self, c)",
                "get_color(self)",
                "__init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs)",
                "get_positions(self)",
                "set_positions(self, positions)",
                "add_positions(self, position)",
                "is_horizontal(self)",
                "get_orientation(self)",
                "switch_orientation(self)",
                "set_orientation(self, orientation=None)",
                "get_linelength(self)",
                "set_linelength(self, linelength)",
                "get_lineoffset(self)",
                "set_lineoffset(self, lineoffset)",
                "get_linewidth(self)",
                "get_linewidths(self)",
                "get_color(self)",
                "__init__(self, sizes, **kwargs)",
                "__init__(self, widths, heights, angles, units='points', **kwargs)",
                "_set_transforms(self)",
                "draw(self, renderer)",
                "__init__(self, patches, match_original=False, **kwargs)",
                "set_paths(self, patches)",
                "__init__(self, triangulation, **kwargs)",
                "get_paths(self)",
                "set_paths(self)",
                "convert_mesh_to_paths(tri)",
                "draw(self, renderer)",
                "__init__(self, meshWidth, meshHeight, coordinates, antialiased=True, shading='flat', **kwargs)",
                "get_paths(self)",
                "set_paths(self)",
                "get_datalim(self, transData)",
                "convert_mesh_to_paths(meshWidth, meshHeight, coordinates)",
                "convert_mesh_to_triangles(self, meshWidth, meshHeight, coordinates)",
                "draw(self, renderer)",
                "determine_facecolor(patch)"
            ],
            "variables_in_file": {
                "artist.Artist": [
                    744,
                    114,
                    29,
                    775
                ],
                "artist": [
                    2050,
                    775,
                    744,
                    1192,
                    2056,
                    114,
                    2002,
                    1855,
                    249,
                    1754,
                    29,
                    863
                ],
                "cm.ScalarMappable": [
                    115,
                    29
                ],
                "cm": [
                    115,
                    29
                ],
                "_offsets": [
                    76
                ],
                "np.zeros": [
                    856,
                    148,
                    76,
                    1737
                ],
                "np": [
                    1528,
                    1546,
                    148,
                    151,
                    1946,
                    1051,
                    1052,
                    1950,
                    1058,
                    1059,
                    1570,
                    1061,
                    1062,
                    1063,
                    1704,
                    1705,
                    1706,
                    1831,
                    1709,
                    1966,
                    437,
                    1977,
                    1852,
                    1341,
                    1342,
                    194,
                    195,
                    964,
                    967,
                    1992,
                    1737,
                    1866,
                    76,
                    1740,
                    1741,
                    84,
                    852,
                    853,
                    855,
                    856,
                    857,
                    1366,
                    988,
                    2015,
                    227,
                    998,
                    231,
                    999,
                    1009,
                    242,
                    243,
                    498,
                    1010,
                    1141,
                    1652,
                    632,
                    1916
                ],
                "_transOffset": [
                    77
                ],
                "transforms.IdentityTransform": [
                    1184,
                    1664,
                    2023,
                    1708,
                    77,
                    210
                ],
                "transforms": [
                    1184,
                    1664,
                    1921,
                    1827,
                    2023,
                    298,
                    204,
                    77,
                    1196,
                    1708,
                    176,
                    210,
                    1748
                ],
                "_transforms": [
                    84
                ],
                "np.empty": [
                    1709,
                    84,
                    853,
                    1063
                ],
                "_edge_default": [
                    88,
                    1413,
                    1224
                ],
                "artist.Artist.__init__": [
                    114
                ],
                "self": [
                    114,
                    115,
                    118,
                    120,
                    122,
                    123,
                    124,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    139,
                    141,
                    144,
                    146,
                    148,
                    149,
                    156,
                    157,
                    159,
                    161,
                    162,
                    163,
                    166,
                    172,
                    175,
                    178,
                    182,
                    183,
                    184,
                    185,
                    200,
                    210,
                    215,
                    216,
                    217,
                    218,
                    220,
                    222,
                    225,
                    226,
                    229,
                    230,
                    251,
                    253,
                    255,
                    257,
                    260,
                    261,
                    263,
                    264,
                    266,
                    274,
                    275,
                    277,
                    279,
                    287,
                    288,
                    289,
                    293,
                    294,
                    295,
                    296,
                    307,
                    308,
                    310,
                    311,
                    315,
                    316,
                    317,
                    318,
                    325,
                    326,
                    327,
                    328,
                    329,
                    332,
                    333,
                    344,
                    347,
                    356,
                    357,
                    359,
                    363,
                    364,
                    365,
                    366,
                    368,
                    372,
                    374,
                    384,
                    385,
                    388,
                    422,
                    423,
                    427,
                    441,
                    442,
                    444,
                    445,
                    450,
                    451,
                    453,
                    469,
                    470,
                    481,
                    498,
                    501,
                    502,
                    503,
                    544,
                    547,
                    548,
                    560,
                    565,
                    577,
                    582,
                    632,
                    633,
                    648,
                    649,
                    655,
                    658,
                    661,
                    662,
                    677,
                    678,
                    681,
                    684,
                    685,
                    687,
                    693,
                    699,
                    702,
                    708,
                    712,
                    713,
                    714,
                    715,
                    727,
                    728,
                    743,
                    744,
                    745,
                    746,
                    749,
                    752,
                    756,
                    758,
                    760,
                    762,
                    763,
                    764,
                    765,
                    766,
                    770,
                    775,
                    776,
                    777,
                    778,
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    788,
                    789,
                    790,
                    792,
                    837,
                    852,
                    853,
                    855,
                    856,
                    857,
                    858,
                    859,
                    860,
                    861,
                    865,
                    866,
                    883,
                    884,
                    885,
                    886,
                    889,
                    890,
                    893,
                    951,
                    964,
                    967,
                    983,
                    985,
                    1001,
                    1002,
                    1007,
                    1013,
                    1044,
                    1045,
                    1046,
                    1047,
                    1055,
                    1067,
                    1069,
                    1071,
                    1072,
                    1081,
                    1084,
                    1086,
                    1087,
                    1113,
                    1179,
                    1180,
                    1181,
                    1182,
                    1183,
                    1184,
                    1187,
                    1190,
                    1194,
                    1195,
                    1196,
                    1197,
                    1199,
                    1319,
                    1333,
                    1345,
                    1346,
                    1348,
                    1349,
                    1364,
                    1372,
                    1395,
                    1396,
                    1399,
                    1486,
                    1491,
                    1496,
                    1504,
                    1505,
                    1511,
                    1512,
                    1513,
                    1521,
                    1524,
                    1525,
                    1530,
                    1536,
                    1545,
                    1547,
                    1554,
                    1561,
                    1568,
                    1571,
                    1572,
                    1573,
                    1589,
                    1591,
                    1597,
                    1603,
                    1605,
                    1606,
                    1607,
                    1611,
                    1612,
                    1618,
                    1624,
                    1626,
                    1627,
                    1628,
                    1632,
                    1633,
                    1637,
                    1640,
                    1646,
                    1662,
                    1663,
                    1664,
                    1665,
                    1703,
                    1704,
                    1705,
                    1706,
                    1707,
                    1708,
                    1709,
                    1710,
                    1715,
                    1716,
                    1718,
                    1720,
                    1722,
                    1724,
                    1726,
                    1728,
                    1730,
                    1732,
                    1735,
                    1737,
                    1738,
                    1739,
                    1740,
                    1741,
                    1742,
                    1743,
                    1744,
                    1745,
                    1746,
                    1749,
                    1752,
                    1756,
                    1757,
                    1805,
                    1807,
                    1812,
                    1822,
                    1823,
                    1824,
                    1825,
                    1827,
                    1833,
                    1836,
                    1837,
                    1838,
                    1841,
                    1857,
                    1859,
                    1860,
                    1863,
                    1868,
                    1869,
                    1872,
                    1873,
                    1876,
                    1912,
                    1913,
                    1914,
                    1916,
                    1918,
                    1919,
                    1921,
                    1922,
                    1926,
                    1927,
                    1928,
                    1931,
                    1932,
                    1933,
                    1936,
                    1985,
                    2004,
                    2006,
                    2007,
                    2008,
                    2009,
                    2011,
                    2012,
                    2013,
                    2014,
                    2017,
                    2020,
                    2022,
                    2025,
                    2032,
                    2033,
                    2035,
                    2036,
                    2037,
                    2042,
                    2043,
                    2044,
                    2046,
                    2047
                ],
                "cm.ScalarMappable.__init__": [
                    115
                ],
                "norm": [
                    115,
                    1327
                ],
                "cmap": [
                    1328,
                    115
                ],
                "self._us_linestyles": [
                    544,
                    548,
                    783,
                    118,
                    502
                ],
                "self._linestyles": [
                    547,
                    294,
                    327,
                    782,
                    752,
                    501,
                    120,
                    316
                ],
                "self._us_lw": [
                    122,
                    498,
                    548,
                    502
                ],
                "self._linewidths": [
                    547,
                    293,
                    327,
                    123,
                    749,
                    781,
                    501,
                    315
                ],
                "self._is_filled": [
                    1825,
                    770,
                    655,
                    658,
                    693,
                    762,
                    124
                ],
                "self._hatch_color": [
                    714,
                    266,
                    126
                ],
                "mcolors.to_rgba": [
                    126
                ],
                "mcolors": [
                    712,
                    1316,
                    661,
                    126
                ],
                "mpl.rcParams": [
                    1312,
                    1314,
                    965,
                    653,
                    494,
                    496,
                    692,
                    694,
                    631,
                    126,
                    606,
                    1310
                ],
                "mpl": [
                    992,
                    986,
                    1312,
                    1314,
                    965,
                    653,
                    494,
                    496,
                    692,
                    694,
                    631,
                    953,
                    126,
                    955,
                    989,
                    606,
                    1310
                ],
                "self.set_facecolor": [
                    648,
                    127
                ],
                "facecolors": [
                    288,
                    321,
                    292,
                    1321,
                    127
                ],
                "self.set_edgecolor": [
                    128,
                    649,
                    1395
                ],
                "edgecolors": [
                    128,
                    289,
                    314,
                    292
                ],
                "self.set_linewidth": [
                    129
                ],
                "linewidths": [
                    1312,
                    129,
                    609,
                    611,
                    1311,
                    614,
                    618,
                    1322,
                    620,
                    607
                ],
                "self.set_linestyle": [
                    130
                ],
                "linestyles": [
                    130,
                    1323
                ],
                "self.set_antialiased": [
                    131
                ],
                "antialiaseds": [
                    1313,
                    1314,
                    131,
                    1324
                ],
                "self.set_pickradius": [
                    132
                ],
                "pickradius": [
                    132,
                    362,
                    1329,
                    371,
                    373
                ],
                "self.set_urls": [
                    133
                ],
                "urls": [
                    384,
                    133
                ],
                "self.set_hatch": [
                    134
                ],
                "hatch": [
                    422,
                    134
                ],
                "self.set_offset_position": [
                    135
                ],
                "offset_position": [
                    468,
                    469,
                    135
                ],
                "self.set_zorder": [
                    136
                ],
                "zorder": [
                    136,
                    1330
                ],
                "capstyle": [
                    138,
                    139
                ],
                "self.set_capstyle": [
                    139
                ],
                "self._capstyle": [
                    141,
                    560,
                    565,
                    310,
                    311
                ],
                "joinstyle": [
                    144,
                    143
                ],
                "self.set_joinstyle": [
                    144
                ],
                "self._joinstyle": [
                    577,
                    582,
                    146,
                    307,
                    308
                ],
                "self._offsets": [
                    451,
                    2012,
                    2009,
                    148,
                    184,
                    217,
                    442,
                    156,
                    2013,
                    2014
                ],
                "self._uniform_offsets": [
                    1345,
                    450,
                    453,
                    149,
                    1372,
                    441,
                    444,
                    159
                ],
                "offsets": [
                    257,
                    150,
                    151,
                    153,
                    154,
                    156,
                    159,
                    1325,
                    437,
                    438,
                    439,
                    184,
                    442,
                    444,
                    191,
                    321,
                    194,
                    195,
                    325,
                    198,
                    201,
                    217,
                    2009,
                    1372,
                    1374,
                    2015,
                    1377,
                    228,
                    229,
                    230,
                    231,
                    1381,
                    2028,
                    238,
                    368,
                    242,
                    243,
                    373,
                    247,
                    2043
                ],
                "np.asanyarray": [
                    1528,
                    1546,
                    437,
                    151
                ],
                "float": [
                    740,
                    1916,
                    363,
                    437,
                    151,
                    1052,
                    1342
                ],
                "offsets.shape": [
                    153,
                    438,
                    1374
                ],
                "transOffset": [
                    257,
                    155,
                    157,
                    1326,
                    183,
                    190,
                    191,
                    192,
                    321,
                    325,
                    201,
                    2008,
                    216,
                    2027,
                    2028,
                    237,
                    238,
                    2029,
                    240,
                    368,
                    373,
                    247,
                    2043
                ],
                "self._transOffset": [
                    157,
                    175
                ],
                "self._path_effects": [
                    161
                ],
                "self.update": [
                    162
                ],
                "kwargs": [
                    1799,
                    1800,
                    1801,
                    1802,
                    1803,
                    1805,
                    1044,
                    1179,
                    1822,
                    162,
                    1703,
                    1331,
                    965,
                    968,
                    1113,
                    1502,
                    1003,
                    1133,
                    883,
                    1912,
                    1662
                ],
                "self._paths": [
                    1665,
                    1926,
                    1928,
                    1931,
                    1812,
                    1182,
                    1055,
                    163,
                    166,
                    1067,
                    1836,
                    1069,
                    1710,
                    1071,
                    1838,
                    1841,
                    1081,
                    1084,
                    1086,
                    1348,
                    1364,
                    889,
                    893
                ],
                "NotImplementedError": [
                    169
                ],
                "self._transforms": [
                    1737,
                    1195,
                    172,
                    1197,
                    1709,
                    1742,
                    1743,
                    1744,
                    1745,
                    1746,
                    853,
                    856,
                    858,
                    859,
                    860
                ],
                "t": [
                    175,
                    176,
                    177,
                    178,
                    179
                ],
                "isinstance": [
                    986,
                    194,
                    1058,
                    364,
                    1966,
                    176,
                    530,
                    242,
                    954,
                    1051,
                    1341,
                    1946
                ],
                "transforms.Transform": [
                    176
                ],
                "hasattr": [
                    1542,
                    1478,
                    1519,
                    177,
                    1015
                ],
                "t._as_mpl_transform": [
                    178
                ],
                "self.axes": [
                    178,
                    1715
                ],
                "transform": [
                    257,
                    2039,
                    299,
                    301,
                    182,
                    187,
                    188,
                    189,
                    324,
                    1860,
                    200,
                    1874,
                    2007,
                    215,
                    2019,
                    2021,
                    2023,
                    233,
                    234,
                    236,
                    368,
                    372,
                    247,
                    2042
                ],
                "self.get_transform": [
                    1860,
                    1936,
                    182,
                    2007,
                    215
                ],
                "self.get_offset_transform": [
                    216,
                    2008,
                    183
                ],
                "paths": [
                    257,
                    1810,
                    1812,
                    291,
                    302,
                    185,
                    188,
                    320,
                    324,
                    198,
                    200,
                    218,
                    221,
                    227,
                    234,
                    235,
                    368,
                    372,
                    884,
                    247,
                    889
                ],
                "self.get_paths": [
                    185,
                    218,
                    1013,
                    222
                ],
                "transform.is_affine": [
                    233,
                    187,
                    2019
                ],
                "transform.transform_path_non_affine": [
                    234,
                    188
                ],
                "p": [
                    1799,
                    1800,
                    1801,
                    1802,
                    1803,
                    1967,
                    1969,
                    1810,
                    1811,
                    1971,
                    1972,
                    1973,
                    1974,
                    188
                ],
                "transform.get_affine": [
                    236,
                    189
                ],
                "transOffset.is_affine": [
                    2027,
                    237,
                    190
                ],
                "transOffset.transform_non_affine": [
                    2028,
                    238,
                    191
                ],
                "transOffset.get_affine": [
                    192,
                    240,
                    2029
                ],
                "np.ma.MaskedArray": [
                    194,
                    1058,
                    1966,
                    242,
                    1946,
                    1051,
                    1341
                ],
                "np.ma": [
                    194,
                    1059,
                    1058,
                    1966,
                    242,
                    1946,
                    1051,
                    1341
                ],
                "offsets.filled": [
                    195,
                    243
                ],
                "np.nan": [
                    195,
                    1052,
                    243
                ],
                "len": [
                    1543,
                    1057,
                    291,
                    292,
                    293,
                    295,
                    297,
                    1078,
                    1083,
                    1476,
                    198,
                    713,
                    1737,
                    976,
                    856,
                    2012,
                    1373,
                    609,
                    610,
                    611,
                    1128,
                    1520,
                    376
                ],
                "result": [
                    202,
                    204,
                    205,
                    199
                ],
                "mpath.get_path_collection_extents": [
                    199
                ],
                "mpath": [
                    1665,
                    1958,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1069,
                    1710,
                    1071,
                    1204,
                    1209,
                    1084,
                    1853,
                    1086,
                    321,
                    1348,
                    199,
                    227,
                    1140
                ],
                "transform.frozen": [
                    324,
                    200,
                    1874,
                    372,
                    2039,
                    2042
                ],
                "self.get_transforms": [
                    200,
                    372,
                    325,
                    287
                ],
                "transOffset.frozen": [
                    201
                ],
                "result.inverse_transformed": [
                    202
                ],
                "transData": [
                    1936,
                    202
                ],
                "transforms.Bbox.null": [
                    204
                ],
                "transforms.Bbox": [
                    1921,
                    1827,
                    204
                ],
                "self.get_datalim": [
                    210
                ],
                "self.have_units": [
                    2011,
                    220
                ],
                "path": [
                    227,
                    234,
                    235,
                    1364,
                    1365,
                    222,
                    223
                ],
                "vertices": [
                    224,
                    1365,
                    1366,
                    1367,
                    223
                ],
                "path.vertices": [
                    223
                ],
                "xs": [
                    224,
                    225,
                    227,
                    229,
                    231,
                    2013,
                    2015
                ],
                "ys": [
                    224,
                    226,
                    227,
                    230,
                    231,
                    2014,
                    2015
                ],
                "self.convert_xunits": [
                    2013,
                    225,
                    229
                ],
                "self.convert_yunits": [
                    226,
                    2014,
                    230
                ],
                "paths.append": [
                    227
                ],
                "mpath.Path": [
                    1665,
                    1958,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1069,
                    1710,
                    1071,
                    1204,
                    1209,
                    1084,
                    1853,
                    1086,
                    321,
                    1348,
                    227,
                    1140
                ],
                "np.column_stack": [
                    2015,
                    227,
                    231
                ],
                "path.codes": [
                    227
                ],
                "offsets.size": [
                    228
                ],
                "self.get_visible": [
                    1857,
                    251,
                    2004,
                    359
                ],
                "renderer.open_group": [
                    1859,
                    253,
                    2006
                ],
                "renderer": [
                    259,
                    279,
                    303,
                    1199,
                    319,
                    323,
                    1859,
                    332,
                    1871,
                    1874,
                    1876,
                    2006,
                    1757,
                    866,
                    2031,
                    2038,
                    2041,
                    253,
                    2046
                ],
                "self.__class__.__name__": [
                    1859,
                    332,
                    1876,
                    2006,
                    253,
                    2046
                ],
                "self.__class__": [
                    1859,
                    332,
                    1876,
                    2006,
                    253,
                    2046
                ],
                "self.get_gid": [
                    253,
                    2006
                ],
                "self.update_scalarmappable": [
                    2017,
                    1868,
                    255
                ],
                "self._prepare_points": [
                    368,
                    257
                ],
                "gc": [
                    259,
                    260,
                    261,
                    264,
                    266,
                    275,
                    308,
                    311,
                    314,
                    315,
                    316,
                    317,
                    318,
                    320,
                    324,
                    331,
                    1871,
                    1872,
                    1873,
                    1874,
                    1875,
                    2031,
                    2032,
                    2033,
                    2039,
                    2042,
                    2045
                ],
                "renderer.new_gc": [
                    2031,
                    259,
                    1871
                ],
                "self._set_gc_clip": [
                    1872,
                    2032,
                    260
                ],
                "gc.set_snap": [
                    261
                ],
                "self.get_snap": [
                    261
                ],
                "self._hatch": [
                    422,
                    263,
                    264,
                    427,
                    785
                ],
                "gc.set_hatch": [
                    264
                ],
                "gc.set_hatch_color": [
                    266
                ],
                "AttributeError": [
                    267,
                    659,
                    710,
                    703
                ],
                "cbook.warn_deprecated": [
                    269
                ],
                "cbook": [
                    1126,
                    684,
                    269,
                    531,
                    467,
                    1493,
                    22,
                    1587
                ],
                "self.get_sketch_params": [
                    274,
                    275
                ],
                "gc.set_sketch_params": [
                    275
                ],
                "self.get_path_effects": [
                    277,
                    279
                ],
                "PathEffectRenderer": [
                    279
                ],
                "trans": [
                    297,
                    298,
                    291,
                    287
                ],
                "self.get_facecolor": [
                    288,
                    1985,
                    326,
                    685,
                    2043
                ],
                "self.get_edgecolor": [
                    289,
                    326
                ],
                "do_single_path_optimization": [
                    305,
                    290,
                    313
                ],
                "self._antialiaseds": [
                    295,
                    328,
                    776,
                    632,
                    317
                ],
                "self._urls": [
                    384,
                    388,
                    295,
                    328,
                    318
                ],
                "self.get_hatch": [
                    296
                ],
                "combined_transform": [
                    320,
                    298,
                    301,
                    302
                ],
                "transforms.Affine2D": [
                    298,
                    1748,
                    1196
                ],
                "extents": [
                    304,
                    302
                ],
                "get_extents": [
                    302
                ],
                "width": [
                    304,
                    303
                ],
                "height": [
                    304,
                    303
                ],
                "renderer.get_canvas_width_height": [
                    303
                ],
                "extents.width": [
                    304
                ],
                "extents.height": [
                    304
                ],
                "gc.set_joinstyle": [
                    308
                ],
                "gc.set_capstyle": [
                    311
                ],
                "gc.set_foreground": [
                    314
                ],
                "tuple": [
                    321,
                    314,
                    714
                ],
                "gc.set_linewidth": [
                    1873,
                    315,
                    2033
                ],
                "gc.set_dashes": [
                    316
                ],
                "gc.set_antialiased": [
                    317
                ],
                "gc.set_url": [
                    318
                ],
                "renderer.draw_markers": [
                    319
                ],
                "combined_transform.frozen": [
                    320
                ],
                "renderer.draw_path_collection": [
                    323
                ],
                "self._offset_position": [
                    329,
                    481,
                    469
                ],
                "gc.restore": [
                    1875,
                    331,
                    2045
                ],
                "renderer.close_group": [
                    332,
                    2046,
                    1876
                ],
                "self.stale": [
                    385,
                    1933,
                    662,
                    1047,
                    792,
                    1573,
                    423,
                    1072,
                    445,
                    1087,
                    1349,
                    715,
                    333,
                    470,
                    861,
                    1396,
                    886,
                    503,
                    633,
                    890,
                    766,
                    2047
                ],
                "artist.allow_rasterization": [
                    1192,
                    2002,
                    863,
                    249,
                    1754,
                    1855
                ],
                "self._pickradius": [
                    344,
                    784,
                    347,
                    366
                ],
                "pr": [
                    344
                ],
                "self._contains": [
                    356,
                    357
                ],
                "mouseevent": [
                    371,
                    357
                ],
                "self._picker": [
                    363,
                    364,
                    365
                ],
                "Number": [
                    364
                ],
                "ind": [
                    376,
                    370
                ],
                "_path.point_in_path_collection": [
                    370
                ],
                "_path": [
                    370
                ],
                "mouseevent.x": [
                    371
                ],
                "mouseevent.y": [
                    371
                ],
                "self.get_offset_position": [
                    374
                ],
                "dict": [
                    376,
                    1001
                ],
                "cbook._check_in_list": [
                    1587,
                    467,
                    1493
                ],
                "lw": [
                    617,
                    618,
                    493,
                    494,
                    495,
                    496,
                    498
                ],
                "np.atleast_1d": [
                    632,
                    498
                ],
                "np.asarray": [
                    1061,
                    1704,
                    1705,
                    498,
                    1366,
                    855,
                    632,
                    1916,
                    1342
                ],
                "self._bcast_lwls": [
                    547,
                    501
                ],
                "ls": [
                    530,
                    531,
                    532,
                    535,
                    537,
                    541
                ],
                "str": [
                    954,
                    530
                ],
                "cbook.ls_mapper.get": [
                    531
                ],
                "cbook.ls_mapper": [
                    531
                ],
                "dashes": [
                    544,
                    609,
                    610,
                    613,
                    617,
                    618,
                    620,
                    532,
                    535,
                    537,
                    607
                ],
                "mlines._get_dash_pattern": [
                    537,
                    532,
                    535
                ],
                "mlines": [
                    617,
                    532,
                    1012,
                    535,
                    537
                ],
                "ValueError": [
                    579,
                    1479,
                    1735,
                    970,
                    562,
                    1079,
                    759,
                    536,
                    539,
                    540
                ],
                "x": [
                    896,
                    1958,
                    1127,
                    1196,
                    1197,
                    537,
                    1853
                ],
                "format": [
                    541
                ],
                "cs": [
                    560,
                    562,
                    559
                ],
                "js": [
                    576,
                    577,
                    579
                ],
                "l_dashes": [
                    610,
                    612,
                    614
                ],
                "l_lw": [
                    611,
                    612,
                    613
                ],
                "gcd": [
                    612,
                    613,
                    614
                ],
                "math.gcd": [
                    612
                ],
                "math": [
                    612
                ],
                "list": [
                    613,
                    614
                ],
                "mlines._scale_dashes": [
                    617
                ],
                "o": [
                    617,
                    618
                ],
                "d": [
                    617,
                    618
                ],
                "zip": [
                    618,
                    1082,
                    1005
                ],
                "staticmethod": [
                    584,
                    1843,
                    1938,
                    1115
                ],
                "aa": [
                    632,
                    630,
                    631
                ],
                "bool": [
                    632
                ],
                "c": [
                    648,
                    649,
                    652,
                    653,
                    657,
                    661,
                    1947,
                    1949,
                    1951,
                    1952,
                    1953,
                    1954,
                    1955,
                    677,
                    678,
                    691,
                    694,
                    696,
                    701,
                    1985,
                    1986,
                    707,
                    1987,
                    1988,
                    1989,
                    712,
                    727,
                    728,
                    1395
                ],
                "c.lower": [
                    657,
                    707,
                    701
                ],
                "self._facecolors": [
                    681,
                    780,
                    1869,
                    661,
                    763
                ],
                "mcolors.to_rgba_array": [
                    712,
                    1316,
                    661
                ],
                "self._alpha": [
                    712,
                    765,
                    763,
                    661
                ],
                "self._original_facecolor": [
                    745,
                    779,
                    677
                ],
                "self._set_facecolor": [
                    745,
                    678
                ],
                "cbook._str_equal": [
                    684
                ],
                "self._edgecolors": [
                    708,
                    712,
                    713,
                    714,
                    778,
                    684,
                    687,
                    1399,
                    765
                ],
                "set_hatch_color": [
                    697,
                    690,
                    713
                ],
                "self._edge_default": [
                    693
                ],
                "self._is_stroked": [
                    699,
                    764,
                    702
                ],
                "self._original_edgecolor": [
                    777,
                    746,
                    727
                ],
                "self._set_edgecolor": [
                    728,
                    746
                ],
                "alpha": [
                    744,
                    738,
                    740
                ],
                "TypeError": [
                    741,
                    742
                ],
                "self.update_dict": [
                    743
                ],
                "artist.Artist.set_alpha": [
                    744
                ],
                "self._A": [
                    788,
                    756,
                    758,
                    763,
                    765
                ],
                "self._A.ndim": [
                    758
                ],
                "self.check_update": [
                    760
                ],
                "self.to_rgba": [
                    763,
                    765
                ],
                "artist.Artist.update_from": [
                    775
                ],
                "other": [
                    775,
                    776,
                    777,
                    778,
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    788,
                    789,
                    790
                ],
                "other._antialiaseds": [
                    776
                ],
                "other._original_edgecolor": [
                    777
                ],
                "other._edgecolors": [
                    778
                ],
                "other._original_facecolor": [
                    779
                ],
                "other._facecolors": [
                    780
                ],
                "other._linewidths": [
                    781
                ],
                "other._linestyles": [
                    782
                ],
                "other._us_linestyles": [
                    783
                ],
                "other._pickradius": [
                    784
                ],
                "other._hatch": [
                    785
                ],
                "other._A": [
                    788
                ],
                "self.norm": [
                    789,
                    1007
                ],
                "other.norm": [
                    789
                ],
                "self.cmap": [
                    790,
                    1007
                ],
                "other.cmap": [
                    790
                ],
                "cbook._define_aliases": [
                    22
                ],
                "docstring.interpd.update": [
                    2056,
                    798,
                    2055
                ],
                "docstring.interpd": [
                    2056,
                    798,
                    2055
                ],
                "docstring": [
                    1024,
                    1095,
                    1671,
                    2055,
                    874,
                    2056,
                    1654,
                    1143,
                    798
                ],
                "Collection": [
                    2050,
                    1668,
                    1805,
                    1044,
                    1815,
                    1179,
                    1822,
                    1318,
                    1703,
                    1199,
                    821,
                    1212,
                    1879,
                    1757,
                    1760,
                    866,
                    883,
                    1912,
                    1662
                ],
                "_factor": [
                    825,
                    1652,
                    1141
                ],
                "self._sizes": [
                    865,
                    837,
                    1194,
                    852,
                    855,
                    856,
                    857
                ],
                "sizes": [
                    851,
                    1045,
                    885,
                    855,
                    1180,
                    1663
                ],
                "np.array": [
                    852
                ],
                "scale": [
                    857,
                    858,
                    859
                ],
                "np.sqrt": [
                    857,
                    1009
                ],
                "dpi": [
                    857
                ],
                "self._factor": [
                    857
                ],
                "self.set_sizes": [
                    865,
                    1194,
                    1045,
                    885,
                    1180,
                    1663
                ],
                "self.figure.dpi": [
                    865,
                    1194
                ],
                "self.figure": [
                    865,
                    1194,
                    1716
                ],
                "Collection.draw": [
                    866,
                    1757,
                    1199
                ],
                "_CollectionWithSizes": [
                    1137,
                    1649,
                    869,
                    1023
                ],
                "Collection.__init__": [
                    1318,
                    1703,
                    1805,
                    1822,
                    883,
                    1044,
                    1912,
                    1179,
                    1662
                ],
                "self.set_paths": [
                    1927,
                    884,
                    1837,
                    1807
                ],
                "docstring.dedent_interpd": [
                    1024,
                    1095,
                    1671,
                    874,
                    1654,
                    1143
                ],
                "handles": [
                    963,
                    1020,
                    949,
                    1014
                ],
                "labels": [
                    1018,
                    963,
                    1020,
                    950
                ],
                "hasarray": [
                    959,
                    951
                ],
                "self.get_array": [
                    983,
                    964,
                    951
                ],
                "fmt": [
                    973,
                    1015,
                    952,
                    953,
                    954,
                    955,
                    956,
                    1017,
                    1016
                ],
                "mpl.ticker.ScalarFormatter": [
                    953
                ],
                "mpl.ticker": [
                    992,
                    953,
                    986,
                    955,
                    989
                ],
                "mpl.ticker.StrMethodFormatter": [
                    955
                ],
                "fmt.create_dummy_axis": [
                    956
                ],
                "prop": [
                    966,
                    971,
                    1006,
                    1008,
                    982,
                    984,
                    958
                ],
                "warnings.warn": [
                    960
                ],
                "warnings": [
                    960
                ],
                "u": [
                    964,
                    967,
                    973,
                    976,
                    979
                ],
                "np.unique": [
                    964,
                    967
                ],
                "size": [
                    1009,
                    1010,
                    1012,
                    965
                ],
                "kwargs.pop": [
                    968,
                    965
                ],
                "self.get_sizes": [
                    985,
                    967
                ],
                "color": [
                    968,
                    1499,
                    1012,
                    1007
                ],
                "fmt.set_bounds": [
                    973
                ],
                "min": [
                    994,
                    995,
                    973
                ],
                "func": [
                    994,
                    995,
                    996,
                    999,
                    973,
                    980
                ],
                "max": [
                    994,
                    996,
                    973
                ],
                "num": [
                    992,
                    974,
                    975,
                    976,
                    977,
                    978,
                    986,
                    987,
                    988,
                    989,
                    991
                ],
                "values": [
                    979,
                    980,
                    1005,
                    999
                ],
                "label_values": [
                    994,
                    995,
                    996,
                    997,
                    999,
                    1005,
                    980,
                    1016
                ],
                "arr": [
                    994,
                    995,
                    996,
                    998,
                    983,
                    985
                ],
                "mpl.ticker.Locator": [
                    986
                ],
                "loc": [
                    992,
                    994,
                    987,
                    989
                ],
                "np.iterable": [
                    988
                ],
                "mpl.ticker.FixedLocator": [
                    989
                ],
                "int": [
                    991
                ],
                "mpl.ticker.MaxNLocator": [
                    992
                ],
                "loc.tick_values": [
                    994
                ],
                "cond": [
                    995,
                    997
                ],
                "xarr": [
                    998,
                    999
                ],
                "np.linspace": [
                    998
                ],
                "arr.min": [
                    998
                ],
                "arr.max": [
                    998
                ],
                "np.interp": [
                    999
                ],
                "kw": [
                    1001,
                    1003,
                    1013
                ],
                "self.get_linewidths": [
                    1001
                ],
                "self.get_alpha": [
                    1002
                ],
                "kw.update": [
                    1003
                ],
                "val": [
                    1009,
                    1005,
                    1007
                ],
                "lab": [
                    1017,
                    1005
                ],
                "np.isclose": [
                    1010
                ],
                "h": [
                    1012,
                    1014
                ],
                "mlines.Line2D": [
                    1012
                ],
                "handles.append": [
                    1014
                ],
                "fmt.set_locs": [
                    1016
                ],
                "l": [
                    1017,
                    1018
                ],
                "labels.append": [
                    1018
                ],
                "self.set_verts": [
                    1046
                ],
                "verts": [
                    1056,
                    1852,
                    1866,
                    1071,
                    1874,
                    1108,
                    1046,
                    1078,
                    1113,
                    1082,
                    1051,
                    1052,
                    1853
                ],
                "closed": [
                    1046,
                    1054
                ],
                "filled": [
                    1052
                ],
                "verts.astype": [
                    1052
                ],
                "xy": [
                    1056,
                    1057,
                    1058,
                    1059,
                    1061,
                    1062,
                    1063,
                    1831,
                    1833,
                    1067,
                    1069,
                    1071,
                    1082,
                    1083,
                    1084,
                    1086
                ],
                "np.ma.concatenate": [
                    1059
                ],
                "np.concatenate": [
                    1992,
                    1977,
                    1950,
                    1062
                ],
                "codes": [
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1078,
                    1082
                ],
                "xy.shape": [
                    1063
                ],
                "mpath.Path.code_type": [
                    1063
                ],
                "mpath.Path.LINETO": [
                    1064
                ],
                "mpath.Path.MOVETO": [
                    1065
                ],
                "mpath.Path.CLOSEPOLY": [
                    1066
                ],
                "self._paths.append": [
                    1067,
                    1084,
                    1069,
                    1086
                ],
                "set_paths": [
                    1352,
                    1074
                ],
                "set_verts": [
                    1074,
                    1351
                ],
                "cds": [
                    1082,
                    1084
                ],
                "PolyCollection": [
                    1113,
                    1090
                ],
                "ymin": [
                    1133,
                    1106,
                    1107,
                    1108,
                    1111,
                    1112
                ],
                "ywidth": [
                    1106,
                    1107
                ],
                "yrange": [
                    1106
                ],
                "ymax": [
                    1133,
                    1107,
                    1109,
                    1110
                ],
                "xmin": [
                    1108,
                    1109,
                    1110,
                    1111,
                    1112
                ],
                "xwidth": [
                    1112,
                    1110,
                    1111
                ],
                "xranges": [
                    1112,
                    1130,
                    1133,
                    1125
                ],
                "PolyCollection.__init__": [
                    1113
                ],
                "ind0": [
                    1126,
                    1127
                ],
                "ind1": [
                    1126,
                    1127
                ],
                "cbook.contiguous_regions": [
                    1126
                ],
                "where": [
                    1126
                ],
                "xslice": [
                    1128,
                    1130,
                    1127
                ],
                "xranges.append": [
                    1130
                ],
                "collection": [
                    1132,
                    1134
                ],
                "BrokenBarHCollection": [
                    1132
                ],
                "_path_generator": [
                    1209,
                    1204,
                    1140
                ],
                "mpath.Path.unit_regular_polygon": [
                    1140
                ],
                "np.pi": [
                    1652,
                    1141
                ],
                "self._numsides": [
                    1187,
                    1181
                ],
                "numsides": [
                    1181,
                    1182
                ],
                "self._path_generator": [
                    1182
                ],
                "self._rotation": [
                    1196,
                    1190,
                    1183
                ],
                "rotation": [
                    1183
                ],
                "self.set_transform": [
                    1184,
                    1708,
                    1664,
                    1752
                ],
                "get_matrix": [
                    1196,
                    1750
                ],
                "rotate": [
                    1196
                ],
                "RegularPolyCollection": [
                    1202,
                    1207
                ],
                "mpath.Path.unit_regular_star": [
                    1204
                ],
                "mpath.Path.unit_regular_asterisk": [
                    1209
                ],
                "colors": [
                    1316,
                    1320,
                    1992,
                    1869,
                    1998,
                    2000,
                    1874,
                    2036,
                    2039,
                    1309,
                    1310
                ],
                "self.set_segments": [
                    1536,
                    1632,
                    1571,
                    1611,
                    1521,
                    1333
                ],
                "segments": [
                    1536,
                    1568,
                    1569,
                    1570,
                    1571,
                    1333,
                    1336,
                    1340,
                    1477,
                    1606,
                    1608,
                    1611,
                    1484,
                    1489,
                    1362,
                    1367,
                    1497,
                    1369,
                    1627,
                    1629,
                    1632,
                    1511,
                    1531,
                    1534
                ],
                "_segments": [
                    1338,
                    1348,
                    1346,
                    1343
                ],
                "seg": [
                    1340,
                    1341,
                    1342,
                    1343
                ],
                "_segments.append": [
                    1343
                ],
                "self._add_offsets": [
                    1346
                ],
                "_seg": [
                    1348
                ],
                "set_segments": [
                    1352,
                    1351
                ],
                "vertex": [
                    1365
                ],
                "_": [
                    1365
                ],
                "path.iter_segments": [
                    1365
                ],
                "segments.append": [
                    1367
                ],
                "Nsegs": [
                    1376,
                    1379,
                    1373
                ],
                "segs": [
                    1377,
                    1381,
                    1373,
                    1382
                ],
                "Noffs": [
                    1380,
                    1374,
                    1375
                ],
                "i": [
                    1376,
                    1377,
                    1569,
                    1379,
                    1380,
                    1381,
                    1570
                ],
                "range": [
                    1376,
                    1379
                ],
                "io": [
                    1380,
                    1381
                ],
                "get_colors": [
                    1401
                ],
                "get_color": [
                    1401
                ],
                "LineCollection": [
                    1496,
                    2056,
                    1404
                ],
                "segment": [
                    1569,
                    1474,
                    1570,
                    1608,
                    1513,
                    1609,
                    1610,
                    1484,
                    1630,
                    1489,
                    1526,
                    1531,
                    1629,
                    1534,
                    1631
                ],
                "lineoffset": [
                    1505,
                    1474,
                    1475,
                    1633,
                    1605,
                    1609,
                    1610,
                    1524,
                    1526,
                    1527,
                    1624,
                    1630,
                    1631
                ],
                "linelength": [
                    1504,
                    1474,
                    1475,
                    1603,
                    1609,
                    1610,
                    1612,
                    1525,
                    1526,
                    1527,
                    1626,
                    1630,
                    1631
                ],
                "positions": [
                    1476,
                    1478,
                    1545,
                    1546,
                    1483,
                    1547,
                    1485,
                    1519,
                    1488,
                    1520,
                    1490,
                    1528,
                    1529,
                    1532,
                    1535
                ],
                "positions.ndim": [
                    1478
                ],
                "orientation": [
                    1481,
                    1482,
                    1581,
                    1582,
                    1487,
                    1584,
                    1588,
                    1494
                ],
                "orientation.lower": [
                    1481,
                    1482,
                    1581,
                    1582,
                    1487,
                    1584
                ],
                "positions.sort": [
                    1488,
                    1529,
                    1483
                ],
                "coord1": [
                    1484,
                    1485,
                    1489,
                    1490,
                    1531,
                    1532,
                    1534,
                    1535
                ],
                "coord2": [
                    1489,
                    1531,
                    1484,
                    1534
                ],
                "self._is_horizontal": [
                    1554,
                    1491,
                    1572,
                    1486
                ],
                "LineCollection.__init__": [
                    1496
                ],
                "linewidth": [
                    1498
                ],
                "antialiased": [
                    1500,
                    1918
                ],
                "linestyle": [
                    1501
                ],
                "self._linelength": [
                    1504,
                    1612,
                    1597
                ],
                "self._lineoffset": [
                    1505,
                    1618,
                    1633
                ],
                "self.get_segments": [
                    1568,
                    1606,
                    1511,
                    1513,
                    1627
                ],
                "pos": [
                    1607,
                    1512,
                    1513,
                    1609,
                    1610,
                    1628,
                    1630,
                    1631
                ],
                "self.is_horizontal": [
                    1572,
                    1607,
                    1512,
                    1589,
                    1561,
                    1530,
                    1628
                ],
                "self.get_lineoffset": [
                    1624,
                    1524,
                    1605
                ],
                "self.get_linelength": [
                    1626,
                    1603,
                    1525
                ],
                "position": [
                    1546,
                    1542,
                    1543
                ],
                "self.get_positions": [
                    1545
                ],
                "np.hstack": [
                    1546,
                    1831
                ],
                "self.set_positions": [
                    1547
                ],
                "extend_positions": [
                    1548
                ],
                "append_positions": [
                    1548
                ],
                "add_positions": [
                    1548
                ],
                "enumerate": [
                    1569
                ],
                "np.fliplr": [
                    1570
                ],
                "is_horizontal": [
                    1585,
                    1589,
                    1583
                ],
                "self.switch_orientation": [
                    1591
                ],
                "get_linewidth": [
                    1640,
                    1637
                ],
                "super": [
                    1640,
                    1637
                ],
                "EventCollection": [
                    1640,
                    1637
                ],
                "self.get_colors": [
                    1646
                ],
                "mpath.Path.unit_circle": [
                    1665,
                    1710
                ],
                "self._widths": [
                    1704,
                    1737,
                    1738
                ],
                "ravel": [
                    1704,
                    1705,
                    1706
                ],
                "widths": [
                    1704,
                    1738,
                    1742,
                    1744
                ],
                "self._heights": [
                    1705,
                    1739
                ],
                "heights": [
                    1705,
                    1739,
                    1745,
                    1743
                ],
                "self._angles": [
                    1706,
                    1740,
                    1741
                ],
                "np.deg2rad": [
                    1706
                ],
                "angles": [
                    1706
                ],
                "self._units": [
                    1728,
                    1730,
                    1732,
                    1735,
                    1707,
                    1749,
                    1718,
                    1720,
                    1722,
                    1724,
                    1726
                ],
                "units": [
                    1707
                ],
                "ax": [
                    1729,
                    1731,
                    1715,
                    1750,
                    1721,
                    1723
                ],
                "fig": [
                    1716,
                    1725,
                    1727
                ],
                "sc": [
                    1729,
                    1731,
                    1733,
                    1738,
                    1739,
                    1719,
                    1721,
                    1723,
                    1725,
                    1727
                ],
                "ax.bbox.width": [
                    1721,
                    1729
                ],
                "ax.bbox": [
                    1721,
                    1723,
                    1729,
                    1731
                ],
                "ax.viewLim.width": [
                    1721
                ],
                "ax.viewLim": [
                    1721,
                    1723
                ],
                "ax.bbox.height": [
                    1723,
                    1731
                ],
                "ax.viewLim.height": [
                    1723
                ],
                "fig.dpi": [
                    1725,
                    1727
                ],
                "sin_angle": [
                    1744,
                    1740,
                    1743
                ],
                "np.sin": [
                    1740
                ],
                "cos_angle": [
                    1745,
                    1741,
                    1742
                ],
                "np.cos": [
                    1741
                ],
                "_affine": [
                    1752,
                    1748
                ],
                "m": [
                    1752,
                    1750,
                    1751
                ],
                "copy": [
                    1750
                ],
                "ax.transData.get_affine": [
                    1750
                ],
                "ax.transData": [
                    1750
                ],
                "self._set_transforms": [
                    1756
                ],
                "match_original": [
                    1793
                ],
                "patch.get_fill": [
                    1795
                ],
                "patch": [
                    1795,
                    1796
                ],
                "patch.get_facecolor": [
                    1796
                ],
                "determine_facecolor": [
                    1799
                ],
                "patches": [
                    1799,
                    1800,
                    1801,
                    1802,
                    1803,
                    1807,
                    1811
                ],
                "p.get_edgecolor": [
                    1800
                ],
                "p.get_linewidth": [
                    1801
                ],
                "p.get_linestyle": [
                    1802
                ],
                "p.get_antialiased": [
                    1803
                ],
                "transform_path": [
                    1810
                ],
                "p.get_transform": [
                    1810
                ],
                "p.get_path": [
                    1810
                ],
                "self._triangulation": [
                    1841,
                    1863,
                    1823
                ],
                "triangulation": [
                    1832,
                    1831,
                    1823
                ],
                "self._shading": [
                    1824,
                    2035,
                    1919
                ],
                "self._bbox": [
                    1921,
                    1922,
                    1827,
                    1833,
                    1936
                ],
                "transforms.Bbox.unit": [
                    1921,
                    1827
                ],
                "triangulation.x.reshape": [
                    1831
                ],
                "triangulation.x": [
                    1831
                ],
                "triangulation.y.reshape": [
                    1832
                ],
                "triangulation.y": [
                    1832
                ],
                "self._bbox.update_from_data_xy": [
                    1833,
                    1922
                ],
                "self.convert_mesh_to_paths": [
                    1841,
                    1931
                ],
                "triangles": [
                    1864,
                    1866,
                    1869,
                    2000,
                    2036,
                    2039,
                    1977,
                    1851,
                    1852,
                    1983
                ],
                "tri.get_masked_triangles": [
                    1864,
                    1851
                ],
                "tri": [
                    1863,
                    1864,
                    1866,
                    1851,
                    1852
                ],
                "np.stack": [
                    1866,
                    1852
                ],
                "tri.x": [
                    1866,
                    1852
                ],
                "tri.y": [
                    1866,
                    1852
                ],
                "self.get_linewidth": [
                    1873,
                    2033
                ],
                "renderer.draw_gouraud_triangles": [
                    1874,
                    2038
                ],
                "self._meshWidth": [
                    1913,
                    2042,
                    1932,
                    2037
                ],
                "meshWidth": [
                    1985,
                    1923,
                    1957,
                    1998,
                    1913,
                    1917,
                    1983
                ],
                "self._meshHeight": [
                    1914,
                    2042,
                    1932,
                    2037
                ],
                "meshHeight": [
                    1985,
                    1923,
                    1957,
                    1998,
                    1914,
                    1917,
                    1983
                ],
                "self._coordinates": [
                    2020,
                    2022,
                    2025,
                    1932,
                    1916
                ],
                "reshape": [
                    1985,
                    1916
                ],
                "coordinates": [
                    1922,
                    2020,
                    2021,
                    2022,
                    2043,
                    2025,
                    1966,
                    1967,
                    1969,
                    2037,
                    1946,
                    1947,
                    1916,
                    1949
                ],
                "self._antialiased": [
                    2044,
                    1918
                ],
                "shading": [
                    1919
                ],
                "coordinates.reshape": [
                    1922,
                    2022
                ],
                "transform_bbox": [
                    1936
                ],
                "coordinates.data": [
                    1947,
                    1967
                ],
                "points": [
                    1958,
                    1957,
                    1950
                ],
                "points.reshape": [
                    1957
                ],
                "p_a": [
                    1978,
                    1971,
                    1981,
                    1975
                ],
                "p_b": [
                    1978,
                    1979,
                    1972,
                    1975
                ],
                "p_c": [
                    1979,
                    1980,
                    1973,
                    1975
                ],
                "p_d": [
                    1980,
                    1981,
                    1974,
                    1975
                ],
                "p_center": [
                    1975,
                    1978,
                    1979,
                    1980,
                    1981
                ],
                "triangles.reshape": [
                    1983
                ],
                "c_a": [
                    1993,
                    1986,
                    1996,
                    1990
                ],
                "c_b": [
                    1993,
                    1994,
                    1987,
                    1990
                ],
                "c_c": [
                    1994,
                    1995,
                    1988,
                    1990
                ],
                "c_d": [
                    1995,
                    1996,
                    1989,
                    1990
                ],
                "c_center": [
                    1990,
                    1993,
                    1994,
                    1995,
                    1996
                ],
                "colors.reshape": [
                    1998
                ],
                "self._coordinates.reshape": [
                    2020
                ],
                "transform.transform": [
                    2021
                ],
                "self._coordinates.shape": [
                    2022
                ],
                "self.convert_mesh_to_triangles": [
                    2036
                ],
                "renderer.draw_quad_mesh": [
                    2041
                ],
                "self.get_edgecolors": [
                    2044
                ],
                "patchstr": [
                    2050,
                    2055
                ],
                "artist.kwdoc": [
                    2056,
                    2050
                ],
                "k": [
                    2051,
                    2055
                ]
            },
            "filtered_variables_in_file": {
                "artist.Artist": [
                    744,
                    114,
                    29,
                    775
                ],
                "artist": [
                    2050,
                    775,
                    744,
                    1192,
                    2056,
                    114,
                    2002,
                    1855,
                    249,
                    1754,
                    29,
                    863
                ],
                "cm.ScalarMappable": [
                    115,
                    29
                ],
                "cm": [
                    115,
                    29
                ],
                "_offsets": [
                    76
                ],
                "np.zeros": [
                    856,
                    148,
                    76,
                    1737
                ],
                "np": [
                    1528,
                    1546,
                    148,
                    151,
                    1946,
                    1051,
                    1052,
                    1950,
                    1058,
                    1059,
                    1570,
                    1061,
                    1062,
                    1063,
                    1704,
                    1705,
                    1706,
                    1831,
                    1709,
                    1966,
                    437,
                    1977,
                    1852,
                    1341,
                    1342,
                    194,
                    195,
                    964,
                    967,
                    1992,
                    1737,
                    1866,
                    76,
                    1740,
                    1741,
                    84,
                    852,
                    853,
                    855,
                    856,
                    857,
                    1366,
                    988,
                    2015,
                    227,
                    998,
                    231,
                    999,
                    1009,
                    242,
                    243,
                    498,
                    1010,
                    1141,
                    1652,
                    632,
                    1916
                ],
                "_transOffset": [
                    77
                ],
                "transforms.IdentityTransform": [
                    1184,
                    1664,
                    2023,
                    1708,
                    77,
                    210
                ],
                "transforms": [
                    1184,
                    1664,
                    1921,
                    1827,
                    2023,
                    298,
                    204,
                    77,
                    1196,
                    1708,
                    176,
                    210,
                    1748
                ],
                "_transforms": [
                    84
                ],
                "np.empty": [
                    1709,
                    84,
                    853,
                    1063
                ],
                "_edge_default": [
                    88,
                    1413,
                    1224
                ],
                "artist.Artist.__init__": [
                    114
                ],
                "self": [
                    114,
                    115,
                    118,
                    120,
                    122,
                    123,
                    124,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    139,
                    141,
                    144,
                    146,
                    148,
                    149,
                    156,
                    157,
                    159,
                    161,
                    162,
                    163,
                    166,
                    172,
                    175,
                    178,
                    182,
                    183,
                    184,
                    185,
                    200,
                    210,
                    215,
                    216,
                    217,
                    218,
                    220,
                    222,
                    225,
                    226,
                    229,
                    230,
                    251,
                    253,
                    255,
                    257,
                    260,
                    261,
                    263,
                    264,
                    266,
                    274,
                    275,
                    277,
                    279,
                    287,
                    288,
                    289,
                    293,
                    294,
                    295,
                    296,
                    307,
                    308,
                    310,
                    311,
                    315,
                    316,
                    317,
                    318,
                    325,
                    326,
                    327,
                    328,
                    329,
                    332,
                    333,
                    344,
                    347,
                    356,
                    357,
                    359,
                    363,
                    364,
                    365,
                    366,
                    368,
                    372,
                    374,
                    384,
                    385,
                    388,
                    422,
                    423,
                    427,
                    441,
                    442,
                    444,
                    445,
                    450,
                    451,
                    453,
                    469,
                    470,
                    481,
                    498,
                    501,
                    502,
                    503,
                    544,
                    547,
                    548,
                    560,
                    565,
                    577,
                    582,
                    632,
                    633,
                    648,
                    649,
                    655,
                    658,
                    661,
                    662,
                    677,
                    678,
                    681,
                    684,
                    685,
                    687,
                    693,
                    699,
                    702,
                    708,
                    712,
                    713,
                    714,
                    715,
                    727,
                    728,
                    743,
                    744,
                    745,
                    746,
                    749,
                    752,
                    756,
                    758,
                    760,
                    762,
                    763,
                    764,
                    765,
                    766,
                    770,
                    775,
                    776,
                    777,
                    778,
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    788,
                    789,
                    790,
                    792,
                    837,
                    852,
                    853,
                    855,
                    856,
                    857,
                    858,
                    859,
                    860,
                    861,
                    865,
                    866,
                    883,
                    884,
                    885,
                    886,
                    889,
                    890,
                    893,
                    951,
                    964,
                    967,
                    983,
                    985,
                    1001,
                    1002,
                    1007,
                    1013,
                    1044,
                    1045,
                    1046,
                    1047,
                    1055,
                    1067,
                    1069,
                    1071,
                    1072,
                    1081,
                    1084,
                    1086,
                    1087,
                    1113,
                    1179,
                    1180,
                    1181,
                    1182,
                    1183,
                    1184,
                    1187,
                    1190,
                    1194,
                    1195,
                    1196,
                    1197,
                    1199,
                    1319,
                    1333,
                    1345,
                    1346,
                    1348,
                    1349,
                    1364,
                    1372,
                    1395,
                    1396,
                    1399,
                    1486,
                    1491,
                    1496,
                    1504,
                    1505,
                    1511,
                    1512,
                    1513,
                    1521,
                    1524,
                    1525,
                    1530,
                    1536,
                    1545,
                    1547,
                    1554,
                    1561,
                    1568,
                    1571,
                    1572,
                    1573,
                    1589,
                    1591,
                    1597,
                    1603,
                    1605,
                    1606,
                    1607,
                    1611,
                    1612,
                    1618,
                    1624,
                    1626,
                    1627,
                    1628,
                    1632,
                    1633,
                    1637,
                    1640,
                    1646,
                    1662,
                    1663,
                    1664,
                    1665,
                    1703,
                    1704,
                    1705,
                    1706,
                    1707,
                    1708,
                    1709,
                    1710,
                    1715,
                    1716,
                    1718,
                    1720,
                    1722,
                    1724,
                    1726,
                    1728,
                    1730,
                    1732,
                    1735,
                    1737,
                    1738,
                    1739,
                    1740,
                    1741,
                    1742,
                    1743,
                    1744,
                    1745,
                    1746,
                    1749,
                    1752,
                    1756,
                    1757,
                    1805,
                    1807,
                    1812,
                    1822,
                    1823,
                    1824,
                    1825,
                    1827,
                    1833,
                    1836,
                    1837,
                    1838,
                    1841,
                    1857,
                    1859,
                    1860,
                    1863,
                    1868,
                    1869,
                    1872,
                    1873,
                    1876,
                    1912,
                    1913,
                    1914,
                    1916,
                    1918,
                    1919,
                    1921,
                    1922,
                    1926,
                    1927,
                    1928,
                    1931,
                    1932,
                    1933,
                    1936,
                    1985,
                    2004,
                    2006,
                    2007,
                    2008,
                    2009,
                    2011,
                    2012,
                    2013,
                    2014,
                    2017,
                    2020,
                    2022,
                    2025,
                    2032,
                    2033,
                    2035,
                    2036,
                    2037,
                    2042,
                    2043,
                    2044,
                    2046,
                    2047
                ],
                "cm.ScalarMappable.__init__": [
                    115
                ],
                "norm": [
                    115,
                    1327
                ],
                "cmap": [
                    1328,
                    115
                ],
                "self._us_linestyles": [
                    544,
                    548,
                    783,
                    118,
                    502
                ],
                "self._linestyles": [
                    547,
                    294,
                    327,
                    782,
                    752,
                    501,
                    120,
                    316
                ],
                "self._us_lw": [
                    122,
                    498,
                    548,
                    502
                ],
                "self._linewidths": [
                    547,
                    293,
                    327,
                    123,
                    749,
                    781,
                    501,
                    315
                ],
                "self._is_filled": [
                    1825,
                    770,
                    655,
                    658,
                    693,
                    762,
                    124
                ],
                "self._hatch_color": [
                    714,
                    266,
                    126
                ],
                "mcolors.to_rgba": [
                    126
                ],
                "mcolors": [
                    712,
                    1316,
                    661,
                    126
                ],
                "mpl.rcParams": [
                    1312,
                    1314,
                    965,
                    653,
                    494,
                    496,
                    692,
                    694,
                    631,
                    126,
                    606,
                    1310
                ],
                "mpl": [
                    992,
                    986,
                    1312,
                    1314,
                    965,
                    653,
                    494,
                    496,
                    692,
                    694,
                    631,
                    953,
                    126,
                    955,
                    989,
                    606,
                    1310
                ],
                "self.set_facecolor": [
                    648,
                    127
                ],
                "facecolors": [
                    288,
                    321,
                    292,
                    1321,
                    127
                ],
                "self.set_edgecolor": [
                    128,
                    649,
                    1395
                ],
                "edgecolors": [
                    128,
                    289,
                    314,
                    292
                ],
                "self.set_linewidth": [
                    129
                ],
                "linewidths": [
                    1312,
                    129,
                    609,
                    611,
                    1311,
                    614,
                    618,
                    1322,
                    620,
                    607
                ],
                "self.set_linestyle": [
                    130
                ],
                "linestyles": [
                    130,
                    1323
                ],
                "self.set_antialiased": [
                    131
                ],
                "antialiaseds": [
                    1313,
                    1314,
                    131,
                    1324
                ],
                "self.set_pickradius": [
                    132
                ],
                "pickradius": [
                    132,
                    362,
                    1329,
                    371,
                    373
                ],
                "self.set_urls": [
                    133
                ],
                "urls": [
                    384,
                    133
                ],
                "self.set_hatch": [
                    134
                ],
                "hatch": [
                    422,
                    134
                ],
                "self.set_offset_position": [
                    135
                ],
                "offset_position": [
                    468,
                    469,
                    135
                ],
                "self.set_zorder": [
                    136
                ],
                "zorder": [
                    136,
                    1330
                ],
                "capstyle": [
                    138,
                    139
                ],
                "self.set_capstyle": [
                    139
                ],
                "self._capstyle": [
                    141,
                    560,
                    565,
                    310,
                    311
                ],
                "joinstyle": [
                    144,
                    143
                ],
                "self.set_joinstyle": [
                    144
                ],
                "self._joinstyle": [
                    577,
                    582,
                    146,
                    307,
                    308
                ],
                "self._offsets": [
                    451,
                    2012,
                    2009,
                    148,
                    184,
                    217,
                    442,
                    156,
                    2013,
                    2014
                ],
                "self._uniform_offsets": [
                    1345,
                    450,
                    453,
                    149,
                    1372,
                    441,
                    444,
                    159
                ],
                "offsets": [
                    257,
                    150,
                    151,
                    153,
                    154,
                    156,
                    159,
                    1325,
                    437,
                    438,
                    439,
                    184,
                    442,
                    444,
                    191,
                    321,
                    194,
                    195,
                    325,
                    198,
                    201,
                    217,
                    2009,
                    1372,
                    1374,
                    2015,
                    1377,
                    228,
                    229,
                    230,
                    231,
                    1381,
                    2028,
                    238,
                    368,
                    242,
                    243,
                    373,
                    247,
                    2043
                ],
                "np.asanyarray": [
                    1528,
                    1546,
                    437,
                    151
                ],
                "offsets.shape": [
                    153,
                    438,
                    1374
                ],
                "transOffset": [
                    257,
                    155,
                    157,
                    1326,
                    183,
                    190,
                    191,
                    192,
                    321,
                    325,
                    201,
                    2008,
                    216,
                    2027,
                    2028,
                    237,
                    238,
                    2029,
                    240,
                    368,
                    373,
                    247,
                    2043
                ],
                "self._transOffset": [
                    157,
                    175
                ],
                "self._path_effects": [
                    161
                ],
                "self.update": [
                    162
                ],
                "kwargs": [
                    1799,
                    1800,
                    1801,
                    1802,
                    1803,
                    1805,
                    1044,
                    1179,
                    1822,
                    162,
                    1703,
                    1331,
                    965,
                    968,
                    1113,
                    1502,
                    1003,
                    1133,
                    883,
                    1912,
                    1662
                ],
                "self._paths": [
                    1665,
                    1926,
                    1928,
                    1931,
                    1812,
                    1182,
                    1055,
                    163,
                    166,
                    1067,
                    1836,
                    1069,
                    1710,
                    1071,
                    1838,
                    1841,
                    1081,
                    1084,
                    1086,
                    1348,
                    1364,
                    889,
                    893
                ],
                "self._transforms": [
                    1737,
                    1195,
                    172,
                    1197,
                    1709,
                    1742,
                    1743,
                    1744,
                    1745,
                    1746,
                    853,
                    856,
                    858,
                    859,
                    860
                ],
                "t": [
                    175,
                    176,
                    177,
                    178,
                    179
                ],
                "transforms.Transform": [
                    176
                ],
                "t._as_mpl_transform": [
                    178
                ],
                "self.axes": [
                    178,
                    1715
                ],
                "transform": [
                    257,
                    2039,
                    299,
                    301,
                    182,
                    187,
                    188,
                    189,
                    324,
                    1860,
                    200,
                    1874,
                    2007,
                    215,
                    2019,
                    2021,
                    2023,
                    233,
                    234,
                    236,
                    368,
                    372,
                    247,
                    2042
                ],
                "self.get_transform": [
                    1860,
                    1936,
                    182,
                    2007,
                    215
                ],
                "self.get_offset_transform": [
                    216,
                    2008,
                    183
                ],
                "paths": [
                    257,
                    1810,
                    1812,
                    291,
                    302,
                    185,
                    188,
                    320,
                    324,
                    198,
                    200,
                    218,
                    221,
                    227,
                    234,
                    235,
                    368,
                    372,
                    884,
                    247,
                    889
                ],
                "self.get_paths": [
                    185,
                    218,
                    1013,
                    222
                ],
                "transform.is_affine": [
                    233,
                    187,
                    2019
                ],
                "transform.transform_path_non_affine": [
                    234,
                    188
                ],
                "p": [
                    1799,
                    1800,
                    1801,
                    1802,
                    1803,
                    1967,
                    1969,
                    1810,
                    1811,
                    1971,
                    1972,
                    1973,
                    1974,
                    188
                ],
                "transform.get_affine": [
                    236,
                    189
                ],
                "transOffset.is_affine": [
                    2027,
                    237,
                    190
                ],
                "transOffset.transform_non_affine": [
                    2028,
                    238,
                    191
                ],
                "transOffset.get_affine": [
                    192,
                    240,
                    2029
                ],
                "np.ma.MaskedArray": [
                    194,
                    1058,
                    1966,
                    242,
                    1946,
                    1051,
                    1341
                ],
                "np.ma": [
                    194,
                    1059,
                    1058,
                    1966,
                    242,
                    1946,
                    1051,
                    1341
                ],
                "offsets.filled": [
                    195,
                    243
                ],
                "np.nan": [
                    195,
                    1052,
                    243
                ],
                "result": [
                    202,
                    204,
                    205,
                    199
                ],
                "mpath.get_path_collection_extents": [
                    199
                ],
                "mpath": [
                    1665,
                    1958,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1069,
                    1710,
                    1071,
                    1204,
                    1209,
                    1084,
                    1853,
                    1086,
                    321,
                    1348,
                    199,
                    227,
                    1140
                ],
                "transform.frozen": [
                    324,
                    200,
                    1874,
                    372,
                    2039,
                    2042
                ],
                "self.get_transforms": [
                    200,
                    372,
                    325,
                    287
                ],
                "transOffset.frozen": [
                    201
                ],
                "result.inverse_transformed": [
                    202
                ],
                "transData": [
                    1936,
                    202
                ],
                "transforms.Bbox.null": [
                    204
                ],
                "transforms.Bbox": [
                    1921,
                    1827,
                    204
                ],
                "self.get_datalim": [
                    210
                ],
                "self.have_units": [
                    2011,
                    220
                ],
                "path": [
                    227,
                    234,
                    235,
                    1364,
                    1365,
                    222,
                    223
                ],
                "vertices": [
                    224,
                    1365,
                    1366,
                    1367,
                    223
                ],
                "path.vertices": [
                    223
                ],
                "xs": [
                    224,
                    225,
                    227,
                    229,
                    231,
                    2013,
                    2015
                ],
                "ys": [
                    224,
                    226,
                    227,
                    230,
                    231,
                    2014,
                    2015
                ],
                "self.convert_xunits": [
                    2013,
                    225,
                    229
                ],
                "self.convert_yunits": [
                    226,
                    2014,
                    230
                ],
                "paths.append": [
                    227
                ],
                "mpath.Path": [
                    1665,
                    1958,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1069,
                    1710,
                    1071,
                    1204,
                    1209,
                    1084,
                    1853,
                    1086,
                    321,
                    1348,
                    227,
                    1140
                ],
                "np.column_stack": [
                    2015,
                    227,
                    231
                ],
                "path.codes": [
                    227
                ],
                "offsets.size": [
                    228
                ],
                "self.get_visible": [
                    1857,
                    251,
                    2004,
                    359
                ],
                "renderer.open_group": [
                    1859,
                    253,
                    2006
                ],
                "renderer": [
                    259,
                    279,
                    303,
                    1199,
                    319,
                    323,
                    1859,
                    332,
                    1871,
                    1874,
                    1876,
                    2006,
                    1757,
                    866,
                    2031,
                    2038,
                    2041,
                    253,
                    2046
                ],
                "self.__class__.__name__": [
                    1859,
                    332,
                    1876,
                    2006,
                    253,
                    2046
                ],
                "self.__class__": [
                    1859,
                    332,
                    1876,
                    2006,
                    253,
                    2046
                ],
                "self.get_gid": [
                    253,
                    2006
                ],
                "self.update_scalarmappable": [
                    2017,
                    1868,
                    255
                ],
                "self._prepare_points": [
                    368,
                    257
                ],
                "gc": [
                    259,
                    260,
                    261,
                    264,
                    266,
                    275,
                    308,
                    311,
                    314,
                    315,
                    316,
                    317,
                    318,
                    320,
                    324,
                    331,
                    1871,
                    1872,
                    1873,
                    1874,
                    1875,
                    2031,
                    2032,
                    2033,
                    2039,
                    2042,
                    2045
                ],
                "renderer.new_gc": [
                    2031,
                    259,
                    1871
                ],
                "self._set_gc_clip": [
                    1872,
                    2032,
                    260
                ],
                "gc.set_snap": [
                    261
                ],
                "self.get_snap": [
                    261
                ],
                "self._hatch": [
                    422,
                    263,
                    264,
                    427,
                    785
                ],
                "gc.set_hatch": [
                    264
                ],
                "gc.set_hatch_color": [
                    266
                ],
                "cbook.warn_deprecated": [
                    269
                ],
                "cbook": [
                    1126,
                    684,
                    269,
                    531,
                    467,
                    1493,
                    22,
                    1587
                ],
                "self.get_sketch_params": [
                    274,
                    275
                ],
                "gc.set_sketch_params": [
                    275
                ],
                "self.get_path_effects": [
                    277,
                    279
                ],
                "PathEffectRenderer": [
                    279
                ],
                "trans": [
                    297,
                    298,
                    291,
                    287
                ],
                "self.get_facecolor": [
                    288,
                    1985,
                    326,
                    685,
                    2043
                ],
                "self.get_edgecolor": [
                    289,
                    326
                ],
                "do_single_path_optimization": [
                    305,
                    290,
                    313
                ],
                "self._antialiaseds": [
                    295,
                    328,
                    776,
                    632,
                    317
                ],
                "self._urls": [
                    384,
                    388,
                    295,
                    328,
                    318
                ],
                "self.get_hatch": [
                    296
                ],
                "combined_transform": [
                    320,
                    298,
                    301,
                    302
                ],
                "transforms.Affine2D": [
                    298,
                    1748,
                    1196
                ],
                "extents": [
                    304,
                    302
                ],
                "get_extents": [
                    302
                ],
                "width": [
                    304,
                    303
                ],
                "height": [
                    304,
                    303
                ],
                "renderer.get_canvas_width_height": [
                    303
                ],
                "extents.width": [
                    304
                ],
                "extents.height": [
                    304
                ],
                "gc.set_joinstyle": [
                    308
                ],
                "gc.set_capstyle": [
                    311
                ],
                "gc.set_foreground": [
                    314
                ],
                "gc.set_linewidth": [
                    1873,
                    315,
                    2033
                ],
                "gc.set_dashes": [
                    316
                ],
                "gc.set_antialiased": [
                    317
                ],
                "gc.set_url": [
                    318
                ],
                "renderer.draw_markers": [
                    319
                ],
                "combined_transform.frozen": [
                    320
                ],
                "renderer.draw_path_collection": [
                    323
                ],
                "self._offset_position": [
                    329,
                    481,
                    469
                ],
                "gc.restore": [
                    1875,
                    331,
                    2045
                ],
                "renderer.close_group": [
                    332,
                    2046,
                    1876
                ],
                "self.stale": [
                    385,
                    1933,
                    662,
                    1047,
                    792,
                    1573,
                    423,
                    1072,
                    445,
                    1087,
                    1349,
                    715,
                    333,
                    470,
                    861,
                    1396,
                    886,
                    503,
                    633,
                    890,
                    766,
                    2047
                ],
                "artist.allow_rasterization": [
                    1192,
                    2002,
                    863,
                    249,
                    1754,
                    1855
                ],
                "self._pickradius": [
                    344,
                    784,
                    347,
                    366
                ],
                "pr": [
                    344
                ],
                "self._contains": [
                    356,
                    357
                ],
                "mouseevent": [
                    371,
                    357
                ],
                "self._picker": [
                    363,
                    364,
                    365
                ],
                "Number": [
                    364
                ],
                "ind": [
                    376,
                    370
                ],
                "_path.point_in_path_collection": [
                    370
                ],
                "_path": [
                    370
                ],
                "mouseevent.x": [
                    371
                ],
                "mouseevent.y": [
                    371
                ],
                "self.get_offset_position": [
                    374
                ],
                "cbook._check_in_list": [
                    1587,
                    467,
                    1493
                ],
                "lw": [
                    617,
                    618,
                    493,
                    494,
                    495,
                    496,
                    498
                ],
                "np.atleast_1d": [
                    632,
                    498
                ],
                "np.asarray": [
                    1061,
                    1704,
                    1705,
                    498,
                    1366,
                    855,
                    632,
                    1916,
                    1342
                ],
                "self._bcast_lwls": [
                    547,
                    501
                ],
                "ls": [
                    530,
                    531,
                    532,
                    535,
                    537,
                    541
                ],
                "cbook.ls_mapper.get": [
                    531
                ],
                "cbook.ls_mapper": [
                    531
                ],
                "dashes": [
                    544,
                    609,
                    610,
                    613,
                    617,
                    618,
                    620,
                    532,
                    535,
                    537,
                    607
                ],
                "mlines._get_dash_pattern": [
                    537,
                    532,
                    535
                ],
                "mlines": [
                    617,
                    532,
                    1012,
                    535,
                    537
                ],
                "x": [
                    896,
                    1958,
                    1127,
                    1196,
                    1197,
                    537,
                    1853
                ],
                "cs": [
                    560,
                    562,
                    559
                ],
                "js": [
                    576,
                    577,
                    579
                ],
                "l_dashes": [
                    610,
                    612,
                    614
                ],
                "l_lw": [
                    611,
                    612,
                    613
                ],
                "gcd": [
                    612,
                    613,
                    614
                ],
                "math.gcd": [
                    612
                ],
                "math": [
                    612
                ],
                "mlines._scale_dashes": [
                    617
                ],
                "o": [
                    617,
                    618
                ],
                "d": [
                    617,
                    618
                ],
                "aa": [
                    632,
                    630,
                    631
                ],
                "c": [
                    648,
                    649,
                    652,
                    653,
                    657,
                    661,
                    1947,
                    1949,
                    1951,
                    1952,
                    1953,
                    1954,
                    1955,
                    677,
                    678,
                    691,
                    694,
                    696,
                    701,
                    1985,
                    1986,
                    707,
                    1987,
                    1988,
                    1989,
                    712,
                    727,
                    728,
                    1395
                ],
                "c.lower": [
                    657,
                    707,
                    701
                ],
                "self._facecolors": [
                    681,
                    780,
                    1869,
                    661,
                    763
                ],
                "mcolors.to_rgba_array": [
                    712,
                    1316,
                    661
                ],
                "self._alpha": [
                    712,
                    765,
                    763,
                    661
                ],
                "self._original_facecolor": [
                    745,
                    779,
                    677
                ],
                "self._set_facecolor": [
                    745,
                    678
                ],
                "cbook._str_equal": [
                    684
                ],
                "self._edgecolors": [
                    708,
                    712,
                    713,
                    714,
                    778,
                    684,
                    687,
                    1399,
                    765
                ],
                "set_hatch_color": [
                    697,
                    690,
                    713
                ],
                "self._edge_default": [
                    693
                ],
                "self._is_stroked": [
                    699,
                    764,
                    702
                ],
                "self._original_edgecolor": [
                    777,
                    746,
                    727
                ],
                "self._set_edgecolor": [
                    728,
                    746
                ],
                "alpha": [
                    744,
                    738,
                    740
                ],
                "self.update_dict": [
                    743
                ],
                "artist.Artist.set_alpha": [
                    744
                ],
                "self._A": [
                    788,
                    756,
                    758,
                    763,
                    765
                ],
                "self._A.ndim": [
                    758
                ],
                "self.check_update": [
                    760
                ],
                "self.to_rgba": [
                    763,
                    765
                ],
                "artist.Artist.update_from": [
                    775
                ],
                "other": [
                    775,
                    776,
                    777,
                    778,
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    788,
                    789,
                    790
                ],
                "other._antialiaseds": [
                    776
                ],
                "other._original_edgecolor": [
                    777
                ],
                "other._edgecolors": [
                    778
                ],
                "other._original_facecolor": [
                    779
                ],
                "other._facecolors": [
                    780
                ],
                "other._linewidths": [
                    781
                ],
                "other._linestyles": [
                    782
                ],
                "other._us_linestyles": [
                    783
                ],
                "other._pickradius": [
                    784
                ],
                "other._hatch": [
                    785
                ],
                "other._A": [
                    788
                ],
                "self.norm": [
                    789,
                    1007
                ],
                "other.norm": [
                    789
                ],
                "self.cmap": [
                    790,
                    1007
                ],
                "other.cmap": [
                    790
                ],
                "cbook._define_aliases": [
                    22
                ],
                "docstring.interpd.update": [
                    2056,
                    798,
                    2055
                ],
                "docstring.interpd": [
                    2056,
                    798,
                    2055
                ],
                "docstring": [
                    1024,
                    1095,
                    1671,
                    2055,
                    874,
                    2056,
                    1654,
                    1143,
                    798
                ],
                "Collection": [
                    2050,
                    1668,
                    1805,
                    1044,
                    1815,
                    1179,
                    1822,
                    1318,
                    1703,
                    1199,
                    821,
                    1212,
                    1879,
                    1757,
                    1760,
                    866,
                    883,
                    1912,
                    1662
                ],
                "_factor": [
                    825,
                    1652,
                    1141
                ],
                "self._sizes": [
                    865,
                    837,
                    1194,
                    852,
                    855,
                    856,
                    857
                ],
                "sizes": [
                    851,
                    1045,
                    885,
                    855,
                    1180,
                    1663
                ],
                "np.array": [
                    852
                ],
                "scale": [
                    857,
                    858,
                    859
                ],
                "np.sqrt": [
                    857,
                    1009
                ],
                "dpi": [
                    857
                ],
                "self._factor": [
                    857
                ],
                "self.set_sizes": [
                    865,
                    1194,
                    1045,
                    885,
                    1180,
                    1663
                ],
                "self.figure.dpi": [
                    865,
                    1194
                ],
                "self.figure": [
                    865,
                    1194,
                    1716
                ],
                "Collection.draw": [
                    866,
                    1757,
                    1199
                ],
                "_CollectionWithSizes": [
                    1137,
                    1649,
                    869,
                    1023
                ],
                "Collection.__init__": [
                    1318,
                    1703,
                    1805,
                    1822,
                    883,
                    1044,
                    1912,
                    1179,
                    1662
                ],
                "self.set_paths": [
                    1927,
                    884,
                    1837,
                    1807
                ],
                "docstring.dedent_interpd": [
                    1024,
                    1095,
                    1671,
                    874,
                    1654,
                    1143
                ],
                "handles": [
                    963,
                    1020,
                    949,
                    1014
                ],
                "labels": [
                    1018,
                    963,
                    1020,
                    950
                ],
                "hasarray": [
                    959,
                    951
                ],
                "self.get_array": [
                    983,
                    964,
                    951
                ],
                "fmt": [
                    973,
                    1015,
                    952,
                    953,
                    954,
                    955,
                    956,
                    1017,
                    1016
                ],
                "mpl.ticker.ScalarFormatter": [
                    953
                ],
                "mpl.ticker": [
                    992,
                    953,
                    986,
                    955,
                    989
                ],
                "mpl.ticker.StrMethodFormatter": [
                    955
                ],
                "fmt.create_dummy_axis": [
                    956
                ],
                "prop": [
                    966,
                    971,
                    1006,
                    1008,
                    982,
                    984,
                    958
                ],
                "warnings.warn": [
                    960
                ],
                "warnings": [
                    960
                ],
                "u": [
                    964,
                    967,
                    973,
                    976,
                    979
                ],
                "np.unique": [
                    964,
                    967
                ],
                "size": [
                    1009,
                    1010,
                    1012,
                    965
                ],
                "kwargs.pop": [
                    968,
                    965
                ],
                "self.get_sizes": [
                    985,
                    967
                ],
                "color": [
                    968,
                    1499,
                    1012,
                    1007
                ],
                "fmt.set_bounds": [
                    973
                ],
                "func": [
                    994,
                    995,
                    996,
                    999,
                    973,
                    980
                ],
                "num": [
                    992,
                    974,
                    975,
                    976,
                    977,
                    978,
                    986,
                    987,
                    988,
                    989,
                    991
                ],
                "values": [
                    979,
                    980,
                    1005,
                    999
                ],
                "label_values": [
                    994,
                    995,
                    996,
                    997,
                    999,
                    1005,
                    980,
                    1016
                ],
                "arr": [
                    994,
                    995,
                    996,
                    998,
                    983,
                    985
                ],
                "mpl.ticker.Locator": [
                    986
                ],
                "loc": [
                    992,
                    994,
                    987,
                    989
                ],
                "np.iterable": [
                    988
                ],
                "mpl.ticker.FixedLocator": [
                    989
                ],
                "mpl.ticker.MaxNLocator": [
                    992
                ],
                "loc.tick_values": [
                    994
                ],
                "cond": [
                    995,
                    997
                ],
                "xarr": [
                    998,
                    999
                ],
                "np.linspace": [
                    998
                ],
                "arr.min": [
                    998
                ],
                "arr.max": [
                    998
                ],
                "np.interp": [
                    999
                ],
                "kw": [
                    1001,
                    1003,
                    1013
                ],
                "self.get_linewidths": [
                    1001
                ],
                "self.get_alpha": [
                    1002
                ],
                "kw.update": [
                    1003
                ],
                "val": [
                    1009,
                    1005,
                    1007
                ],
                "lab": [
                    1017,
                    1005
                ],
                "np.isclose": [
                    1010
                ],
                "h": [
                    1012,
                    1014
                ],
                "mlines.Line2D": [
                    1012
                ],
                "handles.append": [
                    1014
                ],
                "fmt.set_locs": [
                    1016
                ],
                "l": [
                    1017,
                    1018
                ],
                "labels.append": [
                    1018
                ],
                "self.set_verts": [
                    1046
                ],
                "verts": [
                    1056,
                    1852,
                    1866,
                    1071,
                    1874,
                    1108,
                    1046,
                    1078,
                    1113,
                    1082,
                    1051,
                    1052,
                    1853
                ],
                "closed": [
                    1046,
                    1054
                ],
                "filled": [
                    1052
                ],
                "verts.astype": [
                    1052
                ],
                "xy": [
                    1056,
                    1057,
                    1058,
                    1059,
                    1061,
                    1062,
                    1063,
                    1831,
                    1833,
                    1067,
                    1069,
                    1071,
                    1082,
                    1083,
                    1084,
                    1086
                ],
                "np.ma.concatenate": [
                    1059
                ],
                "np.concatenate": [
                    1992,
                    1977,
                    1950,
                    1062
                ],
                "codes": [
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1078,
                    1082
                ],
                "xy.shape": [
                    1063
                ],
                "mpath.Path.code_type": [
                    1063
                ],
                "mpath.Path.LINETO": [
                    1064
                ],
                "mpath.Path.MOVETO": [
                    1065
                ],
                "mpath.Path.CLOSEPOLY": [
                    1066
                ],
                "self._paths.append": [
                    1067,
                    1084,
                    1069,
                    1086
                ],
                "set_paths": [
                    1352,
                    1074
                ],
                "set_verts": [
                    1074,
                    1351
                ],
                "cds": [
                    1082,
                    1084
                ],
                "PolyCollection": [
                    1113,
                    1090
                ],
                "ymin": [
                    1133,
                    1106,
                    1107,
                    1108,
                    1111,
                    1112
                ],
                "ywidth": [
                    1106,
                    1107
                ],
                "yrange": [
                    1106
                ],
                "ymax": [
                    1133,
                    1107,
                    1109,
                    1110
                ],
                "xmin": [
                    1108,
                    1109,
                    1110,
                    1111,
                    1112
                ],
                "xwidth": [
                    1112,
                    1110,
                    1111
                ],
                "xranges": [
                    1112,
                    1130,
                    1133,
                    1125
                ],
                "PolyCollection.__init__": [
                    1113
                ],
                "ind0": [
                    1126,
                    1127
                ],
                "ind1": [
                    1126,
                    1127
                ],
                "cbook.contiguous_regions": [
                    1126
                ],
                "where": [
                    1126
                ],
                "xslice": [
                    1128,
                    1130,
                    1127
                ],
                "xranges.append": [
                    1130
                ],
                "collection": [
                    1132,
                    1134
                ],
                "BrokenBarHCollection": [
                    1132
                ],
                "_path_generator": [
                    1209,
                    1204,
                    1140
                ],
                "mpath.Path.unit_regular_polygon": [
                    1140
                ],
                "np.pi": [
                    1652,
                    1141
                ],
                "self._numsides": [
                    1187,
                    1181
                ],
                "numsides": [
                    1181,
                    1182
                ],
                "self._path_generator": [
                    1182
                ],
                "self._rotation": [
                    1196,
                    1190,
                    1183
                ],
                "rotation": [
                    1183
                ],
                "self.set_transform": [
                    1184,
                    1708,
                    1664,
                    1752
                ],
                "get_matrix": [
                    1196,
                    1750
                ],
                "rotate": [
                    1196
                ],
                "RegularPolyCollection": [
                    1202,
                    1207
                ],
                "mpath.Path.unit_regular_star": [
                    1204
                ],
                "mpath.Path.unit_regular_asterisk": [
                    1209
                ],
                "colors": [
                    1316,
                    1320,
                    1992,
                    1869,
                    1998,
                    2000,
                    1874,
                    2036,
                    2039,
                    1309,
                    1310
                ],
                "self.set_segments": [
                    1536,
                    1632,
                    1571,
                    1611,
                    1521,
                    1333
                ],
                "segments": [
                    1536,
                    1568,
                    1569,
                    1570,
                    1571,
                    1333,
                    1336,
                    1340,
                    1477,
                    1606,
                    1608,
                    1611,
                    1484,
                    1489,
                    1362,
                    1367,
                    1497,
                    1369,
                    1627,
                    1629,
                    1632,
                    1511,
                    1531,
                    1534
                ],
                "_segments": [
                    1338,
                    1348,
                    1346,
                    1343
                ],
                "seg": [
                    1340,
                    1341,
                    1342,
                    1343
                ],
                "_segments.append": [
                    1343
                ],
                "self._add_offsets": [
                    1346
                ],
                "_seg": [
                    1348
                ],
                "set_segments": [
                    1352,
                    1351
                ],
                "vertex": [
                    1365
                ],
                "_": [
                    1365
                ],
                "path.iter_segments": [
                    1365
                ],
                "segments.append": [
                    1367
                ],
                "Nsegs": [
                    1376,
                    1379,
                    1373
                ],
                "segs": [
                    1377,
                    1381,
                    1373,
                    1382
                ],
                "Noffs": [
                    1380,
                    1374,
                    1375
                ],
                "i": [
                    1376,
                    1377,
                    1569,
                    1379,
                    1380,
                    1381,
                    1570
                ],
                "io": [
                    1380,
                    1381
                ],
                "get_colors": [
                    1401
                ],
                "get_color": [
                    1401
                ],
                "LineCollection": [
                    1496,
                    2056,
                    1404
                ],
                "segment": [
                    1569,
                    1474,
                    1570,
                    1608,
                    1513,
                    1609,
                    1610,
                    1484,
                    1630,
                    1489,
                    1526,
                    1531,
                    1629,
                    1534,
                    1631
                ],
                "lineoffset": [
                    1505,
                    1474,
                    1475,
                    1633,
                    1605,
                    1609,
                    1610,
                    1524,
                    1526,
                    1527,
                    1624,
                    1630,
                    1631
                ],
                "linelength": [
                    1504,
                    1474,
                    1475,
                    1603,
                    1609,
                    1610,
                    1612,
                    1525,
                    1526,
                    1527,
                    1626,
                    1630,
                    1631
                ],
                "positions": [
                    1476,
                    1478,
                    1545,
                    1546,
                    1483,
                    1547,
                    1485,
                    1519,
                    1488,
                    1520,
                    1490,
                    1528,
                    1529,
                    1532,
                    1535
                ],
                "positions.ndim": [
                    1478
                ],
                "orientation": [
                    1481,
                    1482,
                    1581,
                    1582,
                    1487,
                    1584,
                    1588,
                    1494
                ],
                "orientation.lower": [
                    1481,
                    1482,
                    1581,
                    1582,
                    1487,
                    1584
                ],
                "positions.sort": [
                    1488,
                    1529,
                    1483
                ],
                "coord1": [
                    1484,
                    1485,
                    1489,
                    1490,
                    1531,
                    1532,
                    1534,
                    1535
                ],
                "coord2": [
                    1489,
                    1531,
                    1484,
                    1534
                ],
                "self._is_horizontal": [
                    1554,
                    1491,
                    1572,
                    1486
                ],
                "LineCollection.__init__": [
                    1496
                ],
                "linewidth": [
                    1498
                ],
                "antialiased": [
                    1500,
                    1918
                ],
                "linestyle": [
                    1501
                ],
                "self._linelength": [
                    1504,
                    1612,
                    1597
                ],
                "self._lineoffset": [
                    1505,
                    1618,
                    1633
                ],
                "self.get_segments": [
                    1568,
                    1606,
                    1511,
                    1513,
                    1627
                ],
                "pos": [
                    1607,
                    1512,
                    1513,
                    1609,
                    1610,
                    1628,
                    1630,
                    1631
                ],
                "self.is_horizontal": [
                    1572,
                    1607,
                    1512,
                    1589,
                    1561,
                    1530,
                    1628
                ],
                "self.get_lineoffset": [
                    1624,
                    1524,
                    1605
                ],
                "self.get_linelength": [
                    1626,
                    1603,
                    1525
                ],
                "position": [
                    1546,
                    1542,
                    1543
                ],
                "self.get_positions": [
                    1545
                ],
                "np.hstack": [
                    1546,
                    1831
                ],
                "self.set_positions": [
                    1547
                ],
                "extend_positions": [
                    1548
                ],
                "append_positions": [
                    1548
                ],
                "add_positions": [
                    1548
                ],
                "np.fliplr": [
                    1570
                ],
                "is_horizontal": [
                    1585,
                    1589,
                    1583
                ],
                "self.switch_orientation": [
                    1591
                ],
                "get_linewidth": [
                    1640,
                    1637
                ],
                "EventCollection": [
                    1640,
                    1637
                ],
                "self.get_colors": [
                    1646
                ],
                "mpath.Path.unit_circle": [
                    1665,
                    1710
                ],
                "self._widths": [
                    1704,
                    1737,
                    1738
                ],
                "ravel": [
                    1704,
                    1705,
                    1706
                ],
                "widths": [
                    1704,
                    1738,
                    1742,
                    1744
                ],
                "self._heights": [
                    1705,
                    1739
                ],
                "heights": [
                    1705,
                    1739,
                    1745,
                    1743
                ],
                "self._angles": [
                    1706,
                    1740,
                    1741
                ],
                "np.deg2rad": [
                    1706
                ],
                "angles": [
                    1706
                ],
                "self._units": [
                    1728,
                    1730,
                    1732,
                    1735,
                    1707,
                    1749,
                    1718,
                    1720,
                    1722,
                    1724,
                    1726
                ],
                "units": [
                    1707
                ],
                "ax": [
                    1729,
                    1731,
                    1715,
                    1750,
                    1721,
                    1723
                ],
                "fig": [
                    1716,
                    1725,
                    1727
                ],
                "sc": [
                    1729,
                    1731,
                    1733,
                    1738,
                    1739,
                    1719,
                    1721,
                    1723,
                    1725,
                    1727
                ],
                "ax.bbox.width": [
                    1721,
                    1729
                ],
                "ax.bbox": [
                    1721,
                    1723,
                    1729,
                    1731
                ],
                "ax.viewLim.width": [
                    1721
                ],
                "ax.viewLim": [
                    1721,
                    1723
                ],
                "ax.bbox.height": [
                    1723,
                    1731
                ],
                "ax.viewLim.height": [
                    1723
                ],
                "fig.dpi": [
                    1725,
                    1727
                ],
                "sin_angle": [
                    1744,
                    1740,
                    1743
                ],
                "np.sin": [
                    1740
                ],
                "cos_angle": [
                    1745,
                    1741,
                    1742
                ],
                "np.cos": [
                    1741
                ],
                "_affine": [
                    1752,
                    1748
                ],
                "m": [
                    1752,
                    1750,
                    1751
                ],
                "copy": [
                    1750
                ],
                "ax.transData.get_affine": [
                    1750
                ],
                "ax.transData": [
                    1750
                ],
                "self._set_transforms": [
                    1756
                ],
                "match_original": [
                    1793
                ],
                "patch.get_fill": [
                    1795
                ],
                "patch": [
                    1795,
                    1796
                ],
                "patch.get_facecolor": [
                    1796
                ],
                "determine_facecolor": [
                    1799
                ],
                "patches": [
                    1799,
                    1800,
                    1801,
                    1802,
                    1803,
                    1807,
                    1811
                ],
                "p.get_edgecolor": [
                    1800
                ],
                "p.get_linewidth": [
                    1801
                ],
                "p.get_linestyle": [
                    1802
                ],
                "p.get_antialiased": [
                    1803
                ],
                "transform_path": [
                    1810
                ],
                "p.get_transform": [
                    1810
                ],
                "p.get_path": [
                    1810
                ],
                "self._triangulation": [
                    1841,
                    1863,
                    1823
                ],
                "triangulation": [
                    1832,
                    1831,
                    1823
                ],
                "self._shading": [
                    1824,
                    2035,
                    1919
                ],
                "self._bbox": [
                    1921,
                    1922,
                    1827,
                    1833,
                    1936
                ],
                "transforms.Bbox.unit": [
                    1921,
                    1827
                ],
                "triangulation.x.reshape": [
                    1831
                ],
                "triangulation.x": [
                    1831
                ],
                "triangulation.y.reshape": [
                    1832
                ],
                "triangulation.y": [
                    1832
                ],
                "self._bbox.update_from_data_xy": [
                    1833,
                    1922
                ],
                "self.convert_mesh_to_paths": [
                    1841,
                    1931
                ],
                "triangles": [
                    1864,
                    1866,
                    1869,
                    2000,
                    2036,
                    2039,
                    1977,
                    1851,
                    1852,
                    1983
                ],
                "tri.get_masked_triangles": [
                    1864,
                    1851
                ],
                "tri": [
                    1863,
                    1864,
                    1866,
                    1851,
                    1852
                ],
                "np.stack": [
                    1866,
                    1852
                ],
                "tri.x": [
                    1866,
                    1852
                ],
                "tri.y": [
                    1866,
                    1852
                ],
                "self.get_linewidth": [
                    1873,
                    2033
                ],
                "renderer.draw_gouraud_triangles": [
                    1874,
                    2038
                ],
                "self._meshWidth": [
                    1913,
                    2042,
                    1932,
                    2037
                ],
                "meshWidth": [
                    1985,
                    1923,
                    1957,
                    1998,
                    1913,
                    1917,
                    1983
                ],
                "self._meshHeight": [
                    1914,
                    2042,
                    1932,
                    2037
                ],
                "meshHeight": [
                    1985,
                    1923,
                    1957,
                    1998,
                    1914,
                    1917,
                    1983
                ],
                "self._coordinates": [
                    2020,
                    2022,
                    2025,
                    1932,
                    1916
                ],
                "reshape": [
                    1985,
                    1916
                ],
                "coordinates": [
                    1922,
                    2020,
                    2021,
                    2022,
                    2043,
                    2025,
                    1966,
                    1967,
                    1969,
                    2037,
                    1946,
                    1947,
                    1916,
                    1949
                ],
                "self._antialiased": [
                    2044,
                    1918
                ],
                "shading": [
                    1919
                ],
                "coordinates.reshape": [
                    1922,
                    2022
                ],
                "transform_bbox": [
                    1936
                ],
                "coordinates.data": [
                    1947,
                    1967
                ],
                "points": [
                    1958,
                    1957,
                    1950
                ],
                "points.reshape": [
                    1957
                ],
                "p_a": [
                    1978,
                    1971,
                    1981,
                    1975
                ],
                "p_b": [
                    1978,
                    1979,
                    1972,
                    1975
                ],
                "p_c": [
                    1979,
                    1980,
                    1973,
                    1975
                ],
                "p_d": [
                    1980,
                    1981,
                    1974,
                    1975
                ],
                "p_center": [
                    1975,
                    1978,
                    1979,
                    1980,
                    1981
                ],
                "triangles.reshape": [
                    1983
                ],
                "c_a": [
                    1993,
                    1986,
                    1996,
                    1990
                ],
                "c_b": [
                    1993,
                    1994,
                    1987,
                    1990
                ],
                "c_c": [
                    1994,
                    1995,
                    1988,
                    1990
                ],
                "c_d": [
                    1995,
                    1996,
                    1989,
                    1990
                ],
                "c_center": [
                    1990,
                    1993,
                    1994,
                    1995,
                    1996
                ],
                "colors.reshape": [
                    1998
                ],
                "self._coordinates.reshape": [
                    2020
                ],
                "transform.transform": [
                    2021
                ],
                "self._coordinates.shape": [
                    2022
                ],
                "self.convert_mesh_to_triangles": [
                    2036
                ],
                "renderer.draw_quad_mesh": [
                    2041
                ],
                "self.get_edgecolors": [
                    2044
                ],
                "patchstr": [
                    2050,
                    2055
                ],
                "artist.kwdoc": [
                    2056,
                    2050
                ],
                "k": [
                    2051,
                    2055
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_25/lib/matplotlib/tests/test_collections.py",
                "test_function": "test_EventCollection_nosort",
                "test_function_code": "def test_EventCollection_nosort():\n    # Check that EventCollection doesn't modify input in place\n    arr = np.array([3, 2, 1, 10])\n    coll = EventCollection(arr)\n    np.testing.assert_array_equal(arr, np.array([3, 2, 1, 10]))",
                "test_error": "AssertionError: \nArrays are not equal\n\nMismatched elements: 2 / 4 (50%)\nMax absolute difference: 2\nMax relative difference: 2.\n x: array([ 1,  2,  3, 10])\n y: array([ 3,  2,  1, 10])",
                "full_test_error": "def test_EventCollection_nosort():\n        # Check that EventCollection doesn't modify input in place\n        arr = np.array([3, 2, 1, 10])\n        coll = EventCollection(arr)\n>       np.testing.assert_array_equal(arr, np.array([3, 2, 1, 10]))\n\nlib/matplotlib/tests/test_collections.py:730: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<built-in function eq>, array([ 1,  2,  3, 10]), array([ 3,  2,  1, 10]))\nkwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Arrays are not equal\nE           \nE           Mismatched elements: 2 / 4 (50%)\nE           Max absolute difference: 2\nE           Max relative difference: 2.\nE            x: array([ 1,  2,  3, 10])\nE            y: array([ 3,  2,  1, 10])\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}