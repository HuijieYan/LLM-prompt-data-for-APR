{
    "matplotlib": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 798,
            "file_name": "lib/matplotlib/axis.py",
            "replace_code": "def set_tick_params(self, which='major', reset=False, **kw):\n    cbook._check_in_list(['major', 'minor', 'both'], which=which)\n    kwtrans = self._translate_tick_kw(kw)\n\n    if reset:\n        if which in ['major', 'both']:\n            self._major_tick_kw.clear()\n        if which in ['minor', 'both']:\n            self._minor_tick_kw.clear()\n\n        # Update the label visibility settings\n        if 'label1On' in kwtrans:\n            self.major.formatter._set_offset_string(int(kwtrans.get('label1On')))\n        if 'label2On' in kwtrans:\n            self.major.formatter._set_offset_string(int(kwtrans.get('label2On')))\n\n        self.reset_ticks()\n    else:\n        if which in ['major', 'both']:\n            self._major_tick_kw.update(kwtrans)\n            # Update the label visibility settings for major ticks\n            if 'label1On' in kwtrans:\n                self.major.formatter._set_offset_string(int(kwtrans.get('label1On')))\n            if 'label2On' in kwtrans:\n                self.major.formatter._set_offset_string(int(kwtrans.get('label2On')))\n            \n            for tick in self.majorTicks:\n                tick._apply_params(**kwtrans)\n        if which in ['minor', 'both']:\n            self._minor_tick_kw.update(kwtrans)\n            # Update the label visibility settings for minor ticks\n            if 'label1On' in kwtrans:\n                self.minor.formatter._set_offset_string(int(kwtrans.get('label1On')))\n            if 'label2On' in kwtrans:\n                self.minor.formatter._set_offset_string(int(kwtrans.get('label2On')))\n\n            for tick in self.minorTicks:\n                tick._apply_params(**kwtrans)\n\n        # special-case label color to also apply to the offset text\n        if 'labelcolor' in kwtrans:\n            self.offsetText.set_color(kwtrans['labelcolor'])\n\n    self.stale = True",
            "import_list": []
        }
    ]
}