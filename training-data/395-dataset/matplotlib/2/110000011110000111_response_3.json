{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 4313,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False,\n            **kwargs):\n\n    # Existing code...\n\n    if marker is None:\n        marker = rcParams['scatter.marker']\n\n    if isinstance(marker, mmarkers.MarkerStyle):\n        marker_obj = marker\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n\n    if marker_obj.get_fillstyle() == 'none':\n        facecolors = 'none'  # No fill\n        edgecolors = kwargs.pop('facecolor', None)  # Use facecolor as edgecolor\n    else:\n        facecolors = kwargs.pop('facecolor', None)\n        edgecolors = kwargs.pop('edgecolor', None)",
            "imports": []
        }
    ]
}