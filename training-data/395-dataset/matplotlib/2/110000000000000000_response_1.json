{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 4313,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None,verts=None, edgecolors=None, *, plotnonfinite=False, **kwargs):\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\n    Parameters\n    ----------\n    x, y : float or array-like, shape (n, )\n        The data positions.\n\n    s : float or array-like, shape (n, ), optional\n        The marker size in points**2.\n\n    c : array-like or list of colors or color, optional\n        The marker colors. \n\n    marker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n        The marker style.\n\n    cmap : str or `~matplotlib.colors.Colormap`\n        A `.Colormap` instance or registered colormap name.\n\n    norm : `~matplotlib.colors.Normalize`, default: None\n        If *c* is an array of floats, *norm* is used to scale the color\n        data, *c*, in the range 0 to 1, in order to map into the colormap\n        *cmap*.\n\n    vmin, vmax : float, default: None\n        *vmin* and *vmax* are used in conjunction with the default norm to\n        map the color array *c* to the colormap *cmap*.\n\n    alpha : float, default: None\n        The alpha blending value, between 0 (transparent) and 1 (opaque).\n\n    linewidths : float or array-like, default: :rc:`lines.linewidth`\n        The linewidth of the marker edges. \n\n    edgecolors : color or sequence of colors\n        The edge color of the marker.\n\n    plotnonfinite : bool, default: False\n        Set to plot points with nonfinite *c*, in conjunction with\n        `~matplotlib.colors.Colormap.set_bad`.\n\n    Returns\n    -------\n    `~matplotlib.collections.PathCollection`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.collections.Collection` properties\n\n    See Also\n    --------\n    plot : To plot scatter plots when markers are identical in size and\n        color.\n\n    Notes\n    -----\n    * The `.plot` function will be faster for scatterplots where markers\n      don't vary in size or color.\n\n    * Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which\n      case all masks will be combined and only unmasked points will be\n      plotted.\n\n    * Fundamentally, scatter works with 1-D arrays; *x*, *y*, *s*, and *c*\n      may be input as N-D arrays, but within scatter they will be\n      flattened. The exception is *c*, which will be flattened only if its\n      size matches the size of *x* and *y*.\n\n    \"\"\"\n    # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    x = np.ma.ravel(x)\n    y = np.ma.ravel(y)\n    if x.size != y.size:\n        raise ValueError(\"x and y must be the same size\")\n\n    if s is None:\n        s = (20 if rcParams['_internal.classic_mode'] else rcParams['lines.markersize'] ** 2.0)\n    s = np.ma.ravel(s)\n    if len(s) not in (1, x.size):\n        raise ValueError(\"s must be a scalar, or the same size as x and y\")\n\n    c, colors, edgecolors = self._parse_scatter_color_args(\n                c, edgecolors, kwargs, x.size, get_next_color_func=self._get_patches_for_fill.get_next_color)\n\n    if plotnonfinite and colors is None:\n        c = np.ma.masked_invalid(c)\n        x, y, s, edgecolors, linewidths = cbook._combine_masks(x, y, s, edgecolors, linewidths)\n    else:\n        x, y, s, c, colors, edgecolors, linewidths = cbook._combine_masks(x, y, s, c, colors, edgecolors, linewidths)\n\n    scales = s   # Renamed for readability below.\n\n    if marker is None:\n        marker = rcParams['scatter.marker']\n\n    if isinstance(marker, mmarkers.MarkerStyle):\n        marker_obj = marker\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n\n    path = marker_obj.get_path().transformed(marker_obj.get_transform())\n    if not marker_obj.is_filled():\n        edgecolors = 'face'\n        if linewidths is None:\n            linewidths = rcParams['lines.linewidth']\n        elif np.iterable(linewidths):\n            linewidths = [ lw if lw is not None else rcParams['lines.linewidth'] for lw in linewidths]\n\n    offsets = np.ma.column_stack([x, y])\n\n    collection = mcoll.PathCollection(\n            (path,), scales,\n            facecolors=colors,\n            edgecolors=edgecolors,\n            linewidths=linewidths,\n            offsets=offsets,\n            transOffset=kwargs.pop('transform', self.transData),\n            alpha=alpha\n            )\n    collection.set_transform(mtransforms.IdentityTransform())\n    collection.update(kwargs)\n\n    if colors is None:\n        collection.set_array(c)\n        collection.set_cmap(cmap)\n        collection.set_norm(norm)\n        collection._scale_norm(norm, vmin, vmax)\n\n    if rcParams['_internal.classic_mode']:\n        if self._xmargin < 0.05 and x.size > 0:\n            self.set_xmargin(0.05)\n        if self._ymargin < 0.05 and x.size > 0:\n            self.set_ymargin(0.05)\n\n    return collection",
            "imports": [
                "from matplotlib.artist import Artist",
                "from .cbook import MatplotlibDeprecationWarning",
                "from .cbook import dedent",
                "from .cbook import deprecated",
                "from .cbook import silent_list",
                "from .figure import Figure",
                "from .legend_handler import HandlerBase",
                "from .legend_handler import HandlerNpointsYoffsets",
                "from .lines import Line2D",
                "from .markers import MarkerStyle",
                "import matplotlib.lines as mlines",
                "import matplotlib.markers as mmarkers",
                "import matplotlib.patches as mpatches",
                "import matplotlib.patheffects as mpatheffects",
                "import matplotlib.transforms as mtransforms",
                "import numpy as np",
                "import matplotlib.collections as mcoll",
                "from matplotlib.colors import Normalize"
            ]
        }
    ]
}