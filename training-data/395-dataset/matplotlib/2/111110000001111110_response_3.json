{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 4313,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n                    vmin=None, vmax=None, alpha=None, linewidths=None,\n                    verts=None, edgecolors=None, *, plotnonfinite=False,\n                    **kwargs):\n            \"\"\"\n            A scatter plot of *y* vs. *x* with varying marker size and/or color.\n            ...\n            \"\"\"\n            # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n            self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n            x = self.convert_xunits(x)\n            y = self.convert_yunits(y)\n\n            # ... (omitted code)\n\n            marker_obj = marker\n            path = marker_obj.get_path().transformed(\n                marker_obj.get_transform())\n            if not marker_obj.is_filled():\n                edgecolors = 'face'  # Set edgecolors to 'face' for hollow markers\n                if linewidths is None:\n                    linewidths = rcParams['lines.linewidth']\n                elif np.iterable(linewidths):\n                    linewidths = [\n                        lw if lw is not None else rcParams['lines.linewidth']\n                        for lw in linewidths]\n\n            # ... (omitted code)\n\n            collection = mcoll.PathCollection(\n                    (path,), scales,\n                    facecolors=colors,\n                    edgecolors=edgecolors,\n                    linewidths=linewidths,\n                    offsets=offsets,\n                    transOffset=kwargs.pop('transform', self.transData),\n                    alpha=alpha\n                    )\n            collection.set_transform(mtransforms.IdentityTransform())\n            collection.update(kwargs)\n\n            if colors is None:\n                collection.set_array(c)\n                collection.set_cmap(cmap)\n                collection.set_norm(norm)\n                collection._scale_norm(norm, vmin, vmax)\n\n            # ... (omitted code)\n\n            self.add_collection(collection)\n            self._request_autoscale_view()\n\n            return collection",
            "import_list": []
        }
    ]
}