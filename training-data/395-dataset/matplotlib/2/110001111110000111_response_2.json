{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 4313,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False,\n            **kwargs):\n\n    # ... (omitted code)\n\n    c, facecolors, edgecolors = self._parse_scatter_color_args(\n            c, edgecolors, kwargs, x.size,\n            get_next_color_func=self.get_next_color)\n\n    if plotnonfinite and facecolors is None:\n        c = np.ma.masked_invalid(c)\n        x, y, s, edgecolors, linewidths = cbook._combine_masks(x, y, s, edgecolors, linewidths)\n    else:\n        x, y, s, c, facecolors, edgecolors, linewidths = cbook._combine_masks(\n            x, y, s, c, facecolors, edgecolors, linewidths)\n    \n    # ... (omitted code)\n    \n    collection = mcoll.PathCollection(\n            (path,), scales,\n            facecolors=facecolors,  # Use parsed facecolors\n            edgecolors=edgecolors,\n            linewidths=linewidths,\n            offsets=offsets,\n            transOffset=kwargs.pop('transform', self.transData),\n            alpha=alpha\n            )\n\n    # ... (omitted code)\n\n    if facecolors is None:  # Set facecolors if not None\n        collection.set_array(c)\n        collection.set_cmap(cmap)\n        collection.set_norm(norm)\n        collection._scale_norm(norm, vmin, vmax)\n\n    # ... (omitted code)\n\n    return collection",
            "imports": []
        }
    ]
}