{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 4313,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False,\n            **kwargs):\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\n    ... [other parts of the method]\n\n    \"\"\"\n    # ... [previous code remains the same]\n\n    if marker is None:\n        marker = 'o'\n\n    path = None\n    if marker is not None:\n        if isinstance(marker, mmarkers.MarkerStyle):\n            marker_obj = marker\n        else:\n            marker_obj = mmarkers.MarkerStyle(marker, fillstyle='none')  # Set fillstyle to 'none' for hollow markers\n\n        path = marker_obj.get_path().transformed(\n            marker_obj.get_transform())\n        if not marker_obj.is_filled():\n            edgecolors = 'face'\n            if linewidths is None:\n                linewidths = rcParams['lines.linewidth']\n            elif np.iterable(linewidths):\n                linewidths = [\n                    lw if lw is not None else rcParams['lines.linewidth']\n                    for lw in linewidths]\n\n    # ... [continue with the rest of the method as it is]\n\n    self.add_collection(collection)\n    self._request_autoscale_view()\n\n    return collection",
            "import_list": []
        }
    ]
}