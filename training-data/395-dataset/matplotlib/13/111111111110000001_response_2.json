{
    "matplotlib": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 326,
            "file_name": "lib/matplotlib/path.py",
            "replace_code": "def make_compound_path(cls, *args):\n    \"\"\"Make a compound path from a list of Path objects.\"\"\"\n    # Handle an empty list in args (i.e. no args).\n    if not args:\n        return Path(np.empty([0, 2], dtype=np.float32))\n\n    vertices_list = [x.vertices for x in args]\n    codes_list = [x.codes for x in args]\n\n    vertices = np.concatenate(vertices_list)\n    num_codes = np.array([len(x) if x is not None else 0 for x in codes_list])\n    num_vertices = np.array([len(x) for x in vertices_list])\n\n    codes = np.empty(sum(num_vertices) + len(args) - num_codes.sum(), dtype=cls.code_type)\n\n    indices = np.insert(np.cumsum(num_vertices) + np.arange(len(args) - 1), 0, 0)\n    i = 0\n    for path, v, c in zip(args, indices, num_vertices):\n        if path.codes is None:\n            codes[i] = cls.MOVETO\n            codes[i + 1:i + c] = cls.LINETO\n        else:\n            codes[i:i + len(path.codes)] = path.codes\n        i += c + 1  # update the starting index for codes of the next Path\n\n    return cls(vertices, codes)",
            "import_list": []
        }
    ]
}