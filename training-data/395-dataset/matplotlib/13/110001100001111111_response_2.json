{
    "matplotlib": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 326,
            "file_name": "lib/matplotlib/path.py",
            "replace_code": "def make_compound_path(cls, *args):\n    \"\"\"Make a compound path from a list of Path objects.\"\"\"\n    # Handle an empty list in args (i.e. no args).\n    if not args:\n        return Path(np.empty([0, 2], dtype=np.float32))\n\n    all_vertices = []\n    all_codes = []\n\n    for path in args:\n        if path.codes is None:\n            path_codes = np.full(len(path.vertices), cls.LINETO, dtype=cls.code_type)\n            path_codes[0] = cls.MOVETO\n        else:\n            path_codes = path.codes\n        all_codes.extend(path_codes)\n        all_vertices.extend(path.vertices)\n\n    vertices = np.array(all_vertices, dtype=np.float32)\n    codes = np.array(all_codes, dtype=cls.code_type)\n\n    return cls(vertices, codes)",
            "import_list": []
        }
    ]
}