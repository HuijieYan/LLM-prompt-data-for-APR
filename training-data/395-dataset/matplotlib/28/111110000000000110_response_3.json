{
    "matplotlib": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 3160,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def set_xlim(self, left=None, right=None, emit=True, auto=False, xmin=None, xmax=None):\n\n        \"\"\"\n\n        Set the x-axis view limits.\n\n\n\n        Parameters\n\n        ----------\n\n        left\n\n            The left xlim in data coordinates. Passing *None* leaves the\n\n            limit unchanged.\n\n\n\n            The left and right xlims may be passed as the tuple\n\n            (*left*, *right*) as the first positional argument (or as\n\n            the *left* keyword argument).\n\n        right\n\n            The right xlim in data coordinates. Passing *None* leaves the\n\n            limit unchanged.\n\n        emit\n\n            Whether to notify observers of limit change (default: True).\n\n        auto\n\n            Whether to turn on autoscaling of the x-axis. True turns on,\n\n            False turns off (default action), None leaves unchanged.\n\n        xmin, xmax\n\n            They are equivalent to left and right respectively,\n\n            and it is an error to pass both *xmin* and *left* or\n\n            *xmax* and *right*.\n\n        Returns\n\n        -------\n\n        left, right\n\n            The new x-axis limits in data coordinates.\n\n        \"\"\"\n\n\n\n        if right is None and left is not None and isinstance(left, tuple):\n\n            left, right = left[0], left[1]\n\n\n\n        if xmin is not None and left is not None:\n\n            raise TypeError('Cannot pass both `xmin` and `left`')\n\n\n\n        if xmax is not None and right is not None:\n\n            raise TypeError('Cannot pass both `xmax` and `right`')\n\n\n\n        if xmin:\n\n            left = xmin\n\n        if xmax:\n\n            right = xmax\n\n\n\n        self._process_unit_info(xdata=(left, right))\n\n\n\n        left = self._validate_converted_limits(left, self.convert_xunits)\n\n        right = self._validate_converted_limits(right, self.convert_xunits)\n\n\n\n        if (left is None or right is None) or self.get_xscale() == 'log':\n\n            left_set, right_set = self.get_xlim()\n\n            left = left if left is not None else left_set\n\n            right = right if right is not None else right_set\n\n\n\n            if self.get_xscale() == 'log' and (left < 0 or right < 0):\n\n                left, right = left_set, right_set\n\n            elif left == right:\n\n                left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n\n                left, right = self.xaxis.limit_range_for_scale(left, right)\n\n\n\n        self._viewLim.intervalx = (left, right)\n\n\n\n        if auto is not None:\n\n            self._autoscaleXon = bool(auto)\n\n\n\n        if emit:\n\n            self.callbacks.process('xlim_changed', self)\n\n            for other in self._shared_x_axes.get_siblings(self):\n\n                if other is not self:\n\n                    other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\n\n\n\n                    if other.figure != self.figure:\n\n                        other.figure.canvas.draw_idle()\n\n\n\n        self.stale = True\n\n        return left, right",
            "imports": []
        }
    ]
}