{
    "matplotlib": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 3160,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def set_xlim(self, left=None, right=None, emit=True, auto=False, xmin=None, xmax=None):\n        \"\"\"\n        Set the x-axis view limits.\n\n        .. ACCEPTS: (left: float, right: float), (*left, right*: tuple)\n\n        Parameters\n        ----------\n        left : float, optional\n            The left xlim in data coordinates. None leaves the limit unchanged.\n            The left xlim may be passed as the tuple (*left*, *right*).\n\n        right : float, optional\n            The right xlim in data coordinates. None leaves the limit unchanged.\n        \n        emit : bool, optional\n            Whether to notify observers of limit change (default: True)\n        \n        auto : bool, optional\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off, None leaves unchanged\n        \n        xmin, xmax : float, optional\n            They are equivalent to left and right respectively,\n            and it is an error to pass both *xmin* and *left* or\n            *xmax* and *right*.\n\n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n        \"\"\"\n\n        if right is None and type(left) in (tuple, list):\n            left, right = left\n\n        if xmin is not None and left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        if xmax is not None and right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n\n        self._process_unit_info(xdata=(left, right))\n        left = self._validate_converted_limits(left, self.convert_xunits)\n        right = self._validate_converted_limits(right, self.convert_xunits)\n\n        if left is None or right is None:\n            old_left, old_right = self.get_xlim()\n            if left is None:\n                left = old_left\n            if right is None:\n                right = old_right\n\n        if self.get_xscale() == 'log':\n            if left <= 0:\n                cbook._warn_external('...ignored right limit')\n                left = old_left\n            if right <= 0:\n                cbook._warn_external('...right...')\n                right = old_right\n\n        if left == right:\n            if left != 0:\n                cbook._warn_external(f\"Some message.\")\n            left -= 0.05\n            right += 0.05\n        left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n        left, right = self.xaxis.limit_range_for_scale(left, right)\n\n        self._viewLim.intervalx = (left, right)\n        if auto is not False:\n            self._autoscaleXon = bool(auto)\n\n        if emit:\n            self.callbacks.process(\"xlim_changed\", self)\n            for other in self._shared_x_axes.get_siblings(self):\n                if other is not self:\n                    other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n        self.stale = True\n        return left, right",
            "import_list": []
        }
    ]
}