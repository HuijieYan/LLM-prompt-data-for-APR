{
    "matplotlib": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 3160,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def set_xlim(self, left=None, right=None, emit=True, auto=False,\n             *, xmin=None, xmax=None):\n    \"\"\"\n    Set the x-axis view limits.\n\n    .. ACCEPTS: (left: float, right: float)\n\n    Parameters\n    ----------\n    left : scalar, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The left and right xlims may be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n\n    right : scalar, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, optional\n        Whether to notify observers of limit change (default: True).\n\n    auto : bool or None, optional\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off (default action), None leaves unchanged.\n\n    xmin, xmax : scalar, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The *left* value may be greater than the *right* value, in which\n    case the x-axis values will decrease from left to right.\n\n    Examples\n    --------\n    >>> set_xlim(left, right)\n    >>> set_xlim((left, right))\n    >>> left, right = set_xlim(left, right)\n\n    One limit may be left unchanged.\n\n    >>> set_xlim(right=right_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the x-axis. For example, suppose *x* represents the number of\n    years before present. The x-axis limits might be set like the\n    following so 5000 years ago is on the left of the plot and the\n    present is on the right.\n\n    >>> set_xlim(5000, 0)\n\n    \"\"\"\n    if right is None and not np.iterable(left):\n        left, right = self.get_xlim()\n\n    self.set_xlim(left=left, right=right, emit=emit, auto=False)\n\n    left, right = self._validate_converted_limits(left, self.convert_xunits)\n    \n    if left == right:\n        cbook._warn_external(\n            f\"Attempting to set identical left == right == {left} results \"\n            f\"in singular transformations; automatically expanding.\")\n\n    if self.get_xscale() == 'log':\n        if left <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive left xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            left = self.get_xlim()[0]\n        if right <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive right xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            right = self.get_xlim()[1]\n\n    left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n    left, right = self.xaxis.limit_range_for_scale(left, right)\n\n    self._viewLim.intervalx = (left, right)\n    self.callbacks.process('xlim_changed', self)\n    self.stale = True\n    return left, right",
            "import_list": []
        }
    ]
}