{
    "matplotlib": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 3160,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def set_xlim(self, left=None, right=None, emit=True, auto=False, **kwargs):\n        \"\"\"\n        Set the x-axis view limits.\n    \n        .. ACCEPTS: (left: float, right: float)\n    \n        Parameters\n        ----------\n        left : scalar, optional\n            The left xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n    \n        right : scalar, optional\n            The right xlim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n    \n        emit : bool, optional\n            Whether to notify observers of limit change (default: True).\n    \n        auto : bool or None, optional\n            Whether to turn on autoscaling of the x-axis. True turns on,\n            False turns off (default action), None leaves unchanged.\n    \n        **kwargs\n            Additional keyword arguments.\n    \n        Returns\n        -------\n        left, right : (float, float)\n            The new x-axis limits in data coordinates.\n    \n        See Also\n        --------\n        get_xlim\n        set_xbound, get_xbound\n        invert_xaxis, xaxis_inverted\n    \n        Notes\n        -----\n        The *left* value may be greater than the *right* value, in which\n        case the x-axis values will decrease from left to right.\n    \n        Examples\n        --------\n        >>> set_xlim(left, right)\n        >>> set_xlim((left, right))\n        >>> left, right = set_xlim(left, right)\n    \n        One limit may be left unchanged.\n    \n        >>> set_xlim(right=right_lim)\n    \n        Limits may be passed in reverse order to flip the direction of\n        the x-axis. For example, suppose *x* represents the number of\n        years before present. The x-axis limits might be set like the\n        following so 5000 years ago is on the left of the plot and the\n        present is on the right.\n    \n        >>> set_xlim(5000, 0)\n    \n        \"\"\"\n        if right is None and np.iterable(left):\n            left, right = left\n        left, right = self.xaxis.limit_range_for_scale(left, right)\n        left, right = self.xaxis.get_major_locator().nonsingular(left, right)",
            "imports": []
        }
    ]
}