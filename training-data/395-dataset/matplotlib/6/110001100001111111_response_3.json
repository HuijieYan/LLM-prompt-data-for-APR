{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n    \"\"\"\n    Helper function to process color related arguments of `.Axes.scatter`.\n    \"\"\"\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n    kwcolor = kwargs.pop('color', None)\n\n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color' kwarg but not both; they differ but their functionalities overlap.\")\n\n    # Check for a single RGB/RGBA color provided as a 2D array with a single row\n    if kwcolor is not None and c is None and len(kwcolor) == 1:\n        kwcolor = kwcolor[0]  # Extract the single RGB/RGBA color\n\n        if len(kwcolor) == 3:\n            kwcolor = np.append(kwcolor, 1)  # Append alpha value 1 for RGB color\n\n        if edgecolors is None:\n            edgecolors = kwcolor\n        if facecolors is None:\n            facecolors = kwcolor\n\n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        edgecolors = rcParams['scatter.edgecolors']",
            "import_list": []
        }
    ]
}