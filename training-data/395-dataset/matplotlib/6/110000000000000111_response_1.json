{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.get('edgecolor', edgecolors)\n\n    kwcolor = kwargs.pop('color', None)\n\n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color' kwarg but not both; they differ but their functionalities overlap.\")\n\n    if kwcolor is not None:\n        mcolors.to_rgba_array(kwcolor)\n        if edgecolors is None:\n            edgecolors = kwcolor\n        if facecolors is None:\n            facecolors = kwcolor\n\n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        edgecolors = rcParams['scatter.edgecolors']\n\n    c_was_none = c is None\n    if c is None:\n        c = facecolors if facecolors is not None else \"b\" if rcParams['_internal.classic_mode'] else get_next_color_func()\n\n    def invalid_shape_exception(csize, xsize):\n        return ValueError(\n            f\"'c' argument has {csize} elements, which is inconsistent with 'x' and 'y' with size {xsize}.\")\n\n    colors = None\n    if not c_was_none and kwcolor is None and not isinstance(c, str):\n        try:\n            c = np.asanyarray(c, dtype=float)\n            if c.size == xsize:\n                colors = c.ravel()\n            else:  \n                if c.shape in ((3,), (4,)):\n                    _log.warning(\n                        \"'c' argument looks like a single numeric RGB or \"\n                        \"RGBA sequence, which should be avoided as value-\"\n                        \"mapping will have precedence in case its length \"\n                        \"matches with 'x' & 'y'.  Please use a 2-D array \"\n                        \"with a single row if you really want to specify \"\n                        \"the same RGB or RGBA value for all points.\")\n                    raise invalid_shape_exception(c.size, xsize)\n        except ValueError as err:\n            raise ValueError(f\"'c' argument must be a color, a sequence of colors, or a sequence of numbers, not {c}\") from err\n\n    return c, colors, edgecolors",
            "imports": []
        }
    ]
}