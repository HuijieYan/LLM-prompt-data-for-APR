{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n        # ... omitted code ...\n    \n        if kwcolor is not None:\n            kwcolor_arr = np.atleast_2d(np.asarray(kwcolor))\n            if c is None:\n                c = kwcolor_arr\n            if edgecolors is None:\n                edgecolors = kwcolor_arr\n            if facecolors is None:\n                facecolors = kwcolor_arr\n    \n        if edgecolors is None and not rcParams['_internal.classic_mode']:\n            edgecolors = rcParams['scatter.edgecolors']\n    \n        c_was_none = c is None\n        c_asarray = np.atleast_2d(np.asarray(c))\n        if c_was_none:\n            # Use 'b' if in classic mode else the result of ``get_next_color_func()``\n            c = ('b' if rcParams['_internal.classic_mode'] else get_next_color_func())\n    \n        c_is_string_or_strings = (\n            isinstance(c, str)\n            or (np.iterable(c) and len(c) > 0 and isinstance(cbook.safe_first_element(c), str)))\n    \n        if c_asarray.size != xsize:\n            raise ValueError(f\"'c' argument has {c_asarray.size} elements, which is inconsistent with 'x' and 'y' with size {xsize}.\")\n    \n        colors = mcolors.to_rgba_array(c)\n    \n        return c, colors, edgecolors",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}