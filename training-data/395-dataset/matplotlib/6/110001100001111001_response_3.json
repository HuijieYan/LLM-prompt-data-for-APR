{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n\n    kwcolor = kwargs.pop('color', None)\n\n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color' kwarg but not both; they differ but their functionalities overlap.\")\n\n    if kwcolor is not None:\n        # Check if the colors are consistent with x and y sizes\n        if np.iterable(c) and len(c) > 0 and isinstance(cbook.safe_first_element(c), str):\n            if len(c) != xsize:\n                raise ValueError(\"'c' argument has elements inconsistent with 'x' and 'y' with size.\")\n        else:\n            c = np.asanyarray(c, dtype=float)\n\n        if edgecolors is None and not rcParams['_internal.classic_mode']:\n            edgecolors = rcParams['scatter.edgecolors']\n\n    colors = None\n    if not np.iterable(c) or not len(c) > 0 or not isinstance(cbook.safe_first_element(c), str):\n        try:\n            colors = mcolors.to_rgba_array(c)\n            if len(colors) not in (0, 1, xsize):\n                raise ValueError(\"Invalid size for colors\")\n        except (TypeError, ValueError) as err:\n            raise ValueError(f\"'c' argument must be a color, a sequence of colors, or a sequence of numbers, not {c}\") from err\n    else:\n        # If 'c' is a sequence of colors, check if its length matches with x and y\n        if len(c) != xsize:\n            raise ValueError(\"'c' argument has elements inconsistent with 'x' and 'y' with size.\")\n\n    return c, colors, edgecolors",
            "import_list": []
        }
    ]
}