{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n    \"\"\"\n    Helper function to process color related arguments of `.Axes.scatter`.\n    \"\"\"\n\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n\n    kwcolor = kwargs.pop('color', None)\n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color'\"\n                         \" kwarg but not both; they differ but\"\n                         \" their functionalities overlap.\")\n\n    if kwcolor is not None:\n        kwcolors = mcolors.to_rgba_array(kwcolor)\n        if edgecolors is None:\n            edgecolors = kwcolors\n        if facecolors is None:\n            facecolors = kwcolors\n\n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        edgecolors = rcParams['scatter.edgecolors']\n\n    if c is None:\n        c = (facecolors if facecolors is not None\n             else \"b\" if rcParams['_internal.classic_mode']\n             else get_next_color_func())\n\n    if c.dtype.kind in 'su':\n        c_changes = False\n        try:\n            # First, does 'c' look suitable for value-mapping?\n            c = c.astype(float)\n        except (ValueError, TypeError):\n            # Then, it must be an array of color specs\n            try:\n                c = np.empty(len(c), dtype=np.ndarray)\n                c_changes = True\n                for i, color in enumerate(c):\n                    if not (isinstance(color, str) or mcolors.is_color_like(color)):\n                        c[i] = mcolors.to_rgba_array(color)\n            except (ValueError, TypeError):\n                raise ValueError(\"'c' argument has unexpected type\")\n        if not c_changes:\n            c = c.ravel()\n        c_is_mapped = False\n    else:\n        c_is_mapped = True\n\n    if isinstance(c, np.ma.MaskedArray):\n        c = c.astype(float).filled()\n\n    if c.ndim == 1:\n        # How can an array with shape (N,) be a valid object to convert to a\n        # NumPy array with shape (N, 1) without an extra dimension of size 1\n        # along the second axis\n        c = c.reshape((-1, 1))\n\n    if c.size in (0, 1):\n        # A scalar is allowable here due to a historical bug indicated\n        # it.\n        c = [[0, 0, 0, 0]]\n    if c.size == 1:\n        c = np.tile(c, (xsize, 1))\n\n    c = np.atleast_2d(c)\n    if c.shape[1] in [3, 4]:\n        if c.shape[1] == 3:\n            c = np.hstack([c, np.ones(c.shape[0], scale)])\n        facecolors = c\n        colors = c[:]\n        edgecolors = 'face'\n    return c, colors, edgecolors",
            "imports": [
                "import numpy as np",
                "from matplotlib import rcParams, cbook",
                "import matplotlib.colors as mcolors",
                "from numpy.lib.stride_tricks import DummyArray"
            ]
        }
    ]
}