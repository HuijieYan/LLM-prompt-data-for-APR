{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n    \"\"\"\n    Helper function to process color related arguments of `.Axes.scatter`.\n    (Previous function comments are retained here)\n\n    Argument precedence for facecolors:\n\n    - c (if not None)\n    - kwargs['facecolors']\n    - kwargs['facecolor']\n    - kwargs['color'] (==kwcolor)\n    - 'b' if in classic mode else the result of ``get_next_color_func()``\n\n    Argument precedence for edgecolors:\n\n    - edgecolors (is an explicit kw argument in scatter())\n    - kwargs['edgecolor']\n    - kwargs['color'] (==kwcolor)\n    - 'face' if not in classic mode else None\n\n    Parameters\n    ----------\n    c : color or sequence or sequence of color or None\n        See argument description of `.Axes.scatter`.\n    edgecolors : color or sequence of color or {'face', 'none'} or None\n        See argument description of `.Axes.scatter`.\n    kwargs : dict\n        Additional kwargs. If these keys exist, we pop and process them:\n        'facecolors', 'facecolor', 'edgecolor', 'color'\n        Note: The dict is modified by this function.\n    xsize : int\n        The size of the x and y arrays passed to `.Axes.scatter`.\n    get_next_color_func : callable\n        A callable that returns a color. This color is used as facecolor\n        if no other color is provided.\n\n        Note, that this is a function rather than a fixed color value to\n        support conditional evaluation of the next color.  As of the\n        current implementation obtaining the next color from the\n        property cycle advances the cycle. This must only happen if we\n        actually use the color, which will only be decided within this\n        method.\n\n    Returns\n    -------\n    c\n        The input *c* if it was not *None*, else a color derived from the\n        other inputs or defaults.\n    colors : array(N, 4) or None\n        The facecolors as RGBA values, or *None* if a colormap is used.\n    edgecolors\n        The edgecolor.\n\n    \"\"\"\n    if len(c.shape) == 2 and c.shape[0] == 1:  # Check for single color input\n        c = c[0]  # Extract the single color from the 2D array to use for all points\n\n    colors = None  # Initialize colors\n\n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        edgecolors = rcParams['scatter.edgecolors']\n\n    return c, colors, edgecolors",
            "imports": []
        }
    ]
}