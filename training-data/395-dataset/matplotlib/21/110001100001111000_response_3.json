{
    "matplotlib": [
        {
            "bugID": 21,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 3752,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def bxp(self, bxpstats, positions=None, widths=None, vert=True,\n        patch_artist=False, shownotches=False, showmeans=False,\n        showcaps=True, showbox=True, showfliers=True,\n        boxprops=None, whiskerprops=None, flierprops=None,\n        medianprops=None, capprops=None, meanprops=None,\n        meanline=False, manage_ticks=True, zorder=None):\n    \"\"\"\n    Drawing function for box and whisker plots.\n\n    Make a box and whisker plot for each column of *x* or each\n    vector in sequence *x*.  The box extends from the lower to\n    upper quartile values of the data, with a line at the median.\n    The whiskers extend from the box to show the range of the\n    data.  Flier points are those past the end of the whiskers.\n\n    Parameters\n    ----------\n    bxpstats : list of dicts\n      A list of dictionaries containing stats for each boxplot.\n      Required keys are:\n\n      - ``med``: The median (scalar float).\n\n      - ``q1``: The first quartile (25th percentile) (scalar\n        float).\n\n      - ``q3``: The third quartile (75th percentile) (scalar\n        float).\n\n      - ``whislo``: Lower bound of the lower whisker (scalar\n        float).\n\n      - ``whishi``: Upper bound of the upper whisker (scalar\n        float).\n\n      Optional keys are:\n\n      - ``mean``: The mean (scalar float). Needed if\n        ``showmeans=True``.\n\n      - ``fliers``: Data beyond the whiskers (sequence of floats).\n        Needed if ``showfliers=True``.\n\n      - ``cilo`` & ``cihi``: Lower and upper confidence intervals\n        about the median. Needed if ``shownotches=True``.\n\n      - ``label``: Name of the dataset (string). If available,\n        this will be used a tick label for the boxplot\n\n    positions : array-like, default: [1, 2, ..., n]\n      Sets the positions of the boxes. The ticks and limits\n      are automatically set to match the positions.\n\n    widths : array-like, default: None\n      Either a scalar or a vector and sets the width of each\n      box. The default is ``0.15*(distance between extreme\n      positions)``, clipped to no less than 0.15 and no more than\n      0.5.\n\n    vert : bool, default: True\n      If `True` (default), makes the boxes vertical.  If `False`,\n      makes horizontal boxes.\n\n    patch_artist : bool, default: False\n      If `False` produces boxes with the `.Line2D` artist.\n      If `True` produces boxes with the `~matplotlib.patches.Patch` artist.\n\n    shownotches : bool, default: False\n      If `False` (default), produces a rectangular box plot.\n      If `True`, will produce a notched box plot\n\n    showmeans : bool, default: False\n      If `True`, will toggle on the rendering of the means\n\n    showcaps  : bool, default: True\n      If `True`, will toggle on the rendering of the caps\n\n    showbox  : bool, default: True\n      If `True`, will toggle on the rendering of the box\n\n    showfliers : bool, default: True\n      If `True`, will toggle on the rendering of the fliers\n\n    boxprops : dict, default: None\n      If provided, will set the plotting style of the boxes\n\n    whiskerprops : dict, default: None\n      If provided, will set the plotting style of the whiskers\n\n    capprops : dict, default: None\n      If provided, will set the plotting style of the caps\n\n    flierprops : dict, default: None\n      If provided will set the plotting style of the fliers\n\n    medianprops : dict, default: None\n      If provided, will set the plotting style of the medians\n\n    meanprops : dict, default: None\n      If provided, will set the plotting style of the means\n\n    meanline : bool, default: False\n      If `True` (and *showmeans* is `True`), will try to render the mean\n      as a line spanning the full width of the box according to\n      *meanprops*. Not recommended if *shownotches* is also True.\n      Otherwise, means will be shown as points.\n\n    manage_ticks : bool, default: True\n      If True, the tick locations and labels will be adjusted to match the\n      boxplot positions.\n\n    zorder : scalar, default: None\n      The zorder of the resulting boxplot.\n    \"\"\"\n    whiskers = []\n    caps = []\n    boxes = []\n    medians = []\n    means = []\n    fliers = []\n    datalabels = []\n\n    if zorder is None:\n        zorder = 2\n\n    zdelta = 0\n\n    def line_props_with_rcdefaults(subkey, explicit, zdelta=0):\n        d = {k.split('.')[-1]: v for k, v in rcParams.items()\n             if k.startswith(f'boxplot.{subkey}')}\n        d['zorder'] = zorder + zdelta\n        if explicit is not None:\n            d.update(\n                cbook.normalize_kwargs(explicit, mlines.Line2D._alias_map))\n        return d\n\n    if patch_artist:\n        final_boxprops = dict(\n            linestyle=rcParams['boxplot.boxprops.linestyle'],\n            linewidth=rcParams['boxplot.boxprops.linewidth'],\n            edgecolor=rcParams['boxplot.boxprops.color'],\n            facecolor=('white' if rcParams['_internal.classic_mode'] else\n                       rcParams['patch.facecolor']),\n            zorder=zorder,\n        )\n        if boxprops is not None:\n            final_boxprops.update(\n                cbook.normalize_kwargs(\n                    boxprops, mpatches.PathPatch._alias_map))\n    else:\n        final_boxprops = line_props_with_rcdefaults('boxprops', boxprops)\n    final_whiskerprops = line_props_with_rcdefaults(\n        'whiskerprops', whiskerprops)\n    final_capprops = line_props_with_rcdefaults(\n        'capprops', capprops)\n    final_flierprops = line_props_with_rcdefaults(\n        'flierprops', flierprops)\n    final_medianprops = line_props_with_rcdefaults(\n        'medianprops', medianprops, zdelta)\n    final_meanprops = line_props_with_rcdefaults(\n        'meanprops', meanprops, zdelta)\n    if meanprops is None or 'linestyle' not in meanprops:\n        final_meanprops['linestyle'] = ''",
            "import_list": []
        }
    ]
}