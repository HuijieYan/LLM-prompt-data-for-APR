{
    "matplotlib": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 4328,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n                vmin=None, vmax=None, alpha=None, linewidths=None,\n                verts=None, edgecolors=None, *, plotnonfinite=False,\n                **kwargs):\n\n        # ... omitted code ...\n\n\n    if isinstance(linewidths, (int, float)):\n        linewidths = [linewidths] * x.size\n    \n    if linewidths is not None:\n        if not np.iterable(linewidths):\n            raise ValueError(\"linewidths must be an iterable\")\n        linewidths = np.asarray(linewidths)\n        if linewidths.ndim not in (1, 2):\n            raise ValueError(\"linewidths must have their dimensions be n or n x m, \"\n                             \"where n and m can be the number of points or lines for ,\"\n                             \"individual use case\")\n        # if it is single value, broadcasts, otherwise need to match dimension\n        if linewidths.ndim == 1 and linewidths.size in (1, x.size * y.size):\n            linewidths = np.broadcast_to(linewidths, x.size * y.size).reshape(x.size, y.size)\n        elif linewidths.ndim == 2 and linewidths.shape != y.size * x.size:\n            raise ValueError(\"linewidths means an array of shape (n, n) to set dimensions\"\n                             \"or an array with a shape of (n,) to set color\")\n    else:\n        linewidths = [rcParams['lines.linewidth']] * x.size * y.size"
        }
    ]
}