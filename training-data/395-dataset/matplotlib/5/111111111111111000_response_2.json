{
    "matplotlib": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 4328,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n                vmin=None, vmax=None, alpha=None, linewidths=None,\n                verts=None, edgecolors=None, *, plotnonfinite=False,\n                **kwargs):\n        \"\"\"\n        A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\n        Parameters\n        ----------\n        x, y : float or array-like, shape (n, )\n            The data positions.\n\n        s : float or array-like, shape (n, ), optional\n            The marker size in points**2.\n            Default is ``rcParams['lines.markersize'] ** 2``.\n\n        c : array-like or list of colors or color, optional\n            The marker colors. Possible values:\n\n            - A scalar or sequence of n numbers to be mapped to colors using\n            *cmap* and *norm*.\n            - A 2-D array in which the rows are RGB or RGBA.\n            - A sequence of colors of length n.\n            - A single color format string.\n\n            Note that *c* should not be a single numeric RGB or RGBA sequence\n            because that is indistinguishable from an array of values to be\n            colormapped. If you want to specify the same RGB or RGBA value for\n            all points, use a 2-D array with a single row.  Otherwise, value-\n            matching will have precedence in case of a size matching with *x*\n            and *y*.\n\n            If you wish to specify a single color for all points\n            prefer the *color* keyword argument.\n\n            Defaults to `None`. In that case the marker color is determined\n            by the value of *color*, *facecolor* or *facecolors*. In case\n            those are not specified or `None`, the marker color is determined\n            by the next color of the ``Axes``' current \"shape and fill\" color\n            cycle. This cycle defaults to :rc:`axes.prop_cycle`.\n\n        marker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n            The marker style. *marker* can be either an instance of the class\n            or the text shorthand for a particular marker.\n            See :mod:`matplotlib.markers` for more information about marker\n            styles.\n\n        ... \n        \"\"\"          \n        # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n        self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n\n        # np.ma.ravel yields an ndarray, not a masked array,\n        # unless its argument is a masked array.\n        x = np.ma.ravel(x)\n        y = np.ma.ravel(y)\n        if x.size != y.size:\n            raise ValueError(\"x and y must be the same size\")\n\n        if s is None:\n            s = (20 if rcParams['_internal.classic_mode'] else\n                rcParams['lines.markersize'] ** 2.0)\n        s = np.ma.ravel(s)\n        if len(s) not in (1, x.size):\n            raise ValueError(\"s must be a scalar, or the same size as x and y\")\n        \n        edgecolors = 'face' if edgecolors is None else edgecolors\n\n        # calling the helper to process color args\n        c, colors, edgecolors = self._parse_scatter_color_args(\n            c, edgecolors, x.size)\n        edgecolors = 'face' if edgecolors is None else edgecolors\n\n        # calling the helper to process color args\n        c, colors, edgecolors = self._parse_scatter_color_args(\n            c, edgecolors, x.size, get_next_color_func=self.get_next_color)",
            "imports": []
        }
    ]
}