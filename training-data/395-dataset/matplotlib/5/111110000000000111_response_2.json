{
    "matplotlib": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 4328,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n                vmin=None, vmax=None, alpha=None, linewidths=None,\n                verts=None, edgecolors=None, *, plotnonfinite=False,\n                **kwargs):\n\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n    \n    Parameters\n    ----------\n    x, y : float or array-like, shape (n, )\n        The data positions.\n    \n    s : float or array-like, shape (n, ), optional\n        The marker size in points**2.\n        Default is ``rcParams['lines.markersize'] ** 2``.\n    \n    c : array-like or list of colors or color, optional\n        The marker colors. Possible values:\n    \n        - A scalar or sequence of n numbers to be mapped to colors using\n          *cmap* and *norm*.\n        - A 2-D array in which the rows are RGB or RGBA.\n        - A sequence of colors of length n.\n        - A single color format string.\n    \n        ... (rest of the method remains the same)\n    \n    \"\"\"\n    ...\n    \n    # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n    \n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    \n    # np.ma.ravel yields an ndarray, not a masked array,\n    # unless its argument is a masked array.\n    x = np.ma.ravel(x)\n    y = np.ma.ravel(y)\n    if x.size != y.size:\n        raise ValueError(\"x and y must be the same size\")\n    \n    if s is None:\n        s = (20 if rcParams['_internal.classic_mode'] else\n             rcParams['lines.markersize'] ** 2.0)\n    s = np.ma.ravel(s)\n    if len(s) not in (1, x.size):\n        raise ValueError(\"s must be a scalar, or the same size as x and y\")\n    \n    c, colors, edgecolors = \\\n        self._parse_scatter_color_args(\n            c, edgecolors, kwargs, x.size,\n            get_next_color_func=self.get_next_color)\n    \n    # Update linewidths to handle the expected behavior\n    if linewidths is not None:\n        linewidths = np.ma.ravel(linewidths)\n    \n    # Rest of the method remains unchanged\n    ..."
        }
    ]
}