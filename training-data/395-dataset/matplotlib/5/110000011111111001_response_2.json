{
    "matplotlib": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 4328,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False, **kwargs):\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n    \n    ... (other documentation remains the same) ...\n\n    \"\"\"\n\n    # Previous code ...\n\n    # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n    \n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n\n    # np.ma.ravel yields an ndarray, not a masked array,\n    # unless its argument is a masked array.\n    x = np.ma.ravel(x)\n    y = np.ma.ravel(y)\n    if x.size != y.size:\n        raise ValueError(\"x and y must be the same size\")\n\n    if s is None:\n        s = (20 if rcParams['_internal.classic_mode'] else\n             rcParams['lines.markersize'] ** 2.0)\n    s = np.ma.ravel(s)\n    if len(s) not in (1, x.size):\n        raise ValueError(\"s must be a scalar, or the same size as x and y\")\n\n    c, colors, edgecolors = \\\n        self._parse_scatter_color_args(\n            c, edgecolors, kwargs, x.size,\n            get_next_color_func=self._get_patches_for_fill.get_next_color)\n\n    if plotnonfinite and colors is None:\n        c = np.ma.masked_invalid(c)\n        x, y, s, edgecolors, linewidths = \\\n            cbook._combine_masks(x, y, s, edgecolors, linewidths)\n    else:\n        x, y, s, c, colors, edgecolors, linewidths = \\\n            cbook._combine_masks(\n                x, y, s, c, colors, edgecolors, linewidths)\n\n    scales = s   # Renamed for readability below.\n\n    # load default marker from rcParams\n    if marker is None:\n        marker = rcParams['scatter.marker']\n\n    if isinstance(marker, mmarkers.MarkerStyle):\n        marker_obj = marker\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n\n    path = marker_obj.get_path().transformed(\n        marker_obj.get_transform())\n    if not marker_obj.is_filled():\n        edgecolors = 'face'\n        linewidths = rcParams['lines.linewidth']\n\n    offsets = np.ma.column_stack([x, y])\n\n    collection = mcoll.PathCollection(\n            (path,), scales,\n            facecolors=colors,\n            edgecolors=edgecolors,\n            linewidths=linewidths,  # Updated to use the correct linewidths variable\n            offsets=offsets,\n            transOffset=kwargs.pop('transform', self.transData),\n            alpha=alpha\n            )\n    \n    # Remaining code ...\n    \n    return collection",
            "imports": []
        }
    ]
}