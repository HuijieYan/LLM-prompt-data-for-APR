{
    "matplotlib": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 336,
            "file_name": "lib/matplotlib/colors.py",
            "replace_code": "def makeMappingArray(N, data, gamma=1.0):\n\n    if callable(data):\n        xind = np.linspace(0, 1, N) ** gamma\n        lut = np.clip(np.array(data(xind), dtype=float), 0, 1)\n        return lut\n\n    try:\n        adata = np.array(data)\n    except Exception:\n        raise TypeError(\"data must be convertible to an array\")\n    shape = adata.shape\n    if len(shape) != 2 or shape[1] != 3:\n        raise ValueError(\"data must be nx3 format\")\n    \n    x = adata[:, 0]\n    y0 = adata[:, 1]\n    y1 = adata[:, 2]\n\n    if x[0] != 0. or x[-1] != 1.0:\n        raise ValueError(\n            \"data mapping points must start with x=0 and end with x=1\")\n    if (np.diff(x) < 0).any():\n        raise ValueError(\"data mapping points must have x in increasing order\")\n    \n    xind = np.linspace(0, 1, N) ** gamma\n    ind = np.searchsorted(x, xind, side='right')[1:-1]\n    distance = (xind[1:-1] - x[ind - 1]) / (x[ind] - x[ind - 1])\n    \n    result = np.empty(N)\n    for i in range(N):\n        if i < ind[0]:\n            result[i] = y1[0]\n        elif i < ind[-1]:\n            j = np.searchsorted(ind, i)\n            result[i] = (y0[j] - y1[j-1]) * (i - ind[j-1]) / (ind[j] - ind[j-1]) + y1[j-1]\n        else:\n            result[i] = y0[-1]\n\n    return np.clip(result, 0.0, 1.0)",
            "import_list": [
                "import numpy as np"
            ]
        }
    ]
}