{
    "1": "    def _make_getset_interval(method_name, lim_name, attr_name):\n        \"\"\"\n        Helper to generate ``get_{data,view}_interval`` and\n        ``set_{data,view}_interval`` implementations.\n        \"\"\"\n    \n        def getter(self):\n            # docstring inherited.\n            return getattr(getattr(self.axes, lim_name), attr_name)\n    \n        def setter(self, vmin, vmax, ignore=False):\n            # docstring inherited.\n            if ignore:\n                setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))\n            else:\n                oldmin, oldmax = getter(self)\n                if oldmin < oldmax:\n                    setter(self, min(vmin, vmax, oldmin), max(vmin, vmax, oldmax),\n                           ignore=True)\n                else:\n                    setter(self, max(vmin, vmax, oldmax), min(vmin, vmax, oldmin),\n                           ignore=True)\n            self.stale = True\n    \n        getter.__name__ = f\"get_{method_name}_interval\"\n        setter.__name__ = f\"set_{method_name}_interval\"\n    \n        return getter, setter\n    \n",
    "2": "",
    "3": "# file name: /Volumes/SSD2T/bgp_envs/repos/matplotlib_24/lib/matplotlib/axis.py\n\n# relative function's signature in this file\ndef getter(self):\n    # ... omitted code ...\n    pass\n\n# relative function's signature in this file\ndef setter(self, vmin, vmax, ignore=False):\n    # ... omitted code ...\n    pass\n\n",
    "4": "# A test function for the buggy function\n```python\n# file name: /Volumes/SSD2T/bgp_envs/repos/matplotlib_24/lib/matplotlib/tests/test_axes.py\n\ndef test_set_ticks_inverted():\n    fig, ax = plt.subplots()\n    ax.invert_xaxis()\n    ax.set_xticks([.3, .7])\n    assert ax.get_xlim() == (1, 0)\n```\n\n## Error message from test function\n```text\ndef test_set_ticks_inverted():\n        fig, ax = plt.subplots()\n        ax.invert_xaxis()\n        ax.set_xticks([.3, .7])\n>       assert ax.get_xlim() == (1, 0)\nE       assert (0.7, 0.3) == (1, 0)\nE         At index 0 diff: 0.7 != 1\nE         Full diff:\nE         - (1, 0)\nE         + (0.7, 0.3)\n\nlib/matplotlib/tests/test_axes.py:6420: AssertionError\n\n```\n",
    "5": "# Variable runtime value and type inside buggy function\n## Buggy case 1\n### input parameter runtime value and type for buggy function\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### variable runtime value and type before buggy function return\ngetter, value: `<function _make_getset_interval.<locals>.getter at 0x10da55a60>`, type: `function`\n\nsetter, value: `<function _make_getset_interval.<locals>.setter at 0x10da55af0>`, type: `function`\n\ngetter.__name__, value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, value: `'set_view_interval'`, type: `str`\n\n## Buggy case 2\n### input parameter runtime value and type for buggy function\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### variable runtime value and type before buggy function return\ngetter, value: `<function _make_getset_interval.<locals>.getter at 0x10da62040>`, type: `function`\n\nsetter, value: `<function _make_getset_interval.<locals>.setter at 0x10da620d0>`, type: `function`\n\ngetter.__name__, value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, value: `'set_data_interval'`, type: `str`\n\n## Buggy case 3\n### input parameter runtime value and type for buggy function\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### variable runtime value and type before buggy function return\ngetter, value: `<function _make_getset_interval.<locals>.getter at 0x10da54040>`, type: `function`\n\nsetter, value: `<function _make_getset_interval.<locals>.setter at 0x10da540d0>`, type: `function`\n\ngetter.__name__, value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, value: `'set_view_interval'`, type: `str`\n\n## Buggy case 4\n### input parameter runtime value and type for buggy function\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### variable runtime value and type before buggy function return\ngetter, value: `<function _make_getset_interval.<locals>.getter at 0x10da62160>`, type: `function`\n\nsetter, value: `<function _make_getset_interval.<locals>.setter at 0x10da55e50>`, type: `function`\n\ngetter.__name__, value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, value: `'set_data_interval'`, type: `str`\n\n\n\n# Expected variable value and type in tests\n## Expected case 1\n### Input parameter value and type\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Expected variable value and type before function return\ngetter, expected value: `<function _make_getset_interval.<locals>.getter at 0x1100f1280>`, type: `function`\n\nsetter, expected value: `<function _make_getset_interval.<locals>.setter at 0x1100f1310>`, type: `function`\n\ngetter.__name__, expected value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_view_interval'`, type: `str`\n\n## Expected case 2\n### Input parameter value and type\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervalx'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Expected variable value and type before function return\ngetter, expected value: `<function _make_getset_interval.<locals>.getter at 0x1100f1820>`, type: `function`\n\nsetter, expected value: `<function _make_getset_interval.<locals>.setter at 0x1100f18b0>`, type: `function`\n\ngetter.__name__, expected value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_data_interval'`, type: `str`\n\n## Expected case 3\n### Input parameter value and type\nlim_name, value: `'viewLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'view'`, type: `str`\n\n### Expected variable value and type before function return\ngetter, expected value: `<function _make_getset_interval.<locals>.getter at 0x1100dc820>`, type: `function`\n\nsetter, expected value: `<function _make_getset_interval.<locals>.setter at 0x1100dc8b0>`, type: `function`\n\ngetter.__name__, expected value: `'get_view_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_view_interval'`, type: `str`\n\n## Expected case 4\n### Input parameter value and type\nlim_name, value: `'dataLim'`, type: `str`\n\nattr_name, value: `'intervaly'`, type: `str`\n\nmethod_name, value: `'data'`, type: `str`\n\n### Expected variable value and type before function return\ngetter, expected value: `<function _make_getset_interval.<locals>.getter at 0x1100f15e0>`, type: `function`\n\nsetter, expected value: `<function _make_getset_interval.<locals>.setter at 0x1100f1430>`, type: `function`\n\ngetter.__name__, expected value: `'get_data_interval'`, type: `str`\n\nsetter.__name__, expected value: `'set_data_interval'`, type: `str`\n\n\n\n",
    "6": "# A GitHub issue title for this bug\n```text\nHeatmaps are being truncated when using with seaborn\n```\n\n## The associated detailed issue description\n```text\nBug report\nBug summary\n\nThe very top and bottom of the heatmaps are getting truncated to 1/2 height in version 3.1.1. This does not happen for version 3.0.3.\n\nThis is the code from a Jupyter Notebook\n\nimport matplotlib\nimport pandas as pd\nimport numpy as np\nimport seaborn as sb\n%pylab inline\n\nprint(matplotlib.__version__)\nprint(sb.__version__)\n\ngrid = pd.DataFrame(np.arange(9).reshape((3,3))/10)\nfig, ax = subplots(1, 1, figsize=(5, 5))\n\nsb.heatmap(grid, annot=True, fmt=\".0f\", ax=ax, cmap='RdBu',  vmin=0, vmax=1, cbar=True);\nActual outcome\n\nPopulating the interactive namespace from numpy and matplotlib\n3.1.1\n0.9.0\n\nMatplotlib version\n\nOperating system: Ubuntu Linux\nMatplotlib version: 3.1.1\nMatplotlib backend: module://ipykernel.pylab.backend_inline\nPython version: 3.6\nJupyter version (if applicable): 4.4.0\nOther libraries:\n```\n\n",
    "7": "# Instructions\n\n1. Analyze the test case and its relationship with the error message, if applicable.\n2. Identify the potential error location within the problematic function.\n3. Explain the reasons behind the occurrence of the bug.\n4. Suggest possible approaches for fixing the bug.\n5. Present the corrected code for the problematic function."
}