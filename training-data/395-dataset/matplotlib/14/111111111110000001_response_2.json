{
    "matplotlib": [
        {
            "bugID": 14,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 175,
            "file_name": "lib/matplotlib/text.py",
            "replace_code": "def update(self, kwargs):\n    # docstring inherited\n    sentinel = object()  # bbox can be None, so use another sentinel.\n    \n    size = kwargs.pop(\"size\", None)  # Extract font size\n    font_prop = kwargs.pop(\"fontproperties\", None)  # Extract font properties\n    if size is not None or font_prop is not None:\n        # If size or font properties are provided, update the font properties\n        font_prop = font_manager.FontProperties(font_prop or FontProperties())\n        if size is not None:\n            font_prop.set_size(size)\n\n        kwargs[\"fontproperties\"] = font_prop  # Update the fontproperties in kwargs\n\n    bbox = kwargs.pop(\"bbox\", sentinel)\n    super().update(kwargs)  # Call the parent class update method\n    if bbox is not sentinel:\n        self.set_bbox(bbox)",
            "import_list": []
        }
    ]
}