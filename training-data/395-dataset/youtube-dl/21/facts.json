{
    "1.1.1": "def urljoin(base, path):\n    if not isinstance(path, compat_str) or not path:\n        return None\n    if re.match(r'^(?:https?:)?//', path):\n        return path\n    if not isinstance(base, compat_str) or not re.match(r'^(?:https?:)?//', base):\n        return None\n    return compat_urlparse.urljoin(base, path)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "youtube_dl/utils.py",
    "1.3.2": [
        "urljoin(base, path)"
    ],
    "1.4.1": [
        "    def test_urljoin(self):\n        self.assertEqual(urljoin('http://foo.de/', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(b'http://foo.de/', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', b'/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(b'http://foo.de/', b'/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('//foo.de/', '/a/b/c.txt'), '//foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', 'a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de', 'a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', '//foo.de/a/b/c.txt'), '//foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(None, 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(None, '//foo.de/a/b/c.txt'), '//foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('', 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin(['foobar'], 'http://foo.de/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n        self.assertEqual(urljoin('http://foo.de/', None), None)\n        self.assertEqual(urljoin('http://foo.de/', ''), None)\n        self.assertEqual(urljoin('http://foo.de/', ['foobar']), None)\n        self.assertEqual(urljoin('http://foo.de/a/b/c.txt', '.././../d.txt'), 'http://foo.de/d.txt')"
    ],
    "1.4.2": [
        "test/test_utils.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: None != 'http://foo.de/a/b/c.txt'"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_utils.TestUtil testMethod=test_urljoin>\n\n    def test_urljoin(self):\n        self.assertEqual(urljoin('http://foo.de/', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')\n>       self.assertEqual(urljoin(b'http://foo.de/', '/a/b/c.txt'), 'http://foo.de/a/b/c.txt')",
            "\ntest/test_utils.py:458: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "path": "'/a/b/c.txt'",
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "'/a/b/c.txt'",
                "base": "b'http://foo.de/'"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "bytes"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "path": "'/a/b/c.txt'",
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "'/a/b/c.txt'",
                "base": "b'http://foo.de/'"
            },
            {
                "base": "'http://foo.de/'"
            }
        ],
        [
            {
                "path": "b'/a/b/c.txt'",
                "base": "'http://foo.de/'"
            },
            {
                "path": "'/a/b/c.txt'"
            }
        ],
        [
            {
                "path": "b'/a/b/c.txt'",
                "base": "b'http://foo.de/'"
            },
            {
                "path": "'/a/b/c.txt'",
                "base": "'http://foo.de/'"
            }
        ],
        [
            {
                "path": "'/a/b/c.txt'",
                "base": "'//foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "'a/b/c.txt'",
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "'/a/b/c.txt'",
                "base": "'http://foo.de'"
            },
            {}
        ],
        [
            {
                "path": "'a/b/c.txt'",
                "base": "'http://foo.de'"
            },
            {}
        ],
        [
            {
                "path": "'http://foo.de/a/b/c.txt'",
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "'//foo.de/a/b/c.txt'",
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "'http://foo.de/a/b/c.txt'"
            },
            {}
        ],
        [
            {
                "path": "'//foo.de/a/b/c.txt'"
            },
            {}
        ],
        [
            {
                "path": "'http://foo.de/a/b/c.txt'",
                "base": "''"
            },
            {}
        ],
        [
            {
                "path": "'http://foo.de/a/b/c.txt'",
                "base": "['foobar']"
            },
            {}
        ],
        [
            {
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "''",
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "['foobar']",
                "base": "'http://foo.de/'"
            },
            {}
        ],
        [
            {
                "path": "'.././../d.txt'",
                "base": "'http://foo.de/a/b/c.txt'"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "bytes"
            },
            {
                "base": "str"
            }
        ],
        [
            {
                "path": "bytes",
                "base": "str"
            },
            {
                "path": "str"
            }
        ],
        [
            {
                "path": "bytes",
                "base": "bytes"
            },
            {
                "path": "str",
                "base": "str"
            }
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str"
            },
            {}
        ],
        [
            {
                "path": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "list"
            },
            {}
        ],
        [
            {
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "list",
                "base": "str"
            },
            {}
        ],
        [
            {
                "path": "str",
                "base": "str"
            },
            {}
        ]
    ],
    "3.1.1": [
        "Regression in 2017.03.05: downloading Twitch VODs that require login\n"
    ],
    "3.1.2": [
        " I've verified and I assure that I'm running youtube-dl 2017.03.05\nBefore submitting an issue make sure you have:\n At least skimmed through README and most notably FAQ and BUGS sections\n Searched the bugtracker for similar issues including closed ones\nWhat is the purpose of your issue?\n Bug report (encountered problems with youtube-dl)\n Site support request (request for adding support for a new site)\n Feature request (request for a new functionality)\n Question\n Other\nDescription of your issue, suggested solution and other information\nIn version 2017.03.05, I can no longer download Twitch videos that are only available to subscribers. When I try, the program crashes after [twitch:vod] Logging in as (username):\n\n  File \"/usr/local/bin/youtube-dl/youtube_dl/utils.py\", line 535, in sanitize_url\nAttributeError: 'NoneType' object has no attribute 'startswith'\nThis is a regression, not a change in Twitch's download page. I downloaded 2017.03.02 and verified that I can still download the same video with that version. Both verbose outputs are provided below.\n\nI have an account that is subscribed to the channel required to view the VOD I am testing with. I'm happy to give my credentials to someone over email, just not to post them publicly on Github. Email me at stephen@stephenwade.me.\n\nVerbose output (current version, failure)\nAdd -v flag to your command line you run youtube-dl with, copy the whole output and insert it here. It should look similar to one below (replace it with your log inserted between triple "
    ]
}