{
    "youtube-dl": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 593,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def unescapeHTML(s):\n    if s is None:\n        return None\n    assert isinstance(s, compat_str)\n\n    def _htmlentity_transform(s):\n        # Define the _htmlentity_transform function here\n        html_entity_map = {\n            'quot': '\"',\n            'amp': '&',\n            'lt': '<',\n            'gt': '>',\n            # Add more entity mappings as needed\n        }\n        if s.startswith('#x'):\n            return chr(int(s[2:], 16))\n        elif s.startswith('#'):\n            return chr(int(s[1:]))\n        elif s in html_entity_map:\n            return html_entity_map[s]\n        else:\n            return '&' + s + ';'\n\n    return re.sub(r'&([^;]+;)', lambda m: _htmlentity_transform(m.group(1)), s)",
            "imports": [
                "import re",
                "from six import string_types as compat_str"
            ]
        }
    ]
}