{
    "youtube-dl": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n\n    def syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        return SyntaxError(message)\n    \n    ...\n    \n    def _parse_format_selection(tokens, endwith=[]):\n        selectors = []\n        current_selector = None\n        for type, string, start, _, _ in tokens:\n            # ENCODING is only defined in python 3.x\n            if type == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = FormatSelector(SINGLE, string, [])\n            elif type == tokenize.OP:\n                if string in endwith:\n                    break\n                elif string == ')':\n                    # ')' will be handled by the parentheses group\n                    tokens.restore_last_token()\n                    break\n                if string == ',':\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    first_choice = current_selector\n                    second_choice = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(PICKFIRST, (first_choice, second_choice), []))\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = FormatSelector(SINGLE, 'best', [])\n                    format_filter = _parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    current_selector = FormatSelector(GROUP, _parse_format_selection(tokens, [')']), [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = _parse_format_selection(tokens, [','])\n                    current_selector = None\n                    selectors.append(FormatSelector(MERGE, (video_selector, audio_selector), []))\n                else:\n                    raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n            elif type == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n    \n    ...\n    \n    def _build_selector_function(selector):\n        ...\n    \n    ...\n    \n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n    \n    class TokenIterator(object):\n        ...\n    \n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)"
        }
    ]
}