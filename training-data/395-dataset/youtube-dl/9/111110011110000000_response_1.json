{
    "youtube-dl": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n        filter_parts = []\n        for c in format_spec:\n            if c == ']':\n                expected = 'format specification (<table>/<table>...  | --all <regex>)'\n                raise ValueError(f'Unexpected \"]\" at {expected}: {format_spec}')\n            elif c == '[':\n                if not filter_parts:\n                    filter_parts.append(c)\n                else:\n                    expected = 'filter expression ([--ext=mp4/--format-id=<id>]...)'\n                    raise ValueError(f'Filter not allowed here at {expected}: {format_spec}')\n            elif c == ',':\n                expected = 'table selection (<id>/<format>...)'\n                raise ValueError(f'Unexpected \",\" at {expected}: {format_spec}')\n            elif c == '/':\n                expected = 'table selection (<id>/<format>...)'\n                raise ValueError(f'Unexpected \"/\" at {expected}: {format_spec}')\n            elif c == '(':\n                expected = 'table selection (<id>/<format>...)'\n                raise ValueError(f'Unexpected \"(\" at {expected}: {format_spec}')\n            else:\n                filter_parts.append(c)\n                \n        format_selector_type = re.split('[+/]', format_spec)\n        \n        endFormatSelector = namedtuple('endFormatSelector', ['type', 'selector', 'filters'])\n        \n        def parser(tokens):\n            selector = []\n            selector_arg = \"\"\n            end = ''\n            first_letter_check = format_spec[0]\n            if first_letter_check != \"/\":\n                for i, token in enumerate(tokens):\n            \n                    token_value = token\n                    next_token = token + 1\n                    if token == last_token:\n                        next_token = last_token\n                    if next_token == \"]\":\n                        end = ''\n                        break\n                    if token_value == \"]\":\n                        break\n                    if token_value == \",\":\n                        break\n                    if token_value == \"\":\n                        break\n                    if token_value == \"(\":\n                        break\n                    if token_value == \"/\":\n                        try:\n                            selector.append(eval(repr(token) + repr(next_token)))\n                        except:\n                            raise ValueError\n                        i += 1\n                    selector.append(token_value)\n            else:\n                return \"Type initializing\"\n            print(\"Selector Values \u00a7:\", selector)\n            while True:       \n                print(\"\\nArguments = \", selector_arg)\n                if selector_arg == token or selector_arg == token + next_token or selector_arg == next_token:\n                    r = format_spec.find(selector_arg)\n                    z = r + 2\n                    end += format_spec[z]\n                    print(\"End:\", end)\n                    print(\"End Type:\", type(end))\n                    print(\"Format_Spec Bool:\", format_spec.endswith(end) if format_spec.endswith(\")\") else \" False\")\n                    tes = end.startswith(\"/\")\n                    print(\"1 without first slash 2 with first slash:\", tes)\n                break\n            else:\n                raise ValueError\n        parser(format_spec)",
            "import_list": [
                "from collections import namedtuple",
                "import itertools",
                "import io",
                "import datetime",
                "import re",
                "import os"
            ]
        }
    ]
}