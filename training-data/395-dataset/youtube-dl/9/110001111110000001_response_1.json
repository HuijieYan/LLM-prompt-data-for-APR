{
    "youtube-dl": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n        # Previous implementation for format selector\n    import io\n    import collections\n    import itertools\n    import tokenize\n    import datetime\n    from youtube_dl.utils import ExtractorError, compat_tokenize_tokenize\n    def _parse_filter(tokens):\n        pass\n    \n    def _parse_format_selection(tokens, endwith=[]):\n        pass\n    \n    def _build_selector_function(selector):\n        pass\n    \n    def _merge(formats_info):\n        pass\n    \n    def _parse_format_spec(format_spec):\n        stream = io.BytesIO(format_spec.encode('utf-8'))\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n        parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n        return parsed_selector\n    \n    def build_selector_function(parsed_selector):\n        return _build_selector_function(parsed_selector)\n    \n    parsed_selector = _parse_format_spec(format_spec)\n    return build_selector_function(parsed_selector)"
        }
    ]
}