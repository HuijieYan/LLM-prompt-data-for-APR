{
    "youtube-dl": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n        # ... existing code ...\n\n    from collections import namedtuple\n    import io\n    import itertools\n    import tokenize\n    from youtube_dl.compat import (\n    compat_tokenize_tokenize,\n    compat_str,\n)\n    from youtube_dl.utils import (\n    determine_ext,\n    ExtractorError,\n)\n    FormatSelector = namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n    \n    def syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        raise SyntaxError(message)\n    \n    # Rest of the code needs to be carefully reviewed, corrected and refactored to handle format selection as per the requirements.\n    \n    # ... corrected logic ...\n    \n    def format_selector(formats):\n        for f in fs:\n            for format in f(formats):\n                yield format\n    \n    def final_selector(formats):\n        for _filter in filters:\n            formats = list(filter(_filter, formats))\n        return format_selector(formats)\n    \n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n    except tokenize.TokenError:\n        syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n    \n    class TokenIterator(object):\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n    \n        def __iter__(self):\n            return self\n    \n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n    \n        next = __next__\n    \n        def restore_last_token(self):\n            self.counter -= 1\n    \n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)"
        }
    ]
}