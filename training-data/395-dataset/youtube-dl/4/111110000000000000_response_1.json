{
    "youtube-dl": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 58,
            "file_name": "youtube_dl/jsinterp.py",
            "replace_code": "def interpret_expression(self, expr, local_vars, allow_recursion):\n    import re\n    import json\n    import re\n    import json\n    \n    def reverse(obj):\n        if isinstance(obj, list):\n            return obj.reverse()\n        else:\n            return obj[::-1]\n    def slice(obj, start):\n        return obj[start:]\n    \n    _OPERATORS = [('+', lambda x, y: x + y), ('-', lambda x, y: x - y), ('*', lambda x, y: x * y),\n                  ('/', lambda x, y: x / y), ('%', lambda x, y: x % y), ('&&', lambda x, y: x and y),\n                  ('||', lambda x, y: x or y), ('>>', lambda x, y: x >> y), ('<<', lambda x, y: x << y),\n                  ('>>>', lambda x, y: x >> y), ('>', lambda x, y: x > y), ('<', lambda x, y: x < y),\n                  ('>=', lambda x, y: x >= y), ('<=', lambda x, y: x <= y), ('==', lambda x, y: x == y),\n                  ('===', lambda x, y: x == y), ('!=', lambda x, y: x != y), ('!==', lambda x, y: x != y)]\n    \n    _ASSIGN_OPERATORS = [('+', lambda x, y: x + y), ('-', lambda x, y: x - y), ('*', lambda x, y: x*y),\n                    ('/', lambda x, y: x / y), ('%', lambda x, y: x % y), ('<<', lambda x, y: x << y),\n                    ('>>', lambda x, y: x >> y), ('>>>', lambda x, y: x >> y), ('&', lambda x, y: x & y),\n                    ('|', lambda x, y: x | y), ('^', lambda x, y: x ^ y)]\n    \n    _NAME_RE = r'[a-zA-Z0-9_$]'"
        }
    ]
}