{
    "youtube-dl": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 58,
            "file_name": "youtube_dl/jsinterp.py",
            "replace_code": "def interpret_expression(self, expr, local_vars, allow_recursion):\n    expr = expr.strip()\n        \n    if expr.isdigit():\n        return int(expr)\n\n    try:\n        return json.loads(expr)\n    except ValueError:\n        pass\n\n    if '(' in expr:\n        m = re.match(r'^([^(]+)\\(([^)]*)\\)$', expr)\n        if m:\n            fname = m.group(1)\n            argvals = [\n                self.interpret_expression(a, local_vars, allow_recursion)\n                for a in m.group(2).split(',')]\n            if fname not in self._functions:\n                self._functions[fname] = self.extract_function(fname)\n            return self._functions[fname](argvals)\n\n    if '.' in expr:\n        pre, post = expr.rsplit('.', 1)\n        obj = self.interpret_expression(pre, local_vars, allow_recursion)\n        if post == 'length':\n            return len(obj)\n        return obj[post]\n\n    if expr in local_vars:\n        return local_vars[expr]\n\n    raise ExtractorError('Unsupported JS expression %r' % expr)",
            "imports": []
        }
    ]
}