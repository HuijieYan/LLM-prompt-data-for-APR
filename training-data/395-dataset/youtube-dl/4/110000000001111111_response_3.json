{
    "youtube-dl": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 58,
            "file_name": "youtube_dl/jsinterp.py",
            "replace_code": "def interpret_expression(self, expr, local_vars, allow_recursion):\n    import re\n    import json\n    expr = expr.strip()\n    \n    if expr == '':  # Empty expression\n        return None\n    \n    def opfunc_assignment(cur, right_val):\n        return cur\n    \n    def opfunc_default(cur, right_val):\n        return right_val\n    \n    for op, opfunc in [('+', opfunc_default), ('-', opfunc_default), ('*', opfunc_default), ('/', opfunc_default)]:\n        m = re.match(rf'(?P<x>.+?){re.escape(op)}(?P<y>.+)', expr)\n        if m:\n            x, abort = self.interpret_statement(\n                m.group('x'), local_vars, allow_recursion - 1)\n    \n            if abort:\n                raise ExtractorError(\n                    f'Premature left-side return of {op} in {expr}')\n    \n            y, abort = self.interpret_statement(\n                m.group('y'), local_vars, allow_recursion - 1)\n    \n            if abort:\n                raise ExtractorError(\n                    f'Premature right-side return of {op} in {expr}')\n    \n            return opfunc(x, y)\n    \n    if expr.isdigit():\n        return int(expr)\n    \n    var_m = re.match(\n        r'(?!if|return|true|false)(?P<name>%s)$' % _NAME_RE,\n        expr)\n    if var_m:\n        return local_vars[var_m.group('name')]\n    \n    try:\n        return json.loads(expr)\n    except ValueError:\n        pass\n    \n    # existing implementations for call, member, and indexer handling go here...\n    \n    raise ExtractorError('Unsupported JS expression %r' % expr)"
        }
    ]
}