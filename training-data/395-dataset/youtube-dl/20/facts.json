{
    "1.1.1": "def get_elements_by_attribute(attribute, value, html, escape_value=True):\n    \n\n    value = re.escape(value) if escape_value else value\n\n    retlist = []\n    for m in re.finditer(r % (re.escape(attribute), value), html):\n        res = m.group('content')\n\n        if res.startswith('\"') or res.startswith(\"'\"):\n            res = res[1:-1]\n\n        retlist.append(unescapeHTML(res))\n\n    return retlist\n",
    "1.1.2": "Return the content of the tag with the specified attribute in the passed HTML document",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/youtube-dl_20/youtube_dl/utils.py",
    "1.3.2": [
        "unescapeHTML(s)"
    ],
    "1.4.1": [
        "    def test_get_element_by_attribute(self):\n        html = '''\n            <span class=\"foo bar\">nice</span>\n        '''\n\n        self.assertEqual(get_element_by_attribute('class', 'foo bar', html), 'nice')\n        self.assertEqual(get_element_by_attribute('class', 'foo', html), None)\n        self.assertEqual(get_element_by_attribute('class', 'no-such-foo', html), None)\n\n        html = '''\n            <div itemprop=\"author\" itemscope>foo</div>\n        '''\n\n        self.assertEqual(get_element_by_attribute('itemprop', 'author', html), 'foo')"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/youtube-dl_20/test/test_utils.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: None != 'foo'"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_utils.TestUtil testMethod=test_get_element_by_attribute>\n\n    def test_get_element_by_attribute(self):\n        html = '''\n            <span class=\"foo bar\">nice</span>\n        '''\n    \n        self.assertEqual(get_element_by_attribute('class', 'foo bar', html), 'nice')\n        self.assertEqual(get_element_by_attribute('class', 'foo', html), None)\n        self.assertEqual(get_element_by_attribute('class', 'no-such-foo', html), None)\n    \n        html = '''\n            <div itemprop=\"author\" itemscope>foo</div>\n        '''\n    \n>       self.assertEqual(get_element_by_attribute('itemprop', 'author', html), 'foo')",
            "\ntest/test_utils.py:1235: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "value": "'foo bar'",
                "escape_value": "True",
                "attribute": "'class'",
                "html": "'\\n            <span class=\"foo bar\">nice</span>\\n        '"
            },
            {
                "value": "'foo\\\\ bar'",
                "retlist": "['nice']",
                "m": "<re.Match object; span=(13, 46), match='<span class=\"foo bar\">nice</span>'>",
                "res": "'nice'"
            }
        ],
        [
            {
                "value": "'foo'",
                "escape_value": "True",
                "attribute": "'class'",
                "html": "'\\n            <span class=\"foo bar\">nice</span>\\n        '"
            },
            {
                "retlist": "[]"
            }
        ],
        [
            {
                "value": "'no-such-foo'",
                "escape_value": "True",
                "attribute": "'class'",
                "html": "'\\n            <span class=\"foo bar\">nice</span>\\n        '"
            },
            {
                "value": "'no\\\\-such\\\\-foo'",
                "retlist": "[]"
            }
        ],
        [
            {
                "value": "'author'",
                "escape_value": "True",
                "attribute": "'itemprop'",
                "html": "'\\n            <div itemprop=\"author\" itemscope>foo</div>\\n        '"
            },
            {
                "retlist": "[]"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "value": "str",
                "retlist": "list",
                "m": "Match",
                "res": "str"
            }
        ],
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "retlist": "list"
            }
        ],
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "value": "str",
                "retlist": "list"
            }
        ],
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "retlist": "list"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "value": "'foo bar'",
                "escape_value": "True",
                "attribute": "'class'",
                "html": "'\\n            <span class=\"foo bar\">nice</span>\\n        '"
            },
            {
                "value": "'foo\\\\ bar'",
                "retlist": "['nice']",
                "m": "<re.Match object; span=(13, 46), match='<span class=\"foo bar\">nice</span>'>",
                "res": "'nice'"
            }
        ],
        [
            {
                "value": "'foo'",
                "escape_value": "True",
                "attribute": "'class'",
                "html": "'\\n            <span class=\"foo bar\">nice</span>\\n        '"
            },
            {
                "retlist": "[]"
            }
        ],
        [
            {
                "value": "'no-such-foo'",
                "escape_value": "True",
                "attribute": "'class'",
                "html": "'\\n            <span class=\"foo bar\">nice</span>\\n        '"
            },
            {
                "value": "'no\\\\-such\\\\-foo'",
                "retlist": "[]"
            }
        ],
        [
            {
                "value": "'author'",
                "escape_value": "True",
                "attribute": "'itemprop'",
                "html": "'\\n            <div itemprop=\"author\" itemscope>foo</div>\\n        '"
            },
            {
                "retlist": "['foo']",
                "m": "<re.Match object; span=(13, 55), match='<div itemprop=\"author\" itemscope>foo</div>'>",
                "res": "'foo'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "value": "str",
                "retlist": "list",
                "m": "Match",
                "res": "str"
            }
        ],
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "retlist": "list"
            }
        ],
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "value": "str",
                "retlist": "list"
            }
        ],
        [
            {
                "value": "str",
                "escape_value": "bool",
                "attribute": "str",
                "html": "str"
            },
            {
                "retlist": "list",
                "m": "Match",
                "res": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}