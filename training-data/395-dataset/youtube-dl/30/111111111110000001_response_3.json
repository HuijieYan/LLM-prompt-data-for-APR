{
    "youtube-dl": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    # ... previous implementation ...\n\n    def selector_function(formats):\n        if format_spec == 'all':\n            for f in formats:\n                yield f\n        elif format_spec in ['best', 'worst', None]:\n            video_formats = [f for f in formats if f.get('vcodec') != 'none']\n            audio_formats = [f for f in formats if f.get('acodec') != 'none']\n            if format_spec == 'best':\n                if audio_formats:\n                    yield max(audio_formats, key=lambda x: x['filesize'])\n                elif video_formats:\n                    yield max(video_formats, key=lambda x: x['filesize'])\n                else:\n                    yield None\n            elif format_spec == 'worst':\n                if audio_formats:\n                    yield min(audio_formats, key=lambda x: x['filesize'])\n                elif video_formats:\n                    yield min(video_formats, key=lambda x: x['filesize'])\n                else:\n                    yield None\n        else:\n            # Handle other format_spec cases\n            yield None",
            "imports": []
        }
    ]
}