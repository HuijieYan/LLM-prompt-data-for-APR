{
    "youtube-dl": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    import collections\n    import io\n    import tokenize\n\n    # ... (previous code remains unchanged)\n\n    def selector_function(formats):\n        if format_spec == 'all':\n            for f in formats:\n                yield f\n        elif format_spec in ['best', 'worst', None]:\n            if formats:\n                format_idx = 0 if format_spec == 'worst' else -1\n                audiovideo_formats = [\n                    f for f in formats\n                    if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                if audiovideo_formats:\n                    yield audiovideo_formats[format_idx]\n                else:\n                    # Handle audio only (soundcloud) or video only (imgur) URLs\n                    if all(f.get('acodec') != 'none' for f in formats):\n                        # Select the best/worst audio format\n                        yield sorted(formats, key=lambda x: x['filesize'])[format_idx]\n                    elif all(f.get('vcodec') != 'none' for f in formats):\n                        # Select the best/worst video format\n                        yield sorted(formats, key=lambda x: x['filesize'])[format_idx]\n            else:\n                raise ValueError('The formats list is empty')\n        # ... (other conditions and logic for format_spec)\n                \n    # ... (remaining code remains unchanged)\n\n    return _build_selector_function(parsed_selector)",
            "imports": [
                "import collections",
                "import io",
                "import tokenize"
            ]
        }
    ]
}