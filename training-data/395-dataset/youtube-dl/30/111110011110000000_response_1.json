{
    "youtube-dl": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(format_spec: str) -> callable:\n    from collections import namedtuple\n    import io\n    import tokenize\n    from typing import List, Dict\n    import itertools\n    pickfirst = 'PICKFIRST'\n    merge = 'MERGE'\n    single = 'SINGLE'\n    group_ = 'GROUP'\n    format_selector = namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n    \n    def syntax_error(note, start):\n        message = f'Invalid format specification: {note}\\n\\t{format_spec}\\n\\t{\" \" * start[1]}^'\n        return SyntaxError(message)\n    \n    def parse_filter(tokens: List) -> str:\n        filter_parts = []\n        for type_, string, start, _, _ in tokens:\n            if type_ == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n    \n    def parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n        selectors = []\n        current_selector = None\n        for type_, string, start, _, _ in tokens:\n            if type_ == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type_ in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = format_selector(single, string, [])\n            elif type_ == tokenize.OP:\n                if string == ')':\n                    if not inside_group:\n                        tokens.restore_last_token()\n                    break\n                elif inside_merge and string in ['/', ',']:\n                    tokens.restore_last_token()\n                    break\n                elif inside_choice and string == ',':\n                    tokens.restore_last_token()\n                    break\n                elif string == ',':\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    first_choice = current_selector\n                    second_choice = parse_format_selection(tokens, inside_choice=True)\n                    current_selector = format_selector(pickfirst, (first_choice, second_choice), [])\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = format_selector(single, 'best', [])\n                    format_filter = parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    group = parse_format_selection(tokens, inside_group=True)\n                    current_selector = format_selector(group_, group, [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = parse_format_selection(tokens, inside_merge=True)\n                    current_selector = format_selector(merge, (video_selector, audio_selector), [])\n                else:\n                    raise syntax_error(f'Operator not recognized: \"{string}\"', start)\n            elif type_ == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n    \n    def build_selector_function(selector):\n        if isinstance(selector, list):\n            fs = [build_selector_function(s) for s in selector]\n    \n            def selector_function(formats):\n                for f in fs:\n                    for format_ in f(formats):\n                        yield format_\n            return selector_function\n        elif selector.type == group_:\n            selector_function = build_selector_function(selector.selector)\n        elif selector.type == pickfirst:\n            fs = [build_selector_function(s) for s in selector.selector]\n    \n            def selector_function(formats):\n                for f in fs:\n                    picked_formats = list(f(formats))\n                    if picked_formats:\n                        return picked_formats\n                return []\n        elif selector.type == single:\n            format_spec = selector.selector\n    \n            def selector_function(formats):\n                if format_spec == 'all':\n                    for f in formats:\n                        yield f\n                elif format_spec in ['best', 'worst', None]:\n                    format_idx = 0 if format_spec == 'worst' else -1\n                    audiovideo_formats = [f for f in formats if f.get('vcodec') != 'none' and f.get('acodec') != 'none']\n                    if audiovideo_formats:\n                        yield audiovideo_formats[format_idx]\n                    elif all(f.get('acodec') != 'none' for f in formats) or all(f.get('vcodec') != 'none' for f in formats):\n                        yield formats[format_idx]\n            return selector_function\n    \n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(tokenize.tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n    \n    class TokenIterator:\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n    \n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n    \n        next = __next__\n    \n        def restore_last_token(self):\n            self.counter -= 1\n    \n    parsed_selector = parse_format_selection(iter(TokenIterator(tokens)))\n    return build_selector_function(parsed_selector)"
        }
    ]
}