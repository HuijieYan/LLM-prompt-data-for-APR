{
    "youtube-dl": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n        PICKFIRST = 'PICKFIRST'\n        SINGLE = 'SINGLE'\n        GROUP = 'GROUP'\n        MERGE = 'MERGE'\n        \n        def syntax_error(note, start):\n            message = 'Invalid format specification: {0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1])\n            return SyntaxError(message)\n\n        def _parse_filter(tokens):\n            filter_parts = []\n            for token in tokens:\n                type, string, _, _, _ = token\n                if string == ']':\n                    return ''.join(filter_parts)\n                else:\n                    filter_parts.append(string)\n\n        def _build_selector_function(selector):\n            if selector.type == SINGLE:\n                format_spec = selector.selector\n                if format_spec in ['best', 'worst', None]:\n                    format_idx = 0 if format_spec == \"worst\" else -1\n                    audiovideo_formats = [f for f in formats if f.get('height') and f.get('width')]\n                    if audiovideo_formats:\n                        yield audiovideo_formats[format_idx]\n                    elif all(f.get('height') for f in formats) or all(f.get('width') for f in formats):\n                        yield formats[format_idx]\n            elif selector.type == GROUP:\n                selector_function = _build_selector_function(selector.selector)\n            elif selector.type == PICKFIRST:\n                first_choice, second_choice = [_build_selector_function(s) for s in selector.selector]\n                for f in first_choice(formats):\n                    yield f\n                for f in second_choice(formats):\n                    yield f\n            elif selector.type == MERGE:\n                video_selector, audio_selector = map(_build_selector_function, selector.selector)\n                for format_1 in video_selector(formats):\n                    for format_2 in audio_selector(formats):\n                        yield {'format_id': format_1['format_id'] + '+' + format_2['format_id'], 'ext': 'merged'}\n\n        stream = io.BytesIO(format_spec.encode('utf-8'))\n        try:\n            tokens = list(compat_tokenize_tokenize(stream.readline))\n        except tokenize.TokenError:\n            raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n        \n        parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n        return _build_selector_function(parsed_selector)",
            "import_list": []
        }
    ]
}