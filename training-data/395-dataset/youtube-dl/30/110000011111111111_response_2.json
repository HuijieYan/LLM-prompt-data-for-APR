{
    "youtube-dl": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    # existing code\n\n    def _build_selector_function(selector):\n        # existing code\n\n        def selector_function(formats):\n            if format_spec == 'all':\n                for f in formats:\n                    yield f\n            elif format_spec in ['best', 'worst', None]:\n                format_idx = 0 if format_spec == 'worst' else -1\n                audiovideo_formats = [\n                    f for f in formats\n                    if f.get('vcodec') and f.get('acodec')]\n                if audiovideo_formats:\n                    yield sorted(audiovideo_formats, key=lambda x: x['quality'], reverse=format_spec == 'best')[format_idx]\n                elif all(f.get('acodec') for f in formats) or all(f.get('vcodec') for f in formats):\n                    yield sorted(formats, key=lambda x: x['quality'], reverse=format_spec == 'best')[format_idx]\n            # remaining code\n\n        # remaining code\n\n    # remaining code\n\n    return _build_selector_function(parsed_selector)",
            "import_list": []
        }
    ]
}