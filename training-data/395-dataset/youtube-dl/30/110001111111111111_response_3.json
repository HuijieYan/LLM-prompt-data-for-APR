{
    "youtube-dl": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    def syntax_error(note, start):\n        # error handling logic\n        pass\n      \n    # other helper functions and constants definitions\n    \n    def selector_function(formats):\n        non_dash_formats = [f for f in formats if not f.get('is_dash')]\n        formatted_formats = [(f, self.params.get('format_weight', {}).get(f['format_id'], 1.0)) for f in non_dash_formats]\n        formatted_formats.sort(key=lambda x: x[0]['tbr'] * x[1], reverse=True)\n        \n        if format_spec == 'all':\n            for f in formats:\n                yield f\n        elif format_spec in ['best', 'worst', None]:\n            format_idx = 0 if format_spec == 'worst' else -1\n            audiovideo_formats = [\n                f for f in formatted_formats\n                if f[0].get('vcodec') != 'none' and f[0].get('acodec') != 'none']\n            if audiovideo_formats:\n                yield audiovideo_formats[format_idx][0]\n            # for audio only (soundcloud) or video only (imgur) urls, select the best/worst audio format\n            elif (all(f[0].get('acodec') != 'none' for f in formatted_formats) or\n                  all(f[0].get('vcodec') != 'none' for f in formatted_formats)):\n                yield formatted_formats[format_idx][0]\n            else:\n                yield non_dash_formats[0]  # just return the first non-DASH format as a fallback\n        elif format_spec == 'bestvideo+bestaudio':\n            video_format = next((f for f in formatted_formats if f[0].get('vcodec') != 'none'), None)\n            audio_format = next((f for f in formatted_formats if f[0].get('acodec') != 'none'), None)\n            if video_format and audio_format:\n                yield video_format[0]  # return the best non-DASH video format\n                yield audio_format[0]  # return the best non-DASH audio format\n        else:\n            # handle other format_spec cases\n            pass\n      \n    # other helper functions and main function logic\n\n    return final_selector",
            "imports": []
        }
    ]
}