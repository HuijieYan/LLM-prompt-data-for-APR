{
    "youtube-dl": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 852,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def unified_strdate(date_str, day_first=True):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n\n    if date_str is None:\n        return None\n    upload_date = None\n    # Replace commas\n    date_str = date_str.replace(',', ' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    if not re.match(r'^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$', date_str):\n        date_str = re.sub(r' ?(\\+|-)[0-9]{2}:?[0-9]{2}$', '', date_str)\n    # Remove AM/PM + timezone\n    date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n\n    format_expressions = [\n    '%d %B %Y',\n    '%d %b %Y',\n    '%B %d %Y',\n    '%b %d %Y',\n    '%b %dst %Y %I:%M%p',\n    '%b %dnd %Y %I:%M%p',\n    '%b %dth %Y %I:%M%p',\n    '%Y %m %d',\n    '%Y-%m-%d',\n    '%Y/%m/%d',\n    '%Y/%m/%d %H:%M:%S',\n    '%Y-%m-%d %H:%M:%S',\n    '%Y-%m-%d %H:%M:%S.%f',\n    '%d.%m.%Y %H:%M',\n    '%d.%m.%Y %H.%M',\n    '%Y-%m-%dT%H:%M:%SZ',\n    '%Y-%m-%dT%H:%M:%S.%fZ',\n    '%Y-%m-%dT%H:%M:%S.%f0Z',\n    '%Y-%m-%dT%H:%M:%S',\n    '%Y-%m-%dT%H:%M:%S.%f',\n    '%Y-%m-%dT%H:%M',\n    ]\n    if day_first:\n        format_expressions.extend([\n        '%d-%m-%Y',\n        '%d.%m.%Y',\n        '%d/%m/%Y',\n        '%d/%m/%y',\n        '%d/%m/%Y %H:%M:%S',\n        ])\n    else:\n        format_expressions.extend([\n        '%m-%d-%Y',\n        '%m.%d.%Y',\n        '%m/%d/%Y',\n        '%m/%d/%y',\n        '%m/%d/%Y %H:%M:%S',\n    ])\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    return upload_date",
            "import_list": [
                "import re",
                "import datetime"
            ]
        }
    ]
}