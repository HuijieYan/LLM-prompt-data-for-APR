{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    for op, func in COMPARISON_OPERATORS.items():\n        if op in filter_part:\n            key, value = filter_part.split(op)\n            key = key.strip()\n            value = value.strip()\n            if value.endswith('?'):\n                none_inclusive = True\n                value = value[:-1].strip()\n            else:\n                none_inclusive = False\n    \n            actual_value = dct.get(key)\n            if actual_value is not None and not isinstance(actual_value, str):\n                try:\n                    comparison_value = int(value)\n                except ValueError:\n                    comparison_value = parse_filesize(value)\n                    if comparison_value is None:\n                        comparison_value = parse_filesize(value + 'B')\n                    if comparison_value is None:\n                        raise ValueError(\n                            'Invalid integer value %r in filter part %r' % (value, filter_part))\n            else:\n                comparison_value = value\n    \n            if actual_value is None:\n                return none_inclusive\n            return func(actual_value, comparison_value)\n    \n    for op, func in UNARY_OPERATORS.items():\n        if op in filter_part:\n            key = filter_part.replace(op, '').strip()\n            actual_value = dct.get(key)\n            return func(actual_value)\n    \n    raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}