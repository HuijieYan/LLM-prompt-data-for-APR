{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import re\n    import operator\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    m = re.search(r'(?P<key>[a-z_]+)\\s*(?P<op>[<>=!]+)\\s*(?P<value>.+)', filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        value = m.group('value')\n        \n        actual_value = dct.get(key)\n    \n        if op in COMPARISON_OPERATORS:\n            if value.isdigit():\n                comparison_value = int(value)\n            else:\n                comparison_value = value\n    \n            if actual_value is None:\n                return op == '!='\n    \n            return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n    \n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    m = re.search(r'(?P<op>[!]?)(?P<key>[a-z_]+)$', filter_part)\n    if m:\n        op = m.group('op')\n        key = m.group('key')\n    \n        actual_value = dct.get(key)\n    \n        if op in UNARY_OPERATORS:\n            return UNARY_OPERATORS[op](actual_value)\n    \n    raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}