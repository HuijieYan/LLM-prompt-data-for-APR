{
    "1.1.1": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        if (m.group('quotedstrval') is not None or\n            m.group('strval') is not None or\n            # If the original field is a string and matching comparisonvalue is\n            # a number we should respect the origin of the original field\n            # and process comparison value as a string (see\n            # https://github.com/rg3/youtube-dl/issues/11082).\n            actual_value is not None and m.group('intval') is not None and\n                isinstance(actual_value, compat_str)):\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    'Operator %s does not support string values!' % m.group('op'))\n            comparison_value = m.group('quotedstrval') or m.group('strval') or m.group('intval')\n            quote = m.group('quote')\n            if quote is not None:\n                comparison_value = comparison_value.replace(r'\\%s' % quote, quote)\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('intval'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('intval') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('intval'), filter_part))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "youtube_dl/utils.py",
    "1.3.2": [
        "parse_filesize(s)"
    ],
    "1.4.1": [
        "    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))\n        self.assertTrue(match_str('is_live', {'is_live': True}))\n        self.assertFalse(match_str('is_live', {'is_live': False}))\n        self.assertFalse(match_str('is_live', {'is_live': None}))\n        self.assertFalse(match_str('is_live', {}))\n        self.assertFalse(match_str('!is_live', {'is_live': True}))\n        self.assertTrue(match_str('!is_live', {'is_live': False}))\n        self.assertTrue(match_str('!is_live', {'is_live': None}))\n        self.assertTrue(match_str('!is_live', {}))\n        self.assertTrue(match_str('title', {'title': 'abc'}))\n        self.assertTrue(match_str('title', {'title': ''}))\n        self.assertFalse(match_str('!title', {'title': 'abc'}))\n        self.assertFalse(match_str('!title', {'title': ''}))"
    ],
    "1.4.2": [
        "test/test_utils.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: True is not false"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_utils.TestUtil testMethod=test_match_str>\n\n    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))\n        self.assertTrue(match_str('is_live', {'is_live': True}))\n>       self.assertFalse(match_str('is_live', {'is_live': False}))",
            "\ntest/test_utils.py:1076: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "filter_part": {
                    "value": "'xy'",
                    "shape": "2",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 2), match='xy'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x1112c1c20>, '!': <function _match_one.<locals>.<lambda> at 0x1112c1cb0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!xy'",
                    "shape": "3",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 3), match='!xy'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x11132d440>, '!': <function _match_one.<locals>.<lambda> at 0x11132d4d0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x'",
                    "shape": "1",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 1), match='x'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x1112c1ef0>, '!': <function _match_one.<locals>.<lambda> at 0x1112c1dd0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!x'",
                    "shape": "2",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 2), match='!x'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x11132d830>, '!': <function _match_one.<locals>.<lambda> at 0x11132d440>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x'",
                    "shape": "1",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 0}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 1), match='x'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x1113330e0>, '!': <function _match_one.<locals>.<lambda> at 0x111333170>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>0'",
                    "shape": "3",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 0}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 3), match='x>0'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>0'",
                    "shape": "3",
                    "omitted": false
                },
                "dct": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 3), match='x>0'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>?0'",
                    "shape": "4",
                    "omitted": false
                },
                "dct": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 4), match='x>?0'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>1K'",
                    "shape": "4",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 4), match='x>1K'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1000",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>2K'",
                    "shape": "4",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 4), match='x>2K'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "2000",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>=1200 '",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='x>=1200 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' x < 1300'",
                    "shape": "9",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 9), match=' x < 1300'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1300",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>=1100 '",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='x>=1100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' x < 1200'",
                    "shape": "9",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 9), match=' x < 1200'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y=a212'",
                    "shape": "6",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 6), match='y=a212'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'a212'",
                    "shape": "4",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y=foobar42'",
                    "shape": "10",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 10), match='y=foobar42'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y!=foobar42'",
                    "shape": "11",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 11), match='y!=foobar42'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y!=foobar2'",
                    "shape": "10",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 10), match='y!=foobar2'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foobar2'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 90, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "90",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "190",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' dislike_count <? 50 '",
                    "shape": "21",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "50",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' description'",
                    "shape": "12",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 12), match=' description'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x111364320>, '!': <function _match_one.<locals>.<lambda> at 0x1113640e0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "190",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' dislike_count <? 50 '",
                    "shape": "21",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "60",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "50",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 10}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "190",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' dislike_count <? 50 '",
                    "shape": "21",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 10}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "10",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "50",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' description'",
                    "shape": "12",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 10}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 12), match=' description'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x111346e60>, '!': <function _match_one.<locals>.<lambda> at 0x111346ef0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'is_live'",
                    "shape": "7",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': True}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 7), match='is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x1113585f0>, '!': <function _match_one.<locals>.<lambda> at 0x111358560>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'is_live'",
                    "shape": "7",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': False}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 7), match='is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x111358200>, '!': <function _match_one.<locals>.<lambda> at 0x111358050>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "filter_part": {
                    "value": "'xy'",
                    "shape": "2",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 2), match='xy'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110e31c20>, '!': <function _match_one.<locals>.<lambda> at 0x110e31cb0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!xy'",
                    "shape": "3",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 3), match='!xy'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110e90440>, '!': <function _match_one.<locals>.<lambda> at 0x110e904d0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x'",
                    "shape": "1",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 1), match='x'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110e90c20>, '!': <function _match_one.<locals>.<lambda> at 0x110e90cb0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!x'",
                    "shape": "2",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 2), match='!x'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110e97440>, '!': <function _match_one.<locals>.<lambda> at 0x110e974d0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x'",
                    "shape": "1",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 0}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 1), match='x'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110e974d0>, '!': <function _match_one.<locals>.<lambda> at 0x110e97440>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>0'",
                    "shape": "3",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 0}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 3), match='x>0'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>0'",
                    "shape": "3",
                    "omitted": false
                },
                "dct": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 3), match='x>0'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>?0'",
                    "shape": "4",
                    "omitted": false
                },
                "dct": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 4), match='x>?0'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>1K'",
                    "shape": "4",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 4), match='x>1K'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1000",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>2K'",
                    "shape": "4",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 4), match='x>2K'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "2000",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>=1200 '",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='x>=1200 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' x < 1300'",
                    "shape": "9",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 9), match=' x < 1300'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1300",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'x>=1100 '",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='x>=1100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' x < 1200'",
                    "shape": "9",
                    "omitted": false
                },
                "dct": {
                    "value": "{'x': 1200}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 9), match=' x < 1200'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "1200",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y=a212'",
                    "shape": "6",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 6), match='y=a212'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'a212'",
                    "shape": "4",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y=foobar42'",
                    "shape": "10",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 10), match='y=foobar42'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y!=foobar42'",
                    "shape": "11",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 11), match='y!=foobar42'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'y!=foobar2'",
                    "shape": "10",
                    "omitted": false
                },
                "dct": {
                    "value": "{'y': 'foobar42'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 10), match='y!=foobar2'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foobar42'",
                    "shape": "8",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foobar2'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 90, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "90",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "190",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' dislike_count <? 50 '",
                    "shape": "21",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "50",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' description'",
                    "shape": "12",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'description': 'foo'}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 12), match=' description'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110e9ecb0>, '!': <function _match_one.<locals>.<lambda> at 0x110eb5050>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "190",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' dislike_count <? 50 '",
                    "shape": "21",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}",
                    "shape": "3",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "60",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "50",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'like_count > 100 '",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 10}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "190",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "100",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' dislike_count <? 50 '",
                    "shape": "21",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 10}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "10",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "50",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "' description'",
                    "shape": "12",
                    "omitted": false
                },
                "dct": {
                    "value": "{'like_count': 190, 'dislike_count': 10}",
                    "shape": "2",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 12), match=' description'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110ebd0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ebd170>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'is_live'",
                    "shape": "7",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': True}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 7), match='is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110eb78c0>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7950>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'is_live'",
                    "shape": "7",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': False}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 7), match='is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110ebb0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ebb170>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'is_live'",
                    "shape": "7",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': None}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 7), match='is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110eb7950>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7200>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'is_live'",
                    "shape": "7",
                    "omitted": false
                },
                "dct": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 7), match='is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110ec90e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ec9170>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!is_live'",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': True}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='!is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110eb78c0>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7200>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!is_live'",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': False}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='!is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110ecc0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ecc170>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!is_live'",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{'is_live': None}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='!is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110eb7440>, '!': <function _match_one.<locals>.<lambda> at 0x110eb7320>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!is_live'",
                    "shape": "8",
                    "omitted": false
                },
                "dct": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 8), match='!is_live'>",
                    "shape": null,
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110edb0e0>, '!': <function _match_one.<locals>.<lambda> at 0x110edb170>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'title'",
                    "shape": "5",
                    "omitted": false
                },
                "dct": {
                    "value": "{'title': 'abc'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 5), match='title'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'abc'",
                    "shape": "3",
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110e933b0>, '!': <function _match_one.<locals>.<lambda> at 0x110e935f0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'title'",
                    "shape": "5",
                    "omitted": false
                },
                "dct": {
                    "value": "{'title': ''}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 5), match='title'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110ee80e0>, '!': <function _match_one.<locals>.<lambda> at 0x110ee8170>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!title'",
                    "shape": "6",
                    "omitted": false
                },
                "dct": {
                    "value": "{'title': 'abc'}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 6), match='!title'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'abc'",
                    "shape": "3",
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110eeb4d0>, '!': <function _match_one.<locals>.<lambda> at 0x110eeb710>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'!title'",
                    "shape": "6",
                    "omitted": false
                },
                "dct": {
                    "value": "{'title': ''}",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                    "shape": "!)\\\\s*(?P<key>[a-z_]+)\\n        \\\\s*$\\n        ', re.VERBOSE)",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 6), match='!title'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "UNARY_OPERATORS": {
                    "value": "{'': <function _match_one.<locals>.<lambda> at 0x110eeee60>, '!': <function _match_one.<locals>.<lambda> at 0x110eeeef0>}",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}