{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    # rest of the code remains unchanged\n    # ...\n\n    # explicitly check if the original field is a string and the comparison value is a number\n    if (actual_value is not None and m.group('intval') is not None\n            and isinstance(actual_value, str) and not m.group('quotedstrval')):\n        if m.group('op') not in ('=', '!='):\n            raise ValueError(\n                'Operator %s does not support string values!' % m.group('op'))\n            \n        comparison_value = m.group('strval') or m.group('intval')\n\n    else:\n        try:\n            comparison_value = int(m.group('intval'))\n        except ValueError:\n            comparison_value = parse_filesize(m.group('intval'))\n            if comparison_value is None:\n                comparison_value = parse_filesize(m.group('intval') + 'B')\n            if comparison_value is None:\n                raise ValueError(\n                    'Invalid integer value %r in filter part %r' % (\n                        m.group('intval'), filter_part))\n    if actual_value is None:\n        return m.group('none_inclusive')\n    return op(actual_value, comparison_value)",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}