{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': lt,\n        '<=': le,\n        '>': gt,\n        '>=': ge,\n        '=': eq,\n        '!=': ne,\n    }\n    m = re.match(r'\\s*(?P<key>[a-z_]+)\\s*(?P<op>[<>=!]+)(?P<none_inclusive>\\s*\\?)?\\s*(?P<val>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?|[\"\\'](?P<quotedstrval>(?:\\\\.|[^\\\\])*?)[\"\\']|[a-z0-9A-Z]*?)\\s*,?\\s*$', filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        if (m.group('quotedstrval') is not None or m.group('val').isalpha() or actual_value is not None and m.group('val').isdigit() and isinstance(actual_value, str)):\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    f'Operator {m.group(\"op\")} does not support string values!')\n            comparison_value = m.group('quotedstrval') or m.group('val')\n        else:\n            try:\n                comparison_value = int(m.group('val'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('val')) or parse_filesize(f\"{m.group('val')}B\")\n                if comparison_value is None:\n                    raise ValueError(\n                        f'Invalid integer value {m.group(\"val\")} in filter part {filter_part}')\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    m = re.match(r'\\s*(?P<op>[!])?\\s*(?P<key>[a-z_]+)\\s*,?\\s*$', filter_part)\n    if m:\n        op = UNARY_OPERATORS.get(m.group('op'))\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value) if op else actual_value is not None\n\n    raise ValueError(f'Invalid filter part {filter_part}')",
            "imports": [
                "from operator import lt, le, gt, ge, eq, ne"
            ]
        }
    ]
}