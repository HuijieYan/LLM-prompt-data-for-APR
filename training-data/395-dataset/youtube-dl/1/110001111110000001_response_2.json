{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    if '&' in filter_part:\n        return all(_match_one(part, dct) for part in filter_part.split('&'))\n    \n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    for operator, func in COMPARISON_OPERATORS.items():\n        if operator in filter_part:\n            key, value = filter_part.split(operator)\n            actual_value = dct.get(key.strip())\n            comparison_value = value.strip()\n\n            if comparison_value.isdigit():\n                comparison_value = int(comparison_value)\n            else:\n                try:\n                    comparison_value = parse_filesize(comparison_value)\n                except ValueError:\n                    raise ValueError(f'Invalid comparison value {comparison_value}')\n                \n            return func(actual_value, comparison_value)\n\n    if '!' in filter_part:\n        key = filter_part[1:]\n        actual_value = dct.get(key)\n        return actual_value is None\n\n    if filter_part in dct:\n        return bool(dct[filter_part])\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": []
        }
    ]
}