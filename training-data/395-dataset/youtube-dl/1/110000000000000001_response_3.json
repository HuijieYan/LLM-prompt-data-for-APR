{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    if any(op in filter_part for op in COMPARISON_OPERATORS):\n        key, op, comparison_value = re.match(r'\\s*([a-z_]+)\\s*([<>=!]+)\\s*(.*)', filter_part).groups()\n        actual_value = dct.get(key)\n        \n        if not actual_value:\n            return comparison_value\n        \n        if op in ('=', '!=') and isinstance(comparison_value, (str, int, float)):\n            comparison_value = actual_value if isinstance(comparison_value, str) else comparison_value\n        else:\n            try:\n                comparison_value = int(comparison_value)\n            except ValueError:\n                comparison_value = parse_filesize(comparison_value) or parse_filesize(comparison_value + 'B') or comparison_value\n            if not isinstance(comparison_value, (str, int, float)):\n                raise ValueError('Invalid integer value {} in filter part {}'.format(comparison_value, filter_part))\n        \n        return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n\n    m = re.match(r'\\s*(!?)\\s*([a-z_]+)\\s*$', filter_part)\n    if m:\n        op, key = m.groups()\n        actual_value = dct.get(key)\n        return UNARY_OPERATORS[op](actual_value)\n\n    raise ValueError('Invalid filter part {}'.format(filter_part))",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}