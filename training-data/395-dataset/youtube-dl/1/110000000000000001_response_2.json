{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    m = re.match(r'(?P<key>[a-zA-Z_]+)\\s*(?P<op>[<>=!]+)\\s*(?P<value>.+)', filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        \n        key = m.group('key')\n        actual_value = dct.get(key)\n        \n        comparison_value = m.group('value')\n        if comparison_value[0] in ('\"', \"'\") and comparison_value[-1] in ('\"', \"'\"):\n            comparison_value = comparison_value[1:-1]  # strip quotes\n        \n        if actual_value is None:\n            if m.group('op') == '!':\n                return True\n            else:\n                return False\n            \n        if isinstance(actual_value, str):\n            comparison_value = str(comparison_value)\n        else:\n            try:\n                comparison_value = int(comparison_value)\n            except ValueError:\n               try:\n                   comparison_value = float(comparison_value)\n               except ValueError:\n                   pass\n\n        return op(actual_value, comparison_value)\n    \n    raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}