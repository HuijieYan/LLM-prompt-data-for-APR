{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    import re\n    import numbers\n    def parse_filesize(s):\n        try: return int(s)\n        except:\n            s = s.lower()\n            if s.endswith('eib'):\n                return int(s[:-1]) * 1000000000000\n            if s.endswith('pib'):\n                return int(s[:-1]) * 1000000000\n            if s.endswith('tib'):\n                return int(s[:-1]) * 1000000\n            if s.endswith('gib'):\n                return int(s[:-1]) * 1000\n            if s.endswith('mib'):\n                return int(s[:-1])\n            if s.endswith('kib'):\n                return int(s[:-1]) * 0.001\n            return int(s)\n    def match_str(key, op, value):\n        try:\n            op_func = COMPARISON_OPERATORS[op]\n            actual_value = dct.get(key)\n            if actual_value is None and op in ('=', '!='):\n                return op == '!='\n            if (op == '<' and isinstance(actual_value, numbers.real) and\n                    isinstance(value, str) and value.endswith('eib')):\n                raise ValueError(f'Operator {op} does not support byte-string values!')\n            comparison_value = (int(value) if re.match(r'\\d+$', value) else\n                parse_filesize(value) if re.match(r'\\d+(?:\\.\\d+)?[KMGTPEZY]i?[Bb]?$', value.upper()) else\n                value)\n            return op_func(actual_value, comparison_value)\n        except Exception as e:\n            raise ValueError(f'Invalid filter part {filter_part}: {e}')\n    operator_rex = re.compile(r'\\s*(?P<not>!)?\\s*(?P<key>[a-z_]+)\\s*(?P<op><=|>=|!=|<|>|=|)?\\s*(?P<val>.+)')\n    m = operator_rex.fullmatch(filter_part.lower())\n    if m:\n        not_op = True if m.group('not') else False\n        key, op, value = m.group('key'), m.group('op'), m.group('val')\n        found = match_str(key, op, value)\n        return not not_op and found or not found\n    raise ValueError(f'Invalid filter part {filter_part}')",
            "import_list": [
                "import operator",
                "import re",
                "import numbers"
            ]
        }
    ]
}