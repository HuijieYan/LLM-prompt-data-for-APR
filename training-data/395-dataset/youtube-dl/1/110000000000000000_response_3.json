{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n\n    def parse_filesize(s):\n        # implementation of parse_filesize function goes here\n        pass\n\n    for op in COMPARISON_OPERATORS:\n        filter_part = filter_part.replace(op, f\" {op} \")\n\n    for op in UNARY_OPERATORS:\n        filter_part = filter_part.replace(op, f\" {op} \")\n\n    parts = re.split(' +', filter_part.strip())\n\n    if len(parts) == 1:\n        op = ''\n        key = parts[0]\n    elif len(parts) == 2:\n        op, key = parts\n    elif len(parts) == 3:\n        op, key, val = parts\n    else:\n        raise ValueError('Invalid filter part %r' % filter_part)\n    \n    if op in COMPARISON_OPERATORS:\n        op_func = COMPARISON_OPERATORS[op]\n        if val is not None:\n            try:\n                comparison_value = int(val)\n            except ValueError:\n                comparison_value = parse_filesize(val)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(val + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (val, filter_part))\n            actual_value = dct.get(key)\n            \n            if actual_value is None:\n                return bool('?' in op)\n            return op_func(actual_value, comparison_value)\n    elif op in UNARY_OPERATORS:\n        op_func = UNARY_OPERATORS[op]\n        actual_value = dct.get(key)\n        return op_func(actual_value)\n    else:\n        raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}