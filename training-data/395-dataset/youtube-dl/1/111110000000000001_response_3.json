{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part: str, dct: Dict[str, Any]) -> Any:\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n        '?': lambda x, y: x is None\n    }\n\n    operator_rex = re.compile(r'(?P<key>[a-z_]+)\\s*(?P<op>[<>=!]+)(?P<none_inclusive>\\s*\\?)?\\s*(?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?|(?P<quote>[\\'\"])(?P<quotedstrval>(?:\\\\.|[^\\\\])*?)(?P=quote)|(?P<strval>(?![0-9.])[a-z0-9A-Z]*)|\\s*$)')\n\n    m = operator_rex.match(filter_part)\n    # If no match found, continue to the next pattern\n    if not m:\n        return _match_unary(filter_part, dct)\n\n    op = COMPARISON_OPERATORS.get(m.group('op'))\n    if op is None:\n        raise ValueError(f'Invalid operator {m.group(\"op\")} in filter part {filter_part}')\n\n    key = m.group('key')\n    actual_value = dct.get(key)\n    comparison_value = m.group('quotedstrval') or m.group('strval') or m.group('intval')\n\n    if m.group(\"op\") in ('=', '!=') and actual_value is not None:\n        comparison_value = actual_value\n    try:\n        actual_value = int(actual_value)\n        comparison_value = int(comparison_value)\n    except ValueError:\n        pass\n\n    if m.group('none_inclusive') and actual_value is None:\n        return True\n\n    if actual_value is None:\n        return False\n\n    return op(actual_value, comparison_value)",
            "import_list": [
                "import operator",
                "import re",
                "from typing import Any, Dict"
            ]
        }
    ]
}