{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<op>%s)\n        \\s*(?P<key>[a-z_]+)\n        \\s*(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n        ('|\")(?:\\\\.|(?!\\2).)+?\\2\n        \\s*$\n        ''' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    \n    m = operator_rex.search(filter_part)\n    \n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n    \n        if not actual_value:\n            raise ValueError('This field does not exist')\n    \n        if m.group('intval'):\n            comparison_value = parse_filesize(m.group('intval'))\n    \n            if comparison_value is None:\n                comparison_value = parse_filesize(m.group('intval') + 'B')\n    \n            if comparison_value is None:\n                raise ValueError('Invalid integer value {} in filter part {}'.format(m.group('intval'), filter_part))\n    \n            return op(actual_value, comparison_value)\n    \n        UNARY_OPERATORS = {\n            '': lambda v: v is not None,\n            '!': lambda v: v is None,\n        }\n    \n    return 'Invalid filter part {}'.format(filter_part)"
        }
    ]
}