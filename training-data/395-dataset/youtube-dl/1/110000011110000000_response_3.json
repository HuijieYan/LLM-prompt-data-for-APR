{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import re\n    import operator\n    from typing import Any\n\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n\n    def match_str(filter_part: str, dct: Any) -> bool:\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<key>[a-z_]+)\n            \\s*(?P<op>[<>=!]{1,2})(?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)?\\s*$\n            ''')\n        m = operator_rex.search(filter_part)\n        if m:\n            key = m.group('key')\n            if m.group('intval') is not None:\n                intval = m.group('intval')\n\n                if '.' in intval or intval[-1].isdigit():\n                    comparison_value = float(intval)\n                else:\n                    comparison_value = int(re.search(r'\\d+', intval).group())\n                    if 'k' in intval.lower():\n                        comparison_value *= 1024\n                    elif 'm' in intval.lower():\n                        comparison_value *= 1024 ** 2\n                    # Add more cases for other units if needed\n\n                if m.group('op') in COMPARISON_OPERATORS.keys():\n                    op = COMPARISON_OPERATORS[m.group('op')]\n                else:\n                    raise ValueError('Invalid comparison operator in filter part %r' % filter_part)\n\n                actual_value = dct.get(key)\n                if actual_value is not None:\n                    return op(actual_value, comparison_value)\n                else:\n                    return True if m.group('intval') == '?' else False\n            else:\n                if m.group('op') in UNARY_OPERATORS.keys():\n                    op = UNARY_OPERATORS[m.group('op')]\n                    actual_value = dct.get(key)\n                    return op(actual_value)\n\n        else:\n            raise ValueError('Invalid filter party %r' % filter_part)\n\n\n    # Test cases provided\n    test_match_str()",
            "imports": [
                "import re",
                "import operator",
                "from typing import Any"
            ]
        }
    ]
}