{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    m = re.match(r'(?P<key>[a-z_]+)\\s*?(?P<op>[<>=!]=?)\\s*?(?P<quote>[\"\\']?)\\s*(?P<value>.+?)\\s*?(?P=quote)?\\s*$', filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        value = m.group('value')\n        quote = m.group('quote')\n        \n        actual_value = dct.get(key)\n        \n        if quote:  # If value is quoted\n            comparison_value = value\n        elif value.isnumeric():  # If value is numeric\n            comparison_value = int(value)\n        else:  # If value is a string\n            comparison_value = value\n        \n        if actual_value is None:\n            return op in ('=', '<=', '>=')\n        \n        comparators = {\n            '<': operator.lt,\n            '<=': operator.le,\n            '>': operator.gt,\n            '>=': operator.ge,\n            '=': operator.eq,\n            '!=': operator.ne\n        }\n        \n        return comparators[op](actual_value, comparison_value)\n    else:\n        raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}