{
    "youtube-dl": [
        {
            "bugID": 1,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2523,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    # Existing code\n\n    # ... (rest of the code) ...\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    # Check if the operation is unary NOT\n    if filter_part[0] == '!':\n        key = filter_part[1:]\n        return UNARY_OPERATORS['!'](dct.get(key))\n    else:\n        operator_rex = re.compile(r'''(?x)\\s*\n            (?P<op>%s)\\s*(?P<key>[a-z_]+)\n            \\s*$\n            ''' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n        m = operator_rex.search(filter_part)\n        if m:\n            op = UNARY_OPERATORS[m.group('op')]\n            actual_value = dct.get(m.group('key'))\n            return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": []
        }
    ]
}