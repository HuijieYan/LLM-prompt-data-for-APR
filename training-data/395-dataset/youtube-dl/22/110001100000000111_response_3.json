{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    pattern = re.compile(r'(?P<key>[a-z_]+)\\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>.+)' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = pattern.search(filter_part)\n    \n    if m:\n        key = m.group('key')\n        op = COMPARISON_OPERATORS[m.group('op')]\n        \n        value = m.group('value').strip()\n        if value.startswith('\"') and value.endswith('\"'):\n            value = value[1:-1]\n        \n        actual_value = dct.get(key)\n        \n        if actual_value is None:\n            return m.group('none_inclusive')\n        \n        if isinstance(actual_value, str):\n            comparison_value = value\n        else:\n            # Try to convert the value to int\n            try:\n                comparison_value = int(value)\n            except ValueError:\n                comparison_value = parse_filesize(value)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(value + 'B')\n                if comparison_value is None:\n                    raise ValueError('Invalid comparison value: %s' % value)\n        return op(actual_value, comparison_value)\n    \n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    pattern = re.compile(r'(?P<op>%s)\\s*(?P<key>[a-z_]+)' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = pattern.search(filter_part)\n    \n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n    \n    raise ValueError('Invalid filter part: %s' % filter_part)"
        }
    ]
}