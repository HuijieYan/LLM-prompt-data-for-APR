{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    for op in COMPARISON_OPERATORS:\n        if op in filter_part:\n            key, op_str, comparison_value = filter_part.split(op)\n            key = key.strip()\n            op_str = op_str.strip()\n            comparison_value = comparison_value.strip()\n            actual_value = dct.get(key)\n            \n            if actual_value is None:\n                return comparison_value\n            \n            if op_str == '?' and actual_value is not None:\n                return op(actual_value, comparison_value)\n            elif op_str in ('=', '!='):\n                return op(actual_value, comparison_value)\n            else:\n                raise ValueError(f'Operator {op_str} does not support string values!')\n    \n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    for op in UNARY_OPERATORS:\n        if op in filter_part:\n            op_str, key = filter_part.split(op)\n            op_str = op_str.strip()\n            key = key.strip()\n            actual_value = dct.get(key)\n            return UNARY_OPERATORS[op_str](actual_value)\n    \n    raise ValueError(f'Invalid filter part {filter_part}')",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}