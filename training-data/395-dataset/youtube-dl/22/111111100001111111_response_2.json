{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op>[><]=?|!=|=?)\n        \\s*(?P<none_inclusive>\\?)?\n        \\s*(?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)?|\n        \\s*(?P<strval>.+)\n    ''')\n    \n    m = operator_rex.search(filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        none_inclusive = m.group('none_inclusive')\n        intval = m.group('intval')\n        strval = m.group('strval')\n        \n        if strval is not None:\n            comparison_value = strval\n        else:\n            try:\n                comparison_value = int(intval)\n            except ValueError:\n                comparison_value = parse_filesize(intval)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(intval + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (intval, filter_part))\n        \n        actual_value = dct.get(key)\n        \n        if actual_value is None:\n            return none_inclusive\n        \n        if op in COMPARISON_OPERATORS:\n            return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n        elif op in UNARY_OPERATORS:\n            return UNARY_OPERATORS[op](actual_value)\n    \n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": [
                "import operator",
                "import re",
                "from collections.abc import Mapping"
            ]
        }
    ]
}