{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    actual_value = None\n    comparison_value = None\n    none_inclusive = None\n    if not filter_part:\n        raise ValueError('Invalid filter part')\n    parts = filter_part.split(None, 3)\n    operator = parts[1]\n    if parts[0] in dct:\n        actual_value = dct[parts[0]]\n    else:\n        return None\n\n    if len(parts) == 3:\n        if actual_value is not None:\n            return COMPARISON_OPERATORS[operator](actual_value, parts[2])\n\n    if len(parts) == 4:\n        if parts[3] and parts[3].startswith('?'):\n            none_inclusive = parts[3].strip('?')\n        try:\n            comparison_value = int(parts[2])\n        except ValueError:\n            pass\n        if isinstance(actual_value, str):\n            return COMPARISON_OPERATORS[operator](actual_value, parts[2])\n        return COMPARISON_OPERATORS[operator](int(actual_value), int(parts[2]))\n\n    raise ValueError('Invalid filter part')",
            "imports": []
        }
    ]
}