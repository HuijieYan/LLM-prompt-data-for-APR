{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op><=|>=|<|>|=|!=)\\s*\n        (?P<value>.+)$\n        ''')\n    \n    m = operator_rex.match(filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        comparison_value = m.group('value')\n    \n        actual_value = dct.get(key)\n        if actual_value is not None:\n            if op in ('<', '<=', '>', '>='):\n                try:\n                    comparison_value = int(comparison_value)\n                    actual_value = int(actual_value)\n                    return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n                except ValueError:\n                    raise ValueError(f'Invalid comparison value {comparison_value} for key {key}')\n            elif op in ('=', '!='):\n                return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n        else:\n            return op == '!='\n    else:\n        raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}