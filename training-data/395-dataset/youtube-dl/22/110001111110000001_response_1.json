{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op>[<>=!]+)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<quoted_val>\"[^\"]*\"|'[^']*'|[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n        \\s*$\n        ''')\n    m = operator_rex.search(filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        actual_value = dct.get(key)\n        comparison_value = m.group('quoted_val').strip(\"'\\\"\")\n        if comparison_value.isdigit():\n            comparison_value = int(comparison_value)\n        else:\n            comparison_value = parse_quoted_string(comparison_value)  # Assume parse_quoted_string is a function to handle quoted string parsing\n        if actual_value is None:\n            return m.group('none_inclusive')\n        if op == '<':\n            return operator.lt(actual_value, comparison_value)\n        elif op == '<=':\n            return operator.le(actual_value, comparison_value)\n        elif op == '>':\n            return operator.gt(actual_value, comparison_value)\n        elif op == '>=':\n            return operator.ge(actual_value, comparison_value)\n        elif op == '=':\n            return operator.eq(actual_value, comparison_value)\n        elif op == '!=':\n            return operator.ne(actual_value, comparison_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": []
        }
    ]
}