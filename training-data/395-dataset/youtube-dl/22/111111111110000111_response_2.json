{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    operator_rex = re.compile(r'''(?x)\n        (?P<key>[a-z_]+)\n        \\s*(?P<op>[<>=!]=?)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>\"[^\"]*\"|[a-zA-Z0-9.]+)? # Match either a quoted string or alphanumeric value for comparison\n        \\s*$''')\n    m = operator_rex.search(filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        none_inclusive = m.group('none_inclusive')\n        value = m.group('value')\n\n        actual_value = dct.get(key)\n\n        if value.startswith('\"') and value.endswith('\"'):\n            comparison_value = value[1:-1]  # Remove the quotes from the comparison value\n        else:\n            comparison_value = value\n\n        if actual_value is None:\n            return none_inclusive\n        else:\n            if op in ('=', '!='):\n                return actual_value == comparison_value\n            # Handle other comparison operators and types of comparisons (numeric, string, etc.) as per requirements\n            # ...\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": []
        }
    ]
}