{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    for op, func in UNARY_OPERATORS.items():\n        unary_match = re.match(rf\"\\s*{re.escape(op)}\\s*(?P<key>[a-z_]+)\\s*$\", filter_part)\n        if unary_match:\n            key = unary_match.group('key')\n            actual_value = dct.get(key)\n            return func(actual_value)\n    \n    for op, func in COMPARISON_OPERATORS.items():\n        comparison_match = re.match(rf\"\\s*(?P<key>[a-z_]+)\\s*(?P<op>{re.escape(op)})(?P<none_inclusive>\\s*\\?)?\\s*(?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\\s*$\", filter_part)\n        if comparison_match:\n            key = comparison_match.group('key')\n            val = comparison_match.group('intval')\n            actual_value = dct.get(key)\n            comparison_value = int(val) if val.isnumeric() else val\n            if actual_value is None:\n                return comparison_match.group('none_inclusive')\n            return func(actual_value, comparison_value)\n    \n    raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}