{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    m = re.match(r'(?P<key>[a-z_]+)\\s*(?P<op>{})\\s*(\\?(?P<none_inclusive>\\?))?\\s*((?P<intval>(\\d+(\\.\\d+)?|[kmgtpezy]))i?[Bb]?|(?P<strval>.+))$'.format('|'.join(map(re.escape, COMPARISON_OPERATORS.keys()))), filter_part)\n    if m:\n        key = m.group('key')\n        op = COMPARISON_OPERATORS[m.group('op')]\n        if m.group('strval'):\n            comparison_value = m.group('strval')\n        elif m.group('intval'):\n            intval = m.group('intval').rstrip('Bb').rstrip('?')\n            try:\n                comparison_value = int(intval)\n            except ValueError:\n                comparison_value = parse_filesize(intval)\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value {} in filter part {}'.format(intval, filter_part))\n        else:\n            raise ValueError('Invalid filter part {}'.format(filter_part))\n        \n        actual_value = dct.get(key)\n        if actual_value is None:\n            return m.group('none_inclusive') or False\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    m = re.match(r'(?P<op>{})(?P<key>[a-z_]+)$'.format('|'.join(map(re.escape, UNARY_OPERATORS.keys()))), filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part {}'.format(filter_part))",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}