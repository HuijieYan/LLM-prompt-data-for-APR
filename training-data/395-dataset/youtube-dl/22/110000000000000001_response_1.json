{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'\\s*(?P<key>[a-z_]+)\\s*(?P<op>[<>=!][=]?)\\s*(?P<value>[0-9.]+[kKmMgGtTpPeEzZyY]i?[Bb]?|\\S*)')\n    m = operator_rex.match(filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        value = m.group('value')\n\n        actual_value = dct.get(key)\n        if actual_value is None:\n            return op.strip('!') != '='\n\n        if value.replace('.', '').isdigit():\n            comparison_value = float(value)\n        else:\n            comparison_value = value\n\n        if isinstance(actual_value, str) and not isinstance(comparison_value, str):\n            comparison_value = str(comparison_value)\n\n        if op in COMPARISON_OPERATORS:\n            return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n        elif op == '!':\n            return actual_value is None\n        elif op == '':\n            return actual_value is not None\n        else:\n            raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import re",
                "import operator"
            ]
        }
    ]
}