{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    from youtube_dl.compat import compat_str\n    import operator\n    import re\n    from youtube_dl.compat import compat_str\n    \n    m = re.match(r'\\s*(\\w+)\\s*(>|<|>=|<=|=|!=)\\s*(\"?)([^\"]*)(\"?|[^\"\\s]*)\\s*', filter_part)\n    if m:\n        key = m.group(1)\n        op = m.group(2)\n        quoted = m.group(3) == '\"'\n        comparison_value = m.group(4)\n        \n        actual_value = dct.get(key)\n        if actual_value is None:\n            return op == '!='  # Return True only if the operation is not equal and actual value is None\n        \n        if op in ('<', '>', '<=', '>='):\n            if isinstance(actual_value, compat_str):\n                raise ValueError('Operator %s does not support string values!' % op)\n            try:\n                comparison_value = int(comparison_value)\n            except ValueError:\n                comparison_value = parse_filesize(comparison_value)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(comparison_value + 'B')\n                if comparison_value is None:\n                    raise ValueError('Invalid integer value %r in filter part %r' % (comparison_value, filter_part))\n    \n            if op == '<':\n                return actual_value < comparison_value\n            elif op == '>':\n                return actual_value > comparison_value\n            elif op == '<=':\n                return actual_value <= comparison_value\n            elif op == '>=':\n                return actual_value >= comparison_value\n        else:  # Equals or Not Equals\n            if not quoted and isinstance(actual_value, compat_str):\n                raise ValueError('Unquoted comparison value %r in filter part %r' % (comparison_value, filter_part))\n            if not quoted:\n                comparison_value = comparison_value.lower()\n                actual_value = str(actual_value).lower()\n            if op == '=':\n                return actual_value == comparison_value\n            elif op == '!=':\n                return actual_value != comparison_value\n    \n    raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}