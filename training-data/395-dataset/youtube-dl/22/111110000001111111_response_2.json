{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    m = re.match(r'^(?P<key>[a-z_]+)\\s*(?P<op>(?:<|<=|>|>=|=|!=|=\\?|!=\\?))\\s*(?P<value>.+)$', filter_part)\n    \n    if not m:\n        raise ValueError(f'Invalid filter part {filter_part}')\n\n    key = m.group('key')\n    op = m.group('op')\n    value = m.group('value')\n    actual_value = dct.get(key)\n\n    if op in ('=', '!=', '=?', '!=?'):\n        comparison_value = value\n    else:\n        try:\n            comparison_value = int(value)\n        except ValueError:\n            comparison_value = parse_filesize(value)\n            if comparison_value is None:\n                comparison_value = parse_filesize(value + 'B')\n            if comparison_value is None:\n                raise ValueError(f'Invalid integer value {value} in filter part {filter_part}')\n\n    if op == '=':\n        return actual_value == comparison_value\n    elif op == '!=':\n        return actual_value != comparison_value\n    elif op == '<':\n        return actual_value < comparison_value\n    elif op == '<=':\n        return actual_value <= comparison_value\n    elif op == '>':\n        return actual_value > comparison_value\n    elif op == '>=':\n        return actual_value >= comparison_value\n    elif op == '=?':\n        return actual_value.startswith(comparison_value)\n    elif op == '!=?':\n        return not actual_value.startswith(comparison_value)\n    else:\n        raise ValueError(f'Invalid operator {op} in filter part {filter_part}')",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}