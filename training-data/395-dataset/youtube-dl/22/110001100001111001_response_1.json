{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    parts = re.split(r'(<|<=|>|>=|=|!=)\\s*(.*?)\\s*$', filter_part)\n\n    if len(parts) != 4:\n        raise ValueError('Invalid filter part %r' % filter_part)\n\n    key = parts[0]\n    op = parts[1]\n    comparison_value = parts[2]\n\n    actual_value = dct.get(key)\n    if actual_value is None:\n        return bool(op)  # Return True for existence checks\n\n    try:\n        comparison_value = int(comparison_value)\n    except ValueError:\n        # If comparison_value is not an int, treat it as a string\n        comparison_value = comparison_value\n\n    if op == '<':\n        return actual_value < comparison_value\n    elif op == '<=':\n        return actual_value <= comparison_value\n    elif op == '>':\n        return actual_value > comparison_value\n    elif op == '>=':\n        return actual_value >= comparison_value\n    elif op == '=':\n        return actual_value == comparison_value\n    elif op == '!=':\n        return actual_value != comparison_value\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}