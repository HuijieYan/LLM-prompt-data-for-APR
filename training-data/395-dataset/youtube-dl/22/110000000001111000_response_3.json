{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import re\n    import operator\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op>[<>]=?|=?|!=)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?:\n            (?P<intval>\\d+|\\d+(?:\\.\\d{3})*|\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?(?:K|M|G|T|P|E|Z|Y)i?B?)|\n            (?P<strval>(?![0-9.])[a-zA-Z0-9]*)\n        )\n        \\s*$\n        ''')\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        if (m.group('strval') is not None or\n            # If the original field is a string and matching comparisonvalue is\n            # a number we should respect the origin of the original field\n            # and process comparison value as a string (see\n            # https://github.com/rg3/youtube-dl/issues/11082).\n            actual_value is not None and m.group('intval') is not None and\n                isinstance(actual_value, str)):\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    f'Operator {m.group(\"op\")} does not support string values!')\n            comparison_value = m.group('strval') or m.group('intval')\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = int(m.group('intval').replace(',', ''))\n                powers = {\"K\": 10**3, \"M\": 10**6, \"G\": 10**9, \"T\": 10**12, \"P\": 10**15, \"E\": 10**18, \"Z\": 10**21, \"Y\": 10**24}\n                match = re.search(r'[KMGTPZYi]?B', m.group('intval'))\n                if match:\n                    suffix = match.group()\n                    if suffix in powers:\n                        comparison_value *= powers[suffix]\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n    \n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<op>[!])\\s*(?P<key>[a-z_]+)\n        \\s*$\n        ''')\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n    \n    raise ValueError(f'Invalid filter part {filter_part}')"
        }
    ]
}