{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    m = re.match(r'\\s*(\\w+)\\s*(<=|>=|<|>|=|!=)\\s*([0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?|\\w+)\\s*', filter_part)\n    if m:\n        key = m.group(1)\n        op = m.group(2)\n        value = m.group(3)\n\n        actual_value = dct.get(key)\n        if actual_value is None:\n            return None\n\n        if isinstance(actual_value, str) and value.isdigit():\n            # If the original field is a string and matching comparison value is a number,\n            # process comparison value as a string\n            comparison_value = str(value)\n        else:\n            try:\n                comparison_value = int(value)\n            except ValueError:\n                comparison_value = parse_filesize(value)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(value + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (value, filter_part))\n\n        return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": [
                "import operator"
            ]
        }
    ]
}