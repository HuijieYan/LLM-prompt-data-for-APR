{
    "youtube-dl": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2372,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import re\n    import operator\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    try:\n        m = re.match(r\"\"\"(?x)\n            \\s*(?P<key>[a-z_]+)\n            \\s*(?P<op><=|>=|<|>|=|!=)(?P<none_inclusive>\\s*\\?)?\\s*\n            (?P<comparison_value>\\\".*?\\\"|'.*?'|[^'\" ]+)\"\"\", filter_part)\n        if m:\n            op = COMPARISON_OPERATORS[m.group('op')]\n            actual_value = dct.get(m.group('key'))\n            comparison_value = m.group('comparison_value')\n            comparison_value = comparison_value.strip('\"').strip(\"'\")  # remove quotes\n            if comparison_value.isdigit():\n                comparison_value = int(comparison_value)\n            elif comparison_value[-2:].lower() in ['ki', 'mi', 'gi', 'ti', 'pi', 'ei', 'zi', 'yi']:\n                multiplier = 1024 ** ('kmgtpezy'.index(comparison_value[-2].lower()) + 1)\n                comparison_value = int(comparison_value[:-2]) * multiplier\n            if actual_value is None:\n                return m.group('none_inclusive')\n            return op(actual_value, comparison_value)\n        else:\n            UNARY_OPERATORS = {\n                '': lambda v: v is not None,\n                '!': lambda v: v is None,\n            }\n            m = re.match(r'''(?x)\\s*\n                (?P<op>!?)\\s*(?P<key>[a-z_]+)\\s*$\n                ''', filter_part)\n            if m:\n                op = UNARY_OPERATORS[m.group('op')]\n                actual_value = dct.get(m.group('key'))\n                return op(actual_value)\n            else:\n                raise ValueError('Invalid filter part %r' % filter_part)\n    except Exception as e:\n        raise ValueError('Invalid filter part %r' % filter_part) from e"
        }
    ]
}