{
    "youtube-dl": [
        {
            "bugID": 23,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2105,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        elif v.startswith('/*') or v == ',':\n            return \"\"\n        \n        v = v.strip()  # remove extra spaces\n        \n        if v[0] in (\"'\", '\"'):\n            v = v[1:-1]  # remove quotes\n            v = v.replace('\\\\\"', '\"').replace(\"\\\\'\", \"'\").replace('\\\\/', '/').replace('\\\\b', '\\b').replace('\\\\f', '\\f').replace('\\\\n', '\\n').replace('\\\\r', '\\r').replace('\\\\t', '\\t')  # replace escape characters\n            return '\"%s\"' % v\n        \n        if re.match(r'^([0-9]+)\\s*:?$', v):  # check for integer\n            return '%s' % v\n        elif re.match(r'^0x[0-9a-fA-F]+\\s*:?$', v):  # check for hex integer\n            return '%s' % v\n        elif re.match(r'^0+[0-7]+\\s*:?$', v):  # check for octal integer\n            return '%s' % v\n        else:\n            return '\"%s\"' % v\n\n    return re.sub(r'''(?sx)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\['\"nurtbfx/]))*[^\"\\\\]*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\['\"nurtbfx/]))*[^'\\\\]*'|\n        /\\*.*?\\*/|,(?=\\s*[\\]}])|\n        [a-zA-Z_][.a-zA-Z_0-9]*|\n        \\b(?:0[xX][0-9a-fA-F]+|0+[0-7]+)(?:\\s*:)?|\n        [0-9]+(?=\\s*:)\n        ''', fix_kv, code)",
            "import_list": [
                "import re"
            ]
        }
    ]
}