{
    "youtube-dl": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n    def _parse_filter(tokens):\n        filter_parts = []\n        for type, string, start, _, _ in tokens:\n            if type == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n    \n    def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n        selectors = []\n        current_selector = None\n        # implementation ...\n        # ...\n        return selectors\n    \n    def _build_selector_function(selector):\n        # implementation ...\n        # ...\n        return final_selector\n    \n    class TokenIterator(object):\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n\n        def restore_last_token(self):\n            self.counter -= 1\n    \n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise SyntaxError('Missing closing/opening brackets or parenthesis')\n    \n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)",
            "import_list": [
                "import io",
                "import tokenize",
                "import collections",
                "import itertools",
                "import compat_tokenize as compat_tokenize_tokenize"
            ]
        }
    ]
}