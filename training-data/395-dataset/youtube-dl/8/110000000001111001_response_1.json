{
    "youtube-dl": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    import collections\n    import io\n    import tokenize\n    import itertools\n\n    def build_syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        return SyntaxError(message)\n\n    class TokenIterator:\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n\n        next = __next__\n\n        def restore_last_token(self):\n            self.counter -= 1\n\n    # Add your implementation for _parse_filter function here\n    def _parse_filter(tokens):\n        # Implementation goes here\n        pass\n\n    # Add your implementation for _parse_format_selection function here\n    def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n        # Implementation goes here\n        pass\n\n    # Add your implementation for _build_selector_function function here\n    def _build_selector_function(selector):\n        # Implementation goes here\n        pass\n\n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        # Need to change this line as the function \"compat_tokenize_tokenize\" is not defined in the given code\n        tokens = list(tokenize.tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise build_syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n    # Add your implementation for _merge function here\n    def _merge(formats_info):\n        # Implementation goes here\n        pass\n\n    # Add your logic to parse the token and construct the selectors here\n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n\n    return _build_selector_function(parsed_selector)",
            "imports": [
                "import collections",
                "import io",
                "import tokenize",
                "import itertools"
            ]
        }
    ]
}