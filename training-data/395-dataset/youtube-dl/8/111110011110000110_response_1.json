{
    "youtube-dl": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    from collections import namedtuple\n    import io\n    import itertools\n    import tokenize\n    Token = namedtuple('Token', ['type', 'string', 'start', 'end', 'line'])\n    \n    def syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        return SyntaxError(message)\n    \n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    \n    FormatSelector = namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n    \n    def _build_selector_function(selector):\n        # Function definition omitted for brevity...\n        pass\n        \n    def _parse_filter(tokens):\n        # Function definition omitted for brevity...\n        pass\n    \n    def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n        # Function definition omitted for brevity...\n        pass\n    \n    def final_selector(formats):\n        # Function definition omitted for brevity...\n        pass\n    \n    def _merge(formats_info):\n        # Function definition omitted for brevity...\n        pass\n    \n    def _parse(format_spec):\n        # Function definition omitted for brevity...\n        pass\n    \n    def TokenIterator(tokens):\n        # Function definition omitted for brevity...\n        pass\n    \n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(tokenize.tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n    \n    parsed_selector = _parse(TokenIterator(tokens))\n    return _build_selector_function(parsed_selector)"
        }
    ]
}