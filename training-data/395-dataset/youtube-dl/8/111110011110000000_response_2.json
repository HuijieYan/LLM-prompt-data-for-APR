{
    "youtube-dl": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    import io\n    import itertools\n    import tokenize\n    import collections\n    arguments = {'bestvideo': '137', 'bestaudio': '141', 'worstvideo': '138', 'worstaudio': '142'}\n    selectors = format_spec.split('/')\n    parsed_selectors = []\n    \n    for selector in selectors:\n        tokens = selector.split(',')\n        selector_list = []\n        for token in tokens:\n            if '[' in token:\n                query, argument = token.split('[')\n                argument = argument.replace(']', '')\n                if argument in arguments:\n                    argument = arguments[argument]\n                selector_list.append({\"type\": \"SINGLE\", \"query\": query, \"argument\": argument})\n            else:\n                if token in arguments:\n                    token = arguments[token]\n                selector_list.append({\"type\": \"SINGLE\", \"query\": token, \"argument\": None})\n    \n        parsed_selectors.append(selector_list)\n    \n    def _build_selector_function(selector):\n        def selector_function(formats):\n            selected_formats = []\n            for format in formats:\n                for sub_selector in selector:\n                    if sub_selector['type'] == \"SINGLE\":\n                        format_id = format.get('format_id')\n                        url = format.get('url')\n                        if format_id and (sub_selector['query'] == 'best' or sub_selector['query'] == format_id or sub_selector['query'] in url):\n                            if sub_selector['argument'] and sub_selector['argument'] in url:\n                                selected_formats.append(format)\n                                break\n                            elif not sub_selector['argument']:\n                                selected_formats.append(format)\n                                break\n    \n            return selected_formats\n    \n        return selector_function\n    \n    if len(parsed_selectors) == 1:\n        return _build_selector_function(parsed_selectors[0])\n    else:\n        selectors = [_build_selector_function(selector) for selector in parsed_selectors]\n    \n        def selector_function(formats):\n            for f in selectors:\n                selected_formats = f(formats)\n                if selected_formats:\n                    return selected_formats\n    \n        return selector_function"
        }
    ]
}