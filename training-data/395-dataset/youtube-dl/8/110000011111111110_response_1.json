{
    "youtube-dl": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n    def syntax_error(note, start):\n        message = (\n            'Invalid format specification: '\n            '{0}\\n\\t{1}\\n\\t{2}^'.format(note, format_spec, ' ' * start[1]))\n        return SyntaxError(message)\n\n    PICKFIRST = 'PICKFIRST'\n    MERGE = 'MERGE'\n    SINGLE = 'SINGLE'\n    GROUP = 'GROUP'\n    FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n\n    def _parse_filter(tokens):\n        filter_parts = []\n        for type, string, start, _, _ in tokens:\n            if type == tokenize.OP and string == ']':\n                return ''.join(filter_parts)\n            else:\n                filter_parts.append(string)\n\n    def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n        selectors = []\n        current_selector = None\n        for type, string, start, _, _ in tokens:\n            if type == getattr(tokenize, 'ENCODING', None):\n                continue\n            elif type in [tokenize.NAME, tokenize.NUMBER]:\n                current_selector = FormatSelector(SINGLE, string, [])\n            elif type == tokenize.OP:\n                if string == ')':\n                    if not inside_group:\n                        tokens.restore_last_token()\n                    break\n                elif inside_merge and string in ['/', ',']:\n                    tokens.restore_last_token()\n                    break\n                elif inside_choice and string == ',':\n                    tokens.restore_last_token()\n                    break\n                elif string == ',':\n                    selectors.append(current_selector)\n                    current_selector = None\n                elif string == '/':\n                    first_choice = current_selector\n                    second_choice = _parse_format_selection(tokens, inside_choice=True)\n                    current_selector = None\n                    selectors.append(FormatSelector(PICKFIRST, (first_choice, second_choice), []))\n                elif string == '[':\n                    if not current_selector:\n                        current_selector = FormatSelector(SINGLE, 'best', [])\n                    format_filter = _parse_filter(tokens)\n                    current_selector.filters.append(format_filter)\n                elif string == '(':\n                    if current_selector:\n                        raise syntax_error('Unexpected \"(\"', start)\n                    group = _parse_format_selection(tokens, inside_group=True)\n                    current_selector = FormatSelector(GROUP, group, [])\n                elif string == '+':\n                    video_selector = current_selector\n                    audio_selector = _parse_format_selection(tokens, inside_merge=True)\n                    current_selector = FormatSelector(MERGE, (video_selector, audio_selector), [])\n                else:\n                    raise syntax_error('Operator not recognized: \"{0}\"'.format(string), start)\n            elif type == tokenize.ENDMARKER:\n                break\n        if current_selector:\n            selectors.append(current_selector)\n        return selectors\n\n    def _build_selector_function(selector):\n        if isinstance(selector, list):\n            fs = [_build_selector_function(s) for s in selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    for format in f(formats):\n                        yield format\n            return selector_function\n        elif selector.type == GROUP:\n            selector_function = _build_selector_function(selector.selector)\n        elif selector.type == PICKFIRST:\n            fs = [_build_selector_function(s) for s in selector.selector]\n\n            def selector_function(formats):\n                for f in fs:\n                    picked_formats = list(f(formats))\n                    if picked_formats:\n                        return picked_formats\n                return []\n        elif selector.type == SINGLE:\n           ...\n        elif selector.type == MERGE:\n           ...\n        filters = [self._build_format_filter(f) for f in selector.filters]\n\n        def final_selector(formats):\n            for _filter in filters:\n                formats = list(filter(_filter, formats))\n            return selector_function(formats)\n        return final_selector\n\n    stream = io.BytesIO(format_spec.encode('utf-8'))\n    try:\n        tokens = list(compat_tokenize_tokenize(stream.readline))\n    except tokenize.TokenError:\n        raise syntax_error('Missing closing/opening brackets or parenthesis', (0, len(format_spec)))\n\n    class TokenIterator(object):\n        def __init__(self, tokens):\n            self.tokens = tokens\n            self.counter = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.counter >= len(self.tokens):\n                raise StopIteration()\n            value = self.tokens[self.counter]\n            self.counter += 1\n            return value\n\n        next = __next__\n\n        def restore_last_token(self):\n            self.counter -= 1\n\n    parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n    return _build_selector_function(parsed_selector)",
            "import_list": []
        }
    ]
}