{
    "youtube-dl": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 913,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def build_format_selector(self, format_spec):\n        ...\n\n        # Deprecated and custom here, follow the actual usage instead \n        Pickfirst = 'PICKFIRST'\n        Merge = 'MERGE'\n        Single = 'SINGLE'\n        Group = 'GROUP'\n        FormatSelector = collections.namedtuple('FormatSelector', ['type', 'selector', 'filters'])\n        \n        def _parse_filter(tokens):\n            ...\n            \n        def _parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False):\n            ...\n\n        def _build_selector_function(selector):\n            ...\n        \n        def build_selector_function(formats):\n            ...\n            \n        class TokenIterator(object):\n            ...\n            \n        stream = io.BytesIO(format_spec.encode('utf-8'))\n        try:\n            tokens = list(compat_tokenize_tokenize(stream.readline))\n        except tokenize.TokenError:\n            ...\n\n        parsed_selector = _parse_format_selection(iter(TokenIterator(tokens)))\n        return _build_selector_function(parsed_selector)",
            "import_list": [
                "import io",
                "import tokenize",
                "import itertools",
                "import collections"
            ]
        }
    ]
}