{
    "1.1.1": "def unified_timestamp(date_str, day_first=True):\n    if date_str is None:\n        return None\n\n    date_str = date_str.replace(',', ' ')\n\n    pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)\n    timezone, date_str = extract_timezone(date_str)\n\n    # Remove AM/PM + timezone\n    date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n\n    for expression in date_formats(day_first):\n        try:\n            dt = datetime.datetime.strptime(date_str, expression) - timezone + pm_delta\n            return calendar.timegm(dt.timetuple())\n        except ValueError:\n            pass\n    timetuple = email.utils.parsedate_tz(date_str)\n    if timetuple:\n        return calendar.timegm(timetuple.timetuple())\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "youtube_dl/utils.py",
    "1.3.2": [
        "extract_timezone(date_str)",
        "date_formats(day_first=True)"
    ],
    "1.4.1": [
        "    def test_unified_timestamps(self):\n        self.assertEqual(unified_timestamp('December 21, 2010'), 1292889600)\n        self.assertEqual(unified_timestamp('8/7/2009'), 1247011200)\n        self.assertEqual(unified_timestamp('Dec 14, 2012'), 1355443200)\n        self.assertEqual(unified_timestamp('2012/10/11 01:56:38 +0000'), 1349920598)\n        self.assertEqual(unified_timestamp('1968 12 10'), -33436800)\n        self.assertEqual(unified_timestamp('1968-12-10'), -33436800)\n        self.assertEqual(unified_timestamp('28/01/2014 21:00:00 +0100'), 1390939200)\n        self.assertEqual(\n            unified_timestamp('11/26/2014 11:30:00 AM PST', day_first=False),\n            1417001400)\n        self.assertEqual(\n            unified_timestamp('2/2/2015 6:47:40 PM', day_first=False),\n            1422902860)\n        self.assertEqual(unified_timestamp('Feb 14th 2016 5:45PM'), 1455471900)\n        self.assertEqual(unified_timestamp('25-09-2014'), 1411603200)\n        self.assertEqual(unified_timestamp('27.02.2016 17:30'), 1456594200)\n        self.assertEqual(unified_timestamp('UNKNOWN DATE FORMAT'), None)\n        self.assertEqual(unified_timestamp('May 16, 2016 11:15 PM'), 1463440500)"
    ],
    "1.4.2": [
        "test/test_utils.py"
    ],
    "2.1.1": [
        [
            "E           AttributeError: 'tuple' object has no attribute 'timetuple'"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_utils.TestUtil testMethod=test_unified_timestamps>\n\n    def test_unified_timestamps(self):\n        self.assertEqual(unified_timestamp('December 21, 2010'), 1292889600)\n        self.assertEqual(unified_timestamp('8/7/2009'), 1247011200)\n        self.assertEqual(unified_timestamp('Dec 14, 2012'), 1355443200)\n        self.assertEqual(unified_timestamp('2012/10/11 01:56:38 +0000'), 1349920598)\n        self.assertEqual(unified_timestamp('1968 12 10'), -33436800)\n        self.assertEqual(unified_timestamp('1968-12-10'), -33436800)\n        self.assertEqual(unified_timestamp('28/01/2014 21:00:00 +0100'), 1390939200)\n        self.assertEqual(\n            unified_timestamp('11/26/2014 11:30:00 AM PST', day_first=False),\n            1417001400)\n        self.assertEqual(\n            unified_timestamp('2/2/2015 6:47:40 PM', day_first=False),\n            1422902860)\n        self.assertEqual(unified_timestamp('Feb 14th 2016 5:45PM'), 1455471900)\n        self.assertEqual(unified_timestamp('25-09-2014'), 1411603200)\n        self.assertEqual(unified_timestamp('27.02.2016 17:30'), 1456594200)\n        self.assertEqual(unified_timestamp('UNKNOWN DATE FORMAT'), None)\n>       self.assertEqual(unified_timestamp('May 16, 2016 11:15 PM'), 1463440500)\n\ntest/test_utils.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndate_str = 'May 16  2016 11:15', day_first = True\n\n    def unified_timestamp(date_str, day_first=True):\n        if date_str is None:\n            return None\n    \n        date_str = date_str.replace(',', ' ')\n    \n        pm_delta = datetime.timedelta(hours=12 if re.search(r'(?i)PM', date_str) else 0)\n        timezone, date_str = extract_timezone(date_str)\n    \n        # Remove AM/PM + timezone\n        date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n    \n        for expression in date_formats(day_first):\n            try:\n                dt = datetime.datetime.strptime(date_str, expression) - timezone + pm_delta\n                return calendar.timegm(dt.timetuple())\n            except ValueError:\n                pass\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n>           return calendar.timegm(timetuple.timetuple())",
            "\nyoutube_dl/utils.py:1118: AttributeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "date_str": "'December 21, 2010'",
                "day_first": "True"
            },
            {
                "date_str": "'December 21  2010'",
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%B %d %Y'",
                "dt": "datetime.datetime(2010, 12, 21, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'8/7/2009'",
                "day_first": "True"
            },
            {
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d/%m/%Y'",
                "dt": "datetime.datetime(2009, 7, 8, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'Dec 14, 2012'",
                "day_first": "True"
            },
            {
                "date_str": "'Dec 14  2012'",
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%b %d %Y'",
                "dt": "datetime.datetime(2012, 12, 14, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'2012/10/11 01:56:38 +0000'",
                "day_first": "True"
            },
            {
                "date_str": "'2012/10/11 01:56:38'",
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%Y/%m/%d %H:%M:%S'",
                "dt": "datetime.datetime(2012, 10, 11, 1, 56, 38)"
            }
        ],
        [
            {
                "date_str": "'1968 12 10'",
                "day_first": "True"
            },
            {
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%Y %m %d'",
                "dt": "datetime.datetime(1968, 12, 10, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'1968-12-10'",
                "day_first": "True"
            },
            {
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%Y-%m-%d'",
                "dt": "datetime.datetime(1968, 12, 10, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'28/01/2014 21:00:00 +0100'",
                "day_first": "True"
            },
            {
                "date_str": "'28/01/2014 21:00:00'",
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(seconds=3600)",
                "expression": "'%d/%m/%Y %H:%M:%S'",
                "dt": "datetime.datetime(2014, 1, 28, 20, 0)"
            }
        ],
        [
            {
                "date_str": "'11/26/2014 11:30:00 AM PST'",
                "day_first": "False"
            },
            {
                "date_str": "'11/26/2014 11:30:00'",
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%m/%d/%Y %H:%M:%S'",
                "dt": "datetime.datetime(2014, 11, 26, 11, 30)"
            }
        ],
        [
            {
                "date_str": "'2/2/2015 6:47:40 PM'",
                "day_first": "False"
            },
            {
                "date_str": "'2/2/2015 6:47:40'",
                "pm_delta": "datetime.timedelta(seconds=43200)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%m/%d/%Y %H:%M:%S'",
                "dt": "datetime.datetime(2015, 2, 2, 18, 47, 40)"
            }
        ],
        [
            {
                "date_str": "'Feb 14th 2016 5:45PM'",
                "day_first": "True"
            },
            {
                "date_str": "'Feb 14th 2016 5:45'",
                "pm_delta": "datetime.timedelta(seconds=43200)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%b %dth %Y %I:%M'",
                "dt": "datetime.datetime(2016, 2, 14, 17, 45)"
            }
        ],
        [
            {
                "date_str": "'25-09-2014'",
                "day_first": "True"
            },
            {
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d-%m-%Y'",
                "dt": "datetime.datetime(2014, 9, 25, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'27.02.2016 17:30'",
                "day_first": "True"
            },
            {
                "pm_delta": "datetime.timedelta(0)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d.%m.%Y %H:%M'",
                "dt": "datetime.datetime(2016, 2, 27, 17, 30)"
            }
        ],
        [
            {
                "date_str": "'May 16, 2016 11:15 PM'",
                "day_first": "True"
            },
            {
                "date_str": "'May 16  2016 11:15'",
                "pm_delta": "datetime.timedelta(seconds=43200)",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d/%m/%Y %H:%M:%S'",
                "timetuple": "(2016, 5, 16, 11, 15, 0, 0, 1, -1, 0)"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "timedelta",
                "timezone": "timedelta",
                "expression": "str",
                "timetuple": "tuple"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "date_str": "'December 21, 2010'",
                "day_first": "True"
            },
            {
                "date_str": "'December 21  2010'",
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%B %d %Y'",
                "dt": "datetime.datetime(2010, 12, 21, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'8/7/2009'",
                "day_first": "True"
            },
            {
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d/%m/%Y'",
                "dt": "datetime.datetime(2009, 7, 8, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'Dec 14, 2012'",
                "day_first": "True"
            },
            {
                "date_str": "'Dec 14  2012'",
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%b %d %Y'",
                "dt": "datetime.datetime(2012, 12, 14, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'2012/10/11 01:56:38 +0000'",
                "day_first": "True"
            },
            {
                "date_str": "'2012/10/11 01:56:38'",
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%Y/%m/%d %H:%M:%S'",
                "dt": "datetime.datetime(2012, 10, 11, 1, 56, 38)"
            }
        ],
        [
            {
                "date_str": "'1968 12 10'",
                "day_first": "True"
            },
            {
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%Y %m %d'",
                "dt": "datetime.datetime(1968, 12, 10, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'1968-12-10'",
                "day_first": "True"
            },
            {
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%Y-%m-%d'",
                "dt": "datetime.datetime(1968, 12, 10, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'28/01/2014 21:00:00 +0100'",
                "day_first": "True"
            },
            {
                "date_str": "'28/01/2014 21:00:00'",
                "pm_delta": "0",
                "timezone": "datetime.timedelta(seconds=3600)",
                "expression": "'%d/%m/%Y %H:%M:%S'",
                "dt": "datetime.datetime(2014, 1, 28, 20, 0)"
            }
        ],
        [
            {
                "date_str": "'11/26/2014 11:30:00 AM PST'",
                "day_first": "False"
            },
            {
                "date_str": "'11/26/2014 11:30:00'",
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%m/%d/%Y %H:%M:%S'",
                "dt": "datetime.datetime(2014, 11, 26, 11, 30)"
            }
        ],
        [
            {
                "date_str": "'2/2/2015 6:47:40 PM'",
                "day_first": "False"
            },
            {
                "date_str": "'2/2/2015 6:47:40'",
                "pm_delta": "12",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%m/%d/%Y %H:%M:%S'",
                "dt": "datetime.datetime(2015, 2, 2, 18, 47, 40)"
            }
        ],
        [
            {
                "date_str": "'Feb 14th 2016 5:45PM'",
                "day_first": "True"
            },
            {
                "date_str": "'Feb 14th 2016 5:45'",
                "pm_delta": "12",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%b %dth %Y %I:%M'",
                "dt": "datetime.datetime(2016, 2, 14, 17, 45)"
            }
        ],
        [
            {
                "date_str": "'25-09-2014'",
                "day_first": "True"
            },
            {
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d-%m-%Y'",
                "dt": "datetime.datetime(2014, 9, 25, 0, 0)"
            }
        ],
        [
            {
                "date_str": "'27.02.2016 17:30'",
                "day_first": "True"
            },
            {
                "pm_delta": "0",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d.%m.%Y %H:%M'",
                "dt": "datetime.datetime(2016, 2, 27, 17, 30)"
            }
        ],
        [
            {
                "date_str": "'May 16, 2016 11:15 PM'",
                "day_first": "True"
            },
            {
                "date_str": "'May 16  2016 11:15'",
                "pm_delta": "12",
                "timezone": "datetime.timedelta(0)",
                "expression": "'%d/%m/%Y %H:%M:%S'",
                "timetuple": "(2016, 5, 16, 11, 15, 0, 0, 1, -1, 0)"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "dt": "datetime"
            }
        ],
        [
            {
                "date_str": "str",
                "day_first": "bool"
            },
            {
                "date_str": "str",
                "pm_delta": "int",
                "timezone": "timedelta",
                "expression": "str",
                "timetuple": "tuple"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}