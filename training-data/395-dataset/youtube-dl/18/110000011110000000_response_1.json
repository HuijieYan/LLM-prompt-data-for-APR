{
    "youtube-dl": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 820,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    result_type = ie_result.get('_type', 'video')\n\n    if result_type in ('url', 'url_transparent'):\n        ie_result['url'] = sanitize_url(ie_result['url'])\n        extract_flat = self.params.get('extract_flat', False)\n        if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n                extract_flat is True):\n            if self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n\n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    elif result_type == 'url':\n        return self.extract_info(ie_result['url'],\n                                 download,\n                                 ie_key=ie_result.get('ie_key'),\n                                 extra_info=extra_info)\n    elif result_type == 'url_transparent':\n        info = self.extract_info(\n            ie_result['url'], ie_key=ie_result.get('ie_key'),\n            extra_info=extra_info, download=False, process=False)\n\n        if not info:\n            return info\n\n        force_properties = dict(\n            (k, v) for k, v in ie_result.items() if v is not None)\n        for f in ('_type', 'url', 'ie_key'):\n            if f in force_properties:\n                del force_properties[f]\n        new_result = info.copy()\n        new_result.update(force_properties)\n\n        if new_result.get('_type') == 'url':\n            new_result['_type'] = 'url_transparent'\n\n        return self.process_ie_result(\n            new_result, download=download, extra_info=extra_info)\n    elif result_type in ('playlist', 'multi_video'):\n        playlist = ie_result.get('title') or ie_result.get('id')\n        self.to_screen('[download] Downloading playlist: %s' % playlist)\n\n        playlist_results = []\n\n        playliststart = self.params.get('playliststart', 1) - 1\n        playlistend = self.params.get('playlistend')\n        if playlistend == -1:\n            playlistend = None\n\n        playlistitems_str = self.params.get('playlist_items')\n        playlistitems = None\n        if playlistitems_str is not None:\n            def iter_playlistitems(format):\n                for string_segment in format.split(','):\n                    if '-' in string_segment:\n                        start, end = string_segment.split('-')\n                        for item in range(int(start), int(end) + 1):\n                            yield int(item)\n                    else:\n                        yield int(string_segment)\n            playlistitems = iter_playlistitems(playlistitems_str)\n\n        ie_entries = ie_result['entries']\n        if isinstance(ie_entries, list):\n            n_all_entries = len(ie_entries)\n            if playlistitems:\n                entries = [\n                    ie_entries[i - 1] for i in playlistitems\n                    if -n_all_entries <= i - 1 < n_all_entries]\n            else:\n                entries = ie_entries[playliststart:playlistend]\n            n_entries = len(entries)\n            self.to_screen(\n                '[%s] playlist %s: Collected %d video ids (downloading %d of them)' %\n                (ie_result['extractor'], playlist, n_all_entries, n_entries))\n        elif isinstance(ie_entries, PagedList):\n            if playlistitems:\n                entries = []\n                for item in playlistitems:\n                    entries.extend(ie_entries.getslice(\n                        item - 1, item\n                    ))\n            else:\n                entries = ie_entries.getslice(\n                    playliststart, playlistend)\n            n_entries = len(entries)\n            self.to_screen(\n                '[%s] playlist %s: Downloading %d videos' %\n                (ie_result['extractor'], playlist, n_entries))\n        else:\n            if playlistitems:\n                entry_list = list(ie_entries)\n                entries = [entry_list[i - 1] for i in playlistitems]\n            else:\n                entries = list(itertools.islice(\n                    ie_entries, playliststart, playlistend))\n            n_entries = len(entries)\n            self.to_screen(\n                '[%s] playlist %s: Downloading %d videos' %\n                (ie_result['extractor'], playlist, n_entries))\n\n        if self.params.get('playlistreverse', False):\n            entries = entries[::-1]\n\n        if self.params.get('playlistrandom', False):\n            random.shuffle(entries)\n\n        x_forwarded_for = ie_result.get('__x_forwarded_for_ip')\n\n        for i, entry in enumerate(entries, 1):\n            self.to_screen('[download] Downloading video %s of %s' % (i, n_entries))\n            if x_forwarded_for:\n                entry['__x_forwarded_for_ip'] = x_forwarded_for\n            extra = {\n                'n_entries': n_entries,\n                'playlist': playlist,\n                'playlist_id': ie_result.get('id'),\n                'playlist_title': ie_result.get('title'),\n                'playlist_index': i + playliststart,\n                'extractor': ie_result['extractor'],\n                'webpage_url': ie_result['webpage_url'],\n                'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                'extractor_key': ie_result['extractor_key'],\n            }\n\n            reason = self._match_entry(entry, incomplete=True)\n            if reason is not None:\n                self.to_screen('[download] ' + reason)\n                continue\n\n            entry_result = self.process_ie_result(entry,\n                                                  download=download,\n                                                  extra_info=extra)\n            playlist_results.append(entry_result)\n        ie_result['entries'] = playlist_results\n        self.to_screen('[download] Finished downloading playlist: %s' % playlist)\n        return ie_result\n    elif result_type == 'compat_list':\n        self.report_warning(\n            'Extractor %s returned a compat_list result. '\n            'It needs to be updated.' % ie_result.get('extractor'))\n\n        def _fixup(r):\n            self.add_extra_info(\n                r,\n                {\n                    'extractor': ie_result['extractor'],\n                    'webpage_url': ie_result['webpage_url'],\n                    'webpage_url_basename': url_basename(ie_result['webpage_url']),\n                    'extractor_key': ie_result['extractor_key'],\n                }\n            )\n            return r\n        ie_result['entries'] = [\n            self.process_ie_result(_fixup(r), download, extra_info)\n            for r in ie_result['entries']\n        ]\n        return ie_result",
            "imports": []
        }
    ]
}