{
    "youtube-dl": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 820,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def process_ie_result(self, ie_result, download=True, extra_info={}):\n        result_type = ie_result.get('_type', 'video')\n\n        if result_type in ('url', 'url_transparent'):\n            ie_result['url'] = sanitize_url(ie_result['url'])\n            extract_flat = self.params.get('extract_flat', False)\n            if (\n                (extract_flat == 'in_playlist' and 'playlist' in extra_info)\n                or extract_flat is True\n            ):\n                if self.params.get('forcejson', False):\n                    self.to_stdout(json.dumps(ie_result))\n                return ie_result\n\n        if result_type == 'video':\n            self.add_extra_info(ie_result, extra_info)\n            return self.process_video_result(ie_result, download=download)\n        elif result_type == 'url':\n            return self.extract_info(\n                ie_result['url'],\n                download,\n                ie_key=ie_result.get('ie_key'),\n                extra_info=extra_info,\n            )\n        elif result_type == 'url_transparent':\n            info = self.extract_info(\n                ie_result['url'],\n                ie_key=ie_result.get('ie_key'),\n                extra_info=extra_info,\n                download=False,\n                process=False,\n            )\n\n            if not info:\n                return info\n\n            force_properties = {k: v for k, v in ie_result.items() if v is not None and k not in ('_type', 'url', 'ie_key')}\n            new_result = info.copy()\n            new_result.update(force_properties)\n            if new_result.get('_type') == 'url':\n                new_result['_type'] = 'url_transparent'\n            return self.process_ie_result(\n                new_result, download=download, extra_info=extra_info\n            )",
            "imports": []
        }
    ]
}