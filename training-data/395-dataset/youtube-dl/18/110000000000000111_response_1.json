{
    "youtube-dl": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 820,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    result_type = ie_result.get('_type', 'video')\n\n    # Handle video type results\n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        if download:\n            self.download_video(ie_result)\n        return ie_result\n\n    # Handle url type results\n    elif result_type in ('url', 'url_transparent'):\n        self.add_extra_info(ie_result, extra_info)\n        if download:\n            self.download_url(ie_result)\n        return ie_result\n\n    # Handle playlist type results\n    elif result_type in ('playlist', 'multi_video'):\n        self.add_extra_info(ie_result, extra_info)\n        self.download_playlist(ie_result, download)\n        return ie_result\n\n    # Handle compat_list type results\n    elif result_type == 'compat_list':\n        self.add_extra_info(ie_result, extra_info)\n        self.report_warning('Extractor %s returned a compat_list result. It needs to be updated.' % ie_result.get('extractor'))\n        for entry in ie_result.get('entries', []):\n            self.process_ie_result(entry, download, extra_info)\n        return ie_result\n\n    # Handle other invalid result types\n    else:\n        raise Exception('Invalid result type: %s' % result_type)",
            "imports": []
        }
    ]
}