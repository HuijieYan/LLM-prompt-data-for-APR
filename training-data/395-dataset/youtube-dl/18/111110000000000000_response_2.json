{
    "youtube-dl": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 820,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def process_ie_result(self, ie_result, download=True, extra_info={}):\n        \"\"\"\n        Take the result of the ie(may be modified) and resolve all unresolved\n        references (URLs, playlist items).\n    \n        It will also download the videos if 'download'.\n        Returns the resolved ie_result.\n        \"\"\"\n\n        result_type = ie_result.get('_type', 'video')\n\n        if result_type in ('url', 'url_transparent'):\n            extra_info = self.add_extra_info(ie_result, extra_info)\n            return self.process_video_result(ie_result, download=download)\n        \n        elif result_type == 'video':\n            return self.process_video_result(ie_result, download=download)\n        \n        elif result_type == 'url':\n            return self.extract_info(ie_result['url'], download, ie_key=ie_result.get('ie_key'), extra_info=extra_info)\n        \n        elif result_type == 'url_transparent':\n            new_result = self.extract_info(ie_result['url'], ie_key=ie_result.get('ie_key'), extra_info=extra_info, download=False, process=False)\n\n            if new_result is None:\n                return new_result\n        \n            force_properties = dict((k, v) for k, v in ie_result.items() if v is not None)\n            for f in ('_type', 'url', 'ie_key'):\n                if f in force_properties:\n                    del force_properties[f]\n            new_result.update(force_properties)\n    \n            if new_result.get('_type') == 'url':\n                new_result['_type'] = 'url_transparent'\n    \n            return self.process_ie_result(new_result, download=download, extra_info=extra_info)\n        \n        elif result_type in ('playlist', 'multi_video'):\n            playlist_results = []\n    \n            if 'entries' in ie_result:\n                ie_entries = ie_result['entries']\n                for entry in ie_entries:\n                    entry_result = self.process_ie_result(entry, download=download, extra_info=extra_info)\n                    playlist_results.append(entry_result)\n                ie_result['entries'] = playlist_results\n                return ie_result\n        \n        elif result_type == 'compat_list':\n            self.report_warning(\n                'Extractor %s returned a compat_list result. '\n                'It needs to be updated.' % ie_result.get('extractor'))\n            ie_result['entries'] = [\n                self.process_ie_result(self._fixup(r), download, extra_info)\n                for r in ie_result['entries']\n            ]\n            return ie_result\n        else:\n            raise Exception('Invalid result type: %s' % result_type)",
            "imports": []
        }
    ]
}