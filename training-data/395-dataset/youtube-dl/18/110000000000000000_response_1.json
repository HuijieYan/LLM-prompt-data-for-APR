{
    "youtube-dl": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 820,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    \"\"\"\n    Take the result of the ie (may be modified) and resolve all unresolved\n    references (URLs, playlist items).\n\n    It will also download the videos if 'download'.\n    Returns the resolved ie_result.\n    \"\"\"\n    result_type = ie_result.get('_type', 'video')\n\n    if result_type in ('url', 'url_transparent'):\n        ie_result['url'] = sanitize_url(ie_result['url'])\n        extract_flat = self.params.get('extract_flat', False)\n        if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n             extract_flat is True):\n            if self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n\n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    elif result_type == 'url':\n        # We have to add extra_info to the results because it may be\n        # contained in a playlist\n        return self.extract_info(ie_result['url'],\n                                 download,\n                                 ie_key=ie_result.get('ie_key'),\n                                 extra_info=extra_info)\n    elif result_type == 'url_transparent':\n        # Use the information from the embedding page\n        info = self.extract_info(\n            ie_result['url'], ie_key=ie_result.get('ie_key'),\n            extra_info=extra_info, download=False, process=False)\n\n        # extract_info may return None when ignoreerrors is enabled and\n        # extraction failed with an error, don't crash and return early\n        # in this case\n        if not info:\n            return info\n\n        forced_properties = dict(\n            (k, v) for k, v in ie_result.items() if v is not None)\n        for f in ('_type', 'url', 'ie_key'):\n            if f in forced_properties:\n                del forced_properties[f]\n        new_result = info.copy()\n        new_result.update(forced_properties)\n\n        # Extracted info may not be a video result (i.e.\n        # info.get('_type', 'video') != video) but rather an url or\n        # url_transparent. In such cases outer metadata (from ie_result)\n        # should be propagated to inner one (info). For this to happen\n        # _type of info should be overridden with url_transparent. This\n        # fixes issue from https://github.com/rg3/youtube-dl/pull/11163.\n        if new_result.get('_type') == 'url':\n            new_result['_type'] = 'url_transparent'\n\n        return self.process_ie_result(\n            new_result, download=download, extra_info=extra_info)\n    elif result_type in ('playlist', 'multi_video'):\n        # We process each entry in the playlist\n        playlist = ie_result.get('title') or ie_result.get('id')\n        self.to_screen('[download] Downloading playlist: %s' % playlist)\n        entries, n_entries = self._playlist_entries(\n            ie_result, playlist, extra_info)\n        playlist_results = self.playlist_results(\n            entries, ie_result, n_entries, playlist, playliststart, extra_info)\n        ie_result['entries'] = playlist_results\n        self.to_screen(\n            '[download] Finished downloading playlist: %s' % playlist)\n        return ie_result\n    elif result_type == 'compat_list':\n        self.report_warning(\n            'Extractor %s returned a compat_list result. '\n            'It needs to be updated.' % ie_result.get('extractor'))\n        return self._compat_list_result(ie_result, extra_info, download)\n    else:\n        raise Exception('Invalid result type: %s' % result_type)",
            "import_list": []
        }
    ]
}