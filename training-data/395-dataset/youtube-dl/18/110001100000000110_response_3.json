{
    "youtube-dl": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 820,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def process_ie_result(self, ie_result, download=True, extra_info={}):\n    \"\"\"\n    Take the result of the ie(may be modified) and resolve all unresolved\n    references (URLs, playlist items).\n\n    It will also download the videos if 'download'.\n    Returns the resolved ie_result.\n    \"\"\"\n    result_type = ie_result.get('_type', 'video')\n\n    if result_type in ('url', 'url_transparent'):\n        ie_result['url'] = sanitize_url(ie_result['url'])\n        extract_flat = self.params.get('extract_flat', False)\n        if ((extract_flat == 'in_playlist' and 'playlist' in extra_info) or\n                extract_flat is True):\n            if self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n    elif result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    elif result_type == 'playlist':\n        playlist = ie_result.get('title') or ie_result.get('id')\n        self.to_screen('[download]    Downloading playlist: %s' % playlist)\n        playlist_results = []\n        for entry in ie_result['entries']:\n            entry_result = self.process_ie_result(entry, download=download, extra_info=extra_info)\n            playlist_results.append(entry_result)\n        self.to_screen('[download] Finished downloading playlist: %s' % playlist)\n        ie_result['entries'] = playlist_results\n        return ie_result\n    elif result_type == 'compat_list':\n        self.report_warning(\n            'Extractor %s returned a compat_list result. '\n            'It needs to be updated.' % ie_result.get('extractor'))\n        playlist_results = []\n        for entry in ie_result['entries']:\n            entry_result = self.process_ie_result(entry, download, extra_info)\n            playlist_results.append(entry_result)\n        ie_result['entries'] = playlist_results\n        return ie_result\n    else:\n        raise Exception('Invalid result type: %s' % result_type)",
            "imports": []
        }
    ]
}