{
    "youtube-dl": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 611,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def prepare_filename(self, info_dict):\n    \"\"\"Generate the output filename.\"\"\"\n    try:\n        template_dict = dict(info_dict)\n\n        template_dict['epoch'] = int(time.time())\n        autonumber_size = self.params.get('autonumber_size')\n        if autonumber_size is None:\n            autonumber_size = 5\n        template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n        if template_dict.get('resolution') is None:\n            if template_dict.get('width') and template_dict.get('height'):\n                template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n            elif template_dict.get('height'):\n                template_dict['resolution'] = '%sp' % template_dict['height']\n            elif template_dict.get('width'):\n                template_dict['resolution'] = '%dx?' % template_dict['width']\n\n        def sanitize_filename(filename, restricted, is_id):\n            if is_id:\n                # Escape special characters for ID\n                return filename.replace('$', '\\\\$')\n            else:\n                return filename  # Return the same filename for other cases\n\n        template_dict = dict((k, v if isinstance(v, compat_numeric_types) else sanitize_filename(k, v, (k == 'id' or k.endswith('_id'))))\n                             for k, v in template_dict.items()\n                             if v is not None and not isinstance(v, (list, tuple, dict)))\n        template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n        # ... remaining code unchanged ...\n    except ValueError as err:\n        self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n        return None",
            "imports": []
        }
    ]
}