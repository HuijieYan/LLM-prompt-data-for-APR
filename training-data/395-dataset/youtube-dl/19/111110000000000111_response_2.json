{
    "youtube-dl": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 611,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def prepare_filename(self, info_dict):\n    \"\"\"Generate the output filename.\"\"\"\n    try:\n        template_dict = dict(info_dict)\n\n        template_dict['epoch'] = int(time.time())\n        autonumber_size = self.params.get('autonumber_size', 5)\n        autonumber_start = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n        template_dict['autonumber'] = autonumber_start\n        if 'width' in template_dict and 'height' in template_dict:\n            template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n        elif 'height' in template_dict:\n            template_dict['resolution'] = '%sp' % template_dict['height']\n        elif 'width' in template_dict:\n            template_dict['resolution'] = '%dx?' % template_dict['width']\n\n        for key, value in template_dict.items():\n            if not isinstance(value, (int, float, str)):\n                template_dict[key] = str(value)\n\n        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n        \n        filename = outtmpl % template_dict\n        return filename\n    except ValueError as err:\n        self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n        return None",
            "import_list": []
        }
    ]
}