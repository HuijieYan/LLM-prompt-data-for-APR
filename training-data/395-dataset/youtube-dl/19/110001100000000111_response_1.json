{
    "youtube-dl": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 611,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def prepare_filename(self, info_dict):\n        \"\"\"Generate the output filename.\"\"\"\n        def get_template_value(template_dict, key, default=None, format_spec='%s'):\n            value = template_dict.get(key)\n            return format_spec % value if value is not None else default\n\n        template_dict = dict(info_dict)\n\n        template_dict['epoch'] = int(time.time())\n        autonumber_size = self.params.get('autonumber_size', 5)\n        template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n\n        if template_dict.get('resolution') is None:\n            template_dict['resolution'] = (\n                get_template_value(template_dict, 'width', '%dx', '%dx%')\n                + get_template_value(template_dict, 'height', '%d?', '%sp')\n            )\n\n        template_dict = {\n            k: v if isinstance(v, compat_numeric_types) else sanitize_filename(v, restricted=self.params.get('restrictfilenames'), is_id=(k == 'id' or k.endswith('_id')))\n            for k, v in template_dict.items()\n            if v is not None and not isinstance(v, (list, tuple, dict))\n        }\n        template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n        outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n\n        for field, size in {'playlist_index': len(str(template_dict['n_entries'])), 'autonumber': autonumber_size}.items():\n            outtmpl = re.sub(r'(?<!%)%\\({0}\\)s'.format(field), r'%%(\\1)0{0}d'.format(size), outtmpl)\n\n        for numeric_field in self._NUMERIC_FIELDS:\n            if numeric_field not in template_dict:\n                outtmpl = re.sub(r'(?<!%)%\\({0}\\)s'.format(numeric_field), r'%({0})s'.format(numeric_field), outtmpl)\n\n        filename = expand_path(outtmpl % dict(template_dict))\n        if sys.version_info < (3, 0) and sys.platform == 'win32':\n            filename = encodeFilename(filename, True).decode(preferredencoding())\n        return sanitize_path(filename)",
            "imports": [
                "import re",
                "import time",
                "import collections",
                "from youtube_dl.compat import (\n    compat_str,\n    compat_numeric_types,\n)",
                "from youtube_dl.utils import (\n    sanitize_filename,\n    expand_path,\n    encodeFilename,\n    preferredencoding,\n    sanitize_path,\n)"
            ]
        }
    ]
}