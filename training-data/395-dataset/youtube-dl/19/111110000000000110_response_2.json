{
    "youtube-dl": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 611,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def prepare_filename(self, info_dict):\n        \"\"\"Generate the output filename.\"\"\"\n        try:\n            template_dict = dict(info_dict)\n\n            template_dict['epoch'] = int(time.time())\n            autonumber_size = self.params.get('autonumber_size', 5)\n            autonumber_start = self.params.get('autonumber_start', 1)\n            autonumber = autonumber_start - 1 + self._num_downloads\n            \n            template_dict['autonumber'] = autonumber\n            if template_dict.get('resolution') is None:\n                if template_dict.get('width') and template_dict.get(\n                        'height'):\n                    template_dict['resolution'] = '%dx%d' % (\n                        template_dict['width'], template_dict['height'])\n                elif template_dict.get('height'):\n                    template_dict['resolution'] = '%sp' % template_dict[\n                        'height']\n                elif template_dict.get('width'):\n                    template_dict['resolution'] = '%dx?' % template_dict[\n                        'width']\n\n            sanitize = lambda k, v: sanitize_filename(\n                compat_str(v),\n                restricted=self.params.get('restrictfilenames'),\n                is_id=(k == 'id' or k.endswith('_id')))\n            template_dict = dict((k, v if isinstance(v, compat_numeric_types) else sanitize(k, v))\n                                 for k, v in template_dict.items()\n                                 if v is not None and not isinstance(v, (list, tuple, dict)))\n            template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n\n            outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n            \n            for field in ('playlist_index', 'autonumber'):\n                field_no = len(str(template_dict.get(field)))\n                outtmpl = re.sub(\n                    r'(?<!%)%\\(' + field + r'\\)s',\n                    r'%%(' + field + r')0' + str(field_size_compat_map[field]), outtmpl)\n\n            for numeric_field in self._NUMERIC_FIELDS:\n                if numeric_field not in template_dict:\n                    outtmpl = re.sub(\n                        r'(?<!%)%\\(' + numeric_field + r'\\)s',\n                        r'%(' + numeric_field + r')s', outtmpl)\n\n            filename = expand_path(outtmpl % template_dict)\n            # Temporary fix for #4787\n            # 'Treat' all problem characters by passing filename through preferredencoding\n            # to workaround encoding issues with subprocess on python2 @ Windows\n            if sys.version_info < (3, 0) and sys.platform == 'win32':\n                filename = encodeFilename(filename, True).decode(preferredencoding())\n            return sanitize_path(filename)\n        except ValueError as err:\n            self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n            return None",
            "imports": [
                "import collections",
                "import re",
                "import sys",
                "import time",
                "from os.path import expanduser",
                "from youtube_dl.utils import (\n    DEFAULT_OUTTMPL,\n    compat_numeric_types,\n    compat_str,\n    encodeFilename,\n    expand_path,\n    preferredencoding,\n    sanitize_filename,\n    sanitize_path,\n)"
            ]
        }
    ]
}