{
    "youtube-dl": [
        {
            "bugID": 25,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2024,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        elif v.startswith('/*') or v == ',':\n            return \"\"\n        \n        if v[0] in (\"'\", '\"'):\n            v = v[1:-1]  # Remove the surrounding quotes\n            v = v.replace('\\\\\"', '\"')  # Unescape double quotes\n            v = v.replace(\"\\\\'\", \"'\")  # Unescape single quotes\n            v = v.replace(\"\\\\\\\\\", \"\\\\\")  # Unescape backslashes\n            v = v.replace(\"\\\\n\", \"\\n\")  # Unescape newlines\n            v = v.replace(\"\\\\r\", \"\\r\")  # Unescape carriage returns\n            v = v.replace(\"\\\\t\", \"\\t\")  # Unescape tabs\n            v = v.replace(\"\\\\b\", \"\\b\")  # Unescape backspace\n            v = v.replace(\"\\\\f\", \"\\f\")  # Unescape form feed\n            v = v.replace(\"\\\\/\", \"/\")  # Unescape forward slashes\n            v = v.replace(\"\\\\x\", \"\\\\u00\")  # Unescape hexadecimal codes\n        \n        # Check for numeric values\n        if re.match(r'^-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$', v):  # Check for numeric values\n            return v\n        \n        return f'\"{v}\"'\n\n    return re.sub(r'''(?sx)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\['\"nurtbfx/\\n]))*[^\"\\\\]*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\['\"nurtbfx/\\n]))*[^'\\\\]*'|\n        /\\*.*?\\*/|,(?=\\s*[\\]}])|\n        [a-zA-Z_][.a-zA-Z_0-9]*|\n        \\b(?:0[xX][0-9a-fA-F]+|0+[0-7]+)(?:\\s*:)?|\n        -?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?(?:\\s*:)?|\n        \\b(?:true|false|null)(?:\\s*:)?|\n        [0-9]+(?=\\s*:)\n        ''', fix_kv, code)",
            "import_list": []
        }
    ]
}