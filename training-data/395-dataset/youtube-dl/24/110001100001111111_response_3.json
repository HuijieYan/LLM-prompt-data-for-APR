{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    m = re.match(r'^(?P<key>[a-z_]+)\\s*(?P<op><|<=|>|>=|=|!=)\\s*(?P<intval>\\d+(?:\\.\\d+)?(?:[kKmMgGtTpPeEzZyYi?Bb]i?[Bb]?)?|(?![0-9.])[a-z0-9A-Z]*)\\s*\\??$', filter_part)\n    \n    if m:\n        key = m.group('key')\n        op = COMPARISON_OPERATORS[m.group('op')]\n        value = m.group('intval')\n        \n        if value.isdigit():\n            comparison_value = int(value)\n        else:\n            comparison_value = parse_filesize(value) or parse_filesize(value + 'B')\n            if comparison_value is None:\n                raise ValueError('Invalid value %r in filter part %r' % (value, filter_part))\n        \n        if key in dct:\n            actual_value = dct[key]\n            return op(actual_value, comparison_value)\n        else:\n            return bool(m.group('none_inclusive'))\n    \n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    m = re.match(r'^(?P<op>!?)\\s*(?P<key>[a-z_]+)\\s*$', filter_part)\n    \n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        key = m.group('key')\n        \n        if key in dct:\n            actual_value = dct[key]\n            return op(actual_value)\n        else:\n            return bool(m.group('op'))\n    \n    raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import operator"
            ]
        }
    ]
}