{
    "1.1.1": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        if m.group('strval') is not None:\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    'Operator %s does not support string values!' % m.group('op'))\n            comparison_value = m.group('strval')\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('intval'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('intval') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('intval'), filter_part))\n        actual_value = dct.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "youtube_dl/utils.py",
    "1.3.2": [
        "parse_filesize(s)"
    ],
    "1.4.1": [
        "    def test_match_filter(self):\n        class FilterYDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super(FilterYDL, self).__init__(*args, **kwargs)\n                self.params['simulate'] = True\n\n            def process_info(self, info_dict):\n                super(YDL, self).process_info(info_dict)\n\n            def _match_entry(self, info_dict, incomplete):\n                res = super(FilterYDL, self)._match_entry(info_dict, incomplete)\n                if res is None:\n                    self.downloaded_info_dicts.append(info_dict)\n                return res\n\n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n        }\n        videos = [first, second]\n\n        def get_videos(filter_=None):\n            ydl = FilterYDL({'match_filter': filter_})\n            for v in videos:\n                ydl.process_ie_result(v, download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n\n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n\n        def f(v):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n\n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])"
    ],
    "1.4.2": [
        "test/test_YoutubeDL.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Lists differ: [] != ['1']\nE       \nE       Second list contains 1 additional elements.\nE       First extra element 0:\nE       '1'\nE       \nE       - []\nE       + ['1']"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_YoutubeDL.TestYoutubeDL testMethod=test_match_filter>\n\n    def test_match_filter(self):\n        class FilterYDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super(FilterYDL, self).__init__(*args, **kwargs)\n                self.params['simulate'] = True\n    \n            def process_info(self, info_dict):\n                super(YDL, self).process_info(info_dict)\n    \n            def _match_entry(self, info_dict, incomplete):\n                res = super(FilterYDL, self)._match_entry(info_dict, incomplete)\n                if res is None:\n                    self.downloaded_info_dicts.append(info_dict)\n                return res\n    \n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n        }\n        videos = [first, second]\n    \n        def get_videos(filter_=None):\n            ydl = FilterYDL({'match_filter': filter_})\n            for v in videos:\n                ydl.process_ie_result(v, download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n    \n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n    \n        def f(v):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n    \n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n    \n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n    \n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n    \n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n    \n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n>       self.assertEqual(res, ['1'])",
            "\ntest/test_YoutubeDL.py:657: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "filter_part": {
                    "value": "'duration < 30'",
                    "shape": "13",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 13), match='duration < 30'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "30",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "30",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'duration < 30'",
                    "shape": "13",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 13), match='duration < 30'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "30",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "10",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description = foo'",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='description = foo'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description = foo'",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='description = foo'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description =? foo'",
                    "shape": "18",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 18), match='description =? foo'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description =? foo'",
                    "shape": "18",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 18), match='description =? foo'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'filesize > 5KiB'",
                    "shape": "15",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "5120",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "10240",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'filesize > 5KiB'",
                    "shape": "15",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "5120",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "5120",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'playlist_id = 42'",
                    "shape": "16",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "42",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'42'",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'playlist_id = 42'",
                    "shape": "16",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "42",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'43'",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "str",
                "actual_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "str",
                "actual_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int",
                "actual_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "int",
                "actual_value": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "filter_part": {
                    "value": "'duration < 30'",
                    "shape": "13",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 13), match='duration < 30'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "30",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "30",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'duration < 30'",
                    "shape": "13",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 13), match='duration < 30'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "10",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "30",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description = foo'",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='description = foo'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description = foo'",
                    "shape": "17",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 17), match='description = foo'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description =? foo'",
                    "shape": "18",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 18), match='description =? foo'>",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'description =? foo'",
                    "shape": "18",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 18), match='description =? foo'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'filesize > 5KiB'",
                    "shape": "15",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "10240",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "5120",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'filesize > 5KiB'",
                    "shape": "15",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "5120",
                    "shape": null,
                    "omitted": false
                },
                "comparison_value": {
                    "value": "5120",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'playlist_id = 42'",
                    "shape": "16",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '1', 'url': 'http://localhost/sample.mp4', 'title': 'one', 'extractor': 'TEST', 'duration': 30, 'filesize': 10240, 'playlist_id': '42', 'playlist': None, 'playlist_index': None, 'display_id': '1', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'one'}",
                    "shape": "17",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'42'",
                    "shape": "2",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'42'",
                    "shape": "2",
                    "omitted": false
                }
            }
        ],
        [
            {
                "filter_part": {
                    "value": "'playlist_id = 42'",
                    "shape": "16",
                    "omitted": false
                },
                "dct": {
                    "value": "{'id': '2', 'url': 'http://localhost/sample.mp4', 'title': 'two', 'extractor': 'TEST', 'duration': 10, 'description': 'foo', 'filesize': 5120, 'playlist_id': '43', 'playlist': None, 'playlist_index': None, 'display_id': '2', 'requested_subtitles': None, 'format_id': '0', 'format': '0 - unknown', 'ext': 'mp4', 'protocol': 'http', 'http_headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:10.0) ... (Chrome)', 'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'en-us,en;q=0.5'}, 'fulltitle': 'two'}",
                    "shape": "18",
                    "omitted": true
                }
            },
            {
                "COMPARISON_OPERATORS": {
                    "value": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                    "shape": "6",
                    "omitted": false
                },
                "operator_rex": {
                    "value": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                    "shape": "<=",
                    "omitted": false
                },
                "m": {
                    "value": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                    "shape": null,
                    "omitted": false
                },
                "actual_value": {
                    "value": "'43'",
                    "shape": "2",
                    "omitted": false
                },
                "comparison_value": {
                    "value": "'42'",
                    "shape": "2",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ]
    ],
    "3.1.1": [
        "Using --match-filter for comparison playlist_id. Always being skipped.\n"
    ],
    "3.1.2": [
        "Please follow the guide below\nYou will be asked some questions and requested to provide some information, please read them carefully and answer honestly\nPut an x into all the boxes [ ] relevant to your issue (like that [x])\nUse Preview tab to see how your issue will actually look like\nMake sure you are using the latest version: run youtube-dl --version and ensure your version is 2016.10.31. If it's not read this FAQ entry and update. Issues with outdated version will be rejected.\n I've verified and I assure that I'm running youtube-dl 2016.10.31\nBefore submitting an issue make sure you have:\n At least skimmed through README and most notably FAQ and BUGS sections\n Searched the bugtracker for similar issues including closed ones\nWhat is the purpose of your issue?\n Bug report (encountered problems with youtube-dl)\n Site support request (request for adding support for a new site)\n Feature request (request for a new functionality)\n Question\n Other\nThe following sections concretize particular purposed issues, you can erase any section (the contents between triple ---) not applicable to your issue\nIf the purpose of this issue is a bug report, site support request or you are not completely sure provide the full verbose output as follows:\nAdd -v flag to your command line you run youtube-dl with, copy the whole output and insert it here. It should look similar to one below (replace it with your log inserted between triple "
    ]
}