{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<op>[<>=!]+)?\n        \\s*(?P<key>[a-z_]+)\n        \\s*(?P<none_inclusive>\\?\\s*)?\n        \\s*\n        (?P<value>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)?\n        \\s*$\n        ''')\n    m = operator_rex.search(filter_part)\n    if m:\n        op = operator.eq if m.group('op') is None else UNARY_OPERATORS[m.group('op')]\n        if m.group('value'):\n            comparison_value = m.group('value')\n            if comparison_value[-1].lower() in ['k', 'm', 'g', 't', 'p', 'e', 'z', 'y']:\n                comparison_value = parse_filesize(comparison_value)\n            if not comparison_value:\n                raise ValueError('Invalid value in filter part %r' % filter_part)\n        else:\n            comparison_value = None\n        actual_value = dct.get(m.group('key'))\n        if m.group('none_inclusive'):\n            return actual_value is not None\n        elif op in COMPARISON_OPERATORS.values():\n            if actual_value is None:\n                return False\n            return op(actual_value, comparison_value)\n        else:\n            if actual_value is None:\n                return not op\n            return op(actual_value)\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": []
        }
    ]
}