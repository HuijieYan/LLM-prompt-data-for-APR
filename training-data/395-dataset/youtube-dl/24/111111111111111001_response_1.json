{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    m = re.match(r'(?P<key>[a-z_]+)\\s*(?P<op>[<>=!]+)(\\??)\\s*(?P<val>[a-zA-Z0-9.]+)', filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        val = m.group('val')\n        actual_value = dct.get(key)\n\n        if actual_value is not None:\n            if op in COMPARISON_OPERATORS:\n                comparison_func = COMPARISON_OPERATORS[op]\n                if isinstance(actual_value, str) and isinstance(val, str):\n                    result = comparison_func(actual_value, val)\n                else:\n                    try:\n                        int_val = int(val)\n                        result = comparison_func(actual_value, int_val)\n                    except ValueError:\n                        parse_val = parse_filesize(val)\n                        if parse_val is not None:\n                            result = comparison_func(actual_value, parse_val)\n                        else:\n                            raise ValueError(f'Invalid comparison value: {val}')\n                return result\n\n        elif m.group('none_inclusive') is not None:\n            return True\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}