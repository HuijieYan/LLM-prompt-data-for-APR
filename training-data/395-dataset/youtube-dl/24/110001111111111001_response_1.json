{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    if '<' in filter_part:\n        key, value = filter_part.split('<')\n        if key.strip() in dct and int(dct[key.strip()]) < int(value.strip()):\n            return True\n    elif '<=' in filter_part:\n        key, value = filter_part.split('<=')\n        if key.strip() in dct and int(dct[key.strip()]) <= int(value.strip()):\n            return True\n    elif '>' in filter_part:\n        key, value = filter_part.split('>')\n        if key.strip() in dct and int(dct[key.strip()]) > int(value.strip()):\n            return True\n    elif '>=' in filter_part:\n        key, value = filter_part.split('>=')\n        if key.strip() in dct and int(dct[key.strip()]) >= int(value.strip()):\n            return True\n    elif '=' in filter_part:\n        key, value = filter_part.split('=')\n        if key.strip() in dct and dct[key.strip()] == value.strip():\n            return True\n    elif '!=' in filter_part:\n        key, value = filter_part.split('!=')\n        if key.strip() in dct and dct[key.strip()] != value.strip():\n            return True\n    \n    return False",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}