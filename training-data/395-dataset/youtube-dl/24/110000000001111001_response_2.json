{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    if '<' in filter_part:\n        key, value = filter_part.split('<')\n        key = key.strip()\n        value = value.strip()\n        op = COMPARISON_OPERATORS['<']\n        comparison_value = float(value)\n        actual_value = float(dct.get(key, 0))  # Return 0 if key not present\n        return op(actual_value, comparison_value)\n    elif '>' in filter_part:\n        key, value = filter_part.split('>')\n        key = key.strip()\n        value = value.strip()\n        op = COMPARISON_OPERATORS['>']\n        comparison_value = float(value)\n        actual_value = float(dct.get(key, 0))  # Return 0 if key not present\n        return op(actual_value, comparison_value)\n    elif '=' in filter_part:\n        key, value = filter_part.split('=')\n        key = key.strip()\n        value = value.strip()\n        comparison_value = value\n        actual_value = dct.get(key, '')  # Return empty string if key not present\n        return actual_value == comparison_value\n    elif '!=' in filter_part:\n        key, value = filter_part.split('!=')\n        key = key.strip()\n        value = value.strip()\n        comparison_value = value\n        actual_value = dct.get(key, '')  # Return empty string if key not present\n        return actual_value != comparison_value\n    else:\n        raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}