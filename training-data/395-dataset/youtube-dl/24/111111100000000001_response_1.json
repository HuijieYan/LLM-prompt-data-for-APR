{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import re\n    import operator\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    # Code to handle comparison operations involving string values\n    if filter_part in COMPARISON_OPERATORS:\n        key, op, val = re.findall(r'(?P<key>\\w+)\\s*(?P<op>[<>=!]+)\\s*(?P<val>\\w+)', filter_part)[0]\n        actual_value = dct.get(key)\n        if actual_value is None:\n            return False\n        if isinstance(actual_value, str):\n            if op in ('=', '!='):\n                return COMPARISON_OPERATORS[op](actual_value, val)\n            else:\n                raise ValueError('Operator %s does not support string values!' % op)\n        else:\n            return COMPARISON_OPERATORS[op](actual_value, int(val))\n    \n    # Code to handle unary operators\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    if filter_part.startswith('!'):\n        key = filter_part[1:]\n        op = UNARY_OPERATORS['!']\n    else:\n        key = filter_part\n        op = UNARY_OPERATORS['']\n    actual_value = dct.get(key)\n    return op(actual_value)\n    \n    raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}