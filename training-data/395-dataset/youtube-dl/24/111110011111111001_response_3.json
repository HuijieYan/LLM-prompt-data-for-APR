{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    m = re.match(r'\\s*([^<>=!]+)\\s*(<|<=|>=|>|=|!=)\\s*([^\\s\\?]+)\\s*\\??\\s*$', filter_part)\n    if m:\n        key = m.group(1)\n        op = m.group(2)\n        val = m.group(3)\n        \n        if op not in COMPARISON_OPERATORS:\n            raise ValueError('Invalid operator %s' % op)\n\n        if op in ('=', '!='):\n            comparison_value = val\n        else:\n            try:\n                comparison_value = int(val)\n            except ValueError:\n                comparison_value = parse_filesize(val)\n\n        actual_value = dct.get(key)\n        if actual_value is None:\n            return m.group('none_inclusive')\n\n        return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n\n    m = re.match(r'\\s*(!)?\\s*([a-z_]+)\\s*$', filter_part)\n    if m:\n        negation = m.group(1)\n        key = m.group(2)\n        actual_value = dct.get(key)\n        if negation:\n            return actual_value is None\n        else:\n            return actual_value is not None\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import re",
                "import operator"
            ]
        }
    ]
}