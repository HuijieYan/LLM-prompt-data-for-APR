{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    m = re.match(r'\\s*(?P<key>[a-z_]+)\\s*(?P<op>[<>=!]+)\\??\\s*(?P<value>.*)$', filter_part)\n    if not m:\n        raise ValueError('Invalid filter part %r' % filter_part)\n\n    key = m.group('key')\n    op = m.group('op')\n    value = m.group('value')\n    \n    if op in COMPARISON_OPERATORS:\n        op_func = COMPARISON_OPERATORS[op]\n        actual_value = dct.get(key)\n        if actual_value is None:\n            return op if '?' in op else False\n        if isinstance(actual_value, str):\n            if op not in ('=', '!='):\n                raise ValueError(f'Operator {op} does not support string values!')\n            return op_func(actual_value, value)\n        else:\n            try:\n                comparison_value = int(value)\n            except ValueError:\n                comparison_value = int(parse_filesize(value))\n            return op_func(actual_value, comparison_value)\n    elif op == '':\n        return key in dct\n    elif op == '!':\n        return key not in dct\n    else:\n        raise ValueError('Invalid operator %r' % op)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}