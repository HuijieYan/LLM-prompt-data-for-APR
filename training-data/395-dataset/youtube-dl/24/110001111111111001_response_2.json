{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    m = re.match(r'(?P<key>[a-z_]+)\\s*(?P<op><|<=|>|>=|==|!=)(?P<none_inclusive>\\s*\\?)?\\s*(?P<value>.+)$', filter_part)\n    \n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        actual_value = dct.get(key)\n        if actual_value is None:\n            return m.group('none_inclusive')  # handle the optional ? in filter part\n        comparison_value = m.group('value')\n        \n        if isinstance(comparison_value, str):\n            if op not in ('=', '!='):\n                raise ValueError('Operator %s does not support string values!' % op)\n        else:\n            try:\n                comparison_value = int(comparison_value)\n            except ValueError:\n                comparison_value = parse_filesize(comparison_value)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(comparison_value + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('value'), filter_part))\n        \n        if op == '<':\n            return actual_value < comparison_value\n        elif op == '<=':\n            return actual_value <= comparison_value\n        elif op == '>':\n            return actual_value > comparison_value\n        elif op == '>=':\n            return actual_value >= comparison_value\n        elif op == '=':\n            return actual_value == comparison_value\n        elif op == '!=':\n            return actual_value != comparison_value\n\n    # ... handle other cases ...\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}