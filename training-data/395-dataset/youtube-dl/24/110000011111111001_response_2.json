{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n        comparison_value = None\n        actual_value = None\n\n        if '!=' in filter_part:\n            key, value = filter_part.split('!=', 1)\n            key = key.strip()\n            value = value.strip()\n\n            actual_value = dct.get(key)\n            return actual_value != value\n\n        elif '=' in filter_part:\n            key, value = filter_part.split('=', 1)\n            key = key.strip()\n            value = value.strip()\n\n            actual_value = dct.get(key)\n            if actual_value is None:\n                return False\n\n            return actual_value == value\n\n        elif '=?' in filter_part:\n            key, value = filter_part.split('=?', 1)\n            key = key.strip()\n            value = value.strip()\n\n            actual_value = dct.get(key)\n            if actual_value is None:\n                return True\n\n            return actual_value == value\n        # handle other comparison operators (e.g. '<', '>', '<=', '>=') for numerical values\n        else:\n            COMPARISON_OPERATORS = {\n                '<': operator.lt,\n                '<=': operator.le,\n                '>': operator.gt,\n                '>=': operator.ge\n            }\n            operator_rex = re.compile(r'''(?x)\\s*\n                (?P<key>[a-z_]+)\n                \\s*(?P<op>%s)\\s*\n                (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)\n                \\s*$\n                ''' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n            m = operator_rex.search(filter_part)\n            if m:\n                op = COMPARISON_OPERATORS[m.group('op')]\n                comparison_value = int(m.group('intval'))\n                actual_value = dct.get(m.group('key'))\n                if actual_value is None:\n                    return False\n                return op(actual_value, comparison_value)\n\n        raise ValueError('Invalid filter part %r' % filter_part)",
            "imports": [
                "import operator",
                "import re"
            ]
        }
    ]
}