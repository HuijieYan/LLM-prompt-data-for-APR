{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    m = re.match(r'(?P<key>[a-z_]+)\\s*(?P<op><|<=|>|>=|=|!=)\\s*(?P<none_inclusive>\\?)?\\s*(?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)?|\\s*(?P<key>[a-z_]+)\\s*(?P<op>!|)\\s*$', filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        value = m.group('intval')\n        if op in ('', '<', '<=', '>', '>='):\n            if value:\n                value = int_or_parse_filesize(value)\n            if key not in dct:\n                return m.group('none_inclusive')\n            if op == '':\n                return dct[key] is not None\n            elif op == '<':\n                return dct[key] < value\n            elif op == '<=':\n                return dct[key] <= value\n            elif op == '>':\n                return dct[key] > value\n            elif op == '>=':\n                return dct[key] >= value\n        elif op in ('=', '!='):\n            if key not in dct:\n                return m.group('none_inclusive')\n            if op == '=':\n                return dct[key] == value\n            elif op == '!=':\n                return dct[key] != value\n        elif op == '!':\n            return dct[key] is None\n    raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}