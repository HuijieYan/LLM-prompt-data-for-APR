{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n\n    m = re.match(r'(?P<key>[a-z_]+)\\s*(?P<op>[<>=!]+)\\s*(?P<value>.+)', filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        value = m.group('value')\n\n        actual_value = dct.get(key)\n        if actual_value is None:\n            return False  # if key is not present, it fails the comparison\n\n        if op in COMPARISON_OPERATORS:\n            op_func = COMPARISON_OPERATORS[op]\n            if op in ['=', '!=']:\n                return op_func(actual_value, value)\n            else:\n                try:\n                    comparison_value = int(value)\n                except ValueError:\n                    comparison_value = parse_filesize(value)\n                    if comparison_value is None:\n                        comparison_value = parse_filesize(value + 'B')\n                    if comparison_value is None:\n                        raise ValueError(\n                            'Invalid integer value %r in filter part %r' % (value, filter_part))\n                return op_func(actual_value, comparison_value)\n\n        raise ValueError('Invalid operator %r in filter part %r' % (op, filter_part))\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}