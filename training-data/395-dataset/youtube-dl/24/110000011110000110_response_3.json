{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    m = re.match(r'(?P<key>[a-z_]+)\\s*(?P<op>[<>=!]+)(?P<none_inclusive>\\s*\\?)?\\s*(?P<val>.+)$', filter_part)\n    if m:\n        key = m.group('key')\n        op = m.group('op')\n        val = m.group('val')\n        none_inclusive = m.group('none_inclusive')\n\n        if key not in dct:\n            return none_inclusive\n\n        actual_value = dct[key]\n        if op in COMPARISON_OPERATORS:\n            if op in ['=', '!=']:\n                if isinstance(val, str) and not val.isnumeric():\n                    raise ValueError('Operator %s does not support string values!' % op)\n                comparison_value = int(val) if val.isnumeric() else parse_filesize(val)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(val + 'B')\n                if comparison_value is None:\n                    raise ValueError('Invalid value %r in filter part %r' % (val, filter_part))\n                return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n            else:\n                raise ValueError('Operator %s does not support string values!' % op)\n        elif op == '':\n            return actual_value is not None\n        elif op == '!':\n            return actual_value is None\n    else:\n        raise ValueError('Invalid filter part %r' % filter_part)",
            "import_list": [
                "import operator",
                "import re"
            ]
        }
    ]
}