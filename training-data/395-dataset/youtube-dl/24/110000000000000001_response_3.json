{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    \n    for op in COMPARISON_OPERATORS.keys():\n        if op in filter_part:\n            key, value = filter_part.split(op)\n            key = key.strip()\n            value = value.strip()\n            if op not in ('=', '!='):\n                try:\n                    comparison_value = int(value)\n                except ValueError:\n                    raise ValueError(\n                        f'Invalid integer value {value} in filter part {filter_part}')\n            else:\n                comparison_value = value\n            actual_value = dct.get(key)\n            if actual_value is None:\n                return True if op == '!=' else False\n            return COMPARISON_OPERATORS[op](actual_value, comparison_value)\n    \n    for op in UNARY_OPERATORS.keys():\n        if op in filter_part:\n            key = filter_part.split(op)[1].strip()\n            actual_value = dct.get(key)\n            return UNARY_OPERATORS[op](actual_value)\n    \n    raise ValueError(f'Invalid filter part {filter_part}')"
        }
    ]
}