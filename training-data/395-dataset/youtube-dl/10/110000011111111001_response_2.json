{
    "youtube-dl": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1546,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n\n        # First, check if it's a special value or already a string\n        if v in ('true', 'false', 'null') or v[0] in ('\"', \"'\"):\n            return v\n\n        # Handling unescaped key strings\n        if ':' in v:\n            return f'\"{v}\"'\n\n        # Handling unescaped values\n        if v[-1] == ':':\n            return f'\"{v[:-1]}\":'\n            \n        # Handling unescaped object keys\n        if v.endswith('.'):\n            return f'\"{v}\"'\n\n        # Handling unescaped object values\n        if v.endswith('['):\n            return f'\"{v[:-1]}\"['\n\n        # Handling unescaped object end braces\n        if v == '.':\n            return ''\n\n        return f'\"{v}\"'\n\n    # Replace the matching keys and values\n    res = re.sub(r'''(?x)\n        (?:'[^'\\\\]*(?:\\\\\\\\|\\\\')?';) |     # single quoted values\n        (?:'[^']*(?:''[^']*)*') |        # single quoted keys\n        ([a-zA-Z_][.a-zA-Z_0-9]*)\n        ''', fix_kv, code)\n\n    return res",
            "import_list": [
                "import re",
                "import json"
            ]
        }
    ]
}