{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 549,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    from typing import Optional\n    from pydantic import BaseModel, Field, create_model, BaseConfig, params, Dependant, Type\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    \n    model_name = \"Body_\" + name\n    \n    if len(flat_dependant.body_params) == 1 and not getattr(flat_dependant.body_params[0].schema, \"embed\", None):\n        field = get_schema_compatible_field(field=flat_dependant.body_params[0])\n    else:\n        body_fields = {}\n        for f in flat_dependant.body_params:\n            body_fields[f.name] = (get_schema_compatible_field(field=f), ...)\n        \n        BodyModel = create_model(\n            model_name,\n            **body_fields\n        )\n        \n        required = any(f.required for f in flat_dependant.body_params)\n        \n        if any(isinstance(f.schema, params.File) for f in flat_dependant.body_params):\n            BodySchema: Type[params.Body] = params.File\n        elif any(isinstance(f.schema, params.Form) for f in flat_dependant.body_params):\n            BodySchema = params.Form\n        else:\n            BodySchema = params.Body\n        \n        field = Field(\n            name=\"body\",\n            type_=BodyModel,\n            default=None,\n            required=required,\n            model_config=BaseConfig,\n            class_validators={},\n            alias=\"body\",\n            schema=BodySchema(None),\n        )\n    \n    return field"
        }
    ]
}