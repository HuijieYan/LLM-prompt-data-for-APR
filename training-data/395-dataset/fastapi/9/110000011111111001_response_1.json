{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 549,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    embed = getattr(first_param.schema, \"embed\", None)\n    if len(flat_dependant.body_params) == 1 and not embed:\n        return get_schema_compatible_field(field=first_param)\n    model_name = \"Body_\" + name\n    BodyModel = create_model(model_name)\n    for f in flat_dependant.body_params:\n        BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n    required = any(True for f in flat_dependant.body_params if f.required)\n    content_types = []\n    for f in flat_dependant.body_params:\n        if isinstance(f.schema, params.File):\n            content_types.append('multipart/form-data')\n        elif isinstance(f.schema, params.Form):\n            content_types.append('application/x-www-form-urlencoded')\n        else:\n            content_types.append('application/json')\n\n    if len(set(content_types)) > 1:\n        BodySchema = params.Body\n    elif 'multipart/form-data' in content_types:\n        BodySchema = params.File\n    elif 'application/x-www-form-urlencoded' in content_types:\n        BodySchema = params.Form\n    else:\n        BodySchema = params.Body\n\n    field = Field(\n        name=\"body\",\n        type_=BodyModel,\n        default=None,\n        required=required,\n        model_config=BaseConfig,\n        class_validators={},\n        alias=\"body\",\n        schema=BodySchema(None),\n    )\n    return field",
            "imports": [
                "from typing import Optional",
                "from pydantic import Field, create_model",
                "from fastapi.params import Body, File, Form",
                "from pydantic.main import BaseModel, create_model",
                "from fastapi import params",
                "from pydantic.schema import get_flat_dependant",
                "from typing import Type",
                "from fastapi.encoders import jsonable_encoder",
                "from fastapi.utils import (\n    in_ipython,\n    get_lambda_name,\n    all_identical,\n    get_param_modifiers,\n    get_path_param_names,\n    all_validators,\n    method_from,\n    create_cloned_response_field,\n    change_exception,\n    FlattenParams,\n    create_cloned_field,\n)",
                "from pydantic.fields import ModelField",
                "from fastapi.datastructures import Default, DefaultPlaceholder",
                "from pydantic.types import Required, NOT_SET",
                "from pydantic.error_wrappers import ErrorWrapper, Error",
                "from fastapi.openapi.constants import SECURITY_SCHEMES_OR_REF, Iters",
                "from fastapi.openapi.utils import get_authorization_scheme_param",
                "from fastapi.security.api_key import APIKeyHeaderOrQuery",
                "from fastapi.security.oauth2 import OAuth2PasswordBearer, OAuth2PasswordRequestForm",
                "from fastapi.security.open_id_connect_url import OpenIdConnectUrl",
                "from fastapi.security.http import HTTPAuthorizationCredentials",
                "from fastapi import security"
            ]
        }
    ]
}