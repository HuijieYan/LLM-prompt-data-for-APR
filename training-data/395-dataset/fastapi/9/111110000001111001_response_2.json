{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 549,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: params.Dependant, name: str) -> Optional[Field]:\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    embed = getattr(first_param.schema, \"embed\", None)\n    if len(flat_dependant.body_params) == 1 and not embed:\n        return get_schema_compatible_field(field=first_param)\n\n    model_name = f\"Body_{name}\"\n    fields = {}\n    required = False\n    for f in flat_dependant.body_params:\n        schema_field = get_schema_compatible_field(field=f)\n        fields[f.name] = (schema_field, ...)\n        required = required or f.required\n\n\n    if any(isinstance(f.schema, params.File) for f in flat_dependant.body_params):\n        BodyModel = params.File\n    elif any(isinstance(f.schema, params.Form) for f in flat_dependant.body_params):\n        BodyModel = params.Form\n    else:\n        BodyModel = params.Body\n\n    BodyModel = create_model(model_name, **fields)\n\n    return Field(\n        name=\"body\",\n        type_=BodyModel,\n        default=None,\n        required=required,\n        model_config=BaseConfig,\n        class_validators={},\n        alias=\"body\",\n        schema=BodyModel,\n    )",
            "import_list": [
                "from typing import Optional",
                "from pydantic import BaseModel, Field, MetaModel, BaseConfig, params, create_model, Type"
            ]
        }
    ]
}