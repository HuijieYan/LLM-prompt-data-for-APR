{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 549,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    embed = getattr(first_param.schema, \"embed\", None)\n    if len(flat_dependant.body_params) == 1 and not embed:\n        return get_schema_compatible_field(field=first_param)\n\n    model_name = \"Body_\" + name\n    BodyModel = create_model(model_name, **{f.name: (get_schema_compatible_field(field=f), ...) \n                                            for f in flat_dependant.body_params})\n    \n    # Check if any of the body parameters are files or form\n    if any(isinstance(f.schema, File) for f in flat_dependant.body_params):\n        BodySchema = File\n    elif any(isinstance(f.schema, Form) for f in flat_dependant.body_params):\n        BodySchema = Form\n    else:\n        BodySchema = Body\n\n    # Create the field object\n    field = Field(\n        name=\"body\",\n        type_=BodyModel,\n        default=None,\n        required=any(f.required for f in flat_dependant.body_params),\n        model_config=BaseConfig,\n        class_validators={},\n        alias=\"body\",\n        schema=BodySchema(None),\n    )\n    return field",
            "imports": [
                "from typing import Optional",
                "from fastapi import Field",
                "from pydantic import BaseModel, BaseConfig",
                "from fastapi.params import Depends, Body, File, Form",
                "from fastapi.routing import get_flat_dependant",
                "from fastapi.dependencies.models import Dependant",
                "from fastapi.params import Param, Form",
                "from pydantic.main import create_model",
                "from typing import Type"
            ]
        }
    ]
}