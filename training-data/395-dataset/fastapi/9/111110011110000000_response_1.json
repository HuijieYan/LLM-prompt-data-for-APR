{
    "fastapi": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 549,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n        \n    BodyModel = create_model(f\"Body_{name}\")\n    for f in flat_dependant.body_params:\n        schema_compatible_field = get_schema_compatible_field(field=f)\n        BodyModel.__fields__[f.name] = (schema_compatible_field.name, schema_compatible_field.type_)\n    \n    required = any(True for f in flat_dependant.body_params if f.required)\n    \n    if any(isinstance(f.schema, params.File) for f in flat_dependant.body_params):\n        BodySchema: Type[BaseModel] = Field\n    elif any(isinstance(f.schema, params.Form) for f in flat_dependant.body_params):\n        BodySchema = Form\n    else:\n        BodySchema = Body\n    \n    field = Field(\n        None,\n        alias='body',\n        model_config=BaseConfig,\n        required=required,\n        default=None,\n        type_=BodyModel,\n        schema=BodySchema(None),\n        class_validators={},\n    )\n\n    return field",
            "imports": [
                "from typing import Optional, Type",
                "from pydantic import BaseModel, Field"
            ]
        }
    ]
}