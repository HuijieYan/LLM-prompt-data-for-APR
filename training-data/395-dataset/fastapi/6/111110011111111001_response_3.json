{
    "fastapi": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Union[Dict[str, Any], FormData]\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    \n    for field in required_params:\n        value: Any = None\n        if field.name in received_body:\n            value = received_body[field.name]\n            valid_value, error = field.validate(value, values, loc=(\"body\", field.name))\n            if error:\n                errors.append(error)\n            else:\n                values[field.name] = valid_value\n    \n    return values, errors",
            "import_list": [
                "from typing import List, Tuple, Dict, Any",
                "from pydantic.fields import ModelField",
                "from pydantic.error_wrappers import ErrorWrapper",
                "from pydantic.typing import Union, Dict, FormData",
                "import asyncio",
                "from fastapi import UploadFile",
                "from copy import deepcopy",
                "from app.params import Form",
                "from app import sequence_shapes, lenient_issubclass, params"
            ]
        }
    ]
}