{
    "fastapi": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 275,
            "file_name": "fastapi/routing.py",
            "replace_code": "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None\n) -> None:\n    from typing import Any, Dict, List, Union\n    from fastapi import APIRouter, APIRoute\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n        \n    if responses is None:  # Initialize responses if it doesn't exist\n        responses = {}\n        \n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            responses.update(route.responses)  # Combine responses\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=responses,  # Use the combined responses\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                include_in_schema=route.include_in_schema,\n                content_type=route.content_type,\n                name=route.name,\n            )"
        }
    ]
}