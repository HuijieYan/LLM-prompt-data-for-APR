{
    "fastapi": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 275,
            "file_name": "fastapi/routing.py",
            "replace_code": "def include_router(\n        self,\n        router: \"APIRouter\",\n        *,\n        prefix: str = \"\",\n        tags: List[str] = None,\n    ) -> None:\n        for route in router.routes:\n            if isinstance(route, APIRoute):\n                responses = route.responses\n                self.add_api_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    route.response_model,\n                    route.status_code,\n                    (route.tags or []) + (tags or []),\n                    route.summary,\n                    route.description,\n                    route.response_description,\n                    responses,\n                    route.deprecated,\n                    route.methods,\n                    route.operation_id,\n                    route.include_in_schema,\n                    route.content_type,\n                    route.name,\n                )\n            elif isinstance(route, routing.Route):\n                self.add_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    route.methods,\n                    route.include_in_schema,\n                    route.name,\n                )\n            elif isinstance(route, routing.WebSocketRoute):\n                self.add_websocket_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    route.name\n                )",
            "imports": []
        }
    ]
}