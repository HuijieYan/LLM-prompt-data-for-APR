{
    "1.1.1": "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            if responses is None:\n                responses = {}\n            responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                include_in_schema=route.include_in_schema,\n                content_type=route.content_type,\n                name=route.name,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=route.methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n",
    "1.1.2": null,
    "1.2.1": "class APIRouter(routing.Router)",
    "1.2.2": null,
    "1.2.3": [
        "add_api_route(self, path: str, endpoint: Callable) -> None"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "fastapi/routing.py",
    "1.3.2": [
        "add_api_route(self, path: str, endpoint: Callable) -> None"
    ],
    "1.4.1": [
        "def test_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == openapi_schema"
    ],
    "1.4.2": [
        "tests/test_additional_responses_router.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert {'info': {'title': 'Fast API', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/a': {'get': {'operationId': 'a_a_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'}},\\n                          'summary': 'A Get'}},\\n           '/b': {'get': {'operationId': 'b_b_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'B Get'}},\\n           '/c': {'get': {'operationId': 'c_c_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 3'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'C Get'}}}} == {'info': {'title': 'Fast API', 'version': '0.1.0'},\\n 'openapi': '3.0.2',\\n 'paths': {'/a': {'get': {'operationId': 'a_a_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 1'}},\\n                          'summary': 'A Get'}},\\n           '/b': {'get': {'operationId': 'b_b_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '502': {'description': 'Error 2'}},\\n                          'summary': 'B Get'}},\\n           '/c': {'get': {'operationId': 'c_c_get',\\n                          'responses': {'200': {'content': {'application/json': {'schema': {}}},\\n                                                'description': 'Successful '\\n                                                               'Response'},\\n                                        '501': {'description': 'Error 3'}},\\n                          'summary': 'C Get'}}}}\nE         Common items:\nE         {'info': {'title': 'Fast API', 'version': '0.1.0'}, 'openapi': '3.0.2'}\nE         Differing items:\nE         {'paths': {'/a': {'get': {'operationId': 'a_a_get', 'responses': {'200': {'content': {...}, 'description': 'Successful...: 'Successful Response'}, '501': {'description': 'Error 3'}, '502': {'description': 'Error 2'}}, 'summary': 'C Get'}}}} != {'paths': {'/a': {'get': {'operationId': 'a_a_get', 'responses': {'200': {'content': {...}, 'description': 'Successful...': {'content': {...}, 'description': 'Successful Response'}, '501': {'description': 'Error 3'}}, 'summary': 'C Get'}}}}\nE         Full diff:\nE           {\nE            'info': {'title': 'Fast API',\nE                     'version': '0.1.0'},\nE            'openapi': '3.0.2',\nE            'paths': {'/a': {'get': {'operationId': 'a_a_get',\nE                                     'responses': {'200': {'content': {'application/json': {'schema': {}}},\nE                                                           'description': 'Successful '\nE                                                                          'Response'},\nE                                                   '501': {'description': 'Error 1'}},\nE                                     'summary': 'A Get'}},\nE                      '/b': {'get': {'operationId': 'b_b_get',\nE                                     'responses': {'200': {'content': {'application/json': {'schema': {}}},\nE                                                           'description': 'Successful '\nE                                                                          'Response'},\nE         +                                         '501': {'description': 'Error 1'},\nE                                                   '502': {'description': 'Error 2'}},\nE                                     'summary': 'B Get'}},\nE                      '/c': {'get': {'operationId': 'c_c_get',\nE                                     'responses': {'200': {'content': {'application/json': {'schema': {}}},\nE                                                           'description': 'Successful '\nE                                                                          'Response'},\nE         -                                         '501': {'description': 'Error 3'}},\nE         ?                                                                          -\nE         +                                         '501': {'description': 'Error 3'},\nE         +                                         '502': {'description': 'Error 2'}},\nE                                     'summary': 'C Get'}}},\nE           }"
        ]
    ],
    "2.1.2": [
        [
            "def test_openapi_schema():\n        response = client.get(\"/openapi.json\")\n        assert response.status_code == 200\n>       assert response.json() == openapi_schema",
            "\ntests/test_additional_responses_router.py:77: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "prefix": {
                    "value": "''",
                    "shape": "0"
                },
                "router.routes": {
                    "value": "[<fastapi.routing.APIRoute object at 0x102609430>, <fastapi.routing.APIRoute object at 0x102609640>, <fastapi.routing.APIRoute object at 0x102609850>]",
                    "shape": "3"
                },
                "router": {
                    "value": "<fastapi.routing.APIRouter object at 0x102601eb0>",
                    "shape": null
                },
                "responses": {
                    "value": "{}",
                    "shape": "0"
                },
                "self": {
                    "value": "<fastapi.routing.APIRouter object at 0x10205f370>",
                    "shape": null
                }
            },
            {
                "route": {
                    "value": "<fastapi.routing.APIRoute object at 0x102609850>",
                    "shape": null
                },
                "responses": {
                    "value": "{501: {'description': 'Error 3'}, 502: {'description': 'Error 2'}}",
                    "shape": "2"
                },
                "route.responses": {
                    "value": "{501: {'description': 'Error 3'}}",
                    "shape": "1"
                },
                "route.path": {
                    "value": "'/c'",
                    "shape": "2"
                },
                "route.status_code": {
                    "value": "200",
                    "shape": null
                },
                "route.tags": {
                    "value": "[]",
                    "shape": "0"
                },
                "route.response_description": {
                    "value": "'Successful Response'",
                    "shape": "19"
                },
                "route.methods": {
                    "value": "['GET']",
                    "shape": "1"
                },
                "route.include_in_schema": {
                    "value": "True",
                    "shape": null
                },
                "route.name": {
                    "value": "'c'",
                    "shape": "1"
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "prefix": "str",
                "router.routes": "list",
                "router": "APIRouter",
                "responses": "dict",
                "self": "APIRouter"
            },
            {
                "route": "APIRoute",
                "responses": "dict",
                "route.responses": "dict",
                "route.path": "str",
                "route.status_code": "int",
                "route.tags": "list",
                "route.response_description": "str",
                "route.methods": "list",
                "route.include_in_schema": "bool",
                "route.name": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "prefix": {
                    "value": "''",
                    "shape": "0"
                },
                "responses": {
                    "value": "{}",
                    "shape": "0"
                },
                "router.routes": {
                    "value": "[<fastapi.routing.APIRoute object at 0x1076f3490>, <fastapi.routing.APIRoute object at 0x1076f36a0>, <fastapi.routing.APIRoute object at 0x1076f38b0>]",
                    "shape": "3"
                },
                "router": {
                    "value": "<fastapi.routing.APIRouter object at 0x1076ecfd0>",
                    "shape": null
                },
                "self": {
                    "value": "<fastapi.routing.APIRouter object at 0x1070a8ee0>",
                    "shape": null
                }
            },
            {
                "route": {
                    "value": "<fastapi.routing.APIRoute object at 0x1076f38b0>",
                    "shape": null
                },
                "combined_responses": {
                    "value": "{501: {'description': 'Error 3'}}",
                    "shape": "1"
                },
                "route.responses": {
                    "value": "{501: {'description': 'Error 3'}}",
                    "shape": "1"
                },
                "route.path": {
                    "value": "'/c'",
                    "shape": "2"
                },
                "route.status_code": {
                    "value": "200",
                    "shape": null
                },
                "route.tags": {
                    "value": "[]",
                    "shape": "0"
                },
                "route.response_description": {
                    "value": "'Successful Response'",
                    "shape": "19"
                },
                "route.methods": {
                    "value": "['GET']",
                    "shape": "1"
                },
                "route.include_in_schema": {
                    "value": "True",
                    "shape": null
                },
                "route.name": {
                    "value": "'c'",
                    "shape": "1"
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "prefix": "str",
                "responses": "dict",
                "router.routes": "list",
                "router": "APIRouter",
                "self": "APIRouter"
            },
            {
                "route": "APIRoute",
                "combined_responses": "dict",
                "route.responses": "dict",
                "route.path": "str",
                "route.status_code": "int",
                "route.tags": "list",
                "route.response_description": "str",
                "route.methods": "list",
                "route.include_in_schema": "bool",
                "route.name": "str"
            }
        ]
    ],
    "3.1.1": [
        "Routes defined with same APIRouter instance share responses\n"
    ],
    "3.1.2": [
        "Describe the bug\nWhen defining routes with an API router their alternative responses are shared.\n\nTo Reproduce\nExample 1:\n\nfrom fastapi import FastAPI\nfrom fastapi import APIRouter\n\napp = FastAPI()\nrouter = APIRouter()\n\n@router.get(\"/a\", responses={501: {\"description\": \"Error 1\"}})\nasync def a():\n    return \"a\"\n\n@router.get(\"/b\", responses={502: {\"description\": \"Error 2\"}})\nasync def b():\n    return \"b\"\n\n@router.get(\"/c\", responses={501: {\"description\": \"Error 1 overwriten\"}})\nasync def c():\n    return \"c\"\n\napp.include_router(router)\n/a will now have a single 501 error as expected.\n/b will now have both a 501 and a 502 error (should only be 502).\n/c will also have both 501 and 502, but an overwritten description (should only be 501).\n\nIf you split them into different routers, the problem does not occur:\nExample 2:\n\nrouter1 = APIRouter()\nrouter2 = APIRouter()\nrouter3 = APIRouter()\n\n@router1.get(\"/a\", responses={501: {\"description\": \"Error 1\"}})\nasync def a():\n    return \"a\"\n\n@router2.get(\"/b\", responses={502: {\"description\": \"Error 2\"}})\nasync def b():\n    return \"b\"\n\n@router3.get(\"/c\", responses={501: {\"description\": \"Error 1 overwriten\"}})\nasync def c():\n    return \"c\"\n\napp.include_router(router1)\napp.include_router(router2)\napp.include_router(router3\nExpected behavior\nResponses for different paths should not be merged. This only occurs for APIRouter, not if paths are added directly to the FastAPI app instance.\n"
    ]
}