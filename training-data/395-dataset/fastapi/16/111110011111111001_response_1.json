{
    "fastapi": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 9,
            "file_name": "fastapi/encoders.py",
            "replace_code": "def jsonable_encoder(\n    obj: Any,\n    include: Set[str] = None,\n    exclude: Set[str] = set(),\n    by_alias: bool = False,\n    include_none: bool = True,\n    custom_encoder: dict = {},\n) -> Any:\n    if isinstance(obj, BaseModel):\n        data = obj.dict(\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias\n        )\n        if obj.Config.json_encoders:\n            for key in obj.Config.json_encoders:\n                if key in data:\n                    data[key] = obj.Config.json_encoders[key](data[key])\n        return data\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, dict):\n        return {\n            jsonable_encoder(\n                key,\n                by_alias=by_alias,\n                include_none=include_none,\n                custom_encoder=custom_encoder,\n            ): jsonable_encoder(\n                value,\n                by_alias=by_alias,\n                include_none=include_none,\n                custom_encoder=custom_encoder,\n            )\n            for key, value in obj.items()\n            if value is not None or include_none\n        }\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple)):\n        return [\n            jsonable_encoder(\n                item,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                include_none=include_none,\n                custom_encoder=custom_encoder,\n            )\n            for item in obj\n        ]\n    return obj",
            "imports": [
                "from typing import Any, Set, GeneratorType",
                "from pydantic import BaseModel",
                "from enum import Enum"
            ]
        }
    ]
}