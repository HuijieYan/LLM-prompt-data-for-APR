{
    "fastapi": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 9,
            "file_name": "fastapi/encoders.py",
            "replace_code": "def jsonable_encoder(\n    obj: Any,\n    include: Set[str] = None,\n    exclude: Set[str] = set(),\n    by_alias: bool = False,\n    include_none: bool = True,\n    custom_encoder: dict = {},\n) -> Any:\n    if isinstance(obj, BaseModel):\n        return obj.dict(include=include, exclude=exclude, by_alias=by_alias)\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, dict):\n        encoded_obj = {}\n        for key, value in obj.items():\n            encoded_key = jsonable_encoder(key, by_alias=by_alias, include_none=include_none, custom_encoder=custom_encoder)\n            encoded_value = jsonable_encoder(value, by_alias=by_alias, include_none=include_none, custom_encoder=custom_encoder)\n            if encoded_value is not None or include_none:\n                encoded_obj[encoded_key] = encoded_value\n        return encoded_obj\n    if isinstance(obj, (list, set, frozenset, tuple)):\n        return [\n            jsonable_encoder(\n                item,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                include_none=include_none,\n                custom_encoder=custom_encoder,\n            )\n            for item in obj\n        ]\n    return obj",
            "import_list": [
                "from typing import Any, Set",
                "from enum import Enum",
                "from pydantic import BaseModel",
                "import json"
            ]
        }
    ]
}