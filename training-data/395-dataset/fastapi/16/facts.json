{
    "1.1.1": "def jsonable_encoder(\n    obj: Any,\n    include: Set[str] = None,\n    exclude: Set[str] = set(),\n    by_alias: bool = False,\n    include_none: bool = True,\n    custom_encoder: dict = {},\n) -> Any:\n    if isinstance(obj, BaseModel):\n        if not obj.Config.json_encoders:\n            return jsonable_encoder(\n                obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n                include_none=include_none,\n            )\n        else:\n            return jsonable_encoder(\n                obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n                include_none=include_none,\n                custom_encoder=obj.Config.json_encoders,\n            )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, dict):\n        return {\n            jsonable_encoder(\n                key,\n                by_alias=by_alias,\n                include_none=include_none,\n                custom_encoder=custom_encoder,\n            ): jsonable_encoder(\n                value,\n                by_alias=by_alias,\n                include_none=include_none,\n                custom_encoder=custom_encoder,\n            )\n            for key, value in obj.items()\n            if value is not None or include_none\n        }\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple)):\n        return [\n            jsonable_encoder(\n                item,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                include_none=include_none,\n                custom_encoder=custom_encoder,\n            )\n            for item in obj\n        ]\n    errors = []\n    try:\n        if custom_encoder and type(obj) in custom_encoder:\n            encoder = custom_encoder[type(obj)]\n        else:\n            encoder = ENCODERS_BY_TYPE[type(obj)]\n        return encoder(obj)\n    except KeyError as e:\n        errors.append(e)\n        try:\n            data = dict(obj)\n        except Exception as e:\n            errors.append(e)\n            try:\n                data = vars(obj)\n            except Exception as e:\n                errors.append(e)\n                raise ValueError(errors)\n    return jsonable_encoder(data, by_alias=by_alias, include_none=include_none)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "fastapi/encoders.py",
    "1.3.2": [
        "jsonable_encoder(obj: Any, include: Set[str]=None, exclude: Set[str]=set(), by_alias: bool=False, include_none: bool=True, custom_encoder: dict={}) -> Any"
    ],
    "1.4.1": [
        "def test_encode_model_with_config():\n    model = ModelWithConfig(role=RoleEnum.admin)\n    assert jsonable_encoder(model) == {\"role\": \"admin\"}"
    ],
    "1.4.2": [
        "tests/test_jsonable_encoder.py"
    ],
    "2.1.1": [
        [
            "E           AttributeError: type object 'Config' has no attribute 'json_encoders'"
        ]
    ],
    "2.1.2": [
        [
            "def test_encode_model_with_config():\n        model = ModelWithConfig(role=RoleEnum.admin)\n>       assert jsonable_encoder(model) == {\"role\": \"admin\"}\n\ntests/test_jsonable_encoder.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = <ModelWithConfig role='admin'>, include = None, exclude = set()\nby_alias = False, include_none = True, custom_encoder = {}\n\n    def jsonable_encoder(\n        obj: Any,\n        include: Set[str] = None,\n        exclude: Set[str] = set(),\n        by_alias: bool = False,\n        include_none: bool = True,\n        custom_encoder: dict = {},\n    ) -> Any:\n        if isinstance(obj, BaseModel):\n>           if not obj.Config.json_encoders:",
            "\nfastapi/encoders.py:18: AttributeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "obj": "<ModelWithConfig role='admin'>",
                "obj.Config": "<class 'tests.test_jsonable_encoder.ModelWithConfig.Config'>",
                "custom_encoder": "{}",
                "obj.dict": "<bound method BaseModel.dict of <ModelWithConfig role='admin'>>",
                "exclude": "set()",
                "by_alias": "False",
                "include_none": "True"
            },
            {
                "encoder": "{}"
            }
        ],
        [
            {
                "obj": "{'role': 'admin'}",
                "custom_encoder": "{}",
                "exclude": "set()",
                "by_alias": "False",
                "include_none": "True"
            },
            {}
        ],
        [
            {
                "obj": "'role'",
                "custom_encoder": "{}",
                "exclude": "set()",
                "by_alias": "False",
                "include_none": "True"
            },
            {}
        ],
        [
            {
                "obj": "'admin'",
                "custom_encoder": "{}",
                "exclude": "set()",
                "by_alias": "False",
                "include_none": "True"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "obj": "ModelWithConfig",
                "obj.Config": "type",
                "custom_encoder": "dict",
                "obj.dict": "method",
                "exclude": "set",
                "by_alias": "bool",
                "include_none": "bool"
            },
            {
                "encoder": "dict"
            }
        ],
        [
            {
                "obj": "dict",
                "custom_encoder": "dict",
                "exclude": "set",
                "by_alias": "bool",
                "include_none": "bool"
            },
            {}
        ],
        [
            {
                "obj": "str",
                "custom_encoder": "dict",
                "exclude": "set",
                "by_alias": "bool",
                "include_none": "bool"
            },
            {}
        ],
        [
            {
                "obj": "str",
                "custom_encoder": "dict",
                "exclude": "set",
                "by_alias": "bool",
                "include_none": "bool"
            },
            {}
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}