{
    "fastapi": [
        {
            "bugID": 16,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 9,
            "file_name": "fastapi/encoders.py",
            "replace_code": "def jsonable_encoder(\n        obj: Any,\n        include: Set[str] = None,\n        exclude: Set[str] = set(),\n        by_alias: bool = False,\n        include_none: bool = True,\n        custom_encoder: dict = {},\n) -> Any:\n\n    if isinstance(obj, BaseModel):\n        config = getattr(obj, \"Config\", Config)  # Get the Config attribute, use default Config if not present\n        if not config.json_encoders:\n            return jsonable_encoder(\n                obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n                include_none=include_none,\n            )\n        else:\n            return jsonable_encoder(\n                obj.dict(include=include, exclude=exclude, by_alias=by_alias),\n                include_none=include_none,\n                custom_encoder=config.json_encoders,\n            )\n\n    # ... (remaining code remains unchanged)\n\n    errors = []\n    try:\n        if custom_encoder and type(obj) in custom_encoder:\n            encoder = custom_encoder[type(obj)]\n        else:\n            encoder = ENCODERS_BY_TYPE[type(obj)]\n        return encoder(obj)\n    except KeyError as e:\n        errors.append(e)\n        # ... (remaining code remains unchanged)\n\n    return jsonable_encoder(data, by_alias=by_alias, include_none=include_none)",
            "imports": [
                "from typing import Any, Set, GeneratorType",
                "from pydantic import BaseModel",
                "from enum import Enum"
            ]
        }
    ]
}