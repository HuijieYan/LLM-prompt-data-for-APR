{
    "1.1.1": "def is_scalar_field(field: Field) -> bool:\n    return (\n        field.shape == Shape.SINGLETON\n        and not lenient_issubclass(field.type_, BaseModel)\n        and not lenient_issubclass(field.type_, sequence_types + (dict,))\n        and not isinstance(field.schema, params.Body)\n    )\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "fastapi/dependencies/utils.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_item_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == item_openapi_schema",
        "def test_post_other_item():\n    response = client.post(\"/items/\", json={\"price\": 100})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"price\": 100}}",
        "def test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}",
        "@skip_py36\ndef test_inherited_item_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == inherited_item_openapi_schema",
        "@skip_py36\ndef test_post_extended_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}",
        "@skip_py36\ndef test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}"
    ],
    "1.4.2": [
        "tests/test_union_body.py",
        "tests/test_union_body.py",
        "tests/test_union_body.py",
        "tests/test_union_inherited_body.py",
        "tests/test_union_inherited_body.py",
        "tests/test_union_inherited_body.py"
    ],
    "2.1.1": [
        [
            "E           KeyError: <class 'tests.test_union_body.OtherItem'>"
        ],
        [
            "E           TypeError: __init__() missing 1 required positional argument: 'model'"
        ],
        [
            "E           TypeError: __init__() missing 1 required positional argument: 'model'"
        ],
        [
            "E           KeyError: <class 'tests.test_union_inherited_body.ExtendedItem'>"
        ],
        [
            "E           TypeError: __init__() missing 1 required positional argument: 'model'"
        ],
        [
            "E           TypeError: __init__() missing 1 required positional argument: 'model'"
        ]
    ],
    "2.1.2": [
        [
            "def test_item_openapi_schema():\n>       response = client.get(\"/openapi.json\")\n\ntests/test_union_body.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/applications.py:87: in openapi\n    return JSONResponse(self.openapi())\nfastapi/applications.py:73: in openapi\n    self.openapi_schema = get_openapi(\nfastapi/openapi/utils.py:254: in get_openapi\n    result = get_openapi_path(route=route, model_name_map=model_name_map)\nfastapi/openapi/utils.py:162: in get_openapi_path\n    validation_definitions, operation_parameters = get_openapi_operation_parameters(\nfastapi/openapi/utils.py:87: in get_openapi_operation_parameters\n    \"schema\": field_schema(param, model_name_map={})[0],\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:297: in field_schema\n    f_schema, f_definitions, f_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:742: in field_singleton_schema\n    return field_singleton_sub_fields_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:648: in field_singleton_sub_fields_schema\n    sub_schema, sub_definitions, sub_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfield = <Field(item_OtherItem type=OtherItem required)>\n\n    def field_singleton_schema(  # noqa: C901 (ignore complexity)\n        field: Field,\n        *,\n        by_alias: bool,\n        model_name_map: Dict[Type['BaseModel'], str],\n        schema_overrides: bool = False,\n        ref_prefix: Optional[str] = None,\n        known_models: Set[Type['BaseModel']],\n    ) -> Tuple[Dict[str, Any], Dict[str, Any], Set[str]]:\n        \"\"\"\n        This function is indirectly used by ``field_schema()``, you should probably be using that function.\n    \n        Take a single Pydantic ``Field``, and return its schema and any additional definitions from sub-models.\n        \"\"\"\n    \n        ref_prefix = ref_prefix or default_prefix\n        definitions: Dict[str, Any] = {}\n        nested_models: Set[str] = set()\n        if field.sub_fields:\n            return field_singleton_sub_fields_schema(\n                field.sub_fields,\n                by_alias=by_alias,\n                model_name_map=model_name_map,\n                schema_overrides=schema_overrides,\n                ref_prefix=ref_prefix,\n                known_models=known_models,\n            )\n        if field.type_ is Any or type(field.type_) == TypeVar:\n            return {}, definitions, nested_models  # no restrictions\n        if is_callable_type(field.type_):\n            raise SkipField(f'Callable {field.name} was excluded from schema since JSON schema has no equivalent type.')\n        f_schema: Dict[str, Any] = {}\n        if field.schema is not None and field.schema.const:\n            f_schema['const'] = field.default\n        field_type = field.type_\n        if is_new_type(field_type):\n            field_type = new_type_supertype(field_type)\n        if is_literal_type(field_type):\n            # If there were multiple literal values, field.sub_fields would not be falsy\n            literal_value = literal_values(field_type)[0]\n            field_type = type(literal_value)\n            f_schema['const'] = literal_value\n        if issubclass(field_type, Enum):\n            f_schema.update({'enum': [item.value for item in field_type]})\n            # Don't return immediately, to allow adding specific types\n        for field_name, schema_name in validation_attribute_to_schema_keyword.items():\n            field_value = getattr(field_type, field_name, None)\n            if field_value is not None:\n                if field_name == 'regex':\n                    field_value = field_value.pattern\n                f_schema[schema_name] = field_value\n        for type_, t_schema in field_class_to_schema_enum_enabled:\n            if issubclass(field_type, type_):\n                f_schema.update(t_schema)\n                break\n        # Return schema, with or without enum definitions\n        if f_schema:\n            return f_schema, definitions, nested_models\n        for type_, t_schema in field_class_to_schema_enum_disabled:\n            if issubclass(field_type, type_):\n                return t_schema, definitions, nested_models\n        # Handle dataclass-based models\n        if lenient_issubclass(getattr(field_type, '__pydantic_model__', None), pydantic.BaseModel):\n            field_type = field_type.__pydantic_model__  # type: ignore\n        if issubclass(field_type, pydantic.BaseModel):\n>           model_name = model_name_map[field_type]",
            "\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:788: KeyError"
        ],
        [
            "def test_post_other_item():\n>       response = client.post(\"/items/\", json={\"price\": 100})\n\ntests/test_union_body.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x1114d9820>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)",
            "\nfastapi/routing.py:105: TypeError"
        ],
        [
            "def test_post_item():\n>       response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n\ntests/test_union_body.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111318bb0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)",
            "\nfastapi/routing.py:105: TypeError"
        ],
        [
            "@skip_py36\n    def test_inherited_item_openapi_schema():\n>       response = client.get(\"/openapi.json\")\n\ntests/test_union_inherited_body.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/applications.py:87: in openapi\n    return JSONResponse(self.openapi())\nfastapi/applications.py:73: in openapi\n    self.openapi_schema = get_openapi(\nfastapi/openapi/utils.py:254: in get_openapi\n    result = get_openapi_path(route=route, model_name_map=model_name_map)\nfastapi/openapi/utils.py:162: in get_openapi_path\n    validation_definitions, operation_parameters = get_openapi_operation_parameters(\nfastapi/openapi/utils.py:87: in get_openapi_operation_parameters\n    \"schema\": field_schema(param, model_name_map={})[0],\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:297: in field_schema\n    f_schema, f_definitions, f_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:742: in field_singleton_schema\n    return field_singleton_sub_fields_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:648: in field_singleton_sub_fields_schema\n    sub_schema, sub_definitions, sub_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfield = <Field(item_ExtendedItem type=ExtendedItem required)>\n\n    def field_singleton_schema(  # noqa: C901 (ignore complexity)\n        field: Field,\n        *,\n        by_alias: bool,\n        model_name_map: Dict[Type['BaseModel'], str],\n        schema_overrides: bool = False,\n        ref_prefix: Optional[str] = None,\n        known_models: Set[Type['BaseModel']],\n    ) -> Tuple[Dict[str, Any], Dict[str, Any], Set[str]]:\n        \"\"\"\n        This function is indirectly used by ``field_schema()``, you should probably be using that function.\n    \n        Take a single Pydantic ``Field``, and return its schema and any additional definitions from sub-models.\n        \"\"\"\n    \n        ref_prefix = ref_prefix or default_prefix\n        definitions: Dict[str, Any] = {}\n        nested_models: Set[str] = set()\n        if field.sub_fields:\n            return field_singleton_sub_fields_schema(\n                field.sub_fields,\n                by_alias=by_alias,\n                model_name_map=model_name_map,\n                schema_overrides=schema_overrides,\n                ref_prefix=ref_prefix,\n                known_models=known_models,\n            )\n        if field.type_ is Any or type(field.type_) == TypeVar:\n            return {}, definitions, nested_models  # no restrictions\n        if is_callable_type(field.type_):\n            raise SkipField(f'Callable {field.name} was excluded from schema since JSON schema has no equivalent type.')\n        f_schema: Dict[str, Any] = {}\n        if field.schema is not None and field.schema.const:\n            f_schema['const'] = field.default\n        field_type = field.type_\n        if is_new_type(field_type):\n            field_type = new_type_supertype(field_type)\n        if is_literal_type(field_type):\n            # If there were multiple literal values, field.sub_fields would not be falsy\n            literal_value = literal_values(field_type)[0]\n            field_type = type(literal_value)\n            f_schema['const'] = literal_value\n        if issubclass(field_type, Enum):\n            f_schema.update({'enum': [item.value for item in field_type]})\n            # Don't return immediately, to allow adding specific types\n        for field_name, schema_name in validation_attribute_to_schema_keyword.items():\n            field_value = getattr(field_type, field_name, None)\n            if field_value is not None:\n                if field_name == 'regex':\n                    field_value = field_value.pattern\n                f_schema[schema_name] = field_value\n        for type_, t_schema in field_class_to_schema_enum_enabled:\n            if issubclass(field_type, type_):\n                f_schema.update(t_schema)\n                break\n        # Return schema, with or without enum definitions\n        if f_schema:\n            return f_schema, definitions, nested_models\n        for type_, t_schema in field_class_to_schema_enum_disabled:\n            if issubclass(field_type, type_):\n                return t_schema, definitions, nested_models\n        # Handle dataclass-based models\n        if lenient_issubclass(getattr(field_type, '__pydantic_model__', None), pydantic.BaseModel):\n            field_type = field_type.__pydantic_model__  # type: ignore\n        if issubclass(field_type, pydantic.BaseModel):\n>           model_name = model_name_map[field_type]",
            "\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:788: KeyError"
        ],
        [
            "@skip_py36\n    def test_post_extended_item():\n>       response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n\ntests/test_union_inherited_body.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111474af0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)",
            "\nfastapi/routing.py:105: TypeError"
        ],
        [
            "@skip_py36\n    def test_post_item():\n>       response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n\ntests/test_union_inherited_body.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111688df0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)",
            "\nfastapi/routing.py:105: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "field.shape": {
                    "value": "<Shape.SINGLETON: 1>",
                    "shape": null
                },
                "field": {
                    "value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                    "shape": "<Shape.SINGLETON: 1>"
                },
                "field.type_": {
                    "value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                    "shape": null
                },
                "field.schema": {
                    "value": "Schema(default: Ellipsis, extra: {})",
                    "shape": null
                }
            },
            {}
        ],
        [
            {
                "field.shape": {
                    "value": "<Shape.SINGLETON: 1>",
                    "shape": null
                },
                "field": {
                    "value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                    "shape": "<Shape.SINGLETON: 1>"
                },
                "field.type_": {
                    "value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                    "shape": null
                },
                "field.schema": {
                    "value": "Schema(default: Ellipsis, extra: {})",
                    "shape": null
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "field.shape": "Shape",
                "field": "Field",
                "field.type_": "_GenericAlias",
                "field.schema": "Query"
            },
            {}
        ],
        [
            {
                "field.shape": "Shape",
                "field": "Field",
                "field.type_": "_GenericAlias",
                "field.schema": "Query"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "field.shape": {
                    "value": "<Shape.SINGLETON: 1>",
                    "shape": null
                },
                "field": {
                    "value": "<Field(item_OtherItem type=OtherItem required)>",
                    "shape": "<Shape.SINGLETON: 1>"
                }
            },
            {}
        ],
        [
            {
                "field.shape": {
                    "value": "<Shape.SINGLETON: 1>",
                    "shape": null
                },
                "field": {
                    "value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                    "shape": "<Shape.SINGLETON: 1>"
                },
                "field.type_": {
                    "value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                    "shape": null
                },
                "field.schema": {
                    "value": "Schema(default: Ellipsis, extra: {})",
                    "shape": null
                },
                "field.sub_fields": {
                    "value": "[<Field(item_OtherItem type=OtherItem required)>, <Field(item_Item type=Item required)>]",
                    "shape": "2"
                }
            },
            {}
        ],
        [
            {
                "field.shape": {
                    "value": "<Shape.SINGLETON: 1>",
                    "shape": null
                },
                "field": {
                    "value": "<Field(item_ExtendedItem type=ExtendedItem required)>",
                    "shape": "<Shape.SINGLETON: 1>"
                }
            },
            {}
        ],
        [
            {
                "field.shape": {
                    "value": "<Shape.SINGLETON: 1>",
                    "shape": null
                },
                "field": {
                    "value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                    "shape": "<Shape.SINGLETON: 1>"
                },
                "field.type_": {
                    "value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                    "shape": null
                },
                "field.schema": {
                    "value": "Schema(default: Ellipsis, extra: {})",
                    "shape": null
                },
                "field.sub_fields": {
                    "value": "[<Field(item_ExtendedItem type=ExtendedItem required)>, <Field(item_Item type=Item required)>]",
                    "shape": "2"
                }
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "field.shape": "Shape",
                "field": "Field"
            },
            {}
        ],
        [
            {
                "field.shape": "Shape",
                "field": "Field",
                "field.type_": "_GenericAlias",
                "field.schema": "Body",
                "field.sub_fields": "list"
            },
            {}
        ],
        [
            {
                "field.shape": "Shape",
                "field": "Field"
            },
            {}
        ],
        [
            {
                "field.shape": "Shape",
                "field": "Field",
                "field.type_": "_GenericAlias",
                "field.schema": "Body",
                "field.sub_fields": "list"
            },
            {}
        ]
    ],
    "3.1.1": [
        "Empty validation error when request parameters are of Union type\n"
    ],
    "3.1.2": [
        "Describe the bug\n\nThe Union type works as expected when response model is defined as such according to docs: https://fastapi.tiangolo.com/tutorial/extra-models/#union-or-anyof However when parameters (body payload) are defined as Union the code runs fine until executing method, and docs are picking up the types and generating schema correctly but the empty ValidationRequestError is thrown when route method is called even if there are all parameters sent are valid.\n\nTo Reproduce\n\nSample code to reproduce:\n\nclass SimpleData(BaseModel):\n    foo: Optional[str] = None\n\nclass ExtendedData(SimpleData):\n    bar: str # Note that this is required\n\nPostData = Union[ExtendedData, SimpleData]\n\n@router.post(\"/test\")\nasync def post(data: PostData):\n    return \"OK\"\nThen the POST /test route is called with a body payload:\n\n{\n    \"foo\": \"test1\",\n    \"bar\": \"test2\"\n}\nAs a result the empty ValidationRequestError is thrown with value_error.missing message but no actual field assigned to it.\n\nExpected behavior\nParameters from the request are resolved and parsed against the types inside Union.\n\nEnvironment:\n\nFastAPI Version: 0.29.0\n"
    ]
}