{
    "fastapi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 133,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def is_scalar_field(field: Field) -> bool:\n    # Check if the field is a single value (Shape.SINGLETON)\n    if field.shape == Shape.SINGLETON:\n        # If the type is a Union, check each type separately\n        if hasattr(field.type_, \"__origin__\") and field.type_.__origin__ == Union:\n            for sub_type in field.type_.__args__:\n                # If any sub-type is a BaseModel or a sequence type or a dictionary, return False\n                if (\n                    lenient_issubclass(sub_type, BaseModel)\n                    or lenient_issubclass(sub_type, sequence_types + (dict,))\n                ):\n                    return False\n        else:\n            # If the type is not a Union, check if it's a BaseModel or sequence type or a dictionary\n            if (\n                not lenient_issubclass(field.type_, BaseModel)\n                and not lenient_issubclass(field.type_, sequence_types + (dict,))\n            ):\n                return not isinstance(field.schema, params.Body)\n    return False",
            "import_list": []
        }
    ]
}