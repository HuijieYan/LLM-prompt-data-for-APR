{
    "scrapy": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 139,
            "file_name": "scrapy/exporters.py",
            "replace_code": "def _export_xml_field(self, name, serialized_value):\n    self.xg.startElement(name, {})\n    if hasattr(serialized_value, 'items'):\n        for subname, value in serialized_value.items():\n            if isinstance(value, (int, float, bool, str)):\n                self.xg.startElement(subname, {})\n                self.xg.characters(str(value))\n                self.xg.endElement(subname)\n            else:\n                self._export_xml_field(subname, value)\n    elif is_listlike(serialized_value):\n        for value in serialized_value:\n            if isinstance(value, (int, float, bool, str)):\n                self.xg.startElement('value', {})\n                self.xg.characters(str(value))\n                self.xg.endElement('value')\n            else:\n                self._export_xml_field('value', value)\n    else:\n        self.xg.startElement(name, {})\n        self.xg.characters(str(serialized_value))\n        self.xg.endElement(name)",
            "import_list": []
        }
    ]
}