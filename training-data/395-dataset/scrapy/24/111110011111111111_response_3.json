{
    "scrapy": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 93,
            "file_name": "scrapy/core/downloader/handlers/http11.py",
            "replace_code": "def requestTunnel(self, protocol):\n    \"\"\"Asks the proxy to open a tunnel.\"\"\"\n    tunnelReq = 'CONNECT %s:%s HTTP/1.1\\r\\n' % (self._tunneledHost.decode(),  # Decode to convert it to unicode string\n                                              str(self._tunneledPort))  # Convert to string\n    if self._proxyAuthHeader:\n        tunnelReq += b'Proxy-Authorization: ' + self._proxyAuthHeader + b'\\r\\n'  # Ensure that the prefix 'b' is added to indicate bytes\n    tunnelReq += b'\\r\\n'  # Ensure that the prefix 'b' is added to indicate bytes\n    if protocol.transport:  # Check for the existence of protocol\n        protocol.transport.write(tunnelReq.encode('utf-8'))  # Encode the message into bytes before writing to the transport\n        self._protocolDataReceived = protocol.dataReceived\n        protocol.dataReceived = self.processProxyResponse\n        self._protocol = protocol\n        return protocol\n    else:\n        # Handle the case if protocol.transport is not available\n        return None",
            "import_list": []
        }
    ]
}