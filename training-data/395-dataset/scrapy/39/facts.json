{
    "1.1.1": "def start_requests(self):\n    if self.make_requests_from_url is not Spider.make_requests_from_url:\n        warnings.warn(\n            \"Spider.make_requests_from_url method is deprecated; \"\n            \"it won't be called in future Scrapy releases. \"\n            \"Please override start_requests method instead.\"\n        )\n        for url in self.start_urls:\n            yield self.make_requests_from_url(url)\n    else:\n        for url in self.start_urls:\n            yield Request(url, dont_filter=True)\n",
    "1.1.2": null,
    "1.2.1": "class Spider(object_ref)",
    "1.2.2": "Base class for scrapy spiders. All spiders must inherit from this\nclass.",
    "1.2.3": [
        "make_requests_from_url(self, url)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "scrapy/spiders/__init__.py",
    "1.3.2": [
        "make_requests_from_url(self, url)"
    ],
    "1.4.1": [
        "    def test_make_requests_from_url_deprecated(self):\n        class MySpider4(Spider):\n            name = 'spider1'\n            start_urls = ['http://example.com']\n\n        class MySpider5(Spider):\n            name = 'spider2'\n            start_urls = ['http://example.com']\n\n            def make_requests_from_url(self, url):\n                return Request(url + \"/foo\", dont_filter=True)\n\n        with warnings.catch_warnings(record=True) as w:\n            # spider without overridden make_requests_from_url method\n            # doesn't issue a warning\n            spider1 = MySpider4()\n            self.assertEqual(len(list(spider1.start_requests())), 1)\n            self.assertEqual(len(w), 0)\n\n            # spider with overridden make_requests_from_url issues a warning,\n            # but the method still works\n            spider2 = MySpider5()\n            requests = list(spider2.start_requests())\n            self.assertEqual(len(requests), 1)\n            self.assertEqual(requests[0].url, 'http://example.com/foo')\n            self.assertEqual(len(w), 1)"
    ],
    "1.4.2": [
        "tests/test_spider.py"
    ],
    "2.1.1": [
        [
            "E   twisted.trial.unittest.FailTest: 1 != 0"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_spider.DeprecationTest testMethod=test_make_requests_from_url_deprecated>\n\n    def test_make_requests_from_url_deprecated(self):\n        class MySpider4(Spider):\n            name = 'spider1'\n            start_urls = ['http://example.com']\n    \n        class MySpider5(Spider):\n            name = 'spider2'\n            start_urls = ['http://example.com']\n    \n            def make_requests_from_url(self, url):\n                return Request(url + \"/foo\", dont_filter=True)\n    \n        with warnings.catch_warnings(record=True) as w:\n            # spider without overridden make_requests_from_url method\n            # doesn't issue a warning\n            spider1 = MySpider4()\n            self.assertEqual(len(list(spider1.start_requests())), 1)\n>           self.assertEqual(len(w), 0)\n\n/Volumes/SSD2T/bgp_envs/repos/scrapy_39/tests/test_spider.py:419: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Volumes/SSD2T/bgp_envs/envs/scrapy_39/lib/python3.8/site-packages/twisted/trial/_synctest.py:434: in assertEqual\n    super(_Assertions, self).assertEqual(first, second, msg)"
        ]
    ],
    "2.1.3": [
        [
            {
                "self": "<MySpider4 'spider1' at 0x109d3ba30>",
                "self.start_urls": "['http://example.com']"
            },
            {
                "url": "'http://example.com'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self": "MySpider4",
                "self.start_urls": "list"
            },
            {
                "url": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.__class__": "<class 'tests.test_spider.DeprecationTest.test_make_requests_from_url_deprecated.<locals>.MySpider4'>",
                "self": "<MySpider4 'spider1' at 0x10aef6550>",
                "self.start_urls": "['http://example.com']"
            },
            {
                "cls": "<class 'tests.test_spider.DeprecationTest.test_make_requests_from_url_deprecated.<locals>.MySpider4'>",
                "cls.__module__": "'tests.test_spider'",
                "cls.__name__": "'MySpider4'",
                "url": "'http://example.com'"
            }
        ],
        [
            {
                "self.__class__": "<class 'tests.test_spider.DeprecationTest.test_make_requests_from_url_deprecated.<locals>.MySpider5'>",
                "self": "<MySpider5 'spider2' at 0x10b9ecb20>",
                "self.start_urls": "['http://example.com']",
                "self.make_requests_from_url": "<bound method DeprecationTest.test_make_requests_from_url_deprecated.<locals>.MySpider5.make_requests_from_url of <MySpider5 'spider2' at 0x10b9ecb20>>"
            },
            {
                "cls": "<class 'tests.test_spider.DeprecationTest.test_make_requests_from_url_deprecated.<locals>.MySpider5'>",
                "cls.make_requests_from_url": "<function DeprecationTest.test_make_requests_from_url_deprecated.<locals>.MySpider5.make_requests_from_url at 0x10b9eedc0>",
                "cls.__module__": "'tests.test_spider'",
                "cls.__name__": "'MySpider5'",
                "url": "'http://example.com'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.__class__": "type",
                "self": "MySpider4",
                "self.start_urls": "list"
            },
            {
                "cls": "type",
                "cls.__module__": "str",
                "cls.__name__": "str",
                "url": "str"
            }
        ],
        [
            {
                "self.__class__": "type",
                "self": "MySpider5",
                "self.start_urls": "list",
                "self.make_requests_from_url": "method"
            },
            {
                "cls": "type",
                "cls.make_requests_from_url": "function",
                "cls.__module__": "str",
                "cls.__name__": "str",
                "url": "str"
            }
        ]
    ],
    "3.1.1": [
        "deprecate Spider.make_requests_from_url\n"
    ],
    "3.1.2": [
        "Hey,\n\nSpider.make_requests_from_url is a shortcut for a single use case: sending initial requests from a spider with start_urls attribute. It saves a single line of code (for url in start_urls) in one specific use case, but yet we have to document it, users have to read about it and understand what it is for.\n\nThe name suggests it is more general - but we can't yield Link objects and get requests created by make_requests_from_url, it does nothing for CrawlSpider (I'd expect URLs to be passed through this method), and it is ignored for SitemapSpider. This is inconsistent.\n\nWhat about deprecating make_requests_from_url and removing it from docs? IMHO it will make API simpler, this hook does nothing useful now, and if we ever want a general 'process URL and get a Request' method we'd have to use another name for backwards compatibility anyways.\n"
    ]
}