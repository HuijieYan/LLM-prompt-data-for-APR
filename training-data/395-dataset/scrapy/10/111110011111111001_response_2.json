{
    "scrapy": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 57,
            "file_name": "scrapy/downloadermiddlewares/redirect.py",
            "replace_code": "def process_response(self, request, response, spider):\n    from w3lib.url import to_native_str\n    from urllib.parse import urljoin\n    if (\n        request.meta.get('dont_redirect', False)\n        or response.status in getattr(spider, 'handle_httpstatus_list', [])\n        or response.status in request.meta.get('handle_httpstatus_list', [])\n        or request.meta.get('handle_httpstatus_all', False)\n    ):\n        return response\n    \n    allowed_status = {301, 302, 303, 307}\n    if b'Location' not in response.headers or response.status not in allowed_status:\n        return response\n    \n    location = to_native_str(response.headers[b'Location'])\n    redirected_url = urljoin(request.url, location)\n    \n    if response.status in {301, 307} or request.method == 'HEAD':\n        redirected = request.replace(url=redirected_url)\n        return self._redirect(redirected, request, spider, response.status)\n    \n    redirected = self._redirect_request_using_get(request, redirected_url)\n    return self._redirect(redirected, request, spider, response.status)"
        }
    ]
}