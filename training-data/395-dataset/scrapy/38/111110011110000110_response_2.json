{
    "scrapy": [
        {
            "bugID": 38,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 165,
            "file_name": "scrapy/http/request/form.py",
            "replace_code": "def _get_clickable(clickdata, form):\n    \"\"\"\n    Returns the clickable element specified in clickdata,\n    if the latter is given. If not, it returns the first\n    clickable element found\n    \"\"\"\n    clickables = [el for el in form.xpath(\n        'descendant::*[(self::input or self::button) and re:test(@type, \"^submit$\", \"i\")] | descendant::button[not(@type)]',\n        namespaces={\"re\": \"http://exslt.org/regular-expressions\"})\n    ]\n    if not clickables:\n        return\n\n    if clickdata is None:  # If we don't have clickdata, we just use the first clickable element\n        el = clickables[0]\n        return (el.get('name'), el.get('value') or '')\n\n    nr = clickdata.get('nr', None)\n    if nr is not None:  # If clickdata is given and a number is specified\n        try:\n            el = list(form.inputs)[nr]\n            return (el.get('name'), el.get('value') or '')\n        except IndexError:\n            pass\n\n    attributes = clickdata.copy()\n    xpath = './/*' + ''.join([f'[@{key}=\"{value}\"]' for key, value in attributes.items()])\n    el = form.xpath(xpath)\n    if len(el) == 1:  # When only one matching element is found\n        return (el[0].get('name'), el[0].get('value') or '')\n    elif len(el) > 1:  # When multiple matching elements are found\n        raise ValueError(f\"Multiple elements found ({el}) matching the criteria in clickdata: {clickdata}\")\n    else:  # When no matching element is found\n        raise ValueError(f'No clickable element matching clickdata: {clickdata}')",
            "import_list": []
        }
    ]
}