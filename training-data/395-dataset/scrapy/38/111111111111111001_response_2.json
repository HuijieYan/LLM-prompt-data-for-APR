{
    "scrapy": [
        {
            "bugID": 38,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 165,
            "file_name": "scrapy/http/request/form.py",
            "replace_code": "def _get_clickable(clickdata, form):\n    \"\"\"\n    Returns the clickable element specified in clickdata,\n    if the latter is given. If not, it returns the first\n    clickable element found\n    \"\"\"\n    clickables = [el for el in form.xpath(\n        'descendant::*[(self::input or self::button)'\n        ' and (@type=\"submit\" or not(@type))] | descendant::button[not(@type)]'\n        )]\n    if not clickables:\n        return {}\n\n    # If we don't have clickdata, we just use the first clickable element\n    if clickdata is None:\n        el = clickables[0]\n        return {el.get('name'): el.get('value') or ''}\n\n    # Processing clickdata based on input parameters and comparing with clickable elements\n    nr = clickdata.get('nr', None)\n    if nr is not None and isinstance(nr, int) and nr < len(clickables):\n        el = clickables[nr]\n        return {el.get('name'): el.get('value') or ''}\n\n    # Processing clickdata using XPath expressions\n    xpath = './/*' + ''.join(['[@%s=\"%s\"]' % (c, clickdata[c]) for c in clickdata])\n    el = form.xpath(xpath)\n    if len(el) == 1:\n        return {el[0].get('name'): el[0].get('value') or ''}\n    elif len(el) > 1:\n        raise ValueError(\"Multiple elements found (%r) matching the criteria in clickdata: %r\" % (el, clickdata))\n    else:\n        raise ValueError('No clickable element matching clickdata: %r' % (clickdata,))",
            "import_list": []
        }
    ]
}