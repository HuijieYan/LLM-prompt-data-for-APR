{
    "1.1.1": "def _get_clickable(clickdata, form):\n    \n    clickables = [\n        el for el in form.xpath(\n            'descendant::*[(self::input or self::button)'\n            ' and re:test(@type, \"^submit$\", \"i\")]'\n            '|descendant::button[not(@type)]',\n            namespaces={\"re\": \"http://exslt.org/regular-expressions\"})\n        ]\n    if not clickables:\n        return\n\n    # If we don't have clickdata, we just use the first clickable element\n    if clickdata is None:\n        el = clickables[0]\n        return (el.get('name'), el.get('value') or '')\n\n    # If clickdata is given, we compare it to the clickable elements to find a\n    # match. We first look to see if the number is specified in clickdata,\n    # because that uniquely identifies the element\n    nr = clickdata.get('nr', None)\n    if nr is not None:\n        try:\n            el = list(form.inputs)[nr]\n        except IndexError:\n            pass\n        else:\n            return (el.get('name'), el.get('value') or '')\n\n    # We didn't find it, so now we build an XPath expression out of the other\n    # arguments, because they can be used as such\n    xpath = u'.//*' + \\\n            u''.join(u'[@%s=\"%s\"]' % c for c in six.iteritems(clickdata))\n    el = form.xpath(xpath)\n    if len(el) == 1:\n        return (el[0].get('name'), el[0].get('value') or '')\n    elif len(el) > 1:\n        raise ValueError(\"Multiple elements found (%r) matching the criteria \"\n                         \"in clickdata: %r\" % (el, clickdata))\n    else:\n        raise ValueError('No clickable element matching clickdata: %r' % (clickdata,))\n",
    "1.1.2": "Returns the clickable element specified in clickdata,\nif the latter is given. If not, it returns the first\nclickable element found",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "scrapy/http/request/form.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_from_response_clickdata_does_not_ignore_image(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"text\" name=\"i1\" value=\"i1v\">\n            <input id=\"image\" name=\"i2\" type=\"image\" value=\"i2v\" alt=\"Login\" src=\"http://my.image.org/1.jpg\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response)\n        fs = _qs(req)\n        self.assertEqual(fs, {b'i1': [b'i1v'], b'i2': [b'i2v']})"
    ],
    "1.4.2": [
        "tests/test_http_request.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: {b'i1': [b'i1v']} != {b'i1': [b'i1v'], b'i2': [b'i2v']}\nE       - {b'i1': [b'i1v']}\nE       + {b'i1': [b'i1v'], b'i2': [b'i2v']}"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_http_request.FormRequestTest testMethod=test_from_response_clickdata_does_not_ignore_image>\n\n    def test_from_response_clickdata_does_not_ignore_image(self):\n        response = _buildresponse(\n            \"\"\"<form>\n            <input type=\"text\" name=\"i1\" value=\"i1v\">\n            <input id=\"image\" name=\"i2\" type=\"image\" value=\"i2v\" alt=\"Login\" src=\"http://my.image.org/1.jpg\">\n            </form>\"\"\")\n        req = self.request_class.from_response(response)\n        fs = _qs(req)\n>       self.assertEqual(fs, {b'i1': [b'i1v'], b'i2': [b'i2v']})",
            "\n/Volumes/SSD2T/bgp_envs/repos/scrapy_38/tests/test_http_request.py:556: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "form": {
                    "value": "<Element form at 0x10a45adb0>",
                    "shape": null
                },
                "form.inputs": {
                    "value": "<InputGetter for form 0>",
                    "shape": null
                }
            },
            {
                "clickables": {
                    "value": "[]",
                    "shape": "0"
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "form": "FormElement",
                "form.inputs": "InputGetter"
            },
            {
                "clickables": "list"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "form": {
                    "value": "<Element form at 0x1087dff90>",
                    "shape": null
                },
                "form.inputs": {
                    "value": "<InputGetter for form 0>",
                    "shape": null
                }
            },
            {
                "clickables": {
                    "value": "[<InputElement 1087eb1d0 name='i2' type='image'>]",
                    "shape": "1"
                },
                "el": {
                    "value": "<InputElement 1087eb1d0 name='i2' type='image'>",
                    "shape": null
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "form": "FormElement",
                "form.inputs": "InputGetter"
            },
            {
                "clickables": "list",
                "el": "InputElement"
            }
        ]
    ],
    "3.1.1": [
        "FormRequest.from_response() clickdata ignores input[type=image]\n"
    ],
    "3.1.2": [
        "No way to click image inputs now, see here.\n"
    ]
}