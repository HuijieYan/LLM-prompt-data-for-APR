{
    "scrapy": [
        {
            "bugID": 15,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 43,
            "file_name": "scrapy/utils/url.py",
            "replace_code": "def _safe_ParseResult(parts, encoding='utf8', path_encoding='utf8'):\n    return (\n        urllib.parse.quote_plus(urllib.parse.unquote(parts.scheme), safe=\"\"),  # encode and decode scheme\n        urllib.parse.quote_plus(urllib.parse.unquote(parts.netloc), safe=\"\"),  # encode and decode netloc\n        urllib.parse.quote(to_bytes(parts.path, path_encoding), safe=\"\"),     # encode path\n        urllib.parse.quote(to_bytes(parts.params, path_encoding), safe=\"\"),   # encode params\n        urllib.parse.quote(to_bytes(parts.query, path_encoding), safe=\"\"),    # encode query\n        urllib.parse.quote(to_bytes(parts.fragment, path_encoding), safe=\"\"), # encode fragment\n    )",
            "imports": [
                "import urllib.parse"
            ]
        }
    ]
}