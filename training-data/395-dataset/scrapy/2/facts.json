{
    "1.1.1": "def __setitem__(self, key, value):\n    while len(self) >= self.limit:\n        self.popitem(last=False)\n    super(LocalCache, self).__setitem__(key, value)\n",
    "1.1.2": null,
    "1.2.1": "class LocalCache(collections.OrderedDict)",
    "1.2.2": "Dictionary with a finite number of keys.\n\nOlder items expires first.",
    "1.2.3": [
        "__setitem__(self, key, value)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_2/scrapy/utils/datatypes.py",
    "1.3.2": [
        "__setitem__(self, key, value)",
        "__setitem__(self, key, value)",
        "__setitem__(self, key, value)"
    ],
    "1.4.1": [
        "    def test_cache_without_limit(self):\n        max = 10**4\n        cache = LocalCache()\n        for x in range(max):\n            cache[str(x)] = x\n        self.assertEqual(len(cache), max)\n        for x in range(max):\n            self.assertIn(str(x), cache)\n            self.assertEqual(cache[str(x)], x)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_2/tests/test_utils_datatypes.py"
    ],
    "2.1.1": [
        [
            "E       TypeError: '>=' not supported between instances of 'int' and 'NoneType'"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_utils_datatypes.LocalCacheTest testMethod=test_cache_without_limit>\n\n    def test_cache_without_limit(self):\n        max = 10**4\n        cache = LocalCache()\n        for x in range(max):\n>           cache[str(x)] = x\n\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_2/tests/test_utils_datatypes.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = LocalCache(), key = '0', value = 0\n\n    def __setitem__(self, key, value):\n>       while len(self) >= self.limit:",
            "\n/Volumes/SSD2T/bgp_envs_non_pandas/repos/scrapy_2/scrapy/utils/datatypes.py:318: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": null,
    "3.1.2": null
}