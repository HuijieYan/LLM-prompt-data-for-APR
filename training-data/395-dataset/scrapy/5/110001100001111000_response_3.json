{
    "scrapy": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 107,
            "file_name": "scrapy/http/response/__init__.py",
            "replace_code": "def follow(self, url, callback=None, method='GET', headers=None, body=None,\n           cookies=None, meta=None, encoding='utf-8', priority=0,\n           dont_filter=False, errback=None):\n    # type: (...) -> Request\n    \"\"\"\n    Return a :class:`~.Request` instance to follow a link ``url``.\n    It accepts the same arguments as ``Request.__init__`` method,\n    but ``url`` can be a relative URL or a ``scrapy.link.Link`` object,\n    not only an absolute URL.\n    \n    :class:`~.TextResponse` provides a :meth:`~.TextResponse.follow` \n    method which supports selectors in addition to absolute/relative URLs\n    and Link objects.\n    \"\"\"\n    if isinstance(url, Link):\n        url = url.url\n    url = self.urljoin(url)\n    return Request(url, callback,\n                   method=method,\n                   headers=headers,\n                   body=body,\n                   cookies=cookies,\n                   meta=meta,\n                   encoding=encoding,\n                   priority=priority,\n                   dont_filter=dont_filter,\n                   errback=errback)",
            "import_list": []
        }
    ]
}