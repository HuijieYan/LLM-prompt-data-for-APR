{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n        r\"\"\"Build a URL based on a view name and the values provided.\n    \n        In order to build a URL, all request parameters must be supplied as\n        keyword arguments, and each parameter must pass the test for the\n        specified parameter type. If these conditions are not met, a\n        `URLBuildError` will be thrown.\n    \n        Keyword arguments that are not request parameters will be included in\n        the output URL's query string.\n    \n        :param view_name: string referencing the view name\n        :param \\**kwargs: keys and values that are used to build request\n            parameters and query string arguments.\n    \n        :return: the built URL\n    \n        Raises:\n            URLBuildError\n        \"\"\"\n        kw: Dict[str, str] = {}\n        # special static files url_for\n        if view_name == \"static\":\n            kw.update(name=kwargs.pop(\"name\", \"static\"))\n        elif view_name.endswith(\".static\"):  # blueprint.static\n            kwargs.pop(\"name\", None)\n            kw.update(name=view_name)\n        \n        uri, route = self.router.find_route_by_view_name(view_name, **kw)\n        if not (uri and route):\n            raise URLBuildError(\n                \"Endpoint with name `{}` was not found\".format(view_name)\n            )\n        \n        out = uri\n\n        # find all the parameters we will need to build in the URL\n        matched_params = re.findall(self.router.parameter_pattern, uri)\n\n        for match in matched_params:\n            name, _type, pattern = self.router.parse_parameter_string(match)\n            specific_pattern = \"^{}$\".format(pattern)\n            if name in kwargs:\n                supplied_param = kwargs.get(name)\n                del kwargs[name]\n            else:\n                raise URLBuildError(\n                    \"Required parameter `{}` was not passed to url_for\".format(\n                        name\n                    )\n                )\n            supplied_param = str(supplied_param)\n    \n            replacement_regex = \"(<{}.*?>)\".format(name)\n            out = re.sub(replacement_regex, supplied_param, out)\n\n        query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n        out = urlunparse((self.config.get(\"SERVER_NAME\", \"\"), out, \"\", query_string, \"\"))\n        \n        return out",
            "import_list": []
        }
    ]
}