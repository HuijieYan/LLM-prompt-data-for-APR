{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, _external=False, **kwargs):\n    r\"\"\"Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    uri, route = self.router.find_route_by_view_name(view_name, **kwargs)\n    if uri is None:\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    out = uri\n\n    # find all the parameters we will need to build in the URL\n    matched_params = re.findall(self.router.parameter_pattern, uri)\n\n    # _external need SERVER_NAME in config or pass _server arg\n    scheme = kwargs.pop(\"_scheme\", None)\n    netloc = kwargs.pop(\"_server\", None)\n    if _external and not netloc:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n\n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n\n        if name in kwargs:\n            supplied_param = kwargs[name]\n            del kwargs[name]\n        else:\n            raise URLBuildError(\n                \"Required parameter `{}` was not passed to url_for\".format(name)\n            )\n\n        # replace the parameter in the URL with the supplied value\n        replacement_regex = \"(<{}.*?>)\".format(name)\n        out = re.sub(replacement_regex, str(supplied_param), out)\n\n    # parse the remainder of the keyword arguments into a querystring\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out = urlunparse((scheme, netloc, out, \"\", query_string, \"\"))\n\n    return out",
            "imports": []
        }
    ]
}