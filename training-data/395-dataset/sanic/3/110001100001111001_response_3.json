{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    kw: Dict[str, str] = {}\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n\n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n\n    for key, value in kwargs.items():\n        if value is not None:\n            if key in uri:\n                uri = uri.replace(\"<\" + key + \">\", str(value))\n            else:\n                if \"?\" in uri:\n                    uri += \"&\"\n                else:\n                    uri += \"?\"\n                uri += key + \"=\" + str(value)\n\n    if \"_external\" in kwargs and kwargs[\"_external\"]:\n        if route.host:\n            scheme = \"http\" if route.is_http else \"https\"\n            netloc = route.get_host()\n        else:\n            netloc = self.config.get(\"SERVER_NAME\", \"\")\n\n    if netloc:\n        out = urlunparse((scheme, netloc, uri, \"\", \"\", \"\"))\n    else:\n        out = uri\n\n    return out",
            "import_list": []
        }
    ]
}