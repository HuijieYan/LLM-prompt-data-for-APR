{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    r\"\"\"Build a URL based on a view name and the values provided.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    if \"host\" in kwargs:\n        host = kwargs[\"host\"]\n    else:\n        host = self.config.get('SERVER_NAME')\n\n    uri, route = self.router.find_route_by_view_name(view_name)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n\n    out = uri\n\n    matched_params = re.findall(self.router.parameter_pattern, uri)\n\n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n\n        if name in kwargs:\n            supplied_param = kwargs.get(name)\n            del kwargs[name]\n        else:\n            raise URLBuildError(\n                \"Required parameter `{}` was not passed to url_for\".format(\n                    name\n                )\n            )\n\n        supplied_param = str(supplied_param)\n        specific_pattern = \"^{}$\".format(pattern)\n        passes_pattern = re.match(specific_pattern, supplied_param)\n\n        if not passes_pattern:\n            if _type != str:\n                msg = (\n                    'Value \"{}\" for parameter `{}` does not '\n                    \"match pattern for type `{}`: {}\".format(\n                        supplied_param, name, _type.__name__, pattern\n                    )\n                )\n            else:\n                msg = (\n                    'Value \"{}\" for parameter `{}` '\n                    \"does not satisfy pattern {}\".format(\n                        supplied_param, name, pattern\n                    )\n                )\n            raise URLBuildError(msg)\n\n        replacement_regex = \"(<{}.*?>)\".format(name)\n        out = re.sub(replacement_regex, supplied_param, out)\n\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out = urlunparse((\"http\", host, out, \"\", query_string, \"\"))\n    return out",
            "import_list": []
        }
    ]
}