{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs: str) -> str:\n    \"\"\"\n    Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    kw: Dict[str, str] = {}\n\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n\n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n\n    if view_name == \"static\" or view_name.endswith(\".static\"):\n        filename = kwargs.pop(\"filename\", None)\n        if \"<file_uri:\" in uri:\n            folder_ = uri.split(\"<file_uri:\", 1)[0]\n            if folder_.endswith(\"/\"):\n                folder_ = folder_[:-1]\n\n            if filename.startswith(\"/\"):\n                filename = filename[1:]\n\n            uri = \"{}/{}\".format(folder_, filename)\n\n    if uri != \"/\" and uri.endswith(\"/\"):\n        uri = uri[:-1]\n\n    out = uri\n\n    matched_params = re.findall(\"<(.+?)>\", uri)\n\n    kwargs.pop(\"_method\", None)\n    anchor = kwargs.pop(\"_anchor\", \"\")\n    external = kwargs.pop(\"_external\", False)\n    scheme = kwargs.pop(\"_scheme\", \"\")\n\n    if scheme and not external:\n        raise ValueError(\"When specifying _scheme, _external must be True\")\n\n    netloc = kwargs.pop(\"_server\", None)\n    if netloc is None and external:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n\n    if external:\n        if not scheme:\n            if \":\" in netloc[:8]:\n                scheme = netloc[:8].split(\":\", 1)[0]\n            else:\n                scheme = \"http\"\n\n        if \"://\" in netloc[:8]:\n            netloc = netloc.split(\"://\", 1)[-1]\n\n    for match in matched_params:\n        supplied_param = kwargs.get(match, None)\n        if supplied_param is None:\n            raise URLBuildError(\n                f\"Required parameter `{match}` was not passed to url_for\"\n            )\n\n        supplied_param = str(supplied_param)\n\n        specific_pattern = r\"\\(.+?\\)\"\n        passes_pattern = re.match(specific_pattern, supplied_param)\n\n        if not passes_pattern:\n            raise URLBuildError(\n                f'Value \"{supplied_param}\" for parameter `{match}` does not match pattern: {supplied_param}'\n            )\n\n        out = out.replace(f\"<{match}>\", supplied_param)\n\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out = urlunparse((scheme, netloc, out, \"\", query_string, anchor))\n\n    return out",
            "imports": [
                "from typing import Dict",
                "import re",
                "from urllib.parse import urlencode, urlunparse"
            ]
        }
    ]
}