{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    r\"\"\"Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n\n    def check_route(route_name, request_params):\n        uri, route = self.router.find_route_by_view_name(route_name)\n        if not (uri and route):\n            raise URLBuildError(\n                \"Endpoint with name `{}` was not found\".format(route_name)\n            )\n        return uri, route\n\n    def process_params(uri, route, anchor, external, scheme, netloc, kwargs):\n        for match in re.finditer(self.router.parameter_pattern, uri):\n            name, _type, pattern = self.router.parse_parameter_string(match.group())\n\n            if name not in kwargs:\n                raise URLBuildError(\n                    \"Required parameter `{}` was not passed to url_for\".format(name)\n                )\n\n            supplied_param = kwargs.pop(name)\n            if not re.match(\"^{}$\".format(pattern), supplied_param):\n                raise URLBuildError(\n                    'Value \"{}\" for parameter `{}` does not match pattern for type `{}`: {}'.format(\n                        supplied_param, name, _type.__name__, pattern\n                    )\n                )\n\n            uri = uri.replace(\"<{}>\".format(name), str(supplied_param), 1)\n\n        query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n        return urlunparse(\n            (scheme, netloc, uri, \"\", query_string, anchor)\n        )\n\n    kw = {}\n    options = (\"_anchor\", \"_external\", \"_scheme\", \"_server\")\n    for option in options:\n        kw[option] = kwargs.pop(option, None)\n\n    route = None\n    anchor, external, scheme, netloc = (kw[option] for option in options)\n\n    if view_name == \"static\":\n        kw[\"name\"] = kwargs.pop(\"name\", \"static\")\n    elif view_name.endswith(\".static\"):\n        kwargs.pop(\"name\", None)\n        kw[\"name\"] = view_name\n\n    uri, route = check_route(view_name, kw)\n    if view_name in (\"static\", \"blueprint.static\"):\n        uri = process_static_paths(view_name, uri, kwargs)\n\n    if not uri:\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n\n    out = uri[:-1] if uri != \"/\" and uri.endswith(\"/\") else uri\n    out, query_string = process_params(uri, route, anchor, external, scheme, netloc, kwargs)\n\n    return out + query_string",
            "import_list": []
        }
    ]
}