{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    r\"\"\"Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    kw: Dict[str, str] = {}\n    # find the route by the supplied view name\n    # ... omitted code ...\n\n    if kwargs.pop(\"_external\", False):\n        # Handle external URLs\n        netloc = kwargs.pop(\"_server\", None)\n        if not netloc:\n            netloc = self.config.get(\"SERVER_NAME\", \"\")\n            if not netloc:\n                raise ValueError(\"Configuration parameter SERVER_NAME is required for external URLs\")\n        scheme = kwargs.pop(\"_scheme\", None)\n        if not scheme:\n            scheme = \"http\"  # Default to HTTP if scheme not provided\n\n        if not netloc.startswith(('http://', 'https://')):\n            netloc = '{}://{}'.format(scheme, netloc)\n\n    # ... omitted code ...\n\n    return urlunparse((scheme, netloc, out, \"\", query_string, anchor))",
            "imports": []
        }
    ]
}