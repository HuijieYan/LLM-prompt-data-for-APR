{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    # Find the route by the supplied view name\n\n    kw: Dict[str, str] = {}\n    # Special static files url_for\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n    \n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    \n    # Construct the URL based on the route and supplied parameters\n    out = uri\n    \n    # Handle the remaining keyword arguments as query string parameters\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    \n    # Check if the URL should be generated as an external URL\n    external = kwargs.pop(\"_external\", False)\n    \n    # Get the server name from the config or the specified _server argument\n    netloc = kwargs.pop(\"_server\", None)\n    if netloc is None and external:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n    \n    # Construct the fully qualified URL\n    if external:\n        scheme = kwargs.pop(\"_scheme\", \"http\")\n        if scheme and not external:\n            raise ValueError(\"When specifying _scheme, _external must be True\")\n    \n        # Handle the case where the scheme or netloc is not provided\n        if not scheme:\n            scheme = \"http\"\n        if not netloc:\n            netloc = \"example.com\"\n    \n        if uri != \"/\" and uri.endswith(\"/\"):\n            uri = uri[:-1]\n    \n        # Construct the URL using the parsed components\n        out = urlunparse((scheme, netloc, uri, \"\", query_string, \"\"))\n    \n    return out"
        }
    ]
}