{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    # ... (other unchanged code)\n\n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n        \n        if name in kwargs:\n            supplied_param = kwargs.get(name)\n            del kwargs[name]\n        else:\n            raise URLBuildError(\n                \"Required parameter `{}` was not passed to url_for\".format(\n                    name\n                )\n            )\n\n        supplied_param = str(supplied_param)\n        # determine if the parameter supplied by the caller passes the test\n        # in the URL\n        passes_pattern = re.match(pattern, supplied_param)\n\n        if not passes_pattern:\n            if _type != str:\n                msg = (\n                    'Value \"{}\" for parameter `{}` does not '\n                    \"match pattern for type `{}`: {}\".format(\n                        supplied_param, name, _type.__name__, pattern\n                    )\n                )\n            else:\n                msg = (\n                    'Value \"{}\" for parameter `{}` '\n                    \"does not satisfy pattern {}\".format(\n                        supplied_param, name, pattern\n                    )\n                )\n            raise URLBuildError(msg)\n\n        # replace the parameter in the URL with the supplied value\n        out = out.replace('<{}>'.format(name), supplied_param)\n\n    # ... (other unchanged code)\n\n    return out",
            "import_list": [
                "from urllib.parse import (\n    urlencode,\n    urlunparse\n)"
            ]
        }
    ]
}