{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n\n    r\"\"\"Build a URL based on a view name and the values provided.\n    \n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n    \n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n    \n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n    \n    :return: the built URL\n    \n    Raises:\n        URLBuildError\n    \"\"\"\n    \n    kw: Dict[str, str] = {}\n    \n    # Handle special cases for static routes\n    if view_name == \"static\" or view_name.endswith(\".static\"):\n        kw.update(name=kwargs.pop(\"name\", view_name))\n        kwargs.pop(\"name\", None)\n    \n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    \n    if not (uri and route):\n        raise URLBuildError(\"Endpoint with name `{}` was not found\".format(view_name))\n    \n    filename = kwargs.pop(\"filename\", None)\n    \n    # For static folder routes\n    if \"<file_uri:\" in uri:\n        folder_ = uri.split(\"<file_uri:\", 1)[0]\n        if folder_.endswith(\"/\"):\n            folder_ = folder_[:-1]\n        \n        if filename.startswith(\"/\"):\n            filename = filename[1:]\n        \n        uri = \"{}/{}\".format(folder_, filename)\n    \n    if uri != \"/\" and uri.endswith(\"/\"):\n        uri = uri[:-1]\n    \n    # Find all the parameters needed to build the URL\n    matched_params = re.findall(self.router.parameter_pattern, uri)\n    kwargs.pop(\"_method\", None)\n    anchor = kwargs.pop(\"_anchor\", \"\")\n    external = kwargs.pop(\"_external\", False)\n    scheme = kwargs.pop(\"_scheme\", \"\")\n    \n    if scheme and not external:\n        raise ValueError(\"When specifying _scheme, _external must be True\")\n    \n    netloc = kwargs.pop(\"_server\", None)\n    if netloc is None and external:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n    \n    if external:\n        if not scheme:\n            if \":\" in netloc[:8]:\n                scheme = netloc[:8].split(\":\", 1)[0]\n            else:\n                scheme = \"http\"\n    \n        if \"://\" in netloc[:8]:\n            netloc = netloc.split(\"://\", 1)[-1]\n    \n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n        specific_pattern = \"^{}$\".format(pattern)\n        supplied_param = kwargs.get(name)\n    \n        if supplied_param is None:\n            raise URLBuildError(\"Required parameter `{}` was not passed to url_for\".format(name))\n        \n        supplied_param = str(supplied_param)\n        passes_pattern = re.match(specific_pattern, supplied_param)\n        \n        if not passes_pattern:\n            if _type != str:\n                msg = 'Value \"{}\" for parameter `{}` does not match pattern for type `{}`: {}'.format(\n                    supplied_param, name, _type.__name__, pattern\n                )\n            else:\n                msg = 'Value \"{}\" for parameter `{}` does not satisfy pattern {}'.format(\n                    supplied_param, name, pattern\n                )\n            raise URLBuildError(msg)\n        \n        replacement_regex = \"(<{}.*?>)\".format(name)\n        uri = re.sub(replacement_regex, supplied_param, uri)\n    \n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out = urlunparse((scheme, netloc, uri, \"\", query_string, anchor))\n    \n    return out"
        }
    ]
}