{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    # existing code ...\n\n\n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    \n    if route.blueprint:\n        host = route.blueprint.get(\"host\")\n        if host and kwargs.pop(\"_external\", False):\n            scheme = kwargs.pop(\"_scheme\", \"http\")\n            netloc = host\n        else:\n            netloc = self.config.get(\"SERVER_NAME\", \"\")\n    \n    # existing code ...\n    # construct the URL using the updated netloc\n    out = urlunparse((scheme, netloc, out, \"\", query_string, anchor))\n    \n    return out"
        }
    ]
}