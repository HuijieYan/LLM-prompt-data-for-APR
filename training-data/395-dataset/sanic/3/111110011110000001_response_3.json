{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    # existing code...\n    external = kwargs.pop(\"_external\", False)\n    scheme = kwargs.pop(\"_scheme\", \"\")\n\n    if scheme and not external:\n        raise ValueError(\"When specifying _scheme, _external must be True\")\n\n    netloc = kwargs.pop(\"_server\", None)\n    if netloc is None and external:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n        if view_name in self.router.routes_all:\n            uri, route = self.router.routes_all[view_name]\n        else:\n            uri, route = self.router.routes_all[view_name] = self.router.find_route_by_view_name(view_name, **kw)\n\n        if not (uri and route):\n            raise URLBuildError(\n                \"Endpoint with name `{}` was not found\".format(view_name)\n            )\n        \n        if netloc and '://' not in netloc:\n            netloc = 'http://' + netloc\n        out = netloc + uri\n    \n        query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n        out += '?' + query_string if query_string else ''\n        out += '#' + kwargs.pop(\"_anchor\", \"\") if kwargs.get(\"_anchor\") else ''\n        return out",
            "imports": []
        }
    ]
}