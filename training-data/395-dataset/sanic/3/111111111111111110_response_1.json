{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    r\"\"\"Build a URL based on a view name and the values provided.\n\n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n\n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n\n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n\n    :return: the built URL\n\n    Raises:\n        URLBuildError\n    \"\"\"\n    # Find the route by the supplied view name\n    name = kwargs.get(\"name\")\n    if view_name == \"static\":\n        name = name if name else \"static\"\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        name = view_name\n\n    uri, _ = self.router.find_route_by_view_name(view_name, name=name)\n    if not uri:\n        raise URLBuildError(\n            f\"Endpoint with name `{view_name}` was not found\"\n        )\n\n    for key in list(kwargs.keys()):\n        if key in ('_method', '_anchor', '_external', '_scheme', '_server'):\n            del kwargs[key]\n\n    anchor = kwargs.pop(\"_anchor\", \"\")\n    external = kwargs.pop(\"_external\", False)\n    scheme = kwargs.pop(\"_scheme\", \"\")\n    if scheme and not external:\n        raise ValueError(\"When specifying _scheme, _external must be True\")\n\n    netloc = kwargs.pop(\"_server\", \"\")\n    host = uri.split(':', 1)[0]\n    netloc = host if external else netloc\n    scheme = \"http\" if not scheme and not host else scheme\n\n    replacements = re.findall(r'<([a-zA-Z_][a-zA-Z0-9_]*)>', uri)\n    for match in replacements:\n        if match not in kwargs:\n            raise URLBuildError(f\"Required parameter `{match}` was not passed to url_for\")\n\n    for match in replacements.copy():\n        pattern = re.compile(f'<{match}:.*?>')\n        value = kwargs[match]\n        if not re.match(pattern, value):\n            raise URLBuildError(f'Value \"{value}\" for parameter `{match}` does not match pattern {pattern}')\n\n        uri = re.sub(pattern, value, uri)\n\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    uri = urlunparse((scheme, netloc, uri, \"\", query_string, anchor))\n\n    return uri",
            "import_list": []
        }
    ]
}