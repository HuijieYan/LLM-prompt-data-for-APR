{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n        r\"\"\"Build a URL based on a view name and the values provided.\n        \n        ... (rest of the docstring)\n\n        :return: the built URL\n\n        Raises:\n            URLBuildError\n        \"\"\"\n        # ... (existing code)\n\n        anchor = kwargs.pop(\"_anchor\", \"\")\n        external = kwargs.pop(\"_external\", False)\n\n        uri, route = self.router.find_route_by_view_name(view_name, **kwargs)\n        if not (uri and route):\n            raise URLBuildError(\n                \"Endpoint with name `{}` was not found\".format(view_name)\n            )\n\n        out = uri\n\n        # handling the host for internal and external URLs\n        if not external:\n            host = None\n        else:\n            host = route.get(\"host\")\n\n        # construct output URL based on host and path\n        if host:\n            if not host.startswith(\"http\"):  # make sure it's a valid URL\n                host = \"http://\" + host\n            uri = urlunparse((host, \"\", uri, \"\", \"\", \"\"))\n            out = uri\n\n        # find all the parameters we will need to build in the URL\n        matched_params = re.findall(self.router.parameter_pattern, uri)\n\n        # ... (existing code)\n\n        # construct the remainder of the keyword arguments into a querystring\n        query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n        out = urlunparse((\"\", \"\", out, \"\", query_string, anchor))\n\n        return out",
            "imports": [
                "from sanic.exceptions import URLBuildError",
                "from urllib.parse import urlencode, urlunparse",
                "import re",
                "from typing import Dict"
            ]
        }
    ]
}