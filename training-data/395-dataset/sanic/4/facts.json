{
    "1.1.1": "def url_for(self, view_name, **kwargs):\n    \n    # Full URL SERVER_NAME can only be handled in app.url_for\n    if \"//\" in self.app.config.SERVER_NAME:\n        return self.app.url_for(view_name, _external=True, **kwargs)\n\n    scheme = self.scheme\n    host = self.server_name\n    port = self.server_port\n\n    if (scheme.lower() in (\"http\", \"ws\") and port == 80) or (\n        scheme.lower() in (\"https\", \"wss\") and port == 443\n    ):\n        netloc = host\n    else:\n        netloc = \"{}:{}\".format(host, port)\n\n    return self.app.url_for(\n        view_name, _external=True, _scheme=scheme, _server=netloc, **kwargs\n    )\n",
    "1.1.2": "Same as :func:`sanic.Sanic.url_for`, but automatically determine\n`scheme` and `netloc` base on the request. Since this method is aiming\nto generate correct schema & netloc, `_external` is implied.\n\n:param kwargs: takes same parameters as in :func:`sanic.Sanic.url_for`\n:return: an absolute url to the given view\n:rtype: str",
    "1.2.1": "class Request()",
    "1.2.2": "Properties of an HTTP request such as URL, headers, etc.",
    "1.2.3": [
        "port(self)",
        "server_name(self)",
        "server_port(self)",
        "scheme(self)",
        "host(self)",
        "url_for(self, view_name, **kwargs)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "sanic/request.py",
    "1.3.2": [
        "port(self)",
        "server_name(self)",
        "server_port(self)",
        "scheme(self)",
        "host(self)",
        "url_for(self, view_name, **kwargs)"
    ],
    "1.4.1": [
        "def test_url_for_without_server_name(app):\n    @app.route(\"/sample\")\n    def sample(request):\n        return json({\"url\": request.url_for(\"url_for\")})\n\n    @app.route(\"/url-for\")\n    def url_for(request):\n        return text(\"url-for\")\n\n    request, response = app.test_client.get(\"/sample\")\n    assert (\n        response.json[\"url\"]\n        == f\"http://127.0.0.1:{app.test_client.port}/url-for\"\n    )"
    ],
    "1.4.2": [
        "tests/test_requests.py"
    ],
    "2.1.1": [
        [
            "E       TypeError: 'NoneType' object is not subscriptable"
        ]
    ],
    "2.1.2": [
        [
            "app = <sanic.app.Sanic object at 0x10a74bc10>\n\n    def test_url_for_without_server_name(app):\n        @app.route(\"/sample\")\n        def sample(request):\n            return json({\"url\": request.url_for(\"url_for\")})\n    \n        @app.route(\"/url-for\")\n        def url_for(request):\n            return text(\"url-for\")\n    \n        request, response = app.test_client.get(\"/sample\")\n>       assert (\n            response.json[\"url\"]\n            == f\"http://127.0.0.1:{app.test_client.port}/url-for\"\n        )",
            "\ntests/test_requests.py:2118: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self.app": {
                    "value": "<sanic.app.Sanic object at 0x10a5f1ca0>",
                    "shape": null,
                    "omitted": false
                },
                "self": {
                    "value": "<Request: GET /sample>",
                    "shape": null,
                    "omitted": false
                },
                "view_name": {
                    "value": "'url_for'",
                    "shape": "7",
                    "omitted": false
                },
                "kwargs": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "self.scheme": {
                    "value": "'http'",
                    "shape": "4",
                    "omitted": false
                },
                "self.server_name": {
                    "value": "'127.0.0.1'",
                    "shape": "9",
                    "omitted": false
                },
                "self.server_port": {
                    "value": "42101",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "scheme": {
                    "value": "'http'",
                    "shape": "4",
                    "omitted": false
                },
                "host": {
                    "value": "'127.0.0.1'",
                    "shape": "9",
                    "omitted": false
                },
                "port": {
                    "value": "42101",
                    "shape": null,
                    "omitted": false
                },
                "netloc": {
                    "value": "'127.0.0.1:42101'",
                    "shape": "15",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.app": "Sanic",
                "self": "Request",
                "view_name": "str",
                "kwargs": "dict",
                "self.scheme": "str",
                "self.server_name": "str",
                "self.server_port": "int"
            },
            {
                "scheme": "str",
                "host": "str",
                "port": "int",
                "netloc": "str"
            }
        ]
    ],
    "3.1.1": [
        "Improve documentation in *Accessing values using get and getlist*\n",
        "Using request.url_for throws KeyError: 'SERVER_NAME' in 19.9.0\n"
    ],
    "3.1.2": [
        "Is your feature request related to a problem? Please describe.\nDocumentation here should be improved:\nhttps://sanic.readthedocs.io/en/latest/sanic/request_data.html#accessing-values-using-get-and-getlist\nIt isn't clear how to use get and getlist\n\nDescribe the solution you'd like\nChange\n\nThe request properties which return a dictionary actually return a subclass of dict called RequestParameters.\n\nTo\n\nrequest.args which return a dictionary actually return a subclass of dict called RequestParameters.\n",
        "Describe the bug\nRunning Sanic behind a proxy and trying to generate an url using request.url_for throws a KeyError. This used to work but now Sanic suddenly requires a SERVER_NAME in order to do this. I get the following trace:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/site-packages/sanic/app.py\", line 942, in handle_request\n    response = await response\n  File \"/app/tsauth/views/activate.py\", line 41, in init_activate\n    request=request)\n  File \"/usr/local/lib/python3.7/site-packages/mako/template.py\", line 476, in render\n    return runtime._render(self, self.callable_, args, data)\n  File \"/usr/local/lib/python3.7/site-packages/mako/runtime.py\", line 883, in _render\n    **_kwargs_for_callable(callable_, data)\n  File \"/usr/local/lib/python3.7/site-packages/mako/runtime.py\", line 920, in _render_context\n    _exec_template(inherit, lclcontext, args=args, kwargs=kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/mako/runtime.py\", line 947, in _exec_template\n    callable_(context, *args, **kwargs)\n  File \"transaction_mako\", line 60, in render_body\n  File \"/usr/local/lib/python3.7/site-packages/sanic/request.py\", line 522, in url_for\n    if \"//\" in self.app.config.SERVER_NAME:\n  File \"/usr/local/lib/python3.7/site-packages/sanic/config.py\", line 54, in __getattr__\n    raise AttributeError(\"Config has no '{}'\".format(ke.args[0]))\nAttributeError: Config has no 'SERVER_NAME'\n[2019-10-23 12:38:09 +0000] - (sanic.access)[INFO][<redacted>:33328]: GET <redacted>  500 144\n10/23/2019 12:38:09 PM ERROR Exception occurred while handling uri: '<redacted>'\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/site-packages/sanic/config.py\", line 52, in __getattr__\n    return self[attr]\nKeyError: 'SERVER_NAME'\nCode snippet\nrequest.url_for(\"static\",  name='static', filename=\"badge.png\")\n\nExpected behavior\nrequest.url_for should generate a full url with the given path, e.g. https://hostname:port/static/badge.png. As I am running my server behind a proxy, I do not want to hardcode the hostname in the SERVER_NAME. This used to work with Sanic version 19.6.3.\n\nEnvironment (please complete the following information):\n\nPython 3.7 Docker container, Kubernetes v1.16.2 with nginx-ingress 0.26.1\nSanic version 19.9.0\nAdditional context\nThe calling code to request.url_for has not changed since the Sanic version update.\nThe documentation also does not speak a word about why the SERVER_NAME variable needs to be configured...\n"
    ]
}