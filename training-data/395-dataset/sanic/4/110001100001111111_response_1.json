{
    "sanic": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 511,
            "file_name": "sanic/request.py",
            "replace_code": "def url_for(self, view_name, **kwargs):\n    \"\"\"\n    Same as :func:`sanic.Sanic.url_for`, but automatically determine\n    `scheme` and `netloc` base on the request. Since this method is aiming\n    to generate correct schema & netloc, `_external` is implied.\n\n    :param kwargs: takes same parameters as in :func:`sanic.Sanic.url_for`\n    :return: an absolute url to the given view\n    :rtype: str\n    \"\"\"\n    scheme = self.scheme\n    host = self.server_name\n    port = self.server_port\n    netloc = \"{}:{}\".format(host, port)\n\n    return self.app.url_for(\n        view_name, _external=True, _scheme=scheme, _server=netloc, **kwargs\n    )",
            "import_list": []
        }
    ]
}