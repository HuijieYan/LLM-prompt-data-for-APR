{
    "1.1.1": "def __len__(self):\n    return self.total if self.iterable is None else \\\n        (self.iterable.shape[0] if hasattr(self.iterable, \"shape\")\n         else len(self.iterable) if hasattr(self.iterable, \"__len__\")\n         else getattr(self, \"total\", None))\n",
    "1.1.2": null,
    "1.2.1": "class tqdm(Comparable)",
    "1.2.2": "Decorate an iterable object, returning an iterator which acts exactly\nlike the original iterable, but prints a dynamically updating\nprogressbar every time a value is requested.",
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "tqdm/_tqdm.py",
    "1.3.2": null,
    "1.4.1": [
        "@with_setup(pretest, posttest)\ndef test_bool():\n    \"\"\"Test boolean cast\"\"\"\n\n    def internal(our_file, disable):\n        with trange(10, file=our_file, disable=disable) as t:\n            assert t\n        with trange(0, file=our_file, disable=disable) as t:\n            assert not t\n\n        def get_bool_for_tqdm(*args, **kwargs):\n            kwargs['file'] = our_file\n            kwargs['disable'] = disable\n            with tqdm(*args, **kwargs) as t:\n                return bool(t)\n\n        assert get_bool_for_tqdm(total=10)\n        assert not get_bool_for_tqdm(total=0)\n        assert not get_bool_for_tqdm([])\n        assert get_bool_for_tqdm([0])\n        assert get_bool_for_tqdm((x for x in []))\n        assert get_bool_for_tqdm((x for x in [1,2,3]))\n        try:\n            get_bool_for_tqdm()\n        except TypeError:\n            pass\n        else:\n            raise TypeError(\n                \"Expected tqdm() with neither total nor iterable to fail\")\n\n    # test with and without disable\n    with closing(StringIO()) as our_file:\n        internal(our_file, False)\n        internal(our_file, True)"
    ],
    "1.4.2": [
        "tqdm/tests/tests_tqdm.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: 'NoneType' object cannot be interpreted as an integer"
        ]
    ],
    "2.1.2": [
        [
            "@with_setup(pretest, posttest)\n    def test_bool():\n        \"\"\"Test boolean cast\"\"\"\n    \n        def internal(our_file, disable):\n            with trange(10, file=our_file, disable=disable) as t:\n                assert t\n            with trange(0, file=our_file, disable=disable) as t:\n                assert not t\n    \n            def get_bool_for_tqdm(*args, **kwargs):\n                kwargs['file'] = our_file\n                kwargs['disable'] = disable\n                with tqdm(*args, **kwargs) as t:\n                    return bool(t)\n    \n            assert get_bool_for_tqdm(total=10)\n            assert not get_bool_for_tqdm(total=0)\n            assert not get_bool_for_tqdm([])\n            assert get_bool_for_tqdm([0])\n            assert get_bool_for_tqdm((x for x in []))\n            assert get_bool_for_tqdm((x for x in [1,2,3]))\n            try:\n                get_bool_for_tqdm()\n            except TypeError:\n                pass\n            else:\n                raise TypeError(\n                    \"Expected tqdm() with neither total nor iterable to fail\")\n    \n        # test with and without disable\n        with closing(StringIO()) as our_file:\n>           internal(our_file, False)\n\ntqdm/tests/tests_tqdm.py:1742: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntqdm/tests/tests_tqdm.py:1730: in internal\n    assert get_bool_for_tqdm((x for x in []))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<generator object test_bool.<locals>.internal.<locals>.<genexpr> at 0x10b046b50>,)\nkwargs = {'disable': False, 'file': <_io.StringIO object at 0x10ae8f0f0>}\nt = 0it [00:00, ?it/s]\n\n    def get_bool_for_tqdm(*args, **kwargs):\n        kwargs['file'] = our_file\n        kwargs['disable'] = disable\n        with tqdm(*args, **kwargs) as t:\n>           return bool(t)",
            "\ntqdm/tests/tests_tqdm.py:1724: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.iterable": "range(0, 10)",
                "self": "  0%",
                "self.total": "10"
            },
            {}
        ],
        [
            {
                "self.iterable": "range(0, 0)",
                "self": "0it [00:00, ?it/s]",
                "self.total": "0"
            },
            {}
        ],
        [
            {
                "self": "  0%",
                "self.total": "10"
            },
            {}
        ],
        [
            {
                "self": "0it [00:00, ?it/s]",
                "self.total": "0"
            },
            {}
        ],
        [
            {
                "self.iterable": "[]",
                "self": "0it [00:00, ?it/s]",
                "self.total": "0"
            },
            {}
        ],
        [
            {
                "self.iterable": "[0]",
                "self": "  0%",
                "self.total": "1"
            },
            {}
        ],
        [
            {
                "self.iterable": "<generator object test_bool.<locals>.internal.<locals>.<genexpr> at 0x106e4e050>",
                "self": "0it [00:00, ?it/s]"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "self.iterable": "range",
                "self": "tqdm",
                "self.total": "int"
            },
            {}
        ],
        [
            {
                "self.iterable": "range",
                "self": "tqdm",
                "self.total": "int"
            },
            {}
        ],
        [
            {
                "self": "tqdm",
                "self.total": "int"
            },
            {}
        ],
        [
            {
                "self": "tqdm",
                "self.total": "int"
            },
            {}
        ],
        [
            {
                "self.iterable": "list",
                "self": "tqdm",
                "self.total": "int"
            },
            {}
        ],
        [
            {
                "self.iterable": "list",
                "self": "tqdm",
                "self.total": "int"
            },
            {}
        ],
        [
            {
                "self.iterable": "generator",
                "self": "tqdm"
            },
            {}
        ]
    ],
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "tqdm object cannot be treated as bool when used with opened file\n"
    ],
    "3.1.2": [
        "My use-case was to display upload progress when sending file with POST using requests library. I wrapped opened file with tqdm:\n\nf = open(filename, 'rb')\nt = tqdm(f)\nrequests.post(url, data=t)\nAnd I got an error:\n\n<...>\n  File \"/tmp/env/lib/python3.6/site-packages/requests/sessions.py\", line 467, in request\n    data = data or {},\n  File \"/tmp/env/lib/python3.6/site-packages/tqdm/_tqdm.py\", line 753, in __len__\n    else len(self.iterable)) if self.iterable is not None \\\nTypeError: object of type '_io.BufferedReader' has no len()\nTurned out that _io.BufferedReader doesn't know file's length.\nOkay, I passed file length to tqdm explicitly:\nt = tqdm(f, total=os.path.getsize(filename))\nNothing changed.\n\nNow, the problem happens when requests tries to treat tqdm as boolean to determine if there something passed or not. Tqdm has no __bool__, so Python falls back to __len__. And __len__ is buggy in that it tries to get len(self.iterable) without checking if the iterable supports __len__.\n\nI think it would be good to:\n(1) return correct length if total was passed for non-measurable iterable; and probably\n(2) implement separate __bool__ which would return True if __len__ returned None - e.g. if tqdm was passed an unmeasurable iterable and no explicit total. Or just return True always.\n"
    ]
}