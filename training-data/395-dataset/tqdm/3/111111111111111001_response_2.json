{
    "tqdm": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 950,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def __len__(self):\n    if self.iterable is None:\n        return self.total\n    elif isinstance(self.iterable, range):\n        return len(self.iterable)\n    elif hasattr(self.iterable, \"__len__\"):\n        return len(self.iterable)\n    elif hasattr(self.iterable, \"__next__\"):  # Check if it's a generator\n        try:\n            first_item = next(self.iterable)\n            if first_item is not None:\n                length = 1\n                for _ in self.iterable:\n                    length += 1\n                return length\n            else:\n                return 0\n        except StopIteration:  # Generator is empty\n            return 0\n    else:\n        return getattr(self, \"total\", None)",
            "imports": []
        }
    ]
}