{
    "tqdm": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 641,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def __init__(self, iterable=None, desc=None, total=None, leave=True,\n             file=None, ncols=None, mininterval=0.1, maxinterval=10.0,\n             miniters=None, ascii=None, disable=False, unit='it',\n             unit_scale=False, dynamic_ncols=False, smoothing=0.3,\n             bar_format=None, initial=0, position=None, postfix=None,\n             unit_divisor=1000, gui=False, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    iterable  : iterable, optional\n        Iterable to decorate with a progressbar. Leave blank to manually manage the updates.\n    desc  : str, optional\n        Prefix for the progressbar.\n    total  : int, optional\n        The number of expected iterations. If unspecified, len(iterable) is used if possible. As a last resort, only basic\n        progress statistics are displayed (no ETA, no progressbar). If `gui` is True and this parameter needs subsequent updating,\n        specify an initial arbitrary large positive integer, e.g. int(9e9).\n    leave  : bool, optional\n        If [default: True], keeps all traces of the progressbar upon termination of iteration.\n    file  : `io.TextIOWrapper` or `io.StringIO`, optional\n        Specifies where to output the progress messages (default: sys.stderr). Uses `file.write(str)` and `file.flush()`\n        methods.\n    ncols  : int, optional\n        The width of the entire output message. If specified, dynamically resizes the progressbar to stay within this bound.\n        If unspecified, attempts to use environment width. The fallback is a meter width of 10 and no limit for the counter and\n        statistics. If 0, will not print any meter (only stats).\n    ...\n    Returns\n    -------\n    out  : decorated iterator.\n    \"\"\"\n\n    if file is None:\n        file = sys.stderr\n\n    self.iterable = iterable\n    self.desc = desc or ''\n    self.total = total\n    self.leave = leave\n    self.fp = file\n    self.disable = disable\n    if disable:\n        self.n = initial\n        self.pos = self._get_free_pos(self)\n        return",
            "imports": []
        }
    ]
}