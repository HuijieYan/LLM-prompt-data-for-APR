{
    "tqdm": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 641,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def __init__(self, iterable=None, desc=None, total=None, leave=True,\n                 file=None, ncols=None, mininterval=0.1, maxinterval=10.0,\n                 miniters=None, ascii=None, disable=False, unit='it',\n                 unit_scale=False, dynamic_ncols=False, smoothing=0.3,\n                 bar_format=None, initial=0, position=None, postfix=None,\n                 unit_divisor=1000, gui=False, **kwargs):\n        \"\"\"\n        Initialize the progress bar.\n\n        Parameters\n        ----------\n        iterable : iterable, optional\n            Iterable to decorate with a progress bar.\n        desc : str, optional\n            Prefix for the progress bar.\n        total : int, optional\n            The number of expected iterations.\n        leave : bool, optional\n            If [default: True], keeps all traces of the progressbar\n            upon termination of iteration.\n        file : `io.TextIOWrapper` or `io.StringIO`, optional\n            Specifies where to output the progress messages.\n        ncols : int, optional\n            The width of the entire output message.\n        mininterval : float, optional\n            Minimum progress display update interval, in seconds [default: 0.1].\n        maxinterval : float, optional\n            Maximum progress display update interval, in seconds [default: 10].\n        miniters : int, optional\n            Minimum progress display update interval, in iterations.\n        ascii : bool, optional\n            If unspecified, use unicode to fill the progress bar.\n        disable : bool, optional\n            Whether to disable the entire progressbar wrapper.\n        unit : str, optional\n            String that will be used to define the unit of each iteration.\n        unit_scale : bool or int or float, optional\n            If 1 or True, the number of iterations will be reduced/scaled automatically.\n        dynamic_ncols : bool, optional\n            If set, constantly alters `ncols` to the environment (allowing for window resizes).\n        smoothing : float, optional\n            Exponential moving average smoothing factor for speed estimates.\n        bar_format : str, optional\n            Specify a custom bar string formatting.\n        initial : int, optional\n            The initial counter value.\n        position : int, optional\n            Specify the line offset to print this bar.\n        postfix : dict or *, optional\n            Specify additional stats to display at the end of the bar.\n        unit_divisor : float, optional\n        gui : bool, optional\n            Whether to use matplotlib animations for a graphical output.\n\n        Returns\n        -------\n        out : decorated iterator.\n        \"\"\"",
            "import_list": []
        }
    ]
}