{
    "luigi": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 168,
            "file_name": "luigi/worker.py",
            "replace_code": "def run(worker_id, task, random_seed, _run_get_new_deps, result_queue):\n    logger.info('[pid %s] Worker %s running   %s', os.getpid(), worker_id, task.task_id)\n\n    if random_seed:\n        # Need to have different random seeds if running in separate processes\n        random.seed((os.getpid(), time.time()))\n\n    status = 'FAILED'\n    error_message = ''\n    missing = []\n    new_deps = []\n    try:\n        # Verify that all the tasks are fulfilled!\n        missing = [dep.task_id for dep in task.deps() if not dep.complete()]\n        if missing:\n            deps = 'dependency' if len(missing) == 1 else 'dependencies'\n            raise RuntimeError('Unfulfilled %s at run time: %s' % (deps, ', '.join(missing)))\n        \n        task.trigger_event('START', task)\n        t0 = time.time()\n        status = None\n        try:\n            new_deps = _run_get_new_deps()\n            if new_deps is None:\n                status = 'RUNNING'\n            else:\n                status = 'SUSPENDED'\n                logger.info('[pid %s] Worker %s new requirements      %s',\n                            os.getpid(), worker_id, task.task_id)\n                return\n        finally:\n            if status != 'SUSPENDED':\n                task.trigger_event('PROCESSING_TIME', task, time.time() - t0)\n                error_message = json.dumps(task.on_success())\n                logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n                            worker_id, task.task_id)\n                task.trigger_event('SUCCESS', task)\n                status = 'DONE'\n\n    except KeyboardInterrupt:\n        raise\n    except BaseException as ex:\n        status = 'FAILED'\n        logger.exception(\"[pid %s] Worker %s failed    %s\", os.getpid(), worker_id, task)\n        error_message = notifications.wrap_traceback(task.on_failure(ex))\n        task.trigger_event('FAILURE', task, ex)\n        subject = \"Luigi: %s FAILED\" % task\n        notifications.send_error_email(subject, error_message)\n    finally:\n        result_queue.put((task.task_id, status, error_message, missing, new_deps))",
            "imports": [
                "from multiprocessing import Process, Queue",
                "import os",
                "import random",
                "import time",
                "import json"
            ]
        }
    ]
}