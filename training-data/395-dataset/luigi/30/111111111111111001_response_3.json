{
    "luigi": [
        {
            "bugID": 30,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 168,
            "file_name": "luigi/worker.py",
            "replace_code": "def run(self):\n    # ... (omitted code) ...\n\n    try:\n        new_deps = self._run_get_new_deps()\n        if new_deps is None or len(new_deps) == 0:\n            status = RUNNING\n        else:\n            status = SUSPENDED\n            logger.info(\n                '[pid %s] Worker %s new requirements      %s',\n                os.getpid(), self.worker_id, self.task.task_id)\n            return\n    finally:\n        if status != SUSPENDED:\n            self.task.trigger_event(\n                Event.PROCESSING_TIME, self.task, time.time() - t0)\n            error_message = json.dumps(self.task.on_success())\n            logger.info('[pid %s] Worker %s done      %s', os.getpid(),\n                        self.worker_id, self.task.task_id)\n            self.task.trigger_event(Event.SUCCESS, self.task)\n            status = DONE",
            "imports": []
        }
    ]
}