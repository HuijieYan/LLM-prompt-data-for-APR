{
    "luigi": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 70,
            "file_name": "luigi/contrib/hadoop_jar.py",
            "replace_code": "def run_job(self, job):\n    ssh_config = job.ssh()\n    arglist = []  # Initialize arglist\n\n    if ssh_config:\n        host = ssh_config.get(\"host\", None)\n        key_file = ssh_config.get(\"key_file\", None)\n        username = ssh_config.get(\"username\", None)\n        jar = job.jar()  # Check for job.jar() once\n\n        if not host or not key_file or not username or not jar:\n            raise HadoopJarJobError(\"missing some config for HadoopRemoteJarJobRunner\")\n        \n        # rest of the code remains the same as before\n\n        if not jar or not os.path.exists(jar):  # Use jar from local variable\n            logger.error(\"Can't find jar: %s, full path %s\", jar, os.path.abspath(jar))\n            raise HadoopJarJobError(\"job jar does not exist\")",
            "imports": []
        }
    ]
}