{
    "luigi": [
        {
            "bugID": 26,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 70,
            "file_name": "luigi/contrib/hadoop_jar.py",
            "replace_code": "def run_job(self, job):\n    ssh_config = job.ssh()\n    if ssh_config:\n        # ... omitted code ...\n\n        arglist = ['ssh', '-i', key_file,\n                   '-o', 'BatchMode=yes']  # no password prompts etc\n        if ssh_config.get(\"no_host_key_check\", False):\n            arglist += ['-o', 'UserKnownHostsFile=/dev/null',\n                        '-o', 'StrictHostKeyChecking=no']\n        arglist.append('{}@{}'.format(username, host))\n    else:\n        arglist = []\n        if not job.jar() or not os.path.exists(job.jar()):\n            raise HadoopJarJobError(\"job jar does not exist\")\n    \n    # ... omitted code ...\n\n    if job.jar():\n        jar_path = os.path.abspath(job.jar())\n        logger.error(\"Can't find jar: %s, full path %s\", job.jar(), jar_path)\n    else:\n        logger.error(\"job.jar is None.\")\n        jar_path = None",
            "imports": []
        }
    ]
}