{
    "1": "    def create_local_scheduler(self):\n        return scheduler.CentralPlannerScheduler(prune_on_get_work=True)\n    \n",
    "2": "# class declaration containing the buggy function\nclass _WorkerSchedulerFactory(object):\n    # ... omitted code ...\n\n\n",
    "3": "# file name: /Volumes/SSD2T/bgp_envs/repos/luigi_17/luigi/interface.py\n\n",
    "4": "# A test function for the buggy function\n```python\n# file name: /Volumes/SSD2T/bgp_envs/repos/luigi_17/test/scheduler_test.py\n\n    @with_config({'scheduler': {'record_task_history': 'True'},\n                  'task_history': {'db_connection': 'sqlite:////none/existing/path/hist.db'}})\n    def test_local_scheduler_task_history_status(self):\n        ls = luigi.interface._WorkerSchedulerFactory().create_local_scheduler()\n        self.assertEqual(False, ls._config.record_task_history)\n```\n\n## Error message from test function\n```text\nself = <scheduler_test.SchedulerTest testMethod=test_local_scheduler_task_history_status>\n\n    @with_config({'scheduler': {'record_task_history': 'True'},\n                  'task_history': {'db_connection': 'sqlite:////none/existing/path/hist.db'}})\n    def test_local_scheduler_task_history_status(self):\n>       ls = luigi.interface._WorkerSchedulerFactory().create_local_scheduler()\n\ntest/scheduler_test.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/interface.py:134: in create_local_scheduler\n    return scheduler.CentralPlannerScheduler(prune_on_get_work=True)\nluigi/scheduler.py:533: in __init__\n    from luigi import db_task_history  # Needs sqlalchemy, thus imported here\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    \"\"\"\n    Provides a database backend to the central scheduler. This lets you see historical runs.\n    See :ref:`TaskHistory` for information about how to turn out the task history feature.\n    \"\"\"\n    #\n    # Description: Added codes for visualization of how long each task takes\n    # running-time until it reaches the next status (failed or done)\n    # At \"{base_url}/tasklist\", all completed(failed or done) tasks are shown.\n    # At \"{base_url}/tasklist\", a user can select one specific task to see\n    # how its running-time has changed over time.\n    # At \"{base_url}/tasklist/{task_name}\", it visualizes a multi-bar graph\n    # that represents the changes of the running-time for a selected task\n    # up to the next status (failed or done).\n    # This visualization let us know how the running-time of the specific task\n    # has changed over time.\n    #\n    # Copyright 2015 Naver Corp.\n    # Author Yeseul Park (yeseul.park@navercorp.com)\n    #\n    \n    import datetime\n    import logging\n    from contextlib import contextmanager\n    \n    from luigi import six\n    \n    from luigi import configuration\n    from luigi import task_history\n    from luigi.task_status import DONE, FAILED, PENDING, RUNNING\n    \n>   import sqlalchemy\nE   ModuleNotFoundError: No module named 'sqlalchemy'\n\nluigi/db_task_history.py:48: ModuleNotFoundError\n\n```\n",
    "5": "",
    "6": "# A GitHub issue title for this bug\n```text\nDisable Task History when using --local-scheduler\n```\n\n## The associated detailed issue description\n```text\nAs you suggested in the docs, we use --local-scheduler only for testing purposes. Each member of our group works on his/her own computer (we have remote targets, so this setup works just great). Our central scheduler records the task history, as configured by our common luigi config file.\n\nNow, the problem is that the local scheduler also tries to open the task history db file, that is defined for the central scheduler. This file does not necessarily exist. As you may guess, we don't want to maintain two separate config files ;)\n\nIt would be extremely helpful is there was an option to disable the task history for the local scheduler.\nAny chance that a PR might be accepted ?\n```\n\n",
    "7": "# Instructions\n\n1. Analyze the test case and its relationship with the error message, if applicable.\n2. Identify the potential error location within the problematic function.\n3. Explain the reasons behind the occurrence of the bug.\n4. Suggest possible approaches for fixing the bug.\n5. Present the corrected code for the problematic function."
}