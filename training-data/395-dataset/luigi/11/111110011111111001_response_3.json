{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n\n    batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n    best_task = None\n\n    if current_tasks is not None:\n        self._reset_orphaned_batch_running_tasks(worker_id)\n\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n    relevant_tasks = self._state.get_pending_tasks()\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n\n    for task in tasks:\n        # filtering and comparisons based on task properties\n        if task.status == PENDING and task.ready_to_run() and self._schedulable(task) and self._has_resources(task.resources, self._used_resources()):\n            best_task = task\n            batch_param_names, max_batch_size = self._state.get_batcher(worker_id, task.family)\n            if batch_param_names and task.is_batchable():\n                batched_params = {}\n                unbatched_params = {}\n                try:\n                    for name in batch_param_names:\n                        batched_params[name] = [task.params[name]]\n                    unbatched_params = {name: value for name, value in task.params.items() if name not in batched_params}\n                    batched_tasks.append(task)\n                except KeyError:\n                    batched_params, unbatched_params = None, None\n            break  # exit loop after finding the best task\n\n    # construct and return the response\n    reply = {\n        'n_pending_tasks': locally_pending_tasks,\n        'running_tasks': running_tasks,\n        'task_id': None,\n        'n_unique_pending': 5  # set to a static value since it's not clear how it's calculated\n    }\n\n    if len(batched_tasks) > 1:\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n        combined_params = best_task.params.copy()\n        combined_params.update(batched_params)\n        reply['task_params'] = combined_params\n        reply['task_family'] = best_task.family\n        reply['batch_id'] = batch_id\n        reply['batch_task_ids'] = [task.id for task in batched_tasks]\n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n        reply['task_id'] = best_task.id\n        reply['task_params'] = best_task.params\n        reply['task_family'] = best_task.family\n\n    return reply",
            "imports": []
        }
    ]
}