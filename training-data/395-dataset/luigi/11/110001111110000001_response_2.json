{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n    \n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    \n    if current_tasks is not None:\n        self._reset_orphaned_batch_running_tasks(worker_id)\n    \n    pending_tasks = self._state.get_pending_tasks()\n    running_tasks = self._state.get_running_tasks()\n\n    batched_tasks = [task for task in pending_tasks if task.is_batchable() and task.status == PENDING and not task.deps]\n    \n    task_params = {}\n    for task in batched_tasks:\n        for key, value in task.params.items():\n            if key not in task_params:\n                task_params[key] = [value]\n            else:\n                task_params[key].append(value)\n    \n    response = {\n        'n_pending_tasks': len(pending_tasks),\n        'running_tasks': [{'task_id': task.id, 'worker': str(self._state.get_worker(task.worker_running).info)} for task in running_tasks],\n        'task_id': None,\n        'n_unique_pending': len([task for task in pending_tasks if task.status == PENDING and not task.deps])\n    }\n    \n    if batched_tasks:\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n        \n        response['task_id'] = None\n        response['task_family'] = batched_tasks[0].family\n        response['task_module'] = getattr(batched_tasks[0], 'module', None)\n        response['task_params'] = {key: task_params[key] for key in task_params if key in batched_tasks[0].params}\n        response['batch_id'] = batch_id\n        response['batch_task_ids'] = [task.id for task in batched_tasks]\n    else:\n        best_task = [task for task in pending_tasks if task.status == PENDING and not task.deps]\n        if best_task:\n            best_task = max(best_task, key=self._rank)\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker_id\n            best_task.time_running = time.time()\n            self._update_task_history(best_task, RUNNING, host=host)\n    \n            response['task_id'] = best_task.id\n            response['task_family'] = best_task.family\n            response['task_module'] = getattr(best_task, 'module', None)\n            response['task_params'] = best_task.params\n\n    return response",
            "import_list": []
        }
    ]
}