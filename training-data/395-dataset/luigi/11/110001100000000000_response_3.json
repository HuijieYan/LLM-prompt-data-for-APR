{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None):\n        # Removal of any expired nodes is to be removed from the code as the # TODO\n        # Algo: iteration over all nodes, find the highest priority node no dependencies and available # resources.\n        \n        # Resource checking looks both at currently available resources and at which resources would be available if all running tasks died and we rescheduled all workers greedily. We do both # checks in order to prevent a worker with many low-priority tasks from starving other # workers with higher priority tasks that share the same resources.\n        \n        # The removal of tasks that can't be done and figuring out if the worker has absolutely nothing it can wait for is to be removed from the code as the # TODO\n        \n\n    if self._config.prune_on_get_work:\n        self.prune()\n    \n    assert worker is not None\n    worker_id = worker\n    # Return remaining tasks that have no FAILED descendants\n    self.update(worker_id, {'host': host}, get_work=True)\n    \n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    \n    # variables declared with `None`\n    batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n    best_task = None\n    \n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_running_tasks(), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n    \n    if current_tasks is not None:\n        # batch running tasks that weren't claimed since the last get_work go back in the pool\n        self._reset_orphaned_batch_running_tasks(worker_id)\n    \n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n    \n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n    \n    worker = self._state.get_worker(worker_id)\n    \n    if worker.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1)) for worker in active_workers)\n    \n    tasks = list(relevant_tasks)\n    \n    tasks.sort(key=self._rank, reverse=True)\n    \n    for task in tasks:\n        in_workers = (assistant and getattr(task, 'runnable', bool(task.workers))) or worker_id in task.workers\n        \n        if task.status == RUNNING and in_workers:\n            # Return a list of currently running tasks to the client, # makes it easier to troubleshoot\n            other_worker = self._state.get_worker(task.worker_running)\n            more_info = {'task_id': task.id, 'worker': str(other_worker)}\n            \n            if other_worker is not None:\n                more_info.update(other_worker.info)\n                running_tasks.append(more_info)\n        \n        if task.status == PENDING and in_workers:\n            upstream_status = self._upstream_status(task.id, upstream_table)\n            \n            if upstream_status != UPSTREAM_DISABLED:\n                locally_pending_tasks += 1\n                \n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n        \n        if (best_task and batched_params and task.family == best_task.family and\n                len(batched_tasks) < max_batch_size and task.is_batchable() and all(\n                task.params.get(name) == value for name, value in unbatched_params.items())):\n            for name, params in batched_params.items():\n                params.append(task.params.get(name))\n            batched_tasks.append(task)\n            \n        if best_task:\n            continue\n        \n        if task.status == RUNNING and (task.worker_running in greedy_workers):\n            greedy_workers[task.worker_running] -= 1\n            \n            for resource, amount in six.iteritems((task.resources or {})):\n                greedy_resources[resource] += amount\n        \n        if self._schedulable(task) and self._has_resources(task.resources, greedy_resources):\n            if in_workers and self._has_resources(task.resources, used_resources):\n                best_task = task\n                batch_param_names, max_batch_size = self._state.get_batcher(\n                    worker_id,\n                    task.family,\n                )\n            \n            if batch_param_names and task.is_batchable():\n                batched_params = {}\n                \n                try:\n                    for name in batch_param_names:\n                        batched_params[name] = [task.params[name]]\n                    unbatched_params = {name: value for name, value in task.params.items() if name not in batched_params}\n                    batched_tasks.append(task)\n                \n                except KeyError:\n                    batched_params, unbatched_params = None, None\n        \n            else:\n                workers = itertools.chain(task.workers, [worker_id]) if assistant else task.workers\n            \n                for task_worker in workers:\n                    if greedy_workers.get(task_worker, 0) > 0:\n                        # use up a worker\n                        greedy_workers[task_worker] -= 1\n                        \n                        # keep track of the resources used in greedy scheduling\n                        for resource, amount in six.iteritems((task.resources or {})):\n                            greedy_resources[resource] += amount\n                        \n                        break\n    \n    reply = {\n        'n_pending_tasks': locally_pending_tasks,\n        'running_tasks': running_tasks,\n        'task_id': None,\n        'n_unique_pending': n_unique_pending,\n    }\n    \n    if len(batched_tasks) > 1:\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        \n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n        \n        combined_params = best_task.params.copy()\n        \n        combined_params.update(batched_params)\n        \n        reply.update(\n            {\n                'task_id': None,\n                'task_family': best_task.family,\n                'task_module': getattr(best_task, 'module', None),\n                'task_params': combined_params,\n                'batch_id': batch_id,\n                'batch_task_ids': [task.id for task in batched_tasks],\n            }\n        )\n    \n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n        \n        reply.update(\n            {\n                'task_id': best_task.id,\n                'task_family': best_task.family,\n                'task_module': getattr(best_task, 'module', None),\n                'task_params': best_task.params,\n            }\n        )\n    \n    return reply"
        }
    ]
}