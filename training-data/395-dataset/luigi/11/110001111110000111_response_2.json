{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n\n    batched_params, batched_tasks, max_batch_size = None, [], 1\n    best_task = None\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_running_tasks(), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n                break\n\n    locally_pending_tasks = 0\n    running_tasks = []\n\n    for task in self._state.get_pending_tasks(self._state):\n        if task.status == PENDING:\n            if not task.deps or all(dep in self._state.failed_tasks for dep in task.deps):\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    # unique pending task\n                    n_unique_pending += 1\n                continue\n\n        if self._schedulable(task) and self._has_resources(task.resources, used_resources):\n            if best_task is None or task.status == RUNNING or (task.status == PENDING and task.family == best_task.family):\n                # update best task\n                best_task = task\n                if task.is_batchable():\n                    batch_param_names, max_batch_size = self._state.get_batcher(worker_id, task.family)\n                    if batch_param_names:\n                        batched_params, batched_tasks = {}, []\n                        for name in batch_param_names:\n                            batched_params[name] = [task.params[name]]\n                        batched_tasks.append(task)\n\n    reply = {'n_pending_tasks': locally_pending_tasks,\n             'running_tasks': running_tasks,\n             'task_id': None,\n             'n_unique_pending': n_unique_pending}\n\n    if len(batched_tasks) > 1:\n        # handle batch\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n\n        # construct combined params\n        combined_params = best_task.params.copy()\n        for key, value in batched_params.items():\n            combined_params[key] = value\n        reply.update({'task_id': None,\n                      'task_family': best_task.family,\n                      'task_module': getattr(best_task, 'module', None),\n                      'task_params': combined_params,\n                      'batch_id': batch_id,\n                      'batch_task_ids': [task.id for task in batched_tasks]})\n    elif best_task:\n        # assign best task\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n        reply.update({'task_id': best_task.id,\n                      'task_family': best_task.family,\n                      'task_module': getattr(best_task, 'module', None),\n                      'task_params': best_task.params})\n\n    return reply",
            "imports": []
        }
    ]
}