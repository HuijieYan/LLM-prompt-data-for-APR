{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    # TODO: remove any expired nodes\n    # Algo: iterate over all nodes, find the highest priority node no dependencies and available resources.\n    # Resource checking looks both at currently available resources and at which resources would\n    # be available if all running tasks died and we rescheduled all workers greedily. We do both\n    # checks in order to prevent a worker with many low-priority tasks from starving other\n    # workers with higher priority tasks that share the same resources.\n    # TODO: remove tasks that can't be done, figure out if the worker has absolutely\n    # nothing it can wait for\n    if self._config.prune_on_get_work:\n        self.prune()\n    assert worker is not None\n    worker_id = worker\n    # Return remaining tasks that have no FAILED descendants\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n    best_task = None\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n        for task in sorted(self._state.get_running_tasks(), key=self._rank):\n            if task.worker_running == worker_id and task.id not in ct_set:\n                best_task = task\n    if current_tasks is not None:\n        # batch running tasks that weren't claimed since the last get_work go back in the pool\n        self._reset_orphaned_batch_running_tasks(worker_id)\n    locally_pending_tasks = 0\n    running_tasks = []\n    upstream_table = {}\n    greedy_resources = collections.defaultdict(int)\n    n_unique_pending = 0\n    worker = self._state.get_worker(worker_id)\n    if self.is_trivial_worker(self._state):\n        relevant_tasks = worker.get_pending_tasks(self._state)\n        used_resources = collections.defaultdict(int)\n        greedy_workers = dict()  # If there's no resources, then they can grab any task\n    else:\n        relevant_tasks = self._state.get_pending_tasks()\n        used_resources = self._used_resources()\n        activity_limit = time.time() - self._config.worker_disconnect_delay\n        active_workers = self._state.get_active_workers(last_get_work_gt=activity_limit)\n        greedy_workers = dict((worker.id, worker.info.get('workers', 1))\n                              for worker in active_workers)\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n\n    # ... (remaining code omitted for brevity)\n\n    return reply",
            "imports": [
                "import collections",
                "import hashlib",
                "import itertools",
                "import time"
            ]
        }
    ]
}