{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n\n    if self._config.prune_on_get_work:\n        self.prune()\n    \n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n    \n    batched_params = {}\n    batched_tasks = []\n    loc_pending_tasks = 0\n    running_tasks = []\n    \n    relevant_tasks = self._state.get_worker(worker_id).get_pending_tasks(self._state)\n    \n    for task in relevant_tasks:\n        # Check if task is eligible for batching\n        batchable = task.is_batchable() and task.status == PENDING and not self._state.has_dependencies(task)\n    \n        if task.status == RUNNING and task.worker_running == worker_id:\n            running_tasks.append({'task_id': task.id, 'worker': str(self._state.get_worker(task.worker_running).info)})\n    \n        if batchable:\n            # Store batched parameters\n            for param_name, param_value in task.params.items():\n                if param_name not in batched_params:\n                    batched_params[param_name] = []\n                if param_value not in batched_params[param_name]:\n                    batched_params[param_name].append(param_value)\n            # Add task to batched tasks\n            batched_tasks.append(task)\n        elif task.status == PENDING:\n            loc_pending_tasks += 1\n    \n    response = {\n        'n_pending_tasks': loc_pending_tasks,\n        'running_tasks': running_tasks,\n        'task_id': None,\n        'n_unique_pending': loc_pending_tasks\n    }\n    \n    if batched_tasks:\n        combined_params = batched_tasks[0].params.copy()\n        combined_params.update(batched_params)\n    \n        batch_ids = []\n        for task in batched_tasks:\n            unique_id = hashlib.md5(task.id.encode('utf-8')).hexdigest()\n            batch_ids.append(unique_id)\n            self._state.set_batch_running(task, unique_id, worker_id)\n    \n        response['task_family'] = batched_tasks[0].family\n        response['task_module'] = getattr(batched_tasks[0], 'module', None)\n        response['task_params'] = combined_params\n        response['batch_id'] = '|'.join(batch_ids)\n        response['batch_task_ids'] = [task.id for task in batched_tasks]\n    else:\n        # Find non-batchable task\n        best_task = None\n        for task in relevant_tasks:\n            if task.status == PENDING and not self._state.has_dependencies(task):\n                best_task = task\n                break\n    \n        if best_task:\n            self._state.set_status(best_task, RUNNING, self._config)\n            best_task.worker_running = worker_id\n            best_task.time_running = time.time()\n            self._update_task_history(best_task, RUNNING, host=host)\n    \n            response['task_id'] = best_task.id\n            response['task_family'] = best_task.family\n            response['task_module'] = getattr(best_task, 'module', None)\n            response['task_params'] = best_task.params\n    \n    return response"
        }
    ]
}