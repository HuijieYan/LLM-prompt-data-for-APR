{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n\n    response = {\n        'n_pending_tasks': 0,\n        'running_tasks': [],\n        'task_id': None,\n        'n_unique_pending': 0,\n        'task_family': None,\n        'task_module': None,\n        'task_params': None,\n        'batch_id': None,\n        'batch_task_ids': []\n    }\n\n    eligible_tasks = []\n    for task in self._state.get_pending_tasks():\n        if task.status == PENDING:\n            if 'NOT_DONE' not in task.deps and 'DONE' in task.deps:\n                response['n_pending_tasks'] += 1\n                response['n_unique_pending'] += 1\n                if len(task.workers) == 1 and not assistant:\n                    response['n_unique_pending'] -= 1\n                eligible_tasks.append(task)\n\n    if current_tasks:\n        self._reset_orphaned_batch_running_tasks(worker_id)\n\n    if eligible_tasks:\n        selected_task = max(eligible_tasks, key=self._rank)\n        response['task_id'] = selected_task.id\n        response['task_family'] = selected_task.family\n        response['task_module'] = getattr(selected_task, 'module', None)\n        response['task_params'] = selected_task.params\n        if selected_task.is_batchable():\n            batched_tasks = [t for t in self._state.get_running_tasks() if t.family == selected_task.family]\n            if len(batched_tasks) > 1:\n                batch_string = '|'.join(t.id for t in batched_tasks)\n                batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n                for t in batched_tasks:\n                    self._state.set_batch_running(t, batch_id, worker_id)\n\n                combined_params = selected_task.params.copy()\n                combined_params.update(batched_params)\n\n                response['task_params'] = combined_params\n                response['batch_id'] = batch_id\n                response['batch_task_ids'] = [t.id for t in batched_tasks]\n        else:\n            self._state.set_status(selected_task, RUNNING, self._config)\n            selected_task.worker_running = worker_id\n            selected_task.time_running = time.time()\n            self._update_task_history(selected_task, RUNNING, host=host)\n\n    return response",
            "import_list": []
        }
    ]
}