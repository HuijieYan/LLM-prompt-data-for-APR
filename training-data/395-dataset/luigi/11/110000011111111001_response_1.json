{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n    self.update(worker_id, {'host': host}, get_work=True)\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n\n    batched_params = collections.defaultdict(list)\n    batched_tasks = []\n    max_batch_size = float('inf')\n    best_task = None\n    running_tasks = []\n    locally_pending_tasks = 0\n    n_unique_pending = 0\n\n    relevant_tasks = self._state.get_pending_tasks()\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n\n    for task in tasks:\n        if task.status == TaskStatus.RUNNING and task.worker_running == worker_id and task.id not in current_tasks:\n            best_task = task\n        if task.status == TaskStatus.PENDING and task.family == 'A' and (task.workers == {worker_id} or assistant):\n            if not self._state.has_missing_input(task.id):\n                locally_pending_tasks += 1\n                if len(task.workers) == 1 and not assistant:\n                    n_unique_pending += 1\n            if task.is_batchable():\n                batched_params[task.family].append(task.params)\n                batched_tasks.append(task)\n\n    reply = {'n_pending_tasks': locally_pending_tasks, 'running_tasks': running_tasks, 'n_unique_pending': n_unique_pending}\n\n    if len(batched_tasks) > 1:\n        task_family = batched_tasks[0].family\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker)\n        combined_params = {}\n        for param_name in batched_params[task_family][0].keys():\n            combined_params[param_name] = [params[param_name] for params in batched_params[task_family]]\n        reply.update({'task_family': task_family, 'task_module': None, 'task_params': combined_params, 'batch_id': batch_id, 'batch_task_ids': [task.id for task in batched_tasks]})\n    elif best_task:\n        self._state.set_status(best_task, TaskStatus.RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, TaskStatus.RUNNING, host=host)\n        reply.update({'task_id': best_task.id, 'task_family': best_task.family, 'task_module': None, 'task_params': best_task.params})\n\n    return reply",
            "imports": []
        }
    ]
}