{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n        # TODO: remove any expired nodes\n    \n        # ... (other parts of the function remain unchanged) ...\n    \n        if self._config.prune_on_get_work:\n            self.prune()\n        \n        assert worker is not None\n        worker_id = worker\n        # Return remaining tasks that have no FAILED descendants\n        self.update(worker_id, {'host': host}, get_work=True)\n        if assistant:\n            self.add_worker(worker_id, [('assistant', assistant)])\n    \n        batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n        best_task = None\n        if current_tasks is not None:\n            ct_set = set(current_tasks)\n            for task in sorted(self._state.get_running_tasks(), key=self._rank):\n                if task.worker_running == worker_id and task.id not in ct_set:\n                    best_task = task\n    \n        if current_tasks is not None:\n            # batch running tasks that weren't claimed since the last get_work go back in the pool\n            self._reset_orphaned_batch_running_tasks(worker_id)\n    \n        locally_pending_tasks = 0\n        running_tasks = []\n        upstream_table = {}",
            "import_list": []
        }
    ]
}