{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n        \n    assert worker is not None\n    worker_id = worker\n    \n    # logic for finding the best task\n    relevant_tasks = self._state.get_pending_tasks()\n    tasks = list(relevant_tasks)\n    tasks.sort(key=self._rank, reverse=True)\n    \n    best_task = None\n    for task in tasks:\n        if task.status == RUNNING and task.worker_running == worker_id and task.id not in (current_tasks or []):\n            best_task = task\n            break  # Once we find a running task, we stop iterating\n        elif task.status == PENDING and (assistant or worker_id in task.workers):\n            upstream_status = self._upstream_status(task.id, {})\n            if upstream_status != UPSTREAM_DISABLED:\n                best_task = task\n                break  # Once we find a pending task, we stop iterating\n\n    # logic for returning the result\n    reply = {\n        'n_pending_tasks': len(relevant_tasks),\n        'running_tasks': [],\n        'task_id': best_task.id if best_task else None,\n        'n_unique_pending': len(relevant_tasks)  # Assuming pending tasks are unique\n    }\n    \n    return reply",
            "imports": []
        }
    ]
}