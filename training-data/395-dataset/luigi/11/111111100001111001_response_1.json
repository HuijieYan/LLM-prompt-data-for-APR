{
    "luigi": [
        {
            "bugID": 11,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 818,
            "file_name": "luigi/scheduler.py",
            "replace_code": "def get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs):\n    if self._config.prune_on_get_work:\n        self.prune()\n\n    assert worker is not None\n    worker_id = worker\n\n    # Return remaining tasks that have no FAILED descendants\n    self.update(worker_id, {'host': host}, get_work=True)\n\n    if assistant:\n        self.add_worker(worker_id, [('assistant', assistant)])\n\n    batched_params, unbatched_params, batched_tasks, max_batch_size = None, None, [], 1\n    best_task = None\n\n    if current_tasks is not None:\n        ct_set = set(current_tasks)\n\n        for task in self._state.get_pending_tasks():\n            if task.worker_running == worker_id and task.id not in ct_set:\n                if best_task is None or task.family == best_task.family:\n                    if task.is_batchable():\n                        if all(task.params.get(name) == value for name, value in unbatched_params.items()):\n                            batched_tasks.append(task)\n                            if batched_params:\n                                for name, params in batched_params.items():\n                                    params.append(task.params[name])\n                        else:\n                            best_task = task\n                    else:\n                        best_task = task\n\n    reply = {'n_pending_tasks': self._state.get_pending_tasks().count(),\n             'running_tasks': [],\n             'task_id': None,\n             'n_unique_pending': self._state.get_unique_pending_tasks(worker_id)}\n\n    if len(batched_tasks) > 1:\n        # Create batch_id\n        batch_string = '|'.join(task.id for task in batched_tasks)\n        batch_id = hashlib.md5(batch_string.encode('utf-8')).hexdigest()\n\n        for task in batched_tasks:\n            self._state.set_batch_running(task, batch_id, worker_id)\n\n        combined_params = best_task.params.copy()\n        combined_params.update(batched_params)\n\n        reply.update({\n            'task_id': None,\n            'task_family': best_task.family,\n            'task_module': getattr(best_task, 'module', None),\n            'task_params': combined_params,\n            'batch_id': batch_id,\n            'batch_task_ids': [task.id for task in batched_tasks]\n        })\n\n    elif best_task:\n        self._state.set_status(best_task, RUNNING, self._config)\n        best_task.worker_running = worker_id\n        best_task.time_running = time.time()\n        self._update_task_history(best_task, RUNNING, host=host)\n\n        reply.update({\n            'task_id': best_task.id,\n            'task_family': best_task.family,\n            'task_module': getattr(best_task, 'module', None),\n            'task_params': best_task.params\n        })\n\n    return reply",
            "imports": []
        }
    ]
}