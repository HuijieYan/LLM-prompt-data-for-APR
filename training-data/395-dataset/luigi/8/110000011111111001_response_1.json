{
    "luigi": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 327,
            "file_name": "luigi/contrib/redshift.py",
            "replace_code": "def does_table_exist(self, connection):\n\n    \"\"\"\n    Determine whether the table already exists.\n    \"\"\"\n    \n    if '.' in self.table:\n        query = (\"select 1 as table_exists \"\n                 \"from information_schema.tables \"\n                 \"where table_schema = lower(%s) and table_name = lower(%s) limit 1\")\n    else:\n        query = (\"select 1 as table_exists \"\n                 \"from pg_table_def \"\n                 \"where tablename = lower(%s) limit 1\")\n    cursor = connection.cursor()\n    try:\n        if '.' in self.table:\n            schema, table_name = self.table.split('.')\n            cursor.execute(query, (schema, table_name))\n        else:\n            cursor.execute(query, (self.table,))\n        result = cursor.fetchone()\n        return bool(result)\n    finally:\n        cursor.close()"
        }
    ]
}