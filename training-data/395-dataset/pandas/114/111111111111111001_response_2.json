{
    "pandas": [
        {
            "bugID": 114,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 4486,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def get_value(self, series, key):\n\n    # if we have something that is Index-like, then\n    # use this, e.g. DatetimeIndex\n    # Things like `Series._get_value` (via .at) pass the EA directly here.\n    s = getattr(series, \"_values\", series)\n    if isinstance(s, Index):\n        # Handle key as a boolean mask\n        if isinstance(key, (ExtensionArray, Index)) and is_scalar(key):\n            return s[s._inferred_type(self)]\n        # This is the same for EA/Index and that should pass to\n        # the conversion to an array and values_from_object\n        if is_bool_indexer(key):\n            try:\n                return s[key]\n            except KeyError:\n                # In the case where this exception happens, the\n                # previous implementation was trying to fall back\n                # to a location-based look-up but that returns a\n                # NotImplementedError when it should return a key error.\n                if len(key) != len(s):\n                    raise ValueError(f'Item wrong length {len(key)} instead of {len(s)}.')\n                raise\n        elif self._should_fallback_to_positional(key):\n            return self._get_value_fallback(self, key)\n        elif is_scalar(key):\n            key = com.cast_scalar_indexer(key, type(self))\n            try:\n                return s[key]\n            except KeyError as e1:\n                if len(self) > 0 and self.holds_integer():\n                    raise e1\n            except Exception:\n                raise KeyError(key)\n        return s[key]\n\n    s = com.values_from_object(series)\n    k = com.values_from_object(key)\n\n    k = self._convert_scalar_indexer(k, kind=\"getitem\")\n    try:\n        return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n    except KeyError as e1:\n        if len(self) > 0 and self.holds_integer():\n            raise\n\n        try:\n            return libindex.get_value_at(s, key)\n        except IndexError:\n            raise\n        except TypeError:\n            # generator/iterator-like\n            if is_iterator(key):\n                raise InvalidIndexError(key)\n            else:\n                raise e1\n        except Exception:\n            raise e1\n    except TypeError:\n        # e.g. \"[False] is an invalid key\"\n        if is_scalar(key):\n            raise IndexError(key)\n        raise InvalidIndexError(key)",
            "imports": []
        }
    ]
}