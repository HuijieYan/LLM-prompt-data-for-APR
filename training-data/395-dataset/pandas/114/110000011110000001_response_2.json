{
    "pandas": [
        {
            "bugID": 114,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 4486,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def get_value(self, series, key):\n    try:\n        if hasattr(series, \"loc\"):\n            return series.loc[key]\n        is_integer = False\n        if is_scalar(key):\n            is_integer = is_integer(key)\n\n        s = getattr(series, \"_values\", series)\n        if isinstance(s, DecimalArray) and is_scalar(key):\n            try:\n                loc = self.get_loc(key)\n                return s[loc]\n            except KeyError:\n                if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                    raise\n                elif is_integer:\n                    return s[key]\n        elif isinstance(s, (ExtensionArray, Index)) and is_scalar(key):\n            try:\n                loc = self.get_loc(key)\n                return s[loc]\n            except KeyError:\n                if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                    raise\n                elif is_integer:\n                    return s[key]\n    except Exception as e:\n        raise e",
            "imports": []
        }
    ]
}