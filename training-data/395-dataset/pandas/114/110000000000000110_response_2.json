{
    "pandas": [
        {
            "bugID": 114,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 4486,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def get_value(self, series, key):\n    if hasattr(series, \"_values\") and series._values is not None:\n        s = series._values\n    else:\n        s = series\n\n    if (isinstance(s, (ExtensionArray, Index)) and np.isscalar(key) and\n            not isinstance(key, (bool, datetime, np.datetime64))):\n        key = self._as_int(key)\n        try:\n            return s[key]\n        except IndexError:\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        except TypeError:\n            pass\n\n    # convert key to cint, cdouble, completely avoid NSLoss and end\n    # up with a strict reinterpret_cast-based implementation\n    key = self._convert_scalar_indexer(key, kind=\"getitem\")\n\n    # We can defer to the self._engine, unless:\n    # 1) key is a non-zero length np.datetime64, and\n    # 2) it has no nanoseconds\n    if (is_scalar(key) and not needs_i8_conversion(key)):\n        loc = self.get_loc(key)\n        if loc is np.nan:\n            raise KeyError(\"No such label: {}\".format(key))\n        return s[loc]\n\n    # place here because this eventually calls 'is_scalar'\n    if needs_i8_conversion(key):\n        key = np.int64(key)\n\n    # To retain names and convert to known values.  Entails\n    # conversion to a Python space.\n    k = self._convert_scalar_indexer(key, kind=\"getitem\")\n\n    try:\n        return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n    except KeyError as e1:\n        try:\n            return libindex.get_value_at(s, key)\n        except IndexError:\n            raise e1\n        except TypeError:\n            # generator/iterator-like\n            if is_iterator(key):\n                raise InvalidIndexError(key)\n            else:\n                raise e1\n        except Exception:\n            # not enough to convert e1 as the exception, and the\n            # other possibilities are complex.  take the safe\n            # approach of raising the original exception.\n            raise e1\n    except TypeError:\n        if is_scalar(key):\n            raise IndexError(key)\n        raise InvalidIndexError(key)",
            "imports": []
        }
    ]
}