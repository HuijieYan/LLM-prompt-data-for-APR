{
    "pandas": [
        {
            "bugID": 114,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 4486,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def get_value(self, series, key):\n\n    if isinstance(series, (ExtensionArray, Index)):\n        series_values = series._values\n    else:\n        series_values = series\n\n    if isinstance(series_values, (ExtensionArray, Index)) and is_scalar(key):\n        try:\n            iloc = self.get_loc(key)\n            return series_values[iloc]\n        except KeyError:\n            if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                raise\n            elif is_integer(key):\n                return series_values[key]\n\n    series_values = com.values_from_object(series)\n    key_values = com.values_from_object(key)\n\n    key_values = self._convert_scalar_indexer(key_values, kind=\"getitem\")\n    try:\n        return self._engine.get_value(series_values, key_values, tz=getattr(series.dtype, \"tz\", None))\n    except KeyError as e1:\n        if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n            raise\n\n        try:\n            return libindex.get_value_at(series_values, key)\n        except IndexError:\n            raise\n        except TypeError:\n            if is_iterator(key):\n                raise InvalidIndexError(key)\n            else:\n                raise e1\n        except Exception:\n            raise e1\n    except TypeError:\n        if is_scalar(key):\n            raise IndexError(key)\n        raise InvalidIndexError(key)",
            "import_list": []
        }
    ]
}