{
    "1.1.1": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \n    self._check_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    result = data._data.quantile(\n        qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n    )\n\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    if is_transposed:\n        result = result.T\n\n    return result\n",
    "1.1.2": "Return values at the given quantile over requested axis.\n\nParameters\n----------\nq : float or array-like, default 0.5 (50% quantile)\n    Value between 0 <= q <= 1, the quantile(s) to compute.\naxis : {0, 1, 'index', 'columns'} (default 0)\n    Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\nnumeric_only : bool, default True\n    If False, the quantile of datetime and timedelta data will be\n    computed as well.\ninterpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n    This optional parameter specifies the interpolation method to use,\n    when the desired quantile lies between two data points `i` and `j`:\n\n    * linear: `i + (j - i) * fraction`, where `fraction` is the\n      fractional part of the index surrounded by `i` and `j`.\n    * lower: `i`.\n    * higher: `j`.\n    * nearest: `i` or `j` whichever is nearest.\n    * midpoint: (`i` + `j`) / 2.\n\nReturns\n-------\nSeries or DataFrame\n\n    If ``q`` is an array, a DataFrame will be returned where the\n      index is ``q``, the columns are the columns of self, and the\n      values are the quantiles.\n    If ``q`` is a float, a Series will be returned where the\n      index is the columns of self and the values are the quantiles.\n\nSee Also\n--------\ncore.window.Rolling.quantile: Rolling quantile.\nnumpy.percentile: Numpy function to compute the percentile.\n\nExamples\n--------\n>>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n...                   columns=['a', 'b'])\n>>> df.quantile(.1)\na    1.3\nb    3.7\nName: 0.1, dtype: float64\n>>> df.quantile([.1, .5])\n       a     b\n0.1  1.3   3.7\n0.5  2.5  55.0\n\nSpecifying `numeric_only=False` will also compute the quantile of\ndatetime and timedelta data.\n\n>>> df = pd.DataFrame({'A': [1, 2],\n...                    'B': [pd.Timestamp('2010'),\n...                          pd.Timestamp('2011')],\n...                    'C': [pd.Timedelta('1 days'),\n...                          pd.Timedelta('2 days')]})\n>>> df.quantile(0.5, numeric_only=False)\nA                    1.5\nB    2010-07-02 12:00:00\nC        1 days 12:00:00\nName: 0.5, dtype: object",
    "1.2.1": "class DataFrame(NDFrame)",
    "1.2.2": "Two-dimensional size-mutable, potentially heterogeneous tabular data\nstructure with labeled axes (rows and columns). Arithmetic operations\nalign on both row and column labels. Can be thought of as a dict-like\ncontainer for Series objects. The primary pandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects\n\n    .. versionchanged :: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged :: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer\ncopy : boolean, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nDataFrame.from_items : From sequence of (key, value) pairs\n    read_csv, pandas.read_table, pandas.read_clipboard.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
    "1.2.3": [
        "_constructor(self)",
        "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/frame.py",
    "1.3.2": [
        "_constructor(self)",
        "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')"
    ],
    "1.4.1": [
        "    def test_quantile_empty_no_columns(self):\n        # GH#23925 _get_numeric_data may drop all columns\n        df = pd.DataFrame(pd.date_range(\"1/1/18\", periods=5))\n        df.columns.name = \"captain tightpants\"\n        result = df.quantile(0.5)\n        expected = pd.Series([], index=[], name=0.5)\n        expected.index.name = \"captain tightpants\"\n        tm.assert_series_equal(result, expected)\n\n        result = df.quantile([0.5])\n        expected = pd.DataFrame([], index=[0.5], columns=[])\n        expected.columns.name = \"captain tightpants\"\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "pandas/tests/frame/test_quantile.py"
    ],
    "2.1.1": [
        [
            "E   ValueError: need at least one array to concatenate"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_quantile.TestDataFrameQuantile object at 0x11b679eb0>\n\n    def test_quantile_empty_no_columns(self):\n        # GH#23925 _get_numeric_data may drop all columns\n        df = pd.DataFrame(pd.date_range(\"1/1/18\", periods=5))\n        df.columns.name = \"captain tightpants\"\n>       result = df.quantile(0.5)\n\npandas/tests/frame/test_quantile.py:475: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:8218: in quantile\n    result = data._data.quantile(\npandas/core/internals/managers.py:535: in quantile\n    values = concat_compat([b.values for b in blocks])\npandas/core/dtypes/concat.py:139: in concat_compat\n    return np.concatenate(to_concat, axis=axis)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ([],), kwargs = {'axis': 0}, relevant_args = []\n\n>   ???",
            "\n<__array_function__ internals>:5: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self": {
                    "value": "captain tightpants          0\n0                  2018-01-01\n1                  2018-01-02\n2                  2018-01-03\n3                  2018-01-04\n4                  2018-01-05",
                    "shape": "(5, 1)",
                    "omitted": false
                },
                "q": {
                    "value": "0.5",
                    "shape": null,
                    "omitted": false
                },
                "numeric_only": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "axis": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1, name='captain tightpants')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self._constructor": {
                    "value": "<class 'pandas.core.frame.DataFrame'>",
                    "shape": "<property object at 0x11b00af40>",
                    "omitted": false
                },
                "self._constructor_sliced": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x111dc8040>",
                    "omitted": false
                },
                "interpolation": {
                    "value": "'linear'",
                    "shape": "6",
                    "omitted": false
                }
            },
            {
                "data": {
                    "value": "Empty DataFrame\nColumns: []\nIndex: [0, 1, 2, 3, 4]",
                    "shape": "(5, 0)",
                    "omitted": false
                },
                "is_transposed": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "data.T": {
                    "value": "Empty DataFrame\nColumns: [0, 1, 2, 3, 4]\nIndex: []",
                    "shape": "(0, 5)",
                    "omitted": false
                },
                "data.columns": {
                    "value": "Index([], dtype='object')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "cols": {
                    "value": "Index([], dtype='object', name='captain tightpants')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "data._data": {
                    "value": "BlockManager\nItems: Index([], dtype='object')\nAxis 1: RangeIndex(start=0, stop=5, step=1)",
                    "shape": "(0, 5)",
                    "omitted": false
                }
            }
        ],
        [
            {
                "self": {
                    "value": "captain tightpants          0\n0                  2018-01-01\n1                  2018-01-02\n2                  2018-01-03\n3                  2018-01-04\n4                  2018-01-05",
                    "shape": "(5, 1)",
                    "omitted": false
                },
                "q": {
                    "value": "[0.5]",
                    "shape": "1",
                    "omitted": false
                },
                "numeric_only": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "axis": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "self.columns": {
                    "value": "RangeIndex(start=0, stop=1, step=1, name='captain tightpants')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "self._constructor": {
                    "value": "<class 'pandas.core.frame.DataFrame'>",
                    "shape": "<property object at 0x11b00af40>",
                    "omitted": false
                },
                "self._constructor_sliced": {
                    "value": "<class 'pandas.core.series.Series'>",
                    "shape": "<property object at 0x111dc8040>",
                    "omitted": false
                },
                "interpolation": {
                    "value": "'linear'",
                    "shape": "6",
                    "omitted": false
                }
            },
            {
                "data": {
                    "value": "Empty DataFrame\nColumns: []\nIndex: [0, 1, 2, 3, 4]",
                    "shape": "(5, 0)",
                    "omitted": false
                },
                "is_transposed": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "data.T": {
                    "value": "Empty DataFrame\nColumns: [0, 1, 2, 3, 4]\nIndex: []",
                    "shape": "(0, 5)",
                    "omitted": false
                },
                "data.columns": {
                    "value": "Index([], dtype='object')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "cols": {
                    "value": "Index([], dtype='object', name='captain tightpants')",
                    "shape": "(0,)",
                    "omitted": false
                },
                "data._data": {
                    "value": "BlockManager\nItems: Index([], dtype='object')\nAxis 1: RangeIndex(start=0, stop=5, step=1)",
                    "shape": "(0, 5)",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self": "DataFrame",
                "q": "float",
                "numeric_only": "bool",
                "axis": "int",
                "self.columns": "RangeIndex",
                "self._constructor": "type",
                "self._constructor_sliced": "type",
                "interpolation": "str"
            },
            {
                "data": "DataFrame",
                "is_transposed": "bool",
                "data.T": "DataFrame",
                "data.columns": "Index",
                "cols": "Index",
                "data._data": "BlockManager"
            }
        ],
        [
            {
                "self": "DataFrame",
                "q": "list",
                "numeric_only": "bool",
                "axis": "int",
                "self.columns": "RangeIndex",
                "self._constructor": "type",
                "self._constructor_sliced": "type",
                "interpolation": "str"
            },
            {
                "data": "DataFrame",
                "is_transposed": "bool",
                "data.T": "DataFrame",
                "data.columns": "Index",
                "cols": "Index",
                "data._data": "BlockManager"
            }
        ]
    ],
    "3.1.1": [
        "DataFrame Quantile Broken with Datetime Data\n"
    ],
    "3.1.2": [
        "This works fine:\n\nIn [17]: pd.Series(pd.date_range('1/1/18', periods=5)).quantile()                                                                          \nOut[17]: Timestamp('2018-01-03 00:00:00')\nBut the equivalent method with a DataFrame raises:\n\nIn [18]: pd.DataFrame(pd.date_range('1/1/18', periods=5)).quantile()                                                                       \n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-18-68ffc067f6f0> in <module>\n----> 1 pd.DataFrame(pd.date_range('1/1/18', periods=5)).quantile()\n\n~/clones/pandas/pandas/core/frame.py in quantile(self, q, axis, numeric_only, interpolation)\n   7569                                      axis=1,\n   7570                                      interpolation=interpolation,\n-> 7571                                      transposed=is_transposed)\n   7572 \n   7573         if result.ndim == 2:\n\n~/clones/pandas/pandas/core/internals/managers.py in quantile(self, **kwargs)\n    500 \n    501     def quantile(self, **kwargs):\n--> 502         return self.reduction('quantile', **kwargs)\n    503 \n    504     def setitem(self, **kwargs):\n\n~/clones/pandas/pandas/core/internals/managers.py in reduction(self, f, axis, consolidate, transposed, **kwargs)\n    473 \n    474         # single block\n--> 475         values = _concat._concat_compat([b.values for b in blocks])\n    476 \n    477         # compute the orderings of our original data\n\n~/clones/pandas/pandas/core/dtypes/concat.py in _concat_compat(to_concat, axis)\n    172                 to_concat = [x.astype('object') for x in to_concat]\n    173 \n--> 174     return np.concatenate(to_concat, axis=axis)\n    175 \n    176 \n\nValueError: need at least one array to concatenate\nExpected Output\nThe DataFrame should return just as Series does\n"
    ]
}