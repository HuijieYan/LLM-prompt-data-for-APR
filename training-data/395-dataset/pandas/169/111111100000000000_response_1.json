{
    "pandas": [
        {
            "bugID": 169,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n        \"\"\"\n        Return values at the given quantile over requested axis.\n    \n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            Value between 0 <= q <= 1, the quantile(s) to compute.\n        axis : {'index', 'columns'}, default 0\n            The axis is used to calculate quantiles. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n        numeric_only : bool, default True\n            If False, the quantile of datetime and timedelta data will be computed as well.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            This optional parameter specifies the interpolation method to use when the desired quantile lies between two data points `i` and `j`. See the documentation of pandas.DataFrame.quantile for the interpolation method.\n    \n        Returns\n        -------\n        DataFrame or Series\n            If ``q`` is an array, a DataFrame will be returned. If ``q`` is a float, a Series will be returned.\n    \n        See Also\n        --------\n        core.window.Rolling.quantile: Rolling quantile.\n        numpy.percentile: Numpy function to compute the percentile.\n    \n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(1, 101).reshape(10, -1))\n        >>> df.quantile(.1)\n        0    10.1\n        1    11.1\n        2    12.1\n        3    13.1\n        4    14.1\n        Name: 0.1, dtype: float64\n        >>> df.quantile([.1, .5])\n               0     1   2   3    4\n        0.1  10.1  11.1  12.1  13.1  14.1\n        0.5  45.5  46.5  47.5  48.5  49.5\n        \"\"\"\n        self._check_percentile(q)\n    \n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        transposed = self._AXIS_TO_AXIS_NUMBER.get(axis, 0)  # if axis is not valid, transposed will be 0\n    \n        result = data._data.quantile(q, axis=transposed, interpolation=interpolation)\n    \n        if result.ndim == 2:\n            return self._constructor(result, index=q, columns=self.columns)\n        else:\n            result = self._constructor_sliced(result, name=q)\n    \n        return result",
            "imports": []
        }
    ]
}