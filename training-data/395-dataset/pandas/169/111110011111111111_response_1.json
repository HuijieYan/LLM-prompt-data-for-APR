{
    "pandas": [
        {
            "bugID": 169,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 8143,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    # existing code\n\n    # Check if the DataFrame contains only non-numeric data\n    if data.empty:\n        if isinstance(q, float):  # In case q is a float\n            result = pd.Series([], index=self.columns, name=q)\n        else:  # In case q is an array-like\n            result = pd.DataFrame([], index=q, columns=self.columns)\n        result.columns.name = self.columns.name\n    else:\n        # Perform the quantile computation as before\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n        if is_transposed:\n            data = data.T\n        result = data._data.quantile(\n            qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n        )\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n        if is_transposed:\n            result = result.T\n\n    return result",
            "imports": []
        }
    ]
}