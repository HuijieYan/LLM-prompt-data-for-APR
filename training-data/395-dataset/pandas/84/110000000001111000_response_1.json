{
    "pandas": [
        {
            "bugID": 84,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n    cnames = clocs[:-1]\n    clevel_names = data.index.names[:len(cnames)]\n    clevel_values = [data.index.get_level_values(n).unique() for n in clevel_names]\n\n    clocs = [clevel_names.index(c) for c in cnames]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    clocs_codes = [data.index.get_level_values(c).codes for c in cnames]\n\n    new_data = data.unstack(cnames, fill_value=fill_value)\n\n    unstacked_index = []\n\n    for i in range(len(clocs)):\n        level_values = clevel_values[i]\n        for value in level_values:\n            unstacked_index.extend([(c, value) for c in new_data.index])\n\n    new_columns = list(new_data.columns)\n    new_columns.insert(len(clocs), '__placeholder__')\n\n    reshaped_data = new_data.reindex(unstacked_index, columns=new_columns)\n\n    reshaped_index = [tuple(i) for i in unstacked_index]\n\n    reshaped_index = pd.MultiIndex.from_tuples(reshaped_index, names=index.names + [\"__placeholder__\"])\n\n    return reshaped_data",
            "imports": []
        }
    ]
}