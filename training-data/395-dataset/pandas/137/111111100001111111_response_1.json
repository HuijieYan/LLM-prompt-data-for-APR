{
    "pandas": [
        {
            "bugID": 137,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 502,
            "file_name": "pandas/core/arrays/categorical.py",
            "replace_code": "def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n\n        # GH 10696/18593\n        dtype = self.dtype.update_dtype(dtype)\n        if is_interval_dtype(dtype) and self.dtype != dtype:\n            # Convert the values to the new interval format\n            new_categories = pd.interval_range(start=self.categories[0].left, end=self.categories[-1].right, closed='both')\n            old_codes = self.codes.copy()\n            new_codes = pd.cut(self, bins=new_categories, labels=False)\n            self._set_categories(new_categories)\n            self._set_codes(new_codes)\n\n        self = self.copy() if copy else self\n        return self\n\n    if is_integer_dtype(dtype) and self.isna().any():\n        msg = \"Cannot convert float NaN to integer\"\n        raise ValueError(msg)\n    return np.array(self, dtype=dtype, copy=copy)",
            "imports": []
        }
    ]
}