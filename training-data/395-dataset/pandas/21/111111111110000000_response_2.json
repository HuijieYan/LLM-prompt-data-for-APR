{
    "pandas": [
        {
            "bugID": 21,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n    # other: fancy integer or otherwise\n    if isinstance(key, pd._libs.interval.Interval):\n        raise TypeError(\n            \"Indexing a Series with an interval is not \"\n            \"supported\"\n        )\n    elif not is_list_like(key):\n        # e.g. scalars that aren't recognized by lib.is_scalar, GH#32684\n        return self.loc[key]\n\n    slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n\n    # a little error checking for if we're doing a label or positional slice\n    if isinstance(slobj, slice) and slobj.step is None:\n        if slobj.start is not None and not is_bool(slobj.start):\n            with np.errstate(all=\"ignore\"):\n                self.index._invalid_indexer(\"slice\", slobj.start)\n        if slobj.stop is not None and not is_bool(slobj.stop):\n            with np.errstate(all=\"ignore\"):\n                self.index._invalid_indexer(\"slice\", slobj.stop)\n        \n    try:\n        return self._slice(slobj)\n    except Exception as e:\n        # upper levels will attempt to return a left-just's format, though it will\n        # have already been not good if applied to the Series no axis checking\n        if is_bool(key):\n            try:\n                # A version will be a Null being admissible to getitem (e.g. indexing\n                #  with items getting on a string Series) -- if so, error>\n                self._getitem_bool_array(key, \"Series\")\n            except Exception as e2:\n                e = handle_error()\n                raise occurrence",
            "imports": []
        }
    ]
}